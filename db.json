{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/ayer/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/clipboard.styl","path":"css/clipboard.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.css","path":"dist/main.css","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/main.js","path":"dist/main.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/404.jpg","path":"images/404.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer-side.svg","path":"images/ayer-side.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.png","path":"images/ayer.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/ayer.svg","path":"images/ayer.svg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/beian.png","path":"images/beian.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover7.jpg","path":"images/cover7.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/forkme.png","path":"images/forkme.png","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/mouse.cur","path":"images/mouse.cur","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/sponsor.jpg","path":"images/sponsor.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","path":"js/busuanzi-2.3.pure.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom1.js","path":"js/clickBoom1.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickBoom2.js","path":"js/clickBoom2.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/clickLove.js","path":"js/clickLove.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/dz.js","path":"js/dz.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover2.jpg","path":"images/cover2.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/ayer/source/dist/report.html","path":"dist/report.html","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover6.jpg","path":"images/cover6.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover3.jpg","path":"images/cover3.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover1.jpg","path":"images/cover1.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover4.jpg","path":"images/cover4.jpg","modified":0,"renderable":1},{"_id":"themes/ayer/source/images/cover5.jpg","path":"images/cover5.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/ayer/.gitattributes","hash":"2e08e93c6f6790b02ab7f81a6191ed097b20cbf9","modified":1609663432970},{"_id":"themes/ayer/.gitignore","hash":"00a4d5192b0b4119bfef78df5d18ccae5a12cb9e","modified":1609663432987},{"_id":"themes/ayer/.postcssrc","hash":"c171a60205840e3dcd3825d5bbb6b2d19d48ee76","modified":1609663432989},{"_id":"themes/ayer/.npmignore","hash":"f6b5e8f1a07d65c7654ec7f1de9002a4b2d3a1fc","modified":1609663432988},{"_id":"themes/ayer/.stylintrc","hash":"eec4e824067be1a223745ca426aa367c8d482673","modified":1609663432991},{"_id":"themes/ayer/.travis.yml","hash":"3e7e1618cc72c269e5fdc28e97cafb8b7b90ccd9","modified":1609663432992},{"_id":"themes/ayer/README.md","hash":"f796204bb2ac2065b35ab9e0e1937f3cbd4a6d30","modified":1609663432997},{"_id":"themes/ayer/LICENSE","hash":"d7308ddbd63bf372429401e188a906c52622f62e","modified":1609663432993},{"_id":"themes/ayer/_config.yml","hash":"f79232314157d72a7515db22f8f9f71eae4ee208","modified":1609745742191},{"_id":"themes/ayer/index.js","hash":"a144d64baec7130267f64272fb256a9be3aa7cd5","modified":1609663432999},{"_id":"themes/ayer/logo.png","hash":"16fbb131601570b21890a922cd6e596691ccff42","modified":1609663433066},{"_id":"themes/ayer/move_config.js","hash":"9fde64d58714990bf93ba877bbc3b48f6b8fb7d9","modified":1609663433067},{"_id":"themes/ayer/package.json","hash":"4db1c151c41c7b00be60b1172b2c8ac029a30cca","modified":1609663433067},{"_id":"themes/ayer/.github/FUNDING.yml","hash":"49e772bb69fec01a4a7bf9d440a28069f3df7970","modified":1609663432972},{"_id":"themes/ayer/.github/config.yml","hash":"d786334df2ea7feca64d07e573055c3452843f8a","modified":1609663432981},{"_id":"themes/ayer/languages/default.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":1609663433003},{"_id":"themes/ayer/languages/de.yml","hash":"7b516d228f6175a079e260f1d5eb105644bacd15","modified":1609663433002},{"_id":"themes/ayer/languages/en.yml","hash":"44e16cb5f43b5e17521a052d36fb7f66faf80c95","modified":1609663433005},{"_id":"themes/ayer/languages/fr.yml","hash":"deb03585d492faac20c360b3d96a1a7331dc0f78","modified":1609663433008},{"_id":"themes/ayer/languages/es.yml","hash":"7d44c39c9ab9c6f0b2e592e9f02a0b6b1b35daa8","modified":1609663433008},{"_id":"themes/ayer/languages/ja.yml","hash":"e6849a6c716b588bb17e19f72a61965c74570421","modified":1609663433011},{"_id":"themes/ayer/languages/ko.yml","hash":"6d645ed779b8427e5bb5c87c5989f3013c613baf","modified":1609663433013},{"_id":"themes/ayer/languages/nl.yml","hash":"86518a4aa58bdbd57361eb2340b2d5e9a684a035","modified":1609663433014},{"_id":"themes/ayer/languages/no.yml","hash":"2faf5999099765bd662d0979e35e0d43d06bd63c","modified":1609663433015},{"_id":"themes/ayer/languages/pt.yml","hash":"8ec0eacefc2ca124bafc86fe4fb23bd2b9cad8ab","modified":1609663433017},{"_id":"themes/ayer/languages/ru.yml","hash":"22f2e2310d7025b03950f450865a6c3ae66fe677","modified":1609663433018},{"_id":"themes/ayer/languages/vi.yml","hash":"768ed9dc0161990dcdfdc4054ec281dda4d7a33e","modified":1609663433018},{"_id":"themes/ayer/languages/zh-TW.yml","hash":"68ddd866f1e74515cfe92faa5a37a067d9308142","modified":1609663433020},{"_id":"themes/ayer/languages/zh-CN.yml","hash":"14d1fa64b52a252e2ed54a682c5d47b128780dcd","modified":1609663433019},{"_id":"themes/ayer/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1609725603035},{"_id":"themes/ayer/layout/categories.ejs","hash":"b2deae0c31dd7fbf42a124db1b4c8c28d435c8e5","modified":1609663433059},{"_id":"themes/ayer/layout/friends.ejs","hash":"2a4c0bfdf189ebae720f1325786a87c7cac51d37","modified":1609663433060},{"_id":"themes/ayer/layout/gg.htm","hash":"88f41c61286de2d4bad985d6cc189b28a681c749","modified":1609747168401},{"_id":"themes/ayer/layout/index.ejs","hash":"c40a98c0a6f55c27959e44c9e8e4f2619fc2ad3f","modified":1609663433060},{"_id":"themes/ayer/layout/layout.ejs","hash":"363fd530b1a455992f93ff7163518d30413caadd","modified":1609663433062},{"_id":"themes/ayer/layout/page.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1609663433062},{"_id":"themes/ayer/layout/plain-page.ejs","hash":"d351ff4aadd020a1960cc00f17fdd91a17e0cc54","modified":1609663433063},{"_id":"themes/ayer/layout/post.ejs","hash":"75879224e47b3329d7accfc2403580a2412dce25","modified":1609663433064},{"_id":"themes/ayer/layout/tags.ejs","hash":"e7c9f93c6f7041a7d2aa95e85cc131b22aa426b7","modified":1609736586703},{"_id":"themes/ayer/scripts/default_config.js","hash":"617c2614d8bd8ffda2f2f84ab54fb18866e39b33","modified":1609663433075},{"_id":"themes/ayer/source/404.html","hash":"b1395f87d2b6eaaed6eee6f0673e724e20a439c2","modified":1609663433115},{"_id":"themes/ayer/source/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1609663433121},{"_id":"themes/ayer/source-src/main.js","hash":"e42992bf24b2864e33ea5fdfab122b5d41851066","modified":1609663433113},{"_id":"source/categories/index.md","hash":"0ae5a83f4d9f8e55c9b8f1f84138b83ea90815fa","modified":1609745713678},{"_id":"source/friends/index.md","hash":"a3dec0bfa7fcb2a1ed37d37ea13842700cd1a698","modified":1609744725543},{"_id":"source/gg/index.md","hash":"79ef1e5a48737fdd34dec842c1e984f00ff16714","modified":1609745272123},{"_id":"source/tags/index.md","hash":"4767c7493033a7d163a4e9a71395c985779c5c05","modified":1609681108028},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/bug-report.md","hash":"23fa172c797258de232e1a5fd1794ce8a86c984f","modified":1609663432975},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/feature-request.md","hash":"ca76e0709f2e97edfa004922da78599ef35eb039","modified":1609663432977},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/other.md","hash":"e4c347d70c3b8044eec656e8cfb78cfd49f2d991","modified":1609663432977},{"_id":"themes/ayer/.github/ISSUE_TEMPLATE/question.md","hash":"20a7174d36e8f090ba7800c08b0c44b15b753736","modified":1609663432980},{"_id":"themes/ayer/.github/workflows/npmpublish.yml","hash":"6a748fbb9f13da90a00e35d1e8f54bbe71a14571","modified":1609663432984},{"_id":"themes/ayer/layout/_partial/ads.ejs","hash":"2be035aeef82265c5b0cb6aec6f4135ad1e0aa75","modified":1609663433022},{"_id":"themes/ayer/layout/_partial/after-footer.ejs","hash":"a9865e7262d4a5b5a724685f99db1846a1cbd168","modified":1609663433025},{"_id":"themes/ayer/layout/_partial/archive-post.ejs","hash":"6b3e77cdbf8271c2a22b839608cccaa651f84e93","modified":1609663433027},{"_id":"themes/ayer/layout/_partial/archive.ejs","hash":"0df02183889712350c9c852bcd5b2bab7ccd0ad1","modified":1609737080122},{"_id":"themes/ayer/layout/_partial/article.ejs","hash":"af6ae47b0cb5028089f72803312356e95309e69b","modified":1609663433029},{"_id":"themes/ayer/layout/_partial/ayer.ejs","hash":"061e5d25789c9a0c3df3172c0c53966053af89d1","modified":1609663433029},{"_id":"themes/ayer/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1609663433030},{"_id":"themes/ayer/layout/_partial/broadcast.ejs","hash":"21fadeb390cff713fd432d0565bb901f8caff0c0","modified":1609663433032},{"_id":"themes/ayer/layout/_partial/footer.ejs","hash":"16c6877db510a28afff0334be8d2ffe2f76d7a3e","modified":1609663433032},{"_id":"themes/ayer/layout/_partial/google-analytics.ejs","hash":"3a23d6ae48305c9f1b5c400da780288c2425254b","modified":1609663433033},{"_id":"themes/ayer/layout/_partial/head.ejs","hash":"f60e599d19f4a1c759a00a4c12a349506e65d467","modified":1609663433034},{"_id":"themes/ayer/layout/_partial/katex.ejs","hash":"02cb9da065cd315a06d62d13872dc687c62e9a1f","modified":1609663433035},{"_id":"themes/ayer/layout/_partial/mathjax.ejs","hash":"bcc264b6d6b58b3b692139c4d8b1381da4820da8","modified":1609663433035},{"_id":"themes/ayer/layout/_partial/modal.ejs","hash":"b9caece8b5fb47e250c67f6f80f101f08d04eba9","modified":1609663433036},{"_id":"themes/ayer/layout/_partial/music.ejs","hash":"4a67b36cadf2661a5579a454b7d6e0be34e7a0d4","modified":1609663433038},{"_id":"themes/ayer/layout/_partial/sidebar.ejs","hash":"b7efb7f2b300de23d12ef310d710d809d979f4fd","modified":1609663433055},{"_id":"themes/ayer/layout/_partial/totop.ejs","hash":"b2fc5726168f012bc61845f33a46404ff4065947","modified":1609663433056},{"_id":"themes/ayer/layout/_partial/viewer.ejs","hash":"219f0a0ec2eb35e8ba27a849639a5f634273fb6f","modified":1609663433057},{"_id":"themes/ayer/scripts/filters/index.js","hash":"e0c3b821ecd1cb614569282fb4f6e6f555545f8b","modified":1609663433077},{"_id":"themes/ayer/scripts/filters/meta_generator.js","hash":"46f6461a2bdc509837c36ede4d32c8b12e3d49b9","modified":1609663433077},{"_id":"themes/ayer/scripts/helpers/wordcount.js","hash":"2014b5c5053ad737887b61014a045cc1b08799cd","modified":1609663433080},{"_id":"themes/ayer/scripts/helpers/ayer-plus-vendors.js","hash":"611f3bcd8220312f92c11fa6a5dad02f011068d2","modified":1609663433080},{"_id":"themes/ayer/scripts/lib/core.js","hash":"00509e97554914e5b0a20e0843dc90bcf53461aa","modified":1609663433081},{"_id":"themes/ayer/source/css/clipboard.styl","hash":"145f335d6369744a75c2c39a50f63a88f720f85b","modified":1609663433115},{"_id":"themes/ayer/source/css/custom.styl","hash":"3753c4505761a66faccf736816f053e1e3489982","modified":1609663433116},{"_id":"themes/ayer/source/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":1609663433118},{"_id":"themes/ayer/source/dist/main.js","hash":"07c3bde3b9eb4184220b72f51bafa504401e7bec","modified":1609663433118},{"_id":"themes/ayer/source/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1609663433123},{"_id":"themes/ayer/source/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1609663433124},{"_id":"themes/ayer/source/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1609663433125},{"_id":"themes/ayer/source/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1609663433125},{"_id":"themes/ayer/source/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1609663433126},{"_id":"themes/ayer/source/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1609663433152},{"_id":"themes/ayer/source/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1609663433152},{"_id":"themes/ayer/source/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1609663433153},{"_id":"themes/ayer/source/images/sponsor.jpg","hash":"b3efa167f50cad85404c83f21dec2be570ed21dc","modified":1609663433154},{"_id":"themes/ayer/source/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1609663433156},{"_id":"themes/ayer/source/js/clickBoom1.js","hash":"daac19b1cf7381f1a36deb6ac5a4892e14774887","modified":1609663433156},{"_id":"themes/ayer/source/js/clickBoom2.js","hash":"fd61d8aeb2cfeaa0e548ac83a1ee1631979cbdb9","modified":1609663433157},{"_id":"themes/ayer/source/js/clickLove.js","hash":"a35dfb7ff19796c005ee30b55fd95e39d6d59a89","modified":1609663433158},{"_id":"themes/ayer/source/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1609663433158},{"_id":"themes/ayer/source/js/lazyload.min.js","hash":"d9bc50752cd7e331dbd0a833386838397c9a079f","modified":1609663433160},{"_id":"themes/ayer/source/js/search.js","hash":"6d5c093d12e922ad204dab1723b786c35847bf1b","modified":1609663433161},{"_id":"themes/ayer/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1609663433161},{"_id":"themes/ayer/source-src/css/_darkmode.styl","hash":"eda0bf55d64f2cdeb75f9489818c34635bc85c00","modified":1609663433083},{"_id":"themes/ayer/source-src/css/_extend.styl","hash":"996ed7faa5ebf69af1f14f90f774dc7a53774537","modified":1610774670172},{"_id":"themes/ayer/source-src/css/_mixins.styl","hash":"e4804d78ded3714495f8ac9cebdbd2871ed97549","modified":1609663433085},{"_id":"themes/ayer/source-src/css/_normalize.styl","hash":"b90386215434cc76549c046e7f67392049492a6a","modified":1609663433086},{"_id":"themes/ayer/source-src/css/_remixicon.styl","hash":"78f4dd8c613df005d6ecf6a073d96d38bbbe531e","modified":1609663433110},{"_id":"themes/ayer/source-src/css/_variables.styl","hash":"2fdb4425b6213fed28921f53179e825aee0500cf","modified":1609663433110},{"_id":"themes/ayer/source-src/css/style.styl","hash":"6106e6f53be4bbc13fe8a69ed6d40052bdeb49f8","modified":1609663433111},{"_id":"themes/ayer/source-src/js/ayer.js","hash":"acc2b740765f8fc3b0e8c27f3226cc74b865f127","modified":1609663433112},{"_id":"themes/ayer/source-src/js/share.js","hash":"e8fd85622f774be877438421c182cd37eb15196e","modified":1609663433113},{"_id":"source/_posts/GIS/ArcGIS二次开发基础配置说明.md","hash":"1d50d46518f0be5de5fba8ebeeccbe1aa9d877f7","modified":1610338829980},{"_id":"source/_posts/GIS/OSM数据基本操作.md","hash":"f784fdff7d3b5caef95c5963bf3a36081ded11a5","modified":1610338850021},{"_id":"source/_posts/GIS/QGis地表覆盖图编制.md","hash":"a22d3c3d6ce9ad624bd6e61aabf8a625820e135a","modified":1610338874123},{"_id":"source/_posts/GIS/QGis专题地图编制.md","hash":"bea1df943031d262a426ab97c85db21a7dd4e99d","modified":1597418678946},{"_id":"source/_posts/GIS/对一个文件夹下的图像进行整体操作.md","hash":"a24585f3d2d6f50816c6b1b7f22fe8e09b078dd4","modified":1610338903041},{"_id":"source/_posts/工具使用/Ubuntu常用快捷键.md","hash":"f82ca4bc377464249d0fc985c15c6181eb85fd40","modified":1610339969338},{"_id":"source/_posts/工具使用/git的基本命令.md","hash":"5bafca2ee3b9147cf195636d147ae54e6d856de2","modified":1610339935075},{"_id":"source/_posts/工具使用/latex基本用法.md","hash":"35e2832bf89e8240aa6433d28abb13b253669c98","modified":1610339955933},{"_id":"source/_posts/工具使用/vi基本用法.md","hash":"45bee426f25e03acb4e1216c05320d5e14b527ce","modified":1610339984679},{"_id":"source/_posts/问题解决/Git出现的报错合集.md","hash":"6ca45c1627992d9d6fe81aaffff4f26eb865d0c5","modified":1610341004034},{"_id":"source/_posts/问题解决/Ubuntu安装摘记.md","hash":"d42334802f1fa9120baf7574d47abc89c2ee88b4","modified":1610341017814},{"_id":"source/_posts/问题解决/conda产生的bug处理.md","hash":"7814f71b60c3beefe0f8468a1dd4b2566c209757","modified":1610340984336},{"_id":"themes/ayer/source/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1609663433124},{"_id":"themes/ayer/source/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1609663433133},{"_id":"themes/ayer/source/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1609663433155},{"_id":"themes/ayer/source/js/jquery-2.0.3.min.js","hash":"e68550a39c95a6400287b3abd77f40c44f322e50","modified":1609663433160},{"_id":"themes/ayer/layout/_partial/post/albums.ejs","hash":"f4cfbabca9f59a9e5aa457a6f2a9cf6f56cd22b3","modified":1609663433038},{"_id":"themes/ayer/layout/_partial/post/busuanzi.ejs","hash":"4c7a9191658395bcac45dcd07c165af8773cffa9","modified":1609663433039},{"_id":"themes/ayer/layout/_partial/post/category.ejs","hash":"89cb32e8d98bad81d3ef33377212e9b253699d3d","modified":1609663433041},{"_id":"themes/ayer/layout/_partial/post/clipboard.ejs","hash":"c93d82de1635536a633b6254b604590ab4428594","modified":1609663433041},{"_id":"themes/ayer/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1609663433042},{"_id":"themes/ayer/layout/_partial/post/gitalk.ejs","hash":"b8514325f462a99abefa922747312a907dc0140b","modified":1609663433044},{"_id":"themes/ayer/layout/_partial/post/gallery.ejs","hash":"6f78a49edc91f230b0a838c77630e9671d8d6089","modified":1609663433043},{"_id":"themes/ayer/layout/_partial/post/justifiedGallery.ejs","hash":"a313df6a014a0f2ba6b869dabc56bacb8ff6324d","modified":1609663433045},{"_id":"themes/ayer/layout/_partial/post/minivaline.ejs","hash":"bc41af88b2b85f638ab7bd4cf0b227510ccb0108","modified":1609663433046},{"_id":"themes/ayer/layout/_partial/post/nav.ejs","hash":"a73010cbbc463089a1376889850fb0890143c988","modified":1609663433046},{"_id":"themes/ayer/layout/_partial/post/search.ejs","hash":"47c818c236b063d6ce0c41e0824f9f10a3521414","modified":1609663433048},{"_id":"themes/ayer/layout/_partial/post/share.ejs","hash":"9a978d55358878c97186ed010e536e1b314adb35","modified":1609663433048},{"_id":"themes/ayer/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1609663433049},{"_id":"themes/ayer/layout/_partial/post/title.ejs","hash":"e55c57b8cb8c8acf0ed998ea31c2fbc1d6256027","modified":1609663433050},{"_id":"themes/ayer/layout/_partial/post/topping.ejs","hash":"de2c50fb5b7a816287c6d048a2a22ae9c29abcdd","modified":1609663433051},{"_id":"themes/ayer/layout/_partial/post/tocbot.ejs","hash":"17ac504f2a6d561765046a0ba19dcce504104517","modified":1609663433051},{"_id":"themes/ayer/layout/_partial/post/twikoo.ejs","hash":"7f064611a2297dda84e6b329252e838666ac7c93","modified":1609663433053},{"_id":"themes/ayer/layout/_partial/post/valine.ejs","hash":"b71f2af08c1916b3c5ef3a553a1df16f1787af24","modified":1609663433053},{"_id":"themes/ayer/layout/_partial/post/word.ejs","hash":"5b785368a0a6f3b5538aa1b9e7574daa8dfb0df6","modified":1609663433054},{"_id":"themes/ayer/source/dist/report.html","hash":"24add8d4e8975f8cf507e8030c0e00fde2bac563","modified":1609663433120},{"_id":"themes/ayer/source/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1609663433151},{"_id":"themes/ayer/source-src/css/_partial/ads.styl","hash":"e3e533ac5b9b6c5ef7d3829c890aff42dc29cfc1","modified":1609663433088},{"_id":"themes/ayer/source-src/css/_partial/albums.styl","hash":"5802253789028a4d9dac474168fc7132045e72ff","modified":1609663433089},{"_id":"themes/ayer/source-src/css/_partial/apple.styl","hash":"333f9e59dc6625c4dee126a1c1a9c25ce9292655","modified":1609663433090},{"_id":"themes/ayer/source-src/css/_partial/archive.styl","hash":"9dbb04cf0ae07b50acd6f343e673df215a3c868e","modified":1609663433091},{"_id":"themes/ayer/source-src/css/_partial/article.styl","hash":"c93c96bccfafe568cebbeb14bf577e97cb6e3c64","modified":1609663433093},{"_id":"themes/ayer/source-src/css/_partial/articles.styl","hash":"ddbe833939180afdc832659c5cdad08f77ef4f46","modified":1609663433093},{"_id":"themes/ayer/source-src/css/_partial/ayer.styl","hash":"cfcae3839170f2d04ea504a3cd3d62a9cde6647d","modified":1609663433094},{"_id":"themes/ayer/source-src/css/_partial/categories.styl","hash":"cb3b1667c83182d6309e6d066f53f2771723729e","modified":1609663433095},{"_id":"themes/ayer/source-src/css/_partial/float.styl","hash":"b1abfdfd05e74745484f7e6d043ef2842b3f6b41","modified":1609663433096},{"_id":"themes/ayer/source-src/css/_partial/footer.styl","hash":"ae22e9d1525f267be368359ed0096f26791b809e","modified":1609663433097},{"_id":"themes/ayer/source-src/css/_partial/friends.styl","hash":"10332c63736e4ce31353b7605012caf744a8286a","modified":1609663433098},{"_id":"themes/ayer/source-src/css/_partial/gallery.styl","hash":"f5eae1b0030cfd97f1646844c9d3f692dbb38946","modified":1609663433099},{"_id":"themes/ayer/source-src/css/_partial/gitalk.styl","hash":"0678e8b330daea56fa30d14e97de73289a7d6f22","modified":1609663433100},{"_id":"themes/ayer/source-src/css/_partial/highlight.styl","hash":"1210f704aae34ef653e3a458cccb700b05353ea1","modified":1609663433101},{"_id":"themes/ayer/source-src/css/_partial/justifiedGallery.styl","hash":"9828c78fb59c3ea3de7cce2569313d12c4b1a6ff","modified":1609663433102},{"_id":"themes/ayer/source-src/css/_partial/layout.styl","hash":"d4613f176636cae6a4af6124863a176c32ea6471","modified":1609663433103},{"_id":"themes/ayer/source-src/css/_partial/lists.styl","hash":"dc45f8b1a5942d4d979fb0859bc47a86f73fe0a9","modified":1609663433104},{"_id":"themes/ayer/source-src/css/_partial/mobile.styl","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1609663433105},{"_id":"themes/ayer/source-src/css/_partial/navbar.styl","hash":"30d7e1de22185c4b4da33eef66b5eb96f9e5ae98","modified":1609663433106},{"_id":"themes/ayer/source-src/css/_partial/pace.styl","hash":"bbda18c692fc66ae99e45347ff52c14e44a08e3b","modified":1609663433106},{"_id":"themes/ayer/source-src/css/_partial/reward.styl","hash":"924114f723a22dbb8970d023bc2e033141b3438d","modified":1609663433108},{"_id":"themes/ayer/source-src/css/_partial/search.styl","hash":"3f2c7bd1371f6f25aec7c581dbae7b52f95ec4c6","modified":1609663433108},{"_id":"themes/ayer/source-src/css/_partial/share.styl","hash":"4a6e6ac9156553dd5cee1eeee8fdc6f1f8a5d117","modified":1609663433108},{"_id":"themes/ayer/source-src/css/_partial/sidebar.styl","hash":"cdc7bea47a768b18991decde0d38c554399621ee","modified":1609663433108},{"_id":"themes/ayer/source-src/css/_partial/tag.styl","hash":"6072aa6bd16e0a1e75f0258d7b20587cab56fff8","modified":1609663433109},{"_id":"themes/ayer/source-src/css/_partial/tocbot.styl","hash":"2135ab02e098ddfaaa60009d8413186a564af840","modified":1609663433109},{"_id":"themes/ayer/source-src/css/_partial/totop.styl","hash":"b6010788be1d99a345abcf0cf9cdf0a564b90d3c","modified":1609663433110},{"_id":"source/_posts/AI相关/TensorFlow2/TF2原生语法构建简单网络.md","hash":"e6af4068171dd91995392cdc90ac0306817d2444","modified":1610340184265},{"_id":"source/_posts/AI相关/TensorFlow2/TF2存储模型参数等基本操作.md","hash":"fa565297320f01a247c048f05d4be89baf5a8727","modified":1610340143016},{"_id":"source/_posts/AI相关/TensorFlow2/TF2实现经典CNN架构.md","hash":"cf502d381c42ec66ef6c26f0a8a144e5dcbb4477","modified":1610340169622},{"_id":"source/_posts/AI相关/TensorFlow2/使用TF2创建数据集.md","hash":"76ffc30bbb124b56ce86048cc84f0f3c02f237e9","modified":1610340224672},{"_id":"source/_posts/AI相关/TensorFlow2/TF2的基础函数.md","hash":"822f01cb2554aeecddaf298247766f994df10ec0","modified":1610340156993},{"_id":"source/_posts/AI相关/TensorFlow2/使用TensorFlow Hub进行迁移学习.md","hash":"867466d0c47c60228cc5d028ea51e607852e1a55","modified":1610340195123},{"_id":"source/_posts/AI相关/TensorFlow2/使用tf.keras快速搭建网络.md","hash":"b1819ba0a998f8f7049d871a5d60fb7854ed18e0","modified":1610340212819},{"_id":"source/_posts/AI相关/机器学习/PCA算法.md","hash":"2b3d061e81aeea1eecc290bcdb5cf55dd20d2bd0","modified":1610340261066},{"_id":"source/_posts/AI相关/机器学习/机器学习基础方法与应用.md","hash":"38dbe5421dcbeca52997b4cfa04c982e6990a4b0","modified":1610340278225},{"_id":"source/_posts/AI相关/机器学习/神经网络基础概念总结.md","hash":"3e6ce40a965ea15fdd19f59c9b36f109935a76b6","modified":1610340307797},{"_id":"source/_posts/AI相关/机器学习/逻辑回归.md","hash":"b7267e16b918d7d22bf83569d8dd7be56d0fee6c","modified":1610340289950},{"_id":"source/_posts/AI相关/论文阅读/DPOD.md","hash":"4198981f0ac5f77ededfb934f951a66f3e01d34f","modified":1610340350738},{"_id":"source/_posts/AI相关/论文阅读/DeepIM.md","hash":"2a0a714b1f2b83fd33f241ca9b193fa9e4045102","modified":1610340338384},{"_id":"source/_posts/AI相关/论文阅读/NOCS.md","hash":"a8e594ec8ffb4137e8efc9a34da85ee5b0ade534","modified":1610340376475},{"_id":"source/_posts/AI相关/论文阅读/FCN.md","hash":"454ad0c83f81df584dfd83702149ff6c8fe63037","modified":1610340364056},{"_id":"source/_posts/学习笔记/数据结构与算法/1、动态数组.md","hash":"b24a16516063ea7585afd4423e549fb3e8d41329","modified":1610340659930},{"_id":"source/_posts/学习笔记/数据结构与算法/4、链表.md","hash":"62750bfe7d6dd570ecd6539733887110d3b29e51","modified":1610340683360},{"_id":"source/_posts/学习笔记/数据结构与算法/2、栈.md","hash":"c73820e35c68ccefb08c4b2211a181d15db531e1","modified":1610340668333},{"_id":"source/_posts/学习笔记/数据结构与算法/3、队列.md","hash":"d5a7b31b71021a33ddda62d1e5b4af17dba67216","modified":1610340675579},{"_id":"source/_posts/学习笔记/数据结构与算法/5.1、树与二叉树.md","hash":"b58df0669480f384e05ea90db41278158b4d9daa","modified":1610340690418},{"_id":"source/_posts/学习笔记/数据结构与算法/5.2、二叉搜索树.md","hash":"4675a760c95f283e75832396e4b6526f8d9e4ca8","modified":1610340698572},{"_id":"source/_posts/学习笔记/数据结构与算法/5.3、AVL树.md","hash":"dcfbfc8ddb7de419c2f8cbfc801fc06149978d23","modified":1610340705412},{"_id":"source/_posts/学习笔记/数据结构与算法/5.4、红黑树.md","hash":"1a15bd1b14c0f15feb468da45f172e0c3d2fbb06","modified":1610340712423},{"_id":"source/_posts/学习笔记/数据结构与算法/6、集合与映射.md","hash":"cf019fc0acd18bbf0b1ca6e1def350ee2fcf1122","modified":1610340719184},{"_id":"source/_posts/学习笔记/数据结构与算法/7、堆与优先队列.md","hash":"59fb9cabcc8e36d70b7ad19e07928a70b99a82b7","modified":1610340726321},{"_id":"source/_posts/学习笔记/数据结构与算法/9.1、图的遍历及应用.md","hash":"93316e1dd4a28fe4e8f0b98c683fda5d0afb8923","modified":1610340752727},{"_id":"source/_posts/学习笔记/数据结构与算法/8、哈希表.md","hash":"5a4522a9baec130ca17bfb044fc68b2a827cb5a7","modified":1610340739172},{"_id":"source/_posts/学习笔记/数据结构与算法/9、图的概念与存储结构.md","hash":"b7978af73c45f4cddcb3c1476d2fd585dffcb5cd","modified":1610340746035},{"_id":"source/_posts/学习笔记/数据结构与算法/并查集.md","hash":"edfdb73eee783e9a8dc0119115e48ab0217de0de","modified":1610340762744},{"_id":"source/_posts/学习笔记/数据结构与算法/线段树.md","hash":"72b151a81d3de39e4360f07c5fa1b2eb78563182","modified":1610340770675},{"_id":"source/_posts/学习笔记/计算机网络（自顶向下方法）/第一章：计算机网络与英特网.md","hash":"1f29aca0be042897a2c7b8a2b77b0712a844b966","modified":1610340521691},{"_id":"source/_posts/学习笔记/计算机网络（自顶向下方法）/第三章：传输层.md","hash":"0666145cf60907bf0f01ede7329490c1afb2c510","modified":1610340545203},{"_id":"source/_posts/学习笔记/计算机网络（自顶向下方法）/第二章：应用层.md","hash":"f6022f99d7e80cc157d42f239fff15e55356ba7f","modified":1610340532089},{"_id":"source/_posts/学习笔记/鸟哥的Linux私房菜/1、命令行基础.md","hash":"5079e7e70792e32622e54ff78661f1f8669c526a","modified":1599139848203},{"_id":"source/_posts/学习笔记/鸟哥的Linux私房菜/2、文件路径操作命令.md","hash":"526c5d3467eb13ea2953c8c72d101f7588b37b45","modified":1599139862309},{"_id":"source/_posts/学习笔记/鸟哥的Linux私房菜/4、权限.md","hash":"662940f9e9474410272972f4fc9071602c0160d5","modified":1599139891566},{"_id":"source/_posts/学习笔记/鸟哥的Linux私房菜/3、命令行IO重定向.md","hash":"ec6f15d92e72cb35584b77a2163c6fff00235b30","modified":1599139878406},{"_id":"source/_posts/学习笔记/鸟哥的Linux私房菜/5、控制台进程管理.md","hash":"6906996e7696b1c65f3d0b2f9dc76f4652348b16","modified":1599139905429},{"_id":"source/_posts/杂谈杂想/杂想/改变.md","hash":"70c7287392e94e9f2e58589cecb89ab5a47d419b","modified":1610340438962},{"_id":"source/_posts/杂谈杂想/杂想/雨与晴.md","hash":"4d9a7063c12fec806eb7cb74e9d60cc55fd80321","modified":1610340459236},{"_id":"source/_posts/杂谈杂想/杂谈/务虚时代下的国贼——李鸿章.md","hash":"4650e131fb6a75185252ee8e4761e456b10645c1","modified":1610340416387},{"_id":"source/_posts/编程相关/Android/Android开发一：HelloWorld.md","hash":"f667dd749caadd275903b8764d89813e1aff611d","modified":1610338933265},{"_id":"source/_posts/编程相关/Android/Android开发三：布局（layout）.md","hash":"4d1f7d08045767918a29ad4e237f2ce205fb87f6","modified":1610338983960},{"_id":"source/_posts/编程相关/Android/Android开发二：活动（Activity）.md","hash":"04daa90c7057283808db82b45d5814ef6aa6b4cf","modified":1610338958133},{"_id":"source/_posts/编程相关/Android/Android开发五：广播机制.md","hash":"8127f9db65fc7cf06a3dbb6463d2e1466f610452","modified":1610339012612},{"_id":"source/_posts/编程相关/Android/Android开发四：碎片（Fragment）.md","hash":"42e4ba6c50327fd68624ebac5bd2cd82db470ec4","modified":1610338995613},{"_id":"source/_posts/编程相关/CSS/CSS基础.md","hash":"befa222949494cdb24d292a27312f8adbdc65346","modified":1610339045565},{"_id":"source/_posts/编程相关/CSS/CSS3：transition与transform.md","hash":"0bea258565e11bef54336f8473d7367ada1954e4","modified":1610339075854},{"_id":"source/_posts/编程相关/CSS/CSS定位与浮动.md","hash":"09589ae46e496d1929f9948b13bce79db3ecfe07","modified":1610339059631},{"_id":"source/_posts/编程相关/JavaScript/1.1、JS基本数据类型.md","hash":"26976506238dbfe948c4c2ed7fca494adfa5fc06","modified":1610339269440},{"_id":"source/_posts/编程相关/JavaScript/1.2、JS内置对象使用.md","hash":"3aab909446ac7151e6482a092d28d1aeecdbc136","modified":1610339283955},{"_id":"source/_posts/编程相关/JavaScript/1.3、JS中的类与对象.md","hash":"fa61980235406fc4116183bf460dde7db60a3158","modified":1610339297286},{"_id":"source/_posts/编程相关/JavaScript/1、JS基础.md","hash":"237a5651f96f227882e554cc7d318f4ed20078ac","modified":1610339256193},{"_id":"source/_posts/编程相关/JavaScript/2.1、JS事件处理.md","hash":"c3e2ce339e86d2a4b87d5411e43e388842b9d501","modified":1610339327020},{"_id":"source/_posts/编程相关/JavaScript/2、DOM节点基本操作.md","hash":"edcfadbe6f78fa62597fdbc26c078ad2d43f5861","modified":1610339313343},{"_id":"source/_posts/编程相关/JavaScript/3、BOM基本内容.md","hash":"3ea791bc90f29399f84b10d6766bddef04f3c866","modified":1610339338210},{"_id":"source/_posts/编程相关/JavaScript/event对象详解.md","hash":"d667de4389d16c61a9ac6c87ed0d2e439c687f7e","modified":1610339346774},{"_id":"source/_posts/编程相关/Python/Blender物体渲染脚本.md","hash":"e705597500185d0d384bb447d69e5ec14e063f83","modified":1610341430132},{"_id":"source/_posts/编程相关/Python/Python实现深度图转点云.md","hash":"50b025449a8db5a1940f0372ce68bac98b84786c","modified":1610341520105},{"_id":"source/_posts/编程相关/Python/pygame基础.md","hash":"3589ca4d14f3d8ad1ef70b2f39600dc5b7306dec","modified":1610341403072},{"_id":"source/_posts/编程相关/Python/Python操作MySQL数据库.md","hash":"8ba01cb7ed0371893242070349d8302a78e67ff8","modified":1610341461055},{"_id":"source/_posts/编程相关/Python/使用plyfile库对-ply文件进行读写操作.md","hash":"fbb5f0c19542b07e410b874ce3ffb210e2281df5","modified":1610341510583},{"_id":"source/_posts/编程相关/SQL/SQL的一些机制.md","hash":"98df68ec72549503710b5c568ee3eeec27c88bb9","modified":1610340836275},{"_id":"source/_posts/编程相关/SQL/SQL的增删改等语句.md","hash":"0d4bb4075874b85f1382af787a4b56d23f001ccf","modified":1610340850968},{"_id":"source/_posts/编程相关/SQL/SQL语句——查.md","hash":"dc089ec9a304f319dbfc0e705020952d8567e111","modified":1610340874005},{"_id":"source/_posts/问题解决/Hexo/Hexo博客搭建.md","hash":"c74b1eea32a19c53b2781424d9c6b8cef75a9dfb","modified":1610340961750},{"_id":"source/_posts/问题解决/Hexo/Hexo实现多台机器同时编写博客.md","hash":"0d437b80c87e762216f0aa089449585804ed5836","modified":1610340965438},{"_id":"source/_posts/问题解决/Hexo/Hexo博客部署到腾讯云服务器全流程.md","hash":"0c167b1b0365803002c7ea9d70cf319190faee3b","modified":1610340921573},{"_id":"source/_posts/AI相关/机器学习/线性回归的拓展.png","hash":"7c4e3fe761490aed926ff32eed62177cde4447c2","modified":1602908486110},{"_id":"themes/ayer/source/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1609663433136},{"_id":"source/_posts/编程相关/Android/Android开发五：广播机制/VX{R8MK(4T~%IMBCRX(QUHL.png","hash":"b197998a55393815a6ede25f791b1b9256852f4d","modified":1599460498973},{"_id":"source/_posts/编程相关/Android/Android开发五：广播机制/标准广播.png","hash":"30ec4f5fdda40aa6183d721f851bf07c97eca07c","modified":1599462813622},{"_id":"source/_posts/编程相关/CSS/CSS3：transition与transform/过渡完成.png","hash":"57d1927016e752e12d328a905b93921955ee2fa4","modified":1597561107541},{"_id":"source/_posts/编程相关/Java/Java基础语法/1、Java基础语法.md","hash":"99c7b6528698fdaaeb3fdb933115454a56495a69","modified":1610339126176},{"_id":"source/_posts/编程相关/Java/Java基础语法/2、Java面向对象.md","hash":"3ce7666b0812ede5761d5b73917911d27566674b","modified":1610339136208},{"_id":"source/_posts/编程相关/Java/Java基础语法/3、Java接口与抽象类.md","hash":"d6385ad7aa97b3096757e05f15e6e9d13ce255db","modified":1610339161245},{"_id":"source/_posts/编程相关/Java/Java基础语法/4、Java容器.md","hash":"c67f6423631a081928c81568eb6c1ec3d1ccaf31","modified":1610339169326},{"_id":"source/_posts/编程相关/Java/Java基础语法/5、Java异常.md","hash":"f40f929031de33bfcbe5b8fe5ae1755ec9435d8d","modified":1610339176654},{"_id":"source/_posts/编程相关/Java/Java基础语法/6、Java泛型.md","hash":"e91f5e58157d3e7f3e1bd5063e6007c39ff847ed","modified":1610339183667},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流.md","hash":"8017194958e9a47fb119d2d0695b5226fa3755e3","modified":1610339192498},{"_id":"source/_posts/编程相关/Java/Java基础语法/8、Java多线程.md","hash":"5269466635b36a03f4094625bd1f4e24f79e465a","modified":1610339200334},{"_id":"source/_posts/编程相关/Java/Java基础语法/Java字符串.md","hash":"f2650bf656ffb0dad2f9d13b59dcfdbeb38cae00","modified":1610339224053},{"_id":"source/_posts/编程相关/Java/Java基础语法/Java父类引用指向子类对象.md","hash":"00e9e740e5cb4d675fa555b3c5184307590b76fe","modified":1610339209532},{"_id":"source/_posts/编程相关/Java/Java基础语法/Java算法题的常用语法.md","hash":"7219ad19d0c273a1a0a25f67c51ca9f54e91559f","modified":1610339216465},{"_id":"source/_posts/编程相关/JavaScript/新建文件夹 (2)/字符串变数组.png","hash":"89dfdf877d7b74e17000713dfd44b3b3efc4ec90","modified":1596102837744},{"_id":"source/_posts/编程相关/Python/PyQt5/Anaconda+PyCharm配置PyQt5全过程.md","hash":"d12d4545371e53b5725321f0ff342b4762d7a664","modified":1610339487390},{"_id":"source/_posts/编程相关/Python/PyQt5/PyQt5基本组件.md","hash":"c9644cfbced9d392b4867e0ce5f67e3842ec07b2","modified":1610339508399},{"_id":"source/_posts/编程相关/Python/PyQt5/信号与槽.md","hash":"6abcb852e68dd51d011c76e1e415e3dd0106e9ed","modified":1610339546262},{"_id":"source/_posts/编程相关/Python/Python基础/1、Python基本数据类型.md","hash":"874f3a5bbc68ea330e5c2857110722326c9e0943","modified":1610339566614},{"_id":"source/_posts/编程相关/Python/Python基础/2、Python函数相关内容.md","hash":"da7328a555ab1dd41a3560e28d600674f5b74a6d","modified":1610339656529},{"_id":"source/_posts/编程相关/Python/Python基础/3、Python类的使用.md","hash":"8fc5642cf096cac95454b47304226d1aa19aa955","modified":1610339646577},{"_id":"source/_posts/编程相关/Python/Python基础/4、Python模块与文件读写.md","hash":"15c1970820b9bd3315967f16fd148a858c34fd3c","modified":1610339638996},{"_id":"source/_posts/编程相关/Python/Python基础/5、Python装饰器、迭代器、生成器.md","hash":"347517e62c18ed249601d4d58f5585f571cf34d3","modified":1610339629685},{"_id":"source/_posts/编程相关/Python/Python基础/6、Python异常处理.md","hash":"6b691ea89e6f55660fc1898be1f626c9f74cb7de","modified":1610339680118},{"_id":"source/_posts/编程相关/Python/Python基础/7、Python的线程与进程.md","hash":"9b3aef7e928ae57007ee67018ff644c0255d0a14","modified":1610339694676},{"_id":"source/_posts/编程相关/Python/Python基础/Python中的魔法方法（Magic Method）.md","hash":"69c61135f5024d13cba3542551f590b39ddb72ac","modified":1610339736689},{"_id":"source/_posts/编程相关/Python/Python基础/8、Python的一些语言特性与机制.md","hash":"2516db855b89a193d85682c5c6eb6811d64e7977","modified":1610339713211},{"_id":"source/_posts/编程相关/Python/Python基础/python常见问题.md","hash":"20fe7045744216dc4f5b9cbf4ccf2d82abcbfe74","modified":1610339726080},{"_id":"source/_posts/编程相关/Python/Python常用模块/Numpy常用属性与方法.md","hash":"5ce7315096e571c38948755352a5b030e3673703","modified":1610339840413},{"_id":"source/_posts/编程相关/Python/Python常用模块/Pandas库基本用法.md","hash":"8802e99ca179bbffacfdfc2d8b4bd31d9e890a8a","modified":1610339824175},{"_id":"source/_posts/编程相关/Python/Python常用模块/路径操作常用模块（os与pathlib）.md","hash":"4b02af7a0221cac9e7e93528f3ae3c7333970331","modified":1610339862728},{"_id":"source/_posts/编程相关/Python/Python常用模块/matplotlib库基本使用.md","hash":"62289ab2ff232650c7d71c814b73b0e07becf25d","modified":1610339805608},{"_id":"source/_posts/编程相关/Python/爬虫/bs4库基本使用.md","hash":"3519f94d79ebeb5955d1138672b823bc32240da8","modified":1610339880836},{"_id":"source/_posts/编程相关/Python/爬虫/requests库基本使用.md","hash":"10e652e923e77028efdd75d4ec1ab6bec6399bbd","modified":1610339888340},{"_id":"themes/ayer/source/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1609663433131},{"_id":"source/_posts/编程相关/Java/Java基础语法/1、Java基础语法/java-deep-and-shallow-copy.jpg","hash":"fa9a14cc4aef02365781de7561dae80c940c4c56","modified":1595935532142},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/Java流类图结构.jpg","hash":"616e3038e922889ca9a2196ea9fa90ef69938cfe","modified":1599711558262},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/字符流输入输出对应图.png","hash":"d5d3b482186da2be091e8ec73f36d434ca5c16d1","modified":1599715437925},{"_id":"themes/ayer/source/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1609663433141},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/字节流输入输出对应图.png","hash":"1fc26fb2e3f767d33eee1a13c4a80306577748ae","modified":1599711782598},{"_id":"source/_posts/编程相关/Python/爬虫/requests库基本使用/requests对象属性.png","hash":"da031fa2f2f915c7baedeb387dcbb381ce9924d3","modified":1597317967551},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/83CB`(U[UBB0WH{F1K)2Z{O.png","hash":"64ff175b82373666a2905823424dbcff5efde948","modified":1599720236249},{"_id":"source/_posts/编程相关/Python/爬虫/requests库基本使用/7个主要方法.png","hash":"05fa488b015502a469fb02eba75e363189288702","modified":1597317762163},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/(W}3]BGOGZH$)P6V9CS}M5Y.png","hash":"0b3ab7584cbb692473ba7c8d54edc6ee5cc5350e","modified":1599720168140},{"_id":"source/_posts/编程相关/SQL/SQL语句——查/sql连接.png","hash":"06d5f913bbcbd15859036903c9593214dc8d1eec","modified":1592839741850},{"_id":"source/_posts/编程相关/Java/Java基础语法/5、Java异常/exception-chart.png","hash":"d7b6efe4d81c74c568cd4f8c39e9249690e68c1b","modified":1595941075148},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/I]7UIWCIWPK`343{2N6XV54.png","hash":"2e572a6809bc03fb2ad962a788eec831485ed6ac","modified":1599718531505},{"_id":"source/_posts/编程相关/Java/Java基础语法/7、Java输入输出流/N(8WDF5IZ6AI}ZQ6SCW0GN2.png","hash":"1f9261f668d026e9915c6abcb466cc4661f10057","modified":1599718616019},{"_id":"themes/ayer/source/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1609663433149},{"_id":"public/baidu_urls.txt","hash":"9a73ebf6ec78622114da0ef7646cc3901953b36d","modified":1614527607522},{"_id":"public/baidusitemap.xml","hash":"a2574080d3268749c2b241df34d0fb56a5bc5056","modified":1614527607522},{"_id":"public/sitemap.xml","hash":"6e3ad95856be388a73c1e1d569c40c8105b98e0e","modified":1614527607522},{"_id":"public/search.xml","hash":"1332637dcca23b9d65935d7d23375b3d07f1a28d","modified":1614527607522},{"_id":"public/friends/index.html","hash":"e912ff0847b1298f9801d3b52c6d181d63ef4f89","modified":1614527200985},{"_id":"public/tags/index.html","hash":"1c0dd37970854c35dff06ef41b925ae7f10edbc9","modified":1614527607522},{"_id":"public/archives/2019/index.html","hash":"27a26eea6f69f56670b5a7a447484432dddc41bb","modified":1614527200985},{"_id":"public/archives/2019/02/index.html","hash":"4f8f7193eaf4aa1b3cce46cbdf7df4498d2d0a45","modified":1614527200985},{"_id":"public/archives/2019/03/index.html","hash":"108fc20315b1256a3c3a4ef45351444bb3bbeaa7","modified":1614527200985},{"_id":"public/archives/2019/04/index.html","hash":"c1e7e5ae5af45196a9ee85f910d84add42e94e02","modified":1614527200985},{"_id":"public/archives/2019/05/index.html","hash":"b75428821f26f3985540a3a81c3cf353c3a784a2","modified":1614527200985},{"_id":"public/archives/2020/01/index.html","hash":"bee1292d1307eb43b09486d723d901ed42762fa4","modified":1614527200985},{"_id":"public/archives/2020/03/index.html","hash":"e1e54a9a15cd7f2bdaf44666f8847a2e1e3c316d","modified":1614527200985},{"_id":"public/archives/2020/04/index.html","hash":"5b1d91f6aedc8a4ad51fa1cf291eb103bea33504","modified":1614527200985},{"_id":"public/archives/2020/05/index.html","hash":"4f712d576ec9923d59f1436a5264a9889ab0c5e4","modified":1614527200985},{"_id":"public/archives/2020/09/index.html","hash":"080d159f3df97ac8c3df420772869c46b10183f3","modified":1614527200985},{"_id":"public/archives/2020/10/index.html","hash":"0187007bf9df2ff5b8c46557dfd63bfe648f7d52","modified":1614527200985},{"_id":"public/categories/GIS/index.html","hash":"4eec0965e0fdc78ca6c27353162c77e6e1a0633a","modified":1614527200985},{"_id":"public/categories/工具使用/index.html","hash":"1d7e0e8c0fc9dce3e7e7fcea59cdf07ce2859aa0","modified":1614527200985},{"_id":"public/categories/问题解决/index.html","hash":"de8337e1a34e1b6a2e85701c061dfd17a4d32abb","modified":1614527200985},{"_id":"public/categories/AI相关/机器学习/index.html","hash":"6bc227ca2b2e1ba4e3c641636c170a865c023e8a","modified":1614527200985},{"_id":"public/categories/AI相关/论文阅读/index.html","hash":"747856f4f60da4f33eaac7bfe2de7aa933e3f140","modified":1614527200985},{"_id":"public/categories/计算机基础/index.html","hash":"bb98bf7769d6b4a09cace2a38af47c60e1ddab2d","modified":1610341294873},{"_id":"public/categories/杂谈杂想/index.html","hash":"95bc98bdf0bc0cad669c5f26a1595a05fef6a7df","modified":1614527200985},{"_id":"public/categories/Python/index.html","hash":"5f614b714e10fbe10e9a3f67e05f97e05acbd100","modified":1610341294873},{"_id":"public/categories/问题解决/Hexo/index.html","hash":"3618bb8a1184ba6765ba870a9acabe53a6581903","modified":1614527200985},{"_id":"public/categories/学习笔记/计算机网络（自顶向下方法）/index.html","hash":"4a161966ceeeadeda35aa7100050aaee147e6540","modified":1610341294873},{"_id":"public/categories/计算机基础/Linux/index.html","hash":"90d42b4be7ca9b78c79b87330b2417e026a093c5","modified":1610341294873},{"_id":"public/categories/杂谈杂想/杂想/index.html","hash":"f761ab20a6bf4fa4f9519c150273fdc6cc2db818","modified":1614527200985},{"_id":"public/categories/杂谈杂想/杂谈/index.html","hash":"ce6aebb84e8541ffa44979e942a594ddd925606a","modified":1614527200985},{"_id":"public/categories/编程相关/Android/index.html","hash":"9df62a73a8f3c7ce663d554f372d1b3c19aefb1a","modified":1614527200985},{"_id":"public/categories/编程相关/CSS/index.html","hash":"ffb925a15be99fbfdaff66805aa6f0f39b1f61a4","modified":1614527200985},{"_id":"public/categories/Python/游戏/index.html","hash":"3efa324b151158fb82050b6ff9a8430521a61091","modified":1610341294873},{"_id":"public/categories/Python/数据库/index.html","hash":"af500afa118d665a0894cbc13925c4df5f119557","modified":1610341294873},{"_id":"public/categories/编程相关/SQL/index.html","hash":"c1f155e8a85f44212ff74a898fba356af75587d8","modified":1614527200985},{"_id":"public/categories/编程相关/Python/Python常用模块/index.html","hash":"67170accd2b50e8bda51e0ce292a5b44dadd8665","modified":1614527200985},{"_id":"public/categories/编程相关/Python/PyQt5/index.html","hash":"893af13da019feaa3d44fd6bd6dbd46d72b01621","modified":1614527200985},{"_id":"public/categories/编程相关/Python/爬虫/index.html","hash":"c952e712272ee887a4eccead2a8f01b710e49dfe","modified":1614527200985},{"_id":"public/tags/ArcGIS/index.html","hash":"7e7123695ba812567b4c53a3fb7fffec41e8ddbf","modified":1614527200985},{"_id":"public/tags/QGis/index.html","hash":"0bce23e6f0c1cfd1aa9c0ce7a96744dfb64e2421","modified":1614527200985},{"_id":"public/tags/Ubuntu/index.html","hash":"5c3aed268ba4067a2c1696c8b04ba1745b2a18a4","modified":1614527200985},{"_id":"public/tags/latex/index.html","hash":"d204674f2fa06f3f189f58068930b443b968d36e","modified":1614527200985},{"_id":"public/tags/vim/index.html","hash":"c0dab411ec0dbde4b1ffc658ba1386012d671391","modified":1614527200985},{"_id":"public/tags/matlab/index.html","hash":"22cd57b777041d7e891cbdb023a56324acb40034","modified":1614527200985},{"_id":"public/tags/RS/index.html","hash":"5914db3faf5dee24d98c47c34fe3c3e9b51d5f7f","modified":1614527200985},{"_id":"public/tags/git/index.html","hash":"fe61edadef1109176aa5ec604086fbd695a21168","modified":1614527200985},{"_id":"public/tags/conda/index.html","hash":"5b59f18aefee600728b7b3a0c6471526d9bfe7b6","modified":1614527200985},{"_id":"public/tags/机器学习/index.html","hash":"1480eb2db38a7856d82d40250218eea0f9bcabca","modified":1614527200985},{"_id":"public/tags/sklearn/index.html","hash":"89e5cb6488607de2be554b0e1826090cf52e25c3","modified":1614527200985},{"_id":"public/tags/6dof姿态估计/index.html","hash":"eca26ba07680c5f63442320a53025d9589a22f83","modified":1614527200985},{"_id":"public/tags/语义分割/index.html","hash":"f6b2193a9c830563f6a54da5385f56cfb6c64803","modified":1614527200985},{"_id":"public/tags/算法/index.html","hash":"932d46b3a8d4be0e6a0bd348cab4e597a7c74667","modified":1614527200985},{"_id":"public/tags/计算机网络/index.html","hash":"069e3ce590b6bcf9c5b7b752d6ff35b497a8b554","modified":1614527200985},{"_id":"public/tags/Linux/index.html","hash":"639ce2ee8349ae9148f9835e5a68957112ef0b62","modified":1610341294873},{"_id":"public/tags/杂想/index.html","hash":"78d8a4a710eb58aa5644786dfba0d0610438b86c","modified":1614527200985},{"_id":"public/tags/杂谈/index.html","hash":"765b6bc7bd41eb7ca3879becb6623f4f1c2b4df4","modified":1614527200985},{"_id":"public/tags/Android/index.html","hash":"454458932dffd722301f8be9a6f624a16a8a68f7","modified":1614527200985},{"_id":"public/tags/前端样式/index.html","hash":"879324ae9ed65dcc2584d7271aaa5112792ddb6f","modified":1614527200985},{"_id":"public/tags/前端/index.html","hash":"6a63a90cf8985d70f210e1f39773ab553c48b308","modified":1614527200985},{"_id":"public/tags/插件开发/index.html","hash":"ee61c5e11bec254f9c04642a9b906837d633e10c","modified":1610341294873},{"_id":"public/tags/3D视觉/index.html","hash":"ec792b38a2fe0d6b929913bd6564bc59e05d8b7e","modified":1614527200985},{"_id":"public/tags/pygame/index.html","hash":"343bc60d78bd9c1d6f3c1e2b866d370f2e73bdd3","modified":1610341294873},{"_id":"public/tags/数据库/index.html","hash":"b193111b206e3fe7f1fb83c37fc9741d101b80b5","modified":1614527607522},{"_id":"public/tags/SQL/index.html","hash":"fef2363fdae7db593d885967f35d9452f41c47b2","modified":1614527200985},{"_id":"public/tags/Hexo/index.html","hash":"1984c8126d271564d18039596d1877fac94a6b5d","modified":1614527200985},{"_id":"public/tags/博客搭建/index.html","hash":"a76a90e07b28fe461e7f24994889734bc6b210ac","modified":1614527200985},{"_id":"public/tags/GUI/index.html","hash":"6bc2beea3606e1325654314d7da9f39f82802d6e","modified":1614527200985},{"_id":"public/tags/Numpy/index.html","hash":"1a94fa36f44463eb7c607ea3a79d03abbffce16c","modified":1614527200985},{"_id":"public/tags/Pandas/index.html","hash":"6d046bd07ce79d9cb84b3908c17b2a02c8c538a8","modified":1614527200985},{"_id":"public/tags/matplotlib/index.html","hash":"d854d8d7b2b65e35bcc3fd9603590728aaa406d9","modified":1614527200985},{"_id":"public/gg/index.html","hash":"0336aba6adad48ddb1bb96ab808eb108874d20f0","modified":1614527200985},{"_id":"public/categories/index.html","hash":"74b1fa8831372fda5723818c7e267cddf050c311","modified":1614527607522},{"_id":"public/page/nocs.html","hash":"a22288e90ba3123ff0fbc0839a770ea9ab18dd78","modified":1614527200985},{"_id":"public/page/sklearn-ml.html","hash":"2a25121a271240f5624c05d9bf65d3ced6b933b8","modified":1614527607522},{"_id":"public/page/logistic-regression.html","hash":"2b5c6a8618f97a2098124b92a7e5b6ecfbd8a9b7","modified":1614527200985},{"_id":"public/page/pca-basic-use.html","hash":"e6be5279bda6f0ef9a968985b5f05af152394bdf","modified":1614527200985},{"_id":"public/page/null.html","hash":"505c5b3b6ef3cf08ec1c22b4449af0ba19035a1a","modified":1614527607522},{"_id":"public/page/plyfile.html","hash":"5048973ef089b1ed48cc34a44353362069430739","modified":1614527200985},{"_id":"public/page/conda-debug.html","hash":"60465367d174934323aa398a8ae9c377ff6edd63","modified":1614527200985},{"_id":"public/page/python-depth-points.html","hash":"3c7cea58092dee8400e9963e912cfc97e9370dd8","modified":1614527200985},{"_id":"public/page/ubuntu-install-summary.html","hash":"db595019ad5fb16adc3e8b092db9386d7c583e58","modified":1614527200985},{"_id":"public/page/blender-script-basic.html","hash":"56d7319dc997d29c2c9558949712dffacb6280f8","modified":1610341294873},{"_id":"public/page/no2-application-llayer.html","hash":"95742f4159895699d2593c6e8772f085704614d0","modified":1614527200985},{"_id":"public/page/Android4-fragment.html","hash":"dfbfecc2395fa4ff2043bea9b828cabab3586ef6","modified":1614527200985},{"_id":"public/page/Android5-broadcast.html","hash":"3e4edb2fd6af61bf132495e097eecc2920db95e7","modified":1614527200985},{"_id":"public/page/Android2-activity.html","hash":"920ef27314ebc532f33a3cfd33237a78b4f87739","modified":1614527200985},{"_id":"public/page/Android3-layout.html","hash":"02e77102ba2b9cb622b6557c3be3c6504899b50d","modified":1614527200985},{"_id":"public/page/android-dev-helloworld.html","hash":"c30ae09062954093a2ba4dfd8d38c1e735a67244","modified":1614527200985},{"_id":"public/page/no1-computer-network-and-the-internet.html","hash":"d3606fb1324d12940de0f645a70e4a8d23a4df25","modified":1614527200985},{"_id":"public/page/TF-Hub-transfer-learning.html","hash":"5b7caf3b72e8c69da316038131ec682620d9dba7","modified":1614527200985},{"_id":"public/page/tf2-create-dataset.html","hash":"58f779c7fa981e761541d42bcefce65718873af8","modified":1614527200985},{"_id":"public/page/python-magic-method.html","hash":"c764e7f62ba5643bbeff69813fc4ae21b649cf6b","modified":1614527200985},{"_id":"public/page/tf2-classic-cnn.html","hash":"8e4dec24fefbd5adc86b1501bd9220382a4e6065","modified":1614527200985},{"_id":"public/page/pandas-basic-use.html","hash":"23e6b5bf6d7179ee21ef53198f79b5ed3e81b938","modified":1614527200985},{"_id":"public/page/graph-traverse-and-user.html","hash":"9af218b019640113be7a9828f33682f63cc89b85","modified":1614527200985},{"_id":"public/page/numpy-basic-use.html","hash":"abc20a854cfd6b69358533b2c1d45f8908e7e8d8","modified":1614527200985},{"_id":"public/page/python-matplotlib-use.html","hash":"6cc7a810f83c95f2d5292a2b7e6cbc0f9a224bfd","modified":1614527200985},{"_id":"public/page/vim-basic-use.html","hash":"c3247010d990865f4fc72431dbfd25a39cb10d3a","modified":1614527200985},{"_id":"public/page/event-obj.html","hash":"f305cedac49d377433c5795002d8248aee302fb5","modified":1614527200985},{"_id":"public/page/graph-basic-knowledge.html","hash":"bc8053166c1d9a53537f57e9dd9abc5458fc18d7","modified":1614527200985},{"_id":"public/page/java-for-algorithm-test.html","hash":"78e99e43cab58df15d46fba17673d05490fa9158","modified":1614527200985},{"_id":"public/page/css3-transition-transform.html","hash":"83d22908917dd313b804ee6807a3922618578e89","modified":1614527200985},{"_id":"public/page/python-bs4-basic.html","hash":"7ef6e2e40837c3925d27cb665e37b4deabeb7bfe","modified":1614527200985},{"_id":"public/page/pyqt5-signals-and-slots.html","hash":"768da071372a7b199a7b55fea872bb51ea000469","modified":1614527200985},{"_id":"public/page/python-requests-basic.html","hash":"a6bbf96e5d6bc3d9abdcbccf362331543d2e5149","modified":1614527200985},{"_id":"public/page/pyqt5-basic-widget.html","hash":"991719eceed679a218ba0730c8200bc5d7d0a341","modified":1614527200985},{"_id":"public/page/DPOD-summary.html","hash":"b712f203bcfce0ecf22cc156f640a162b3cc9b36","modified":1614527200985},{"_id":"public/page/deepim-summary.html","hash":"1ec16da051245de8579933628fc121bc68a0c2de","modified":1614527200985},{"_id":"public/page/tf2-nn-basic-handle.html","hash":"e3772dab280589a01dc64bc80b0cf132984a4db8","modified":1614527200985},{"_id":"public/page/tf2-keras-build-nn.html","hash":"691e407e66d0eb369f6d9f3e84d0cd9a67536aee","modified":1614527200985},{"_id":"public/page/nn-basic-concept-summary.html","hash":"bce96908cde43f61aaf3b2d2ef71d717497498eb","modified":1614527200985},{"_id":"public/page/tf2-basic-builder-simple-nn.html","hash":"fff34defc2dd7bb3c3e513f57282043fdec3baf8","modified":1614527200985},{"_id":"public/page/TF2-basic-function.html","hash":"411c452c01b15d5c140f5c92faf127149104fea9","modified":1614527200985},{"_id":"public/page/ubuntu-common-shortcut.html","hash":"1a935ed4c37f7ac8c33dea9ff07502051c0c9020","modified":1614527200985},{"_id":"public/page/linux-temp.html","hash":"21188466d03b2cb251d82806c5127defe070aab5","modified":1610341294873},{"_id":"public/page/terminal-process-manage.html","hash":"90abb80692076dbdfd2809ecc9f96c82fda4a2e2","modified":1610341294873},{"_id":"public/page/css-basic-knowledge.html","hash":"83673d9bc61bb2c6ccff09093ef8ee1c27b6299f","modified":1614527200985},{"_id":"public/page/linux-terminal-file-path.html","hash":"af16a7f0351695291ebf1f164dcb678d99da981f","modified":1610341294873},{"_id":"public/page/css-float-position.html","hash":"e7159ccb1cc8e9a25cbc296804cebf1d76941a6e","modified":1614527200985},{"_id":"public/page/linux-io-redirection.html","hash":"d7fa77b76165e1a781c95fb331bf20b736e2b0ec","modified":1610341294873},{"_id":"public/page/ds-RBTree.html","hash":"0e9b038bbb7bc99eeb70b42c4afbfeab1aa21819","modified":1614527200985},{"_id":"public/page/linux-terminal-1.html","hash":"c458977e5cad155ddd1854c6d7f5da046ba70dc7","modified":1610341294873},{"_id":"public/page/ds-avl-tree.html","hash":"4016792f6f569a1b52cee61b1d04c93dd804639b","modified":1614527200985},{"_id":"public/page/ds-hashtable.html","hash":"a1c39592dbf3392a870dc6ef8e31e11dae5956e1","modified":1614527200985},{"_id":"public/page/ds-Union-Find.html","hash":"2f8fc27f2468c602f914e4b0e0fb5e0715f3fb51","modified":1614527200985},{"_id":"public/page/js-class-object.html","hash":"1b8347da1e25360bc87e10f23c5f8ae867405d7a","modified":1614527200985},{"_id":"public/page/ds-segment-tree.html","hash":"cd367ea1dce87c35296e5eddebd448abb8e459b9","modified":1614527200985},{"_id":"public/page/js-event-handle.html","hash":"000ec2e5e1f70e9f066f67dd84c1cd840eda32f7","modified":1614527200985},{"_id":"public/page/js-buildin-obj.html","hash":"e07bebc659b0fa2c2c8195447c0fc0b562868341","modified":1614527200985},{"_id":"public/page/priority-queue-and-heap.html","hash":"fad3c5362d4f315399c029080e28a88e96a4e5c9","modified":1614527200985},{"_id":"public/page/js-basic-grammer.html","hash":"db4001060f7fb9b6252de808f361944e8ac38f5f","modified":1614527200985},{"_id":"public/page/Java-exception.html","hash":"c33b8b6f4c88f89a4b24a1f213ade6bf99163a97","modified":1610341294873},{"_id":"public/page/Java-generic.html","hash":"cf4113cb16bfd5ee14563e98191a128ef0d5c24f","modified":1614527200985},{"_id":"public/page/java-interface.html","hash":"5bfd44566f8533e6dce1b88aea756804ea4977a7","modified":1610341294873},{"_id":"public/page/java-input-output.html","hash":"5188cb5735939a3cda4d9f3bfc886794aedbb09f","modified":1610341294873},{"_id":"public/page/Java-string.html","hash":"b1ce2d58470232ee20219eefc632e8d29976aa94","modified":1614527200985},{"_id":"public/page/ds-set-and-map.html","hash":"1bbfa7c9ceac414eeeda6b7eb66ebb5d6535793a","modified":1614527200985},{"_id":"public/page/ds-tree-binarytree.html","hash":"e922f5fd8751ea38dcde70c768e4a0ab0b9dd51e","modified":1614527200985},{"_id":"public/page/ds-bst.html","hash":"c6f5874e1f3a7bfa12ce8374fec1a17cf8fc0f93","modified":1614527200985},{"_id":"public/page/ds_linked_list.html","hash":"7c721ce6226da223579439de2aee9e06d9c5ef04","modified":1614527200985},{"_id":"public/page/ds-queue.html","hash":"0cdced404d2fb492bc6791d8a114800187cb2733","modified":1614527200985},{"_id":"public/page/java4.html","hash":"23293063557cffe816127e2e44f97ab4e37dfc16","modified":1610341294873},{"_id":"public/page/java_polymorphic.html","hash":"c6c3e67bb82e5f44e7c32ae7036122bdf33e7701","modified":1610341294873},{"_id":"public/page/java-collection.html","hash":"0d24137f47e1a5a27d157ac860462d765d4cd4e2","modified":1614527200985},{"_id":"public/page/ds-stack.html","hash":"d18085291d6754f9b779ef1c8c62ba4ee64aa730","modified":1614527200985},{"_id":"public/page/ds-dynamic-array.html","hash":"09a8d8b20f39a38506dedf91f226df1418698ad3","modified":1614527200985},{"_id":"public/page/java-orient-object.html","hash":"3df056adb87339127cbf64da37cc8ca433ad525e","modified":1614527200985},{"_id":"public/page/java-basic-grammar.html","hash":"2bf0a33ea7bacc4e9a664f1aba0fbc580bf06667","modified":1614527200985},{"_id":"public/page/python-common-method.html","hash":"03b300b7630f193320ec2eb753dda51358719fcb","modified":1614527200985},{"_id":"public/page/js-dom-basic-handle.html","hash":"ebd248dddad9518b08ae1158c97125b071722a94","modified":1614527200985},{"_id":"public/page/js-bom-basic-handle.html","hash":"a89cf9708a4987bf4dc8a0d507e73e76b438b882","modified":1614527200985},{"_id":"public/page/Python-path-operation.html","hash":"7302a36e89a7d5c08bb087fcfc266da9a5f84520","modified":1614527200985},{"_id":"public/page/python8.html","hash":"5150f04803ce7dac87af4a784dfe1b88f6e913c0","modified":1614527200985},{"_id":"public/page/git_error.html","hash":"5c2a07bb5e681e9e4516bcb08af4da9a78971bcf","modified":1614527200985},{"_id":"public/page/python-mysql-handle.html","hash":"df904c7a074fa634bef0f359e6ae317a147077c1","modified":1614527200985},{"_id":"public/page/mysql3.html","hash":"9fb3f449154ad6214a7edc2ae40ac4646d9363ca","modified":1614527200985},{"_id":"public/page/mysql2.html","hash":"dc4cb9713032818d3e434de162440a5639a8967d","modified":1614527200985},{"_id":"public/page/mysql1.html","hash":"4c00aa44bd5de9bd72ceb77511ffa28b67c07778","modified":1614527200985},{"_id":"public/page/js-basic-datatype.html","hash":"ddf95c78a051ae2529cdebdf854c2184c9a05e58","modified":1614527200985},{"_id":"public/page/python7.html","hash":"4dc967e7c7ebdc0d45df3e39009a877744f0812e","modified":1614527200985},{"_id":"public/page/pygame-basic-knowledge.html","hash":"da8ef0f57ae1b61e1c9e04c3a053e934b18bc19f","modified":1614527200985},{"_id":"public/page/python6.html","hash":"8354a6edb8e9e7c1ddeeb41d04d15a648bca20fb","modified":1614527200985},{"_id":"public/page/python5.html","hash":"c114b3de40d03928fbba901ecac7499266b11244","modified":1614527200985},{"_id":"public/page/python4.html","hash":"cedaa5bbf42e72bf9b56c61a9cf53135750e03db","modified":1614527200985},{"_id":"public/page/python3.html","hash":"21bc316776cdc577232c0060f4fe1b3ab2558e07","modified":1614527200985},{"_id":"public/page/python2.html","hash":"add755c69dc7a0a7246d88495330bd371d7e44c4","modified":1614527200985},{"_id":"public/page/python1.html","hash":"b110b1cb4a17d86ae97e0738e88ad0a9258a0a6a","modified":1614527200985},{"_id":"public/page/pyqt5-env-ide-build.html","hash":"849849508bcf4d3d4a3ff7e2109d2d08e87dfb78","modified":1614527200985},{"_id":"public/page/FCN-summary.html","hash":"0f52b6cce9ac0c77a26aaba57a40c78697ca989e","modified":1614527200985},{"_id":"public/page/hexo3.html","hash":"59df861d55cd06d16350480e58a29b9de5e9653a","modified":1614527200985},{"_id":"public/page/hexo2.html","hash":"02a0f800952d51d00253e756da6733dce5390468","modified":1614527200985},{"_id":"public/page/Li_Hongzhang.html","hash":"fa11ecbe619ff95c275fd0ce6b958f2bdbf5913c","modified":1614527200985},{"_id":"public/page/qgis-thematic-map-drawing.html","hash":"01029ef86442c577a2e5c47047f34b4d3785914e","modified":1614527200985},{"_id":"public/page/qgis-Surface-coverage-mapping.html","hash":"427a3cc416a3b448bb7df8b6ceaeca99c50cb272","modified":1614527200985},{"_id":"public/page/the_change.html","hash":"ae9fd2421d87de866192591e84e83789737eab9a","modified":1614527200985},{"_id":"public/page/ArcGIS_dev.html","hash":"a6a395c6e30288481f3d69b72f7d345c7ff71ba2","modified":1614527200985},{"_id":"public/page/the_rain_and_the_shine.html","hash":"52b3e96012114cbbef72129bdc2e8ea9f4c67eb0","modified":1614527200985},{"_id":"public/page/git.html","hash":"cbeda61125c36a3c2892c9cc42dbddb55e654340","modified":1614527200985},{"_id":"public/page/latex1.html","hash":"6e92668f57e0b61fdbadeec061e49623a29ab013","modified":1614527200985},{"_id":"public/page/batch_RS.html","hash":"ff7ef11ac9b34527a1e78f06a289b93b53bb4258","modified":1614527200985},{"_id":"public/archives/index.html","hash":"8d170466f3a76f9f28ae39321174f904f1564444","modified":1614527607522},{"_id":"public/archives/page/2/index.html","hash":"54e2c7c85fb371c74929e22fef49f947cb24b5ff","modified":1614527200985},{"_id":"public/archives/page/3/index.html","hash":"d09656f9675c3eac544a28a94b6cf9b6ae58c4cd","modified":1614527200985},{"_id":"public/archives/2020/index.html","hash":"21380e597bc4574bf09e5706e3e91830ac9ecb35","modified":1614527607522},{"_id":"public/archives/2020/page/2/index.html","hash":"05b5b8233e5faeb756f6061e5dd2c45bd82b721f","modified":1614527200985},{"_id":"public/archives/2020/page/3/index.html","hash":"8adc586cd56c4982cdbe2c1c6e20a1f4a901fa82","modified":1614527200985},{"_id":"public/archives/2020/06/index.html","hash":"9d5a47546a9d731cbe4534d15e21bee2d87a241d","modified":1614527200985},{"_id":"public/archives/2020/08/index.html","hash":"274a89a59324d9aba201aca476ee38da37463f80","modified":1614527200985},{"_id":"public/archives/2020/07/index.html","hash":"1be7f7e56f5a527d8f3c391a11c522aba86828f6","modified":1614527200985},{"_id":"public/categories/AI相关/index.html","hash":"f898daf8f4fc89bdd8d53031e1a09e356479672f","modified":1614527200985},{"_id":"public/categories/AI相关/TensorFlow2/index.html","hash":"63c49e6867bee4a0bdb92608051c768931557f4c","modified":1614527200985},{"_id":"public/categories/学习笔记/index.html","hash":"46756565a082b7be83e2f2a953d9f0abced66812","modified":1614527607522},{"_id":"public/categories/学习笔记/数据结构与算法/index.html","hash":"b68332bb747ef3d1939ff459ab0f12ae9e68aa80","modified":1614527200985},{"_id":"public/categories/编程相关/index.html","hash":"a6044f75697c226f7325e162be589bd9445e6d24","modified":1614527607522},{"_id":"public/categories/编程相关/page/2/index.html","hash":"3466e62c6f0d7579fe48e0a5327761cdf3c2de26","modified":1614527607522},{"_id":"public/categories/编程相关/JavaScript/index.html","hash":"709e73a2c7149030ce540fc2a05f49dfe78152b3","modified":1614527200985},{"_id":"public/categories/编程相关/Java/index.html","hash":"d5029be77d539f982e416d13c6d2985fd5c0ef9f","modified":1614527607522},{"_id":"public/categories/编程相关/Java/Java基础/index.html","hash":"69d01d59754bd14d3fdcc51ae3808adfea79bab8","modified":1614527200985},{"_id":"public/categories/编程相关/Python/index.html","hash":"715708892143d6081e60597f45a30fac7372ca47","modified":1614527200985},{"_id":"public/categories/编程相关/Python/Python基础/index.html","hash":"14af404db5e796208174eede9308b00e882eb6f6","modified":1614527200985},{"_id":"public/index.html","hash":"05f9748abb3826a6908c15d22e52768a38ea808c","modified":1614527607522},{"_id":"public/page/2/index.html","hash":"a9c3f32b05ead527b766697530118c7a9994c160","modified":1614527607522},{"_id":"public/page/3/index.html","hash":"91103b5a76ebbb338c402ec9755fdbd2ed9112bf","modified":1614527200985},{"_id":"public/page/4/index.html","hash":"e9ab73df1ced0487e23cefd9acb64c8ed730a28b","modified":1614527200985},{"_id":"public/page/5/index.html","hash":"b58ea0fcfb5d1e39c486af40f7b7c27867252053","modified":1614527200985},{"_id":"public/page/7/index.html","hash":"c935e76c323dba8680e9aa9ee4477be4a6285c33","modified":1614527200985},{"_id":"public/page/6/index.html","hash":"cfa4f6a6613ca92c939241d5877c36a99f58d61f","modified":1614527200985},{"_id":"public/page/8/index.html","hash":"26cc483e12ad64b5f3b64c5e913f8794ab28526e","modified":1614527200985},{"_id":"public/page/9/index.html","hash":"33493c900a83777043b266aaa5d6da1f68d32bac","modified":1614527200985},{"_id":"public/page/10/index.html","hash":"f3d9d8d39292c5281a947f0f66534ba991af1743","modified":1614527200985},{"_id":"public/page/11/index.html","hash":"c1edf23fcf10457ab449f8f04bf1629536e470a3","modified":1614527200985},{"_id":"public/tags/TensorFlow2/index.html","hash":"efc80cf1e05ab5384fa29b9e7f7de377de333628","modified":1614527200985},{"_id":"public/tags/数据结构/index.html","hash":"da4b70e577e2aac94e1862bb7ed09d304a72173c","modified":1614527200985},{"_id":"public/tags/JavaScript/index.html","hash":"0d852ff3b512edc59e1f4cd8e272961ed9844bc9","modified":1614527200985},{"_id":"public/tags/Python/index.html","hash":"e4072bf15b1825e1088f7a1451f6429856602a4a","modified":1614527200985},{"_id":"public/tags/Java/index.html","hash":"38a6304f4e5e78f7180c3d4195ac1f520989ae3f","modified":1614527200985},{"_id":"public/favicon.ico","hash":"473ba682e828a7e34f24fae320e77b6bed4260c7","modified":1610341294873},{"_id":"public/images/ayer-side.svg","hash":"ad004ce7a873de0f91774f3d5923e010396a07bd","modified":1610341294873},{"_id":"public/images/ayer.png","hash":"0466c05244273f645d239cd27513bfa3c50308aa","modified":1610341294873},{"_id":"public/images/beian.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1610341294873},{"_id":"public/images/ayer.svg","hash":"379c3307f97c364718a1dbc1e52fb14de12eb11a","modified":1610341294873},{"_id":"public/images/forkme.png","hash":"99c3e21a169421e4f249befb428396c729863a75","modified":1610341294873},{"_id":"public/images/cover7.jpg","hash":"573bff6899d2d9c5bcba0dc9c60cd1ec9eb8b029","modified":1610341294873},{"_id":"public/images/mouse.cur","hash":"c1ffe93a6ba0d25ef06bb3d097560762e4807593","modified":1610341294873},{"_id":"public/images/sponsor.jpg","hash":"b3efa167f50cad85404c83f21dec2be570ed21dc","modified":1610341294873},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1610341294873},{"_id":"public/lib/hbe.js","hash":"785f2f93e63a7302df623febc143d9630918a222","modified":1610341294873},{"_id":"public/images/404.jpg","hash":"4f36a8d378712427cded03f5166949f5e0ba754c","modified":1610341294873},{"_id":"public/css/custom.css","hash":"78b13bf5b98278ff65cdb0a731f2a1c98b2324a5","modified":1610341294873},{"_id":"public/css/clipboard.css","hash":"7990b92ffeda1b06b94b50140d9c95dac21bd418","modified":1610341294873},{"_id":"public/dist/main.js","hash":"68b1b6cd15f6038d757fa280281073128162b5ce","modified":1610341294873},{"_id":"public/js/busuanzi-2.3.pure.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1610341294873},{"_id":"public/js/clickBoom1.js","hash":"56582907b4c2ece5187b8d64125f91ddabb8a24e","modified":1610341294873},{"_id":"public/js/clickLove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1610341294873},{"_id":"public/js/clickBoom2.js","hash":"bea5232eb8b32542283d9a28257f4b85ce2f3c1b","modified":1610341294873},{"_id":"public/js/lazyload.min.js","hash":"b801b3946fb9b72e03512c0663458e140e1fa77b","modified":1610341294873},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1610341294873},{"_id":"public/js/dz.js","hash":"079ae73e2e396c2e00919a50a6fe0d064f99303a","modified":1610341294873},{"_id":"public/404.html","hash":"f9a601ed44a0294b797217629b59ea30eaca0280","modified":1610341294873},{"_id":"public/dist/main.css","hash":"252d84915d54235b3f3780d6b0d81819b1f29151","modified":1610341294873},{"_id":"public/images/alipay.jpg","hash":"8f5409e29764fca573f1d274003910aa3c919de1","modified":1610341294873},{"_id":"public/images/wechat.jpg","hash":"93a362574a8498e75dca469b7bceb0b321fda387","modified":1610341294873},{"_id":"public/js/search.js","hash":"118be0e0918532ac1225f62e1a0a6f0673e0b173","modified":1610341294873},{"_id":"public/js/jquery-2.0.3.min.js","hash":"800edb7787c30f4982bf38f2cb8f4f6fb61340e9","modified":1610341294873},{"_id":"public/dist/report.html","hash":"df0df50535ee17cad796cd1cb526d8dd2749e597","modified":1610341294873},{"_id":"public/images/cover2.jpg","hash":"f61dd08c95327468c5f6bc5175eff68d00f05b46","modified":1610341294873},{"_id":"public/images/cover6.jpg","hash":"a5b8a5dddff2607fee5fccf5fdef3b214a8468cc","modified":1610341294873},{"_id":"public/images/cover3.jpg","hash":"7b4e7c9ce19ce5d5c1588b2567e88ecbb04370af","modified":1610341294873},{"_id":"public/images/cover1.jpg","hash":"e019fbed6158ae3e4ec3d255b41bddc1afcbfa90","modified":1610341294873},{"_id":"public/images/cover4.jpg","hash":"77040e609d2f1c60e00a8e47cb95b25bf7ff5b9c","modified":1610341294873},{"_id":"public/images/cover5.jpg","hash":"1a2d6182d94b015a45fe4bf8e8a239dfcc0ef776","modified":1610341294873},{"_id":"source/_posts/编程相关/Java/Java Web/post.md","hash":"916fed3291db9a13ea04eeff81ccdeb94fe451aa","modified":1610354652262},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/RF(%V2}8LRROTY(K07O6F]P.png","hash":"edc4605144331b7c1fed832db4b3a435c7ee1bc1","modified":1610349774737},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/6B2E6~T(1OY~D}04K(VE2%F.png","hash":"3ffe596072fc8b8b4441f93f5d8ff3bdc80068df","modified":1610343342897},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/1)[(BY](5[]U8P11H(5A`BM.png","hash":"2ef9d8000f7c155cd60b615ef0157e306755c22e","modified":1610349795445},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/~W)8WU[4~{534M]ETNN%FEM.png","hash":"5986fb3e960dcc6c5c71ffcc9464675be4cb9a66","modified":1610343472507},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/0BRGWO0($OY}J}(HJ{8{0H6.png","hash":"69ef16b59a9191665587e268a2ba68a3e5156d02","modified":1610343279959},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/121@)Y_1O_$NNL(UAA]8F5F.png","hash":"e865fd75490249f09caa537840ed33c31ec39e8c","modified":1610343125135},{"_id":"source/_posts/编程相关/Java/Java Web/新建文件夹/IWY3(7`4CT1J1~52SG4V28Y.png","hash":"678d407f7bbe86445ca6ac36affe6f7b134f5cee","modified":1610345439275},{"_id":"source/_posts/工具使用/vim基本用法.md","hash":"c00d3c2231cda161f722ea6f834b0c5189c97cb7","modified":1611264195093},{"_id":"source/_posts/工具使用/docker.md","hash":"aed9e9fc6af1ddec8b52529deb4122a713c2f692","modified":1612589742909},{"_id":"source/_posts/工具使用/Maven.md","hash":"87f53139664a5bb2b6c5b082beda51dcba1dec59","modified":1612668387207},{"_id":"source/_posts/学习笔记/操作系统/进程与线程.md","hash":"0f04ba7eabb90d00d83bfc3fd1453169992d7742","modified":1614526299890},{"_id":"source/_posts/学习笔记/计算机网络/第三章：传输层.md","hash":"a8349a2caeda4efcdfdface209ac0e4624aebf3c","modified":1614327243686},{"_id":"source/_posts/学习笔记/计算机网络/第二章：应用层.md","hash":"ae7273624773326994f2855f08539d0120cec28c","modified":1612109106814},{"_id":"source/_posts/学习笔记/计算机网络/第一章：计算机网络与英特网.md","hash":"7c4c3784c7bd2e70786616453b7ec92997384519","modified":1612109093199},{"_id":"source/_posts/学习笔记/设计模式/0O54D)B%V](3RUAXNQTVJQO.png","hash":"9b771bfad5834e816b2f2597e0b56f29f5b82f69","modified":1614010249910},{"_id":"source/_posts/学习笔记/设计模式/单例模式.md","hash":"97330580da0da62255d112d4ca62fe376c94723d","modified":1614527537206},{"_id":"source/_posts/学习笔记/设计模式/{W0]~{}7(`4K7)_HJYKUGHR.png","hash":"fa70819ef68da7e47ee1a16fe10637bf25eaf63a","modified":1614006000578},{"_id":"source/_posts/学习笔记/设计模式/]IJWRPV_WO2FBU]`1Y{E1SH.png","hash":"9f55670dbe85ab9fd0684d07256be32070f4a718","modified":1614000647007},{"_id":"source/_posts/学习笔记/设计模式/工厂模式.md","hash":"54614b3d26df4d09555df3fc462a680dac3b2995","modified":1614527540621},{"_id":"source/_posts/学习笔记/设计模式/设计模式六大原则.md","hash":"eadea4aade2112568e666935d07858bf12684e8c","modified":1614527543754},{"_id":"source/_posts/编程相关/Python/Blender使用Python脚本的基本渲染操作.md","hash":"52f6ea85c6a209ecc59b029232817de9f01ba17c","modified":1614486619901},{"_id":"source/_posts/编程相关/Python/Blender使用Python脚本生成CV数据集.md","hash":"d246d621826ef407d03d35b590880569487162be","modified":1614527168574},{"_id":"source/_posts/编程相关/SQL/SQL常用查询语句.md","hash":"66f5a7dbf925fe6fd7488e5edaabd183b887f866","modified":1611330405338},{"_id":"source/_posts/问题解决/Ubuntu/Ubuntu下bug解决.md","hash":"daeafb4ad621d98db5752df637694a496a8ac444","modified":1611264195094},{"_id":"source/_posts/问题解决/Ubuntu/Ubuntu安装摘记.md","hash":"4d2e9ea04b439772e194ad71e4e2f5f2407f6644","modified":1611264195094},{"_id":"source/_posts/编程相关/Java/Java Web/JDBC基础总结.md","hash":"ce46d99ad558faf2b46d3f691050d94e10204611","modified":1614516777258},{"_id":"source/_posts/编程相关/Java/Java Web/Servlet基础总结.md","hash":"f1fce020addc3adc2dcecd080a02edb53241f2c0","modified":1614516705301},{"_id":"source/_posts/编程相关/Java/Java Web/Tomcat基础总结.md","hash":"cb1b5d9949d6267c896f1937ae1c923bd29fa3f0","modified":1614516807259},{"_id":"source/_posts/编程相关/Java/JVM/1、Java字节码.md","hash":"2626d90816c482adadc464916d94a6604bb45d15","modified":1614516520113},{"_id":"source/_posts/编程相关/Java/JVM/2、Java类加载机制.md","hash":"134e16219dccf4bc7715204aadb92b7a91ef393a","modified":1614516601760},{"_id":"source/_posts/编程相关/Java/Java基础/11、Java：注解.md","hash":"fda6c73d525931216a0abeb5e1cbd0119d09ef0b","modified":1614494752775},{"_id":"source/_posts/编程相关/Java/Java基础/10、Java：反射.md","hash":"c9bc3f15c4a162e90fce1631edeacb47b0ed4593","modified":1614494735128},{"_id":"source/_posts/编程相关/Java/Java基础/1、Java：基本概念与语言特点.md","hash":"a34c11b9bea74516ef5b1e86f3fa2af721e475cc","modified":1612173057481},{"_id":"source/_posts/编程相关/Java/Java基础/3、Java：字符串.md","hash":"4e3b864277b1f511a062f7411bffcf100d561e1f","modified":1612017806135},{"_id":"source/_posts/编程相关/Java/Java基础/2、Java：数据类型与运算符.md","hash":"224952faa2401592c6d7d620a17c529848903215","modified":1614515979922},{"_id":"source/_posts/编程相关/Java/Java基础/4、Java：类、对象与方法.md","hash":"af064d64346a75fdfa5d80ecc6a471ff5994a3d6","modified":1614515842249},{"_id":"source/_posts/编程相关/Java/Java基础/5、Java：接口与抽象类.md","hash":"0f3d6e8d2f518cc90280054a4ea46f2ad9a3af75","modified":1614494671065},{"_id":"source/_posts/编程相关/Java/Java基础/6、Java：异常与异常处理.md","hash":"02361acab8f053fc333230344d42ce86f3ed1e29","modified":1614494696033},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java：文件流读写.md","hash":"d0d126fcdb15e4cd70e20a1a5040c47f85ddbf40","modified":1614494706836},{"_id":"source/_posts/编程相关/Java/Java基础/9、Java：泛型.md","hash":"56e270464d691f4a4a2161a8bae353887f7f388d","modified":1612018100483},{"_id":"source/_posts/编程相关/Java/Java基础/8、Java：集合与容器.md","hash":"427cf7aea48d2494437778ad027434bcbfc6eb62","modified":1614526235421},{"_id":"source/_posts/编程相关/Java/框架/MyBatis基本使用方法.md","hash":"f2242d848d1aef1ba539c915ecdf3d79a408e3b8","modified":1614527599035},{"_id":"source/_posts/编程相关/Java/Java基础/Java算法题的常用语法.md","hash":"7219ad19d0c273a1a0a25f67c51ca9f54e91559f","modified":1610339216465},{"_id":"source/_posts/编程相关/SQL/表连接.png","hash":"e9b05f7795a716348c2b0bb24f7e29f6fcfccff9","modified":1611327030407},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/字节流输入输出对应图.png","hash":"1fc26fb2e3f767d33eee1a13c4a80306577748ae","modified":1599711782598},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/字符流输入输出对应图.png","hash":"d5d3b482186da2be091e8ec73f36d434ca5c16d1","modified":1599715437925},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/Java流类图结构.jpg","hash":"616e3038e922889ca9a2196ea9fa90ef69938cfe","modified":1599711558262},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/(W}3]BGOGZH$)P6V9CS}M5Y.png","hash":"0b3ab7584cbb692473ba7c8d54edc6ee5cc5350e","modified":1599720168140},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/83CB`(U[UBB0WH{F1K)2Z{O.png","hash":"64ff175b82373666a2905823424dbcff5efde948","modified":1599720236249},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/N(8WDF5IZ6AI}ZQ6SCW0GN2.png","hash":"1f9261f668d026e9915c6abcb466cc4661f10057","modified":1599718616019},{"_id":"source/_posts/编程相关/Java/Java基础/7、Java输入输出流/I]7UIWCIWPK`343{2N6XV54.png","hash":"2e572a6809bc03fb2ad962a788eec831485ed6ac","modified":1599718531505},{"_id":"public/page/blender-render-cv-dataset.html","hash":"f230a7991e83eee6cf38353e68fc84f61af7f00d","modified":1614527200985},{"_id":"public/page/maven.html","hash":"5b6718570bde28900ce55f41b716dbac3d7c9393","modified":1614527200985},{"_id":"public/page/jvm-classloader.html","hash":"a558d0686a8459cd447c658411ccfbc9c61a1804","modified":1614527200985},{"_id":"public/page/jvm-classbytecode.html","hash":"ceb5561e88d5a1931e28833bd54d68afa8ebb03a","modified":1614527607522},{"_id":"public/page/Java-annotation.html","hash":"d0ffed88f49b60ea104966a1e523111e66bd8bb3","modified":1614527607522},{"_id":"public/page/jdbc-basic-summary.html","hash":"8d9805a71e702892d30140c51ebe8c0d0f43df4e","modified":1614527200985},{"_id":"public/page/servlet-basic-summary.html","hash":"5e4c8751a1ee35f5089115cce9dacf4ef1808c8f","modified":1614527200985},{"_id":"public/page/Java-reflection.html","hash":"f7fef915facec14a51d5b995bb4103937641ecb6","modified":1614527200985},{"_id":"public/page/java-datatype-operator.html","hash":"0a5928de6741ac3dba05f8e4fd05219c4b134a9a","modified":1614527200985},{"_id":"public/page/tomcat-basic-summary.html","hash":"26becf13b8b2cb9b1ed204804b3f2156569c8170","modified":1614527607522},{"_id":"public/page/transport-layer.html","hash":"9db4cc3717e88b289d728e9051ada83a618e9c85","modified":1614527200985},{"_id":"public/page/blender-python-script-basic.html","hash":"7d6b0a68396dfd9e50d930c77c8d5c2a6dc90c52","modified":1614527200985},{"_id":"public/archives/2020/12/index.html","hash":"a4b3ebca96d20657e32bf8e9e71dec381cd9c09a","modified":1614527607522},{"_id":"public/archives/2021/01/index.html","hash":"53ee1b1d8c2658febde616352cca35933cd3169b","modified":1614527200985},{"_id":"public/categories/编程相关/Java/Java-Web/index.html","hash":"adf67a2ade42c392c45d405b32732d3f3be62ef9","modified":1614527200985},{"_id":"public/categories/学习笔记/计算机网络/index.html","hash":"03fa64022c388f9980e7f8bda68a3fcba61075e8","modified":1614527200985},{"_id":"public/categories/问题解决/Ubuntu/index.html","hash":"cfa03f3fae1b42d129ae92d5f71cb45b496c10a8","modified":1614527200985},{"_id":"public/categories/编程相关/Java/JVM/index.html","hash":"c8477613a30f924b1fdf8576b55149e09bdef2c2","modified":1614527200985},{"_id":"public/tags/Pygame/index.html","hash":"49794b60aa78955dc14f3670f89c4e80195dd23a","modified":1614527607522},{"_id":"public/tags/Blender/index.html","hash":"a48853ddfb62e8148612e98af67c724b13bb920f","modified":1614527200985},{"_id":"public/tags/点云/index.html","hash":"45d485affa9b9e88ed1be5a9b407125ec461b559","modified":1614527200985},{"_id":"public/tags/maven/index.html","hash":"b371d31ead5492bf08484b353cd16c1538bba759","modified":1614527200985},{"_id":"public/tags/Web/index.html","hash":"d8ad9ab0a4e90cff94c39f9c9c1c8fe775d463d8","modified":1614527200985},{"_id":"public/tags/JVM/index.html","hash":"f0c0ace644a570599f24313d0a3da817fc4345b5","modified":1614527200985},{"_id":"public/tags/服务器/index.html","hash":"0afe3bbc7744127c1ef5f1f4cf7c76eb0e0e554c","modified":1614527200985},{"_id":"public/page/Java-exception-handle.html","hash":"83f66dcc4a7b927039924f182ebe7e956b1dd3e1","modified":1614527200985},{"_id":"public/page/java-interface-abstractclass.html","hash":"b6a44c21e7f2417536f0d06284bc23c949022b19","modified":1614527200985},{"_id":"public/page/java-input-output-stream.html","hash":"bf1dae2813b9993108809d29e9b9ee205b3fa7ec","modified":1614527200985},{"_id":"public/archives/2021/index.html","hash":"8ffc07b50f17d53f829db5c9aad3006eed5e0b7d","modified":1614527607522},{"_id":"public/archives/2021/02/index.html","hash":"9e672133f67892293438a4d40d8f25d6aeecd9f9","modified":1614527607522},{"_id":"public/page/12/index.html","hash":"800a637910eff7c7dfc7913c1e9c56c873fff805","modified":1614527200985},{"_id":"source/_posts/学习笔记/操作系统/死锁.md","hash":"7c4f81e7179dcbc4691de90fd331223993e0034c","modified":1614519803243},{"_id":"source/_posts/学习笔记/操作系统/进程与线程/进程状态转换.jpg","hash":"e0be25f583ee3b384dc3991838fb7eb4f8859339","modified":1614519543574},{"_id":"public/page/process-thread.html","hash":"2521b18325815175d86290657bccce360c1740b8","modified":1614527607522},{"_id":"public/categories/学习笔记/操作系统/index.html","hash":"4cbab038382c64df20e6e83a673511f8ac3b4949","modified":1614527200985},{"_id":"public/tags/操作系统/index.html","hash":"872847a2ebbfc87751c458eb032ec83da0685657","modified":1614527200985},{"_id":"public/categories/学习笔记/设计模式/index.html","hash":"1d1a8916fc699628677b624fd9b2681dcae2df33","modified":1614527607522},{"_id":"public/categories/编程相关/Java/框架/index.html","hash":"d6bbfbd6d9cd289217f386b09ca26df8eb9298f4","modified":1614527607522},{"_id":"public/page/singleton-pattern.html","hash":"9de7157e973a227fe4d7f167ba7d41c29050dbfb","modified":1614527607522},{"_id":"public/page/factory-pattern.html","hash":"24db94eb151b992e241abefcc17b900e66801811","modified":1614527607522},{"_id":"public/page/design-pattern-6-principle.html","hash":"d13c2e610702aa105baf7ac6797a84d7b565a08a","modified":1614527607522},{"_id":"public/page/mybatis-basic-summary.html","hash":"e63ac99f6c09a2bb46290b13b9b0eb6006bf0884","modified":1614527607522},{"_id":"public/tags/设计模式/index.html","hash":"31ecd075b854f16c1f6a35b0671a80f37749c299","modified":1614527607522}],"Category":[{"name":"GIS","_id":"ckjs3mo7u0006rwjsg4w83kve"},{"name":"工具使用","_id":"ckjs3mo8r000mrwjs96bla1i5"},{"name":"问题解决","_id":"ckjs3mo8w0015rwjsauerde30"},{"name":"AI相关","_id":"ckjs3mo9u001orwjs951j7jju"},{"name":"TensorFlow2","parent":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moa20025rwjs27cg4z5t"},{"name":"机器学习","parent":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moal0039rwjsa0kvgu5z"},{"name":"论文阅读","parent":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mob20049rwjs81i75cg5"},{"name":"学习笔记","_id":"ckjs3mobf0051rwjs02mc22sb"},{"name":"计算机基础","_id":"ckjs3mocg007drwjs2wwtdsoq"},{"name":"杂谈杂想","_id":"ckjs3mocj007rrwjs6hvh1etu"},{"name":"数据结构与算法","parent":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocl0081rwjs7nykfec2"},{"name":"编程相关","_id":"ckjs3mocm0084rwjs3uak2tci"},{"name":"Python","_id":"ckjs3mod400ahrwjs54tr7znp"},{"name":"Hexo","parent":"ckjs3mo8w0015rwjsauerde30","_id":"ckjs3moda00b9rwjs51gp87q9"},{"name":"计算机网络（自顶向下方法）","parent":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3modc00bgrwjsdubn4pe3"},{"name":"Linux","parent":"ckjs3mocg007drwjs2wwtdsoq","_id":"ckjs3mode00bprwjsbird9t4b"},{"name":"杂想","parent":"ckjs3mocj007rrwjs6hvh1etu","_id":"ckjs3modg00c4rwjs8p4d5hvr"},{"name":"杂谈","parent":"ckjs3mocj007rrwjs6hvh1etu","_id":"ckjs3modi00carwjsexwlfyv1"},{"name":"Android","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modi00cerwjs54i58whs"},{"name":"CSS","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modl00csrwjsc72y8d92"},{"name":"JavaScript","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modm00d1rwjsb6dddum8"},{"name":"游戏","parent":"ckjs3mod400ahrwjs54tr7znp","_id":"ckjs3modr00dprwjsch9g1toe"},{"name":"数据库","parent":"ckjs3mod400ahrwjs54tr7znp","_id":"ckjs3modr00dtrwjs8sa7c05u"},{"name":"SQL","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mods00dwrwjshson4qbh"},{"name":"Java","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3moe400ehrwjsci1l19ug"},{"name":"Java基础","parent":"ckjs3moe400ehrwjsci1l19ug","_id":"ckjs3moea00ewrwjs0lr5a331"},{"name":"Python","parent":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3moex00gorwjs9vu15pcl"},{"name":"Python常用模块","parent":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mof700i2rwjs3cmufybu"},{"name":"PyQt5","parent":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mof700i3rwjsfjcuckam"},{"name":"爬虫","parent":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mof700i5rwjsdhog3f2z"},{"name":"Python基础","parent":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofa00ihrwjs4s7scn2c"},{"name":"Java Web","parent":"ckjs3moe400ehrwjsci1l19ug","_id":"ckjz9iigs00026cjs7w885zmz"},{"name":"计算机网络","parent":"ckjs3mobf0051rwjs02mc22sb","_id":"cklp5nhpd000a8sjs0ltzcedr"},{"name":"Ubuntu","parent":"ckjs3mo8w0015rwjsauerde30","_id":"cklp5nhpw00148sjs0ddmezvb"},{"name":"JVM","parent":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhq7001n8sjs759vacl9"},{"name":"操作系统","parent":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpbt6ku0002d8js3mrv54si"},{"name":"设计模式","parent":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpc1w0r0001vsjs9wvp90uc"},{"name":"框架","parent":"ckjs3moe400ehrwjsci1l19ug","_id":"cklpc1w3x000gvsjs7vpmavdy"}],"Data":[],"Page":[{"title":"categories","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ntype: \"categories\"\nlayout: \"categories\"\n---","date":"2021-01-04T07:35:13.678Z","updated":"2021-01-04T07:35:13.678Z","path":"categories/index.html","comments":1,"_id":"ckjs3mo640000rwjsghtd9pet","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ntype: friends\nlayout: \"friends\"\n---\n","date":"2021-01-04T07:18:45.543Z","updated":"2021-01-04T07:18:45.543Z","path":"friends/index.html","comments":1,"_id":"ckjs3mo680001rwjsaao0799g","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"gg","layout":"gg","_content":"","source":"gg/index.md","raw":"---\ntitle: gg\nlayout: \"gg\"\n---\n","date":"2021-01-04T07:27:52.123Z","updated":"2021-01-04T07:27:52.123Z","path":"gg/index.html","comments":1,"_id":"ckjs3mo6a0002rwjs0t2r9rjj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: \"tags\"\nlayout: \"tags\"\n---\n","date":"2021-01-03T13:38:28.028Z","updated":"2021-01-03T13:38:28.028Z","path":"tags/index.html","comments":1,"_id":"ckjs3mo7f0003rwjshgdwcsb5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ArcGIS二次开发基础配置说明","date":"2019-04-28T14:48:42.000Z","fileName":"ArcGIS_dev","_content":"很早就听说过ArcGIS二次开发各种麻烦所以也一直不打算去做这一块（电脑里装的是VS2017，但ArcEngine老一些的版本不支持这个版本，新的版本又找不到，实在是不想再装一个新的VS），但这学期由于一个小实习的需要，不得不稍微学一下，也算完成任务吧。仔细想想稍微了解下ArcGIS二次开发也不坏，毕竟我还是个学GIS的。。。\n## 开发环境安装\n首先想明确的是，一个电脑里装两个版本的VS2017正常情况下是不会有问题的，之前网上总有些人说这样安装会失败，也许是他们自己的问题吧，反正经过尝试本人是没发现任何问题。同时AE10.2推荐的VS版本是2010或2012，更高的版本会报错，所以感觉极端stupid。\n1. 安装AE之前必须保证先安装VS，而VS的安装包很好找，推荐一个公众号“软件安装管家”，里面应有尽有。\n2. 之后安装ArcGIS Desktop，ArcGIS反正我是感觉是一个水很深的软件，同样推荐上面那个公众号，跟着步骤安装。\n3. 最后开始安装AE，[下载点我,p2f1](https://pan.baidu.com/s/1k5cg94K70yXwLO2ZX0coBg)，注意选择对应VS版本的AE安装。\n    1. 对安装包进行解压，解压Part1然后在解压过程中会弹出对话框加上Part2即可\n    2. 解压后点开解压文件，打开ESRI.exe文件安装相应文件即可\n    3. 打开相应VS版本，查看有没有ArcGIS开发组件即可。\n\n## 基本事项\n本人也没有具体去系统学过所谓ArcGIS二次开发，因为大部分时候的确用不上这些，现在只是所谓面向作业编程。这次作业实现了delaunay三角网以及相应图形的合并，由于老师有样例代码所以很简单。不过还是得吐槽一句，给代码不把框架说清楚，给的接口参考文件说明只有一个名词，比如某接口中，方法Area边上写了个面积，难道我不知道这个单词是面积的意思？关键是这方法怎么调用吧。百度，OK，ArcGIS二次开发基本没人做，然后就只能去查帮助文档了，这本身无可厚非，但说白了，这么个搞清楚架构、理解老师要干啥花三个小时，编程一刻钟的作业，真的蠢。\n\n### 帮助文档\nArcGIS二次开发做的人不多，网上基本上找不到有参考意义的教程（当然某些论坛还是不错的），而这玩意又以接口众多出名（几乎是面向接口编程），所以帮助文档就很重要了。\n一切安装妥当后，在**开始->ArcGIS->ArcObjects help**中打开就能找到，之后在其中选择相应接口之类的查看即可。各种参数和不同语言的不同用法写的还是很清楚的。\n\n### 文件迁移设置变更\n由于是ArcGIS二次开发，所以需要调用外部的ArcMap程序。在代码迁移的时候，由于不同终端上ArcMap存储的文件位置不一致，所以要手动进行更改。\n主要步骤是\n右击项目名称，选择最下面的“属性”，并且选择属性菜单栏中的“调试”，在启动操作中选择“启动外部程序”并在其中将文件路径更改为现在运行终端中的相应文件路径即可。具体如下所示：\n![](img/BlogImg/arcgis1/1.jpg)\n\n### 常见错误处理\n编译调试运行时如果出现了诸如“无法注册程序集 .dll- 拒绝访问。请确保您正在以管理员身份运行应用程序。对注册表项“...”的访问被拒绝”的错误，可以进行如下操作处理。\nWIN+R，运行对话框中输入gpedit.msc，开启组策略，然后一步步地在“计算机配置”-“Windows 设置”-“安全设置”-“本地策略”-“安全选项”，找到右侧的“用户账户控制：以管理员批准模式运行所有管理员”这个项，你会看到这个项默认是启用的，把它设成禁用。如下图\n![](img/BlogImg/arcgis1/2.png)\n之后重启电脑即可。","source":"_posts/GIS/ArcGIS二次开发基础配置说明.md","raw":"---\ntitle: ArcGIS二次开发基础配置说明\ndate: 2019-04-28 22:48:42\ntags:\n    - ArcGIS\ncategories:\n    - GIS\nfileName: ArcGIS_dev\n---\n很早就听说过ArcGIS二次开发各种麻烦所以也一直不打算去做这一块（电脑里装的是VS2017，但ArcEngine老一些的版本不支持这个版本，新的版本又找不到，实在是不想再装一个新的VS），但这学期由于一个小实习的需要，不得不稍微学一下，也算完成任务吧。仔细想想稍微了解下ArcGIS二次开发也不坏，毕竟我还是个学GIS的。。。\n## 开发环境安装\n首先想明确的是，一个电脑里装两个版本的VS2017正常情况下是不会有问题的，之前网上总有些人说这样安装会失败，也许是他们自己的问题吧，反正经过尝试本人是没发现任何问题。同时AE10.2推荐的VS版本是2010或2012，更高的版本会报错，所以感觉极端stupid。\n1. 安装AE之前必须保证先安装VS，而VS的安装包很好找，推荐一个公众号“软件安装管家”，里面应有尽有。\n2. 之后安装ArcGIS Desktop，ArcGIS反正我是感觉是一个水很深的软件，同样推荐上面那个公众号，跟着步骤安装。\n3. 最后开始安装AE，[下载点我,p2f1](https://pan.baidu.com/s/1k5cg94K70yXwLO2ZX0coBg)，注意选择对应VS版本的AE安装。\n    1. 对安装包进行解压，解压Part1然后在解压过程中会弹出对话框加上Part2即可\n    2. 解压后点开解压文件，打开ESRI.exe文件安装相应文件即可\n    3. 打开相应VS版本，查看有没有ArcGIS开发组件即可。\n\n## 基本事项\n本人也没有具体去系统学过所谓ArcGIS二次开发，因为大部分时候的确用不上这些，现在只是所谓面向作业编程。这次作业实现了delaunay三角网以及相应图形的合并，由于老师有样例代码所以很简单。不过还是得吐槽一句，给代码不把框架说清楚，给的接口参考文件说明只有一个名词，比如某接口中，方法Area边上写了个面积，难道我不知道这个单词是面积的意思？关键是这方法怎么调用吧。百度，OK，ArcGIS二次开发基本没人做，然后就只能去查帮助文档了，这本身无可厚非，但说白了，这么个搞清楚架构、理解老师要干啥花三个小时，编程一刻钟的作业，真的蠢。\n\n### 帮助文档\nArcGIS二次开发做的人不多，网上基本上找不到有参考意义的教程（当然某些论坛还是不错的），而这玩意又以接口众多出名（几乎是面向接口编程），所以帮助文档就很重要了。\n一切安装妥当后，在**开始->ArcGIS->ArcObjects help**中打开就能找到，之后在其中选择相应接口之类的查看即可。各种参数和不同语言的不同用法写的还是很清楚的。\n\n### 文件迁移设置变更\n由于是ArcGIS二次开发，所以需要调用外部的ArcMap程序。在代码迁移的时候，由于不同终端上ArcMap存储的文件位置不一致，所以要手动进行更改。\n主要步骤是\n右击项目名称，选择最下面的“属性”，并且选择属性菜单栏中的“调试”，在启动操作中选择“启动外部程序”并在其中将文件路径更改为现在运行终端中的相应文件路径即可。具体如下所示：\n![](img/BlogImg/arcgis1/1.jpg)\n\n### 常见错误处理\n编译调试运行时如果出现了诸如“无法注册程序集 .dll- 拒绝访问。请确保您正在以管理员身份运行应用程序。对注册表项“...”的访问被拒绝”的错误，可以进行如下操作处理。\nWIN+R，运行对话框中输入gpedit.msc，开启组策略，然后一步步地在“计算机配置”-“Windows 设置”-“安全设置”-“本地策略”-“安全选项”，找到右侧的“用户账户控制：以管理员批准模式运行所有管理员”这个项，你会看到这个项默认是启用的，把它设成禁用。如下图\n![](img/BlogImg/arcgis1/2.png)\n之后重启电脑即可。","slug":"GIS/ArcGIS二次开发基础配置说明","published":1,"updated":"2021-01-11T04:20:29.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo7q0004rwjsaje34z0o","content":"<p>很早就听说过ArcGIS二次开发各种麻烦所以也一直不打算去做这一块（电脑里装的是VS2017，但ArcEngine老一些的版本不支持这个版本，新的版本又找不到，实在是不想再装一个新的VS），但这学期由于一个小实习的需要，不得不稍微学一下，也算完成任务吧。仔细想想稍微了解下ArcGIS二次开发也不坏，毕竟我还是个学GIS的。。。</p>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p>首先想明确的是，一个电脑里装两个版本的VS2017正常情况下是不会有问题的，之前网上总有些人说这样安装会失败，也许是他们自己的问题吧，反正经过尝试本人是没发现任何问题。同时AE10.2推荐的VS版本是2010或2012，更高的版本会报错，所以感觉极端stupid。</p>\n<ol>\n<li>安装AE之前必须保证先安装VS，而VS的安装包很好找，推荐一个公众号“软件安装管家”，里面应有尽有。</li>\n<li>之后安装ArcGIS Desktop，ArcGIS反正我是感觉是一个水很深的软件，同样推荐上面那个公众号，跟着步骤安装。</li>\n<li>最后开始安装AE，<a href=\"https://pan.baidu.com/s/1k5cg94K70yXwLO2ZX0coBg\" target=\"_blank\" rel=\"noopener\">下载点我,p2f1</a>，注意选择对应VS版本的AE安装。<ol>\n<li>对安装包进行解压，解压Part1然后在解压过程中会弹出对话框加上Part2即可</li>\n<li>解压后点开解压文件，打开ESRI.exe文件安装相应文件即可</li>\n<li>打开相应VS版本，查看有没有ArcGIS开发组件即可。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"基本事项\"><a href=\"#基本事项\" class=\"headerlink\" title=\"基本事项\"></a>基本事项</h2><p>本人也没有具体去系统学过所谓ArcGIS二次开发，因为大部分时候的确用不上这些，现在只是所谓面向作业编程。这次作业实现了delaunay三角网以及相应图形的合并，由于老师有样例代码所以很简单。不过还是得吐槽一句，给代码不把框架说清楚，给的接口参考文件说明只有一个名词，比如某接口中，方法Area边上写了个面积，难道我不知道这个单词是面积的意思？关键是这方法怎么调用吧。百度，OK，ArcGIS二次开发基本没人做，然后就只能去查帮助文档了，这本身无可厚非，但说白了，这么个搞清楚架构、理解老师要干啥花三个小时，编程一刻钟的作业，真的蠢。</p>\n<h3 id=\"帮助文档\"><a href=\"#帮助文档\" class=\"headerlink\" title=\"帮助文档\"></a>帮助文档</h3><p>ArcGIS二次开发做的人不多，网上基本上找不到有参考意义的教程（当然某些论坛还是不错的），而这玩意又以接口众多出名（几乎是面向接口编程），所以帮助文档就很重要了。<br>一切安装妥当后，在<strong>开始-&gt;ArcGIS-&gt;ArcObjects help</strong>中打开就能找到，之后在其中选择相应接口之类的查看即可。各种参数和不同语言的不同用法写的还是很清楚的。</p>\n<h3 id=\"文件迁移设置变更\"><a href=\"#文件迁移设置变更\" class=\"headerlink\" title=\"文件迁移设置变更\"></a>文件迁移设置变更</h3><p>由于是ArcGIS二次开发，所以需要调用外部的ArcMap程序。在代码迁移的时候，由于不同终端上ArcMap存储的文件位置不一致，所以要手动进行更改。<br>主要步骤是<br>右击项目名称，选择最下面的“属性”，并且选择属性菜单栏中的“调试”，在启动操作中选择“启动外部程序”并在其中将文件路径更改为现在运行终端中的相应文件路径即可。具体如下所示：<br><img src=\"img/BlogImg/arcgis1/1.jpg\" alt=\"\"></p>\n<h3 id=\"常见错误处理\"><a href=\"#常见错误处理\" class=\"headerlink\" title=\"常见错误处理\"></a>常见错误处理</h3><p>编译调试运行时如果出现了诸如“无法注册程序集 .dll- 拒绝访问。请确保您正在以管理员身份运行应用程序。对注册表项“…”的访问被拒绝”的错误，可以进行如下操作处理。<br>WIN+R，运行对话框中输入gpedit.msc，开启组策略，然后一步步地在“计算机配置”-“Windows 设置”-“安全设置”-“本地策略”-“安全选项”，找到右侧的“用户账户控制：以管理员批准模式运行所有管理员”这个项，你会看到这个项默认是启用的，把它设成禁用。如下图<br><img src=\"img/BlogImg/arcgis1/2.png\" alt=\"\"><br>之后重启电脑即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>很早就听说过ArcGIS二次开发各种麻烦所以也一直不打算去做这一块（电脑里装的是VS2017，但ArcEngine老一些的版本不支持这个版本，新的版本又找不到，实在是不想再装一个新的VS），但这学期由于一个小实习的需要，不得不稍微学一下，也算完成任务吧。仔细想想稍微了解下ArcGIS二次开发也不坏，毕竟我还是个学GIS的。。。</p>\n<h2 id=\"开发环境安装\"><a href=\"#开发环境安装\" class=\"headerlink\" title=\"开发环境安装\"></a>开发环境安装</h2><p>首先想明确的是，一个电脑里装两个版本的VS2017正常情况下是不会有问题的，之前网上总有些人说这样安装会失败，也许是他们自己的问题吧，反正经过尝试本人是没发现任何问题。同时AE10.2推荐的VS版本是2010或2012，更高的版本会报错，所以感觉极端stupid。</p>\n<ol>\n<li>安装AE之前必须保证先安装VS，而VS的安装包很好找，推荐一个公众号“软件安装管家”，里面应有尽有。</li>\n<li>之后安装ArcGIS Desktop，ArcGIS反正我是感觉是一个水很深的软件，同样推荐上面那个公众号，跟着步骤安装。</li>\n<li>最后开始安装AE，<a href=\"https://pan.baidu.com/s/1k5cg94K70yXwLO2ZX0coBg\" target=\"_blank\" rel=\"noopener\">下载点我,p2f1</a>，注意选择对应VS版本的AE安装。<ol>\n<li>对安装包进行解压，解压Part1然后在解压过程中会弹出对话框加上Part2即可</li>\n<li>解压后点开解压文件，打开ESRI.exe文件安装相应文件即可</li>\n<li>打开相应VS版本，查看有没有ArcGIS开发组件即可。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"基本事项\"><a href=\"#基本事项\" class=\"headerlink\" title=\"基本事项\"></a>基本事项</h2><p>本人也没有具体去系统学过所谓ArcGIS二次开发，因为大部分时候的确用不上这些，现在只是所谓面向作业编程。这次作业实现了delaunay三角网以及相应图形的合并，由于老师有样例代码所以很简单。不过还是得吐槽一句，给代码不把框架说清楚，给的接口参考文件说明只有一个名词，比如某接口中，方法Area边上写了个面积，难道我不知道这个单词是面积的意思？关键是这方法怎么调用吧。百度，OK，ArcGIS二次开发基本没人做，然后就只能去查帮助文档了，这本身无可厚非，但说白了，这么个搞清楚架构、理解老师要干啥花三个小时，编程一刻钟的作业，真的蠢。</p>\n<h3 id=\"帮助文档\"><a href=\"#帮助文档\" class=\"headerlink\" title=\"帮助文档\"></a>帮助文档</h3><p>ArcGIS二次开发做的人不多，网上基本上找不到有参考意义的教程（当然某些论坛还是不错的），而这玩意又以接口众多出名（几乎是面向接口编程），所以帮助文档就很重要了。<br>一切安装妥当后，在<strong>开始-&gt;ArcGIS-&gt;ArcObjects help</strong>中打开就能找到，之后在其中选择相应接口之类的查看即可。各种参数和不同语言的不同用法写的还是很清楚的。</p>\n<h3 id=\"文件迁移设置变更\"><a href=\"#文件迁移设置变更\" class=\"headerlink\" title=\"文件迁移设置变更\"></a>文件迁移设置变更</h3><p>由于是ArcGIS二次开发，所以需要调用外部的ArcMap程序。在代码迁移的时候，由于不同终端上ArcMap存储的文件位置不一致，所以要手动进行更改。<br>主要步骤是<br>右击项目名称，选择最下面的“属性”，并且选择属性菜单栏中的“调试”，在启动操作中选择“启动外部程序”并在其中将文件路径更改为现在运行终端中的相应文件路径即可。具体如下所示：<br><img src=\"img/BlogImg/arcgis1/1.jpg\" alt=\"\"></p>\n<h3 id=\"常见错误处理\"><a href=\"#常见错误处理\" class=\"headerlink\" title=\"常见错误处理\"></a>常见错误处理</h3><p>编译调试运行时如果出现了诸如“无法注册程序集 .dll- 拒绝访问。请确保您正在以管理员身份运行应用程序。对注册表项“…”的访问被拒绝”的错误，可以进行如下操作处理。<br>WIN+R，运行对话框中输入gpedit.msc，开启组策略，然后一步步地在“计算机配置”-“Windows 设置”-“安全设置”-“本地策略”-“安全选项”，找到右侧的“用户账户控制：以管理员批准模式运行所有管理员”这个项，你会看到这个项默认是启用的，把它设成禁用。如下图<br><img src=\"img/BlogImg/arcgis1/2.png\" alt=\"\"><br>之后重启电脑即可。</p>\n"},{"title":"QGis专题地图编制","date":"2020-01-14T08:43:34.000Z","fileName":"qgis-thematic-map-drawing","_content":"\n## 主要内容\n\n本次任务是制作蕲春县株林镇的土地覆盖专题图，因此重点主要是通过一些空间分析方法对相关数据进行处理，从而得到相关专题数据，同时，对专题图底图也应在实习一的基础上进行简化修改，总结而言，本次任务具体环节如下：\n\n1、对之前的TDFG数据添加村代码和村名。使用按位置连接等工具连接相关的村名、村代码。\n\n2、土地利用数据的权属数据和行政区数据整理。xzq数据与地类图斑数据边界不一致，需要处理成为一致的。同时增加一个新的村，有自己的学号，以及自己命名一个村名。以改好权属的dltb为基础，采用融合方法，按权属代码融合得到新的xzq层，并转一个新界线层。\n\n3、准备专题图数据。使用相应方法统计与计算各村各大类的各种面积属性项，如耕地面积、人均耕地面积、人口等等。\n\n4、制作专题地图底图。图纸采用A4大小，版式自己进行设计横版或竖版；注意主图比例尺设计合适，使主图、整饰要素、统计图表、图文等要素布局均衡、松紧适宜。底图要素保留行政界线、主要河流、水库、居民点；道路根据各自设计处理。增加必要的地图注记，如选取居民点、主要河流、水库等名称，可采用标注方法。\n\n5、制作专题地图主图。以输入专题数据的xzq为基础，用渐变填色方法制作人均耕地分级色图；由XZQ生成质点，加载质点数据，用结构图方法制作各类用地结构图表；根据全市或分村统计各坡度级耕地面积，制作图外统计图表。\n\n6、制作专题图整饰。添加色带、图名、指北针、数字比例尺、位置图、图例等。\n\n## 土地利用数据的权属数据整理\n\n### 添加村代码和村名\n\n此处总体步骤为使用实习一中的TDFG数据，对各地类多边形进行求质心操作，进而通过对质心位置的判断，链接上村名和村代码。本人的具体操作如下。\n\n1、首先对实习1中的TDFG数据，选择“矢量”下的“拓扑结构检查器”（需要在插件中加载该功能）进行拓扑检查（检查无效多边形），避免生成质心时QGIS报错。如下图1即为本次实习中有拓扑错误的多边形。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n2、根据拓扑错误对多边形进行修改，主要应避免如下图的拓扑错误，方法为在该处取消吸附功能。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom:33%;\" />\n\n3、对修改后的TDFG图层进行求质心操作，可右击菜单栏打开“处理工具箱”工具，之后的一系列相关操作功能都可在该工具栏中进行搜索获得。如下一图即为“质心”工具运行结果，如下二图为求质心之后的效果。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom: 80%;\" />\n\n4、使用“按位置连接”工具，选择“内含于”等选项，运行结果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:67%;\" />\n\n5、选择“按字段值连接属性”，各选项如下。完成村名和村代码的添加。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 50%;\" />\n\n### 按各村界线进行图形分割\n\n本步骤主要就是按照实习一中的XZQ图层对各个跨越XZQ的图版进行分割（主要就是实习一中补充的那部分），方法是启动编辑后使用“编辑”中的“分割要素”工具对图形进行切割，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom: 50%;\" />\n\n### 新增村庄\n\n按照要求，随便选一块区域，将属性表中的村名、村代码进行更改，形成一个新的村子，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom: 50%;\" />\n\n### 融合\n\n融合的目的即为使属性表中为一个村的地区真正“融”为一个村，从而形成的边界图层替代实习一中的XZQ图层，为之后的专题图制作提供基础底图。本次实习先使用了QGIS中的融合工具，但效果不佳，有如下图所示的裂纹，无法使用。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png)\n\n鉴于此，本次实习在该功能上使用了ArcGIS中的“融合”功能，其相关参数如下（由于数据源的问题，村名中出现了一些代码，因此本处使用村代码作为融合依据，之后根据村名和村代码的对应关系将村名链接了上去）。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:50%;\" />\n\n由于之前在QGIS中对部分图形进行了切割的缘故，在ArcGIS生成的融合图形中仍有部分毛边，本次实习在ArcGIS中启用编辑，使用“删除点”工具对这些毛边进行了处理，同时使用“添加点”功能对部分细小缝隙进行了修补，以避免之后生成质心时出现拓扑错误，完成操作后使用QGIS打开相关shp文件，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom: 33%;\" />\n\n## 专题图数据处理与统计\n\n### 相关数据的分村统计\n\n所需的数据主要包括各村的面积、人口、各大类地面积、人均耕地面积等数据，除去人口数据是需要自己进行输入，其余都需通过各分析方法得到。\n\n1、对2.1节中得到的“新界线”图层TDFG_RH添加新字段，主要内容为以上所述的各内容，类型选择为“小数”。 \n\n2、在“处理工具箱”中搜索找到“添加几何属性”功能，输入要素如下图，得到一个有相关面积等数据的图层，将该临时图层中相关字段中的面积数据连接到TDFG_RH中的相关字段，得到各村面积数据。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:50%;\" />\n\n3、在“处理工具箱”中搜索找到“按类别统计工具”，输入要素如下图1所示，字段选择为地类字段和村名字段。之后程序输出为一个表格，“打开属性表”打开之后，可见其信息如下图2，各村的各类面积都已补充完整，将相关数据填入TDFG_RH中的相关字段即可。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png)\n\n4、将TDFG_RH图层中的RK（人口）字段按照相关资料（主要是网上相关的资料）进行填入，大致区间在300-1300人之间，之后打开编辑后，使用“字段计算器”，填入相应内容后，将RJGDMJ（人均耕地面积）进行计算与填入。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom:50%;\" />\n\n### 坡度的分村统计\n\n坡度的统计需要借用ArcGIS中的相关功能以及已有的DGX、GCD等数据，主要步骤如下。 \n\n1、在ArcGIS中借用“3D Analyst工具”->“数据管理”->“TIN”->“创建TIN”，输入如下图1参数，得到TIN数据如下图2。TIN数据与DEM数据最大的区别是一个是矢量数据一个是栅格数据，因此要实现转化须将其进行矢栅转化。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" style=\"zoom: 50%;\" />\n\n2、“3D Analyst工具”->“转换”->“由TIN转出”->“TIN转栅格”，实现TIN数据与DEM数据的转化，具体输入见下图1，DEM数据效果见下图2。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8715.png)\n\n3、使用ArcGIS中的“坡度”工具，将DEM数据输入，得到相应的坡度图，效果如下两图。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8716.png\" style=\"zoom: 67%;\" />\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8717.png\" style=\"zoom:50%;\" />\n\n4、使用ArcGIS中的转换工具（可以直接转也可以使用ArcToolBoxzhon给的相关工具）将坡度图导出为tif格式，并将其导入QGIS，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8718.png\" style=\"zoom:50%;\" />\n\n5、使用“分区统计”工具对各村坡度进行计算，该程序运行完之后会发现输入的TDFG_RH图层中多了三个计算图层，如下。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8719.png)\n\n6、取上表的相关数据导入excel中进行数据统计，便于之后绘制图表。\n\n## 制作专题地图底图\n\n在《QGis地表覆盖图编制》基础上进行要素选取，最后结果如下\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8720.png\" style=\"zoom:50%;\" />\n\n## 制作专题地图主图\n\n### 分级设色\n\n1、在相关图层的属性下的“符号”中，进行如下选择，可得到分级设色的效果。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8721.png\" style=\"zoom:50%;\" />\n\n2、调整相关颜色（颜色1与颜色2）如下，使其符合基本的色彩视觉要求要求。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8722.png\" style=\"zoom:50%;\" />\n\n3、完成分级设色，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8723.png\" style=\"zoom:50%;\" />\n\n### 饼状图绘制\n\n1、利用质心工具对新界线进行求质心操作，得到质心图如下，同时该质心图层已经包含了TDFG_RH中在2.2.2中进行统计后的字段。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8724.png\" style=\"zoom:50%;\" />\n\n2、利用已经统计了的数据实现饼状图的绘制，在属性中“图表”中进行如下选择，可实现饼状图绘制，更改颜色后，完成饼状图绘制。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8725.png\" style=\"zoom:67%;\" />\n\n3、由于饼状图的图例绘制在QGIS中效果不好，因此本次实习选择在AI中对其进行绘制，绘制完成后如下，可导出为PNG格式。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8726.png\" style=\"zoom: 80%;\" />\n\n4、整体效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8727.png\" style=\"zoom: 50%;\" />\n\n### 柱状图\n\n同样根据统计数据使用AI进行绘制，不再赘述\n\n## 地图整饰\n\n地图整饰包括制作色带、图名、指北针、数字比例尺、位置图、图例等内容，本节也以此为基础进行相关叙述。其中其余参考《QGis地表覆盖图编制》即可\n\n### 位置图\n\n1、将位置图图片导入项目，并使用配准工具对其进行处理，如下图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8728.png\" style=\"zoom:50%;\" />\n\n2、使用QGIS中的“栅格矢量化”工具对该位图进行矢量化，具体见面如下，可得到位置图的矢量图（本次实习使用该功能效果不太好）\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8729.png\" style=\"zoom:67%;\" />\n\n3、对其进行分类处理，并新增一个MC（名称）字段，调整颜色，设置标志（注记），即完成位置图的制作，效果如下。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8730.png)\n\n### 图例\n\n1、在菜单栏左侧使用相应工具添加图例，并设置其条目属性，并将图例置于右下角，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8731.png\" style=\"zoom:50%;\" />\n\n2、将4.2小节中绘制好的饼状图图例以导入图片的形式导入，并将其置于右下角。\n\n## 整体效果\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8732.png)","source":"_posts/GIS/QGis专题地图编制.md","raw":"---\ntitle: QGis专题地图编制\ndate: 2020-01-14 16:43:34\ntags:\n\t- QGis\ncategories:\n\t- GIS\nfileName: qgis-thematic-map-drawing\n---\n\n## 主要内容\n\n本次任务是制作蕲春县株林镇的土地覆盖专题图，因此重点主要是通过一些空间分析方法对相关数据进行处理，从而得到相关专题数据，同时，对专题图底图也应在实习一的基础上进行简化修改，总结而言，本次任务具体环节如下：\n\n1、对之前的TDFG数据添加村代码和村名。使用按位置连接等工具连接相关的村名、村代码。\n\n2、土地利用数据的权属数据和行政区数据整理。xzq数据与地类图斑数据边界不一致，需要处理成为一致的。同时增加一个新的村，有自己的学号，以及自己命名一个村名。以改好权属的dltb为基础，采用融合方法，按权属代码融合得到新的xzq层，并转一个新界线层。\n\n3、准备专题图数据。使用相应方法统计与计算各村各大类的各种面积属性项，如耕地面积、人均耕地面积、人口等等。\n\n4、制作专题地图底图。图纸采用A4大小，版式自己进行设计横版或竖版；注意主图比例尺设计合适，使主图、整饰要素、统计图表、图文等要素布局均衡、松紧适宜。底图要素保留行政界线、主要河流、水库、居民点；道路根据各自设计处理。增加必要的地图注记，如选取居民点、主要河流、水库等名称，可采用标注方法。\n\n5、制作专题地图主图。以输入专题数据的xzq为基础，用渐变填色方法制作人均耕地分级色图；由XZQ生成质点，加载质点数据，用结构图方法制作各类用地结构图表；根据全市或分村统计各坡度级耕地面积，制作图外统计图表。\n\n6、制作专题图整饰。添加色带、图名、指北针、数字比例尺、位置图、图例等。\n\n## 土地利用数据的权属数据整理\n\n### 添加村代码和村名\n\n此处总体步骤为使用实习一中的TDFG数据，对各地类多边形进行求质心操作，进而通过对质心位置的判断，链接上村名和村代码。本人的具体操作如下。\n\n1、首先对实习1中的TDFG数据，选择“矢量”下的“拓扑结构检查器”（需要在插件中加载该功能）进行拓扑检查（检查无效多边形），避免生成质心时QGIS报错。如下图1即为本次实习中有拓扑错误的多边形。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n2、根据拓扑错误对多边形进行修改，主要应避免如下图的拓扑错误，方法为在该处取消吸附功能。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom:33%;\" />\n\n3、对修改后的TDFG图层进行求质心操作，可右击菜单栏打开“处理工具箱”工具，之后的一系列相关操作功能都可在该工具栏中进行搜索获得。如下一图即为“质心”工具运行结果，如下二图为求质心之后的效果。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom: 80%;\" />\n\n4、使用“按位置连接”工具，选择“内含于”等选项，运行结果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:67%;\" />\n\n5、选择“按字段值连接属性”，各选项如下。完成村名和村代码的添加。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 50%;\" />\n\n### 按各村界线进行图形分割\n\n本步骤主要就是按照实习一中的XZQ图层对各个跨越XZQ的图版进行分割（主要就是实习一中补充的那部分），方法是启动编辑后使用“编辑”中的“分割要素”工具对图形进行切割，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom: 50%;\" />\n\n### 新增村庄\n\n按照要求，随便选一块区域，将属性表中的村名、村代码进行更改，形成一个新的村子，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom: 50%;\" />\n\n### 融合\n\n融合的目的即为使属性表中为一个村的地区真正“融”为一个村，从而形成的边界图层替代实习一中的XZQ图层，为之后的专题图制作提供基础底图。本次实习先使用了QGIS中的融合工具，但效果不佳，有如下图所示的裂纹，无法使用。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png)\n\n鉴于此，本次实习在该功能上使用了ArcGIS中的“融合”功能，其相关参数如下（由于数据源的问题，村名中出现了一些代码，因此本处使用村代码作为融合依据，之后根据村名和村代码的对应关系将村名链接了上去）。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:50%;\" />\n\n由于之前在QGIS中对部分图形进行了切割的缘故，在ArcGIS生成的融合图形中仍有部分毛边，本次实习在ArcGIS中启用编辑，使用“删除点”工具对这些毛边进行了处理，同时使用“添加点”功能对部分细小缝隙进行了修补，以避免之后生成质心时出现拓扑错误，完成操作后使用QGIS打开相关shp文件，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom: 33%;\" />\n\n## 专题图数据处理与统计\n\n### 相关数据的分村统计\n\n所需的数据主要包括各村的面积、人口、各大类地面积、人均耕地面积等数据，除去人口数据是需要自己进行输入，其余都需通过各分析方法得到。\n\n1、对2.1节中得到的“新界线”图层TDFG_RH添加新字段，主要内容为以上所述的各内容，类型选择为“小数”。 \n\n2、在“处理工具箱”中搜索找到“添加几何属性”功能，输入要素如下图，得到一个有相关面积等数据的图层，将该临时图层中相关字段中的面积数据连接到TDFG_RH中的相关字段，得到各村面积数据。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:50%;\" />\n\n3、在“处理工具箱”中搜索找到“按类别统计工具”，输入要素如下图1所示，字段选择为地类字段和村名字段。之后程序输出为一个表格，“打开属性表”打开之后，可见其信息如下图2，各村的各类面积都已补充完整，将相关数据填入TDFG_RH中的相关字段即可。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png)\n\n4、将TDFG_RH图层中的RK（人口）字段按照相关资料（主要是网上相关的资料）进行填入，大致区间在300-1300人之间，之后打开编辑后，使用“字段计算器”，填入相应内容后，将RJGDMJ（人均耕地面积）进行计算与填入。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom:50%;\" />\n\n### 坡度的分村统计\n\n坡度的统计需要借用ArcGIS中的相关功能以及已有的DGX、GCD等数据，主要步骤如下。 \n\n1、在ArcGIS中借用“3D Analyst工具”->“数据管理”->“TIN”->“创建TIN”，输入如下图1参数，得到TIN数据如下图2。TIN数据与DEM数据最大的区别是一个是矢量数据一个是栅格数据，因此要实现转化须将其进行矢栅转化。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" style=\"zoom: 50%;\" />\n\n2、“3D Analyst工具”->“转换”->“由TIN转出”->“TIN转栅格”，实现TIN数据与DEM数据的转化，具体输入见下图1，DEM数据效果见下图2。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8715.png)\n\n3、使用ArcGIS中的“坡度”工具，将DEM数据输入，得到相应的坡度图，效果如下两图。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8716.png\" style=\"zoom: 67%;\" />\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8717.png\" style=\"zoom:50%;\" />\n\n4、使用ArcGIS中的转换工具（可以直接转也可以使用ArcToolBoxzhon给的相关工具）将坡度图导出为tif格式，并将其导入QGIS，如图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8718.png\" style=\"zoom:50%;\" />\n\n5、使用“分区统计”工具对各村坡度进行计算，该程序运行完之后会发现输入的TDFG_RH图层中多了三个计算图层，如下。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8719.png)\n\n6、取上表的相关数据导入excel中进行数据统计，便于之后绘制图表。\n\n## 制作专题地图底图\n\n在《QGis地表覆盖图编制》基础上进行要素选取，最后结果如下\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8720.png\" style=\"zoom:50%;\" />\n\n## 制作专题地图主图\n\n### 分级设色\n\n1、在相关图层的属性下的“符号”中，进行如下选择，可得到分级设色的效果。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8721.png\" style=\"zoom:50%;\" />\n\n2、调整相关颜色（颜色1与颜色2）如下，使其符合基本的色彩视觉要求要求。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8722.png\" style=\"zoom:50%;\" />\n\n3、完成分级设色，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8723.png\" style=\"zoom:50%;\" />\n\n### 饼状图绘制\n\n1、利用质心工具对新界线进行求质心操作，得到质心图如下，同时该质心图层已经包含了TDFG_RH中在2.2.2中进行统计后的字段。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8724.png\" style=\"zoom:50%;\" />\n\n2、利用已经统计了的数据实现饼状图的绘制，在属性中“图表”中进行如下选择，可实现饼状图绘制，更改颜色后，完成饼状图绘制。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8725.png\" style=\"zoom:67%;\" />\n\n3、由于饼状图的图例绘制在QGIS中效果不好，因此本次实习选择在AI中对其进行绘制，绘制完成后如下，可导出为PNG格式。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8726.png\" style=\"zoom: 80%;\" />\n\n4、整体效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8727.png\" style=\"zoom: 50%;\" />\n\n### 柱状图\n\n同样根据统计数据使用AI进行绘制，不再赘述\n\n## 地图整饰\n\n地图整饰包括制作色带、图名、指北针、数字比例尺、位置图、图例等内容，本节也以此为基础进行相关叙述。其中其余参考《QGis地表覆盖图编制》即可\n\n### 位置图\n\n1、将位置图图片导入项目，并使用配准工具对其进行处理，如下图所示。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8728.png\" style=\"zoom:50%;\" />\n\n2、使用QGIS中的“栅格矢量化”工具对该位图进行矢量化，具体见面如下，可得到位置图的矢量图（本次实习使用该功能效果不太好）\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8729.png\" style=\"zoom:67%;\" />\n\n3、对其进行分类处理，并新增一个MC（名称）字段，调整颜色，设置标志（注记），即完成位置图的制作，效果如下。\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8730.png)\n\n### 图例\n\n1、在菜单栏左侧使用相应工具添加图例，并设置其条目属性，并将图例置于右下角，效果如下。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8731.png\" style=\"zoom:50%;\" />\n\n2、将4.2小节中绘制好的饼状图图例以导入图片的形式导入，并将其置于右下角。\n\n## 整体效果\n\n![](http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8732.png)","slug":"GIS/QGis专题地图编制","published":1,"updated":"2020-08-14T15:24:38.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo7t0005rwjs9mu49lsa","content":"<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><p>本次任务是制作蕲春县株林镇的土地覆盖专题图，因此重点主要是通过一些空间分析方法对相关数据进行处理，从而得到相关专题数据，同时，对专题图底图也应在实习一的基础上进行简化修改，总结而言，本次任务具体环节如下：</p>\n<p>1、对之前的TDFG数据添加村代码和村名。使用按位置连接等工具连接相关的村名、村代码。</p>\n<p>2、土地利用数据的权属数据和行政区数据整理。xzq数据与地类图斑数据边界不一致，需要处理成为一致的。同时增加一个新的村，有自己的学号，以及自己命名一个村名。以改好权属的dltb为基础，采用融合方法，按权属代码融合得到新的xzq层，并转一个新界线层。</p>\n<p>3、准备专题图数据。使用相应方法统计与计算各村各大类的各种面积属性项，如耕地面积、人均耕地面积、人口等等。</p>\n<p>4、制作专题地图底图。图纸采用A4大小，版式自己进行设计横版或竖版；注意主图比例尺设计合适，使主图、整饰要素、统计图表、图文等要素布局均衡、松紧适宜。底图要素保留行政界线、主要河流、水库、居民点；道路根据各自设计处理。增加必要的地图注记，如选取居民点、主要河流、水库等名称，可采用标注方法。</p>\n<p>5、制作专题地图主图。以输入专题数据的xzq为基础，用渐变填色方法制作人均耕地分级色图；由XZQ生成质点，加载质点数据，用结构图方法制作各类用地结构图表；根据全市或分村统计各坡度级耕地面积，制作图外统计图表。</p>\n<p>6、制作专题图整饰。添加色带、图名、指北针、数字比例尺、位置图、图例等。</p>\n<h2 id=\"土地利用数据的权属数据整理\"><a href=\"#土地利用数据的权属数据整理\" class=\"headerlink\" title=\"土地利用数据的权属数据整理\"></a>土地利用数据的权属数据整理</h2><h3 id=\"添加村代码和村名\"><a href=\"#添加村代码和村名\" class=\"headerlink\" title=\"添加村代码和村名\"></a>添加村代码和村名</h3><p>此处总体步骤为使用实习一中的TDFG数据，对各地类多边形进行求质心操作，进而通过对质心位置的判断，链接上村名和村代码。本人的具体操作如下。</p>\n<p>1、首先对实习1中的TDFG数据，选择“矢量”下的“拓扑结构检查器”（需要在插件中加载该功能）进行拓扑检查（检查无效多边形），避免生成质心时QGIS报错。如下图1即为本次实习中有拓扑错误的多边形。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n<p>2、根据拓扑错误对多边形进行修改，主要应避免如下图的拓扑错误，方法为在该处取消吸附功能。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom:33%;\" />\n\n<p>3、对修改后的TDFG图层进行求质心操作，可右击菜单栏打开“处理工具箱”工具，之后的一系列相关操作功能都可在该工具栏中进行搜索获得。如下一图即为“质心”工具运行结果，如下二图为求质心之后的效果。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom: 80%;\" />\n\n<p>4、使用“按位置连接”工具，选择“内含于”等选项，运行结果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:67%;\" />\n\n<p>5、选择“按字段值连接属性”，各选项如下。完成村名和村代码的添加。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"按各村界线进行图形分割\"><a href=\"#按各村界线进行图形分割\" class=\"headerlink\" title=\"按各村界线进行图形分割\"></a>按各村界线进行图形分割</h3><p>本步骤主要就是按照实习一中的XZQ图层对各个跨越XZQ的图版进行分割（主要就是实习一中补充的那部分），方法是启动编辑后使用“编辑”中的“分割要素”工具对图形进行切割，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"新增村庄\"><a href=\"#新增村庄\" class=\"headerlink\" title=\"新增村庄\"></a>新增村庄</h3><p>按照要求，随便选一块区域，将属性表中的村名、村代码进行更改，形成一个新的村子，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"融合\"><a href=\"#融合\" class=\"headerlink\" title=\"融合\"></a>融合</h3><p>融合的目的即为使属性表中为一个村的地区真正“融”为一个村，从而形成的边界图层替代实习一中的XZQ图层，为之后的专题图制作提供基础底图。本次实习先使用了QGIS中的融合工具，但效果不佳，有如下图所示的裂纹，无法使用。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" alt=\"\"></p>\n<p>鉴于此，本次实习在该功能上使用了ArcGIS中的“融合”功能，其相关参数如下（由于数据源的问题，村名中出现了一些代码，因此本处使用村代码作为融合依据，之后根据村名和村代码的对应关系将村名链接了上去）。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:50%;\" />\n\n<p>由于之前在QGIS中对部分图形进行了切割的缘故，在ArcGIS生成的融合图形中仍有部分毛边，本次实习在ArcGIS中启用编辑，使用“删除点”工具对这些毛边进行了处理，同时使用“添加点”功能对部分细小缝隙进行了修补，以避免之后生成质心时出现拓扑错误，完成操作后使用QGIS打开相关shp文件，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom: 33%;\" />\n\n<h2 id=\"专题图数据处理与统计\"><a href=\"#专题图数据处理与统计\" class=\"headerlink\" title=\"专题图数据处理与统计\"></a>专题图数据处理与统计</h2><h3 id=\"相关数据的分村统计\"><a href=\"#相关数据的分村统计\" class=\"headerlink\" title=\"相关数据的分村统计\"></a>相关数据的分村统计</h3><p>所需的数据主要包括各村的面积、人口、各大类地面积、人均耕地面积等数据，除去人口数据是需要自己进行输入，其余都需通过各分析方法得到。</p>\n<p>1、对2.1节中得到的“新界线”图层TDFG_RH添加新字段，主要内容为以上所述的各内容，类型选择为“小数”。 </p>\n<p>2、在“处理工具箱”中搜索找到“添加几何属性”功能，输入要素如下图，得到一个有相关面积等数据的图层，将该临时图层中相关字段中的面积数据连接到TDFG_RH中的相关字段，得到各村面积数据。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:50%;\" />\n\n<p>3、在“处理工具箱”中搜索找到“按类别统计工具”，输入要素如下图1所示，字段选择为地类字段和村名字段。之后程序输出为一个表格，“打开属性表”打开之后，可见其信息如下图2，各村的各类面积都已补充完整，将相关数据填入TDFG_RH中的相关字段即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" alt=\"\"></p>\n<p>4、将TDFG_RH图层中的RK（人口）字段按照相关资料（主要是网上相关的资料）进行填入，大致区间在300-1300人之间，之后打开编辑后，使用“字段计算器”，填入相应内容后，将RJGDMJ（人均耕地面积）进行计算与填入。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"坡度的分村统计\"><a href=\"#坡度的分村统计\" class=\"headerlink\" title=\"坡度的分村统计\"></a>坡度的分村统计</h3><p>坡度的统计需要借用ArcGIS中的相关功能以及已有的DGX、GCD等数据，主要步骤如下。 </p>\n<p>1、在ArcGIS中借用“3D Analyst工具”-&gt;“数据管理”-&gt;“TIN”-&gt;“创建TIN”，输入如下图1参数，得到TIN数据如下图2。TIN数据与DEM数据最大的区别是一个是矢量数据一个是栅格数据，因此要实现转化须将其进行矢栅转化。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" style=\"zoom: 50%;\" />\n\n<p>2、“3D Analyst工具”-&gt;“转换”-&gt;“由TIN转出”-&gt;“TIN转栅格”，实现TIN数据与DEM数据的转化，具体输入见下图1，DEM数据效果见下图2。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8715.png\" alt=\"\"></p>\n<p>3、使用ArcGIS中的“坡度”工具，将DEM数据输入，得到相应的坡度图，效果如下两图。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8716.png\" style=\"zoom: 67%;\" />\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8717.png\" style=\"zoom:50%;\" />\n\n<p>4、使用ArcGIS中的转换工具（可以直接转也可以使用ArcToolBoxzhon给的相关工具）将坡度图导出为tif格式，并将其导入QGIS，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8718.png\" style=\"zoom:50%;\" />\n\n<p>5、使用“分区统计”工具对各村坡度进行计算，该程序运行完之后会发现输入的TDFG_RH图层中多了三个计算图层，如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8719.png\" alt=\"\"></p>\n<p>6、取上表的相关数据导入excel中进行数据统计，便于之后绘制图表。</p>\n<h2 id=\"制作专题地图底图\"><a href=\"#制作专题地图底图\" class=\"headerlink\" title=\"制作专题地图底图\"></a>制作专题地图底图</h2><p>在《QGis地表覆盖图编制》基础上进行要素选取，最后结果如下</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8720.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"制作专题地图主图\"><a href=\"#制作专题地图主图\" class=\"headerlink\" title=\"制作专题地图主图\"></a>制作专题地图主图</h2><h3 id=\"分级设色\"><a href=\"#分级设色\" class=\"headerlink\" title=\"分级设色\"></a>分级设色</h3><p>1、在相关图层的属性下的“符号”中，进行如下选择，可得到分级设色的效果。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8721.png\" style=\"zoom:50%;\" />\n\n<p>2、调整相关颜色（颜色1与颜色2）如下，使其符合基本的色彩视觉要求要求。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8722.png\" style=\"zoom:50%;\" />\n\n<p>3、完成分级设色，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8723.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"饼状图绘制\"><a href=\"#饼状图绘制\" class=\"headerlink\" title=\"饼状图绘制\"></a>饼状图绘制</h3><p>1、利用质心工具对新界线进行求质心操作，得到质心图如下，同时该质心图层已经包含了TDFG_RH中在2.2.2中进行统计后的字段。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8724.png\" style=\"zoom:50%;\" />\n\n<p>2、利用已经统计了的数据实现饼状图的绘制，在属性中“图表”中进行如下选择，可实现饼状图绘制，更改颜色后，完成饼状图绘制。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8725.png\" style=\"zoom:67%;\" />\n\n<p>3、由于饼状图的图例绘制在QGIS中效果不好，因此本次实习选择在AI中对其进行绘制，绘制完成后如下，可导出为PNG格式。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8726.png\" style=\"zoom: 80%;\" />\n\n<p>4、整体效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8727.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h3><p>同样根据统计数据使用AI进行绘制，不再赘述</p>\n<h2 id=\"地图整饰\"><a href=\"#地图整饰\" class=\"headerlink\" title=\"地图整饰\"></a>地图整饰</h2><p>地图整饰包括制作色带、图名、指北针、数字比例尺、位置图、图例等内容，本节也以此为基础进行相关叙述。其中其余参考《QGis地表覆盖图编制》即可</p>\n<h3 id=\"位置图\"><a href=\"#位置图\" class=\"headerlink\" title=\"位置图\"></a>位置图</h3><p>1、将位置图图片导入项目，并使用配准工具对其进行处理，如下图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8728.png\" style=\"zoom:50%;\" />\n\n<p>2、使用QGIS中的“栅格矢量化”工具对该位图进行矢量化，具体见面如下，可得到位置图的矢量图（本次实习使用该功能效果不太好）</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8729.png\" style=\"zoom:67%;\" />\n\n<p>3、对其进行分类处理，并新增一个MC（名称）字段，调整颜色，设置标志（注记），即完成位置图的制作，效果如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8730.png\" alt=\"\"></p>\n<h3 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h3><p>1、在菜单栏左侧使用相应工具添加图例，并设置其条目属性，并将图例置于右下角，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8731.png\" style=\"zoom:50%;\" />\n\n<p>2、将4.2小节中绘制好的饼状图图例以导入图片的形式导入，并将其置于右下角。</p>\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8732.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><p>本次任务是制作蕲春县株林镇的土地覆盖专题图，因此重点主要是通过一些空间分析方法对相关数据进行处理，从而得到相关专题数据，同时，对专题图底图也应在实习一的基础上进行简化修改，总结而言，本次任务具体环节如下：</p>\n<p>1、对之前的TDFG数据添加村代码和村名。使用按位置连接等工具连接相关的村名、村代码。</p>\n<p>2、土地利用数据的权属数据和行政区数据整理。xzq数据与地类图斑数据边界不一致，需要处理成为一致的。同时增加一个新的村，有自己的学号，以及自己命名一个村名。以改好权属的dltb为基础，采用融合方法，按权属代码融合得到新的xzq层，并转一个新界线层。</p>\n<p>3、准备专题图数据。使用相应方法统计与计算各村各大类的各种面积属性项，如耕地面积、人均耕地面积、人口等等。</p>\n<p>4、制作专题地图底图。图纸采用A4大小，版式自己进行设计横版或竖版；注意主图比例尺设计合适，使主图、整饰要素、统计图表、图文等要素布局均衡、松紧适宜。底图要素保留行政界线、主要河流、水库、居民点；道路根据各自设计处理。增加必要的地图注记，如选取居民点、主要河流、水库等名称，可采用标注方法。</p>\n<p>5、制作专题地图主图。以输入专题数据的xzq为基础，用渐变填色方法制作人均耕地分级色图；由XZQ生成质点，加载质点数据，用结构图方法制作各类用地结构图表；根据全市或分村统计各坡度级耕地面积，制作图外统计图表。</p>\n<p>6、制作专题图整饰。添加色带、图名、指北针、数字比例尺、位置图、图例等。</p>\n<h2 id=\"土地利用数据的权属数据整理\"><a href=\"#土地利用数据的权属数据整理\" class=\"headerlink\" title=\"土地利用数据的权属数据整理\"></a>土地利用数据的权属数据整理</h2><h3 id=\"添加村代码和村名\"><a href=\"#添加村代码和村名\" class=\"headerlink\" title=\"添加村代码和村名\"></a>添加村代码和村名</h3><p>此处总体步骤为使用实习一中的TDFG数据，对各地类多边形进行求质心操作，进而通过对质心位置的判断，链接上村名和村代码。本人的具体操作如下。</p>\n<p>1、首先对实习1中的TDFG数据，选择“矢量”下的“拓扑结构检查器”（需要在插件中加载该功能）进行拓扑检查（检查无效多边形），避免生成质心时QGIS报错。如下图1即为本次实习中有拓扑错误的多边形。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n<p>2、根据拓扑错误对多边形进行修改，主要应避免如下图的拓扑错误，方法为在该处取消吸附功能。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom:33%;\" />\n\n<p>3、对修改后的TDFG图层进行求质心操作，可右击菜单栏打开“处理工具箱”工具，之后的一系列相关操作功能都可在该工具栏中进行搜索获得。如下一图即为“质心”工具运行结果，如下二图为求质心之后的效果。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom: 80%;\" />\n\n<p>4、使用“按位置连接”工具，选择“内含于”等选项，运行结果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:67%;\" />\n\n<p>5、选择“按字段值连接属性”，各选项如下。完成村名和村代码的添加。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"按各村界线进行图形分割\"><a href=\"#按各村界线进行图形分割\" class=\"headerlink\" title=\"按各村界线进行图形分割\"></a>按各村界线进行图形分割</h3><p>本步骤主要就是按照实习一中的XZQ图层对各个跨越XZQ的图版进行分割（主要就是实习一中补充的那部分），方法是启动编辑后使用“编辑”中的“分割要素”工具对图形进行切割，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"新增村庄\"><a href=\"#新增村庄\" class=\"headerlink\" title=\"新增村庄\"></a>新增村庄</h3><p>按照要求，随便选一块区域，将属性表中的村名、村代码进行更改，形成一个新的村子，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"融合\"><a href=\"#融合\" class=\"headerlink\" title=\"融合\"></a>融合</h3><p>融合的目的即为使属性表中为一个村的地区真正“融”为一个村，从而形成的边界图层替代实习一中的XZQ图层，为之后的专题图制作提供基础底图。本次实习先使用了QGIS中的融合工具，但效果不佳，有如下图所示的裂纹，无法使用。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" alt=\"\"></p>\n<p>鉴于此，本次实习在该功能上使用了ArcGIS中的“融合”功能，其相关参数如下（由于数据源的问题，村名中出现了一些代码，因此本处使用村代码作为融合依据，之后根据村名和村代码的对应关系将村名链接了上去）。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:50%;\" />\n\n<p>由于之前在QGIS中对部分图形进行了切割的缘故，在ArcGIS生成的融合图形中仍有部分毛边，本次实习在ArcGIS中启用编辑，使用“删除点”工具对这些毛边进行了处理，同时使用“添加点”功能对部分细小缝隙进行了修补，以避免之后生成质心时出现拓扑错误，完成操作后使用QGIS打开相关shp文件，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom: 33%;\" />\n\n<h2 id=\"专题图数据处理与统计\"><a href=\"#专题图数据处理与统计\" class=\"headerlink\" title=\"专题图数据处理与统计\"></a>专题图数据处理与统计</h2><h3 id=\"相关数据的分村统计\"><a href=\"#相关数据的分村统计\" class=\"headerlink\" title=\"相关数据的分村统计\"></a>相关数据的分村统计</h3><p>所需的数据主要包括各村的面积、人口、各大类地面积、人均耕地面积等数据，除去人口数据是需要自己进行输入，其余都需通过各分析方法得到。</p>\n<p>1、对2.1节中得到的“新界线”图层TDFG_RH添加新字段，主要内容为以上所述的各内容，类型选择为“小数”。 </p>\n<p>2、在“处理工具箱”中搜索找到“添加几何属性”功能，输入要素如下图，得到一个有相关面积等数据的图层，将该临时图层中相关字段中的面积数据连接到TDFG_RH中的相关字段，得到各村面积数据。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:50%;\" />\n\n<p>3、在“处理工具箱”中搜索找到“按类别统计工具”，输入要素如下图1所示，字段选择为地类字段和村名字段。之后程序输出为一个表格，“打开属性表”打开之后，可见其信息如下图2，各村的各类面积都已补充完整，将相关数据填入TDFG_RH中的相关字段即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" alt=\"\"></p>\n<p>4、将TDFG_RH图层中的RK（人口）字段按照相关资料（主要是网上相关的资料）进行填入，大致区间在300-1300人之间，之后打开编辑后，使用“字段计算器”，填入相应内容后，将RJGDMJ（人均耕地面积）进行计算与填入。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"坡度的分村统计\"><a href=\"#坡度的分村统计\" class=\"headerlink\" title=\"坡度的分村统计\"></a>坡度的分村统计</h3><p>坡度的统计需要借用ArcGIS中的相关功能以及已有的DGX、GCD等数据，主要步骤如下。 </p>\n<p>1、在ArcGIS中借用“3D Analyst工具”-&gt;“数据管理”-&gt;“TIN”-&gt;“创建TIN”，输入如下图1参数，得到TIN数据如下图2。TIN数据与DEM数据最大的区别是一个是矢量数据一个是栅格数据，因此要实现转化须将其进行矢栅转化。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" style=\"zoom: 50%;\" />\n\n<p>2、“3D Analyst工具”-&gt;“转换”-&gt;“由TIN转出”-&gt;“TIN转栅格”，实现TIN数据与DEM数据的转化，具体输入见下图1，DEM数据效果见下图2。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8715.png\" alt=\"\"></p>\n<p>3、使用ArcGIS中的“坡度”工具，将DEM数据输入，得到相应的坡度图，效果如下两图。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8716.png\" style=\"zoom: 67%;\" />\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8717.png\" style=\"zoom:50%;\" />\n\n<p>4、使用ArcGIS中的转换工具（可以直接转也可以使用ArcToolBoxzhon给的相关工具）将坡度图导出为tif格式，并将其导入QGIS，如图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8718.png\" style=\"zoom:50%;\" />\n\n<p>5、使用“分区统计”工具对各村坡度进行计算，该程序运行完之后会发现输入的TDFG_RH图层中多了三个计算图层，如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8719.png\" alt=\"\"></p>\n<p>6、取上表的相关数据导入excel中进行数据统计，便于之后绘制图表。</p>\n<h2 id=\"制作专题地图底图\"><a href=\"#制作专题地图底图\" class=\"headerlink\" title=\"制作专题地图底图\"></a>制作专题地图底图</h2><p>在《QGis地表覆盖图编制》基础上进行要素选取，最后结果如下</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8720.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"制作专题地图主图\"><a href=\"#制作专题地图主图\" class=\"headerlink\" title=\"制作专题地图主图\"></a>制作专题地图主图</h2><h3 id=\"分级设色\"><a href=\"#分级设色\" class=\"headerlink\" title=\"分级设色\"></a>分级设色</h3><p>1、在相关图层的属性下的“符号”中，进行如下选择，可得到分级设色的效果。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8721.png\" style=\"zoom:50%;\" />\n\n<p>2、调整相关颜色（颜色1与颜色2）如下，使其符合基本的色彩视觉要求要求。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8722.png\" style=\"zoom:50%;\" />\n\n<p>3、完成分级设色，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8723.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"饼状图绘制\"><a href=\"#饼状图绘制\" class=\"headerlink\" title=\"饼状图绘制\"></a>饼状图绘制</h3><p>1、利用质心工具对新界线进行求质心操作，得到质心图如下，同时该质心图层已经包含了TDFG_RH中在2.2.2中进行统计后的字段。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8724.png\" style=\"zoom:50%;\" />\n\n<p>2、利用已经统计了的数据实现饼状图的绘制，在属性中“图表”中进行如下选择，可实现饼状图绘制，更改颜色后，完成饼状图绘制。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8725.png\" style=\"zoom:67%;\" />\n\n<p>3、由于饼状图的图例绘制在QGIS中效果不好，因此本次实习选择在AI中对其进行绘制，绘制完成后如下，可导出为PNG格式。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8726.png\" style=\"zoom: 80%;\" />\n\n<p>4、整体效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8727.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h3><p>同样根据统计数据使用AI进行绘制，不再赘述</p>\n<h2 id=\"地图整饰\"><a href=\"#地图整饰\" class=\"headerlink\" title=\"地图整饰\"></a>地图整饰</h2><p>地图整饰包括制作色带、图名、指北针、数字比例尺、位置图、图例等内容，本节也以此为基础进行相关叙述。其中其余参考《QGis地表覆盖图编制》即可</p>\n<h3 id=\"位置图\"><a href=\"#位置图\" class=\"headerlink\" title=\"位置图\"></a>位置图</h3><p>1、将位置图图片导入项目，并使用配准工具对其进行处理，如下图所示。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8728.png\" style=\"zoom:50%;\" />\n\n<p>2、使用QGIS中的“栅格矢量化”工具对该位图进行矢量化，具体见面如下，可得到位置图的矢量图（本次实习使用该功能效果不太好）</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8729.png\" style=\"zoom:67%;\" />\n\n<p>3、对其进行分类处理，并新增一个MC（名称）字段，调整颜色，设置标志（注记），即完成位置图的制作，效果如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8730.png\" alt=\"\"></p>\n<h3 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h3><p>1、在菜单栏左侧使用相应工具添加图例，并设置其条目属性，并将图例置于右下角，效果如下。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8731.png\" style=\"zoom:50%;\" />\n\n<p>2、将4.2小节中绘制好的饼状图图例以导入图片的形式导入，并将其置于右下角。</p>\n<h2 id=\"整体效果\"><a href=\"#整体效果\" class=\"headerlink\" title=\"整体效果\"></a>整体效果</h2><p><img src=\"http://cdn.ziyedy.top/image/QGis%E4%B8%93%E9%A2%98%E5%9C%B0%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8732.png\" alt=\"\"></p>\n"},{"title":"QGis地表覆盖图编制","date":"2020-01-07T08:43:34.000Z","fileName":"qgis-Surface-coverage-mapping","_content":"\n## 数据采集\n\n### 图像配准与提取\n\n没有精确的图像配准，后续对数据的判读及精确的矢量化便无从谈起，将影像投影设置为与DLTB图层一致之后，便可按如下步骤在QGIS中完成相应的工作。 \n\n1、右键菜单栏加载出对应的菜单，并且在插件菜单栏中调出默认安装了的GDAL配准插件， 并且将相应的影像数据等加入建立好的工程。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n2、打开配准工具，将要进行操作的影像图导入，之后根据地图地名等信息使得DLTB图层上相应点与影像上的点一一对应，选择四个点及以上时完成配准，本次实验选点及配置如下图。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom: 67%;\" />\n\n3、结束点对对应后，点击配准菜单栏上的“开始配准”并完成配准，得到一个配准完成后的影像图层。效果如下所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom:67%;\" />\n\n4、配准完成后在菜单栏“栅格”中选择“提取”下的“按掩膜图层裁剪栅格”，并将无数据区透明度设置为0，此举使得影像数据与DLTB数据基本重合，便于后续操作 \n\n### 空缺数据补充\n\n在使用原始的DLTB数据时，根据“核对修改范围”数据的提示，可以很清楚的看到其中间部分有一空缺处，而根据3.1.1处理好的结果，对DLTB数据在“符号化”中进行分类， 如下图。并在分类的基础上根据影像图进行地图矢量化，并按照影像图对其相关字段进行命名，从而完成空缺数据的补充（其中各矢量化工具的使用基本与ArcGIS中的相应工具类似，因此不再赘述）。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:50%;\" />\n\n### 其他数据的补充\n\n除去DLTB空缺的数据，还应对居民地，相应公路等数据进行补充，与以上相比，矢量化工具由多边形变为了点和线，因此不再赘述，大致结果图如下\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 67%;\" />![](http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png)\n\n\n\n## 数据检查\n\n一些基本的数据检查方法此处略，只对应QGis的相关操作。由于原始数据中编码相对较老，因此需要进行更新编码的操作，此处可以使用表连接方法\n\n### 更改数据对应编码\n\n在QGIS当中，本次具体的对应操作为建立一个相应的Excel表，在表中设置三列数据， 分别对应两类名称与对应的新编码，如下图所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom:70%;\" />\n\n\n\n之后在属性中选择“连接”并选择相应Excel表的相应字段，具体见下图，连接完成后可见DLTB图层的属性表中多出了两条字段，分别对应新名称与新编号。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom:50%;\" />\n\n最后将其导出为TDFG图层，按照新字段进行分类后（见下图），之后便以此为基础在TDFG图层上进行之后的符号化。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" style=\"zoom: 50%;\" />\n\n## 地图的编绘\n\n完成了之前包括影像配准，数据对应整理与处理，空缺数据矢量化与补充，数据相应转化后，便可进入地图绘制的阶段，此阶段主要可概括为符号的使用与制作， 地图的整饰与制作两个阶段。 \n\n### 符号的使用与制作\n\n本次操作较为简单，在TDFG图层的分类下右击鼠标选中“编辑符号”，进入符号后更改填充颜色、线宽、点状符号、线状符号即可，如下图。由于相应符号老师都已给出，因此总体而言较为方便，唯一不便的地方就是得将CMYK转化为RGB再输入， 此过程本人使用AI得到。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:67%;\" />\n\n### 地图的整饰设计\n\n本次实习所进行的地图整饰设计主要包括色带、图廓、方里网、图名、图例、比例尺等内容。进行整饰在QGIS中可在“项目”菜单中选择“新建打印布局”，之后在其中完成一系列相关操作即可。 \n\n#### 色带\n\n即图地图外部上的条带。本次实习色带是使用QGIS自带的轮廓功能制作的。具体步骤为在“矢量”菜单栏地学数据处理工具中选择“轮廓”，并选择相关数值， 对TDFG图层进行两次使用后，即可得到两个色带。 \n\n#### 图廓\n\n图廓相关在4.2总述中已经涉及了，页面即为外图廓，而内图廓即拖动地图使之与外图廓契合并能够很好显示地图即可。可使用左侧菜单栏中“选择/移动条目”与“移动条目内容”对其进行设置。\n\n#### 方里网\n\n方里网在地图的条目属性中添加网格，并更改并应用网格属性，设置如下图所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom:67%;\" />\n\n#### 图名\n\n在菜单栏左侧使用相应工具添加图名，并更改其条目属性如下，再将其置于相应位置，本次为图面左上角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:67%;\" />\n\n#### 图例\n\n在菜单栏左侧使用相应工具添加图例，并设置其条目属性如下，并将图例置于右下角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" style=\"zoom:67%;\" />\n\n#### 比例尺\n\n在菜单栏左侧使用相应工具添加比例尺，并设置其条目属性如下，并将其置于图面右下角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom: 67%;\" />\n\n## 成果图\n\n![](http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png)","source":"_posts/GIS/QGis地表覆盖图编制.md","raw":"---\ntitle: QGis地表覆盖图编制\ndate: 2020-01-07 16:43:34\ntags:\n\t- QGis\ncategories:\n\t- GIS\nfileName: qgis-Surface-coverage-mapping\n---\n\n## 数据采集\n\n### 图像配准与提取\n\n没有精确的图像配准，后续对数据的判读及精确的矢量化便无从谈起，将影像投影设置为与DLTB图层一致之后，便可按如下步骤在QGIS中完成相应的工作。 \n\n1、右键菜单栏加载出对应的菜单，并且在插件菜单栏中调出默认安装了的GDAL配准插件， 并且将相应的影像数据等加入建立好的工程。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n2、打开配准工具，将要进行操作的影像图导入，之后根据地图地名等信息使得DLTB图层上相应点与影像上的点一一对应，选择四个点及以上时完成配准，本次实验选点及配置如下图。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom: 67%;\" />\n\n3、结束点对对应后，点击配准菜单栏上的“开始配准”并完成配准，得到一个配准完成后的影像图层。效果如下所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom:67%;\" />\n\n4、配准完成后在菜单栏“栅格”中选择“提取”下的“按掩膜图层裁剪栅格”，并将无数据区透明度设置为0，此举使得影像数据与DLTB数据基本重合，便于后续操作 \n\n### 空缺数据补充\n\n在使用原始的DLTB数据时，根据“核对修改范围”数据的提示，可以很清楚的看到其中间部分有一空缺处，而根据3.1.1处理好的结果，对DLTB数据在“符号化”中进行分类， 如下图。并在分类的基础上根据影像图进行地图矢量化，并按照影像图对其相关字段进行命名，从而完成空缺数据的补充（其中各矢量化工具的使用基本与ArcGIS中的相应工具类似，因此不再赘述）。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:50%;\" />\n\n### 其他数据的补充\n\n除去DLTB空缺的数据，还应对居民地，相应公路等数据进行补充，与以上相比，矢量化工具由多边形变为了点和线，因此不再赘述，大致结果图如下\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 67%;\" />![](http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png)\n\n\n\n## 数据检查\n\n一些基本的数据检查方法此处略，只对应QGis的相关操作。由于原始数据中编码相对较老，因此需要进行更新编码的操作，此处可以使用表连接方法\n\n### 更改数据对应编码\n\n在QGIS当中，本次具体的对应操作为建立一个相应的Excel表，在表中设置三列数据， 分别对应两类名称与对应的新编码，如下图所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom:70%;\" />\n\n\n\n之后在属性中选择“连接”并选择相应Excel表的相应字段，具体见下图，连接完成后可见DLTB图层的属性表中多出了两条字段，分别对应新名称与新编号。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom:50%;\" />\n\n最后将其导出为TDFG图层，按照新字段进行分类后（见下图），之后便以此为基础在TDFG图层上进行之后的符号化。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" style=\"zoom: 50%;\" />\n\n## 地图的编绘\n\n完成了之前包括影像配准，数据对应整理与处理，空缺数据矢量化与补充，数据相应转化后，便可进入地图绘制的阶段，此阶段主要可概括为符号的使用与制作， 地图的整饰与制作两个阶段。 \n\n### 符号的使用与制作\n\n本次操作较为简单，在TDFG图层的分类下右击鼠标选中“编辑符号”，进入符号后更改填充颜色、线宽、点状符号、线状符号即可，如下图。由于相应符号老师都已给出，因此总体而言较为方便，唯一不便的地方就是得将CMYK转化为RGB再输入， 此过程本人使用AI得到。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:67%;\" />\n\n### 地图的整饰设计\n\n本次实习所进行的地图整饰设计主要包括色带、图廓、方里网、图名、图例、比例尺等内容。进行整饰在QGIS中可在“项目”菜单中选择“新建打印布局”，之后在其中完成一系列相关操作即可。 \n\n#### 色带\n\n即图地图外部上的条带。本次实习色带是使用QGIS自带的轮廓功能制作的。具体步骤为在“矢量”菜单栏地学数据处理工具中选择“轮廓”，并选择相关数值， 对TDFG图层进行两次使用后，即可得到两个色带。 \n\n#### 图廓\n\n图廓相关在4.2总述中已经涉及了，页面即为外图廓，而内图廓即拖动地图使之与外图廓契合并能够很好显示地图即可。可使用左侧菜单栏中“选择/移动条目”与“移动条目内容”对其进行设置。\n\n#### 方里网\n\n方里网在地图的条目属性中添加网格，并更改并应用网格属性，设置如下图所示。 \n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom:67%;\" />\n\n#### 图名\n\n在菜单栏左侧使用相应工具添加图名，并更改其条目属性如下，再将其置于相应位置，本次为图面左上角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:67%;\" />\n\n#### 图例\n\n在菜单栏左侧使用相应工具添加图例，并设置其条目属性如下，并将图例置于右下角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" style=\"zoom:67%;\" />\n\n#### 比例尺\n\n在菜单栏左侧使用相应工具添加比例尺，并设置其条目属性如下，并将其置于图面右下角。\n\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom: 67%;\" />\n\n## 成果图\n\n![](http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png)","slug":"GIS/QGis地表覆盖图编制","published":1,"updated":"2021-01-11T04:21:14.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo7w0008rwjs5dlo6tgg","content":"<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2><h3 id=\"图像配准与提取\"><a href=\"#图像配准与提取\" class=\"headerlink\" title=\"图像配准与提取\"></a>图像配准与提取</h3><p>没有精确的图像配准，后续对数据的判读及精确的矢量化便无从谈起，将影像投影设置为与DLTB图层一致之后，便可按如下步骤在QGIS中完成相应的工作。 </p>\n<p>1、右键菜单栏加载出对应的菜单，并且在插件菜单栏中调出默认安装了的GDAL配准插件， 并且将相应的影像数据等加入建立好的工程。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n<p>2、打开配准工具，将要进行操作的影像图导入，之后根据地图地名等信息使得DLTB图层上相应点与影像上的点一一对应，选择四个点及以上时完成配准，本次实验选点及配置如下图。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom: 67%;\" />\n\n<p>3、结束点对对应后，点击配准菜单栏上的“开始配准”并完成配准，得到一个配准完成后的影像图层。效果如下所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom:67%;\" />\n\n<p>4、配准完成后在菜单栏“栅格”中选择“提取”下的“按掩膜图层裁剪栅格”，并将无数据区透明度设置为0，此举使得影像数据与DLTB数据基本重合，便于后续操作 </p>\n<h3 id=\"空缺数据补充\"><a href=\"#空缺数据补充\" class=\"headerlink\" title=\"空缺数据补充\"></a>空缺数据补充</h3><p>在使用原始的DLTB数据时，根据“核对修改范围”数据的提示，可以很清楚的看到其中间部分有一空缺处，而根据3.1.1处理好的结果，对DLTB数据在“符号化”中进行分类， 如下图。并在分类的基础上根据影像图进行地图矢量化，并按照影像图对其相关字段进行命名，从而完成空缺数据的补充（其中各矢量化工具的使用基本与ArcGIS中的相应工具类似，因此不再赘述）。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"其他数据的补充\"><a href=\"#其他数据的补充\" class=\"headerlink\" title=\"其他数据的补充\"></a>其他数据的补充</h3><p>除去DLTB空缺的数据，还应对居民地，相应公路等数据进行补充，与以上相比，矢量化工具由多边形变为了点和线，因此不再赘述，大致结果图如下</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 67%;\" /><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" alt=\"\"></p>\n<h2 id=\"数据检查\"><a href=\"#数据检查\" class=\"headerlink\" title=\"数据检查\"></a>数据检查</h2><p>一些基本的数据检查方法此处略，只对应QGis的相关操作。由于原始数据中编码相对较老，因此需要进行更新编码的操作，此处可以使用表连接方法</p>\n<h3 id=\"更改数据对应编码\"><a href=\"#更改数据对应编码\" class=\"headerlink\" title=\"更改数据对应编码\"></a>更改数据对应编码</h3><p>在QGIS当中，本次具体的对应操作为建立一个相应的Excel表，在表中设置三列数据， 分别对应两类名称与对应的新编码，如下图所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom:70%;\" />\n\n\n\n<p>之后在属性中选择“连接”并选择相应Excel表的相应字段，具体见下图，连接完成后可见DLTB图层的属性表中多出了两条字段，分别对应新名称与新编号。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom:50%;\" />\n\n<p>最后将其导出为TDFG图层，按照新字段进行分类后（见下图），之后便以此为基础在TDFG图层上进行之后的符号化。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" style=\"zoom: 50%;\" />\n\n<h2 id=\"地图的编绘\"><a href=\"#地图的编绘\" class=\"headerlink\" title=\"地图的编绘\"></a>地图的编绘</h2><p>完成了之前包括影像配准，数据对应整理与处理，空缺数据矢量化与补充，数据相应转化后，便可进入地图绘制的阶段，此阶段主要可概括为符号的使用与制作， 地图的整饰与制作两个阶段。 </p>\n<h3 id=\"符号的使用与制作\"><a href=\"#符号的使用与制作\" class=\"headerlink\" title=\"符号的使用与制作\"></a>符号的使用与制作</h3><p>本次操作较为简单，在TDFG图层的分类下右击鼠标选中“编辑符号”，进入符号后更改填充颜色、线宽、点状符号、线状符号即可，如下图。由于相应符号老师都已给出，因此总体而言较为方便，唯一不便的地方就是得将CMYK转化为RGB再输入， 此过程本人使用AI得到。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"地图的整饰设计\"><a href=\"#地图的整饰设计\" class=\"headerlink\" title=\"地图的整饰设计\"></a>地图的整饰设计</h3><p>本次实习所进行的地图整饰设计主要包括色带、图廓、方里网、图名、图例、比例尺等内容。进行整饰在QGIS中可在“项目”菜单中选择“新建打印布局”，之后在其中完成一系列相关操作即可。 </p>\n<h4 id=\"色带\"><a href=\"#色带\" class=\"headerlink\" title=\"色带\"></a>色带</h4><p>即图地图外部上的条带。本次实习色带是使用QGIS自带的轮廓功能制作的。具体步骤为在“矢量”菜单栏地学数据处理工具中选择“轮廓”，并选择相关数值， 对TDFG图层进行两次使用后，即可得到两个色带。 </p>\n<h4 id=\"图廓\"><a href=\"#图廓\" class=\"headerlink\" title=\"图廓\"></a>图廓</h4><p>图廓相关在4.2总述中已经涉及了，页面即为外图廓，而内图廓即拖动地图使之与外图廓契合并能够很好显示地图即可。可使用左侧菜单栏中“选择/移动条目”与“移动条目内容”对其进行设置。</p>\n<h4 id=\"方里网\"><a href=\"#方里网\" class=\"headerlink\" title=\"方里网\"></a>方里网</h4><p>方里网在地图的条目属性中添加网格，并更改并应用网格属性，设置如下图所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"图名\"><a href=\"#图名\" class=\"headerlink\" title=\"图名\"></a>图名</h4><p>在菜单栏左侧使用相应工具添加图名，并更改其条目属性如下，再将其置于相应位置，本次为图面左上角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h4><p>在菜单栏左侧使用相应工具添加图例，并设置其条目属性如下，并将图例置于右下角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h4><p>在菜单栏左侧使用相应工具添加比例尺，并设置其条目属性如下，并将其置于图面右下角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom: 67%;\" />\n\n<h2 id=\"成果图\"><a href=\"#成果图\" class=\"headerlink\" title=\"成果图\"></a>成果图</h2><p><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据采集\"><a href=\"#数据采集\" class=\"headerlink\" title=\"数据采集\"></a>数据采集</h2><h3 id=\"图像配准与提取\"><a href=\"#图像配准与提取\" class=\"headerlink\" title=\"图像配准与提取\"></a>图像配准与提取</h3><p>没有精确的图像配准，后续对数据的判读及精确的矢量化便无从谈起，将影像投影设置为与DLTB图层一致之后，便可按如下步骤在QGIS中完成相应的工作。 </p>\n<p>1、右键菜单栏加载出对应的菜单，并且在插件菜单栏中调出默认安装了的GDAL配准插件， 并且将相应的影像数据等加入建立好的工程。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%871.png\" style=\"zoom:67%;\" />\n\n<p>2、打开配准工具，将要进行操作的影像图导入，之后根据地图地名等信息使得DLTB图层上相应点与影像上的点一一对应，选择四个点及以上时完成配准，本次实验选点及配置如下图。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%872.png\" style=\"zoom: 67%;\" />\n\n<p>3、结束点对对应后，点击配准菜单栏上的“开始配准”并完成配准，得到一个配准完成后的影像图层。效果如下所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%873.png\" style=\"zoom:67%;\" />\n\n<p>4、配准完成后在菜单栏“栅格”中选择“提取”下的“按掩膜图层裁剪栅格”，并将无数据区透明度设置为0，此举使得影像数据与DLTB数据基本重合，便于后续操作 </p>\n<h3 id=\"空缺数据补充\"><a href=\"#空缺数据补充\" class=\"headerlink\" title=\"空缺数据补充\"></a>空缺数据补充</h3><p>在使用原始的DLTB数据时，根据“核对修改范围”数据的提示，可以很清楚的看到其中间部分有一空缺处，而根据3.1.1处理好的结果，对DLTB数据在“符号化”中进行分类， 如下图。并在分类的基础上根据影像图进行地图矢量化，并按照影像图对其相关字段进行命名，从而完成空缺数据的补充（其中各矢量化工具的使用基本与ArcGIS中的相应工具类似，因此不再赘述）。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%874.png\" style=\"zoom:50%;\" />\n\n<h3 id=\"其他数据的补充\"><a href=\"#其他数据的补充\" class=\"headerlink\" title=\"其他数据的补充\"></a>其他数据的补充</h3><p>除去DLTB空缺的数据，还应对居民地，相应公路等数据进行补充，与以上相比，矢量化工具由多边形变为了点和线，因此不再赘述，大致结果图如下</p>\n<p><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%875.png\" style=\"zoom: 67%;\" /><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" alt=\"\"></p>\n<h2 id=\"数据检查\"><a href=\"#数据检查\" class=\"headerlink\" title=\"数据检查\"></a>数据检查</h2><p>一些基本的数据检查方法此处略，只对应QGis的相关操作。由于原始数据中编码相对较老，因此需要进行更新编码的操作，此处可以使用表连接方法</p>\n<h3 id=\"更改数据对应编码\"><a href=\"#更改数据对应编码\" class=\"headerlink\" title=\"更改数据对应编码\"></a>更改数据对应编码</h3><p>在QGIS当中，本次具体的对应操作为建立一个相应的Excel表，在表中设置三列数据， 分别对应两类名称与对应的新编码，如下图所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%876.png\" style=\"zoom:70%;\" />\n\n\n\n<p>之后在属性中选择“连接”并选择相应Excel表的相应字段，具体见下图，连接完成后可见DLTB图层的属性表中多出了两条字段，分别对应新名称与新编号。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%877.png\" style=\"zoom:50%;\" />\n\n<p>最后将其导出为TDFG图层，按照新字段进行分类后（见下图），之后便以此为基础在TDFG图层上进行之后的符号化。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%878.png\" style=\"zoom: 50%;\" />\n\n<h2 id=\"地图的编绘\"><a href=\"#地图的编绘\" class=\"headerlink\" title=\"地图的编绘\"></a>地图的编绘</h2><p>完成了之前包括影像配准，数据对应整理与处理，空缺数据矢量化与补充，数据相应转化后，便可进入地图绘制的阶段，此阶段主要可概括为符号的使用与制作， 地图的整饰与制作两个阶段。 </p>\n<h3 id=\"符号的使用与制作\"><a href=\"#符号的使用与制作\" class=\"headerlink\" title=\"符号的使用与制作\"></a>符号的使用与制作</h3><p>本次操作较为简单，在TDFG图层的分类下右击鼠标选中“编辑符号”，进入符号后更改填充颜色、线宽、点状符号、线状符号即可，如下图。由于相应符号老师都已给出，因此总体而言较为方便，唯一不便的地方就是得将CMYK转化为RGB再输入， 此过程本人使用AI得到。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%879.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"地图的整饰设计\"><a href=\"#地图的整饰设计\" class=\"headerlink\" title=\"地图的整饰设计\"></a>地图的整饰设计</h3><p>本次实习所进行的地图整饰设计主要包括色带、图廓、方里网、图名、图例、比例尺等内容。进行整饰在QGIS中可在“项目”菜单中选择“新建打印布局”，之后在其中完成一系列相关操作即可。 </p>\n<h4 id=\"色带\"><a href=\"#色带\" class=\"headerlink\" title=\"色带\"></a>色带</h4><p>即图地图外部上的条带。本次实习色带是使用QGIS自带的轮廓功能制作的。具体步骤为在“矢量”菜单栏地学数据处理工具中选择“轮廓”，并选择相关数值， 对TDFG图层进行两次使用后，即可得到两个色带。 </p>\n<h4 id=\"图廓\"><a href=\"#图廓\" class=\"headerlink\" title=\"图廓\"></a>图廓</h4><p>图廓相关在4.2总述中已经涉及了，页面即为外图廓，而内图廓即拖动地图使之与外图廓契合并能够很好显示地图即可。可使用左侧菜单栏中“选择/移动条目”与“移动条目内容”对其进行设置。</p>\n<h4 id=\"方里网\"><a href=\"#方里网\" class=\"headerlink\" title=\"方里网\"></a>方里网</h4><p>方里网在地图的条目属性中添加网格，并更改并应用网格属性，设置如下图所示。 </p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8710.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"图名\"><a href=\"#图名\" class=\"headerlink\" title=\"图名\"></a>图名</h4><p>在菜单栏左侧使用相应工具添加图名，并更改其条目属性如下，再将其置于相应位置，本次为图面左上角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8711.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"图例\"><a href=\"#图例\" class=\"headerlink\" title=\"图例\"></a>图例</h4><p>在菜单栏左侧使用相应工具添加图例，并设置其条目属性如下，并将图例置于右下角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8712.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"比例尺\"><a href=\"#比例尺\" class=\"headerlink\" title=\"比例尺\"></a>比例尺</h4><p>在菜单栏左侧使用相应工具添加比例尺，并设置其条目属性如下，并将其置于图面右下角。</p>\n<img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8713.png\" style=\"zoom: 67%;\" />\n\n<h2 id=\"成果图\"><a href=\"#成果图\" class=\"headerlink\" title=\"成果图\"></a>成果图</h2><p><img src=\"http://cdn.ziyedy.top/image/QGis%E5%9C%B0%E8%A1%A8%E8%A6%86%E7%9B%96%E5%9B%BE%E7%BC%96%E5%88%B6/%E5%9B%BE%E7%89%8714.png\" alt=\"\"></p>\n"},{"title":"Ubuntu常用快捷键","date":"2020-08-06T03:39:37.000Z","fileName":"ubuntu-common-shortcut","_content":"\n记录一些比较常用的快捷键，一些如切屏之类的太常用的就没有记录\n\n\n\n### 系统操作\n\nCtrl + Alt + T 启用终端：\n\nAlt + F2 输入命令、启动程序（可以用于启动一些必须命令行启用的程序，网易云等）\n\nSuper + F10 打开程序菜单（用于退出程序等操作）\n\nSuper + A 展示所有程序及搜索框\n\nSuper + V 展示上方的日历和提醒列表\n\nSuper + L 锁定屏幕\n\n\n\n### 窗口操作\n\nSuper + H 隐藏窗口\n\nSuper + Up Arrow 最大化窗口\n\nSuper + Down Arrow 恢复窗口\n\nSuper + Right Arrow 将窗口置于屏幕右半侧\n\nSuper + Left Arrow 将窗口置于屏幕左半侧\n\nAlt + F4 关闭当前窗口\n\nCtrl + W 关闭当前窗口\n\nAlt + F7 移动窗口（用的比较少）\n\nAlt + F8 改变窗口大小（用的比较少）\n\nAlt + Space 激活窗口菜单\n\n\n\n### 桌面操作\n\nAlt + Shift+ Up/Down Arrow 切换桌面\n\nCtrl + Alt + D 类似Windows下的Win + D组合键，显示桌面 ，隐藏全部窗口\n\n\n\n### 文件操作\n\nAlt + Enter – 查看选择文件/文件夹的属性，代替单击右键选择属性\n\nAlt + Up/Down Arrow – 移动到父文件夹/选择的文件夹（左右的用的多一些）\n\nAlt + Left/Right Arrow – 在文件夹中后退/前进\n\nCtrl + L - 得到文件路径","source":"_posts/工具使用/Ubuntu常用快捷键.md","raw":"---\ntitle: Ubuntu常用快捷键\ndate: 2020-08-06 11:39:37\ntags:\n\t- Ubuntu\ncategories:\n\t- 工具使用\nfileName: ubuntu-common-shortcut\n---\n\n记录一些比较常用的快捷键，一些如切屏之类的太常用的就没有记录\n\n\n\n### 系统操作\n\nCtrl + Alt + T 启用终端：\n\nAlt + F2 输入命令、启动程序（可以用于启动一些必须命令行启用的程序，网易云等）\n\nSuper + F10 打开程序菜单（用于退出程序等操作）\n\nSuper + A 展示所有程序及搜索框\n\nSuper + V 展示上方的日历和提醒列表\n\nSuper + L 锁定屏幕\n\n\n\n### 窗口操作\n\nSuper + H 隐藏窗口\n\nSuper + Up Arrow 最大化窗口\n\nSuper + Down Arrow 恢复窗口\n\nSuper + Right Arrow 将窗口置于屏幕右半侧\n\nSuper + Left Arrow 将窗口置于屏幕左半侧\n\nAlt + F4 关闭当前窗口\n\nCtrl + W 关闭当前窗口\n\nAlt + F7 移动窗口（用的比较少）\n\nAlt + F8 改变窗口大小（用的比较少）\n\nAlt + Space 激活窗口菜单\n\n\n\n### 桌面操作\n\nAlt + Shift+ Up/Down Arrow 切换桌面\n\nCtrl + Alt + D 类似Windows下的Win + D组合键，显示桌面 ，隐藏全部窗口\n\n\n\n### 文件操作\n\nAlt + Enter – 查看选择文件/文件夹的属性，代替单击右键选择属性\n\nAlt + Up/Down Arrow – 移动到父文件夹/选择的文件夹（左右的用的多一些）\n\nAlt + Left/Right Arrow – 在文件夹中后退/前进\n\nCtrl + L - 得到文件路径","slug":"工具使用/Ubuntu常用快捷键","published":1,"updated":"2021-01-11T04:39:29.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo7x0009rwjsdnfe5sil","content":"<p>记录一些比较常用的快捷键，一些如切屏之类的太常用的就没有记录</p>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><p>Ctrl + Alt + T 启用终端：</p>\n<p>Alt + F2 输入命令、启动程序（可以用于启动一些必须命令行启用的程序，网易云等）</p>\n<p>Super + F10 打开程序菜单（用于退出程序等操作）</p>\n<p>Super + A 展示所有程序及搜索框</p>\n<p>Super + V 展示上方的日历和提醒列表</p>\n<p>Super + L 锁定屏幕</p>\n<h3 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h3><p>Super + H 隐藏窗口</p>\n<p>Super + Up Arrow 最大化窗口</p>\n<p>Super + Down Arrow 恢复窗口</p>\n<p>Super + Right Arrow 将窗口置于屏幕右半侧</p>\n<p>Super + Left Arrow 将窗口置于屏幕左半侧</p>\n<p>Alt + F4 关闭当前窗口</p>\n<p>Ctrl + W 关闭当前窗口</p>\n<p>Alt + F7 移动窗口（用的比较少）</p>\n<p>Alt + F8 改变窗口大小（用的比较少）</p>\n<p>Alt + Space 激活窗口菜单</p>\n<h3 id=\"桌面操作\"><a href=\"#桌面操作\" class=\"headerlink\" title=\"桌面操作\"></a>桌面操作</h3><p>Alt + Shift+ Up/Down Arrow 切换桌面</p>\n<p>Ctrl + Alt + D 类似Windows下的Win + D组合键，显示桌面 ，隐藏全部窗口</p>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p>Alt + Enter – 查看选择文件/文件夹的属性，代替单击右键选择属性</p>\n<p>Alt + Up/Down Arrow – 移动到父文件夹/选择的文件夹（左右的用的多一些）</p>\n<p>Alt + Left/Right Arrow – 在文件夹中后退/前进</p>\n<p>Ctrl + L - 得到文件路径</p>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一些比较常用的快捷键，一些如切屏之类的太常用的就没有记录</p>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><p>Ctrl + Alt + T 启用终端：</p>\n<p>Alt + F2 输入命令、启动程序（可以用于启动一些必须命令行启用的程序，网易云等）</p>\n<p>Super + F10 打开程序菜单（用于退出程序等操作）</p>\n<p>Super + A 展示所有程序及搜索框</p>\n<p>Super + V 展示上方的日历和提醒列表</p>\n<p>Super + L 锁定屏幕</p>\n<h3 id=\"窗口操作\"><a href=\"#窗口操作\" class=\"headerlink\" title=\"窗口操作\"></a>窗口操作</h3><p>Super + H 隐藏窗口</p>\n<p>Super + Up Arrow 最大化窗口</p>\n<p>Super + Down Arrow 恢复窗口</p>\n<p>Super + Right Arrow 将窗口置于屏幕右半侧</p>\n<p>Super + Left Arrow 将窗口置于屏幕左半侧</p>\n<p>Alt + F4 关闭当前窗口</p>\n<p>Ctrl + W 关闭当前窗口</p>\n<p>Alt + F7 移动窗口（用的比较少）</p>\n<p>Alt + F8 改变窗口大小（用的比较少）</p>\n<p>Alt + Space 激活窗口菜单</p>\n<h3 id=\"桌面操作\"><a href=\"#桌面操作\" class=\"headerlink\" title=\"桌面操作\"></a>桌面操作</h3><p>Alt + Shift+ Up/Down Arrow 切换桌面</p>\n<p>Ctrl + Alt + D 类似Windows下的Win + D组合键，显示桌面 ，隐藏全部窗口</p>\n<h3 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h3><p>Alt + Enter – 查看选择文件/文件夹的属性，代替单击右键选择属性</p>\n<p>Alt + Up/Down Arrow – 移动到父文件夹/选择的文件夹（左右的用的多一些）</p>\n<p>Alt + Left/Right Arrow – 在文件夹中后退/前进</p>\n<p>Ctrl + L - 得到文件路径</p>\n"},{"title":"latex基本用法","date":"2019-02-20T13:48:16.000Z","fileName":"latex1","_content":"谈到码字与排版大家首先想到的一定是word等办公软件，即一些“所见即所得”的排版与“码字”软件，这些软件功能强大足够应付日常的一切工作。\n但当大家有英文论文的写作与排版需求时，尤其是面对美赛这种“英文写作比赛”时，输出的PDF文件的美观性就尤其重要了（本人也是因为美赛才接触了latex这个让人又爱又恨的软件）。出于实用与给自己进行用法记录的目的，我也就不拿软件的历史之类的凑字数了，直接上可以产生效果的东西。\n**PS：**我个人认为latex 与HTML之类的标签语言十分相似，学习成本低，易用难精（也没必要精），因此本文只针对相应排版的具体问题，不涉及任何latex的理论与底层问题，想精学的朋友建议移步刘海洋的《LaTeX入门》（可以联系本人电子版），同时有其他问题建议百度搜索或混混相应论坛，这儿给一个tackle problems的[传送门](http://www.latexstudio.net/),下载TEXLive请移步[传送](http://tug.org/texlive/),选择相应版本后耐心等待。\n**以下未经说明使用TeXworks编辑器，编译方式选择XELaTeX**\n\n## 目录及其相关设置\n```\n\\tableofcontents            %插入目录，由于latex的“交叉引用”，注意应编译两次\n\\thispagestyle{empty}       %设置目录页不计入页码，用于文章其他部位亦可\n\\clearpage                  %该语句使得文章后面内容另起一页显示，此处使得目录单独写在一页\n\\setcounter{page}{1}        %设置目录后正文第一页目录计数为1\n```\n\n## 正文文章结构的设置\n```\n\\section{一级标题内容}\n正文\n\\subsection{二级标题内容}\n正文\n\\subsubsection{三级标题内容}\n正文\n```\n以上模式相信用过word的朋友都很容易理解了，同时通过上一条所述的目录内容会根据正文中的\\section{}等标签自动生成文章目录，十分方便。\n\n## 字体字号的常用设置\nlatex中包含了很多种字体，但如果没有特殊需求，我认为以下内容完全能够满足需要了\n```\n\\textbf{内容}       %将大括号内字体加粗\n\\textit{内容}       %将大括号内字体变为斜体\n\\emph{内容}         %强调括号内字体内容\n```\n\n## 列表环境\n### 有计数的列表\n```\n\\begin{enumerate}\n    \\item 内容1\n    \\item 内容2\n\\end{enumerate}\n```\n### 无计数的列表（bulleted list）\n```\n\\begin{itemize}\n    \\item 内容1\n    \\item 内容2\n\\end{itemize}\n```\n### 复杂列表\n同时上述各个列表可以相互嵌套，如下即为在一个bulleted list下又嵌套了一个计数列表。\n```\n\\begin{itemize}\n    \\item 内容1\n    \\begin{enumerate}\n        \\item 内容1.1\n        \\item 内容1.2\n    \\end{enumerate}\n\\end{itemize}\n```\n\n## 插入图片\n在正文中插入图片很简单，如果你没有特殊的需求copy下面这段代码并且更改里面一些参数完全够用了，图片的资源文件和其他开发都是一样的，建议在根目录下建立一个img文件夹专门存放，同时记得将文件的命名与格式搞清楚。\n```\n%下行代码中[]内为可选项意义分别为\n%h 代表here,将表格排在当前文字位置\n%t 表示将表格放在下一页的 top (页首)\n%b 表示将表格放在当前页的 bottom (底部)\n%! 表示忽略美观因素，尽可能按照参数指定的方式来处理表格浮动位置\n\\begin{figure}[h]\n    \\centering      %使图片居中\n    %下面这行可以简单理解为载入图片的函数，width=0.6\\textwidth是将图片等比例设为宽度为0.6个间页长（排版的名词不大记得可以简单这么理解），你也可以使用px之类的将其设置为定宽。后面大括号内一定得是如image1.jpg这种格式，后缀不能漏\n    \\includegraphics[width=0.6\\textwidth]{加后缀的图片名}\n    \\caption{图片的名称}    %大括号内为页面显示的图片的名称\n    \\label{fig:1}          %设置图片的标签方便交叉引用\n\\end{figure}\n```\n\n## 插入表格\n表格是一切论文或其他议论文体中非常常见的数据表达形式，由于数据的不同各种类型多种多样，不想上节所述的图片那么一段代码打天下，所以表格内容较多，我尽量将我认为的常用的表格形式的通用代码附上，同时也列举一下表格的基本形式，方便读者进行变换。\n### 普通表格\n普通表格是指一个没有任何改动的最基本的表格（参考word你便知道样式），我也可以借由此说明一下表格中的一些常用参数\n同时，如\\centering；\\caption{};\\label{}等操作，与上一节所述关于图片相同\n```\n\\begin{table}[!htb] %[]内与上一节所述图片相同\n    \\begin{tabular}{|c|r|l|}    %后一个括号内c代表居中，r代表靠右，l代表靠左，|为表格竖线，可以舍去\n        \\hline  %为表格横线，可以舍去\n        内容1 & 内容2 & 内容3 \\\\    %每个单元格间由&分开，\\\\表示换行\n        \\hline\n        内容4 & 内容5 & 内容6 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n### 表格其他的常用设置\n重新定义表格线的宽度代码如下，可随意更改使用相应代号的名称。使用时找到代码相应位置进行相应更改即可。\n注意：**以下内容要放在导言区**\n```\n%定义表格横线\\ttline的线宽为1.4pt，使用时用\\ttline代替上一节中的\\hline即可\n\\newcommand{\\ttline}{\n    \\noalign {\\ifnum 0=`}\\fi \\hrule height 1.4pt\n    \\futurelet \\reserved@a \\@xhline\n}\n%重定义表格竖线！的线宽为2pt，使用时用！代替上一节中的|即可\n\\newcolumntype{!}{@{\\hskip\\tabcolsep\\vrule width 2pt\\hskip\\tabcolsep}}\n\\makeatother\n```\n剩下的一些小功能如下：\n```\n%设置表格标题置于表格上面（默认置于下面）\n\\setlength{\\belowcaptionskip}{6pt}  %置于表格上面6pt\n\n%如果想单独使一个单元格居中，可以这么写\n\\multicolumn{1}{c}{content}\n\n%想调整表格上下间距，可以在\\begin{table}前加（同样适用于更改正文行距）\n\\linespread{倍数} %更改后值为 倍数*默认间距\n\n%合并单元格，合并行列可以使用以下公式进行嵌套\n\\multicolumn{项数}{新列格式}{单元格内容} %合并列\n\\multirow{项数}{新列格式}{单元格内容} %合并行\n\n\\cline{2-3} %表示画出一条位于第2列到第3列的横线段，其他列将不会有横线段\n```\n### 几种特殊表格代码\n下面是几种相对特殊的表格的代码，根据这些代码结合前两小节的内容更改相应部分即可完成自己的制定。\n```\n\\linespread{1.1}\n\\begin{table}[h]\n\\setlength{\\belowcaptionskip}{6pt}\\centering\\caption{dia test}\\label{tab:dia}\n\\begin{tabular}{ccc}\\ttline\n\\diagbox{test1}{test2} & altitude & vavlue \\\\ \\tline\ntesta & $22.2$ & $22.1$ \\\\ \ntestb & $1.22$ & $2.22$ \\\\\n\\end{tabular}\n\\end{table}\n```\n此种表格应记住在导言区加上 **\\usepackage{diagbox}**\n![示例1](/assets/BlogPic/2.1/t1.png)\n三线表是各种论文中较为常用的部分，代码与示例见下\n\n## 插入公式及其他数学式\n公式环境与图片和表格类似，也可以自动编号以及使用交叉引用，只需设置好\\label{}内容即可，具体如下：\n### 公式环境\n一般公式编辑：\n```\n\\begin{equation}\n    公式内容\n    \\label{eq:1}\n\\end{equation}\n```\n分段函数模板：\n```\n\\begin{equation}\np_{j}=\\begin{cases} \n    0,j=2\\\\\n    1,j=1\n\\end{cases}\n\\label{}\n\\end{equation}\n```\n### 常见数学公式的编辑","source":"_posts/工具使用/latex基本用法.md","raw":"---\ntitle: latex基本用法\ndate: 2019-02-20 21:48:16\ntags:\n    - latex\ncategories:\n\t- 工具使用\nfileName: latex1\n---\n谈到码字与排版大家首先想到的一定是word等办公软件，即一些“所见即所得”的排版与“码字”软件，这些软件功能强大足够应付日常的一切工作。\n但当大家有英文论文的写作与排版需求时，尤其是面对美赛这种“英文写作比赛”时，输出的PDF文件的美观性就尤其重要了（本人也是因为美赛才接触了latex这个让人又爱又恨的软件）。出于实用与给自己进行用法记录的目的，我也就不拿软件的历史之类的凑字数了，直接上可以产生效果的东西。\n**PS：**我个人认为latex 与HTML之类的标签语言十分相似，学习成本低，易用难精（也没必要精），因此本文只针对相应排版的具体问题，不涉及任何latex的理论与底层问题，想精学的朋友建议移步刘海洋的《LaTeX入门》（可以联系本人电子版），同时有其他问题建议百度搜索或混混相应论坛，这儿给一个tackle problems的[传送门](http://www.latexstudio.net/),下载TEXLive请移步[传送](http://tug.org/texlive/),选择相应版本后耐心等待。\n**以下未经说明使用TeXworks编辑器，编译方式选择XELaTeX**\n\n## 目录及其相关设置\n```\n\\tableofcontents            %插入目录，由于latex的“交叉引用”，注意应编译两次\n\\thispagestyle{empty}       %设置目录页不计入页码，用于文章其他部位亦可\n\\clearpage                  %该语句使得文章后面内容另起一页显示，此处使得目录单独写在一页\n\\setcounter{page}{1}        %设置目录后正文第一页目录计数为1\n```\n\n## 正文文章结构的设置\n```\n\\section{一级标题内容}\n正文\n\\subsection{二级标题内容}\n正文\n\\subsubsection{三级标题内容}\n正文\n```\n以上模式相信用过word的朋友都很容易理解了，同时通过上一条所述的目录内容会根据正文中的\\section{}等标签自动生成文章目录，十分方便。\n\n## 字体字号的常用设置\nlatex中包含了很多种字体，但如果没有特殊需求，我认为以下内容完全能够满足需要了\n```\n\\textbf{内容}       %将大括号内字体加粗\n\\textit{内容}       %将大括号内字体变为斜体\n\\emph{内容}         %强调括号内字体内容\n```\n\n## 列表环境\n### 有计数的列表\n```\n\\begin{enumerate}\n    \\item 内容1\n    \\item 内容2\n\\end{enumerate}\n```\n### 无计数的列表（bulleted list）\n```\n\\begin{itemize}\n    \\item 内容1\n    \\item 内容2\n\\end{itemize}\n```\n### 复杂列表\n同时上述各个列表可以相互嵌套，如下即为在一个bulleted list下又嵌套了一个计数列表。\n```\n\\begin{itemize}\n    \\item 内容1\n    \\begin{enumerate}\n        \\item 内容1.1\n        \\item 内容1.2\n    \\end{enumerate}\n\\end{itemize}\n```\n\n## 插入图片\n在正文中插入图片很简单，如果你没有特殊的需求copy下面这段代码并且更改里面一些参数完全够用了，图片的资源文件和其他开发都是一样的，建议在根目录下建立一个img文件夹专门存放，同时记得将文件的命名与格式搞清楚。\n```\n%下行代码中[]内为可选项意义分别为\n%h 代表here,将表格排在当前文字位置\n%t 表示将表格放在下一页的 top (页首)\n%b 表示将表格放在当前页的 bottom (底部)\n%! 表示忽略美观因素，尽可能按照参数指定的方式来处理表格浮动位置\n\\begin{figure}[h]\n    \\centering      %使图片居中\n    %下面这行可以简单理解为载入图片的函数，width=0.6\\textwidth是将图片等比例设为宽度为0.6个间页长（排版的名词不大记得可以简单这么理解），你也可以使用px之类的将其设置为定宽。后面大括号内一定得是如image1.jpg这种格式，后缀不能漏\n    \\includegraphics[width=0.6\\textwidth]{加后缀的图片名}\n    \\caption{图片的名称}    %大括号内为页面显示的图片的名称\n    \\label{fig:1}          %设置图片的标签方便交叉引用\n\\end{figure}\n```\n\n## 插入表格\n表格是一切论文或其他议论文体中非常常见的数据表达形式，由于数据的不同各种类型多种多样，不想上节所述的图片那么一段代码打天下，所以表格内容较多，我尽量将我认为的常用的表格形式的通用代码附上，同时也列举一下表格的基本形式，方便读者进行变换。\n### 普通表格\n普通表格是指一个没有任何改动的最基本的表格（参考word你便知道样式），我也可以借由此说明一下表格中的一些常用参数\n同时，如\\centering；\\caption{};\\label{}等操作，与上一节所述关于图片相同\n```\n\\begin{table}[!htb] %[]内与上一节所述图片相同\n    \\begin{tabular}{|c|r|l|}    %后一个括号内c代表居中，r代表靠右，l代表靠左，|为表格竖线，可以舍去\n        \\hline  %为表格横线，可以舍去\n        内容1 & 内容2 & 内容3 \\\\    %每个单元格间由&分开，\\\\表示换行\n        \\hline\n        内容4 & 内容5 & 内容6 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\n```\n### 表格其他的常用设置\n重新定义表格线的宽度代码如下，可随意更改使用相应代号的名称。使用时找到代码相应位置进行相应更改即可。\n注意：**以下内容要放在导言区**\n```\n%定义表格横线\\ttline的线宽为1.4pt，使用时用\\ttline代替上一节中的\\hline即可\n\\newcommand{\\ttline}{\n    \\noalign {\\ifnum 0=`}\\fi \\hrule height 1.4pt\n    \\futurelet \\reserved@a \\@xhline\n}\n%重定义表格竖线！的线宽为2pt，使用时用！代替上一节中的|即可\n\\newcolumntype{!}{@{\\hskip\\tabcolsep\\vrule width 2pt\\hskip\\tabcolsep}}\n\\makeatother\n```\n剩下的一些小功能如下：\n```\n%设置表格标题置于表格上面（默认置于下面）\n\\setlength{\\belowcaptionskip}{6pt}  %置于表格上面6pt\n\n%如果想单独使一个单元格居中，可以这么写\n\\multicolumn{1}{c}{content}\n\n%想调整表格上下间距，可以在\\begin{table}前加（同样适用于更改正文行距）\n\\linespread{倍数} %更改后值为 倍数*默认间距\n\n%合并单元格，合并行列可以使用以下公式进行嵌套\n\\multicolumn{项数}{新列格式}{单元格内容} %合并列\n\\multirow{项数}{新列格式}{单元格内容} %合并行\n\n\\cline{2-3} %表示画出一条位于第2列到第3列的横线段，其他列将不会有横线段\n```\n### 几种特殊表格代码\n下面是几种相对特殊的表格的代码，根据这些代码结合前两小节的内容更改相应部分即可完成自己的制定。\n```\n\\linespread{1.1}\n\\begin{table}[h]\n\\setlength{\\belowcaptionskip}{6pt}\\centering\\caption{dia test}\\label{tab:dia}\n\\begin{tabular}{ccc}\\ttline\n\\diagbox{test1}{test2} & altitude & vavlue \\\\ \\tline\ntesta & $22.2$ & $22.1$ \\\\ \ntestb & $1.22$ & $2.22$ \\\\\n\\end{tabular}\n\\end{table}\n```\n此种表格应记住在导言区加上 **\\usepackage{diagbox}**\n![示例1](/assets/BlogPic/2.1/t1.png)\n三线表是各种论文中较为常用的部分，代码与示例见下\n\n## 插入公式及其他数学式\n公式环境与图片和表格类似，也可以自动编号以及使用交叉引用，只需设置好\\label{}内容即可，具体如下：\n### 公式环境\n一般公式编辑：\n```\n\\begin{equation}\n    公式内容\n    \\label{eq:1}\n\\end{equation}\n```\n分段函数模板：\n```\n\\begin{equation}\np_{j}=\\begin{cases} \n    0,j=2\\\\\n    1,j=1\n\\end{cases}\n\\label{}\n\\end{equation}\n```\n### 常见数学公式的编辑","slug":"工具使用/latex基本用法","published":1,"updated":"2021-01-11T04:39:15.933Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo7y000arwjs0ufa3ww7","content":"<p>谈到码字与排版大家首先想到的一定是word等办公软件，即一些“所见即所得”的排版与“码字”软件，这些软件功能强大足够应付日常的一切工作。<br>但当大家有英文论文的写作与排版需求时，尤其是面对美赛这种“英文写作比赛”时，输出的PDF文件的美观性就尤其重要了（本人也是因为美赛才接触了latex这个让人又爱又恨的软件）。出于实用与给自己进行用法记录的目的，我也就不拿软件的历史之类的凑字数了，直接上可以产生效果的东西。<br><strong>PS：</strong>我个人认为latex 与HTML之类的标签语言十分相似，学习成本低，易用难精（也没必要精），因此本文只针对相应排版的具体问题，不涉及任何latex的理论与底层问题，想精学的朋友建议移步刘海洋的《LaTeX入门》（可以联系本人电子版），同时有其他问题建议百度搜索或混混相应论坛，这儿给一个tackle problems的<a href=\"http://www.latexstudio.net/\" target=\"_blank\" rel=\"noopener\">传送门</a>,下载TEXLive请移步<a href=\"http://tug.org/texlive/\" target=\"_blank\" rel=\"noopener\">传送</a>,选择相应版本后耐心等待。<br><strong>以下未经说明使用TeXworks编辑器，编译方式选择XELaTeX</strong></p>\n<h2 id=\"目录及其相关设置\"><a href=\"#目录及其相关设置\" class=\"headerlink\" title=\"目录及其相关设置\"></a>目录及其相关设置</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">tableofcontents</span></span>            <span class=\"hljs-comment\">%插入目录，由于latex的“交叉引用”，注意应编译两次</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">thispagestyle</span><span class=\"hljs-string\">&#123;empty&#125;</span></span>       <span class=\"hljs-comment\">%设置目录页不计入页码，用于文章其他部位亦可</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">clearpage</span></span>                  <span class=\"hljs-comment\">%该语句使得文章后面内容另起一页显示，此处使得目录单独写在一页</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setcounter</span><span class=\"hljs-string\">&#123;page&#125;</span><span class=\"hljs-string\">&#123;1&#125;</span></span>        <span class=\"hljs-comment\">%设置目录后正文第一页目录计数为1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"正文文章结构的设置\"><a href=\"#正文文章结构的设置\" class=\"headerlink\" title=\"正文文章结构的设置\"></a>正文文章结构的设置</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">section</span><span class=\"hljs-string\">&#123;一级标题内容&#125;</span></span><br>正文<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">subsection</span><span class=\"hljs-string\">&#123;二级标题内容&#125;</span></span><br>正文<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">subsubsection</span><span class=\"hljs-string\">&#123;三级标题内容&#125;</span></span><br>正文<br></code></pre></td></tr></table></figure>\n<p>以上模式相信用过word的朋友都很容易理解了，同时通过上一条所述的目录内容会根据正文中的\\section{}等标签自动生成文章目录，十分方便。</p>\n<h2 id=\"字体字号的常用设置\"><a href=\"#字体字号的常用设置\" class=\"headerlink\" title=\"字体字号的常用设置\"></a>字体字号的常用设置</h2><p>latex中包含了很多种字体，但如果没有特殊需求，我认为以下内容完全能够满足需要了</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">textbf</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>       <span class=\"hljs-comment\">%将大括号内字体加粗</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">textit</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>       <span class=\"hljs-comment\">%将大括号内字体变为斜体</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">emph</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>         <span class=\"hljs-comment\">%强调括号内字体内容</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"列表环境\"><a href=\"#列表环境\" class=\"headerlink\" title=\"列表环境\"></a>列表环境</h2><h3 id=\"有计数的列表\"><a href=\"#有计数的列表\" class=\"headerlink\" title=\"有计数的列表\"></a>有计数的列表</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容2<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"无计数的列表（bulleted-list）\"><a href=\"#无计数的列表（bulleted-list）\" class=\"headerlink\" title=\"无计数的列表（bulleted list）\"></a>无计数的列表（bulleted list）</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容2<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"复杂列表\"><a href=\"#复杂列表\" class=\"headerlink\" title=\"复杂列表\"></a>复杂列表</h3><p>同时上述各个列表可以相互嵌套，如下即为在一个bulleted list下又嵌套了一个计数列表。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1.1<br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1.2<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p>在正文中插入图片很简单，如果你没有特殊的需求copy下面这段代码并且更改里面一些参数完全够用了，图片的资源文件和其他开发都是一样的，建议在根目录下建立一个img文件夹专门存放，同时记得将文件的命名与格式搞清楚。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-comment\">%下行代码中[]内为可选项意义分别为</span><br><span class=\"hljs-comment\">%h 代表here,将表格排在当前文字位置</span><br><span class=\"hljs-comment\">%t 表示将表格放在下一页的 top (页首)</span><br><span class=\"hljs-comment\">%b 表示将表格放在当前页的 bottom (底部)</span><br><span class=\"hljs-comment\">%! 表示忽略美观因素，尽可能按照参数指定的方式来处理表格浮动位置</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;figure&#125;</span><span class=\"hljs-string\">[h]</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">centering</span></span>      <span class=\"hljs-comment\">%使图片居中</span><br>    <span class=\"hljs-comment\">%下面这行可以简单理解为载入图片的函数，width=0.6\\textwidth是将图片等比例设为宽度为0.6个间页长（排版的名词不大记得可以简单这么理解），你也可以使用px之类的将其设置为定宽。后面大括号内一定得是如image1.jpg这种格式，后缀不能漏</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">includegraphics</span><span class=\"hljs-string\">[width=0.6\\textwidth]</span><span class=\"hljs-string\">&#123;加后缀的图片名&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;图片的名称&#125;</span></span>    <span class=\"hljs-comment\">%大括号内为页面显示的图片的名称</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;fig:1&#125;</span></span>          <span class=\"hljs-comment\">%设置图片的标签方便交叉引用</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;figure&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插入表格\"><a href=\"#插入表格\" class=\"headerlink\" title=\"插入表格\"></a>插入表格</h2><p>表格是一切论文或其他议论文体中非常常见的数据表达形式，由于数据的不同各种类型多种多样，不想上节所述的图片那么一段代码打天下，所以表格内容较多，我尽量将我认为的常用的表格形式的通用代码附上，同时也列举一下表格的基本形式，方便读者进行变换。</p>\n<h3 id=\"普通表格\"><a href=\"#普通表格\" class=\"headerlink\" title=\"普通表格\"></a>普通表格</h3><p>普通表格是指一个没有任何改动的最基本的表格（参考word你便知道样式），我也可以借由此说明一下表格中的一些常用参数<br>同时，如\\centering；\\caption{};\\label{}等操作，与上一节所述关于图片相同</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;table&#125;</span><span class=\"hljs-string\">[!htb]</span></span> <span class=\"hljs-comment\">%[]内与上一节所述图片相同</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;tabular&#125;</span><span class=\"hljs-string\">&#123;|c|r|l|&#125;</span></span>    <span class=\"hljs-comment\">%后一个括号内c代表居中，r代表靠右，l代表靠左，|为表格竖线，可以舍去</span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span>  <span class=\"hljs-comment\">%为表格横线，可以舍去</span><br>        内容1 &amp; 内容2 &amp; 内容3 <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span>    <span class=\"hljs-comment\">%每个单元格间由&amp;分开，\\\\表示换行</span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span><br>        内容4 &amp; 内容5 &amp; 内容6 <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;tabular&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;table&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"表格其他的常用设置\"><a href=\"#表格其他的常用设置\" class=\"headerlink\" title=\"表格其他的常用设置\"></a>表格其他的常用设置</h3><p>重新定义表格线的宽度代码如下，可随意更改使用相应代号的名称。使用时找到代码相应位置进行相应更改即可。<br>注意：<strong>以下内容要放在导言区</strong></p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">%定义表格横线<span class=\"hljs-string\">\\ttline的线宽为1.4pt，使用时用\\ttline代替上一节中的\\hline即可</span><br><span class=\"hljs-string\">\\newcommand&#123;\\ttline&#125;&#123;</span><br>    <span class=\"hljs-string\">\\noalign</span> &#123;<span class=\"hljs-string\">\\ifnum</span> <span class=\"hljs-number\">0</span>=`&#125;<span class=\"hljs-string\">\\fi</span> <span class=\"hljs-string\">\\hrule</span> height <span class=\"hljs-number\">1.4pt</span><br>    <span class=\"hljs-string\">\\futurelet</span> <span class=\"hljs-string\">\\reserved@a</span> <span class=\"hljs-string\">\\@xhline</span><br>&#125;<br>%重定义表格竖线！的线宽为<span class=\"hljs-number\">2pt</span>，使用时用！代替上一节中的|即可<br><span class=\"hljs-string\">\\newcolumntype&#123;!&#125;&#123;@&#123;\\hskip\\tabcolsep\\vrule</span> width <span class=\"hljs-number\">2pt</span><span class=\"hljs-string\">\\hskip\\tabcolsep&#125;&#125;</span><br><span class=\"hljs-string\">\\makeatother</span><br></code></pre></td></tr></table></figure>\n<p>剩下的一些小功能如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-comment\">%设置表格标题置于表格上面（默认置于下面）</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setlength</span><span class=\"hljs-string\">&#123;\\belowcaptionskip&#125;</span><span class=\"hljs-string\">&#123;6pt&#125;</span></span>  <span class=\"hljs-comment\">%置于表格上面6pt</span><br><br><span class=\"hljs-comment\">%如果想单独使一个单元格居中，可以这么写</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multicolumn</span><span class=\"hljs-string\">&#123;1&#125;</span><span class=\"hljs-string\">&#123;c&#125;</span><span class=\"hljs-string\">&#123;content&#125;</span></span><br><br><span class=\"hljs-comment\">%想调整表格上下间距，可以在\\begin&#123;table&#125;前加（同样适用于更改正文行距）</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">linespread</span><span class=\"hljs-string\">&#123;倍数&#125;</span></span> <span class=\"hljs-comment\">%更改后值为 倍数*默认间距</span><br><br><span class=\"hljs-comment\">%合并单元格，合并行列可以使用以下公式进行嵌套</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multicolumn</span><span class=\"hljs-string\">&#123;项数&#125;</span><span class=\"hljs-string\">&#123;新列格式&#125;</span><span class=\"hljs-string\">&#123;单元格内容&#125;</span></span> <span class=\"hljs-comment\">%合并列</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multirow</span><span class=\"hljs-string\">&#123;项数&#125;</span><span class=\"hljs-string\">&#123;新列格式&#125;</span><span class=\"hljs-string\">&#123;单元格内容&#125;</span></span> <span class=\"hljs-comment\">%合并行</span><br><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">cline</span><span class=\"hljs-string\">&#123;2-3&#125;</span></span> <span class=\"hljs-comment\">%表示画出一条位于第2列到第3列的横线段，其他列将不会有横线段</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"几种特殊表格代码\"><a href=\"#几种特殊表格代码\" class=\"headerlink\" title=\"几种特殊表格代码\"></a>几种特殊表格代码</h3><p>下面是几种相对特殊的表格的代码，根据这些代码结合前两小节的内容更改相应部分即可完成自己的制定。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">linespread</span><span class=\"hljs-string\">&#123;1.1&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;table&#125;</span><span class=\"hljs-string\">[h]</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setlength</span><span class=\"hljs-string\">&#123;\\belowcaptionskip&#125;</span><span class=\"hljs-string\">&#123;6pt&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">centering</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;dia test&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;tab:dia&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;tabular&#125;</span><span class=\"hljs-string\">&#123;ccc&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">ttline</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">diagbox</span><span class=\"hljs-string\">&#123;test1&#125;</span><span class=\"hljs-string\">&#123;test2&#125;</span></span> &amp; altitude &amp; vavlue <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">tline</span></span><br>testa &amp; <span class=\"hljs-formula\">$22.2$</span> &amp; <span class=\"hljs-formula\">$22.1$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span> <br>testb &amp; <span class=\"hljs-formula\">$1.22$</span> &amp; <span class=\"hljs-formula\">$2.22$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;tabular&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;table&#125;</span></span><br></code></pre></td></tr></table></figure>\n<p>此种表格应记住在导言区加上 <strong>\\usepackage{diagbox}</strong><br><img src=\"/assets/BlogPic/2.1/t1.png\" alt=\"示例1\"><br>三线表是各种论文中较为常用的部分，代码与示例见下</p>\n<h2 id=\"插入公式及其他数学式\"><a href=\"#插入公式及其他数学式\" class=\"headerlink\" title=\"插入公式及其他数学式\"></a>插入公式及其他数学式</h2><p>公式环境与图片和表格类似，也可以自动编号以及使用交叉引用，只需设置好\\label{}内容即可，具体如下：</p>\n<h3 id=\"公式环境\"><a href=\"#公式环境\" class=\"headerlink\" title=\"公式环境\"></a>公式环境</h3><p>一般公式编辑：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br>    公式内容<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;eq:1&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br></code></pre></td></tr></table></figure>\n<p>分段函数模板：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br>p_&#123;j&#125;=<span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;cases&#125;</span></span> <br>    0,j=2<span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br>    1,j=1<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;cases&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"常见数学公式的编辑\"><a href=\"#常见数学公式的编辑\" class=\"headerlink\" title=\"常见数学公式的编辑\"></a>常见数学公式的编辑</h3>","site":{"data":{}},"excerpt":"","more":"<p>谈到码字与排版大家首先想到的一定是word等办公软件，即一些“所见即所得”的排版与“码字”软件，这些软件功能强大足够应付日常的一切工作。<br>但当大家有英文论文的写作与排版需求时，尤其是面对美赛这种“英文写作比赛”时，输出的PDF文件的美观性就尤其重要了（本人也是因为美赛才接触了latex这个让人又爱又恨的软件）。出于实用与给自己进行用法记录的目的，我也就不拿软件的历史之类的凑字数了，直接上可以产生效果的东西。<br><strong>PS：</strong>我个人认为latex 与HTML之类的标签语言十分相似，学习成本低，易用难精（也没必要精），因此本文只针对相应排版的具体问题，不涉及任何latex的理论与底层问题，想精学的朋友建议移步刘海洋的《LaTeX入门》（可以联系本人电子版），同时有其他问题建议百度搜索或混混相应论坛，这儿给一个tackle problems的<a href=\"http://www.latexstudio.net/\" target=\"_blank\" rel=\"noopener\">传送门</a>,下载TEXLive请移步<a href=\"http://tug.org/texlive/\" target=\"_blank\" rel=\"noopener\">传送</a>,选择相应版本后耐心等待。<br><strong>以下未经说明使用TeXworks编辑器，编译方式选择XELaTeX</strong></p>\n<h2 id=\"目录及其相关设置\"><a href=\"#目录及其相关设置\" class=\"headerlink\" title=\"目录及其相关设置\"></a>目录及其相关设置</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">tableofcontents</span></span>            <span class=\"hljs-comment\">%插入目录，由于latex的“交叉引用”，注意应编译两次</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">thispagestyle</span><span class=\"hljs-string\">&#123;empty&#125;</span></span>       <span class=\"hljs-comment\">%设置目录页不计入页码，用于文章其他部位亦可</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">clearpage</span></span>                  <span class=\"hljs-comment\">%该语句使得文章后面内容另起一页显示，此处使得目录单独写在一页</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setcounter</span><span class=\"hljs-string\">&#123;page&#125;</span><span class=\"hljs-string\">&#123;1&#125;</span></span>        <span class=\"hljs-comment\">%设置目录后正文第一页目录计数为1</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"正文文章结构的设置\"><a href=\"#正文文章结构的设置\" class=\"headerlink\" title=\"正文文章结构的设置\"></a>正文文章结构的设置</h2><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">section</span><span class=\"hljs-string\">&#123;一级标题内容&#125;</span></span><br>正文<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">subsection</span><span class=\"hljs-string\">&#123;二级标题内容&#125;</span></span><br>正文<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">subsubsection</span><span class=\"hljs-string\">&#123;三级标题内容&#125;</span></span><br>正文<br></code></pre></td></tr></table></figure>\n<p>以上模式相信用过word的朋友都很容易理解了，同时通过上一条所述的目录内容会根据正文中的\\section{}等标签自动生成文章目录，十分方便。</p>\n<h2 id=\"字体字号的常用设置\"><a href=\"#字体字号的常用设置\" class=\"headerlink\" title=\"字体字号的常用设置\"></a>字体字号的常用设置</h2><p>latex中包含了很多种字体，但如果没有特殊需求，我认为以下内容完全能够满足需要了</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">textbf</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>       <span class=\"hljs-comment\">%将大括号内字体加粗</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">textit</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>       <span class=\"hljs-comment\">%将大括号内字体变为斜体</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">emph</span><span class=\"hljs-string\">&#123;内容&#125;</span></span>         <span class=\"hljs-comment\">%强调括号内字体内容</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"列表环境\"><a href=\"#列表环境\" class=\"headerlink\" title=\"列表环境\"></a>列表环境</h2><h3 id=\"有计数的列表\"><a href=\"#有计数的列表\" class=\"headerlink\" title=\"有计数的列表\"></a>有计数的列表</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容2<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"无计数的列表（bulleted-list）\"><a href=\"#无计数的列表（bulleted-list）\" class=\"headerlink\" title=\"无计数的列表（bulleted list）\"></a>无计数的列表（bulleted list）</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容2<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"复杂列表\"><a href=\"#复杂列表\" class=\"headerlink\" title=\"复杂列表\"></a>复杂列表</h3><p>同时上述各个列表可以相互嵌套，如下即为在一个bulleted list下又嵌套了一个计数列表。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1.1<br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">item</span></span> 内容1.2<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;enumerate&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;itemize&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p>在正文中插入图片很简单，如果你没有特殊的需求copy下面这段代码并且更改里面一些参数完全够用了，图片的资源文件和其他开发都是一样的，建议在根目录下建立一个img文件夹专门存放，同时记得将文件的命名与格式搞清楚。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-comment\">%下行代码中[]内为可选项意义分别为</span><br><span class=\"hljs-comment\">%h 代表here,将表格排在当前文字位置</span><br><span class=\"hljs-comment\">%t 表示将表格放在下一页的 top (页首)</span><br><span class=\"hljs-comment\">%b 表示将表格放在当前页的 bottom (底部)</span><br><span class=\"hljs-comment\">%! 表示忽略美观因素，尽可能按照参数指定的方式来处理表格浮动位置</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;figure&#125;</span><span class=\"hljs-string\">[h]</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">centering</span></span>      <span class=\"hljs-comment\">%使图片居中</span><br>    <span class=\"hljs-comment\">%下面这行可以简单理解为载入图片的函数，width=0.6\\textwidth是将图片等比例设为宽度为0.6个间页长（排版的名词不大记得可以简单这么理解），你也可以使用px之类的将其设置为定宽。后面大括号内一定得是如image1.jpg这种格式，后缀不能漏</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">includegraphics</span><span class=\"hljs-string\">[width=0.6\\textwidth]</span><span class=\"hljs-string\">&#123;加后缀的图片名&#125;</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;图片的名称&#125;</span></span>    <span class=\"hljs-comment\">%大括号内为页面显示的图片的名称</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;fig:1&#125;</span></span>          <span class=\"hljs-comment\">%设置图片的标签方便交叉引用</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;figure&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"插入表格\"><a href=\"#插入表格\" class=\"headerlink\" title=\"插入表格\"></a>插入表格</h2><p>表格是一切论文或其他议论文体中非常常见的数据表达形式，由于数据的不同各种类型多种多样，不想上节所述的图片那么一段代码打天下，所以表格内容较多，我尽量将我认为的常用的表格形式的通用代码附上，同时也列举一下表格的基本形式，方便读者进行变换。</p>\n<h3 id=\"普通表格\"><a href=\"#普通表格\" class=\"headerlink\" title=\"普通表格\"></a>普通表格</h3><p>普通表格是指一个没有任何改动的最基本的表格（参考word你便知道样式），我也可以借由此说明一下表格中的一些常用参数<br>同时，如\\centering；\\caption{};\\label{}等操作，与上一节所述关于图片相同</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;table&#125;</span><span class=\"hljs-string\">[!htb]</span></span> <span class=\"hljs-comment\">%[]内与上一节所述图片相同</span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;tabular&#125;</span><span class=\"hljs-string\">&#123;|c|r|l|&#125;</span></span>    <span class=\"hljs-comment\">%后一个括号内c代表居中，r代表靠右，l代表靠左，|为表格竖线，可以舍去</span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span>  <span class=\"hljs-comment\">%为表格横线，可以舍去</span><br>        内容1 &amp; 内容2 &amp; 内容3 <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span>    <span class=\"hljs-comment\">%每个单元格间由&amp;分开，\\\\表示换行</span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span><br>        内容4 &amp; 内容5 &amp; 内容6 <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br>        <span class=\"hljs-tag\">\\<span class=\"hljs-name\">hline</span></span><br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;tabular&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;table&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"表格其他的常用设置\"><a href=\"#表格其他的常用设置\" class=\"headerlink\" title=\"表格其他的常用设置\"></a>表格其他的常用设置</h3><p>重新定义表格线的宽度代码如下，可随意更改使用相应代号的名称。使用时找到代码相应位置进行相应更改即可。<br>注意：<strong>以下内容要放在导言区</strong></p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">%定义表格横线<span class=\"hljs-string\">\\ttline的线宽为1.4pt，使用时用\\ttline代替上一节中的\\hline即可</span><br><span class=\"hljs-string\">\\newcommand&#123;\\ttline&#125;&#123;</span><br>    <span class=\"hljs-string\">\\noalign</span> &#123;<span class=\"hljs-string\">\\ifnum</span> <span class=\"hljs-number\">0</span>=`&#125;<span class=\"hljs-string\">\\fi</span> <span class=\"hljs-string\">\\hrule</span> height <span class=\"hljs-number\">1.4pt</span><br>    <span class=\"hljs-string\">\\futurelet</span> <span class=\"hljs-string\">\\reserved@a</span> <span class=\"hljs-string\">\\@xhline</span><br>&#125;<br>%重定义表格竖线！的线宽为<span class=\"hljs-number\">2pt</span>，使用时用！代替上一节中的|即可<br><span class=\"hljs-string\">\\newcolumntype&#123;!&#125;&#123;@&#123;\\hskip\\tabcolsep\\vrule</span> width <span class=\"hljs-number\">2pt</span><span class=\"hljs-string\">\\hskip\\tabcolsep&#125;&#125;</span><br><span class=\"hljs-string\">\\makeatother</span><br></code></pre></td></tr></table></figure>\n<p>剩下的一些小功能如下：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-comment\">%设置表格标题置于表格上面（默认置于下面）</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setlength</span><span class=\"hljs-string\">&#123;\\belowcaptionskip&#125;</span><span class=\"hljs-string\">&#123;6pt&#125;</span></span>  <span class=\"hljs-comment\">%置于表格上面6pt</span><br><br><span class=\"hljs-comment\">%如果想单独使一个单元格居中，可以这么写</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multicolumn</span><span class=\"hljs-string\">&#123;1&#125;</span><span class=\"hljs-string\">&#123;c&#125;</span><span class=\"hljs-string\">&#123;content&#125;</span></span><br><br><span class=\"hljs-comment\">%想调整表格上下间距，可以在\\begin&#123;table&#125;前加（同样适用于更改正文行距）</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">linespread</span><span class=\"hljs-string\">&#123;倍数&#125;</span></span> <span class=\"hljs-comment\">%更改后值为 倍数*默认间距</span><br><br><span class=\"hljs-comment\">%合并单元格，合并行列可以使用以下公式进行嵌套</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multicolumn</span><span class=\"hljs-string\">&#123;项数&#125;</span><span class=\"hljs-string\">&#123;新列格式&#125;</span><span class=\"hljs-string\">&#123;单元格内容&#125;</span></span> <span class=\"hljs-comment\">%合并列</span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">multirow</span><span class=\"hljs-string\">&#123;项数&#125;</span><span class=\"hljs-string\">&#123;新列格式&#125;</span><span class=\"hljs-string\">&#123;单元格内容&#125;</span></span> <span class=\"hljs-comment\">%合并行</span><br><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">cline</span><span class=\"hljs-string\">&#123;2-3&#125;</span></span> <span class=\"hljs-comment\">%表示画出一条位于第2列到第3列的横线段，其他列将不会有横线段</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"几种特殊表格代码\"><a href=\"#几种特殊表格代码\" class=\"headerlink\" title=\"几种特殊表格代码\"></a>几种特殊表格代码</h3><p>下面是几种相对特殊的表格的代码，根据这些代码结合前两小节的内容更改相应部分即可完成自己的制定。</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">linespread</span><span class=\"hljs-string\">&#123;1.1&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;table&#125;</span><span class=\"hljs-string\">[h]</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">setlength</span><span class=\"hljs-string\">&#123;\\belowcaptionskip&#125;</span><span class=\"hljs-string\">&#123;6pt&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">centering</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">caption</span><span class=\"hljs-string\">&#123;dia test&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;tab:dia&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;tabular&#125;</span><span class=\"hljs-string\">&#123;ccc&#125;</span></span><span class=\"hljs-tag\">\\<span class=\"hljs-name\">ttline</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">diagbox</span><span class=\"hljs-string\">&#123;test1&#125;</span><span class=\"hljs-string\">&#123;test2&#125;</span></span> &amp; altitude &amp; vavlue <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">tline</span></span><br>testa &amp; <span class=\"hljs-formula\">$22.2$</span> &amp; <span class=\"hljs-formula\">$22.1$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span> <br>testb &amp; <span class=\"hljs-formula\">$1.22$</span> &amp; <span class=\"hljs-formula\">$2.22$</span> <span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;tabular&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;table&#125;</span></span><br></code></pre></td></tr></table></figure>\n<p>此种表格应记住在导言区加上 <strong>\\usepackage{diagbox}</strong><br><img src=\"/assets/BlogPic/2.1/t1.png\" alt=\"示例1\"><br>三线表是各种论文中较为常用的部分，代码与示例见下</p>\n<h2 id=\"插入公式及其他数学式\"><a href=\"#插入公式及其他数学式\" class=\"headerlink\" title=\"插入公式及其他数学式\"></a>插入公式及其他数学式</h2><p>公式环境与图片和表格类似，也可以自动编号以及使用交叉引用，只需设置好\\label{}内容即可，具体如下：</p>\n<h3 id=\"公式环境\"><a href=\"#公式环境\" class=\"headerlink\" title=\"公式环境\"></a>公式环境</h3><p>一般公式编辑：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br>    公式内容<br>    <span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;eq:1&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br></code></pre></td></tr></table></figure>\n<p>分段函数模板：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tex\"><span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br>p_&#123;j&#125;=<span class=\"hljs-tag\">\\<span class=\"hljs-name\">begin</span><span class=\"hljs-string\">&#123;cases&#125;</span></span> <br>    0,j=2<span class=\"hljs-tag\">\\<span class=\"hljs-name\">\\</span></span><br>    1,j=1<br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;cases&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">label</span><span class=\"hljs-string\">&#123;&#125;</span></span><br><span class=\"hljs-tag\">\\<span class=\"hljs-name\">end</span><span class=\"hljs-string\">&#123;equation&#125;</span></span><br></code></pre></td></tr></table></figure>\n<h3 id=\"常见数学公式的编辑\"><a href=\"#常见数学公式的编辑\" class=\"headerlink\" title=\"常见数学公式的编辑\"></a>常见数学公式的编辑</h3>"},{"title":"对一个文件夹下的图像进行整体操作","date":"2019-02-22T09:05:20.000Z","fileName":"batch_RS","_content":"前些日子（其实好几个月前了吧），复现一个遥感图像“填缝”的算法，想想matlab好久没用，便打算记录一点点，当作消遣。下面这个算是一个基底数据获取的小过程吧，可以当成matlab图像批处理的一个模板代码段。\n```\nclear;\nclc;\nsrcDir=uigetdir();\ncd(srcDir);\nallnames=struct2cell(dir('*.tif')); %只处理8位的.tif文件\n[k,len]=size(allnames); %获得tif文件的个数\n\nJ = imread(allnames{1,1});\n[m,n] = size(J);\nT = zeros(m,n);\n\nfor ii=1:len\n%逐次取出文件\n    name=allnames{1,ii};\n    I=imread(name);\n    I(isnan(I))=0; %图像nan处设置为0\n    for jj=1:m\n        for kk = 1:n\n            T(jj,kk) =  T(jj,kk)+I(jj,kk);\n        end\n    end\nend\nT=T/len;\nimshow(T);\nimwrite(T,'test_8.tif');\n```\n下面记几个用到的函数，方便以后忘了用来查查。\nuigetdir：ui get dir\n```\n%打开一个模态对话框，返回path为用户所选择的路径，若用户点击关闭path=0\nfpath = uigetdir\n%打开路径path下的对话框\nfpath = uigetdir(path)\nuigetdir('C:\\') %打开C盘\nuigetdir(matlabroot) %打开matlab默认文件夹\n```\n其余几个：\n```\ncd(path) %这个就不必多说了吧，设置当前文件夹\nc = struct2cell(s) %结构体s转化为元胞数组c\ndir(name) %列出与name匹配的所有文件\nisnan(i) %判断矩阵中为nan的地方并返回1，其余返回0\n```\n其实都蛮好记的了，说起来写完这个我在怀疑我会不会把这些东西忘掉哈哈哈","source":"_posts/GIS/对一个文件夹下的图像进行整体操作.md","raw":"---\ntitle: 对一个文件夹下的图像进行整体操作\ndate: 2019-02-22 17:05:20\ntags:\n    - matlab\n    - RS\ncategories:\n    - GIS\nfileName: batch_RS\n---\n前些日子（其实好几个月前了吧），复现一个遥感图像“填缝”的算法，想想matlab好久没用，便打算记录一点点，当作消遣。下面这个算是一个基底数据获取的小过程吧，可以当成matlab图像批处理的一个模板代码段。\n```\nclear;\nclc;\nsrcDir=uigetdir();\ncd(srcDir);\nallnames=struct2cell(dir('*.tif')); %只处理8位的.tif文件\n[k,len]=size(allnames); %获得tif文件的个数\n\nJ = imread(allnames{1,1});\n[m,n] = size(J);\nT = zeros(m,n);\n\nfor ii=1:len\n%逐次取出文件\n    name=allnames{1,ii};\n    I=imread(name);\n    I(isnan(I))=0; %图像nan处设置为0\n    for jj=1:m\n        for kk = 1:n\n            T(jj,kk) =  T(jj,kk)+I(jj,kk);\n        end\n    end\nend\nT=T/len;\nimshow(T);\nimwrite(T,'test_8.tif');\n```\n下面记几个用到的函数，方便以后忘了用来查查。\nuigetdir：ui get dir\n```\n%打开一个模态对话框，返回path为用户所选择的路径，若用户点击关闭path=0\nfpath = uigetdir\n%打开路径path下的对话框\nfpath = uigetdir(path)\nuigetdir('C:\\') %打开C盘\nuigetdir(matlabroot) %打开matlab默认文件夹\n```\n其余几个：\n```\ncd(path) %这个就不必多说了吧，设置当前文件夹\nc = struct2cell(s) %结构体s转化为元胞数组c\ndir(name) %列出与name匹配的所有文件\nisnan(i) %判断矩阵中为nan的地方并返回1，其余返回0\n```\n其实都蛮好记的了，说起来写完这个我在怀疑我会不会把这些东西忘掉哈哈哈","slug":"GIS/对一个文件夹下的图像进行整体操作","published":1,"updated":"2021-01-11T04:21:43.041Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo8o000frwjs7f8cc89b","content":"<p>前些日子（其实好几个月前了吧），复现一个遥感图像“填缝”的算法，想想matlab好久没用，便打算记录一点点，当作消遣。下面这个算是一个基底数据获取的小过程吧，可以当成matlab图像批处理的一个模板代码段。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">clear;<br>clc;<br><span class=\"hljs-attribute\">srcDir</span>=uigetdir();<br>cd(srcDir);<br><span class=\"hljs-attribute\">allnames</span>=struct2cell(dir('*.tif')); %只处理8位的.tif文件<br>[k,len]=size(allnames); %获得tif文件的个数<br><br>J = imread(allnames&#123;1,1&#125;);<br>[m,n] = size(J);<br>T = zeros(m,n);<br><br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-attribute\">ii</span>=1:len<br>%逐次取出文件<br>    <span class=\"hljs-attribute\">name</span>=allnames&#123;1,ii&#125;;<br>    <span class=\"hljs-attribute\">I</span>=imread(name);<br>    I(isnan(I))=0; %图像nan处设置为0<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-attribute\">jj</span>=1:m<br>        <span class=\"hljs-keyword\">for</span> kk = 1:n<br>            T(jj,kk) =  T(jj,kk)+I(jj,kk);<br>        end<br>    end<br>end<br><span class=\"hljs-attribute\">T</span>=T/len;<br>imshow(T);<br>imwrite(T,<span class=\"hljs-string\">'test_8.tif'</span>);<br></code></pre></td></tr></table></figure>\n<p>下面记几个用到的函数，方便以后忘了用来查查。<br>uigetdir：ui get dir</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-meta\">%</span>打开一个模态对话框，返回path为用户所选择的路径，若用户点击关闭path=<span class=\"hljs-number\">0</span><br>fpath = uigetdir<br><span class=\"hljs-meta\">%</span>打开路径path下的对话框<br>fpath = uigetdir<span class=\"hljs-comment\">(path)</span><br>uigetdir<span class=\"hljs-comment\">('C:\\')</span> <span class=\"hljs-meta\">%</span>打开C盘<br>uigetdir<span class=\"hljs-comment\">(matlabroot)</span> <span class=\"hljs-meta\">%</span>打开matlab默认文件夹<br></code></pre></td></tr></table></figure>\n<p>其余几个：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">cd(path) <span class=\"hljs-comment\">%这个就不必多说了吧，设置当前文件夹</span><br>c = struct2cell(s) <span class=\"hljs-comment\">%结构体s转化为元胞数组c</span><br>dir(name) <span class=\"hljs-comment\">%列出与name匹配的所有文件</span><br><span class=\"hljs-built_in\">isnan</span>(<span class=\"hljs-built_in\">i</span>) <span class=\"hljs-comment\">%判断矩阵中为nan的地方并返回1，其余返回0</span><br></code></pre></td></tr></table></figure>\n<p>其实都蛮好记的了，说起来写完这个我在怀疑我会不会把这些东西忘掉哈哈哈</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前些日子（其实好几个月前了吧），复现一个遥感图像“填缝”的算法，想想matlab好久没用，便打算记录一点点，当作消遣。下面这个算是一个基底数据获取的小过程吧，可以当成matlab图像批处理的一个模板代码段。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">clear;<br>clc;<br><span class=\"hljs-attribute\">srcDir</span>=uigetdir();<br>cd(srcDir);<br><span class=\"hljs-attribute\">allnames</span>=struct2cell(dir('*.tif')); %只处理8位的.tif文件<br>[k,len]=size(allnames); %获得tif文件的个数<br><br>J = imread(allnames&#123;1,1&#125;);<br>[m,n] = size(J);<br>T = zeros(m,n);<br><br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-attribute\">ii</span>=1:len<br>%逐次取出文件<br>    <span class=\"hljs-attribute\">name</span>=allnames&#123;1,ii&#125;;<br>    <span class=\"hljs-attribute\">I</span>=imread(name);<br>    I(isnan(I))=0; %图像nan处设置为0<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-attribute\">jj</span>=1:m<br>        <span class=\"hljs-keyword\">for</span> kk = 1:n<br>            T(jj,kk) =  T(jj,kk)+I(jj,kk);<br>        end<br>    end<br>end<br><span class=\"hljs-attribute\">T</span>=T/len;<br>imshow(T);<br>imwrite(T,<span class=\"hljs-string\">'test_8.tif'</span>);<br></code></pre></td></tr></table></figure>\n<p>下面记几个用到的函数，方便以后忘了用来查查。<br>uigetdir：ui get dir</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\"><span class=\"hljs-meta\">%</span>打开一个模态对话框，返回path为用户所选择的路径，若用户点击关闭path=<span class=\"hljs-number\">0</span><br>fpath = uigetdir<br><span class=\"hljs-meta\">%</span>打开路径path下的对话框<br>fpath = uigetdir<span class=\"hljs-comment\">(path)</span><br>uigetdir<span class=\"hljs-comment\">('C:\\')</span> <span class=\"hljs-meta\">%</span>打开C盘<br>uigetdir<span class=\"hljs-comment\">(matlabroot)</span> <span class=\"hljs-meta\">%</span>打开matlab默认文件夹<br></code></pre></td></tr></table></figure>\n<p>其余几个：</p>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">cd(path) <span class=\"hljs-comment\">%这个就不必多说了吧，设置当前文件夹</span><br>c = struct2cell(s) <span class=\"hljs-comment\">%结构体s转化为元胞数组c</span><br>dir(name) <span class=\"hljs-comment\">%列出与name匹配的所有文件</span><br><span class=\"hljs-built_in\">isnan</span>(<span class=\"hljs-built_in\">i</span>) <span class=\"hljs-comment\">%判断矩阵中为nan的地方并返回1，其余返回0</span><br></code></pre></td></tr></table></figure>\n<p>其实都蛮好记的了，说起来写完这个我在怀疑我会不会把这些东西忘掉哈哈哈</p>\n"},{"title":"git的基本命令","date":"2019-03-04T13:26:47.000Z","fileName":"git","_content":"## Git 小记\nGit是使用最广泛的版本控制系统，加上GitHub如此闻名（假笑），所以学习Git的一些基本命令还是很重要的，本人是学习了廖雪峰老师的Git相关教程，并将其中Git的一些相关命令记录下来，方便查找，也算一个笔记（本人原来从不记笔记，现在改过自新了）。嘻嘻。\n廖雪峰老师的Git学习[传送门](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n首先应该明确的我认为有这么两个东西，即*工作区（Working Directory）*与*版本库（Repository）*。工作区可以简单理解成存放你工作内容的文件夹（本地），版本库则可以简单理解为记录你修改等操作内容的git生成的一个文件。版本库中又主要包含*暂存区*以及*分支结构master（默认）*。通过git提交项目修改之类的过程，可以简单理解为在本地进行修改后通过**git add**与**git commit**两个命令步骤，由本地到暂存区再到分支结构，这个命令的具体使用，后续会说明，这儿只对原理做一些粗略阐述。\n同时分支结构有啥用呢？我觉得不必细谈，反正就理解为n个人可以一起工作还不会乱的一种机制吧，有Git需求的人想必能够理解，在此不做赘述（三言两语我也讲不清楚嘻嘻）\n## Git 常用命令\n选中文件夹不用一个个cd输入路径，选中相应文件夹鼠标右键选择*Git Bash Here*就行。\n**PS：以下说明中<>括号内表示是你要输入的信息**\n### 初始化git仓库\n即将你选中的目录变为git管理的仓库\n```\n$ git init\n```\n\n### 提交你的修改\n提交单个文件，记得加后缀。同时file后用空格分割可以一次add很多文件\n```\n$ git add <file>\n```\n提交一个文件夹\n```\n$ git add <foldname>/\n```\n把暂存区的内容提交到当前分支（Git小记中的第二过程哦），<message>表示的是你对这此提交做的说明，类似于备忘录，方便你以后查看，同时每次使用*commit*命令后系统会生成一个id来记录这次提交，亦能方便查找\n```\n$ git commit -m <yourmessage>\n```\n\n### 查看仓库中文件修改的信息\n查看仓库当前的状态（文件增删，文件内容改变等）\n```\n$ git status\n```\n查看相应文件修改的具体内容\n```\n$ git diff <file>\n```\n显示从最近到最远的提交日志（包括上一节中你输入的说明，时间等内容），较为详细。在其之后加上相应备注后（行二），可以简略输出（id号码等等）\n```\n$ git log\n$ git log --pretty=oneline\n```\n显示你的每一次命令（可以用来查看之前的每一步操作）\n```\n$ git reflog\n```\n\n### 版本回退\nGit中有一个HEAD指针指向当前版本，而HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~n表示第n个版本。\n回退到之前的版本于回退到相应版本的命令如下，其中<commit id>相信你已经明白了，这个就是上一节信息当中的版本号。\n```\n$ git reset --hard HEAD^\n$ git reset --hard <commit id>\n```\n撤销工作区的修改，请注意这里的关键词*工作区*，也就是说这个操作只能将你还没有执行**add**命令的文件修改去除。\n```\n$ git checkout -- <file>\n```\n要去除已经使用add进入暂存区的修改，请使用以下命令命令。第一行是将暂存区的修改撤销掉（unstage），第二行就接着使用上面的命令就好，不重复写了。\n```\n$ git reset HEAD <file>\n```\n以上便是应对“工作区修改”、“暂存区修改”、“已提交”这三种情况的版本回退命令，足够应付大部分时间了。\n\n### 删除文件\n第一行命令：删除本地文件。\n第二行命令：从版本库中删除文件(删除后记得再使用commit命令提交一次)\n至于删错了恢复，请见上一节。\n```\n$ rm <file>\n$ git <file>\n```\n\n### 分支操作\n分支在第一大节也有提到，这里列出一些常用操作\n第一行为创建名称为<name>的分支，并将当前分支切换为<name>。第二行为切换当前分支为<name>。（同时，master为默认主分支）\n```\n$ git checkout -b <name>\n$ git checkout <name>\n```\n查看所有分支\n```\n$ git branch\n```\n第一行为把分支<name>合并到当前分支中。第二行为删除<name>分支。第三行为强行删除未进行合并操作的<name>分支。\n```\n$ git merge <name>\n$ git branch -d <name>\n$ git branch -D <name>\n```\n查看分区合并历史以及合并图\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n```\n**PS：**同时应注意，当你在master分支与新建的分支上都进行了修改并执行了commit命令时，直接合并可能会把报错，然后你得去相关文件中手动修改一下再commit。git会在相应文件中给你进行两次修改的醒目标注，很方便\n\n### 标签操作\n大家都知道软件会有版本，比如adobe公司的一堆CS和CC，tag在Git中就起到给一个commit设定一个除去id外更容易记住的别名的作用，方便查找。默认设置tag是设置在最近一次commit上。\n以下第一行为设置一个标签；第二行为在id为commit_id的commit上设置标签；第三行在第二行的基础上给tag一点说明；第四行为查看现有所有标签；第五行查看相应标签详细信息；第六行删除一个本地标签。\n```\n$ git tag <tagname>\n$ git tag <tagname> <commit_id>\n$ git tag -a <tagname> -m <message> <commit_id>\n$ git tag\n$ git show <tagname>\ngit tag -d <tagname>\n```\n\n### 远程操作\n前面提到了GitHub，自然学git远程操作（或者理解成跟GitHub玩游戏也成）是必不可少的，本地下载了git咋和GitHub扯上关系就略过不谈了，以下记录一些相关常用操作。\n刚下好git打开就会有以下这些玩意，你也可以随时使用相应命令查看相应配置，使用**git config -1**可以查看很多信息，试试就知道。\n```\n$ git config --global user.email \"your_email@qq.com\"\n$ git config __global user.name \"your_github_name\"\n```\n将本地库与远程库相关联（origin是远程库的默认名称）\n```\n$ git remote add origin git@<server-name:path/repo-name.git>\n```\n使用*push*命令，将本地库的内容推送到远程库上(第一次)，之后每次本地修改后若要推送可用第二行命令\n```\n$ git push -u origin master\n$ git push origin master\n```\n将GitHub上的内容克隆到本地（注意你要是想对其有修改并推送，应先fork到自己的库里，再克隆）。输入git clone后将你所要克隆的网址复制后加上就好。\n```\n$ git clone <http:~>\n```\n查看远程库详细相关信息\n```\n$ git remote -v\n```\n建立远程库dev分支与本地dev的链接\n```\n$ git branch --set-upstream-to=origin/dev dev\n```\n把最新的提交抓取下来\n```\n$ git pull\n```\n\n### 有关参考\n其实很多命令压根不用记，但要去看每个操作下来git给的提示，很多后续如何操作已经写好了，你所需的往往只是做一做英语阅读。","source":"_posts/工具使用/git的基本命令.md","raw":"---\ntitle: git的基本命令\ndate: 2019-03-04 21:26:47\ntags:\n    - git\ncategories:\n    - 工具使用\nfileName: git\n---\n## Git 小记\nGit是使用最广泛的版本控制系统，加上GitHub如此闻名（假笑），所以学习Git的一些基本命令还是很重要的，本人是学习了廖雪峰老师的Git相关教程，并将其中Git的一些相关命令记录下来，方便查找，也算一个笔记（本人原来从不记笔记，现在改过自新了）。嘻嘻。\n廖雪峰老师的Git学习[传送门](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n首先应该明确的我认为有这么两个东西，即*工作区（Working Directory）*与*版本库（Repository）*。工作区可以简单理解成存放你工作内容的文件夹（本地），版本库则可以简单理解为记录你修改等操作内容的git生成的一个文件。版本库中又主要包含*暂存区*以及*分支结构master（默认）*。通过git提交项目修改之类的过程，可以简单理解为在本地进行修改后通过**git add**与**git commit**两个命令步骤，由本地到暂存区再到分支结构，这个命令的具体使用，后续会说明，这儿只对原理做一些粗略阐述。\n同时分支结构有啥用呢？我觉得不必细谈，反正就理解为n个人可以一起工作还不会乱的一种机制吧，有Git需求的人想必能够理解，在此不做赘述（三言两语我也讲不清楚嘻嘻）\n## Git 常用命令\n选中文件夹不用一个个cd输入路径，选中相应文件夹鼠标右键选择*Git Bash Here*就行。\n**PS：以下说明中<>括号内表示是你要输入的信息**\n### 初始化git仓库\n即将你选中的目录变为git管理的仓库\n```\n$ git init\n```\n\n### 提交你的修改\n提交单个文件，记得加后缀。同时file后用空格分割可以一次add很多文件\n```\n$ git add <file>\n```\n提交一个文件夹\n```\n$ git add <foldname>/\n```\n把暂存区的内容提交到当前分支（Git小记中的第二过程哦），<message>表示的是你对这此提交做的说明，类似于备忘录，方便你以后查看，同时每次使用*commit*命令后系统会生成一个id来记录这次提交，亦能方便查找\n```\n$ git commit -m <yourmessage>\n```\n\n### 查看仓库中文件修改的信息\n查看仓库当前的状态（文件增删，文件内容改变等）\n```\n$ git status\n```\n查看相应文件修改的具体内容\n```\n$ git diff <file>\n```\n显示从最近到最远的提交日志（包括上一节中你输入的说明，时间等内容），较为详细。在其之后加上相应备注后（行二），可以简略输出（id号码等等）\n```\n$ git log\n$ git log --pretty=oneline\n```\n显示你的每一次命令（可以用来查看之前的每一步操作）\n```\n$ git reflog\n```\n\n### 版本回退\nGit中有一个HEAD指针指向当前版本，而HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~n表示第n个版本。\n回退到之前的版本于回退到相应版本的命令如下，其中<commit id>相信你已经明白了，这个就是上一节信息当中的版本号。\n```\n$ git reset --hard HEAD^\n$ git reset --hard <commit id>\n```\n撤销工作区的修改，请注意这里的关键词*工作区*，也就是说这个操作只能将你还没有执行**add**命令的文件修改去除。\n```\n$ git checkout -- <file>\n```\n要去除已经使用add进入暂存区的修改，请使用以下命令命令。第一行是将暂存区的修改撤销掉（unstage），第二行就接着使用上面的命令就好，不重复写了。\n```\n$ git reset HEAD <file>\n```\n以上便是应对“工作区修改”、“暂存区修改”、“已提交”这三种情况的版本回退命令，足够应付大部分时间了。\n\n### 删除文件\n第一行命令：删除本地文件。\n第二行命令：从版本库中删除文件(删除后记得再使用commit命令提交一次)\n至于删错了恢复，请见上一节。\n```\n$ rm <file>\n$ git <file>\n```\n\n### 分支操作\n分支在第一大节也有提到，这里列出一些常用操作\n第一行为创建名称为<name>的分支，并将当前分支切换为<name>。第二行为切换当前分支为<name>。（同时，master为默认主分支）\n```\n$ git checkout -b <name>\n$ git checkout <name>\n```\n查看所有分支\n```\n$ git branch\n```\n第一行为把分支<name>合并到当前分支中。第二行为删除<name>分支。第三行为强行删除未进行合并操作的<name>分支。\n```\n$ git merge <name>\n$ git branch -d <name>\n$ git branch -D <name>\n```\n查看分区合并历史以及合并图\n```\n$ git log --graph --pretty=oneline --abbrev-commit\n```\n**PS：**同时应注意，当你在master分支与新建的分支上都进行了修改并执行了commit命令时，直接合并可能会把报错，然后你得去相关文件中手动修改一下再commit。git会在相应文件中给你进行两次修改的醒目标注，很方便\n\n### 标签操作\n大家都知道软件会有版本，比如adobe公司的一堆CS和CC，tag在Git中就起到给一个commit设定一个除去id外更容易记住的别名的作用，方便查找。默认设置tag是设置在最近一次commit上。\n以下第一行为设置一个标签；第二行为在id为commit_id的commit上设置标签；第三行在第二行的基础上给tag一点说明；第四行为查看现有所有标签；第五行查看相应标签详细信息；第六行删除一个本地标签。\n```\n$ git tag <tagname>\n$ git tag <tagname> <commit_id>\n$ git tag -a <tagname> -m <message> <commit_id>\n$ git tag\n$ git show <tagname>\ngit tag -d <tagname>\n```\n\n### 远程操作\n前面提到了GitHub，自然学git远程操作（或者理解成跟GitHub玩游戏也成）是必不可少的，本地下载了git咋和GitHub扯上关系就略过不谈了，以下记录一些相关常用操作。\n刚下好git打开就会有以下这些玩意，你也可以随时使用相应命令查看相应配置，使用**git config -1**可以查看很多信息，试试就知道。\n```\n$ git config --global user.email \"your_email@qq.com\"\n$ git config __global user.name \"your_github_name\"\n```\n将本地库与远程库相关联（origin是远程库的默认名称）\n```\n$ git remote add origin git@<server-name:path/repo-name.git>\n```\n使用*push*命令，将本地库的内容推送到远程库上(第一次)，之后每次本地修改后若要推送可用第二行命令\n```\n$ git push -u origin master\n$ git push origin master\n```\n将GitHub上的内容克隆到本地（注意你要是想对其有修改并推送，应先fork到自己的库里，再克隆）。输入git clone后将你所要克隆的网址复制后加上就好。\n```\n$ git clone <http:~>\n```\n查看远程库详细相关信息\n```\n$ git remote -v\n```\n建立远程库dev分支与本地dev的链接\n```\n$ git branch --set-upstream-to=origin/dev dev\n```\n把最新的提交抓取下来\n```\n$ git pull\n```\n\n### 有关参考\n其实很多命令压根不用记，但要去看每个操作下来git给的提示，很多后续如何操作已经写好了，你所需的往往只是做一做英语阅读。","slug":"工具使用/git的基本命令","published":1,"updated":"2021-01-11T04:38:55.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo8q000jrwjs7i54ao3m","content":"<h2 id=\"Git-小记\"><a href=\"#Git-小记\" class=\"headerlink\" title=\"Git 小记\"></a>Git 小记</h2><p>Git是使用最广泛的版本控制系统，加上GitHub如此闻名（假笑），所以学习Git的一些基本命令还是很重要的，本人是学习了廖雪峰老师的Git相关教程，并将其中Git的一些相关命令记录下来，方便查找，也算一个笔记（本人原来从不记笔记，现在改过自新了）。嘻嘻。<br>廖雪峰老师的Git学习<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">传送门</a><br>首先应该明确的我认为有这么两个东西，即<em>工作区（Working Directory）</em>与<em>版本库（Repository）</em>。工作区可以简单理解成存放你工作内容的文件夹（本地），版本库则可以简单理解为记录你修改等操作内容的git生成的一个文件。版本库中又主要包含<em>暂存区</em>以及<em>分支结构master（默认）</em>。通过git提交项目修改之类的过程，可以简单理解为在本地进行修改后通过<strong>git add</strong>与<strong>git commit</strong>两个命令步骤，由本地到暂存区再到分支结构，这个命令的具体使用，后续会说明，这儿只对原理做一些粗略阐述。<br>同时分支结构有啥用呢？我觉得不必细谈，反正就理解为n个人可以一起工作还不会乱的一种机制吧，有Git需求的人想必能够理解，在此不做赘述（三言两语我也讲不清楚嘻嘻）</p>\n<h2 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h2><p>选中文件夹不用一个个cd输入路径，选中相应文件夹鼠标右键选择<em>Git Bash Here</em>就行。<br><strong>PS：以下说明中&lt;&gt;括号内表示是你要输入的信息</strong></p>\n<h3 id=\"初始化git仓库\"><a href=\"#初始化git仓库\" class=\"headerlink\" title=\"初始化git仓库\"></a>初始化git仓库</h3><p>即将你选中的目录变为git管理的仓库</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git init<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交你的修改\"><a href=\"#提交你的修改\" class=\"headerlink\" title=\"提交你的修改\"></a>提交你的修改</h3><p>提交单个文件，记得加后缀。同时file后用空格分割可以一次add很多文件</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> &lt;file&gt;</span><br></code></pre></td></tr></table></figure>\n<p>提交一个文件夹</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> &lt;foldname&gt;/</span><br></code></pre></td></tr></table></figure>\n<p>把暂存区的内容提交到当前分支（Git小记中的第二过程哦），<message>表示的是你对这此提交做的说明，类似于备忘录，方便你以后查看，同时每次使用<em>commit</em>命令后系统会生成一个id来记录这次提交，亦能方便查找</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">$ git commit -m <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">yourmessage</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看仓库中文件修改的信息\"><a href=\"#查看仓库中文件修改的信息\" class=\"headerlink\" title=\"查看仓库中文件修改的信息\"></a>查看仓库中文件修改的信息</h3><p>查看仓库当前的状态（文件增删，文件内容改变等）</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git status<br></code></pre></td></tr></table></figure>\n<p>查看相应文件修改的具体内容</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> git diff &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>显示从最近到最远的提交日志（包括上一节中你输入的说明，时间等内容），较为详细。在其之后加上相应备注后（行二），可以简略输出（id号码等等）</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git <span class=\"hljs-built_in\">log</span><br>$ git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">--pretty=oneline</span><br></code></pre></td></tr></table></figure>\n<p>显示你的每一次命令（可以用来查看之前的每一步操作）</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">$ git <span class=\"hljs-built_in\">ref</span>log<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>Git中有一个HEAD指针指向当前版本，而HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~n表示第n个版本。<br>回退到之前的版本于回退到相应版本的命令如下，其中<commit id>相信你已经明白了，这个就是上一节信息当中的版本号。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard HEAD^</span><br>$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard &lt;commit id&gt;</span><br></code></pre></td></tr></table></figure>\n<p>撤销工作区的修改，请注意这里的关键词<em>工作区</em>，也就是说这个操作只能将你还没有执行<strong>add</strong>命令的文件修改去除。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> git checkout -- &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>要去除已经使用add进入暂存区的修改，请使用以下命令命令。第一行是将暂存区的修改撤销掉（unstage），第二行就接着使用上面的命令就好，不重复写了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-keyword\">HEAD</span> &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>以上便是应对“工作区修改”、“暂存区修改”、“已提交”这三种情况的版本回退命令，足够应付大部分时间了。</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>第一行命令：删除本地文件。<br>第二行命令：从版本库中删除文件(删除后记得再使用commit命令提交一次)<br>至于删错了恢复，请见上一节。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> rm &lt;<span class=\"hljs-keyword\">file</span>&gt;<br><span class=\"hljs-symbol\">$</span> git &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h3><p>分支在第一大节也有提到，这里列出一些常用操作<br>第一行为创建名称为<name>的分支，并将当前分支切换为<name>。第二行为切换当前分支为<name>。（同时，master为默认主分支）</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git checkout -b &lt;<span class=\"hljs-built_in\">name</span>&gt;<br>$ git checkout &lt;<span class=\"hljs-built_in\">name</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>查看所有分支</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git branch<br></code></pre></td></tr></table></figure>\n<p>第一行为把分支<name>合并到当前分支中。第二行为删除<name>分支。第三行为强行删除未进行合并操作的<name>分支。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ git <span class=\"hljs-built_in\">merge</span> &lt;<span class=\"hljs-keyword\">name</span>&gt;<br>$ git branch -d &lt;<span class=\"hljs-keyword\">name</span>&gt;<br>$ git branch -D &lt;<span class=\"hljs-keyword\">name</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>查看分区合并历史以及合并图</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">--graph --pretty=oneline --abbrev-commit</span><br></code></pre></td></tr></table></figure>\n<p><strong>PS：</strong>同时应注意，当你在master分支与新建的分支上都进行了修改并执行了commit命令时，直接合并可能会把报错，然后你得去相关文件中手动修改一下再commit。git会在相应文件中给你进行两次修改的醒目标注，很方便</p>\n<h3 id=\"标签操作\"><a href=\"#标签操作\" class=\"headerlink\" title=\"标签操作\"></a>标签操作</h3><p>大家都知道软件会有版本，比如adobe公司的一堆CS和CC，tag在Git中就起到给一个commit设定一个除去id外更容易记住的别名的作用，方便查找。默认设置tag是设置在最近一次commit上。<br>以下第一行为设置一个标签；第二行为在id为commit_id的commit上设置标签；第三行在第二行的基础上给tag一点说明；第四行为查看现有所有标签；第五行查看相应标签详细信息；第六行删除一个本地标签。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">&lt;tagname</span>&gt;<br>$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">&lt;tagname</span>&gt; <span class=\"hljs-tag\">&lt;commit_id&gt;</span><br>$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-a</span> <span class=\"hljs-tag\">&lt;tagname&gt;</span> -m <span class=\"hljs-tag\">&lt;message&gt;</span> <span class=\"hljs-tag\">&lt;commit_id&gt;</span><br>$ git <span class=\"hljs-keyword\">tag</span><br><span class=\"hljs-title\">$</span> git show <span class=\"hljs-tag\">&lt;tagname&gt;</span><br>git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-d</span> <span class=\"hljs-tag\">&lt;tagname&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h3><p>前面提到了GitHub，自然学git远程操作（或者理解成跟GitHub玩游戏也成）是必不可少的，本地下载了git咋和GitHub扯上关系就略过不谈了，以下记录一些相关常用操作。<br>刚下好git打开就会有以下这些玩意，你也可以随时使用相应命令查看相应配置，使用<strong>git config -1</strong>可以查看很多信息，试试就知道。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">$ git<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">\"your_email@qq.com\"</span><br>$ git<span class=\"hljs-built_in\"> config </span>__global user.name <span class=\"hljs-string\">\"your_github_name\"</span><br></code></pre></td></tr></table></figure>\n<p>将本地库与远程库相关联（origin是远程库的默认名称）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ git remote <span class=\"hljs-keyword\">add</span> origin git@&lt;<span class=\"hljs-keyword\">server</span>-<span class=\"hljs-type\">name</span>:<span class=\"hljs-type\">path</span>/repo-<span class=\"hljs-type\">name</span>.git&gt;<br></code></pre></td></tr></table></figure>\n<p>使用<em>push</em>命令，将本地库的内容推送到远程库上(第一次)，之后每次本地修改后若要推送可用第二行命令</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git push -u origin <span class=\"hljs-keyword\">master</span><br><span class=\"hljs-title\">$</span> git push origin <span class=\"hljs-literal\">master</span><br></code></pre></td></tr></table></figure>\n<p>将GitHub上的内容克隆到本地（注意你要是想对其有修改并推送，应先fork到自己的库里，再克隆）。输入git clone后将你所要克隆的网址复制后加上就好。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;http</span>:~&gt;<br></code></pre></td></tr></table></figure>\n<p>查看远程库详细相关信息</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git remote -v<br></code></pre></td></tr></table></figure>\n<p>建立远程库dev分支与本地dev的链接</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ git branch --<span class=\"hljs-built_in\">set</span>-upstream-to=origin/<span class=\"hljs-built_in\">dev</span> <span class=\"hljs-built_in\">dev</span><br></code></pre></td></tr></table></figure>\n<p>把最新的提交抓取下来</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git pull<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"有关参考\"><a href=\"#有关参考\" class=\"headerlink\" title=\"有关参考\"></a>有关参考</h3><p>其实很多命令压根不用记，但要去看每个操作下来git给的提示，很多后续如何操作已经写好了，你所需的往往只是做一做英语阅读。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git-小记\"><a href=\"#Git-小记\" class=\"headerlink\" title=\"Git 小记\"></a>Git 小记</h2><p>Git是使用最广泛的版本控制系统，加上GitHub如此闻名（假笑），所以学习Git的一些基本命令还是很重要的，本人是学习了廖雪峰老师的Git相关教程，并将其中Git的一些相关命令记录下来，方便查找，也算一个笔记（本人原来从不记笔记，现在改过自新了）。嘻嘻。<br>廖雪峰老师的Git学习<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">传送门</a><br>首先应该明确的我认为有这么两个东西，即<em>工作区（Working Directory）</em>与<em>版本库（Repository）</em>。工作区可以简单理解成存放你工作内容的文件夹（本地），版本库则可以简单理解为记录你修改等操作内容的git生成的一个文件。版本库中又主要包含<em>暂存区</em>以及<em>分支结构master（默认）</em>。通过git提交项目修改之类的过程，可以简单理解为在本地进行修改后通过<strong>git add</strong>与<strong>git commit</strong>两个命令步骤，由本地到暂存区再到分支结构，这个命令的具体使用，后续会说明，这儿只对原理做一些粗略阐述。<br>同时分支结构有啥用呢？我觉得不必细谈，反正就理解为n个人可以一起工作还不会乱的一种机制吧，有Git需求的人想必能够理解，在此不做赘述（三言两语我也讲不清楚嘻嘻）</p>\n<h2 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h2><p>选中文件夹不用一个个cd输入路径，选中相应文件夹鼠标右键选择<em>Git Bash Here</em>就行。<br><strong>PS：以下说明中&lt;&gt;括号内表示是你要输入的信息</strong></p>\n<h3 id=\"初始化git仓库\"><a href=\"#初始化git仓库\" class=\"headerlink\" title=\"初始化git仓库\"></a>初始化git仓库</h3><p>即将你选中的目录变为git管理的仓库</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git init<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"提交你的修改\"><a href=\"#提交你的修改\" class=\"headerlink\" title=\"提交你的修改\"></a>提交你的修改</h3><p>提交单个文件，记得加后缀。同时file后用空格分割可以一次add很多文件</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> &lt;file&gt;</span><br></code></pre></td></tr></table></figure>\n<p>提交一个文件夹</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">$ git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> &lt;foldname&gt;/</span><br></code></pre></td></tr></table></figure>\n<p>把暂存区的内容提交到当前分支（Git小记中的第二过程哦），<message>表示的是你对这此提交做的说明，类似于备忘录，方便你以后查看，同时每次使用<em>commit</em>命令后系统会生成一个id来记录这次提交，亦能方便查找</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">$ git commit -m <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">yourmessage</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"查看仓库中文件修改的信息\"><a href=\"#查看仓库中文件修改的信息\" class=\"headerlink\" title=\"查看仓库中文件修改的信息\"></a>查看仓库中文件修改的信息</h3><p>查看仓库当前的状态（文件增删，文件内容改变等）</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git status<br></code></pre></td></tr></table></figure>\n<p>查看相应文件修改的具体内容</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> git diff &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>显示从最近到最远的提交日志（包括上一节中你输入的说明，时间等内容），较为详细。在其之后加上相应备注后（行二），可以简略输出（id号码等等）</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git <span class=\"hljs-built_in\">log</span><br>$ git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">--pretty=oneline</span><br></code></pre></td></tr></table></figure>\n<p>显示你的每一次命令（可以用来查看之前的每一步操作）</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">$ git <span class=\"hljs-built_in\">ref</span>log<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>Git中有一个HEAD指针指向当前版本，而HEAD^表示上个版本，HEAD^^表示上上个版本，HEAD~n表示第n个版本。<br>回退到之前的版本于回退到相应版本的命令如下，其中<commit id>相信你已经明白了，这个就是上一节信息当中的版本号。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard HEAD^</span><br>$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-comment\">--hard &lt;commit id&gt;</span><br></code></pre></td></tr></table></figure>\n<p>撤销工作区的修改，请注意这里的关键词<em>工作区</em>，也就是说这个操作只能将你还没有执行<strong>add</strong>命令的文件修改去除。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> git checkout -- &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>要去除已经使用add进入暂存区的修改，请使用以下命令命令。第一行是将暂存区的修改撤销掉（unstage），第二行就接着使用上面的命令就好，不重复写了。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">$ git <span class=\"hljs-keyword\">reset</span> <span class=\"hljs-keyword\">HEAD</span> &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>以上便是应对“工作区修改”、“暂存区修改”、“已提交”这三种情况的版本回退命令，足够应付大部分时间了。</p>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>第一行命令：删除本地文件。<br>第二行命令：从版本库中删除文件(删除后记得再使用commit命令提交一次)<br>至于删错了恢复，请见上一节。</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-symbol\">$</span> rm &lt;<span class=\"hljs-keyword\">file</span>&gt;<br><span class=\"hljs-symbol\">$</span> git &lt;<span class=\"hljs-keyword\">file</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h3><p>分支在第一大节也有提到，这里列出一些常用操作<br>第一行为创建名称为<name>的分支，并将当前分支切换为<name>。第二行为切换当前分支为<name>。（同时，master为默认主分支）</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git checkout -b &lt;<span class=\"hljs-built_in\">name</span>&gt;<br>$ git checkout &lt;<span class=\"hljs-built_in\">name</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>查看所有分支</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git branch<br></code></pre></td></tr></table></figure>\n<p>第一行为把分支<name>合并到当前分支中。第二行为删除<name>分支。第三行为强行删除未进行合并操作的<name>分支。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">$ git <span class=\"hljs-built_in\">merge</span> &lt;<span class=\"hljs-keyword\">name</span>&gt;<br>$ git branch -d &lt;<span class=\"hljs-keyword\">name</span>&gt;<br>$ git branch -D &lt;<span class=\"hljs-keyword\">name</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>查看分区合并历史以及合并图</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">$ git <span class=\"hljs-built_in\">log</span> <span class=\"hljs-comment\">--graph --pretty=oneline --abbrev-commit</span><br></code></pre></td></tr></table></figure>\n<p><strong>PS：</strong>同时应注意，当你在master分支与新建的分支上都进行了修改并执行了commit命令时，直接合并可能会把报错，然后你得去相关文件中手动修改一下再commit。git会在相应文件中给你进行两次修改的醒目标注，很方便</p>\n<h3 id=\"标签操作\"><a href=\"#标签操作\" class=\"headerlink\" title=\"标签操作\"></a>标签操作</h3><p>大家都知道软件会有版本，比如adobe公司的一堆CS和CC，tag在Git中就起到给一个commit设定一个除去id外更容易记住的别名的作用，方便查找。默认设置tag是设置在最近一次commit上。<br>以下第一行为设置一个标签；第二行为在id为commit_id的commit上设置标签；第三行在第二行的基础上给tag一点说明；第四行为查看现有所有标签；第五行查看相应标签详细信息；第六行删除一个本地标签。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">&lt;tagname</span>&gt;<br>$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">&lt;tagname</span>&gt; <span class=\"hljs-tag\">&lt;commit_id&gt;</span><br>$ git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-a</span> <span class=\"hljs-tag\">&lt;tagname&gt;</span> -m <span class=\"hljs-tag\">&lt;message&gt;</span> <span class=\"hljs-tag\">&lt;commit_id&gt;</span><br>$ git <span class=\"hljs-keyword\">tag</span><br><span class=\"hljs-title\">$</span> git show <span class=\"hljs-tag\">&lt;tagname&gt;</span><br>git <span class=\"hljs-keyword\">tag</span> <span class=\"hljs-title\">-d</span> <span class=\"hljs-tag\">&lt;tagname&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h3><p>前面提到了GitHub，自然学git远程操作（或者理解成跟GitHub玩游戏也成）是必不可少的，本地下载了git咋和GitHub扯上关系就略过不谈了，以下记录一些相关常用操作。<br>刚下好git打开就会有以下这些玩意，你也可以随时使用相应命令查看相应配置，使用<strong>git config -1</strong>可以查看很多信息，试试就知道。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">$ git<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">\"your_email@qq.com\"</span><br>$ git<span class=\"hljs-built_in\"> config </span>__global user.name <span class=\"hljs-string\">\"your_github_name\"</span><br></code></pre></td></tr></table></figure>\n<p>将本地库与远程库相关联（origin是远程库的默认名称）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">$ git remote <span class=\"hljs-keyword\">add</span> origin git@&lt;<span class=\"hljs-keyword\">server</span>-<span class=\"hljs-type\">name</span>:<span class=\"hljs-type\">path</span>/repo-<span class=\"hljs-type\">name</span>.git&gt;<br></code></pre></td></tr></table></figure>\n<p>使用<em>push</em>命令，将本地库的内容推送到远程库上(第一次)，之后每次本地修改后若要推送可用第二行命令</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git push -u origin <span class=\"hljs-keyword\">master</span><br><span class=\"hljs-title\">$</span> git push origin <span class=\"hljs-literal\">master</span><br></code></pre></td></tr></table></figure>\n<p>将GitHub上的内容克隆到本地（注意你要是想对其有修改并推送，应先fork到自己的库里，再克隆）。输入git clone后将你所要克隆的网址复制后加上就好。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">&lt;http</span>:~&gt;<br></code></pre></td></tr></table></figure>\n<p>查看远程库详细相关信息</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git remote -v<br></code></pre></td></tr></table></figure>\n<p>建立远程库dev分支与本地dev的链接</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">$ git branch --<span class=\"hljs-built_in\">set</span>-upstream-to=origin/<span class=\"hljs-built_in\">dev</span> <span class=\"hljs-built_in\">dev</span><br></code></pre></td></tr></table></figure>\n<p>把最新的提交抓取下来</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git pull<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"有关参考\"><a href=\"#有关参考\" class=\"headerlink\" title=\"有关参考\"></a>有关参考</h3><p>其实很多命令压根不用记，但要去看每个操作下来git给的提示，很多后续如何操作已经写好了，你所需的往往只是做一做英语阅读。</p>\n"},{"title":"Git出现的报错合集","date":"2020-06-15T15:31:46.000Z","fileName":"git_error","_content":"\n\n\n### Git: fatal: refusing to merge unrelated histories解决\n\n今天`git pull`时出现这个错误（在连接远程库与本地库时在远程库上进行了一些删除操作）。原因是两个分支为两个不同的版本，有不同的提交历史，使用以下语句进行强制合并即可解决这个问题。\n\n```\n$git pull origin master --allow-unrelated-histories\n```\n\n\n\n### fatal: remote origin already exists\n\n先将存在的库删除，再进行连接\n\n```\ngit remote rm origin\n```\n\n\n\n### non-fast-forward\n\n没有对代码进行及时的同步产生的问题，应该先合并之前的历史，再进行提交\n\n```\ngit fetch origin master\ngit merge origin FETCH_HEAD \n```\n\n","source":"_posts/问题解决/Git出现的报错合集.md","raw":"---\ntitle: Git出现的报错合集\ndate: 2020-06-15 23:31:46\ntags:\n\t- git\ncategories:\n\t- 问题解决\nfileName: git_error\n---\n\n\n\n### Git: fatal: refusing to merge unrelated histories解决\n\n今天`git pull`时出现这个错误（在连接远程库与本地库时在远程库上进行了一些删除操作）。原因是两个分支为两个不同的版本，有不同的提交历史，使用以下语句进行强制合并即可解决这个问题。\n\n```\n$git pull origin master --allow-unrelated-histories\n```\n\n\n\n### fatal: remote origin already exists\n\n先将存在的库删除，再进行连接\n\n```\ngit remote rm origin\n```\n\n\n\n### non-fast-forward\n\n没有对代码进行及时的同步产生的问题，应该先合并之前的历史，再进行提交\n\n```\ngit fetch origin master\ngit merge origin FETCH_HEAD \n```\n\n","slug":"问题解决/Git出现的报错合集","published":1,"updated":"2021-01-11T04:56:44.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo8r000lrwjs3be3dr8k","content":"<h3 id=\"Git-fatal-refusing-to-merge-unrelated-histories解决\"><a href=\"#Git-fatal-refusing-to-merge-unrelated-histories解决\" class=\"headerlink\" title=\"Git: fatal: refusing to merge unrelated histories解决\"></a>Git: fatal: refusing to merge unrelated histories解决</h3><p>今天<code>git pull</code>时出现这个错误（在连接远程库与本地库时在远程库上进行了一些删除操作）。原因是两个分支为两个不同的版本，有不同的提交历史，使用以下语句进行强制合并即可解决这个问题。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$git pull origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"fatal-remote-origin-already-exists\"><a href=\"#fatal-remote-origin-already-exists\" class=\"headerlink\" title=\"fatal: remote origin already exists\"></a>fatal: remote origin already exists</h3><p>先将存在的库删除，再进行连接</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git remote rm origin</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"non-fast-forward\"><a href=\"#non-fast-forward\" class=\"headerlink\" title=\"non-fast-forward\"></a>non-fast-forward</h3><p>没有对代码进行及时的同步产生的问题，应该先合并之前的历史，再进行提交</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git fetch origin <span class=\"hljs-keyword\">master</span><br><span class=\"hljs-title\">git</span> merge origin FETCH_HEAD<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Git-fatal-refusing-to-merge-unrelated-histories解决\"><a href=\"#Git-fatal-refusing-to-merge-unrelated-histories解决\" class=\"headerlink\" title=\"Git: fatal: refusing to merge unrelated histories解决\"></a>Git: fatal: refusing to merge unrelated histories解决</h3><p>今天<code>git pull</code>时出现这个错误（在连接远程库与本地库时在远程库上进行了一些删除操作）。原因是两个分支为两个不同的版本，有不同的提交历史，使用以下语句进行强制合并即可解决这个问题。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$git pull origin <span class=\"hljs-keyword\">master</span> <span class=\"hljs-title\">--allow-unrelated-histories</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"fatal-remote-origin-already-exists\"><a href=\"#fatal-remote-origin-already-exists\" class=\"headerlink\" title=\"fatal: remote origin already exists\"></a>fatal: remote origin already exists</h3><p>先将存在的库删除，再进行连接</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">git remote rm origin</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"non-fast-forward\"><a href=\"#non-fast-forward\" class=\"headerlink\" title=\"non-fast-forward\"></a>non-fast-forward</h3><p>没有对代码进行及时的同步产生的问题，应该先合并之前的历史，再进行提交</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">git fetch origin <span class=\"hljs-keyword\">master</span><br><span class=\"hljs-title\">git</span> merge origin FETCH_HEAD<br></code></pre></td></tr></table></figure>\n\n"},{"title":"conda产生的bug处理","date":"2020-09-26T02:35:45.000Z","fileName":"conda-debug","_content":"\n## 没有写权限\n\n### 问题描述\n\n```\nEnvironmentNotWritableError: The current user does not have write permissions to the target environment.\n  environment location: /opt/anaconda3\n  uid: 1000\n  gid: 1000\n```\n\n### 解决方法\n\n将anconda及其子文件赋予最高权限\n\n```\nsudo chmod 777 -R /opt/anaconda3/\n```\n\n\n\n## 下载源问题\n\n### 问题描述\n\n![](http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E4%B8%8B%E8%BD%BD%E6%BA%90%E9%97%AE%E9%A2%98.png)\n\n### 解决方法\n\n换源或者直接采用conda默认的源（以下换回conda的默认源）\n\n```\nconda config --remove-key channels\n```\n\n换成清华源或中科大源，将以下配置文件写入`~/.condarc`中\n\n```\nchannels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\nssl_verify: true\n```\n\n\n\n\n\n## 异常关机导致的conda异常中断\n\n### 问题描述\n\n![](http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%85%B3%E6%9C%BA%E5%AF%BC%E8%87%B4%E7%9A%84conda%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD.png)\n\n### 解决方法\n\n将所有出问题的文件移除\n\n```\nrm -rf \"出错文件路径\"\n```\n\n\n\n## 创建新环境报错\n\n### 报错信息\n\n```\nCollecting package metadata (current_repodata.json): failed\n\nNotWritableError: The current user does not have write permissions to a required path.\n  path: /home/ziyedy/.conda/pkgs/urls.txt\n  uid: 1000\n  gid: 1000\n\nIf you feel that permissions on this path are set incorrectly, you can manually\nchange them by executing\n\n  $ sudo chown 1000:1000 /home/ziyedy/.conda/pkgs/urls.txt\n\nIn general, it's not advisable to use 'sudo conda'.\n\n```\n\n### 解决方案\n\n按照提示尝试操作没用，解决方法是命令行输入如下：\n\n```\nsudo chown -R ziyedy anaconda3 # ziyedy is user name.\n```\n\n参考：https://blog.csdn.net/PecoHe/article/details/104578700\n\n\n\n## 无法改变环境\n\n正常情况下输入`conda activate <env_name>`时，python应该改变为该环境下的python版本，可以使用`python -V`查看，但有时命令行显示上环境已经更改但实际上所使用的python解释器没有更换，解决方法如下：\n\n1. 使用记事本打开编辑环境（该目录下的.bashrc存储的为个人的一些配置文件，如别名路径）\n\n```\nsudo gedit ~/.bashrc\n```\n\n2. 在末尾按照规律添加如下内容\n\n```\nexport PATH=\"export PATH=\"~/anaconda3/bin:$PATH\"   #base环境下的python，已有的\nalias python1=\"~/anaconda3/bin/python   # 你需要添加的\n```\n\n`alias`用于设置指令的别名，下面一条语句的意思就算你输入python1就会自动指向后面\n\n3. 使得修改生效\n\n```\nsource ~/.bashrc\n```\n\n","source":"_posts/问题解决/conda产生的bug处理.md","raw":"---\ntitle: conda产生的bug处理\ndate: 2020-09-26 10:35:45\ntags:\n\t- conda\ncategories:\n\t- 问题解决\nfileName: conda-debug\n---\n\n## 没有写权限\n\n### 问题描述\n\n```\nEnvironmentNotWritableError: The current user does not have write permissions to the target environment.\n  environment location: /opt/anaconda3\n  uid: 1000\n  gid: 1000\n```\n\n### 解决方法\n\n将anconda及其子文件赋予最高权限\n\n```\nsudo chmod 777 -R /opt/anaconda3/\n```\n\n\n\n## 下载源问题\n\n### 问题描述\n\n![](http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E4%B8%8B%E8%BD%BD%E6%BA%90%E9%97%AE%E9%A2%98.png)\n\n### 解决方法\n\n换源或者直接采用conda默认的源（以下换回conda的默认源）\n\n```\nconda config --remove-key channels\n```\n\n换成清华源或中科大源，将以下配置文件写入`~/.condarc`中\n\n```\nchannels:\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/\n  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/\nssl_verify: true\n```\n\n\n\n\n\n## 异常关机导致的conda异常中断\n\n### 问题描述\n\n![](http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%85%B3%E6%9C%BA%E5%AF%BC%E8%87%B4%E7%9A%84conda%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD.png)\n\n### 解决方法\n\n将所有出问题的文件移除\n\n```\nrm -rf \"出错文件路径\"\n```\n\n\n\n## 创建新环境报错\n\n### 报错信息\n\n```\nCollecting package metadata (current_repodata.json): failed\n\nNotWritableError: The current user does not have write permissions to a required path.\n  path: /home/ziyedy/.conda/pkgs/urls.txt\n  uid: 1000\n  gid: 1000\n\nIf you feel that permissions on this path are set incorrectly, you can manually\nchange them by executing\n\n  $ sudo chown 1000:1000 /home/ziyedy/.conda/pkgs/urls.txt\n\nIn general, it's not advisable to use 'sudo conda'.\n\n```\n\n### 解决方案\n\n按照提示尝试操作没用，解决方法是命令行输入如下：\n\n```\nsudo chown -R ziyedy anaconda3 # ziyedy is user name.\n```\n\n参考：https://blog.csdn.net/PecoHe/article/details/104578700\n\n\n\n## 无法改变环境\n\n正常情况下输入`conda activate <env_name>`时，python应该改变为该环境下的python版本，可以使用`python -V`查看，但有时命令行显示上环境已经更改但实际上所使用的python解释器没有更换，解决方法如下：\n\n1. 使用记事本打开编辑环境（该目录下的.bashrc存储的为个人的一些配置文件，如别名路径）\n\n```\nsudo gedit ~/.bashrc\n```\n\n2. 在末尾按照规律添加如下内容\n\n```\nexport PATH=\"export PATH=\"~/anaconda3/bin:$PATH\"   #base环境下的python，已有的\nalias python1=\"~/anaconda3/bin/python   # 你需要添加的\n```\n\n`alias`用于设置指令的别名，下面一条语句的意思就算你输入python1就会自动指向后面\n\n3. 使得修改生效\n\n```\nsource ~/.bashrc\n```\n\n","slug":"问题解决/conda产生的bug处理","published":1,"updated":"2021-01-11T04:56:24.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9d001irwjsfyu4apx9","content":"<h2 id=\"没有写权限\"><a href=\"#没有写权限\" class=\"headerlink\" title=\"没有写权限\"></a>没有写权限</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">EnvironmentNotWritableError: The current<span class=\"hljs-built_in\"> user </span>does <span class=\"hljs-keyword\">not</span> have write permissions <span class=\"hljs-keyword\">to</span> the target environment.<br>  environment location: /opt/anaconda3<br>  uid: 1000<br>  gid: 1000<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>将anconda及其子文件赋予最高权限</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">sudo chmod <span class=\"hljs-number\">777</span> -R /opt/anaconda3/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源问题\"><a href=\"#下载源问题\" class=\"headerlink\" title=\"下载源问题\"></a>下载源问题</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p><img src=\"http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E4%B8%8B%E8%BD%BD%E6%BA%90%E9%97%AE%E9%A2%98.png\" alt=\"\"></p>\n<h3 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>换源或者直接采用conda默认的源（以下换回conda的默认源）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">conda<span class=\"hljs-built_in\"> config </span>--remove-key channels<br></code></pre></td></tr></table></figure>\n\n<p>换成清华源或中科大源，将以下配置文件写入<code>~/.condarc</code>中</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haml\">channels:<br>  -<span class=\"ruby\"> <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/pkgs/main</span><span class=\"hljs-regexp\">/<br></span></span>  -<span class=\"ruby\"><span class=\"hljs-regexp\"> https:/</span><span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/pkgs/free</span><span class=\"hljs-regexp\">/<br></span></span>  -<span class=\"ruby\"><span class=\"hljs-regexp\"> https:/</span><span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/cloud/conda</span>-forge/<br></span>  -<span class=\"ruby\"> <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/cloud/pytorch</span><span class=\"hljs-regexp\">/<br></span></span>ssl_verify: true<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常关机导致的conda异常中断\"><a href=\"#异常关机导致的conda异常中断\" class=\"headerlink\" title=\"异常关机导致的conda异常中断\"></a>异常关机导致的conda异常中断</h2><h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p><img src=\"http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%85%B3%E6%9C%BA%E5%AF%BC%E8%87%B4%E7%9A%84conda%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD.png\" alt=\"\"></p>\n<h3 id=\"解决方法-2\"><a href=\"#解决方法-2\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>将所有出问题的文件移除</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rm</span> -rf <span class=\"hljs-string\">\"出错文件路径\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建新环境报错\"><a href=\"#创建新环境报错\" class=\"headerlink\" title=\"创建新环境报错\"></a>创建新环境报错</h2><h3 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">Collecting package metadata (current_repodata.json): failed<br><br>NotWritableError: The current<span class=\"hljs-built_in\"> user </span>does <span class=\"hljs-keyword\">not</span> have write permissions <span class=\"hljs-keyword\">to</span> a required path.<br>  path: /home/ziyedy/.conda/pkgs/urls.txt<br>  uid: 1000<br>  gid: 1000<br><br><span class=\"hljs-keyword\">If</span> you feel that permissions on this path are <span class=\"hljs-builtin-name\">set</span> incorrectly, you can manually<br>change them by executing<br><br>  $ sudo chown 1000:1000 /home/ziyedy/.conda/pkgs/urls.txt<br><br><span class=\"hljs-keyword\">In</span> general, it<span class=\"hljs-string\">'s not advisable to use '</span>sudo conda<span class=\"hljs-string\">'.</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>按照提示尝试操作没用，解决方法是命令行输入如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo chown -R ziyedy anaconda3 # ziyedy is<span class=\"hljs-built_in\"> user </span>name.<br></code></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://blog.csdn.net/PecoHe/article/details/104578700\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/PecoHe/article/details/104578700</a></p>\n<h2 id=\"无法改变环境\"><a href=\"#无法改变环境\" class=\"headerlink\" title=\"无法改变环境\"></a>无法改变环境</h2><p>正常情况下输入<code>conda activate &lt;env_name&gt;</code>时，python应该改变为该环境下的python版本，可以使用<code>python -V</code>查看，但有时命令行显示上环境已经更改但实际上所使用的python解释器没有更换，解决方法如下：</p>\n<ol>\n<li>使用记事本打开编辑环境（该目录下的.bashrc存储的为个人的一些配置文件，如别名路径）</li>\n</ol>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">sudo gedit ~<span class=\"hljs-string\">/.bashrc</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在末尾按照规律添加如下内容</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-string\">\"export PATH=\"</span>~/anaconda3/bin:$PATH\"   #base环境下的python，已有的<br>alias <span class=\"hljs-attribute\">python1</span>=<span class=\"hljs-string\">\"~/anaconda3/bin/python   # 你需要添加的</span><br></code></pre></td></tr></table></figure>\n\n<p><code>alias</code>用于设置指令的别名，下面一条语句的意思就算你输入python1就会自动指向后面</p>\n<ol start=\"3\">\n<li>使得修改生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"没有写权限\"><a href=\"#没有写权限\" class=\"headerlink\" title=\"没有写权限\"></a>没有写权限</h2><h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">EnvironmentNotWritableError: The current<span class=\"hljs-built_in\"> user </span>does <span class=\"hljs-keyword\">not</span> have write permissions <span class=\"hljs-keyword\">to</span> the target environment.<br>  environment location: /opt/anaconda3<br>  uid: 1000<br>  gid: 1000<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>将anconda及其子文件赋予最高权限</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">sudo chmod <span class=\"hljs-number\">777</span> -R /opt/anaconda3/<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载源问题\"><a href=\"#下载源问题\" class=\"headerlink\" title=\"下载源问题\"></a>下载源问题</h2><h3 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p><img src=\"http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E4%B8%8B%E8%BD%BD%E6%BA%90%E9%97%AE%E9%A2%98.png\" alt=\"\"></p>\n<h3 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>换源或者直接采用conda默认的源（以下换回conda的默认源）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">conda<span class=\"hljs-built_in\"> config </span>--remove-key channels<br></code></pre></td></tr></table></figure>\n\n<p>换成清华源或中科大源，将以下配置文件写入<code>~/.condarc</code>中</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haml\">channels:<br>  -<span class=\"ruby\"> <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/pkgs/main</span><span class=\"hljs-regexp\">/<br></span></span>  -<span class=\"ruby\"><span class=\"hljs-regexp\"> https:/</span><span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/pkgs/free</span><span class=\"hljs-regexp\">/<br></span></span>  -<span class=\"ruby\"><span class=\"hljs-regexp\"> https:/</span><span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/cloud/conda</span>-forge/<br></span>  -<span class=\"ruby\"> <span class=\"hljs-symbol\">https:</span>/<span class=\"hljs-regexp\">/mirrors.tuna.tsinghua.edu.cn/anaconda</span><span class=\"hljs-regexp\">/cloud/pytorch</span><span class=\"hljs-regexp\">/<br></span></span>ssl_verify: true<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"异常关机导致的conda异常中断\"><a href=\"#异常关机导致的conda异常中断\" class=\"headerlink\" title=\"异常关机导致的conda异常中断\"></a>异常关机导致的conda异常中断</h2><h3 id=\"问题描述-2\"><a href=\"#问题描述-2\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p><img src=\"http://cdn.ziyedy.top/conda%E4%BA%A7%E7%94%9F%E7%9A%84bug%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%85%B3%E6%9C%BA%E5%AF%BC%E8%87%B4%E7%9A%84conda%E5%BC%82%E5%B8%B8%E4%B8%AD%E6%96%AD.png\" alt=\"\"></p>\n<h3 id=\"解决方法-2\"><a href=\"#解决方法-2\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>将所有出问题的文件移除</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rm</span> -rf <span class=\"hljs-string\">\"出错文件路径\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建新环境报错\"><a href=\"#创建新环境报错\" class=\"headerlink\" title=\"创建新环境报错\"></a>创建新环境报错</h2><h3 id=\"报错信息\"><a href=\"#报错信息\" class=\"headerlink\" title=\"报错信息\"></a>报错信息</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">Collecting package metadata (current_repodata.json): failed<br><br>NotWritableError: The current<span class=\"hljs-built_in\"> user </span>does <span class=\"hljs-keyword\">not</span> have write permissions <span class=\"hljs-keyword\">to</span> a required path.<br>  path: /home/ziyedy/.conda/pkgs/urls.txt<br>  uid: 1000<br>  gid: 1000<br><br><span class=\"hljs-keyword\">If</span> you feel that permissions on this path are <span class=\"hljs-builtin-name\">set</span> incorrectly, you can manually<br>change them by executing<br><br>  $ sudo chown 1000:1000 /home/ziyedy/.conda/pkgs/urls.txt<br><br><span class=\"hljs-keyword\">In</span> general, it<span class=\"hljs-string\">'s not advisable to use '</span>sudo conda<span class=\"hljs-string\">'.</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>按照提示尝试操作没用，解决方法是命令行输入如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">sudo chown -R ziyedy anaconda3 # ziyedy is<span class=\"hljs-built_in\"> user </span>name.<br></code></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://blog.csdn.net/PecoHe/article/details/104578700\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/PecoHe/article/details/104578700</a></p>\n<h2 id=\"无法改变环境\"><a href=\"#无法改变环境\" class=\"headerlink\" title=\"无法改变环境\"></a>无法改变环境</h2><p>正常情况下输入<code>conda activate &lt;env_name&gt;</code>时，python应该改变为该环境下的python版本，可以使用<code>python -V</code>查看，但有时命令行显示上环境已经更改但实际上所使用的python解释器没有更换，解决方法如下：</p>\n<ol>\n<li>使用记事本打开编辑环境（该目录下的.bashrc存储的为个人的一些配置文件，如别名路径）</li>\n</ol>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">sudo gedit ~<span class=\"hljs-string\">/.bashrc</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在末尾按照规律添加如下内容</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-builtin-name\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-string\">\"export PATH=\"</span>~/anaconda3/bin:$PATH\"   #base环境下的python，已有的<br>alias <span class=\"hljs-attribute\">python1</span>=<span class=\"hljs-string\">\"~/anaconda3/bin/python   # 你需要添加的</span><br></code></pre></td></tr></table></figure>\n\n<p><code>alias</code>用于设置指令的别名，下面一条语句的意思就算你输入python1就会自动指向后面</p>\n<ol start=\"3\">\n<li>使得修改生效</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n"},{"title":"TF2存储模型参数等基本操作","date":"2020-08-08T04:12:34.000Z","fileName":"tf2-nn-basic-handle","_content":"\n\n\n## 存储模型\n\n","source":"_posts/AI相关/TensorFlow2/TF2存储模型参数等基本操作.md","raw":"---\ntitle: TF2存储模型参数等基本操作\ndate: 2020-08-08 12:12:34\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: tf2-nn-basic-handle\n---\n\n\n\n## 存储模型\n\n","slug":"AI相关/TensorFlow2/TF2存储模型参数等基本操作","published":1,"updated":"2021-01-11T04:42:23.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9t001mrwjs0qikh2zw","content":"<h2 id=\"存储模型\"><a href=\"#存储模型\" class=\"headerlink\" title=\"存储模型\"></a>存储模型</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"存储模型\"><a href=\"#存储模型\" class=\"headerlink\" title=\"存储模型\"></a>存储模型</h2>"},{"title":"TF2原生语法构建简单网络","date":"2020-08-07T02:22:41.000Z","fileName":"tf2-basic-builder-simple-nn","_content":"\n## 基本思路\n\n### 数据集\n\n本实验采用的数据为鸢尾属植物数据集，存储了150个样本的4个特征，分别对应了3类不同的鸢尾属植物。\n\n### 基本流程可视化\n\n每个数据可以视为1×4的向量，且最后对应3类，那么权重w就应该是4×3，偏置量b就应该是1×3。\n\n![](http://cdn.ziyedy.top/image/AI/TF2/%E6%9D%83%E9%87%8D%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n上述过程可以即可以视为一个全连接神经网络，可视化如下。\n\n![](http://cdn.ziyedy.top/image/AI/TF2/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n\n\n## 主要流程\n\n### 一、数据准备\n\n#### 1、数据集读入\n\n```\nfrom sklearn.datasets import datasets\nx_data = datasets.load_iris().data\ny_data = datasets.load_iris().target\n```\n\n\n\n#### 2、数据集乱序\n\n```\nnp.random.seed(116)\nnp.random.shuffle(x_data)\nnp.random.seed(116)\nnp.random.shuffle(y_data)\n```\n\n\n\n#### 3、生成训练集和测试集，并根据需要转换数据格式\n\n```\n# 取后30个为测试集，其余为训练集\nx_train = x_data[:-30]\ny_train = y_data[:-30]\nx_test = x_data[-30:]\ny_test = y_data[-30:]\n\n# 转换x的数据类型，避免数据不一致的问题\nx_train = tf.cast(x_train, tf.float32)\nx_test = tf.cast(x_test, tf.float32)\n```\n\n\n\n#### 4、将（输入特征，标签）组成对，每次读入一部分（batch）\n\n```\ntrain_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(32)\ntest_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)\n```\n\n\n\n### 二、搭建网络，迭代进行训练\n\n#### 1、定义神经网络中所有可训练参数\n\n```\nw1 = tf.Variable(tf.random.truncated_normal([4, 3], stddev=0.1, seed=1))\nb1 = tf.Variable(tf.random.truncated_normal([3], stddev=0.1, seed=1))\n```\n\n\n\n#### 2、定义一些超参数，及后续可能会用到的参数\n\n```\nlr = 0.1  # 学习率为0.1\ntrain_loss_results = []  # 将每轮的loss记录在此列表中，为后续画loss曲线提供数据\ntest_acc = []  # 将每轮的acc记录在此列表中，为后续画acc曲线提供数据\nepoch = 500  # 循环500轮\nloss_all = 0  # 每轮分4个step，loss_all记录四个step生成的4个loss的和\n```\n\n\n\n#### 3、嵌套循环迭代，with结构更新参数，显示loss等信息\n\n```\n# 数据集级别的循环，每个epoch循环一次数据集\nfor epoch in range(epoch):  \n\t# batch级别的循环 ，每个step循环一个batch\n    for step, (x_train, y_train) in enumerate(train_db):\n    \t# with结构记录梯度信息\n        with tf.GradientTape() as tape:\n        \t# 前向传播计算y_\n            y = tf.matmul(x_train, w1) + b1\n            y = tf.nn.softmax(y)\n            y_ = tf.one_hot(y_train, depth=3)\n            # 计算总loss\n            loss = tf.reduce_mean(tf.square(y_ - y))\n            loss_all += loss.numpy()\n            \n        # 计算loss对各个参数的梯度\n        grads = tape.gradient(loss, [w1, b1])\n\n        # 参数自更新\n        w1.assign_sub(lr * grads[0])  # 参数w1自更新\n        b1.assign_sub(lr * grads[1])  # 参数b自更新\n\n    # 每个epoch，打印loss信息并记录\n    print(\"Epoch {}, loss: {}\".format(epoch, loss_all/4))\n    train_loss_results.append(loss_all / 4)\n    loss_all = 0\n```\n\n\n\n#### 4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\n\n```\n    # total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0\n    total_correct, total_number = 0, 0\n    for x_test, y_test in test_db:\n        # 使用更新后的参数进行预测\n        y = tf.matmul(x_test, w1) + b1\n        y = tf.nn.softmax(y)\n        pred = tf.argmax(y, axis=1)  # 返回y中最大值的索引，即预测的分类\n        # 将pred转换为y_test的数据类型\n        pred = tf.cast(pred, dtype=y_test.dtype)\n        # 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型\n        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)\n        # 将每个batch的correct数加起来\n        correct = tf.reduce_sum(correct)\n        # 将所有batch中的correct数加起来\n        total_correct += int(correct)\n        # total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数\n        total_number += x_test.shape[0]\n    # 总的准确率等于total_correct/total_number\n    acc = total_correct / total_number\n    test_acc.append(acc)\n    print(\"Test_acc:\", acc)\n    print(\"--------------------------\")\n```\n\n\n\n### 三、绘制相应训练曲线\n\n```\n# 绘制 loss 曲线\nplt.title('Loss Function Curve')  \nplt.xlabel('Epoch') \nplt.ylabel('Loss') \nplt.plot(train_loss_results, label=\"$Loss$\") \nplt.legend() \nplt.show() \n\n# 绘制 Accuracy 曲线\nplt.title('Acc Curve') \nplt.xlabel('Epoch') \nplt.ylabel('Acc') \nplt.plot(test_acc, label=\"$Accuracy$\") \nplt.legend()\nplt.show()\n```\n\n","source":"_posts/AI相关/TensorFlow2/TF2原生语法构建简单网络.md","raw":"---\ntitle: TF2原生语法构建简单网络\ndate: 2020-08-07 10:22:41\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: tf2-basic-builder-simple-nn\n---\n\n## 基本思路\n\n### 数据集\n\n本实验采用的数据为鸢尾属植物数据集，存储了150个样本的4个特征，分别对应了3类不同的鸢尾属植物。\n\n### 基本流程可视化\n\n每个数据可以视为1×4的向量，且最后对应3类，那么权重w就应该是4×3，偏置量b就应该是1×3。\n\n![](http://cdn.ziyedy.top/image/AI/TF2/%E6%9D%83%E9%87%8D%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n上述过程可以即可以视为一个全连接神经网络，可视化如下。\n\n![](http://cdn.ziyedy.top/image/AI/TF2/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n\n\n## 主要流程\n\n### 一、数据准备\n\n#### 1、数据集读入\n\n```\nfrom sklearn.datasets import datasets\nx_data = datasets.load_iris().data\ny_data = datasets.load_iris().target\n```\n\n\n\n#### 2、数据集乱序\n\n```\nnp.random.seed(116)\nnp.random.shuffle(x_data)\nnp.random.seed(116)\nnp.random.shuffle(y_data)\n```\n\n\n\n#### 3、生成训练集和测试集，并根据需要转换数据格式\n\n```\n# 取后30个为测试集，其余为训练集\nx_train = x_data[:-30]\ny_train = y_data[:-30]\nx_test = x_data[-30:]\ny_test = y_data[-30:]\n\n# 转换x的数据类型，避免数据不一致的问题\nx_train = tf.cast(x_train, tf.float32)\nx_test = tf.cast(x_test, tf.float32)\n```\n\n\n\n#### 4、将（输入特征，标签）组成对，每次读入一部分（batch）\n\n```\ntrain_db = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(32)\ntest_db = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)\n```\n\n\n\n### 二、搭建网络，迭代进行训练\n\n#### 1、定义神经网络中所有可训练参数\n\n```\nw1 = tf.Variable(tf.random.truncated_normal([4, 3], stddev=0.1, seed=1))\nb1 = tf.Variable(tf.random.truncated_normal([3], stddev=0.1, seed=1))\n```\n\n\n\n#### 2、定义一些超参数，及后续可能会用到的参数\n\n```\nlr = 0.1  # 学习率为0.1\ntrain_loss_results = []  # 将每轮的loss记录在此列表中，为后续画loss曲线提供数据\ntest_acc = []  # 将每轮的acc记录在此列表中，为后续画acc曲线提供数据\nepoch = 500  # 循环500轮\nloss_all = 0  # 每轮分4个step，loss_all记录四个step生成的4个loss的和\n```\n\n\n\n#### 3、嵌套循环迭代，with结构更新参数，显示loss等信息\n\n```\n# 数据集级别的循环，每个epoch循环一次数据集\nfor epoch in range(epoch):  \n\t# batch级别的循环 ，每个step循环一个batch\n    for step, (x_train, y_train) in enumerate(train_db):\n    \t# with结构记录梯度信息\n        with tf.GradientTape() as tape:\n        \t# 前向传播计算y_\n            y = tf.matmul(x_train, w1) + b1\n            y = tf.nn.softmax(y)\n            y_ = tf.one_hot(y_train, depth=3)\n            # 计算总loss\n            loss = tf.reduce_mean(tf.square(y_ - y))\n            loss_all += loss.numpy()\n            \n        # 计算loss对各个参数的梯度\n        grads = tape.gradient(loss, [w1, b1])\n\n        # 参数自更新\n        w1.assign_sub(lr * grads[0])  # 参数w1自更新\n        b1.assign_sub(lr * grads[1])  # 参数b自更新\n\n    # 每个epoch，打印loss信息并记录\n    print(\"Epoch {}, loss: {}\".format(epoch, loss_all/4))\n    train_loss_results.append(loss_all / 4)\n    loss_all = 0\n```\n\n\n\n#### 4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\n\n```\n    # total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0\n    total_correct, total_number = 0, 0\n    for x_test, y_test in test_db:\n        # 使用更新后的参数进行预测\n        y = tf.matmul(x_test, w1) + b1\n        y = tf.nn.softmax(y)\n        pred = tf.argmax(y, axis=1)  # 返回y中最大值的索引，即预测的分类\n        # 将pred转换为y_test的数据类型\n        pred = tf.cast(pred, dtype=y_test.dtype)\n        # 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型\n        correct = tf.cast(tf.equal(pred, y_test), dtype=tf.int32)\n        # 将每个batch的correct数加起来\n        correct = tf.reduce_sum(correct)\n        # 将所有batch中的correct数加起来\n        total_correct += int(correct)\n        # total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数\n        total_number += x_test.shape[0]\n    # 总的准确率等于total_correct/total_number\n    acc = total_correct / total_number\n    test_acc.append(acc)\n    print(\"Test_acc:\", acc)\n    print(\"--------------------------\")\n```\n\n\n\n### 三、绘制相应训练曲线\n\n```\n# 绘制 loss 曲线\nplt.title('Loss Function Curve')  \nplt.xlabel('Epoch') \nplt.ylabel('Loss') \nplt.plot(train_loss_results, label=\"$Loss$\") \nplt.legend() \nplt.show() \n\n# 绘制 Accuracy 曲线\nplt.title('Acc Curve') \nplt.xlabel('Epoch') \nplt.ylabel('Acc') \nplt.plot(test_acc, label=\"$Accuracy$\") \nplt.legend()\nplt.show()\n```\n\n","slug":"AI相关/TensorFlow2/TF2原生语法构建简单网络","published":1,"updated":"2021-01-11T04:43:04.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9u001nrwjsajs23d9z","content":"<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><h3 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h3><p>本实验采用的数据为鸢尾属植物数据集，存储了150个样本的4个特征，分别对应了3类不同的鸢尾属植物。</p>\n<h3 id=\"基本流程可视化\"><a href=\"#基本流程可视化\" class=\"headerlink\" title=\"基本流程可视化\"></a>基本流程可视化</h3><p>每个数据可以视为1×4的向量，且最后对应3类，那么权重w就应该是4×3，偏置量b就应该是1×3。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/AI/TF2/%E6%9D%83%E9%87%8D%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>上述过程可以即可以视为一个全连接神经网络，可视化如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/AI/TF2/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><h3 id=\"一、数据准备\"><a href=\"#一、数据准备\" class=\"headerlink\" title=\"一、数据准备\"></a>一、数据准备</h3><h4 id=\"1、数据集读入\"><a href=\"#1、数据集读入\" class=\"headerlink\" title=\"1、数据集读入\"></a>1、数据集读入</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> datasets<br><span class=\"hljs-title\">x_data</span> = datasets.load_iris().<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span><br><span class=\"hljs-title\">y_data</span> = datasets.load_iris().target<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、数据集乱序\"><a href=\"#2、数据集乱序\" class=\"headerlink\" title=\"2、数据集乱序\"></a>2、数据集乱序</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.seed</span>(116)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.shuffle</span>(<span class=\"hljs-selector-tag\">x_data</span>)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.seed</span>(116)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.shuffle</span>(<span class=\"hljs-selector-tag\">y_data</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、生成训练集和测试集，并根据需要转换数据格式\"><a href=\"#3、生成训练集和测试集，并根据需要转换数据格式\" class=\"headerlink\" title=\"3、生成训练集和测试集，并根据需要转换数据格式\"></a>3、生成训练集和测试集，并根据需要转换数据格式</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 取后30个为测试集，其余为训练集</span><br><span class=\"hljs-attr\">x_train</span> = x_data[:-<span class=\"hljs-number\">30</span>]<br><span class=\"hljs-attr\">y_train</span> = y_data[:-<span class=\"hljs-number\">30</span>]<br><span class=\"hljs-attr\">x_test</span> = x_data[-<span class=\"hljs-number\">30</span>:]<br><span class=\"hljs-attr\">y_test</span> = y_data[-<span class=\"hljs-number\">30</span>:]<br><br><span class=\"hljs-comment\"># 转换x的数据类型，避免数据不一致的问题</span><br><span class=\"hljs-attr\">x_train</span> = tf.cast(x_train, tf.float32)<br><span class=\"hljs-attr\">x_test</span> = tf.cast(x_test, tf.float32)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、将（输入特征，标签）组成对，每次读入一部分（batch）\"><a href=\"#4、将（输入特征，标签）组成对，每次读入一部分（batch）\" class=\"headerlink\" title=\"4、将（输入特征，标签）组成对，每次读入一部分（batch）\"></a>4、将（输入特征，标签）组成对，每次读入一部分（batch）</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">train_db = tf.data.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Dataset</span>.</span></span>from<span class=\"hljs-constructor\">_tensor_slices((<span class=\"hljs-params\">x_train</span>, <span class=\"hljs-params\">y_train</span>)</span>).batch(<span class=\"hljs-number\">32</span>)<br>test_db = tf.data.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Dataset</span>.</span></span>from<span class=\"hljs-constructor\">_tensor_slices((<span class=\"hljs-params\">x_test</span>, <span class=\"hljs-params\">y_test</span>)</span>).batch(<span class=\"hljs-number\">32</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、搭建网络，迭代进行训练\"><a href=\"#二、搭建网络，迭代进行训练\" class=\"headerlink\" title=\"二、搭建网络，迭代进行训练\"></a>二、搭建网络，迭代进行训练</h3><h4 id=\"1、定义神经网络中所有可训练参数\"><a href=\"#1、定义神经网络中所有可训练参数\" class=\"headerlink\" title=\"1、定义神经网络中所有可训练参数\"></a>1、定义神经网络中所有可训练参数</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">w1 = tf.<span class=\"hljs-constructor\">Variable(<span class=\"hljs-params\">tf</span>.<span class=\"hljs-params\">random</span>.<span class=\"hljs-params\">truncated_normal</span>([4, 3], <span class=\"hljs-params\">stddev</span>=0.1, <span class=\"hljs-params\">seed</span>=1)</span>)<br>b1 = tf.<span class=\"hljs-constructor\">Variable(<span class=\"hljs-params\">tf</span>.<span class=\"hljs-params\">random</span>.<span class=\"hljs-params\">truncated_normal</span>([3], <span class=\"hljs-params\">stddev</span>=0.1, <span class=\"hljs-params\">seed</span>=1)</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、定义一些超参数，及后续可能会用到的参数\"><a href=\"#2、定义一些超参数，及后续可能会用到的参数\" class=\"headerlink\" title=\"2、定义一些超参数，及后续可能会用到的参数\"></a>2、定义一些超参数，及后续可能会用到的参数</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">lr</span> = <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-comment\"># 学习率为0.1</span><br><span class=\"hljs-attr\">train_loss_results</span> = []  <span class=\"hljs-comment\"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span><br><span class=\"hljs-attr\">test_acc</span> = []  <span class=\"hljs-comment\"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span><br><span class=\"hljs-attr\">epoch</span> = <span class=\"hljs-number\">500</span>  <span class=\"hljs-comment\"># 循环500轮</span><br><span class=\"hljs-attr\">loss_all</span> = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、嵌套循环迭代，with结构更新参数，显示loss等信息\"><a href=\"#3、嵌套循环迭代，with结构更新参数，显示loss等信息\" class=\"headerlink\" title=\"3、嵌套循环迭代，with结构更新参数，显示loss等信息\"></a>3、嵌套循环迭代，with结构更新参数，显示loss等信息</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># 数据集级别的循环，每个epoch循环一次数据集</span><br>for epoch <span class=\"hljs-keyword\">in</span> range(epoch):  <br>\t<span class=\"hljs-comment\"># batch级别的循环 ，每个step循环一个batch</span><br>    for step, (x_train, y_train) <span class=\"hljs-keyword\">in</span> enumerate(train_db):<br>    \t<span class=\"hljs-comment\"># with结构记录梯度信息</span><br>        <span class=\"hljs-keyword\">with</span> tf.GradientTape() as tape:<br>        \t<span class=\"hljs-comment\"># 前向传播计算y_</span><br>            <span class=\"hljs-attr\">y</span> = tf.matmul(x_train, w1) + b1<br>            <span class=\"hljs-attr\">y</span> = tf.nn.softmax(y)<br>            <span class=\"hljs-attr\">y_</span> = tf.one_hot(y_train, <span class=\"hljs-attr\">depth=3)</span><br>            <span class=\"hljs-comment\"># 计算总loss</span><br>            <span class=\"hljs-attr\">loss</span> = tf.reduce_mean(tf.square(y_ - y))<br>            loss_all += loss.numpy()<br>            <br>        <span class=\"hljs-comment\"># 计算loss对各个参数的梯度</span><br>        <span class=\"hljs-attr\">grads</span> = tape.gradient(loss, [w1, b1])<br><br>        <span class=\"hljs-comment\"># 参数自更新</span><br>        w1.assign_sub(lr * grads[<span class=\"hljs-number\">0</span>])  <span class=\"hljs-comment\"># 参数w1自更新</span><br>        b1.assign_sub(lr * grads[<span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># 参数b自更新</span><br><br>    <span class=\"hljs-comment\"># 每个epoch，打印loss信息并记录</span><br>    print(<span class=\"hljs-string\">\"Epoch &#123;&#125;, loss: &#123;&#125;\"</span>.format(epoch, loss_all/<span class=\"hljs-number\">4</span>))<br>    train_loss_results.append(loss_all / <span class=\"hljs-number\">4</span>)<br>    <span class=\"hljs-attr\">loss_all</span> = <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\"><a href=\"#4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\" class=\"headerlink\" title=\"4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\"></a>4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span><br>total_correct, <span class=\"hljs-attr\">total_number</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>for x_test, y_test <span class=\"hljs-keyword\">in</span> test_db:<br>    <span class=\"hljs-comment\"># 使用更新后的参数进行预测</span><br>    <span class=\"hljs-attr\">y</span> = tf.matmul(x_test, w1) + b1<br>    <span class=\"hljs-attr\">y</span> = tf.nn.softmax(y)<br>    <span class=\"hljs-attr\">pred</span> = tf.argmax(y, <span class=\"hljs-attr\">axis=1)</span>  <span class=\"hljs-comment\"># 返回y中最大值的索引，即预测的分类</span><br>    <span class=\"hljs-comment\"># 将pred转换为y_test的数据类型</span><br>    <span class=\"hljs-attr\">pred</span> = tf.cast(pred, <span class=\"hljs-attr\">dtype=y_test.dtype)</span><br>    <span class=\"hljs-comment\"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span><br>    <span class=\"hljs-attr\">correct</span> = tf.cast(tf.equal(pred, y_test), <span class=\"hljs-attr\">dtype=tf.int32)</span><br>    <span class=\"hljs-comment\"># 将每个batch的correct数加起来</span><br>    <span class=\"hljs-attr\">correct</span> = tf.reduce_sum(correct)<br>    <span class=\"hljs-comment\"># 将所有batch中的correct数加起来</span><br>    total_correct += int(correct)<br>    <span class=\"hljs-comment\"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span><br>    total_number += x_test.shape[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\"># 总的准确率等于total_correct/total_number</span><br><span class=\"hljs-attr\">acc</span> = total_correct / total_number<br>test_acc.append(acc)<br>print(<span class=\"hljs-string\">\"Test_acc:\"</span>, acc)<br>print(<span class=\"hljs-string\">\"--------------------------\"</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、绘制相应训练曲线\"><a href=\"#三、绘制相应训练曲线\" class=\"headerlink\" title=\"三、绘制相应训练曲线\"></a>三、绘制相应训练曲线</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"># 绘制 <span class=\"hljs-selector-tag\">loss</span> 曲线<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.title</span>(<span class=\"hljs-string\">'Loss Function Curve'</span>)  <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.xlabel</span>(<span class=\"hljs-string\">'Epoch'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.ylabel</span>(<span class=\"hljs-string\">'Loss'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.plot</span>(train_loss_results, label=<span class=\"hljs-string\">\"$Loss$\"</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.legend</span>() <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.show</span>() <br><br># 绘制 <span class=\"hljs-selector-tag\">Accuracy</span> 曲线<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.title</span>(<span class=\"hljs-string\">'Acc Curve'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.xlabel</span>(<span class=\"hljs-string\">'Epoch'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.ylabel</span>(<span class=\"hljs-string\">'Acc'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.plot</span>(test_acc, label=<span class=\"hljs-string\">\"$Accuracy$\"</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.legend</span>()<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.show</span>()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h2><h3 id=\"数据集\"><a href=\"#数据集\" class=\"headerlink\" title=\"数据集\"></a>数据集</h3><p>本实验采用的数据为鸢尾属植物数据集，存储了150个样本的4个特征，分别对应了3类不同的鸢尾属植物。</p>\n<h3 id=\"基本流程可视化\"><a href=\"#基本流程可视化\" class=\"headerlink\" title=\"基本流程可视化\"></a>基本流程可视化</h3><p>每个数据可以视为1×4的向量，且最后对应3类，那么权重w就应该是4×3，偏置量b就应该是1×3。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/AI/TF2/%E6%9D%83%E9%87%8D%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<p>上述过程可以即可以视为一个全连接神经网络，可视化如下。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/AI/TF2/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><h3 id=\"一、数据准备\"><a href=\"#一、数据准备\" class=\"headerlink\" title=\"一、数据准备\"></a>一、数据准备</h3><h4 id=\"1、数据集读入\"><a href=\"#1、数据集读入\" class=\"headerlink\" title=\"1、数据集读入\"></a>1、数据集读入</h4><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">from</span> sklearn.datasets <span class=\"hljs-keyword\">import</span> datasets<br><span class=\"hljs-title\">x_data</span> = datasets.load_iris().<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span><br><span class=\"hljs-title\">y_data</span> = datasets.load_iris().target<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、数据集乱序\"><a href=\"#2、数据集乱序\" class=\"headerlink\" title=\"2、数据集乱序\"></a>2、数据集乱序</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.seed</span>(116)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.shuffle</span>(<span class=\"hljs-selector-tag\">x_data</span>)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.seed</span>(116)<br><span class=\"hljs-selector-tag\">np</span><span class=\"hljs-selector-class\">.random</span><span class=\"hljs-selector-class\">.shuffle</span>(<span class=\"hljs-selector-tag\">y_data</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、生成训练集和测试集，并根据需要转换数据格式\"><a href=\"#3、生成训练集和测试集，并根据需要转换数据格式\" class=\"headerlink\" title=\"3、生成训练集和测试集，并根据需要转换数据格式\"></a>3、生成训练集和测试集，并根据需要转换数据格式</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 取后30个为测试集，其余为训练集</span><br><span class=\"hljs-attr\">x_train</span> = x_data[:-<span class=\"hljs-number\">30</span>]<br><span class=\"hljs-attr\">y_train</span> = y_data[:-<span class=\"hljs-number\">30</span>]<br><span class=\"hljs-attr\">x_test</span> = x_data[-<span class=\"hljs-number\">30</span>:]<br><span class=\"hljs-attr\">y_test</span> = y_data[-<span class=\"hljs-number\">30</span>:]<br><br><span class=\"hljs-comment\"># 转换x的数据类型，避免数据不一致的问题</span><br><span class=\"hljs-attr\">x_train</span> = tf.cast(x_train, tf.float32)<br><span class=\"hljs-attr\">x_test</span> = tf.cast(x_test, tf.float32)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、将（输入特征，标签）组成对，每次读入一部分（batch）\"><a href=\"#4、将（输入特征，标签）组成对，每次读入一部分（batch）\" class=\"headerlink\" title=\"4、将（输入特征，标签）组成对，每次读入一部分（batch）\"></a>4、将（输入特征，标签）组成对，每次读入一部分（batch）</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">train_db = tf.data.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Dataset</span>.</span></span>from<span class=\"hljs-constructor\">_tensor_slices((<span class=\"hljs-params\">x_train</span>, <span class=\"hljs-params\">y_train</span>)</span>).batch(<span class=\"hljs-number\">32</span>)<br>test_db = tf.data.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Dataset</span>.</span></span>from<span class=\"hljs-constructor\">_tensor_slices((<span class=\"hljs-params\">x_test</span>, <span class=\"hljs-params\">y_test</span>)</span>).batch(<span class=\"hljs-number\">32</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"二、搭建网络，迭代进行训练\"><a href=\"#二、搭建网络，迭代进行训练\" class=\"headerlink\" title=\"二、搭建网络，迭代进行训练\"></a>二、搭建网络，迭代进行训练</h3><h4 id=\"1、定义神经网络中所有可训练参数\"><a href=\"#1、定义神经网络中所有可训练参数\" class=\"headerlink\" title=\"1、定义神经网络中所有可训练参数\"></a>1、定义神经网络中所有可训练参数</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">w1 = tf.<span class=\"hljs-constructor\">Variable(<span class=\"hljs-params\">tf</span>.<span class=\"hljs-params\">random</span>.<span class=\"hljs-params\">truncated_normal</span>([4, 3], <span class=\"hljs-params\">stddev</span>=0.1, <span class=\"hljs-params\">seed</span>=1)</span>)<br>b1 = tf.<span class=\"hljs-constructor\">Variable(<span class=\"hljs-params\">tf</span>.<span class=\"hljs-params\">random</span>.<span class=\"hljs-params\">truncated_normal</span>([3], <span class=\"hljs-params\">stddev</span>=0.1, <span class=\"hljs-params\">seed</span>=1)</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2、定义一些超参数，及后续可能会用到的参数\"><a href=\"#2、定义一些超参数，及后续可能会用到的参数\" class=\"headerlink\" title=\"2、定义一些超参数，及后续可能会用到的参数\"></a>2、定义一些超参数，及后续可能会用到的参数</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">lr</span> = <span class=\"hljs-number\">0.1</span>  <span class=\"hljs-comment\"># 学习率为0.1</span><br><span class=\"hljs-attr\">train_loss_results</span> = []  <span class=\"hljs-comment\"># 将每轮的loss记录在此列表中，为后续画loss曲线提供数据</span><br><span class=\"hljs-attr\">test_acc</span> = []  <span class=\"hljs-comment\"># 将每轮的acc记录在此列表中，为后续画acc曲线提供数据</span><br><span class=\"hljs-attr\">epoch</span> = <span class=\"hljs-number\">500</span>  <span class=\"hljs-comment\"># 循环500轮</span><br><span class=\"hljs-attr\">loss_all</span> = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># 每轮分4个step，loss_all记录四个step生成的4个loss的和</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"3、嵌套循环迭代，with结构更新参数，显示loss等信息\"><a href=\"#3、嵌套循环迭代，with结构更新参数，显示loss等信息\" class=\"headerlink\" title=\"3、嵌套循环迭代，with结构更新参数，显示loss等信息\"></a>3、嵌套循环迭代，with结构更新参数，显示loss等信息</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># 数据集级别的循环，每个epoch循环一次数据集</span><br>for epoch <span class=\"hljs-keyword\">in</span> range(epoch):  <br>\t<span class=\"hljs-comment\"># batch级别的循环 ，每个step循环一个batch</span><br>    for step, (x_train, y_train) <span class=\"hljs-keyword\">in</span> enumerate(train_db):<br>    \t<span class=\"hljs-comment\"># with结构记录梯度信息</span><br>        <span class=\"hljs-keyword\">with</span> tf.GradientTape() as tape:<br>        \t<span class=\"hljs-comment\"># 前向传播计算y_</span><br>            <span class=\"hljs-attr\">y</span> = tf.matmul(x_train, w1) + b1<br>            <span class=\"hljs-attr\">y</span> = tf.nn.softmax(y)<br>            <span class=\"hljs-attr\">y_</span> = tf.one_hot(y_train, <span class=\"hljs-attr\">depth=3)</span><br>            <span class=\"hljs-comment\"># 计算总loss</span><br>            <span class=\"hljs-attr\">loss</span> = tf.reduce_mean(tf.square(y_ - y))<br>            loss_all += loss.numpy()<br>            <br>        <span class=\"hljs-comment\"># 计算loss对各个参数的梯度</span><br>        <span class=\"hljs-attr\">grads</span> = tape.gradient(loss, [w1, b1])<br><br>        <span class=\"hljs-comment\"># 参数自更新</span><br>        w1.assign_sub(lr * grads[<span class=\"hljs-number\">0</span>])  <span class=\"hljs-comment\"># 参数w1自更新</span><br>        b1.assign_sub(lr * grads[<span class=\"hljs-number\">1</span>])  <span class=\"hljs-comment\"># 参数b自更新</span><br><br>    <span class=\"hljs-comment\"># 每个epoch，打印loss信息并记录</span><br>    print(<span class=\"hljs-string\">\"Epoch &#123;&#125;, loss: &#123;&#125;\"</span>.format(epoch, loss_all/<span class=\"hljs-number\">4</span>))<br>    train_loss_results.append(loss_all / <span class=\"hljs-number\">4</span>)<br>    <span class=\"hljs-attr\">loss_all</span> = <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\"><a href=\"#4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\" class=\"headerlink\" title=\"4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录\"></a>4、在该轮epoch中，计算当前参数前向传播的准确率并进行记录</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># total_correct为预测对的样本个数, total_number为测试的总样本数，将这两个变量都初始化为0</span><br>total_correct, <span class=\"hljs-attr\">total_number</span> = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>for x_test, y_test <span class=\"hljs-keyword\">in</span> test_db:<br>    <span class=\"hljs-comment\"># 使用更新后的参数进行预测</span><br>    <span class=\"hljs-attr\">y</span> = tf.matmul(x_test, w1) + b1<br>    <span class=\"hljs-attr\">y</span> = tf.nn.softmax(y)<br>    <span class=\"hljs-attr\">pred</span> = tf.argmax(y, <span class=\"hljs-attr\">axis=1)</span>  <span class=\"hljs-comment\"># 返回y中最大值的索引，即预测的分类</span><br>    <span class=\"hljs-comment\"># 将pred转换为y_test的数据类型</span><br>    <span class=\"hljs-attr\">pred</span> = tf.cast(pred, <span class=\"hljs-attr\">dtype=y_test.dtype)</span><br>    <span class=\"hljs-comment\"># 若分类正确，则correct=1，否则为0，将bool型的结果转换为int型</span><br>    <span class=\"hljs-attr\">correct</span> = tf.cast(tf.equal(pred, y_test), <span class=\"hljs-attr\">dtype=tf.int32)</span><br>    <span class=\"hljs-comment\"># 将每个batch的correct数加起来</span><br>    <span class=\"hljs-attr\">correct</span> = tf.reduce_sum(correct)<br>    <span class=\"hljs-comment\"># 将所有batch中的correct数加起来</span><br>    total_correct += int(correct)<br>    <span class=\"hljs-comment\"># total_number为测试的总样本数，也就是x_test的行数，shape[0]返回变量的行数</span><br>    total_number += x_test.shape[<span class=\"hljs-number\">0</span>]<br><span class=\"hljs-comment\"># 总的准确率等于total_correct/total_number</span><br><span class=\"hljs-attr\">acc</span> = total_correct / total_number<br>test_acc.append(acc)<br>print(<span class=\"hljs-string\">\"Test_acc:\"</span>, acc)<br>print(<span class=\"hljs-string\">\"--------------------------\"</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"三、绘制相应训练曲线\"><a href=\"#三、绘制相应训练曲线\" class=\"headerlink\" title=\"三、绘制相应训练曲线\"></a>三、绘制相应训练曲线</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"># 绘制 <span class=\"hljs-selector-tag\">loss</span> 曲线<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.title</span>(<span class=\"hljs-string\">'Loss Function Curve'</span>)  <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.xlabel</span>(<span class=\"hljs-string\">'Epoch'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.ylabel</span>(<span class=\"hljs-string\">'Loss'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.plot</span>(train_loss_results, label=<span class=\"hljs-string\">\"$Loss$\"</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.legend</span>() <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.show</span>() <br><br># 绘制 <span class=\"hljs-selector-tag\">Accuracy</span> 曲线<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.title</span>(<span class=\"hljs-string\">'Acc Curve'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.xlabel</span>(<span class=\"hljs-string\">'Epoch'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.ylabel</span>(<span class=\"hljs-string\">'Acc'</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.plot</span>(test_acc, label=<span class=\"hljs-string\">\"$Accuracy$\"</span>) <br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.legend</span>()<br><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.show</span>()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"TF2实现经典CNN架构","date":"2020-08-24T09:08:00.000Z","fileName":"tf2-classic-cnn","_content":"\n## 卷积神经网络经典操作\n\n### 卷积操作\n\n```\ntf.keras.layers.Conv2D (\n\tfilters = 卷积核个数,\n\tkernel_size = 卷积核尺寸, # 正方形写核长整数，或（核高h，核宽w）\n\tstrides = 滑动步长, # 横纵向相同写步长整数，或(纵向步长h，横向步长w)，默认1\n\tpadding = “same” or “valid”, # same表示全零填充，valid为默认值\n\tactivation = \"relu\" # 激活函数，如有BN，此处不写\n\tinput_shape = (高, 宽 , 通道数) # 输入特征图维度，可省略\n)\n```\n\n\n\n### 批标准化（Batch Normalization，BN）\n\n```\ntf.keras.layers.BatchNormalization()\n```\n\n\n\n### 激活函数（使用BN的情况下才要）\n\n```\nActivation(对应激活函数)\n```\n\n\n\n### 池化（Pooling）\n\n```\n# 最大池化\ntf.keras.layers.MaxPool2D(\n\tpool_size= 池化核尺寸,\n\tstrides= 池化步长, # 默认为pool_size\n\tpadding=‘valid’ or ‘same’\n)\n\n# 平均池化\ntf.keras.layers.AveragePooling2D(\n\tpool_size= 池化核尺寸,\n\tstrides= 池化步长, # 默认为pool_size\n\tpadding=‘valid’or‘same’\n)\n```\n\n\n\n### Dropout\n\n```\ntf.keras.layers.Dropout(舍弃概率)\n```\n\n\n\n### VGG","source":"_posts/AI相关/TensorFlow2/TF2实现经典CNN架构.md","raw":"---\ntitle: TF2实现经典CNN架构\ndate: 2020-08-24 17:08:00\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: tf2-classic-cnn\n---\n\n## 卷积神经网络经典操作\n\n### 卷积操作\n\n```\ntf.keras.layers.Conv2D (\n\tfilters = 卷积核个数,\n\tkernel_size = 卷积核尺寸, # 正方形写核长整数，或（核高h，核宽w）\n\tstrides = 滑动步长, # 横纵向相同写步长整数，或(纵向步长h，横向步长w)，默认1\n\tpadding = “same” or “valid”, # same表示全零填充，valid为默认值\n\tactivation = \"relu\" # 激活函数，如有BN，此处不写\n\tinput_shape = (高, 宽 , 通道数) # 输入特征图维度，可省略\n)\n```\n\n\n\n### 批标准化（Batch Normalization，BN）\n\n```\ntf.keras.layers.BatchNormalization()\n```\n\n\n\n### 激活函数（使用BN的情况下才要）\n\n```\nActivation(对应激活函数)\n```\n\n\n\n### 池化（Pooling）\n\n```\n# 最大池化\ntf.keras.layers.MaxPool2D(\n\tpool_size= 池化核尺寸,\n\tstrides= 池化步长, # 默认为pool_size\n\tpadding=‘valid’ or ‘same’\n)\n\n# 平均池化\ntf.keras.layers.AveragePooling2D(\n\tpool_size= 池化核尺寸,\n\tstrides= 池化步长, # 默认为pool_size\n\tpadding=‘valid’or‘same’\n)\n```\n\n\n\n### Dropout\n\n```\ntf.keras.layers.Dropout(舍弃概率)\n```\n\n\n\n### VGG","slug":"AI相关/TensorFlow2/TF2实现经典CNN架构","published":1,"updated":"2021-01-11T04:42:49.622Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9v001qrwjs5hj4hmnr","content":"<h2 id=\"卷积神经网络经典操作\"><a href=\"#卷积神经网络经典操作\" class=\"headerlink\" title=\"卷积神经网络经典操作\"></a>卷积神经网络经典操作</h2><h3 id=\"卷积操作\"><a href=\"#卷积操作\" class=\"headerlink\" title=\"卷积操作\"></a>卷积操作</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">tf.keras.layers.Conv2D (<br>\t<span class=\"hljs-attr\">filters</span> = 卷积核个数,<br>\t<span class=\"hljs-attr\">kernel_size</span> = 卷积核尺寸, <span class=\"hljs-comment\"># 正方形写核长整数，或（核高h，核宽w）</span><br>\t<span class=\"hljs-attr\">strides</span> = 滑动步长, <span class=\"hljs-comment\"># 横纵向相同写步长整数，或(纵向步长h，横向步长w)，默认1</span><br>\t<span class=\"hljs-attr\">padding</span> = “same” <span class=\"hljs-literal\">or</span> “valid”, <span class=\"hljs-comment\"># same表示全零填充，valid为默认值</span><br>\t<span class=\"hljs-attr\">activation</span> = <span class=\"hljs-string\">\"relu\"</span> <span class=\"hljs-comment\"># 激活函数，如有BN，此处不写</span><br>\t<span class=\"hljs-attr\">input_shape</span> = (高, 宽 , 通道数) <span class=\"hljs-comment\"># 输入特征图维度，可省略</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"批标准化（Batch-Normalization，BN）\"><a href=\"#批标准化（Batch-Normalization，BN）\" class=\"headerlink\" title=\"批标准化（Batch Normalization，BN）\"></a>批标准化（Batch Normalization，BN）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.BatchNormalization</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"激活函数（使用BN的情况下才要）\"><a href=\"#激活函数（使用BN的情况下才要）\" class=\"headerlink\" title=\"激活函数（使用BN的情况下才要）\"></a>激活函数（使用BN的情况下才要）</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">Activation</span><span class=\"hljs-params\">(对应激活函数)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"池化（Pooling）\"><a href=\"#池化（Pooling）\" class=\"headerlink\" title=\"池化（Pooling）\"></a>池化（Pooling）</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># 最大池化</span><br>tf.keras.layers.MaxPool2D(<br>\t<span class=\"hljs-attr\">pool_size=</span> 池化核尺寸,<br>\t<span class=\"hljs-attr\">strides=</span> 池化步长, <span class=\"hljs-comment\"># 默认为pool_size</span><br>\t<span class=\"hljs-attr\">padding=‘valid’</span> <span class=\"hljs-literal\">or</span> ‘same’<br>)<br><br><span class=\"hljs-comment\"># 平均池化</span><br>tf.keras.layers.AveragePooling2D(<br>\t<span class=\"hljs-attr\">pool_size=</span> 池化核尺寸,<br>\t<span class=\"hljs-attr\">strides=</span> 池化步长, <span class=\"hljs-comment\"># 默认为pool_size</span><br>\t<span class=\"hljs-attr\">padding=‘valid’or‘same’</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Dropout\"><a href=\"#Dropout\" class=\"headerlink\" title=\"Dropout\"></a>Dropout</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.Dropout</span>(舍弃概率)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"卷积神经网络经典操作\"><a href=\"#卷积神经网络经典操作\" class=\"headerlink\" title=\"卷积神经网络经典操作\"></a>卷积神经网络经典操作</h2><h3 id=\"卷积操作\"><a href=\"#卷积操作\" class=\"headerlink\" title=\"卷积操作\"></a>卷积操作</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">tf.keras.layers.Conv2D (<br>\t<span class=\"hljs-attr\">filters</span> = 卷积核个数,<br>\t<span class=\"hljs-attr\">kernel_size</span> = 卷积核尺寸, <span class=\"hljs-comment\"># 正方形写核长整数，或（核高h，核宽w）</span><br>\t<span class=\"hljs-attr\">strides</span> = 滑动步长, <span class=\"hljs-comment\"># 横纵向相同写步长整数，或(纵向步长h，横向步长w)，默认1</span><br>\t<span class=\"hljs-attr\">padding</span> = “same” <span class=\"hljs-literal\">or</span> “valid”, <span class=\"hljs-comment\"># same表示全零填充，valid为默认值</span><br>\t<span class=\"hljs-attr\">activation</span> = <span class=\"hljs-string\">\"relu\"</span> <span class=\"hljs-comment\"># 激活函数，如有BN，此处不写</span><br>\t<span class=\"hljs-attr\">input_shape</span> = (高, 宽 , 通道数) <span class=\"hljs-comment\"># 输入特征图维度，可省略</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"批标准化（Batch-Normalization，BN）\"><a href=\"#批标准化（Batch-Normalization，BN）\" class=\"headerlink\" title=\"批标准化（Batch Normalization，BN）\"></a>批标准化（Batch Normalization，BN）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.BatchNormalization</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"激活函数（使用BN的情况下才要）\"><a href=\"#激活函数（使用BN的情况下才要）\" class=\"headerlink\" title=\"激活函数（使用BN的情况下才要）\"></a>激活函数（使用BN的情况下才要）</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">Activation</span><span class=\"hljs-params\">(对应激活函数)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"池化（Pooling）\"><a href=\"#池化（Pooling）\" class=\"headerlink\" title=\"池化（Pooling）\"></a>池化（Pooling）</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># 最大池化</span><br>tf.keras.layers.MaxPool2D(<br>\t<span class=\"hljs-attr\">pool_size=</span> 池化核尺寸,<br>\t<span class=\"hljs-attr\">strides=</span> 池化步长, <span class=\"hljs-comment\"># 默认为pool_size</span><br>\t<span class=\"hljs-attr\">padding=‘valid’</span> <span class=\"hljs-literal\">or</span> ‘same’<br>)<br><br><span class=\"hljs-comment\"># 平均池化</span><br>tf.keras.layers.AveragePooling2D(<br>\t<span class=\"hljs-attr\">pool_size=</span> 池化核尺寸,<br>\t<span class=\"hljs-attr\">strides=</span> 池化步长, <span class=\"hljs-comment\"># 默认为pool_size</span><br>\t<span class=\"hljs-attr\">padding=‘valid’or‘same’</span><br>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Dropout\"><a href=\"#Dropout\" class=\"headerlink\" title=\"Dropout\"></a>Dropout</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.Dropout</span>(舍弃概率)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"VGG\"><a href=\"#VGG\" class=\"headerlink\" title=\"VGG\"></a>VGG</h3>"},{"title":"使用TF2创建数据集","date":"2020-08-25T08:31:59.000Z","fileName":"tf2-create-dataset","_content":"\n### 使用数据集\n\n本例中使用的数据集分布在图片文件夹中，一个文件夹含有一类图片。数据集存储格式如下\n\n```\nflower_photo/\n  daisy/\n  dandelion/\n  roses/\n  sunflowers/\n  tulips/\n```\n\n\n\n### 下载并查看数据集\n\n#### 获取数据根目录\n\n```\nimport pathlib\ndata_url = 'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'\ndata_root_orig = tf.keras.utils.get_file(origin=data_url,\n                                         fname='flower_photos', \n                                         untar=True)\ndata_root = pathlib.Path(data_root_orig)\t# data_root存储数据的文件夹的根目录\n```\n\n#### 获取所有图片路径并打乱\n\n```python\nall_image_paths = list(data_root.glob('*/*.jpg'))\t## 获取所有图片路径\nall_image_paths = [str(path) for path in all_image_paths]\t# 转化为str\nrandom.shuffle(all_image_paths)\t# 打乱\nimage_count = len(all_image_paths)\t# 获取图片个数：3670\n\nprint(all_image_paths[99])\t# 打印第100张图的路径\n# C:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\tulips\\5704726114_a92f753514.jpg\n```\n\n#### 获取图片标签信息\n\n```python\nlabel_names = sorted(item.name for item in data_root.glob('*/') if item.is_dir())\t# 根据文件夹名获取标签名\nlabel_to_index = dict((name, index) for index, name in enumerate(label_names))\t# 从0开始给标签设置索引\nall_image_labels = [label_to_index[pathlib.Path(path).parent.name]\n                    for path in all_image_paths]\t# 将每张图片与标签一一对应\n\nprint(label_names)\t# ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']\nprint(label_to_index)\t# {'daisy': 0, 'dandelion': 1, 'roses': 2, 'sunflowers': 3, 'tulips': 4}\nprint(all_image_labels[99])\t# 打印第100张图的标签：4\n```\n\n由此可见，已经完成了图片与标签一一对应的关系\n\n#### 可视化图片与标签\n\n```\nimport matplotlib.pyplot as plt\nfor i in range(200, 209):\n    plt.subplot(3, 3, i-199)\n    img = plt.imread(all_image_paths[i])\n    plt.imshow(img)\n    plt.xlabel(label_names[all_image_labels[i]])\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%89%87%E4%B8%8E%E6%A0%87%E7%AD%BE.png)\n\n\n\n### 加载和格式化图片\n\n```python\ndef load_and_preprocess_image(path):\n\t\"\"\" 输入为图片路径列表，输出为图片处理后的列表 \"\"\"\n    images = []\n    for i in range(len(path)):\n        url = path[i]\n        image = tf.io.read_file(url)\n        image = tf.image.decode_jpeg(image, channels=3)\n        image = tf.image.resize(image, [192, 192])\n        image = image / 255.0\n        images.append(image)\n    return images\n```\n\n![处理后数据可视化](http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%A4%84%E7%90%86%E5%90%8E%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA.png)\n\n\n\n### 构建数据集\n\n#### tf.data.Dataset的基本使用\n\ntf.data.Dataset是TF2中专门用于数据输入的接口，可以高效的实现数据的读入、打乱（shuffle）、增强（augment）等功能，以下示例简单介绍该接口使用方法\n\n```\ndata = np.array([0.1, 0.2, 0.4, 0.05])\nlabel = np.array([0, 1, 1, 0])\ndataset = tf.data.Dataset.from_tensor_slices((data, label))\t# 组合为数据集\n\n# 遍历打印\n# tf.Tensor(0.1, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n# tf.Tensor(0.2, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(0.4, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(0.05, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n\ndataset = dataset.shuffle(buffer_size=image_count)\t# 打乱数据\ndataset = dataset.repeat()\t# 使数据能够重复使用\ndataset = dataset.batch(batch_size=32)\t# 每一个batch为32\n\n# 设置batch后遍历打印\n# tf.Tensor([0.1 0.2], shape=(2,), dtype=float64) tf.Tensor([0 1], shape=(2,), dtype=int32)\n# tf.Tensor([0.4  0.05], shape=(2,), dtype=float64) tf.Tensor([1 0], shape=(2,), dtype=int32)\n```\n\n**使用map函数**\n\n```\ndef func(data, label):\n    data = data * 100\n    return data, label\n\ndataset = dataset.map(func)\n\n# tf.Tensor(10.0, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n# tf.Tensor(20.0, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(40.0, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(5.0, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n```\n\n**处理data的map函数的通用格式：**\n\n```\ndef func(data, label):\n\t# 对data进行处理\n\treturn data, label\n```\n\n\n\n### 本次构建数据集\n\n```\ndataset = tf.data.Dataset.from_tensor_slices((load_and_preprocess_image(all_image_paths), all_image_labels))\ndataset = dataset.shuffle(buffer_size=image_count)\ndataset = dataset.repeat()\ndataset = dataset.batch(batch_size=32)\n```\n\n\n\n### 进行训练\n\n之后按照通用的构建网络的模板进行训练即可（构建网络的过程略）\n\n```\nhistory = model.fit(dataset, epochs=10, steps_per_epoch=115)\n```\n\n\n\n### 参考链接\n\nhttps://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn","source":"_posts/AI相关/TensorFlow2/使用TF2创建数据集.md","raw":"---\ntitle: 使用TF2创建数据集\ndate: 2020-08-25 16:31:59\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: tf2-create-dataset\n---\n\n### 使用数据集\n\n本例中使用的数据集分布在图片文件夹中，一个文件夹含有一类图片。数据集存储格式如下\n\n```\nflower_photo/\n  daisy/\n  dandelion/\n  roses/\n  sunflowers/\n  tulips/\n```\n\n\n\n### 下载并查看数据集\n\n#### 获取数据根目录\n\n```\nimport pathlib\ndata_url = 'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'\ndata_root_orig = tf.keras.utils.get_file(origin=data_url,\n                                         fname='flower_photos', \n                                         untar=True)\ndata_root = pathlib.Path(data_root_orig)\t# data_root存储数据的文件夹的根目录\n```\n\n#### 获取所有图片路径并打乱\n\n```python\nall_image_paths = list(data_root.glob('*/*.jpg'))\t## 获取所有图片路径\nall_image_paths = [str(path) for path in all_image_paths]\t# 转化为str\nrandom.shuffle(all_image_paths)\t# 打乱\nimage_count = len(all_image_paths)\t# 获取图片个数：3670\n\nprint(all_image_paths[99])\t# 打印第100张图的路径\n# C:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\tulips\\5704726114_a92f753514.jpg\n```\n\n#### 获取图片标签信息\n\n```python\nlabel_names = sorted(item.name for item in data_root.glob('*/') if item.is_dir())\t# 根据文件夹名获取标签名\nlabel_to_index = dict((name, index) for index, name in enumerate(label_names))\t# 从0开始给标签设置索引\nall_image_labels = [label_to_index[pathlib.Path(path).parent.name]\n                    for path in all_image_paths]\t# 将每张图片与标签一一对应\n\nprint(label_names)\t# ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']\nprint(label_to_index)\t# {'daisy': 0, 'dandelion': 1, 'roses': 2, 'sunflowers': 3, 'tulips': 4}\nprint(all_image_labels[99])\t# 打印第100张图的标签：4\n```\n\n由此可见，已经完成了图片与标签一一对应的关系\n\n#### 可视化图片与标签\n\n```\nimport matplotlib.pyplot as plt\nfor i in range(200, 209):\n    plt.subplot(3, 3, i-199)\n    img = plt.imread(all_image_paths[i])\n    plt.imshow(img)\n    plt.xlabel(label_names[all_image_labels[i]])\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%89%87%E4%B8%8E%E6%A0%87%E7%AD%BE.png)\n\n\n\n### 加载和格式化图片\n\n```python\ndef load_and_preprocess_image(path):\n\t\"\"\" 输入为图片路径列表，输出为图片处理后的列表 \"\"\"\n    images = []\n    for i in range(len(path)):\n        url = path[i]\n        image = tf.io.read_file(url)\n        image = tf.image.decode_jpeg(image, channels=3)\n        image = tf.image.resize(image, [192, 192])\n        image = image / 255.0\n        images.append(image)\n    return images\n```\n\n![处理后数据可视化](http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%A4%84%E7%90%86%E5%90%8E%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA.png)\n\n\n\n### 构建数据集\n\n#### tf.data.Dataset的基本使用\n\ntf.data.Dataset是TF2中专门用于数据输入的接口，可以高效的实现数据的读入、打乱（shuffle）、增强（augment）等功能，以下示例简单介绍该接口使用方法\n\n```\ndata = np.array([0.1, 0.2, 0.4, 0.05])\nlabel = np.array([0, 1, 1, 0])\ndataset = tf.data.Dataset.from_tensor_slices((data, label))\t# 组合为数据集\n\n# 遍历打印\n# tf.Tensor(0.1, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n# tf.Tensor(0.2, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(0.4, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(0.05, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n\ndataset = dataset.shuffle(buffer_size=image_count)\t# 打乱数据\ndataset = dataset.repeat()\t# 使数据能够重复使用\ndataset = dataset.batch(batch_size=32)\t# 每一个batch为32\n\n# 设置batch后遍历打印\n# tf.Tensor([0.1 0.2], shape=(2,), dtype=float64) tf.Tensor([0 1], shape=(2,), dtype=int32)\n# tf.Tensor([0.4  0.05], shape=(2,), dtype=float64) tf.Tensor([1 0], shape=(2,), dtype=int32)\n```\n\n**使用map函数**\n\n```\ndef func(data, label):\n    data = data * 100\n    return data, label\n\ndataset = dataset.map(func)\n\n# tf.Tensor(10.0, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n# tf.Tensor(20.0, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(40.0, shape=(), dtype=float64) tf.Tensor(1, shape=(), dtype=int32)\n# tf.Tensor(5.0, shape=(), dtype=float64) tf.Tensor(0, shape=(), dtype=int32)\n```\n\n**处理data的map函数的通用格式：**\n\n```\ndef func(data, label):\n\t# 对data进行处理\n\treturn data, label\n```\n\n\n\n### 本次构建数据集\n\n```\ndataset = tf.data.Dataset.from_tensor_slices((load_and_preprocess_image(all_image_paths), all_image_labels))\ndataset = dataset.shuffle(buffer_size=image_count)\ndataset = dataset.repeat()\ndataset = dataset.batch(batch_size=32)\n```\n\n\n\n### 进行训练\n\n之后按照通用的构建网络的模板进行训练即可（构建网络的过程略）\n\n```\nhistory = model.fit(dataset, epochs=10, steps_per_epoch=115)\n```\n\n\n\n### 参考链接\n\nhttps://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn","slug":"AI相关/TensorFlow2/使用TF2创建数据集","published":1,"updated":"2021-01-11T04:43:44.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9w001rrwjs3pd8hmaz","content":"<h3 id=\"使用数据集\"><a href=\"#使用数据集\" class=\"headerlink\" title=\"使用数据集\"></a>使用数据集</h3><p>本例中使用的数据集分布在图片文件夹中，一个文件夹含有一类图片。数据集存储格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">flower_photo&#x2F;<br>  daisy&#x2F;<br>  dandelion&#x2F;<br>  roses&#x2F;<br>  sunflowers&#x2F;<br>  tulips&#x2F;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并查看数据集\"><a href=\"#下载并查看数据集\" class=\"headerlink\" title=\"下载并查看数据集\"></a>下载并查看数据集</h3><h4 id=\"获取数据根目录\"><a href=\"#获取数据根目录\" class=\"headerlink\" title=\"获取数据根目录\"></a>获取数据根目录</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import pathlib<br>data_url = <span class=\"hljs-string\">'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'</span><br>data_root_orig = tf.keras.utils.get_file(<span class=\"hljs-attribute\">origin</span>=data_url,<br>                                         <span class=\"hljs-attribute\">fname</span>=<span class=\"hljs-string\">'flower_photos'</span>, <br>                                         <span class=\"hljs-attribute\">untar</span>=<span class=\"hljs-literal\">True</span>)<br>data_root = pathlib.Path(data_root_orig)\t# data_root存储数据的文件夹的根目录<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取所有图片路径并打乱\"><a href=\"#获取所有图片路径并打乱\" class=\"headerlink\" title=\"获取所有图片路径并打乱\"></a>获取所有图片路径并打乱</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">all_image_paths = list(data_root.glob(<span class=\"hljs-string\">'*/*.jpg'</span>))\t<span class=\"hljs-comment\">## 获取所有图片路径</span><br>all_image_paths = [str(path) <span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> all_image_paths]\t<span class=\"hljs-comment\"># 转化为str</span><br>random.shuffle(all_image_paths)\t<span class=\"hljs-comment\"># 打乱</span><br>image_count = len(all_image_paths)\t<span class=\"hljs-comment\"># 获取图片个数：3670</span><br><br>print(all_image_paths[<span class=\"hljs-number\">99</span>])\t<span class=\"hljs-comment\"># 打印第100张图的路径</span><br><span class=\"hljs-comment\"># C:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\tulips\\5704726114_a92f753514.jpg</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取图片标签信息\"><a href=\"#获取图片标签信息\" class=\"headerlink\" title=\"获取图片标签信息\"></a>获取图片标签信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">label_names = sorted(item.name <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data_root.glob(<span class=\"hljs-string\">'*/'</span>) <span class=\"hljs-keyword\">if</span> item.is_dir())\t<span class=\"hljs-comment\"># 根据文件夹名获取标签名</span><br>label_to_index = dict((name, index) <span class=\"hljs-keyword\">for</span> index, name <span class=\"hljs-keyword\">in</span> enumerate(label_names))\t<span class=\"hljs-comment\"># 从0开始给标签设置索引</span><br>all_image_labels = [label_to_index[pathlib.Path(path).parent.name]<br>                    <span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> all_image_paths]\t<span class=\"hljs-comment\"># 将每张图片与标签一一对应</span><br><br>print(label_names)\t<span class=\"hljs-comment\"># ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']</span><br>print(label_to_index)\t<span class=\"hljs-comment\"># &#123;'daisy': 0, 'dandelion': 1, 'roses': 2, 'sunflowers': 3, 'tulips': 4&#125;</span><br>print(all_image_labels[<span class=\"hljs-number\">99</span>])\t<span class=\"hljs-comment\"># 打印第100张图的标签：4</span><br></code></pre></td></tr></table></figure>\n\n<p>由此可见，已经完成了图片与标签一一对应的关系</p>\n<h4 id=\"可视化图片与标签\"><a href=\"#可视化图片与标签\" class=\"headerlink\" title=\"可视化图片与标签\"></a>可视化图片与标签</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">209</span>):<br>    plt.subplot(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, i<span class=\"hljs-number\">-199</span>)<br>    img = plt.imread(all_image_paths[i])<br>    plt.imshow(img)<br>    plt.xlabel(label_names[all_image_labels[i]])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%89%87%E4%B8%8E%E6%A0%87%E7%AD%BE.png\" alt=\"\"></p>\n<h3 id=\"加载和格式化图片\"><a href=\"#加载和格式化图片\" class=\"headerlink\" title=\"加载和格式化图片\"></a>加载和格式化图片</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">load_and_preprocess_image</span><span class=\"hljs-params\">(path)</span>:</span><br>\t<span class=\"hljs-string\">\"\"\" 输入为图片路径列表，输出为图片处理后的列表 \"\"\"</span><br>    images = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(path)):<br>        url = path[i]<br>        image = tf.io.read_file(url)<br>        image = tf.image.decode_jpeg(image, channels=<span class=\"hljs-number\">3</span>)<br>        image = tf.image.resize(image, [<span class=\"hljs-number\">192</span>, <span class=\"hljs-number\">192</span>])<br>        image = image / <span class=\"hljs-number\">255.0</span><br>        images.append(image)<br>    <span class=\"hljs-keyword\">return</span> images<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%A4%84%E7%90%86%E5%90%8E%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA.png\" alt=\"处理后数据可视化\"></p>\n<h3 id=\"构建数据集\"><a href=\"#构建数据集\" class=\"headerlink\" title=\"构建数据集\"></a>构建数据集</h3><h4 id=\"tf-data-Dataset的基本使用\"><a href=\"#tf-data-Dataset的基本使用\" class=\"headerlink\" title=\"tf.data.Dataset的基本使用\"></a>tf.data.Dataset的基本使用</h4><p>tf.data.Dataset是TF2中专门用于数据输入的接口，可以高效的实现数据的读入、打乱（shuffle）、增强（augment）等功能，以下示例简单介绍该接口使用方法</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">data = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.4</span>, <span class=\"hljs-number\">0.05</span>])<br>label = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>])<br>dataset = tf.data.Dataset.from_tensor_slices((data, label))\t# 组合为数据集<br><br># 遍历打印<br># tf.Tensor(<span class=\"hljs-number\">0.1</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">0</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.2</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">1</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.4</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">1</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.05</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">0</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br><br>dataset = dataset.shuffle(buffer_size=image_count)\t# 打乱数据<br>dataset = dataset.repeat()\t# 使数据能够重复使用<br>dataset = dataset.batch(batch_size=<span class=\"hljs-number\">32</span>)\t# 每一个batch为<span class=\"hljs-number\">32</span><br><br># 设置batch后遍历打印<br># tf.Tensor([<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">0.2</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor([<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor([<span class=\"hljs-number\">0.4</span>  <span class=\"hljs-number\">0.05</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor([<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">int</span>32)<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用map函数</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">def func(data, label):<br>    data = data<span class=\"hljs-operator\"> * </span><span class=\"hljs-number\">100</span><br>    return data, label<br><br>dataset = dataset.map(func)<br><br># tf.<span class=\"hljs-constructor\">Tensor(10.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(20.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(1, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(40.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(1, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(5.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>处理data的map函数的通用格式：</strong></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">def</span> func(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>, label):</span><br>\t# 对<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>进行处理</span><br>\treturn <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>, label</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"本次构建数据集\"><a href=\"#本次构建数据集\" class=\"headerlink\" title=\"本次构建数据集\"></a>本次构建数据集</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">dataset</span> = tf.data.Dataset.from_tensor_slices((load_and_preprocess_image(all_image_paths), all_image_labels))<br><span class=\"hljs-attr\">dataset</span> = dataset.shuffle(buffer_size=image_count)<br><span class=\"hljs-attr\">dataset</span> = dataset.repeat()<br><span class=\"hljs-attr\">dataset</span> = dataset.batch(batch_size=<span class=\"hljs-number\">32</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进行训练\"><a href=\"#进行训练\" class=\"headerlink\" title=\"进行训练\"></a>进行训练</h3><p>之后按照通用的构建网络的模板进行训练即可（构建网络的过程略）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">history = model.fit(dataset, <span class=\"hljs-attribute\">epochs</span>=10, <span class=\"hljs-attribute\">steps_per_epoch</span>=115)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用数据集\"><a href=\"#使用数据集\" class=\"headerlink\" title=\"使用数据集\"></a>使用数据集</h3><p>本例中使用的数据集分布在图片文件夹中，一个文件夹含有一类图片。数据集存储格式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\">flower_photo&#x2F;<br>  daisy&#x2F;<br>  dandelion&#x2F;<br>  roses&#x2F;<br>  sunflowers&#x2F;<br>  tulips&#x2F;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载并查看数据集\"><a href=\"#下载并查看数据集\" class=\"headerlink\" title=\"下载并查看数据集\"></a>下载并查看数据集</h3><h4 id=\"获取数据根目录\"><a href=\"#获取数据根目录\" class=\"headerlink\" title=\"获取数据根目录\"></a>获取数据根目录</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import pathlib<br>data_url = <span class=\"hljs-string\">'https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz'</span><br>data_root_orig = tf.keras.utils.get_file(<span class=\"hljs-attribute\">origin</span>=data_url,<br>                                         <span class=\"hljs-attribute\">fname</span>=<span class=\"hljs-string\">'flower_photos'</span>, <br>                                         <span class=\"hljs-attribute\">untar</span>=<span class=\"hljs-literal\">True</span>)<br>data_root = pathlib.Path(data_root_orig)\t# data_root存储数据的文件夹的根目录<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取所有图片路径并打乱\"><a href=\"#获取所有图片路径并打乱\" class=\"headerlink\" title=\"获取所有图片路径并打乱\"></a>获取所有图片路径并打乱</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">all_image_paths = list(data_root.glob(<span class=\"hljs-string\">'*/*.jpg'</span>))\t<span class=\"hljs-comment\">## 获取所有图片路径</span><br>all_image_paths = [str(path) <span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> all_image_paths]\t<span class=\"hljs-comment\"># 转化为str</span><br>random.shuffle(all_image_paths)\t<span class=\"hljs-comment\"># 打乱</span><br>image_count = len(all_image_paths)\t<span class=\"hljs-comment\"># 获取图片个数：3670</span><br><br>print(all_image_paths[<span class=\"hljs-number\">99</span>])\t<span class=\"hljs-comment\"># 打印第100张图的路径</span><br><span class=\"hljs-comment\"># C:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\tulips\\5704726114_a92f753514.jpg</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取图片标签信息\"><a href=\"#获取图片标签信息\" class=\"headerlink\" title=\"获取图片标签信息\"></a>获取图片标签信息</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">label_names = sorted(item.name <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> data_root.glob(<span class=\"hljs-string\">'*/'</span>) <span class=\"hljs-keyword\">if</span> item.is_dir())\t<span class=\"hljs-comment\"># 根据文件夹名获取标签名</span><br>label_to_index = dict((name, index) <span class=\"hljs-keyword\">for</span> index, name <span class=\"hljs-keyword\">in</span> enumerate(label_names))\t<span class=\"hljs-comment\"># 从0开始给标签设置索引</span><br>all_image_labels = [label_to_index[pathlib.Path(path).parent.name]<br>                    <span class=\"hljs-keyword\">for</span> path <span class=\"hljs-keyword\">in</span> all_image_paths]\t<span class=\"hljs-comment\"># 将每张图片与标签一一对应</span><br><br>print(label_names)\t<span class=\"hljs-comment\"># ['daisy', 'dandelion', 'roses', 'sunflowers', 'tulips']</span><br>print(label_to_index)\t<span class=\"hljs-comment\"># &#123;'daisy': 0, 'dandelion': 1, 'roses': 2, 'sunflowers': 3, 'tulips': 4&#125;</span><br>print(all_image_labels[<span class=\"hljs-number\">99</span>])\t<span class=\"hljs-comment\"># 打印第100张图的标签：4</span><br></code></pre></td></tr></table></figure>\n\n<p>由此可见，已经完成了图片与标签一一对应的关系</p>\n<h4 id=\"可视化图片与标签\"><a href=\"#可视化图片与标签\" class=\"headerlink\" title=\"可视化图片与标签\"></a>可视化图片与标签</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">209</span>):<br>    plt.subplot(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, i<span class=\"hljs-number\">-199</span>)<br>    img = plt.imread(all_image_paths[i])<br>    plt.imshow(img)<br>    plt.xlabel(label_names[all_image_labels[i]])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%9B%BE%E7%89%87%E4%B8%8E%E6%A0%87%E7%AD%BE.png\" alt=\"\"></p>\n<h3 id=\"加载和格式化图片\"><a href=\"#加载和格式化图片\" class=\"headerlink\" title=\"加载和格式化图片\"></a>加载和格式化图片</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">load_and_preprocess_image</span><span class=\"hljs-params\">(path)</span>:</span><br>\t<span class=\"hljs-string\">\"\"\" 输入为图片路径列表，输出为图片处理后的列表 \"\"\"</span><br>    images = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(path)):<br>        url = path[i]<br>        image = tf.io.read_file(url)<br>        image = tf.image.decode_jpeg(image, channels=<span class=\"hljs-number\">3</span>)<br>        image = tf.image.resize(image, [<span class=\"hljs-number\">192</span>, <span class=\"hljs-number\">192</span>])<br>        image = image / <span class=\"hljs-number\">255.0</span><br>        images.append(image)<br>    <span class=\"hljs-keyword\">return</span> images<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8TF2%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/%E5%A4%84%E7%90%86%E5%90%8E%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA.png\" alt=\"处理后数据可视化\"></p>\n<h3 id=\"构建数据集\"><a href=\"#构建数据集\" class=\"headerlink\" title=\"构建数据集\"></a>构建数据集</h3><h4 id=\"tf-data-Dataset的基本使用\"><a href=\"#tf-data-Dataset的基本使用\" class=\"headerlink\" title=\"tf.data.Dataset的基本使用\"></a>tf.data.Dataset的基本使用</h4><p>tf.data.Dataset是TF2中专门用于数据输入的接口，可以高效的实现数据的读入、打乱（shuffle）、增强（augment）等功能，以下示例简单介绍该接口使用方法</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">data = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0.1</span>, <span class=\"hljs-number\">0.2</span>, <span class=\"hljs-number\">0.4</span>, <span class=\"hljs-number\">0.05</span>])<br>label = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>])<br>dataset = tf.data.Dataset.from_tensor_slices((data, label))\t# 组合为数据集<br><br># 遍历打印<br># tf.Tensor(<span class=\"hljs-number\">0.1</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">0</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.2</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">1</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.4</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">1</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor(<span class=\"hljs-number\">0.05</span>, shape=(), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor(<span class=\"hljs-number\">0</span>, shape=(), dtype=<span class=\"hljs-built_in\">int</span>32)<br><br>dataset = dataset.shuffle(buffer_size=image_count)\t# 打乱数据<br>dataset = dataset.repeat()\t# 使数据能够重复使用<br>dataset = dataset.batch(batch_size=<span class=\"hljs-number\">32</span>)\t# 每一个batch为<span class=\"hljs-number\">32</span><br><br># 设置batch后遍历打印<br># tf.Tensor([<span class=\"hljs-number\">0.1</span> <span class=\"hljs-number\">0.2</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor([<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">int</span>32)<br># tf.Tensor([<span class=\"hljs-number\">0.4</span>  <span class=\"hljs-number\">0.05</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">float</span>64) tf.Tensor([<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>], shape=(<span class=\"hljs-number\">2</span>,), dtype=<span class=\"hljs-built_in\">int</span>32)<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用map函数</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">def func(data, label):<br>    data = data<span class=\"hljs-operator\"> * </span><span class=\"hljs-number\">100</span><br>    return data, label<br><br>dataset = dataset.map(func)<br><br># tf.<span class=\"hljs-constructor\">Tensor(10.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(20.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(1, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(40.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(1, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br># tf.<span class=\"hljs-constructor\">Tensor(5.0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=float64) tf.<span class=\"hljs-constructor\">Tensor(0, <span class=\"hljs-params\">shape</span>=()</span>, dtype=<span class=\"hljs-built_in\">int32</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>处理data的map函数的通用格式：</strong></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-title\">def</span> func(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>, label):</span><br>\t# 对<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>进行处理</span><br>\treturn <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>, label</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"本次构建数据集\"><a href=\"#本次构建数据集\" class=\"headerlink\" title=\"本次构建数据集\"></a>本次构建数据集</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">dataset</span> = tf.data.Dataset.from_tensor_slices((load_and_preprocess_image(all_image_paths), all_image_labels))<br><span class=\"hljs-attr\">dataset</span> = dataset.shuffle(buffer_size=image_count)<br><span class=\"hljs-attr\">dataset</span> = dataset.repeat()<br><span class=\"hljs-attr\">dataset</span> = dataset.batch(batch_size=<span class=\"hljs-number\">32</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"进行训练\"><a href=\"#进行训练\" class=\"headerlink\" title=\"进行训练\"></a>进行训练</h3><p>之后按照通用的构建网络的模板进行训练即可（构建网络的过程略）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">history = model.fit(dataset, <span class=\"hljs-attribute\">epochs</span>=10, <span class=\"hljs-attribute\">steps_per_epoch</span>=115)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn\" target=\"_blank\" rel=\"noopener\">https://www.tensorflow.org/tutorials/load_data/images?hl=zh-cn</a></p>\n"},{"title":"TF2的基础函数","date":"2020-08-07T02:22:41.000Z","fileName":"TF2-basic-function","_content":"\n\n\n### 张量生成\n\n#### 直接创建\n\n```\ntf.constant(张量内容, dtype=数据类型<可选>)\n```\n\n#### 创建全为0的张量\n\n```\ntf.zeros(维度)\n```\n\n\n\n#### 创建全为1的张量\n\n```\ntf.ones(维度)\n```\n\n#### 创建全为指定值的张量\n\n```\ntf.fill(维度, 指定值)\n```\n\n\n\n#### 将numpy数据转化为Tensor数据\n\n```\ntf.convert_to_tensor(数据名, dtype=数据类型<可选>)\n```\n\n\n\n#### 生成正态分布的随机数，默认均值为0，标准差为1\n\n```\ntf.random.normal(维度, mean=均值, stddev=标准差)\n```\n\n\n\n#### 生成截断式正态分布随机数\n\n```\ntf.random.truncated_normal(维度, mean=均值, stddev=标准差)\n```\n\n#### 生成均匀分布随机数（[minval, maxval)）\n\n```\ntf.random.uniform(维度, minval=0, maxval=1)\n```\n\n\n\n### 常用函数\n\n#### 将输入特征与标签配对（常用于构建数据集）\n\n```\ntf.data.Dataset.from_tensor_slices( (输入特征, 标签) )\n```\n\n\n\n#### 强制tensor转换为该数据类型\n\n```\ntf.cast(张量名, dtype=数据类型)\n```\n\n\n\n#### 将变量标记为“可训练”\n\n使用该方法标记的变量会在反向传播中记录梯度信息\n\n```\ntf.Variable(初始值)\n```\n\n\n\n\n\n#### 某个函数对指定参数的求导运算\n\nwith 结构记录计算过程，gradient求出张量的梯度\n\n```\nwith tf.GradientTape() as tape:\n    若干个计算过程\ngrad = tape.gradient(函数, 对谁求导)\n```\n\n\n\n#### 自减函数（常用于更新参数的值）\n\n需要先用`tf.Variable(w) `定义w为可训练\n\n```\nw.assign_sub(w要自减的内容)\n```\n\n\n\n#### 独热编码\n\n分类问题中，常用独热码做标签标记类别，1表示是，2表示非\n\n```\ntf.one_hot(带转换数据, depth=几分类)\n```\n\n> one-hot编码，把正整数变为向量表达（生成一个不小于正整数的向量，只有正整数的位置为1，其余位置为0）\n>\n> 三分类：2 -> one-hot -> [0, 0, 1]\n\n\n\n#### softmax：使数值变为0-1之间的概率分布\n\n```\ntf.nn.softmax(张量名)\n```\n\n\n\n#### argmax：返回张量沿指定维度最大值的索引\n\n```\ntf.argmax(张量名, axis=操作轴)\n```\n\n\n\n\n\n\n\n### 张量数值统计\n\n#### 计算张量元素最小值/最大值\n\n```\ntf.reduce_min()\ntf.reduce_max()\n```\n\n#### 计算张量沿着指定维度的平均值（不指定维度对所有操作）\n\n```\ntf.reduce_mean(张量名, axis=操作轴)\n```\n\n#### 计算张量沿着指定维度的和\n\n```\ntf.reduce_sum(张量名, axis=操作轴)\n```\n\n\n\n### 数学运算\n\n#### 两个张量对应元素相加\n\n```\ntf.add(张量1, 张量2)\n```\n\n#### 相减\n\n```\ntf.subtract()\n```\n\n#### 相乘\n\n```\ntf.multiply\n```\n\n\n\n#### 相除\n\n```\ntf.divide\n```\n\n\n\n#### 计算张量的平方\n\n```\ntf.square(张量名)\n```\n\n#### n次方\n\n```\ntf.pow(张量名, n次方)\n```\n\n#### 开方\n\n```\ntf.sqrt(张量名)\n```\n\n#### 两个矩阵相乘\n\n```\ntf.matmul(矩阵1, 矩阵2)\n```\n","source":"_posts/AI相关/TensorFlow2/TF2的基础函数.md","raw":"---\ntitle: TF2的基础函数\ndate: 2020-08-07 10:22:41\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: TF2-basic-function\n---\n\n\n\n### 张量生成\n\n#### 直接创建\n\n```\ntf.constant(张量内容, dtype=数据类型<可选>)\n```\n\n#### 创建全为0的张量\n\n```\ntf.zeros(维度)\n```\n\n\n\n#### 创建全为1的张量\n\n```\ntf.ones(维度)\n```\n\n#### 创建全为指定值的张量\n\n```\ntf.fill(维度, 指定值)\n```\n\n\n\n#### 将numpy数据转化为Tensor数据\n\n```\ntf.convert_to_tensor(数据名, dtype=数据类型<可选>)\n```\n\n\n\n#### 生成正态分布的随机数，默认均值为0，标准差为1\n\n```\ntf.random.normal(维度, mean=均值, stddev=标准差)\n```\n\n\n\n#### 生成截断式正态分布随机数\n\n```\ntf.random.truncated_normal(维度, mean=均值, stddev=标准差)\n```\n\n#### 生成均匀分布随机数（[minval, maxval)）\n\n```\ntf.random.uniform(维度, minval=0, maxval=1)\n```\n\n\n\n### 常用函数\n\n#### 将输入特征与标签配对（常用于构建数据集）\n\n```\ntf.data.Dataset.from_tensor_slices( (输入特征, 标签) )\n```\n\n\n\n#### 强制tensor转换为该数据类型\n\n```\ntf.cast(张量名, dtype=数据类型)\n```\n\n\n\n#### 将变量标记为“可训练”\n\n使用该方法标记的变量会在反向传播中记录梯度信息\n\n```\ntf.Variable(初始值)\n```\n\n\n\n\n\n#### 某个函数对指定参数的求导运算\n\nwith 结构记录计算过程，gradient求出张量的梯度\n\n```\nwith tf.GradientTape() as tape:\n    若干个计算过程\ngrad = tape.gradient(函数, 对谁求导)\n```\n\n\n\n#### 自减函数（常用于更新参数的值）\n\n需要先用`tf.Variable(w) `定义w为可训练\n\n```\nw.assign_sub(w要自减的内容)\n```\n\n\n\n#### 独热编码\n\n分类问题中，常用独热码做标签标记类别，1表示是，2表示非\n\n```\ntf.one_hot(带转换数据, depth=几分类)\n```\n\n> one-hot编码，把正整数变为向量表达（生成一个不小于正整数的向量，只有正整数的位置为1，其余位置为0）\n>\n> 三分类：2 -> one-hot -> [0, 0, 1]\n\n\n\n#### softmax：使数值变为0-1之间的概率分布\n\n```\ntf.nn.softmax(张量名)\n```\n\n\n\n#### argmax：返回张量沿指定维度最大值的索引\n\n```\ntf.argmax(张量名, axis=操作轴)\n```\n\n\n\n\n\n\n\n### 张量数值统计\n\n#### 计算张量元素最小值/最大值\n\n```\ntf.reduce_min()\ntf.reduce_max()\n```\n\n#### 计算张量沿着指定维度的平均值（不指定维度对所有操作）\n\n```\ntf.reduce_mean(张量名, axis=操作轴)\n```\n\n#### 计算张量沿着指定维度的和\n\n```\ntf.reduce_sum(张量名, axis=操作轴)\n```\n\n\n\n### 数学运算\n\n#### 两个张量对应元素相加\n\n```\ntf.add(张量1, 张量2)\n```\n\n#### 相减\n\n```\ntf.subtract()\n```\n\n#### 相乘\n\n```\ntf.multiply\n```\n\n\n\n#### 相除\n\n```\ntf.divide\n```\n\n\n\n#### 计算张量的平方\n\n```\ntf.square(张量名)\n```\n\n#### n次方\n\n```\ntf.pow(张量名, n次方)\n```\n\n#### 开方\n\n```\ntf.sqrt(张量名)\n```\n\n#### 两个矩阵相乘\n\n```\ntf.matmul(矩阵1, 矩阵2)\n```\n","slug":"AI相关/TensorFlow2/TF2的基础函数","published":1,"updated":"2021-01-11T04:42:36.993Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9x001srwjsed3q5zqu","content":"<h3 id=\"张量生成\"><a href=\"#张量生成\" class=\"headerlink\" title=\"张量生成\"></a>张量生成</h3><h4 id=\"直接创建\"><a href=\"#直接创建\" class=\"headerlink\" title=\"直接创建\"></a>直接创建</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.constant(张量内容, d<span class=\"hljs-keyword\">type</span>=数据类型&lt;可选&gt;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建全为0的张量\"><a href=\"#创建全为0的张量\" class=\"headerlink\" title=\"创建全为0的张量\"></a>创建全为0的张量</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.zeros</span>(维度)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建全为1的张量\"><a href=\"#创建全为1的张量\" class=\"headerlink\" title=\"创建全为1的张量\"></a>创建全为1的张量</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.ones</span>(维度)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建全为指定值的张量\"><a href=\"#创建全为指定值的张量\" class=\"headerlink\" title=\"创建全为指定值的张量\"></a>创建全为指定值的张量</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">tf.<span class=\"hljs-built_in\">fill</span>(维度, 指定值)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将numpy数据转化为Tensor数据\"><a href=\"#将numpy数据转化为Tensor数据\" class=\"headerlink\" title=\"将numpy数据转化为Tensor数据\"></a>将numpy数据转化为Tensor数据</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.convert_to_tensor(数据名, d<span class=\"hljs-keyword\">type</span>=数据类型&lt;可选&gt;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"生成正态分布的随机数，默认均值为0，标准差为1\"><a href=\"#生成正态分布的随机数，默认均值为0，标准差为1\" class=\"headerlink\" title=\"生成正态分布的随机数，默认均值为0，标准差为1\"></a>生成正态分布的随机数，默认均值为0，标准差为1</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.normal(维度, <span class=\"hljs-attribute\">mean</span>=均值, <span class=\"hljs-attribute\">stddev</span>=标准差)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"生成截断式正态分布随机数\"><a href=\"#生成截断式正态分布随机数\" class=\"headerlink\" title=\"生成截断式正态分布随机数\"></a>生成截断式正态分布随机数</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.truncated_normal(维度, <span class=\"hljs-attribute\">mean</span>=均值, <span class=\"hljs-attribute\">stddev</span>=标准差)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"生成均匀分布随机数（-minval-maxval-）\"><a href=\"#生成均匀分布随机数（-minval-maxval-）\" class=\"headerlink\" title=\"生成均匀分布随机数（[minval, maxval)）\"></a>生成均匀分布随机数（[minval, maxval)）</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.uniform(维度, <span class=\"hljs-attribute\">minval</span>=0, <span class=\"hljs-attribute\">maxval</span>=1)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><h4 id=\"将输入特征与标签配对（常用于构建数据集）\"><a href=\"#将输入特征与标签配对（常用于构建数据集）\" class=\"headerlink\" title=\"将输入特征与标签配对（常用于构建数据集）\"></a>将输入特征与标签配对（常用于构建数据集）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.Dataset</span><span class=\"hljs-selector-class\">.from_tensor_slices</span>( (输入特征, 标签) )<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"强制tensor转换为该数据类型\"><a href=\"#强制tensor转换为该数据类型\" class=\"headerlink\" title=\"强制tensor转换为该数据类型\"></a>强制tensor转换为该数据类型</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.cast(张量名, d<span class=\"hljs-keyword\">type</span>=数据类型)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将变量标记为“可训练”\"><a href=\"#将变量标记为“可训练”\" class=\"headerlink\" title=\"将变量标记为“可训练”\"></a>将变量标记为“可训练”</h4><p>使用该方法标记的变量会在反向传播中记录梯度信息</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">tf.<span class=\"hljs-keyword\">Variable</span>(初始值)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"某个函数对指定参数的求导运算\"><a href=\"#某个函数对指定参数的求导运算\" class=\"headerlink\" title=\"某个函数对指定参数的求导运算\"></a>某个函数对指定参数的求导运算</h4><p>with 结构记录计算过程，gradient求出张量的梯度</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-constructor\">GradientTape()</span> <span class=\"hljs-keyword\">as</span> tape:<br>    若干个计算过程<br>grad = tape.gradient(函数, 对谁求导)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"自减函数（常用于更新参数的值）\"><a href=\"#自减函数（常用于更新参数的值）\" class=\"headerlink\" title=\"自减函数（常用于更新参数的值）\"></a>自减函数（常用于更新参数的值）</h4><p>需要先用<code>tf.Variable(w)</code>定义w为可训练</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">w.assign<span class=\"hljs-constructor\">_sub(<span class=\"hljs-params\">w</span>要自减的内容)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"独热编码\"><a href=\"#独热编码\" class=\"headerlink\" title=\"独热编码\"></a>独热编码</h4><p>分类问题中，常用独热码做标签标记类别，1表示是，2表示非</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.one<span class=\"hljs-constructor\">_hot(带转换数据, <span class=\"hljs-params\">depth</span>=几分类)</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>one-hot编码，把正整数变为向量表达（生成一个不小于正整数的向量，只有正整数的位置为1，其余位置为0）</p>\n<p>三分类：2 -&gt; one-hot -&gt; [0, 0, 1]</p>\n</blockquote>\n<h4 id=\"softmax：使数值变为0-1之间的概率分布\"><a href=\"#softmax：使数值变为0-1之间的概率分布\" class=\"headerlink\" title=\"softmax：使数值变为0-1之间的概率分布\"></a>softmax：使数值变为0-1之间的概率分布</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.nn</span><span class=\"hljs-selector-class\">.softmax</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"argmax：返回张量沿指定维度最大值的索引\"><a href=\"#argmax：返回张量沿指定维度最大值的索引\" class=\"headerlink\" title=\"argmax：返回张量沿指定维度最大值的索引\"></a>argmax：返回张量沿指定维度最大值的索引</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.argmax(张量名, <span class=\"hljs-attribute\">axis</span>=操作轴)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"张量数值统计\"><a href=\"#张量数值统计\" class=\"headerlink\" title=\"张量数值统计\"></a>张量数值统计</h3><h4 id=\"计算张量元素最小值-最大值\"><a href=\"#计算张量元素最小值-最大值\" class=\"headerlink\" title=\"计算张量元素最小值/最大值\"></a>计算张量元素最小值/最大值</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.reduce_min</span>()<br><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.reduce_max</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算张量沿着指定维度的平均值（不指定维度对所有操作）\"><a href=\"#计算张量沿着指定维度的平均值（不指定维度对所有操作）\" class=\"headerlink\" title=\"计算张量沿着指定维度的平均值（不指定维度对所有操作）\"></a>计算张量沿着指定维度的平均值（不指定维度对所有操作）</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.reduce<span class=\"hljs-constructor\">_mean(张量名, <span class=\"hljs-params\">axis</span>=操作轴)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算张量沿着指定维度的和\"><a href=\"#计算张量沿着指定维度的和\" class=\"headerlink\" title=\"计算张量沿着指定维度的和\"></a>计算张量沿着指定维度的和</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.reduce<span class=\"hljs-constructor\">_sum(张量名, <span class=\"hljs-params\">axis</span>=操作轴)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h3><h4 id=\"两个张量对应元素相加\"><a href=\"#两个张量对应元素相加\" class=\"headerlink\" title=\"两个张量对应元素相加\"></a>两个张量对应元素相加</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">tf.add(张量<span class=\"hljs-number\">1</span>, 张量<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"相减\"><a href=\"#相减\" class=\"headerlink\" title=\"相减\"></a>相减</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.subtract</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"相乘\"><a href=\"#相乘\" class=\"headerlink\" title=\"相乘\"></a>相乘</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.multiply</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"相除\"><a href=\"#相除\" class=\"headerlink\" title=\"相除\"></a>相除</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.divide</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"计算张量的平方\"><a href=\"#计算张量的平方\" class=\"headerlink\" title=\"计算张量的平方\"></a>计算张量的平方</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.square</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"n次方\"><a href=\"#n次方\" class=\"headerlink\" title=\"n次方\"></a>n次方</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">tf</span>.<span class=\"hljs-built_in\">pow</span>(张量名, n次方)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"开方\"><a href=\"#开方\" class=\"headerlink\" title=\"开方\"></a>开方</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">tf</span>.<span class=\"hljs-built_in\">sqrt</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"两个矩阵相乘\"><a href=\"#两个矩阵相乘\" class=\"headerlink\" title=\"两个矩阵相乘\"></a>两个矩阵相乘</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">tf.matmul(矩阵<span class=\"hljs-number\">1</span>, 矩阵<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"张量生成\"><a href=\"#张量生成\" class=\"headerlink\" title=\"张量生成\"></a>张量生成</h3><h4 id=\"直接创建\"><a href=\"#直接创建\" class=\"headerlink\" title=\"直接创建\"></a>直接创建</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.constant(张量内容, d<span class=\"hljs-keyword\">type</span>=数据类型&lt;可选&gt;)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建全为0的张量\"><a href=\"#创建全为0的张量\" class=\"headerlink\" title=\"创建全为0的张量\"></a>创建全为0的张量</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.zeros</span>(维度)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建全为1的张量\"><a href=\"#创建全为1的张量\" class=\"headerlink\" title=\"创建全为1的张量\"></a>创建全为1的张量</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.ones</span>(维度)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建全为指定值的张量\"><a href=\"#创建全为指定值的张量\" class=\"headerlink\" title=\"创建全为指定值的张量\"></a>创建全为指定值的张量</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">tf.<span class=\"hljs-built_in\">fill</span>(维度, 指定值)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将numpy数据转化为Tensor数据\"><a href=\"#将numpy数据转化为Tensor数据\" class=\"headerlink\" title=\"将numpy数据转化为Tensor数据\"></a>将numpy数据转化为Tensor数据</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.convert_to_tensor(数据名, d<span class=\"hljs-keyword\">type</span>=数据类型&lt;可选&gt;)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"生成正态分布的随机数，默认均值为0，标准差为1\"><a href=\"#生成正态分布的随机数，默认均值为0，标准差为1\" class=\"headerlink\" title=\"生成正态分布的随机数，默认均值为0，标准差为1\"></a>生成正态分布的随机数，默认均值为0，标准差为1</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.normal(维度, <span class=\"hljs-attribute\">mean</span>=均值, <span class=\"hljs-attribute\">stddev</span>=标准差)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"生成截断式正态分布随机数\"><a href=\"#生成截断式正态分布随机数\" class=\"headerlink\" title=\"生成截断式正态分布随机数\"></a>生成截断式正态分布随机数</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.truncated_normal(维度, <span class=\"hljs-attribute\">mean</span>=均值, <span class=\"hljs-attribute\">stddev</span>=标准差)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"生成均匀分布随机数（-minval-maxval-）\"><a href=\"#生成均匀分布随机数（-minval-maxval-）\" class=\"headerlink\" title=\"生成均匀分布随机数（[minval, maxval)）\"></a>生成均匀分布随机数（[minval, maxval)）</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.random.uniform(维度, <span class=\"hljs-attribute\">minval</span>=0, <span class=\"hljs-attribute\">maxval</span>=1)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><h4 id=\"将输入特征与标签配对（常用于构建数据集）\"><a href=\"#将输入特征与标签配对（常用于构建数据集）\" class=\"headerlink\" title=\"将输入特征与标签配对（常用于构建数据集）\"></a>将输入特征与标签配对（常用于构建数据集）</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.Dataset</span><span class=\"hljs-selector-class\">.from_tensor_slices</span>( (输入特征, 标签) )<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"强制tensor转换为该数据类型\"><a href=\"#强制tensor转换为该数据类型\" class=\"headerlink\" title=\"强制tensor转换为该数据类型\"></a>强制tensor转换为该数据类型</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">tf</span>.cast(张量名, d<span class=\"hljs-keyword\">type</span>=数据类型)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"将变量标记为“可训练”\"><a href=\"#将变量标记为“可训练”\" class=\"headerlink\" title=\"将变量标记为“可训练”\"></a>将变量标记为“可训练”</h4><p>使用该方法标记的变量会在反向传播中记录梯度信息</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coq\">tf.<span class=\"hljs-keyword\">Variable</span>(初始值)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"某个函数对指定参数的求导运算\"><a href=\"#某个函数对指定参数的求导运算\" class=\"headerlink\" title=\"某个函数对指定参数的求导运算\"></a>某个函数对指定参数的求导运算</h4><p>with 结构记录计算过程，gradient求出张量的梯度</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">with</span> tf.<span class=\"hljs-constructor\">GradientTape()</span> <span class=\"hljs-keyword\">as</span> tape:<br>    若干个计算过程<br>grad = tape.gradient(函数, 对谁求导)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"自减函数（常用于更新参数的值）\"><a href=\"#自减函数（常用于更新参数的值）\" class=\"headerlink\" title=\"自减函数（常用于更新参数的值）\"></a>自减函数（常用于更新参数的值）</h4><p>需要先用<code>tf.Variable(w)</code>定义w为可训练</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">w.assign<span class=\"hljs-constructor\">_sub(<span class=\"hljs-params\">w</span>要自减的内容)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"独热编码\"><a href=\"#独热编码\" class=\"headerlink\" title=\"独热编码\"></a>独热编码</h4><p>分类问题中，常用独热码做标签标记类别，1表示是，2表示非</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.one<span class=\"hljs-constructor\">_hot(带转换数据, <span class=\"hljs-params\">depth</span>=几分类)</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>one-hot编码，把正整数变为向量表达（生成一个不小于正整数的向量，只有正整数的位置为1，其余位置为0）</p>\n<p>三分类：2 -&gt; one-hot -&gt; [0, 0, 1]</p>\n</blockquote>\n<h4 id=\"softmax：使数值变为0-1之间的概率分布\"><a href=\"#softmax：使数值变为0-1之间的概率分布\" class=\"headerlink\" title=\"softmax：使数值变为0-1之间的概率分布\"></a>softmax：使数值变为0-1之间的概率分布</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.nn</span><span class=\"hljs-selector-class\">.softmax</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"argmax：返回张量沿指定维度最大值的索引\"><a href=\"#argmax：返回张量沿指定维度最大值的索引\" class=\"headerlink\" title=\"argmax：返回张量沿指定维度最大值的索引\"></a>argmax：返回张量沿指定维度最大值的索引</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.argmax(张量名, <span class=\"hljs-attribute\">axis</span>=操作轴)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"张量数值统计\"><a href=\"#张量数值统计\" class=\"headerlink\" title=\"张量数值统计\"></a>张量数值统计</h3><h4 id=\"计算张量元素最小值-最大值\"><a href=\"#计算张量元素最小值-最大值\" class=\"headerlink\" title=\"计算张量元素最小值/最大值\"></a>计算张量元素最小值/最大值</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.reduce_min</span>()<br><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.reduce_max</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算张量沿着指定维度的平均值（不指定维度对所有操作）\"><a href=\"#计算张量沿着指定维度的平均值（不指定维度对所有操作）\" class=\"headerlink\" title=\"计算张量沿着指定维度的平均值（不指定维度对所有操作）\"></a>计算张量沿着指定维度的平均值（不指定维度对所有操作）</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.reduce<span class=\"hljs-constructor\">_mean(张量名, <span class=\"hljs-params\">axis</span>=操作轴)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算张量沿着指定维度的和\"><a href=\"#计算张量沿着指定维度的和\" class=\"headerlink\" title=\"计算张量沿着指定维度的和\"></a>计算张量沿着指定维度的和</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.reduce<span class=\"hljs-constructor\">_sum(张量名, <span class=\"hljs-params\">axis</span>=操作轴)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数学运算\"><a href=\"#数学运算\" class=\"headerlink\" title=\"数学运算\"></a>数学运算</h3><h4 id=\"两个张量对应元素相加\"><a href=\"#两个张量对应元素相加\" class=\"headerlink\" title=\"两个张量对应元素相加\"></a>两个张量对应元素相加</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">tf.add(张量<span class=\"hljs-number\">1</span>, 张量<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"相减\"><a href=\"#相减\" class=\"headerlink\" title=\"相减\"></a>相减</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.subtract</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"相乘\"><a href=\"#相乘\" class=\"headerlink\" title=\"相乘\"></a>相乘</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.multiply</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"相除\"><a href=\"#相除\" class=\"headerlink\" title=\"相除\"></a>相除</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.divide</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"计算张量的平方\"><a href=\"#计算张量的平方\" class=\"headerlink\" title=\"计算张量的平方\"></a>计算张量的平方</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.square</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"n次方\"><a href=\"#n次方\" class=\"headerlink\" title=\"n次方\"></a>n次方</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">tf</span>.<span class=\"hljs-built_in\">pow</span>(张量名, n次方)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"开方\"><a href=\"#开方\" class=\"headerlink\" title=\"开方\"></a>开方</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">tf</span>.<span class=\"hljs-built_in\">sqrt</span>(张量名)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"两个矩阵相乘\"><a href=\"#两个矩阵相乘\" class=\"headerlink\" title=\"两个矩阵相乘\"></a>两个矩阵相乘</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">tf.matmul(矩阵<span class=\"hljs-number\">1</span>, 矩阵<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n"},{"title":"使用TensorFlow Hub进行迁移学习","date":"2020-08-28T14:21:26.000Z","fileName":"TF-Hub-transfer-learning","_content":"\n使用[TensorFlow Hub](https://tfhub.dev/)中的模型能够很轻松的实现模型调用与迁移学习\n\n```\nimport tensorflow_hub as hub\n\n# 你所想使用的模型的链接\nclassifier_url =\"https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2\"\n\n# 构建特征处理器\nfeature_extractor_layer = hub.KerasLayer(classifier_url, input_shape=(28, 28, 3))\n\n# 冻结特征提取层中的变量\nfeature_extractor_layer.trainable = False\n\n# 构建自己的模型\nclassifier = tf.keras.Sequential([\n\tfeature_extractor_layer,\n\tlayers.Dense(image_data.num_classes)\t# 全连接分类层\n])\n\n# 配置训练过程\nmodel.compile(\n  optimizer=tf.keras.optimizers.Adam(),\n  loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n  metrics=['acc'])\n\n\n\n# 使用该模型进行预测\nresult = classifier.predict(input_data)\n```\n\n\n\n进行迁移学习，只修改最后的分类层\n\n\n\n```\nclass CollectBatchStats(tf.keras.callbacks.Callback):\n  def __init__(self):\n    self.batch_losses = []\n    self.batch_acc = []\n\n  def on_train_batch_end(self, batch, logs=None):\n    self.batch_losses.append(logs['loss'])\n    self.batch_acc.append(logs['acc'])\n    self.model.reset_metrics()\n```\n\n\n\n","source":"_posts/AI相关/TensorFlow2/使用TensorFlow Hub进行迁移学习.md","raw":"---\ntitle: 使用TensorFlow Hub进行迁移学习\ndate: 2020-08-28 22:21:26\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: TF-Hub-transfer-learning\n---\n\n使用[TensorFlow Hub](https://tfhub.dev/)中的模型能够很轻松的实现模型调用与迁移学习\n\n```\nimport tensorflow_hub as hub\n\n# 你所想使用的模型的链接\nclassifier_url =\"https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2\"\n\n# 构建特征处理器\nfeature_extractor_layer = hub.KerasLayer(classifier_url, input_shape=(28, 28, 3))\n\n# 冻结特征提取层中的变量\nfeature_extractor_layer.trainable = False\n\n# 构建自己的模型\nclassifier = tf.keras.Sequential([\n\tfeature_extractor_layer,\n\tlayers.Dense(image_data.num_classes)\t# 全连接分类层\n])\n\n# 配置训练过程\nmodel.compile(\n  optimizer=tf.keras.optimizers.Adam(),\n  loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n  metrics=['acc'])\n\n\n\n# 使用该模型进行预测\nresult = classifier.predict(input_data)\n```\n\n\n\n进行迁移学习，只修改最后的分类层\n\n\n\n```\nclass CollectBatchStats(tf.keras.callbacks.Callback):\n  def __init__(self):\n    self.batch_losses = []\n    self.batch_acc = []\n\n  def on_train_batch_end(self, batch, logs=None):\n    self.batch_losses.append(logs['loss'])\n    self.batch_acc.append(logs['acc'])\n    self.model.reset_metrics()\n```\n\n\n\n","slug":"AI相关/TensorFlow2/使用TensorFlow Hub进行迁移学习","published":1,"updated":"2021-01-11T04:43:15.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9y001wrwjs89bh4jij","content":"<p>使用<a href=\"https://tfhub.dev/\" target=\"_blank\" rel=\"noopener\">TensorFlow Hub</a>中的模型能够很轻松的实现模型调用与迁移学习</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-built_in\">import</span> tensorflow_hub as hub<br><br><span class=\"hljs-comment\"># 你所想使用的模型的链接</span><br><span class=\"hljs-attr\">classifier_url</span> =<span class=\"hljs-string\">\"https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2\"</span><br><br><span class=\"hljs-comment\"># 构建特征处理器</span><br><span class=\"hljs-attr\">feature_extractor_layer</span> = hub.KerasLayer(classifier_url, <span class=\"hljs-attr\">input_shape=(28,</span> <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">3</span>))<br><br><span class=\"hljs-comment\"># 冻结特征提取层中的变量</span><br>feature_extractor_layer.<span class=\"hljs-attr\">trainable</span> = False<br><br><span class=\"hljs-comment\"># 构建自己的模型</span><br><span class=\"hljs-attr\">classifier</span> = tf.keras.Sequential([<br>\tfeature_extractor_layer,<br>\tlayers.Dense(image_data.num_classes)\t<span class=\"hljs-comment\"># 全连接分类层</span><br>])<br><br><span class=\"hljs-comment\"># 配置训练过程</span><br>model.compile(<br>  <span class=\"hljs-attr\">optimizer=tf.keras.optimizers.Adam(),</span><br>  <span class=\"hljs-attr\">loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),</span><br>  <span class=\"hljs-attr\">metrics=['acc'])</span><br><br><br><br><span class=\"hljs-comment\"># 使用该模型进行预测</span><br><span class=\"hljs-attr\">result</span> = classifier.predict(input_data)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>进行迁移学习，只修改最后的分类层</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CollectBatchStats</span>(<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">callbacks</span>.<span class=\"hljs-title\">Callback</span>):</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>    <span class=\"hljs-keyword\">self</span>.batch_losses = []<br>    <span class=\"hljs-keyword\">self</span>.batch_acc = []<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_train_batch_end</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, batch, logs=None)</span></span>:<br>    <span class=\"hljs-keyword\">self</span>.batch_losses.append(logs[<span class=\"hljs-string\">'loss'</span>])<br>    <span class=\"hljs-keyword\">self</span>.batch_acc.append(logs[<span class=\"hljs-string\">'acc'</span>])<br>    <span class=\"hljs-keyword\">self</span>.model.reset_metrics()<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>使用<a href=\"https://tfhub.dev/\" target=\"_blank\" rel=\"noopener\">TensorFlow Hub</a>中的模型能够很轻松的实现模型调用与迁移学习</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-built_in\">import</span> tensorflow_hub as hub<br><br><span class=\"hljs-comment\"># 你所想使用的模型的链接</span><br><span class=\"hljs-attr\">classifier_url</span> =<span class=\"hljs-string\">\"https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/2\"</span><br><br><span class=\"hljs-comment\"># 构建特征处理器</span><br><span class=\"hljs-attr\">feature_extractor_layer</span> = hub.KerasLayer(classifier_url, <span class=\"hljs-attr\">input_shape=(28,</span> <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">3</span>))<br><br><span class=\"hljs-comment\"># 冻结特征提取层中的变量</span><br>feature_extractor_layer.<span class=\"hljs-attr\">trainable</span> = False<br><br><span class=\"hljs-comment\"># 构建自己的模型</span><br><span class=\"hljs-attr\">classifier</span> = tf.keras.Sequential([<br>\tfeature_extractor_layer,<br>\tlayers.Dense(image_data.num_classes)\t<span class=\"hljs-comment\"># 全连接分类层</span><br>])<br><br><span class=\"hljs-comment\"># 配置训练过程</span><br>model.compile(<br>  <span class=\"hljs-attr\">optimizer=tf.keras.optimizers.Adam(),</span><br>  <span class=\"hljs-attr\">loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),</span><br>  <span class=\"hljs-attr\">metrics=['acc'])</span><br><br><br><br><span class=\"hljs-comment\"># 使用该模型进行预测</span><br><span class=\"hljs-attr\">result</span> = classifier.predict(input_data)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>进行迁移学习，只修改最后的分类层</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">CollectBatchStats</span>(<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">callbacks</span>.<span class=\"hljs-title\">Callback</span>):</span><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>    <span class=\"hljs-keyword\">self</span>.batch_losses = []<br>    <span class=\"hljs-keyword\">self</span>.batch_acc = []<br><br>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">on_train_batch_end</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, batch, logs=None)</span></span>:<br>    <span class=\"hljs-keyword\">self</span>.batch_losses.append(logs[<span class=\"hljs-string\">'loss'</span>])<br>    <span class=\"hljs-keyword\">self</span>.batch_acc.append(logs[<span class=\"hljs-string\">'acc'</span>])<br>    <span class=\"hljs-keyword\">self</span>.model.reset_metrics()<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"使用tf.keras快速搭建网络","date":"2020-08-07T12:22:41.000Z","fileName":"tf2-keras-build-nn","_content":"\n主要在于与《TF2原生语法构建简单网络》的比较\n\n## 逐层搭建网络结构（使用Sequential()）\n\n### tf.keras.models.Sequential()\n\nSequential 函数是一个容器，封装了神经网络结构，主要可以进行以下输入：\n\n```\n# 直接在列表中加入各层\nmodel = tf.keras.models.Sequential([layer1, layer2, ...])\n\n# 使用add加入各层\nmodel = tf.keras.models.Sequential()\nmodel.add(layer1)\nmodel.add(layer2)\n```\n\n#### 压平层\n\n将输入特征拉直为一维向量\n\n```\ntf.keras.layers.Flatten()\n```\n\n#### 全连接层\n\n```\ntf.keras.layers.Dense(输出神经元个数,\n\t\t\t\t\t  activation=\"激活函数\",\n\t\t\t\t\t  kernel_regularizer=\"正则化方式\"\n)\n```\n\n**activation可选**：relu、softmax、sigmoid、tanh等\n\n**kernel_regularizer可选**：tf.keras.regularizers.l1()、tf.keras.regularizers.l2()\n\n#### 卷积层\n\n```\ntf.keras.layers.Conv2D( filter = 卷积核个数,\n\t\t\t\t\t\tkernel_size = 卷积核尺寸,\n\t\t\t\t\t\tstrides = 卷积步长,\n\t\t\t\t\t\tpadding = “valid” or “same”)\n```\n\n#### LSTM层\n\n```\ntf.keras.layers.LSTM()\n```\n\n#### 实践\n\n在TF2原生语法构建简单网络的例子中，改用该api可以简化为：\n\n```\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(3, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2())\n])\n```\n\n### 使用model.layers查看模型信息\n\n```\nmodel.layers\n\n[<tensorflow.python.keras.layers.core.Flatten at 0x2239c7f9888>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c7f9f08>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c800248>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c800688>]\n```\n\n\n\n### model.summary()\n\n>  同时，在最后可以使用`model.summary()`查看网络参数量等基本信息。\n\n\n\n\n\n### 训练网络（在 model.compile()中配置训练方法）\n\n```\nmodel.compile(optimizer=优化器,\n\t\t\t  loss=损失函数,\n\t\t\t  metrics=[\"准确率\"]\n)\n```\n\n#### optimizer\n\n**optimizer 可以是字符串形式给出的优化器名字，也可以是函数形式 ，使用函数形式可以设置学习率、动量和超参数。**\n\n可选项：\n\n```\n‘sgd’or tf.optimizers.SGD( lr=学习率, decay=学习率衰减率, momentum=动量参数)\n\n‘adagrad’or tf.keras.optimizers.Adagrad(lr=学习率, decay=学习率衰减率)\n\n‘adadelta’or tf.keras.optimizers.Adadelta(lr=学习率, decay=学习率衰减率)\n\n‘adam’or tf.keras.optimizers.Adam (lr=学习率, decay=学习率衰减率)\n```\n\n#### loss\n\n**Loss 可以是字符串形式给出的损失函数的名字，也可以是函数形式。**\n\n```\n‘mse’ or tf.keras.losses.MeanSquaredError()\n\n‘sparse_categorical_crossentropy' or tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)\n```\n\n损失函数常需要经过 softmax 等函数将输出转化为概率分布的形式。**from_logits 则用来标注该损失函数是否需要转换为概率的形式，取 False 时表示转化为概率分布，取 True 时表示没有转化为概率分布，直接输出**。\n\n#### metrics\n\n> ‘accuracy’：y\\_和 y 都是数值，如 y\\_=[1] y=[1]。\n> ‘categorical_accuracy’：y\\_和 y 都是以独热码和概率分布表示。如 y_=[0, 1, 0], y=[0.256, 0.695, 0.048]。\n> ‘sparse_ categorical_accuracy’：y\\_是以数值形式给出，y 是以独热码形式给出。如 y_=[1],y=[0.256, 0.695, 0.048]。\n\n#### 实践\n\n```\nmodel.compile(optimizer=tf.keras.optimizers.SGD(lr=0.1),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['accuracy'])\n```\n\n\n\n### 在model.fit()中执行训练过程\n\n```\n# fit可以返回中间的一些数据结构\n# 通常命名为history\nhistory = model.fit( 训练集的输入特征， 训练集的标签， batch _size, epochs,\n\t\t   validation_data = ( 测试集的输入特征，测试集的标签 ) ，\n\t\t   validataion_split = 从测试集划分多少比例给训练集，\n\t\t   validation_freq = 测试的 epoch 间隔次数\n           )\n```\n\n#### 实践\n\n```\nhistory = model.fit(x_train, y_train, batch_size=32, epochs=500, validation_split=0.2, validation_freq=20)\n```\n\n\n\n### 使用history.history绘制训练图表\n\n#### history类型\n\n```\ntype(history)\ntensorflow.python.keras.callbacks.History\n```\n\n#### \n\n```\nprint(history.history)\n\n{'loss': [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],\n 'accuracy': [0.101127274,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182],\n 'val_loss': [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],\n 'val_accuracy': [0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914]}\n```\n\n\n\n\n\n## 使用class搭建网络\n\n将上述流程封装到一个类中，即为：（**只需要重写构造函数和call函数即可**）\n\n```\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import Model\n\nclass IrisModel(Model):\n    def __init__(self):\n        super(IrisModel, self).__init__()\n        self.d1 = Dense(3, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2())\n\n    def call(self, x):\n        y = self.d1(x)\n        return y\n\nmodel = IrisModel()\nmodel.compile(optimizer=tf.keras.optimizers.SGD(lr=0.1),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['sparse_categorical_accuracy'])\n\nmodel.fit(x_train, y_train, batch_size=32, epochs=500, validation_split=0.2, validation_freq=20)\nmodel.summary()\n```\n\n\n\n## 实例（以Fashion MNIST数据集）为例\n\n### 载入并可视化数据\n\n```\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\nfashion_mnist = keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\nclass_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nplt.figure(figsize=(10, 10))\nfor i in range(100, 125):\n    plt.subplot(5, 5, i-99)\n    plt.imshow(train_images[i])\n    plt.title(class_names[train_labels[i]])\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png\" style=\"zoom: 80%;\" />\n\n### 进行数据预处理，将值置于0-1范围内\n\n```\ntrain_images = train_images / 255.0\ntest_images = test_images / 255.0\n```\n\n### 构建网络并进行训练\n\n```\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam',\n              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(train_images, train_labels, epochs=10)\n```\n\n### 进行评估并绘制训练曲线\n\n```\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\n\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['loss'], label='loss')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy and Loss')\nplt.legend(loc='lower left')\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E8%AE%AD%E7%BB%83%E6%9B%B2%E7%BA%BF.png\" style=\"zoom:67%;\" />\n\n### 使用模型进行预测\n\n```\npredict_model = keras.Sequential([\n    model,\n    tf.keras.layers.Softmax()\n])\nprediction = predict_model.predict(test_images)\nprint(prediction[0])\n# [7.7702840e-05 5.1073805e-08 1.0888911e-05 1.1339294e-07 5.7997750e-06\n#  1.0903468e-03 8.1863102e-05 2.4046257e-02 5.1835599e-07 9.7468650e-01]\n\nplt.subplot(1, 2, 1)\nplt.imshow(test_images[0])\nplt.title(class_names[tf.argmax(prediction[0])])\nplt.subplot(1, 2, 2)\nplt.bar(class_names, prediction[0])\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C.png\" style=\"zoom:80%;\" />\n\n\n\n### 参考链接\n\nhttps://www.tensorflow.org/tutorials/","source":"_posts/AI相关/TensorFlow2/使用tf.keras快速搭建网络.md","raw":"---\ntitle: 使用tf.keras快速搭建网络\ndate: 2020-08-07 20:22:41\ntags:\n\t- TensorFlow2\ncategories:\n\t- AI相关\n\t- TensorFlow2\nfileName: tf2-keras-build-nn\n---\n\n主要在于与《TF2原生语法构建简单网络》的比较\n\n## 逐层搭建网络结构（使用Sequential()）\n\n### tf.keras.models.Sequential()\n\nSequential 函数是一个容器，封装了神经网络结构，主要可以进行以下输入：\n\n```\n# 直接在列表中加入各层\nmodel = tf.keras.models.Sequential([layer1, layer2, ...])\n\n# 使用add加入各层\nmodel = tf.keras.models.Sequential()\nmodel.add(layer1)\nmodel.add(layer2)\n```\n\n#### 压平层\n\n将输入特征拉直为一维向量\n\n```\ntf.keras.layers.Flatten()\n```\n\n#### 全连接层\n\n```\ntf.keras.layers.Dense(输出神经元个数,\n\t\t\t\t\t  activation=\"激活函数\",\n\t\t\t\t\t  kernel_regularizer=\"正则化方式\"\n)\n```\n\n**activation可选**：relu、softmax、sigmoid、tanh等\n\n**kernel_regularizer可选**：tf.keras.regularizers.l1()、tf.keras.regularizers.l2()\n\n#### 卷积层\n\n```\ntf.keras.layers.Conv2D( filter = 卷积核个数,\n\t\t\t\t\t\tkernel_size = 卷积核尺寸,\n\t\t\t\t\t\tstrides = 卷积步长,\n\t\t\t\t\t\tpadding = “valid” or “same”)\n```\n\n#### LSTM层\n\n```\ntf.keras.layers.LSTM()\n```\n\n#### 实践\n\n在TF2原生语法构建简单网络的例子中，改用该api可以简化为：\n\n```\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(3, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2())\n])\n```\n\n### 使用model.layers查看模型信息\n\n```\nmodel.layers\n\n[<tensorflow.python.keras.layers.core.Flatten at 0x2239c7f9888>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c7f9f08>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c800248>,\n <tensorflow.python.keras.layers.core.Dense at 0x2239c800688>]\n```\n\n\n\n### model.summary()\n\n>  同时，在最后可以使用`model.summary()`查看网络参数量等基本信息。\n\n\n\n\n\n### 训练网络（在 model.compile()中配置训练方法）\n\n```\nmodel.compile(optimizer=优化器,\n\t\t\t  loss=损失函数,\n\t\t\t  metrics=[\"准确率\"]\n)\n```\n\n#### optimizer\n\n**optimizer 可以是字符串形式给出的优化器名字，也可以是函数形式 ，使用函数形式可以设置学习率、动量和超参数。**\n\n可选项：\n\n```\n‘sgd’or tf.optimizers.SGD( lr=学习率, decay=学习率衰减率, momentum=动量参数)\n\n‘adagrad’or tf.keras.optimizers.Adagrad(lr=学习率, decay=学习率衰减率)\n\n‘adadelta’or tf.keras.optimizers.Adadelta(lr=学习率, decay=学习率衰减率)\n\n‘adam’or tf.keras.optimizers.Adam (lr=学习率, decay=学习率衰减率)\n```\n\n#### loss\n\n**Loss 可以是字符串形式给出的损失函数的名字，也可以是函数形式。**\n\n```\n‘mse’ or tf.keras.losses.MeanSquaredError()\n\n‘sparse_categorical_crossentropy' or tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False)\n```\n\n损失函数常需要经过 softmax 等函数将输出转化为概率分布的形式。**from_logits 则用来标注该损失函数是否需要转换为概率的形式，取 False 时表示转化为概率分布，取 True 时表示没有转化为概率分布，直接输出**。\n\n#### metrics\n\n> ‘accuracy’：y\\_和 y 都是数值，如 y\\_=[1] y=[1]。\n> ‘categorical_accuracy’：y\\_和 y 都是以独热码和概率分布表示。如 y_=[0, 1, 0], y=[0.256, 0.695, 0.048]。\n> ‘sparse_ categorical_accuracy’：y\\_是以数值形式给出，y 是以独热码形式给出。如 y_=[1],y=[0.256, 0.695, 0.048]。\n\n#### 实践\n\n```\nmodel.compile(optimizer=tf.keras.optimizers.SGD(lr=0.1),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['accuracy'])\n```\n\n\n\n### 在model.fit()中执行训练过程\n\n```\n# fit可以返回中间的一些数据结构\n# 通常命名为history\nhistory = model.fit( 训练集的输入特征， 训练集的标签， batch _size, epochs,\n\t\t   validation_data = ( 测试集的输入特征，测试集的标签 ) ，\n\t\t   validataion_split = 从测试集划分多少比例给训练集，\n\t\t   validation_freq = 测试的 epoch 间隔次数\n           )\n```\n\n#### 实践\n\n```\nhistory = model.fit(x_train, y_train, batch_size=32, epochs=500, validation_split=0.2, validation_freq=20)\n```\n\n\n\n### 使用history.history绘制训练图表\n\n#### history类型\n\n```\ntype(history)\ntensorflow.python.keras.callbacks.History\n```\n\n#### \n\n```\nprint(history.history)\n\n{'loss': [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],\n 'accuracy': [0.101127274,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182,\n  0.10078182],\n 'val_loss': [nan, nan, nan, nan, nan, nan, nan, nan, nan, nan],\n 'val_accuracy': [0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914,\n  0.0914]}\n```\n\n\n\n\n\n## 使用class搭建网络\n\n将上述流程封装到一个类中，即为：（**只需要重写构造函数和call函数即可**）\n\n```\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras import Model\n\nclass IrisModel(Model):\n    def __init__(self):\n        super(IrisModel, self).__init__()\n        self.d1 = Dense(3, activation='softmax', kernel_regularizer=tf.keras.regularizers.l2())\n\n    def call(self, x):\n        y = self.d1(x)\n        return y\n\nmodel = IrisModel()\nmodel.compile(optimizer=tf.keras.optimizers.SGD(lr=0.1),\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n              metrics=['sparse_categorical_accuracy'])\n\nmodel.fit(x_train, y_train, batch_size=32, epochs=500, validation_split=0.2, validation_freq=20)\nmodel.summary()\n```\n\n\n\n## 实例（以Fashion MNIST数据集）为例\n\n### 载入并可视化数据\n\n```\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n\nfashion_mnist = keras.datasets.fashion_mnist\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\nclass_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nplt.figure(figsize=(10, 10))\nfor i in range(100, 125):\n    plt.subplot(5, 5, i-99)\n    plt.imshow(train_images[i])\n    plt.title(class_names[train_labels[i]])\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png\" style=\"zoom: 80%;\" />\n\n### 进行数据预处理，将值置于0-1范围内\n\n```\ntrain_images = train_images / 255.0\ntest_images = test_images / 255.0\n```\n\n### 构建网络并进行训练\n\n```\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(128, activation='relu'),\n    keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam',\n              loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])\n\nhistory = model.fit(train_images, train_labels, epochs=10)\n```\n\n### 进行评估并绘制训练曲线\n\n```\ntest_loss, test_acc = model.evaluate(test_images, test_labels)\n\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['loss'], label='loss')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy and Loss')\nplt.legend(loc='lower left')\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E8%AE%AD%E7%BB%83%E6%9B%B2%E7%BA%BF.png\" style=\"zoom:67%;\" />\n\n### 使用模型进行预测\n\n```\npredict_model = keras.Sequential([\n    model,\n    tf.keras.layers.Softmax()\n])\nprediction = predict_model.predict(test_images)\nprint(prediction[0])\n# [7.7702840e-05 5.1073805e-08 1.0888911e-05 1.1339294e-07 5.7997750e-06\n#  1.0903468e-03 8.1863102e-05 2.4046257e-02 5.1835599e-07 9.7468650e-01]\n\nplt.subplot(1, 2, 1)\nplt.imshow(test_images[0])\nplt.title(class_names[tf.argmax(prediction[0])])\nplt.subplot(1, 2, 2)\nplt.bar(class_names, prediction[0])\nplt.show()\n```\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C.png\" style=\"zoom:80%;\" />\n\n\n\n### 参考链接\n\nhttps://www.tensorflow.org/tutorials/","slug":"AI相关/TensorFlow2/使用tf.keras快速搭建网络","published":1,"updated":"2021-01-11T04:43:32.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mo9z001yrwjs594p6gof","content":"<p>主要在于与《TF2原生语法构建简单网络》的比较</p>\n<h2 id=\"逐层搭建网络结构（使用Sequential-）\"><a href=\"#逐层搭建网络结构（使用Sequential-）\" class=\"headerlink\" title=\"逐层搭建网络结构（使用Sequential()）\"></a>逐层搭建网络结构（使用Sequential()）</h2><h3 id=\"tf-keras-models-Sequential\"><a href=\"#tf-keras-models-Sequential\" class=\"headerlink\" title=\"tf.keras.models.Sequential()\"></a>tf.keras.models.Sequential()</h3><p>Sequential 函数是一个容器，封装了神经网络结构，主要可以进行以下输入：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 直接在列表中加入各层</span><br>model = tf.keras.models.Sequential([layer1, layer2, <span class=\"hljs-built_in\">..</span>.])<br><br><span class=\"hljs-comment\"># 使用add加入各层</span><br>model = tf.keras.models.Sequential()<br>model.<span class=\"hljs-builtin-name\">add</span>(layer1)<br>model.<span class=\"hljs-builtin-name\">add</span>(layer2)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"压平层\"><a href=\"#压平层\" class=\"headerlink\" title=\"压平层\"></a>压平层</h4><p>将输入特征拉直为一维向量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.Flatten</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"全连接层\"><a href=\"#全连接层\" class=\"headerlink\" title=\"全连接层\"></a>全连接层</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.keras.layers.Dense(输出神经元个数,<br>\t\t\t\t\t  <span class=\"hljs-attribute\">activation</span>=<span class=\"hljs-string\">\"激活函数\"</span>,<br>\t\t\t\t\t  <span class=\"hljs-attribute\">kernel_regularizer</span>=<span class=\"hljs-string\">\"正则化方式\"</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>activation可选</strong>：relu、softmax、sigmoid、tanh等</p>\n<p><strong>kernel_regularizer可选</strong>：tf.keras.regularizers.l1()、tf.keras.regularizers.l2()</p>\n<h4 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.keras.layers.Conv2D(<span class=\"hljs-built_in\"> filter </span>= 卷积核个数,<br>\t\t\t\t\t\tkernel_size = 卷积核尺寸,<br>\t\t\t\t\t\tstrides = 卷积步长,<br>\t\t\t\t\t\tpadding = “valid” <span class=\"hljs-keyword\">or</span> “same”)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"LSTM层\"><a href=\"#LSTM层\" class=\"headerlink\" title=\"LSTM层\"></a>LSTM层</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.LSTM</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><p>在TF2原生语法构建简单网络的例子中，改用该api可以简化为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">model = tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.models</span>.Sequential([<br>    tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span>.Dense(<span class=\"hljs-number\">3</span>, activation=<span class=\"hljs-string\">'softmax'</span>, kernel_regularizer=tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.regularizers</span>.l2())<br>])<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用model-layers查看模型信息\"><a href=\"#使用model-layers查看模型信息\" class=\"headerlink\" title=\"使用model.layers查看模型信息\"></a>使用model.layers查看模型信息</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">model<span class=\"hljs-selector-class\">.layers</span><br><br>[&lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Flatten</span> at <span class=\"hljs-number\">0</span>x2239c7f9888&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c7f9f08&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c800248&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c800688&gt;]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"model-summary\"><a href=\"#model-summary\" class=\"headerlink\" title=\"model.summary()\"></a>model.summary()</h3><blockquote>\n<p> 同时，在最后可以使用<code>model.summary()</code>查看网络参数量等基本信息。</p>\n</blockquote>\n<h3 id=\"训练网络（在-model-compile-中配置训练方法）\"><a href=\"#训练网络（在-model-compile-中配置训练方法）\" class=\"headerlink\" title=\"训练网络（在 model.compile()中配置训练方法）\"></a>训练网络（在 model.compile()中配置训练方法）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model.compile(<span class=\"hljs-attribute\">optimizer</span>=优化器,<br>\t\t\t  <span class=\"hljs-attribute\">loss</span>=损失函数,<br>\t\t\t  metrics=[<span class=\"hljs-string\">\"准确率\"</span>]<br>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"optimizer\"><a href=\"#optimizer\" class=\"headerlink\" title=\"optimizer\"></a>optimizer</h4><p><strong>optimizer 可以是字符串形式给出的优化器名字，也可以是函数形式 ，使用函数形式可以设置学习率、动量和超参数。</strong></p>\n<p>可选项：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">‘sgd’<span class=\"hljs-keyword\">or</span> tf.optimizers.SGD( <span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率, <span class=\"hljs-attribute\">momentum</span>=动量参数)<br><br>‘adagrad’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adagrad(<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br><br>‘adadelta’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adadelta(<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br><br>‘adam’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adam (<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"loss\"><a href=\"#loss\" class=\"headerlink\" title=\"loss\"></a>loss</h4><p><strong>Loss 可以是字符串形式给出的损失函数的名字，也可以是函数形式。</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">‘mse’ <span class=\"hljs-keyword\">or</span> tf.keras.losses.<span class=\"hljs-constructor\">MeanSquaredError()</span><br><br>‘sparse_categorical_crossentropy' <span class=\"hljs-keyword\">or</span> tf.keras.losses.<span class=\"hljs-constructor\">SparseCategoricalCrossentropy(<span class=\"hljs-params\">from_logits</span>=False)</span><br></code></pre></td></tr></table></figure>\n\n<p>损失函数常需要经过 softmax 等函数将输出转化为概率分布的形式。<strong>from_logits 则用来标注该损失函数是否需要转换为概率的形式，取 False 时表示转化为概率分布，取 True 时表示没有转化为概率分布，直接输出</strong>。</p>\n<h4 id=\"metrics\"><a href=\"#metrics\" class=\"headerlink\" title=\"metrics\"></a>metrics</h4><blockquote>\n<p>‘accuracy’：y_和 y 都是数值，如 y_=[1] y=[1]。<br>‘categorical_accuracy’：y_和 y 都是以独热码和概率分布表示。如 y_=[0, 1, 0], y=[0.256, 0.695, 0.048]。<br>‘sparse_ categorical_accuracy’：y_是以数值形式给出，y 是以独热码形式给出。如 y_=[1],y=[0.256, 0.695, 0.048]。</p>\n</blockquote>\n<h4 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model.compile(<span class=\"hljs-attribute\">optimizer</span>=tf.keras.optimizers.SGD(lr=0.1),<br>              <span class=\"hljs-attribute\">loss</span>=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),<br>              metrics=[<span class=\"hljs-string\">'accuracy'</span>])<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在model-fit-中执行训练过程\"><a href=\"#在model-fit-中执行训练过程\" class=\"headerlink\" title=\"在model.fit()中执行训练过程\"></a>在model.fit()中执行训练过程</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># fit可以返回中间的一些数据结构</span><br><span class=\"hljs-comment\"># 通常命名为history</span><br><span class=\"hljs-attr\">history</span> = model.fit( 训练集的输入特征， 训练集的标签， batch _size, epochs,<br>\t\t   <span class=\"hljs-attr\">validation_data</span> = ( 测试集的输入特征，测试集的标签 ) ，<br>\t\t   <span class=\"hljs-attr\">validataion_split</span> = 从测试集划分多少比例给训练集，<br>\t\t   <span class=\"hljs-attr\">validation_freq</span> = 测试的 epoch 间隔次数<br>           )<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实践-2\"><a href=\"#实践-2\" class=\"headerlink\" title=\"实践\"></a>实践</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">history = model.fit(x_train, y_train, <span class=\"hljs-attribute\">batch_size</span>=32, <span class=\"hljs-attribute\">epochs</span>=500, <span class=\"hljs-attribute\">validation_split</span>=0.2, <span class=\"hljs-attribute\">validation_freq</span>=20)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用history-history绘制训练图表\"><a href=\"#使用history-history绘制训练图表\" class=\"headerlink\" title=\"使用history.history绘制训练图表\"></a>使用history.history绘制训练图表</h3><h4 id=\"history类型\"><a href=\"#history类型\" class=\"headerlink\" title=\"history类型\"></a>history类型</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">type</span><span class=\"hljs-params\">(history)</span></span><br>tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.callbacks</span>.History<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">print(history.history)<br><br>&#123;<span class=\"hljs-string\">'loss'</span>: [<span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>],<br> <span class=\"hljs-string\">'accuracy'</span>: [<span class=\"hljs-number\">0.101127274</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>],<br> <span class=\"hljs-string\">'val_loss'</span>: [<span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>],<br> <span class=\"hljs-string\">'val_accuracy'</span>: [<span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>]&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"使用class搭建网络\"><a href=\"#使用class搭建网络\" class=\"headerlink\" title=\"使用class搭建网络\"></a>使用class搭建网络</h2><p>将上述流程封装到一个类中，即为：（<strong>只需要重写构造函数和call函数即可</strong>）</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-title\">from</span> tensorflow.keras.layers <span class=\"hljs-keyword\">import</span> Dense<br><span class=\"hljs-title\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> Model<br><span class=\"hljs-class\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-type\">IrisModel</span>(<span class=\"hljs-type\">Model</span>):<br>    def __init__(<span class=\"hljs-title\">self</span>):<br>        super(<span class=\"hljs-type\">IrisModel</span>, <span class=\"hljs-title\">self</span>).__init__()<br>        self.d1 = <span class=\"hljs-type\">Dense</span>(3, <span class=\"hljs-title\">activation</span>='<span class=\"hljs-title\">softmax'</span>, <span class=\"hljs-title\">kernel_regularizer</span>=<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">regularizers</span>.<span class=\"hljs-title\">l2</span>())<br><br>    def call(<span class=\"hljs-title\">self</span>, <span class=\"hljs-title\">x</span>):<br>        y = self.d1(<span class=\"hljs-title\">x</span>)<br>        return y<br><br>model = <span class=\"hljs-type\">IrisModel</span>()<br>model.compile(<span class=\"hljs-title\">optimizer</span>=<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">optimizers</span>.<span class=\"hljs-type\">SGD</span>(<span class=\"hljs-title\">lr</span>=0.1),<br>              loss=tf.keras.losses.<span class=\"hljs-type\">SparseCategoricalCrossentropy</span>(<span class=\"hljs-title\">from_logits</span>=<span class=\"hljs-type\">False</span>),<br>              metrics=['sparse_categorical_accuracy'])<br><br>model.fit(<span class=\"hljs-title\">x_train</span>, <span class=\"hljs-title\">y_train</span>, <span class=\"hljs-title\">batch_size</span>=32, <span class=\"hljs-title\">epochs</span>=500, <span class=\"hljs-title\">validation_split</span>=0.2, <span class=\"hljs-title\">validation_freq</span>=20)<br>model.summary()</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实例（以Fashion-MNIST数据集）为例\"><a href=\"#实例（以Fashion-MNIST数据集）为例\" class=\"headerlink\" title=\"实例（以Fashion MNIST数据集）为例\"></a>实例（以Fashion MNIST数据集）为例</h2><h3 id=\"载入并可视化数据\"><a href=\"#载入并可视化数据\" class=\"headerlink\" title=\"载入并可视化数据\"></a>载入并可视化数据</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br>from tensorflow <span class=\"hljs-keyword\">import</span> keras<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>fashion_mnist = keras.datasets.fashion_mnist<br>(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()<br><br>class_names = [<span class=\"hljs-string\">'T-shirt/top'</span>, <span class=\"hljs-string\">'Trouser'</span>, <span class=\"hljs-string\">'Pullover'</span>, <span class=\"hljs-string\">'Dress'</span>, <span class=\"hljs-string\">'Coat'</span>,<br>               <span class=\"hljs-string\">'Sandal'</span>, <span class=\"hljs-string\">'Shirt'</span>, <span class=\"hljs-string\">'Sneaker'</span>, <span class=\"hljs-string\">'Bag'</span>, <span class=\"hljs-string\">'Ankle boot'</span>]<br><br>plt.figure(figsize=(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>))<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-built_in\">in</span> range(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">125</span>):<br>    plt.subplot(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, i-<span class=\"hljs-number\">99</span>)<br>    plt.imshow(train_images[i])<br>    plt.<span class=\"hljs-built_in\">title</span>(class_names[train_labels[i]])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png\" style=\"zoom: 80%;\" />\n\n<h3 id=\"进行数据预处理，将值置于0-1范围内\"><a href=\"#进行数据预处理，将值置于0-1范围内\" class=\"headerlink\" title=\"进行数据预处理，将值置于0-1范围内\"></a>进行数据预处理，将值置于0-1范围内</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">train_images</span> = train_images / <span class=\"hljs-number\">255.0</span><br><span class=\"hljs-attr\">test_images</span> = test_images / <span class=\"hljs-number\">255.0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构建网络并进行训练\"><a href=\"#构建网络并进行训练\" class=\"headerlink\" title=\"构建网络并进行训练\"></a>构建网络并进行训练</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model = keras.Sequential([<br>    keras.layers.Flatten(input_shape=(28, 28)),<br>    keras.layers.Dense(128, <span class=\"hljs-attribute\">activation</span>=<span class=\"hljs-string\">'relu'</span>),<br>    keras.layers.Dense(10)<br>])<br><br>model.compile(<span class=\"hljs-attribute\">optimizer</span>=<span class=\"hljs-string\">'adam'</span>,<br>              <span class=\"hljs-attribute\">loss</span>=keras.losses.SparseCategoricalCrossentropy(from_logits=True),<br>              metrics=[<span class=\"hljs-string\">'accuracy'</span>])<br><br>history = model.fit(train_images, train_labels, <span class=\"hljs-attribute\">epochs</span>=10)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行评估并绘制训练曲线\"><a href=\"#进行评估并绘制训练曲线\" class=\"headerlink\" title=\"进行评估并绘制训练曲线\"></a>进行评估并绘制训练曲线</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">test_loss, test_acc = model.evaluate(test_images, test_labels)<br><br>plt.plot(history.history[<span class=\"hljs-string\">'accuracy'</span>], <span class=\"hljs-attribute\">label</span>=<span class=\"hljs-string\">'accuracy'</span>)<br>plt.plot(history.history[<span class=\"hljs-string\">'loss'</span>], <span class=\"hljs-attribute\">label</span>=<span class=\"hljs-string\">'loss'</span>)<br>plt.xlabel(<span class=\"hljs-string\">'Epoch'</span>)<br>plt.ylabel(<span class=\"hljs-string\">'Accuracy and Loss'</span>)<br>plt.legend(<span class=\"hljs-attribute\">loc</span>=<span class=\"hljs-string\">'lower left'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E8%AE%AD%E7%BB%83%E6%9B%B2%E7%BA%BF.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">predict_model = keras.Sequential([<br>    model,<br>    tf.keras.layers.Softmax()<br>])<br>prediction = predict_model.predict(test_images)<br>print(prediction[<span class=\"hljs-number\">0</span>])<br># [<span class=\"hljs-number\">7.7702840e-05</span> <span class=\"hljs-number\">5.1073805e-08</span> <span class=\"hljs-number\">1.0888911e-05</span> <span class=\"hljs-number\">1.1339294e-07</span> <span class=\"hljs-number\">5.7997750e-06</span><br>#  <span class=\"hljs-number\">1.0903468e-03</span> <span class=\"hljs-number\">8.1863102e-05</span> <span class=\"hljs-number\">2.4046257e-02</span> <span class=\"hljs-number\">5.1835599e-07</span> <span class=\"hljs-number\">9.7468650e-01</span>]<br><br>plt.subplot(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)<br>plt.imshow(test_images[<span class=\"hljs-number\">0</span>])<br>plt.title(class_names[tf.argmax(prediction[<span class=\"hljs-number\">0</span>])])<br>plt.subplot(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br>plt.bar(class_names, prediction[<span class=\"hljs-number\">0</span>])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.tensorflow.org/tutorials/\" target=\"_blank\" rel=\"noopener\">https://www.tensorflow.org/tutorials/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>主要在于与《TF2原生语法构建简单网络》的比较</p>\n<h2 id=\"逐层搭建网络结构（使用Sequential-）\"><a href=\"#逐层搭建网络结构（使用Sequential-）\" class=\"headerlink\" title=\"逐层搭建网络结构（使用Sequential()）\"></a>逐层搭建网络结构（使用Sequential()）</h2><h3 id=\"tf-keras-models-Sequential\"><a href=\"#tf-keras-models-Sequential\" class=\"headerlink\" title=\"tf.keras.models.Sequential()\"></a>tf.keras.models.Sequential()</h3><p>Sequential 函数是一个容器，封装了神经网络结构，主要可以进行以下输入：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 直接在列表中加入各层</span><br>model = tf.keras.models.Sequential([layer1, layer2, <span class=\"hljs-built_in\">..</span>.])<br><br><span class=\"hljs-comment\"># 使用add加入各层</span><br>model = tf.keras.models.Sequential()<br>model.<span class=\"hljs-builtin-name\">add</span>(layer1)<br>model.<span class=\"hljs-builtin-name\">add</span>(layer2)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"压平层\"><a href=\"#压平层\" class=\"headerlink\" title=\"压平层\"></a>压平层</h4><p>将输入特征拉直为一维向量</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.Flatten</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"全连接层\"><a href=\"#全连接层\" class=\"headerlink\" title=\"全连接层\"></a>全连接层</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.keras.layers.Dense(输出神经元个数,<br>\t\t\t\t\t  <span class=\"hljs-attribute\">activation</span>=<span class=\"hljs-string\">\"激活函数\"</span>,<br>\t\t\t\t\t  <span class=\"hljs-attribute\">kernel_regularizer</span>=<span class=\"hljs-string\">\"正则化方式\"</span><br>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>activation可选</strong>：relu、softmax、sigmoid、tanh等</p>\n<p><strong>kernel_regularizer可选</strong>：tf.keras.regularizers.l1()、tf.keras.regularizers.l2()</p>\n<h4 id=\"卷积层\"><a href=\"#卷积层\" class=\"headerlink\" title=\"卷积层\"></a>卷积层</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">tf.keras.layers.Conv2D(<span class=\"hljs-built_in\"> filter </span>= 卷积核个数,<br>\t\t\t\t\t\tkernel_size = 卷积核尺寸,<br>\t\t\t\t\t\tstrides = 卷积步长,<br>\t\t\t\t\t\tpadding = “valid” <span class=\"hljs-keyword\">or</span> “same”)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"LSTM层\"><a href=\"#LSTM层\" class=\"headerlink\" title=\"LSTM层\"></a>LSTM层</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">tf</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.LSTM</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h4><p>在TF2原生语法构建简单网络的例子中，改用该api可以简化为：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">model = tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.models</span>.Sequential([<br>    tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span>.Dense(<span class=\"hljs-number\">3</span>, activation=<span class=\"hljs-string\">'softmax'</span>, kernel_regularizer=tf<span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.regularizers</span>.l2())<br>])<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用model-layers查看模型信息\"><a href=\"#使用model-layers查看模型信息\" class=\"headerlink\" title=\"使用model.layers查看模型信息\"></a>使用model.layers查看模型信息</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">model<span class=\"hljs-selector-class\">.layers</span><br><br>[&lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Flatten</span> at <span class=\"hljs-number\">0</span>x2239c7f9888&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c7f9f08&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c800248&gt;,<br> &lt;tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.layers</span><span class=\"hljs-selector-class\">.core</span><span class=\"hljs-selector-class\">.Dense</span> at <span class=\"hljs-number\">0</span>x2239c800688&gt;]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"model-summary\"><a href=\"#model-summary\" class=\"headerlink\" title=\"model.summary()\"></a>model.summary()</h3><blockquote>\n<p> 同时，在最后可以使用<code>model.summary()</code>查看网络参数量等基本信息。</p>\n</blockquote>\n<h3 id=\"训练网络（在-model-compile-中配置训练方法）\"><a href=\"#训练网络（在-model-compile-中配置训练方法）\" class=\"headerlink\" title=\"训练网络（在 model.compile()中配置训练方法）\"></a>训练网络（在 model.compile()中配置训练方法）</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model.compile(<span class=\"hljs-attribute\">optimizer</span>=优化器,<br>\t\t\t  <span class=\"hljs-attribute\">loss</span>=损失函数,<br>\t\t\t  metrics=[<span class=\"hljs-string\">\"准确率\"</span>]<br>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"optimizer\"><a href=\"#optimizer\" class=\"headerlink\" title=\"optimizer\"></a>optimizer</h4><p><strong>optimizer 可以是字符串形式给出的优化器名字，也可以是函数形式 ，使用函数形式可以设置学习率、动量和超参数。</strong></p>\n<p>可选项：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">‘sgd’<span class=\"hljs-keyword\">or</span> tf.optimizers.SGD( <span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率, <span class=\"hljs-attribute\">momentum</span>=动量参数)<br><br>‘adagrad’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adagrad(<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br><br>‘adadelta’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adadelta(<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br><br>‘adam’<span class=\"hljs-keyword\">or</span> tf.keras.optimizers.Adam (<span class=\"hljs-attribute\">lr</span>=学习率, <span class=\"hljs-attribute\">decay</span>=学习率衰减率)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"loss\"><a href=\"#loss\" class=\"headerlink\" title=\"loss\"></a>loss</h4><p><strong>Loss 可以是字符串形式给出的损失函数的名字，也可以是函数形式。</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">‘mse’ <span class=\"hljs-keyword\">or</span> tf.keras.losses.<span class=\"hljs-constructor\">MeanSquaredError()</span><br><br>‘sparse_categorical_crossentropy' <span class=\"hljs-keyword\">or</span> tf.keras.losses.<span class=\"hljs-constructor\">SparseCategoricalCrossentropy(<span class=\"hljs-params\">from_logits</span>=False)</span><br></code></pre></td></tr></table></figure>\n\n<p>损失函数常需要经过 softmax 等函数将输出转化为概率分布的形式。<strong>from_logits 则用来标注该损失函数是否需要转换为概率的形式，取 False 时表示转化为概率分布，取 True 时表示没有转化为概率分布，直接输出</strong>。</p>\n<h4 id=\"metrics\"><a href=\"#metrics\" class=\"headerlink\" title=\"metrics\"></a>metrics</h4><blockquote>\n<p>‘accuracy’：y_和 y 都是数值，如 y_=[1] y=[1]。<br>‘categorical_accuracy’：y_和 y 都是以独热码和概率分布表示。如 y_=[0, 1, 0], y=[0.256, 0.695, 0.048]。<br>‘sparse_ categorical_accuracy’：y_是以数值形式给出，y 是以独热码形式给出。如 y_=[1],y=[0.256, 0.695, 0.048]。</p>\n</blockquote>\n<h4 id=\"实践-1\"><a href=\"#实践-1\" class=\"headerlink\" title=\"实践\"></a>实践</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model.compile(<span class=\"hljs-attribute\">optimizer</span>=tf.keras.optimizers.SGD(lr=0.1),<br>              <span class=\"hljs-attribute\">loss</span>=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=False),<br>              metrics=[<span class=\"hljs-string\">'accuracy'</span>])<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"在model-fit-中执行训练过程\"><a href=\"#在model-fit-中执行训练过程\" class=\"headerlink\" title=\"在model.fit()中执行训练过程\"></a>在model.fit()中执行训练过程</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-comment\"># fit可以返回中间的一些数据结构</span><br><span class=\"hljs-comment\"># 通常命名为history</span><br><span class=\"hljs-attr\">history</span> = model.fit( 训练集的输入特征， 训练集的标签， batch _size, epochs,<br>\t\t   <span class=\"hljs-attr\">validation_data</span> = ( 测试集的输入特征，测试集的标签 ) ，<br>\t\t   <span class=\"hljs-attr\">validataion_split</span> = 从测试集划分多少比例给训练集，<br>\t\t   <span class=\"hljs-attr\">validation_freq</span> = 测试的 epoch 间隔次数<br>           )<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实践-2\"><a href=\"#实践-2\" class=\"headerlink\" title=\"实践\"></a>实践</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">history = model.fit(x_train, y_train, <span class=\"hljs-attribute\">batch_size</span>=32, <span class=\"hljs-attribute\">epochs</span>=500, <span class=\"hljs-attribute\">validation_split</span>=0.2, <span class=\"hljs-attribute\">validation_freq</span>=20)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"使用history-history绘制训练图表\"><a href=\"#使用history-history绘制训练图表\" class=\"headerlink\" title=\"使用history.history绘制训练图表\"></a>使用history.history绘制训练图表</h3><h4 id=\"history类型\"><a href=\"#history类型\" class=\"headerlink\" title=\"history类型\"></a>history类型</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">type</span><span class=\"hljs-params\">(history)</span></span><br>tensorflow<span class=\"hljs-selector-class\">.python</span><span class=\"hljs-selector-class\">.keras</span><span class=\"hljs-selector-class\">.callbacks</span>.History<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">print(history.history)<br><br>&#123;<span class=\"hljs-string\">'loss'</span>: [<span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>],<br> <span class=\"hljs-string\">'accuracy'</span>: [<span class=\"hljs-number\">0.101127274</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>,<br>  <span class=\"hljs-number\">0.10078182</span>],<br> <span class=\"hljs-string\">'val_loss'</span>: [<span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>, <span class=\"hljs-built_in\">nan</span>],<br> <span class=\"hljs-string\">'val_accuracy'</span>: [<span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>,<br>  <span class=\"hljs-number\">0.0914</span>]&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"使用class搭建网络\"><a href=\"#使用class搭建网络\" class=\"headerlink\" title=\"使用class搭建网络\"></a>使用class搭建网络</h2><p>将上述流程封装到一个类中，即为：（<strong>只需要重写构造函数和call函数即可</strong>）</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haskell\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br><span class=\"hljs-title\">from</span> tensorflow.keras.layers <span class=\"hljs-keyword\">import</span> Dense<br><span class=\"hljs-title\">from</span> tensorflow.keras <span class=\"hljs-keyword\">import</span> Model<br><span class=\"hljs-class\"><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-type\">IrisModel</span>(<span class=\"hljs-type\">Model</span>):<br>    def __init__(<span class=\"hljs-title\">self</span>):<br>        super(<span class=\"hljs-type\">IrisModel</span>, <span class=\"hljs-title\">self</span>).__init__()<br>        self.d1 = <span class=\"hljs-type\">Dense</span>(3, <span class=\"hljs-title\">activation</span>='<span class=\"hljs-title\">softmax'</span>, <span class=\"hljs-title\">kernel_regularizer</span>=<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">regularizers</span>.<span class=\"hljs-title\">l2</span>())<br><br>    def call(<span class=\"hljs-title\">self</span>, <span class=\"hljs-title\">x</span>):<br>        y = self.d1(<span class=\"hljs-title\">x</span>)<br>        return y<br><br>model = <span class=\"hljs-type\">IrisModel</span>()<br>model.compile(<span class=\"hljs-title\">optimizer</span>=<span class=\"hljs-title\">tf</span>.<span class=\"hljs-title\">keras</span>.<span class=\"hljs-title\">optimizers</span>.<span class=\"hljs-type\">SGD</span>(<span class=\"hljs-title\">lr</span>=0.1),<br>              loss=tf.keras.losses.<span class=\"hljs-type\">SparseCategoricalCrossentropy</span>(<span class=\"hljs-title\">from_logits</span>=<span class=\"hljs-type\">False</span>),<br>              metrics=['sparse_categorical_accuracy'])<br><br>model.fit(<span class=\"hljs-title\">x_train</span>, <span class=\"hljs-title\">y_train</span>, <span class=\"hljs-title\">batch_size</span>=32, <span class=\"hljs-title\">epochs</span>=500, <span class=\"hljs-title\">validation_split</span>=0.2, <span class=\"hljs-title\">validation_freq</span>=20)<br>model.summary()</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实例（以Fashion-MNIST数据集）为例\"><a href=\"#实例（以Fashion-MNIST数据集）为例\" class=\"headerlink\" title=\"实例（以Fashion MNIST数据集）为例\"></a>实例（以Fashion MNIST数据集）为例</h2><h3 id=\"载入并可视化数据\"><a href=\"#载入并可视化数据\" class=\"headerlink\" title=\"载入并可视化数据\"></a>载入并可视化数据</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xl\"><span class=\"hljs-keyword\">import</span> tensorflow <span class=\"hljs-keyword\">as</span> tf<br>from tensorflow <span class=\"hljs-keyword\">import</span> keras<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>fashion_mnist = keras.datasets.fashion_mnist<br>(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()<br><br>class_names = [<span class=\"hljs-string\">'T-shirt/top'</span>, <span class=\"hljs-string\">'Trouser'</span>, <span class=\"hljs-string\">'Pullover'</span>, <span class=\"hljs-string\">'Dress'</span>, <span class=\"hljs-string\">'Coat'</span>,<br>               <span class=\"hljs-string\">'Sandal'</span>, <span class=\"hljs-string\">'Shirt'</span>, <span class=\"hljs-string\">'Sneaker'</span>, <span class=\"hljs-string\">'Bag'</span>, <span class=\"hljs-string\">'Ankle boot'</span>]<br><br>plt.figure(figsize=(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">10</span>))<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-built_in\">in</span> range(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">125</span>):<br>    plt.subplot(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">5</span>, i-<span class=\"hljs-number\">99</span>)<br>    plt.imshow(train_images[i])<br>    plt.<span class=\"hljs-built_in\">title</span>(class_names[train_labels[i]])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96.png\" style=\"zoom: 80%;\" />\n\n<h3 id=\"进行数据预处理，将值置于0-1范围内\"><a href=\"#进行数据预处理，将值置于0-1范围内\" class=\"headerlink\" title=\"进行数据预处理，将值置于0-1范围内\"></a>进行数据预处理，将值置于0-1范围内</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">train_images</span> = train_images / <span class=\"hljs-number\">255.0</span><br><span class=\"hljs-attr\">test_images</span> = test_images / <span class=\"hljs-number\">255.0</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构建网络并进行训练\"><a href=\"#构建网络并进行训练\" class=\"headerlink\" title=\"构建网络并进行训练\"></a>构建网络并进行训练</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">model = keras.Sequential([<br>    keras.layers.Flatten(input_shape=(28, 28)),<br>    keras.layers.Dense(128, <span class=\"hljs-attribute\">activation</span>=<span class=\"hljs-string\">'relu'</span>),<br>    keras.layers.Dense(10)<br>])<br><br>model.compile(<span class=\"hljs-attribute\">optimizer</span>=<span class=\"hljs-string\">'adam'</span>,<br>              <span class=\"hljs-attribute\">loss</span>=keras.losses.SparseCategoricalCrossentropy(from_logits=True),<br>              metrics=[<span class=\"hljs-string\">'accuracy'</span>])<br><br>history = model.fit(train_images, train_labels, <span class=\"hljs-attribute\">epochs</span>=10)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行评估并绘制训练曲线\"><a href=\"#进行评估并绘制训练曲线\" class=\"headerlink\" title=\"进行评估并绘制训练曲线\"></a>进行评估并绘制训练曲线</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">test_loss, test_acc = model.evaluate(test_images, test_labels)<br><br>plt.plot(history.history[<span class=\"hljs-string\">'accuracy'</span>], <span class=\"hljs-attribute\">label</span>=<span class=\"hljs-string\">'accuracy'</span>)<br>plt.plot(history.history[<span class=\"hljs-string\">'loss'</span>], <span class=\"hljs-attribute\">label</span>=<span class=\"hljs-string\">'loss'</span>)<br>plt.xlabel(<span class=\"hljs-string\">'Epoch'</span>)<br>plt.ylabel(<span class=\"hljs-string\">'Accuracy and Loss'</span>)<br>plt.legend(<span class=\"hljs-attribute\">loc</span>=<span class=\"hljs-string\">'lower left'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E8%AE%AD%E7%BB%83%E6%9B%B2%E7%BA%BF.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"使用模型进行预测\"><a href=\"#使用模型进行预测\" class=\"headerlink\" title=\"使用模型进行预测\"></a>使用模型进行预测</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">predict_model = keras.Sequential([<br>    model,<br>    tf.keras.layers.Softmax()<br>])<br>prediction = predict_model.predict(test_images)<br>print(prediction[<span class=\"hljs-number\">0</span>])<br># [<span class=\"hljs-number\">7.7702840e-05</span> <span class=\"hljs-number\">5.1073805e-08</span> <span class=\"hljs-number\">1.0888911e-05</span> <span class=\"hljs-number\">1.1339294e-07</span> <span class=\"hljs-number\">5.7997750e-06</span><br>#  <span class=\"hljs-number\">1.0903468e-03</span> <span class=\"hljs-number\">8.1863102e-05</span> <span class=\"hljs-number\">2.4046257e-02</span> <span class=\"hljs-number\">5.1835599e-07</span> <span class=\"hljs-number\">9.7468650e-01</span>]<br><br>plt.subplot(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)<br>plt.imshow(test_images[<span class=\"hljs-number\">0</span>])<br>plt.title(class_names[tf.argmax(prediction[<span class=\"hljs-number\">0</span>])])<br>plt.subplot(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br>plt.bar(class_names, prediction[<span class=\"hljs-number\">0</span>])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/image/%E4%BD%BF%E7%94%A8tf.keras%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E7%BD%91%E7%BB%9C/%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C.png\" style=\"zoom:80%;\" />\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.tensorflow.org/tutorials/\" target=\"_blank\" rel=\"noopener\">https://www.tensorflow.org/tutorials/</a></p>\n"},{"title":"PCA算法","date":"2020-10-08T08:16:12.000Z","fileName":"pca-basic-use","_content":"\n## 算法概述\n\n> PCA算法是一种使用广泛的数据降维算法，主要思想是将n维特征映射到k维上（k < n）。降维的本质也就是*从原始坐标系映射到另一个维数更小的坐标系*\n>\n> PCA的工作就是从原始的空间中*顺序地*找一组*相互正交*的坐标轴（所以**主成分也可以理解为降维后新坐标系的坐标轴**，比如，第一主成分即为求出来的第一个坐标轴），新的坐标轴的选择与数据本身是密切相关的（原始数据中方差最大的方向）\n\n\n\n## 二维数据可视化\n\n### 原始二维数据\n\n```\n# 构建原始二维数据\nx = np.empty((50, 2))\nx[:, 0] = np.random.uniform(0, 50, size=50)\nx[:, 1] = 0.8 * x[:, 0] + 2 + np.random.normal(0, 5, size=50)\n```\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n### 对数据样本进行中心化\n\n进行中心化即**将样本的均值归为0**，在计算方差时可以将尾数约掉\n\n```\ndef demean(x):\n    return x - np.mean(x, axis=0)\n\nx_demean = demean(x)\n```\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%BD%920%E5%8C%96%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n### 最大化方差\n\n找到**一组权重**，使得样本空间中所有点映射到这个轴后方差最大（有点类似于“梯度上升”）\n\n```\ndef f(w, x):\n    return np.sum((x.dot(w)**2)) / len(x)\n\ndef df(w, x):\n    return x.T.dot(x.dot(w)) * 2. / len(x)\n\ndef gradient_ascent(x, w):\n    def direction(w):\n        \"\"\" 将w转化为单位方向向量 \"\"\"\n        return w / np.linalg.norm(w)\n    cur_iter = 0\n    w = direction(w)\n    while cur_iter < 1e4:\n        gradient = df(w, x)\n        last_w = w\n        w = w + 0.001 * gradient\n        w = direction(w)\n        if abs(f(w, x) - f(last_w, x) < 1e-8):\n            break\n        cur_iter += 1\n    return w\n\n\ninitial_w = np.random.random(x.shape[1])\nw = gradient_ascent(x_demean, initial_w)\n\nplt.scatter(x_demean[:, 0], x_demean[:, 1])\nplt.plot([-w[0]*50, w[0]*50], [-w[1]*50, w[1]*50], c='r')\nplt.show()\n```\n\n如图所示，该红线即为方差最大时的权重（可以理解为将这些数据点投影上去能够保留最多信息）\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E6%AD%A3%E4%BA%A4%E5%9F%BA%E5%90%91%E9%87%8F.png\" style=\"zoom:67%;\" />\n\n\n\n## PCA的实现\n\n模仿`sklearn`机器学习库的API，实现PCA类\n\n```\nclass PCA:\n\n    def __init__(self, n_components):\n        \"\"\" 初始化PCA \"\"\"\n        self.n_components = n_components\n        self.components_ = None\n\n    def fit(self, x):\n        \"\"\" 获取数据集的前n个主成分 \"\"\"\n        def demean(x):\n            return x - np.mean(x, axis=0)\n\n        def f(w, x):\n            return np.sum((x.dot(w) ** 2)) / len(x)\n\n        def df(w, x):\n            return x.T.dot(x.dot(w)) * 2. / len(x)\n\n        def gradient_ascent(x, w):\n            \"\"\" 梯度上升法获取第1主成分 \"\"\"\n            def direction(w):\n                \"\"\" 将w转化为单位方向向量 \"\"\"\n                return w / np.linalg.norm(w)\n            cur_iter = 0\n            w = direction(w)\n            while cur_iter < 1e4:\n                gradient = df(w, x)\n                last_w = w\n                w = w + 0.001 * gradient\n                w = direction(w)\n                if abs(f(w, x) - f(last_w, x) < 1e-8):\n                    break\n                cur_iter += 1\n            return w\n\n        x_pca = demean(x)\n        self.components_ = np.empty(shape=(self.n_components, x.shape[1]))\n        for i in range(self.n_components):\n            initial_w = np.random.random(x_pca.shape[1])\n            # 在x_pca上求得第一主成分\n            w = gradient_ascent(x_pca, initial_w)\n            self.components_[i, :] = w\n            # 将x_pca映射到求出来的主成分上，在此基础上再求第一主成分\n            x_pca = x_pca - x_pca.dot(w).reshape(-1, 1) * w\n        return self\n\n    def transform(self, X):\n        \"\"\" 将给定的X，映射到各个主成分分量z中 \"\"\"\n        return X.dot(self.components_.T)\n\n    def detransform(self, X):\n        \"\"\" 将给定的X，反向映射回原来的特征空间 \"\"\"\n        return X.dot(self.components_)\n```\n\n\n\n## PCA的使用\n\n### 基本用法\n\n`sklearn`库中的PCA的用法与之前实现的基本一致。\n\n```\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=1)\npca.fit(x_data)\npca.components_  # 得到的主成分\nx_reduction = pca.transform(x_data)\nx_restore = pca.inverse_transform(x_reduction)\n```\n\n### PCA效果的查看\n\n```\npca.explained_variance_ratio_\n```\n\n> 该方法返回一个表示降维后每个轴能够代表整个数据信息的比例，可以查看降维的效果以及数据损失的程度\n\n```\n# 获取PCA所有轴数据损失的程度\npca = PCA(n_components=x_train.shape[1])\npca.fit(x_train)\npca.explained_variance_ratio_\n```\n\n\n\n","source":"_posts/AI相关/机器学习/PCA算法.md","raw":"---\ntitle: PCA算法\ndate: 2020-10-08 16:16:12\ntags:\n\t- 机器学习\n\t- sklearn\ncategories:\n\t- AI相关\n\t- 机器学习\nfileName: pca-basic-use\n---\n\n## 算法概述\n\n> PCA算法是一种使用广泛的数据降维算法，主要思想是将n维特征映射到k维上（k < n）。降维的本质也就是*从原始坐标系映射到另一个维数更小的坐标系*\n>\n> PCA的工作就是从原始的空间中*顺序地*找一组*相互正交*的坐标轴（所以**主成分也可以理解为降维后新坐标系的坐标轴**，比如，第一主成分即为求出来的第一个坐标轴），新的坐标轴的选择与数据本身是密切相关的（原始数据中方差最大的方向）\n\n\n\n## 二维数据可视化\n\n### 原始二维数据\n\n```\n# 构建原始二维数据\nx = np.empty((50, 2))\nx[:, 0] = np.random.uniform(0, 50, size=50)\nx[:, 1] = 0.8 * x[:, 0] + 2 + np.random.normal(0, 5, size=50)\n```\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n### 对数据样本进行中心化\n\n进行中心化即**将样本的均值归为0**，在计算方差时可以将尾数约掉\n\n```\ndef demean(x):\n    return x - np.mean(x, axis=0)\n\nx_demean = demean(x)\n```\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%BD%920%E5%8C%96%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n### 最大化方差\n\n找到**一组权重**，使得样本空间中所有点映射到这个轴后方差最大（有点类似于“梯度上升”）\n\n```\ndef f(w, x):\n    return np.sum((x.dot(w)**2)) / len(x)\n\ndef df(w, x):\n    return x.T.dot(x.dot(w)) * 2. / len(x)\n\ndef gradient_ascent(x, w):\n    def direction(w):\n        \"\"\" 将w转化为单位方向向量 \"\"\"\n        return w / np.linalg.norm(w)\n    cur_iter = 0\n    w = direction(w)\n    while cur_iter < 1e4:\n        gradient = df(w, x)\n        last_w = w\n        w = w + 0.001 * gradient\n        w = direction(w)\n        if abs(f(w, x) - f(last_w, x) < 1e-8):\n            break\n        cur_iter += 1\n    return w\n\n\ninitial_w = np.random.random(x.shape[1])\nw = gradient_ascent(x_demean, initial_w)\n\nplt.scatter(x_demean[:, 0], x_demean[:, 1])\nplt.plot([-w[0]*50, w[0]*50], [-w[1]*50, w[1]*50], c='r')\nplt.show()\n```\n\n如图所示，该红线即为方差最大时的权重（可以理解为将这些数据点投影上去能够保留最多信息）\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E6%AD%A3%E4%BA%A4%E5%9F%BA%E5%90%91%E9%87%8F.png\" style=\"zoom:67%;\" />\n\n\n\n## PCA的实现\n\n模仿`sklearn`机器学习库的API，实现PCA类\n\n```\nclass PCA:\n\n    def __init__(self, n_components):\n        \"\"\" 初始化PCA \"\"\"\n        self.n_components = n_components\n        self.components_ = None\n\n    def fit(self, x):\n        \"\"\" 获取数据集的前n个主成分 \"\"\"\n        def demean(x):\n            return x - np.mean(x, axis=0)\n\n        def f(w, x):\n            return np.sum((x.dot(w) ** 2)) / len(x)\n\n        def df(w, x):\n            return x.T.dot(x.dot(w)) * 2. / len(x)\n\n        def gradient_ascent(x, w):\n            \"\"\" 梯度上升法获取第1主成分 \"\"\"\n            def direction(w):\n                \"\"\" 将w转化为单位方向向量 \"\"\"\n                return w / np.linalg.norm(w)\n            cur_iter = 0\n            w = direction(w)\n            while cur_iter < 1e4:\n                gradient = df(w, x)\n                last_w = w\n                w = w + 0.001 * gradient\n                w = direction(w)\n                if abs(f(w, x) - f(last_w, x) < 1e-8):\n                    break\n                cur_iter += 1\n            return w\n\n        x_pca = demean(x)\n        self.components_ = np.empty(shape=(self.n_components, x.shape[1]))\n        for i in range(self.n_components):\n            initial_w = np.random.random(x_pca.shape[1])\n            # 在x_pca上求得第一主成分\n            w = gradient_ascent(x_pca, initial_w)\n            self.components_[i, :] = w\n            # 将x_pca映射到求出来的主成分上，在此基础上再求第一主成分\n            x_pca = x_pca - x_pca.dot(w).reshape(-1, 1) * w\n        return self\n\n    def transform(self, X):\n        \"\"\" 将给定的X，映射到各个主成分分量z中 \"\"\"\n        return X.dot(self.components_.T)\n\n    def detransform(self, X):\n        \"\"\" 将给定的X，反向映射回原来的特征空间 \"\"\"\n        return X.dot(self.components_)\n```\n\n\n\n## PCA的使用\n\n### 基本用法\n\n`sklearn`库中的PCA的用法与之前实现的基本一致。\n\n```\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=1)\npca.fit(x_data)\npca.components_  # 得到的主成分\nx_reduction = pca.transform(x_data)\nx_restore = pca.inverse_transform(x_reduction)\n```\n\n### PCA效果的查看\n\n```\npca.explained_variance_ratio_\n```\n\n> 该方法返回一个表示降维后每个轴能够代表整个数据信息的比例，可以查看降维的效果以及数据损失的程度\n\n```\n# 获取PCA所有轴数据损失的程度\npca = PCA(n_components=x_train.shape[1])\npca.fit(x_train)\npca.explained_variance_ratio_\n```\n\n\n\n","slug":"AI相关/机器学习/PCA算法","published":1,"updated":"2021-01-11T04:44:21.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa00022rwjs7zwmbs8l","content":"<h2 id=\"算法概述\"><a href=\"#算法概述\" class=\"headerlink\" title=\"算法概述\"></a>算法概述</h2><blockquote>\n<p>PCA算法是一种使用广泛的数据降维算法，主要思想是将n维特征映射到k维上（k &lt; n）。降维的本质也就是<em>从原始坐标系映射到另一个维数更小的坐标系</em></p>\n<p>PCA的工作就是从原始的空间中<em>顺序地</em>找一组<em>相互正交</em>的坐标轴（所以<strong>主成分也可以理解为降维后新坐标系的坐标轴</strong>，比如，第一主成分即为求出来的第一个坐标轴），新的坐标轴的选择与数据本身是密切相关的（原始数据中方差最大的方向）</p>\n</blockquote>\n<h2 id=\"二维数据可视化\"><a href=\"#二维数据可视化\" class=\"headerlink\" title=\"二维数据可视化\"></a>二维数据可视化</h2><h3 id=\"原始二维数据\"><a href=\"#原始二维数据\" class=\"headerlink\" title=\"原始二维数据\"></a>原始二维数据</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 构建原始二维数据<br>x = np.empty((<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">2</span>))<br>x[:, <span class=\"hljs-number\">0</span>] = np.random.uniform(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">50</span>, size=<span class=\"hljs-number\">50</span>)<br>x[:, <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0.8</span> * x[:, <span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">2</span> + np.random.normal(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, size=<span class=\"hljs-number\">50</span>)<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"对数据样本进行中心化\"><a href=\"#对数据样本进行中心化\" class=\"headerlink\" title=\"对数据样本进行中心化\"></a>对数据样本进行中心化</h3><p>进行中心化即<strong>将样本的均值归为0</strong>，在计算方差时可以将尾数约掉</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">def d<span class=\"hljs-meta\">emean(</span><span class=\"hljs-meta\">x</span>):<br>    <span class=\"hljs-meta\">return</span> <span class=\"hljs-meta\">x</span> - np<span class=\"hljs-meta\">.mean(</span><span class=\"hljs-meta\">x</span>, axis=0)<br><br>x_demean = d<span class=\"hljs-meta\">emean(</span><span class=\"hljs-meta\">x</span>)<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%BD%920%E5%8C%96%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"最大化方差\"><a href=\"#最大化方差\" class=\"headerlink\" title=\"最大化方差\"></a>最大化方差</h3><p>找到<strong>一组权重</strong>，使得样本空间中所有点映射到这个轴后方差最大（有点类似于“梯度上升”）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(w, x)</span>:</span><br>    <span class=\"hljs-keyword\">return</span> np.sum((x.dot(w)**<span class=\"hljs-number\">2</span>)) / len(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">df</span><span class=\"hljs-params\">(w, x)</span>:</span><br>    <span class=\"hljs-keyword\">return</span> x.T.dot(x.dot(w)) * <span class=\"hljs-number\">2.</span> / len(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_ascent</span><span class=\"hljs-params\">(x, w)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">direction</span><span class=\"hljs-params\">(w)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将w转化为单位方向向量 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> w / np.linalg.norm(w)<br>    cur_iter = <span class=\"hljs-number\">0</span><br>    w = direction(w)<br>    <span class=\"hljs-keyword\">while</span> cur_iter &lt; <span class=\"hljs-number\">1e4</span>:<br>        gradient = df(w, x)<br>        last_w = w<br>        w = w + <span class=\"hljs-number\">0.001</span> * gradient<br>        w = direction(w)<br>        <span class=\"hljs-keyword\">if</span> abs(f(w, x) - f(last_w, x) &lt; <span class=\"hljs-number\">1e-8</span>):<br>            <span class=\"hljs-keyword\">break</span><br>        cur_iter += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> w<br><br><br>initial_w = np.random.random(x.shape[<span class=\"hljs-number\">1</span>])<br>w = gradient_ascent(x_demean, initial_w)<br><br>plt.scatter(x_demean[:, <span class=\"hljs-number\">0</span>], x_demean[:, <span class=\"hljs-number\">1</span>])<br>plt.plot([-w[<span class=\"hljs-number\">0</span>]*<span class=\"hljs-number\">50</span>, w[<span class=\"hljs-number\">0</span>]*<span class=\"hljs-number\">50</span>], [-w[<span class=\"hljs-number\">1</span>]*<span class=\"hljs-number\">50</span>, w[<span class=\"hljs-number\">1</span>]*<span class=\"hljs-number\">50</span>], c=<span class=\"hljs-string\">'r'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p>如图所示，该红线即为方差最大时的权重（可以理解为将这些数据点投影上去能够保留最多信息）</p>\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E6%AD%A3%E4%BA%A4%E5%9F%BA%E5%90%91%E9%87%8F.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"PCA的实现\"><a href=\"#PCA的实现\" class=\"headerlink\" title=\"PCA的实现\"></a>PCA的实现</h2><p>模仿<code>sklearn</code>机器学习库的API，实现PCA类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCA</span>:</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, n_components)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 初始化PCA \"\"\"</span><br>        self.n_components = n_components<br>        self.components_ = <span class=\"hljs-literal\">None</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span><span class=\"hljs-params\">(self, x)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 获取数据集的前n个主成分 \"\"\"</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">demean</span><span class=\"hljs-params\">(x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> x - np.mean(x, axis=<span class=\"hljs-number\">0</span>)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(w, x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> np.sum((x.dot(w) ** <span class=\"hljs-number\">2</span>)) / len(x)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">df</span><span class=\"hljs-params\">(w, x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> x.T.dot(x.dot(w)) * <span class=\"hljs-number\">2.</span> / len(x)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_ascent</span><span class=\"hljs-params\">(x, w)</span>:</span><br>            <span class=\"hljs-string\">\"\"\" 梯度上升法获取第1主成分 \"\"\"</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">direction</span><span class=\"hljs-params\">(w)</span>:</span><br>                <span class=\"hljs-string\">\"\"\" 将w转化为单位方向向量 \"\"\"</span><br>                <span class=\"hljs-keyword\">return</span> w / np.linalg.norm(w)<br>            cur_iter = <span class=\"hljs-number\">0</span><br>            w = direction(w)<br>            <span class=\"hljs-keyword\">while</span> cur_iter &lt; <span class=\"hljs-number\">1e4</span>:<br>                gradient = df(w, x)<br>                last_w = w<br>                w = w + <span class=\"hljs-number\">0.001</span> * gradient<br>                w = direction(w)<br>                <span class=\"hljs-keyword\">if</span> abs(f(w, x) - f(last_w, x) &lt; <span class=\"hljs-number\">1e-8</span>):<br>                    <span class=\"hljs-keyword\">break</span><br>                cur_iter += <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">return</span> w<br><br>        x_pca = demean(x)<br>        self.components_ = np.empty(shape=(self.n_components, x.shape[<span class=\"hljs-number\">1</span>]))<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(self.n_components):<br>            initial_w = np.random.random(x_pca.shape[<span class=\"hljs-number\">1</span>])<br>            <span class=\"hljs-comment\"># 在x_pca上求得第一主成分</span><br>            w = gradient_ascent(x_pca, initial_w)<br>            self.components_[i, :] = w<br>            <span class=\"hljs-comment\"># 将x_pca映射到求出来的主成分上，在此基础上再求第一主成分</span><br>            x_pca = x_pca - x_pca.dot(w).reshape(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>) * w<br>        <span class=\"hljs-keyword\">return</span> self<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将给定的X，映射到各个主成分分量z中 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> X.dot(self.components_.T)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">detransform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将给定的X，反向映射回原来的特征空间 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> X.dot(self.components_)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PCA的使用\"><a href=\"#PCA的使用\" class=\"headerlink\" title=\"PCA的使用\"></a>PCA的使用</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>sklearn</code>库中的PCA的用法与之前实现的基本一致。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\">from sklearn.decomposition import <span class=\"hljs-keyword\">PCA</span><br><br><span class=\"hljs-keyword\">pca</span> = <span class=\"hljs-keyword\">PCA</span>(n_components=1)<br><span class=\"hljs-keyword\">pca</span>.<span class=\"hljs-keyword\">fit</span>(x_data)<br><span class=\"hljs-keyword\">pca</span>.components_  # 得到的主成分<br>x_reduction = <span class=\"hljs-keyword\">pca</span>.transform(x_data)<br>x_restore = <span class=\"hljs-keyword\">pca</span>.inverse_transform(x_reduction)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PCA效果的查看\"><a href=\"#PCA效果的查看\" class=\"headerlink\" title=\"PCA效果的查看\"></a>PCA效果的查看</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">pca</span><span class=\"hljs-selector-class\">.explained_variance_ratio_</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该方法返回一个表示降维后每个轴能够代表整个数据信息的比例，可以查看降维的效果以及数据损失的程度</p>\n</blockquote>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"># 获取<span class=\"hljs-keyword\">PCA</span>所有轴数据损失的程度<br><span class=\"hljs-keyword\">pca</span> = <span class=\"hljs-keyword\">PCA</span>(n_components=x_train.shape[1])<br><span class=\"hljs-keyword\">pca</span>.<span class=\"hljs-keyword\">fit</span>(x_train)<br><span class=\"hljs-keyword\">pca</span>.explained_variance_ratio_<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"算法概述\"><a href=\"#算法概述\" class=\"headerlink\" title=\"算法概述\"></a>算法概述</h2><blockquote>\n<p>PCA算法是一种使用广泛的数据降维算法，主要思想是将n维特征映射到k维上（k &lt; n）。降维的本质也就是<em>从原始坐标系映射到另一个维数更小的坐标系</em></p>\n<p>PCA的工作就是从原始的空间中<em>顺序地</em>找一组<em>相互正交</em>的坐标轴（所以<strong>主成分也可以理解为降维后新坐标系的坐标轴</strong>，比如，第一主成分即为求出来的第一个坐标轴），新的坐标轴的选择与数据本身是密切相关的（原始数据中方差最大的方向）</p>\n</blockquote>\n<h2 id=\"二维数据可视化\"><a href=\"#二维数据可视化\" class=\"headerlink\" title=\"二维数据可视化\"></a>二维数据可视化</h2><h3 id=\"原始二维数据\"><a href=\"#原始二维数据\" class=\"headerlink\" title=\"原始二维数据\"></a>原始二维数据</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 构建原始二维数据<br>x = np.empty((<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">2</span>))<br>x[:, <span class=\"hljs-number\">0</span>] = np.random.uniform(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">50</span>, size=<span class=\"hljs-number\">50</span>)<br>x[:, <span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0.8</span> * x[:, <span class=\"hljs-number\">0</span>] + <span class=\"hljs-number\">2</span> + np.random.normal(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>, size=<span class=\"hljs-number\">50</span>)<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"对数据样本进行中心化\"><a href=\"#对数据样本进行中心化\" class=\"headerlink\" title=\"对数据样本进行中心化\"></a>对数据样本进行中心化</h3><p>进行中心化即<strong>将样本的均值归为0</strong>，在计算方差时可以将尾数约掉</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">def d<span class=\"hljs-meta\">emean(</span><span class=\"hljs-meta\">x</span>):<br>    <span class=\"hljs-meta\">return</span> <span class=\"hljs-meta\">x</span> - np<span class=\"hljs-meta\">.mean(</span><span class=\"hljs-meta\">x</span>, axis=0)<br><br>x_demean = d<span class=\"hljs-meta\">emean(</span><span class=\"hljs-meta\">x</span>)<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E5%BD%920%E5%8C%96%E6%95%B0%E6%8D%AE.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"最大化方差\"><a href=\"#最大化方差\" class=\"headerlink\" title=\"最大化方差\"></a>最大化方差</h3><p>找到<strong>一组权重</strong>，使得样本空间中所有点映射到这个轴后方差最大（有点类似于“梯度上升”）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(w, x)</span>:</span><br>    <span class=\"hljs-keyword\">return</span> np.sum((x.dot(w)**<span class=\"hljs-number\">2</span>)) / len(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">df</span><span class=\"hljs-params\">(w, x)</span>:</span><br>    <span class=\"hljs-keyword\">return</span> x.T.dot(x.dot(w)) * <span class=\"hljs-number\">2.</span> / len(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_ascent</span><span class=\"hljs-params\">(x, w)</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">direction</span><span class=\"hljs-params\">(w)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将w转化为单位方向向量 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> w / np.linalg.norm(w)<br>    cur_iter = <span class=\"hljs-number\">0</span><br>    w = direction(w)<br>    <span class=\"hljs-keyword\">while</span> cur_iter &lt; <span class=\"hljs-number\">1e4</span>:<br>        gradient = df(w, x)<br>        last_w = w<br>        w = w + <span class=\"hljs-number\">0.001</span> * gradient<br>        w = direction(w)<br>        <span class=\"hljs-keyword\">if</span> abs(f(w, x) - f(last_w, x) &lt; <span class=\"hljs-number\">1e-8</span>):<br>            <span class=\"hljs-keyword\">break</span><br>        cur_iter += <span class=\"hljs-number\">1</span><br>    <span class=\"hljs-keyword\">return</span> w<br><br><br>initial_w = np.random.random(x.shape[<span class=\"hljs-number\">1</span>])<br>w = gradient_ascent(x_demean, initial_w)<br><br>plt.scatter(x_demean[:, <span class=\"hljs-number\">0</span>], x_demean[:, <span class=\"hljs-number\">1</span>])<br>plt.plot([-w[<span class=\"hljs-number\">0</span>]*<span class=\"hljs-number\">50</span>, w[<span class=\"hljs-number\">0</span>]*<span class=\"hljs-number\">50</span>], [-w[<span class=\"hljs-number\">1</span>]*<span class=\"hljs-number\">50</span>, w[<span class=\"hljs-number\">1</span>]*<span class=\"hljs-number\">50</span>], c=<span class=\"hljs-string\">'r'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p>如图所示，该红线即为方差最大时的权重（可以理解为将这些数据点投影上去能够保留最多信息）</p>\n<img src=\"http://cdn.ziyedy.top/PCA%E7%AE%97%E6%B3%95/%E6%A0%87%E5%87%86%E6%AD%A3%E4%BA%A4%E5%9F%BA%E5%90%91%E9%87%8F.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"PCA的实现\"><a href=\"#PCA的实现\" class=\"headerlink\" title=\"PCA的实现\"></a>PCA的实现</h2><p>模仿<code>sklearn</code>机器学习库的API，实现PCA类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PCA</span>:</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, n_components)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 初始化PCA \"\"\"</span><br>        self.n_components = n_components<br>        self.components_ = <span class=\"hljs-literal\">None</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span><span class=\"hljs-params\">(self, x)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 获取数据集的前n个主成分 \"\"\"</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">demean</span><span class=\"hljs-params\">(x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> x - np.mean(x, axis=<span class=\"hljs-number\">0</span>)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span><span class=\"hljs-params\">(w, x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> np.sum((x.dot(w) ** <span class=\"hljs-number\">2</span>)) / len(x)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">df</span><span class=\"hljs-params\">(w, x)</span>:</span><br>            <span class=\"hljs-keyword\">return</span> x.T.dot(x.dot(w)) * <span class=\"hljs-number\">2.</span> / len(x)<br><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">gradient_ascent</span><span class=\"hljs-params\">(x, w)</span>:</span><br>            <span class=\"hljs-string\">\"\"\" 梯度上升法获取第1主成分 \"\"\"</span><br>            <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">direction</span><span class=\"hljs-params\">(w)</span>:</span><br>                <span class=\"hljs-string\">\"\"\" 将w转化为单位方向向量 \"\"\"</span><br>                <span class=\"hljs-keyword\">return</span> w / np.linalg.norm(w)<br>            cur_iter = <span class=\"hljs-number\">0</span><br>            w = direction(w)<br>            <span class=\"hljs-keyword\">while</span> cur_iter &lt; <span class=\"hljs-number\">1e4</span>:<br>                gradient = df(w, x)<br>                last_w = w<br>                w = w + <span class=\"hljs-number\">0.001</span> * gradient<br>                w = direction(w)<br>                <span class=\"hljs-keyword\">if</span> abs(f(w, x) - f(last_w, x) &lt; <span class=\"hljs-number\">1e-8</span>):<br>                    <span class=\"hljs-keyword\">break</span><br>                cur_iter += <span class=\"hljs-number\">1</span><br>            <span class=\"hljs-keyword\">return</span> w<br><br>        x_pca = demean(x)<br>        self.components_ = np.empty(shape=(self.n_components, x.shape[<span class=\"hljs-number\">1</span>]))<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(self.n_components):<br>            initial_w = np.random.random(x_pca.shape[<span class=\"hljs-number\">1</span>])<br>            <span class=\"hljs-comment\"># 在x_pca上求得第一主成分</span><br>            w = gradient_ascent(x_pca, initial_w)<br>            self.components_[i, :] = w<br>            <span class=\"hljs-comment\"># 将x_pca映射到求出来的主成分上，在此基础上再求第一主成分</span><br>            x_pca = x_pca - x_pca.dot(w).reshape(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>) * w<br>        <span class=\"hljs-keyword\">return</span> self<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将给定的X，映射到各个主成分分量z中 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> X.dot(self.components_.T)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">detransform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将给定的X，反向映射回原来的特征空间 \"\"\"</span><br>        <span class=\"hljs-keyword\">return</span> X.dot(self.components_)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"PCA的使用\"><a href=\"#PCA的使用\" class=\"headerlink\" title=\"PCA的使用\"></a>PCA的使用</h2><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p><code>sklearn</code>库中的PCA的用法与之前实现的基本一致。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\">from sklearn.decomposition import <span class=\"hljs-keyword\">PCA</span><br><br><span class=\"hljs-keyword\">pca</span> = <span class=\"hljs-keyword\">PCA</span>(n_components=1)<br><span class=\"hljs-keyword\">pca</span>.<span class=\"hljs-keyword\">fit</span>(x_data)<br><span class=\"hljs-keyword\">pca</span>.components_  # 得到的主成分<br>x_reduction = <span class=\"hljs-keyword\">pca</span>.transform(x_data)<br>x_restore = <span class=\"hljs-keyword\">pca</span>.inverse_transform(x_reduction)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"PCA效果的查看\"><a href=\"#PCA效果的查看\" class=\"headerlink\" title=\"PCA效果的查看\"></a>PCA效果的查看</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">pca</span><span class=\"hljs-selector-class\">.explained_variance_ratio_</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该方法返回一个表示降维后每个轴能够代表整个数据信息的比例，可以查看降维的效果以及数据损失的程度</p>\n</blockquote>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"># 获取<span class=\"hljs-keyword\">PCA</span>所有轴数据损失的程度<br><span class=\"hljs-keyword\">pca</span> = <span class=\"hljs-keyword\">PCA</span>(n_components=x_train.shape[1])<br><span class=\"hljs-keyword\">pca</span>.<span class=\"hljs-keyword\">fit</span>(x_train)<br><span class=\"hljs-keyword\">pca</span>.explained_variance_ratio_<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"逻辑回归","date":"2020-10-10T08:12:32.000Z","fileName":"logistic-regression","_content":"\nj\n\n将样本的特征与样本发生的概率联系起来，概率是一个数\n\n\n\n逻辑回归既可以看作回归算法也可以看作分类算法。通常作为分类算法使用，只解决二分类问题\n\n\n\n\n\n\n\n决策边界","source":"_posts/AI相关/机器学习/逻辑回归.md","raw":"---\ntitle: 逻辑回归\ndate: 2020-10-10 16:12:32\ntags:\n\t- 机器学习\n\t- sklearn\ncategories:\n\t- AI相关\n\t- 机器学习\nfileName: logistic-regression\n---\n\nj\n\n将样本的特征与样本发生的概率联系起来，概率是一个数\n\n\n\n逻辑回归既可以看作回归算法也可以看作分类算法。通常作为分类算法使用，只解决二分类问题\n\n\n\n\n\n\n\n决策边界","slug":"AI相关/机器学习/逻辑回归","published":1,"updated":"2021-01-11T04:44:49.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa20024rwjscg5o53l5","content":"<p>j</p>\n<p>将样本的特征与样本发生的概率联系起来，概率是一个数</p>\n<p>逻辑回归既可以看作回归算法也可以看作分类算法。通常作为分类算法使用，只解决二分类问题</p>\n<p>决策边界</p>\n","site":{"data":{}},"excerpt":"","more":"<p>j</p>\n<p>将样本的特征与样本发生的概率联系起来，概率是一个数</p>\n<p>逻辑回归既可以看作回归算法也可以看作分类算法。通常作为分类算法使用，只解决二分类问题</p>\n<p>决策边界</p>\n"},{"title":"神经网络基础概念总结","date":"2020-08-07T09:48:59.000Z","fileName":"nn-basic-concept-summary","_content":"\n### 神经网络复杂度\n\n**NN复杂度：多用NN层数和NN参数的个数表示**\n\n层数 = 隐藏层的层数+1个输出层\n\n总参数 = 总w + 总b\n\n**空间复杂度**：即为总参数个数\n\n**时间复杂度**：即为乘加运算次数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%A4%8D%E6%9D%82%E5%BA%A6.png)\n\n\n\n### 学习率\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%AD%A6%E4%B9%A0%E7%8E%87.png)\n\n#### 指数衰减学习率\n\n先用较大的学习率，快速得到较优解，然后逐步减小学习率，使模型在训练后期稳定。公式如下：\n\n```\n指数衰减学习率 = 初始学习率 * 学习率衰减率 (当前轮数 / 多少轮衰减一次)\n```\n\n\n\n### 激活函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png)\n\n#### 优秀的激活函数\n\n- 非线性：激活函数非线性时，多层神经网络可逼近所有函数\n- 可微性： 优化器大多用梯度下降更新参数\n- 单调性： 当激活函数是单调的，能保证单层网络的损失函数是凸函数\n- 近似恒等性： f(x)≈x 当参数初始化为随机小值时，神经网络更稳定\n\n\n\n#### Sigmoid函数\n\n$$\nf(x) = \\frac {1} {1 + e^{-x}}\n$$\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/sigmoid.png)\n\n特点：\n\n（1）易造成梯度消失\n（2）输出非0均值，收敛慢\n（3）幂运算复杂，训练时间长\n\n#### Tanh函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/tanh.png)\n\n特点\n（1）输出是0均值\n（2）易造成梯度消失\n（3）幂运算复杂，训练时间长\n\n#### Relu函数（用的最多）\n\n$$\nf(x) = max(x, 0)\n$$\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/relu.png)\n\n优点：\n\n（1）解决了梯度消失问题 解决了梯度消失问题 (在正区间）\n\n（2）只需判断输入是否大于 只需判断输入是否大于0，计算速度快\n\n（3）收敛速度远快于 收敛速度远快于sigmoid 和tanh\n\n缺点：\n\n（1）输出非0均值，收敛慢\n\n（2）Dead Relu问题：某些神经元永远不会被激活，导致相应的参数永远不会被更新\n\n#### Leaky Relu函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/Leaky-relu.png)\n\n#### 激活函数的使用\n\n1、首选relu激活函数\n\n2、学习率设置较小值\n\n3、输入特征标准化，即让输入特征满足以0为均值，1为标准差的正态分布； \n\n4、初始参数中心化，即让随机生成的参数满足以0为均值，$\\frac {2} {当前层特征个数}$ 为标准差的正态分布\n\n\n\n### 损失函数\n\n神经网络的优化目标就是使得损失函数最小\n\n#### 自定义损失函数\n\n可以根据具体的项目自定义损失函数\n\n#### 均方误差（MSE）\n\n很好理解，平时最基本的曲线拟合就是用的均方误差的损失函数。\n$$\nMSE(y\\_, y) = \\frac {\\sum^n_{i=1} (y-y\\_)^2} {n}\n$$\n\n\n#### 交叉熵损失函数（Cross Entropy）\n\n$$\nH(y\\_, y) = - \\sum y\\_ * ln y\n$$\n\n用来表征两个概率分布之间的距离，常与softmax函数结合\n\n**输出先进行softmax函数，再计算y与y\\_的交叉熵损失函数**\n\n```\ntf.nn.softmax_cross_entropy_with_logits(y_ ，y)\n```\n\n\n\n\n\n### 正则化\n\n正则化一般用于**缓解过拟合（训练准确性和测试准确性之间的差距代表*过度拟合* ）**，即在损失函数中引入模型复杂度指标，利用给W加权值，弱化了训练数据的噪声\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%AD%A3%E5%88%99%E5%8C%96.png)\n\n#### L1正则化\n\n$$\nloss_{L1}(w) = \\sum_{i} |x|\n$$\n\n> L1正则化大概率会使很多参数变为0，因此该方法可通过稀疏参数，即减少参数的数量降低复杂度\n\n#### L2正则化\n\n$$\nloss_{L1}(w) = \\sum_{i} |x^2|\n$$\n\n\n\n> L2正则化会使参数很接近零但不为零，因此该方法可通过减小参数值的大小降低复杂度。\n\n\n\n\n\n### 参数优化器\n\n#### SGD\n\n\n\n#### Adam\n\n\n\n","source":"_posts/AI相关/机器学习/神经网络基础概念总结.md","raw":"---\ntitle: 神经网络基础概念总结\ndate: 2020-08-07 17:48:59\ntags:\n\t- 机器学习\ncategories:\n\t- AI相关\n\t- 机器学习\nfileName: nn-basic-concept-summary\n---\n\n### 神经网络复杂度\n\n**NN复杂度：多用NN层数和NN参数的个数表示**\n\n层数 = 隐藏层的层数+1个输出层\n\n总参数 = 总w + 总b\n\n**空间复杂度**：即为总参数个数\n\n**时间复杂度**：即为乘加运算次数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%A4%8D%E6%9D%82%E5%BA%A6.png)\n\n\n\n### 学习率\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%AD%A6%E4%B9%A0%E7%8E%87.png)\n\n#### 指数衰减学习率\n\n先用较大的学习率，快速得到较优解，然后逐步减小学习率，使模型在训练后期稳定。公式如下：\n\n```\n指数衰减学习率 = 初始学习率 * 学习率衰减率 (当前轮数 / 多少轮衰减一次)\n```\n\n\n\n### 激活函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png)\n\n#### 优秀的激活函数\n\n- 非线性：激活函数非线性时，多层神经网络可逼近所有函数\n- 可微性： 优化器大多用梯度下降更新参数\n- 单调性： 当激活函数是单调的，能保证单层网络的损失函数是凸函数\n- 近似恒等性： f(x)≈x 当参数初始化为随机小值时，神经网络更稳定\n\n\n\n#### Sigmoid函数\n\n$$\nf(x) = \\frac {1} {1 + e^{-x}}\n$$\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/sigmoid.png)\n\n特点：\n\n（1）易造成梯度消失\n（2）输出非0均值，收敛慢\n（3）幂运算复杂，训练时间长\n\n#### Tanh函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/tanh.png)\n\n特点\n（1）输出是0均值\n（2）易造成梯度消失\n（3）幂运算复杂，训练时间长\n\n#### Relu函数（用的最多）\n\n$$\nf(x) = max(x, 0)\n$$\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/relu.png)\n\n优点：\n\n（1）解决了梯度消失问题 解决了梯度消失问题 (在正区间）\n\n（2）只需判断输入是否大于 只需判断输入是否大于0，计算速度快\n\n（3）收敛速度远快于 收敛速度远快于sigmoid 和tanh\n\n缺点：\n\n（1）输出非0均值，收敛慢\n\n（2）Dead Relu问题：某些神经元永远不会被激活，导致相应的参数永远不会被更新\n\n#### Leaky Relu函数\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/Leaky-relu.png)\n\n#### 激活函数的使用\n\n1、首选relu激活函数\n\n2、学习率设置较小值\n\n3、输入特征标准化，即让输入特征满足以0为均值，1为标准差的正态分布； \n\n4、初始参数中心化，即让随机生成的参数满足以0为均值，$\\frac {2} {当前层特征个数}$ 为标准差的正态分布\n\n\n\n### 损失函数\n\n神经网络的优化目标就是使得损失函数最小\n\n#### 自定义损失函数\n\n可以根据具体的项目自定义损失函数\n\n#### 均方误差（MSE）\n\n很好理解，平时最基本的曲线拟合就是用的均方误差的损失函数。\n$$\nMSE(y\\_, y) = \\frac {\\sum^n_{i=1} (y-y\\_)^2} {n}\n$$\n\n\n#### 交叉熵损失函数（Cross Entropy）\n\n$$\nH(y\\_, y) = - \\sum y\\_ * ln y\n$$\n\n用来表征两个概率分布之间的距离，常与softmax函数结合\n\n**输出先进行softmax函数，再计算y与y\\_的交叉熵损失函数**\n\n```\ntf.nn.softmax_cross_entropy_with_logits(y_ ，y)\n```\n\n\n\n\n\n### 正则化\n\n正则化一般用于**缓解过拟合（训练准确性和测试准确性之间的差距代表*过度拟合* ）**，即在损失函数中引入模型复杂度指标，利用给W加权值，弱化了训练数据的噪声\n\n![](http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%AD%A3%E5%88%99%E5%8C%96.png)\n\n#### L1正则化\n\n$$\nloss_{L1}(w) = \\sum_{i} |x|\n$$\n\n> L1正则化大概率会使很多参数变为0，因此该方法可通过稀疏参数，即减少参数的数量降低复杂度\n\n#### L2正则化\n\n$$\nloss_{L1}(w) = \\sum_{i} |x^2|\n$$\n\n\n\n> L2正则化会使参数很接近零但不为零，因此该方法可通过减小参数值的大小降低复杂度。\n\n\n\n\n\n### 参数优化器\n\n#### SGD\n\n\n\n#### Adam\n\n\n\n","slug":"AI相关/机器学习/神经网络基础概念总结","published":1,"updated":"2021-01-11T04:45:07.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa50028rwjsauvc6uqd","content":"<h3 id=\"神经网络复杂度\"><a href=\"#神经网络复杂度\" class=\"headerlink\" title=\"神经网络复杂度\"></a>神经网络复杂度</h3><p><strong>NN复杂度：多用NN层数和NN参数的个数表示</strong></p>\n<p>层数 = 隐藏层的层数+1个输出层</p>\n<p>总参数 = 总w + 总b</p>\n<p><strong>空间复杂度</strong>：即为总参数个数</p>\n<p><strong>时间复杂度</strong>：即为乘加运算次数</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%A4%8D%E6%9D%82%E5%BA%A6.png\" alt=\"\"></p>\n<h3 id=\"学习率\"><a href=\"#学习率\" class=\"headerlink\" title=\"学习率\"></a>学习率</h3><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%AD%A6%E4%B9%A0%E7%8E%87.png\" alt=\"\"></p>\n<h4 id=\"指数衰减学习率\"><a href=\"#指数衰减学习率\" class=\"headerlink\" title=\"指数衰减学习率\"></a>指数衰减学习率</h4><p>先用较大的学习率，快速得到较优解，然后逐步减小学习率，使模型在训练后期稳定。公式如下：</p>\n<figure class=\"highlight fix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fix\"><span class=\"hljs-attr\">指数衰减学习率 </span>=<span class=\"hljs-string\"> 初始学习率 * 学习率衰减率 (当前轮数 / 多少轮衰减一次)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h3><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png\" alt=\"\"></p>\n<h4 id=\"优秀的激活函数\"><a href=\"#优秀的激活函数\" class=\"headerlink\" title=\"优秀的激活函数\"></a>优秀的激活函数</h4><ul>\n<li>非线性：激活函数非线性时，多层神经网络可逼近所有函数</li>\n<li>可微性： 优化器大多用梯度下降更新参数</li>\n<li>单调性： 当激活函数是单调的，能保证单层网络的损失函数是凸函数</li>\n<li>近似恒等性： f(x)≈x 当参数初始化为随机小值时，神经网络更稳定</li>\n</ul>\n<h4 id=\"Sigmoid函数\"><a href=\"#Sigmoid函数\" class=\"headerlink\" title=\"Sigmoid函数\"></a>Sigmoid函数</h4><p>$$<br>f(x) = \\frac {1} {1 + e^{-x}}<br>$$</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/sigmoid.png\" alt=\"\"></p>\n<p>特点：</p>\n<p>（1）易造成梯度消失<br>（2）输出非0均值，收敛慢<br>（3）幂运算复杂，训练时间长</p>\n<h4 id=\"Tanh函数\"><a href=\"#Tanh函数\" class=\"headerlink\" title=\"Tanh函数\"></a>Tanh函数</h4><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/tanh.png\" alt=\"\"></p>\n<p>特点<br>（1）输出是0均值<br>（2）易造成梯度消失<br>（3）幂运算复杂，训练时间长</p>\n<h4 id=\"Relu函数（用的最多）\"><a href=\"#Relu函数（用的最多）\" class=\"headerlink\" title=\"Relu函数（用的最多）\"></a>Relu函数（用的最多）</h4><p>$$<br>f(x) = max(x, 0)<br>$$</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/relu.png\" alt=\"\"></p>\n<p>优点：</p>\n<p>（1）解决了梯度消失问题 解决了梯度消失问题 (在正区间）</p>\n<p>（2）只需判断输入是否大于 只需判断输入是否大于0，计算速度快</p>\n<p>（3）收敛速度远快于 收敛速度远快于sigmoid 和tanh</p>\n<p>缺点：</p>\n<p>（1）输出非0均值，收敛慢</p>\n<p>（2）Dead Relu问题：某些神经元永远不会被激活，导致相应的参数永远不会被更新</p>\n<h4 id=\"Leaky-Relu函数\"><a href=\"#Leaky-Relu函数\" class=\"headerlink\" title=\"Leaky Relu函数\"></a>Leaky Relu函数</h4><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/Leaky-relu.png\" alt=\"\"></p>\n<h4 id=\"激活函数的使用\"><a href=\"#激活函数的使用\" class=\"headerlink\" title=\"激活函数的使用\"></a>激活函数的使用</h4><p>1、首选relu激活函数</p>\n<p>2、学习率设置较小值</p>\n<p>3、输入特征标准化，即让输入特征满足以0为均值，1为标准差的正态分布； </p>\n<p>4、初始参数中心化，即让随机生成的参数满足以0为均值，$\\frac {2} {当前层特征个数}$ 为标准差的正态分布</p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>神经网络的优化目标就是使得损失函数最小</p>\n<h4 id=\"自定义损失函数\"><a href=\"#自定义损失函数\" class=\"headerlink\" title=\"自定义损失函数\"></a>自定义损失函数</h4><p>可以根据具体的项目自定义损失函数</p>\n<h4 id=\"均方误差（MSE）\"><a href=\"#均方误差（MSE）\" class=\"headerlink\" title=\"均方误差（MSE）\"></a>均方误差（MSE）</h4><p>很好理解，平时最基本的曲线拟合就是用的均方误差的损失函数。<br>$$<br>MSE(y_, y) = \\frac {\\sum^n_{i=1} (y-y_)^2} {n}<br>$$</p>\n<h4 id=\"交叉熵损失函数（Cross-Entropy）\"><a href=\"#交叉熵损失函数（Cross-Entropy）\" class=\"headerlink\" title=\"交叉熵损失函数（Cross Entropy）\"></a>交叉熵损失函数（Cross Entropy）</h4><p>$$<br>H(y_, y) = - \\sum y_ * ln y<br>$$</p>\n<p>用来表征两个概率分布之间的距离，常与softmax函数结合</p>\n<p><strong>输出先进行softmax函数，再计算y与y_的交叉熵损失函数</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.nn.softmax<span class=\"hljs-constructor\">_cross_entropy_with_logits(<span class=\"hljs-params\">y_</span> ，<span class=\"hljs-params\">y</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h3><p>正则化一般用于<strong>缓解过拟合（训练准确性和测试准确性之间的差距代表<em>过度拟合</em> ）</strong>，即在损失函数中引入模型复杂度指标，利用给W加权值，弱化了训练数据的噪声</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%AD%A3%E5%88%99%E5%8C%96.png\" alt=\"\"></p>\n<h4 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h4><p>$$<br>loss_{L1}(w) = \\sum_{i} |x|<br>$$</p>\n<blockquote>\n<p>L1正则化大概率会使很多参数变为0，因此该方法可通过稀疏参数，即减少参数的数量降低复杂度</p>\n</blockquote>\n<h4 id=\"L2正则化\"><a href=\"#L2正则化\" class=\"headerlink\" title=\"L2正则化\"></a>L2正则化</h4><p>$$<br>loss_{L1}(w) = \\sum_{i} |x^2|<br>$$</p>\n<blockquote>\n<p>L2正则化会使参数很接近零但不为零，因此该方法可通过减小参数值的大小降低复杂度。</p>\n</blockquote>\n<h3 id=\"参数优化器\"><a href=\"#参数优化器\" class=\"headerlink\" title=\"参数优化器\"></a>参数优化器</h3><h4 id=\"SGD\"><a href=\"#SGD\" class=\"headerlink\" title=\"SGD\"></a>SGD</h4><h4 id=\"Adam\"><a href=\"#Adam\" class=\"headerlink\" title=\"Adam\"></a>Adam</h4>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"神经网络复杂度\"><a href=\"#神经网络复杂度\" class=\"headerlink\" title=\"神经网络复杂度\"></a>神经网络复杂度</h3><p><strong>NN复杂度：多用NN层数和NN参数的个数表示</strong></p>\n<p>层数 = 隐藏层的层数+1个输出层</p>\n<p>总参数 = 总w + 总b</p>\n<p><strong>空间复杂度</strong>：即为总参数个数</p>\n<p><strong>时间复杂度</strong>：即为乘加运算次数</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%A4%8D%E6%9D%82%E5%BA%A6.png\" alt=\"\"></p>\n<h3 id=\"学习率\"><a href=\"#学习率\" class=\"headerlink\" title=\"学习率\"></a>学习率</h3><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E5%AD%A6%E4%B9%A0%E7%8E%87.png\" alt=\"\"></p>\n<h4 id=\"指数衰减学习率\"><a href=\"#指数衰减学习率\" class=\"headerlink\" title=\"指数衰减学习率\"></a>指数衰减学习率</h4><p>先用较大的学习率，快速得到较优解，然后逐步减小学习率，使模型在训练后期稳定。公式如下：</p>\n<figure class=\"highlight fix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fix\"><span class=\"hljs-attr\">指数衰减学习率 </span>=<span class=\"hljs-string\"> 初始学习率 * 学习率衰减率 (当前轮数 / 多少轮衰减一次)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"激活函数\"><a href=\"#激活函数\" class=\"headerlink\" title=\"激活函数\"></a>激活函数</h3><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png\" alt=\"\"></p>\n<h4 id=\"优秀的激活函数\"><a href=\"#优秀的激活函数\" class=\"headerlink\" title=\"优秀的激活函数\"></a>优秀的激活函数</h4><ul>\n<li>非线性：激活函数非线性时，多层神经网络可逼近所有函数</li>\n<li>可微性： 优化器大多用梯度下降更新参数</li>\n<li>单调性： 当激活函数是单调的，能保证单层网络的损失函数是凸函数</li>\n<li>近似恒等性： f(x)≈x 当参数初始化为随机小值时，神经网络更稳定</li>\n</ul>\n<h4 id=\"Sigmoid函数\"><a href=\"#Sigmoid函数\" class=\"headerlink\" title=\"Sigmoid函数\"></a>Sigmoid函数</h4><p>$$<br>f(x) = \\frac {1} {1 + e^{-x}}<br>$$</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/sigmoid.png\" alt=\"\"></p>\n<p>特点：</p>\n<p>（1）易造成梯度消失<br>（2）输出非0均值，收敛慢<br>（3）幂运算复杂，训练时间长</p>\n<h4 id=\"Tanh函数\"><a href=\"#Tanh函数\" class=\"headerlink\" title=\"Tanh函数\"></a>Tanh函数</h4><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/tanh.png\" alt=\"\"></p>\n<p>特点<br>（1）输出是0均值<br>（2）易造成梯度消失<br>（3）幂运算复杂，训练时间长</p>\n<h4 id=\"Relu函数（用的最多）\"><a href=\"#Relu函数（用的最多）\" class=\"headerlink\" title=\"Relu函数（用的最多）\"></a>Relu函数（用的最多）</h4><p>$$<br>f(x) = max(x, 0)<br>$$</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/relu.png\" alt=\"\"></p>\n<p>优点：</p>\n<p>（1）解决了梯度消失问题 解决了梯度消失问题 (在正区间）</p>\n<p>（2）只需判断输入是否大于 只需判断输入是否大于0，计算速度快</p>\n<p>（3）收敛速度远快于 收敛速度远快于sigmoid 和tanh</p>\n<p>缺点：</p>\n<p>（1）输出非0均值，收敛慢</p>\n<p>（2）Dead Relu问题：某些神经元永远不会被激活，导致相应的参数永远不会被更新</p>\n<h4 id=\"Leaky-Relu函数\"><a href=\"#Leaky-Relu函数\" class=\"headerlink\" title=\"Leaky Relu函数\"></a>Leaky Relu函数</h4><p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/Leaky-relu.png\" alt=\"\"></p>\n<h4 id=\"激活函数的使用\"><a href=\"#激活函数的使用\" class=\"headerlink\" title=\"激活函数的使用\"></a>激活函数的使用</h4><p>1、首选relu激活函数</p>\n<p>2、学习率设置较小值</p>\n<p>3、输入特征标准化，即让输入特征满足以0为均值，1为标准差的正态分布； </p>\n<p>4、初始参数中心化，即让随机生成的参数满足以0为均值，$\\frac {2} {当前层特征个数}$ 为标准差的正态分布</p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>神经网络的优化目标就是使得损失函数最小</p>\n<h4 id=\"自定义损失函数\"><a href=\"#自定义损失函数\" class=\"headerlink\" title=\"自定义损失函数\"></a>自定义损失函数</h4><p>可以根据具体的项目自定义损失函数</p>\n<h4 id=\"均方误差（MSE）\"><a href=\"#均方误差（MSE）\" class=\"headerlink\" title=\"均方误差（MSE）\"></a>均方误差（MSE）</h4><p>很好理解，平时最基本的曲线拟合就是用的均方误差的损失函数。<br>$$<br>MSE(y_, y) = \\frac {\\sum^n_{i=1} (y-y_)^2} {n}<br>$$</p>\n<h4 id=\"交叉熵损失函数（Cross-Entropy）\"><a href=\"#交叉熵损失函数（Cross-Entropy）\" class=\"headerlink\" title=\"交叉熵损失函数（Cross Entropy）\"></a>交叉熵损失函数（Cross Entropy）</h4><p>$$<br>H(y_, y) = - \\sum y_ * ln y<br>$$</p>\n<p>用来表征两个概率分布之间的距离，常与softmax函数结合</p>\n<p><strong>输出先进行softmax函数，再计算y与y_的交叉熵损失函数</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">tf.nn.softmax<span class=\"hljs-constructor\">_cross_entropy_with_logits(<span class=\"hljs-params\">y_</span> ，<span class=\"hljs-params\">y</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h3><p>正则化一般用于<strong>缓解过拟合（训练准确性和测试准确性之间的差距代表<em>过度拟合</em> ）</strong>，即在损失函数中引入模型复杂度指标，利用给W加权值，弱化了训练数据的噪声</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/%E6%AD%A3%E5%88%99%E5%8C%96.png\" alt=\"\"></p>\n<h4 id=\"L1正则化\"><a href=\"#L1正则化\" class=\"headerlink\" title=\"L1正则化\"></a>L1正则化</h4><p>$$<br>loss_{L1}(w) = \\sum_{i} |x|<br>$$</p>\n<blockquote>\n<p>L1正则化大概率会使很多参数变为0，因此该方法可通过稀疏参数，即减少参数的数量降低复杂度</p>\n</blockquote>\n<h4 id=\"L2正则化\"><a href=\"#L2正则化\" class=\"headerlink\" title=\"L2正则化\"></a>L2正则化</h4><p>$$<br>loss_{L1}(w) = \\sum_{i} |x^2|<br>$$</p>\n<blockquote>\n<p>L2正则化会使参数很接近零但不为零，因此该方法可通过减小参数值的大小降低复杂度。</p>\n</blockquote>\n<h3 id=\"参数优化器\"><a href=\"#参数优化器\" class=\"headerlink\" title=\"参数优化器\"></a>参数优化器</h3><h4 id=\"SGD\"><a href=\"#SGD\" class=\"headerlink\" title=\"SGD\"></a>SGD</h4><h4 id=\"Adam\"><a href=\"#Adam\" class=\"headerlink\" title=\"Adam\"></a>Adam</h4>"},{"title":"机器学习基础方法与应用","date":"2020-10-12T04:45:42.000Z","fileName":"sklearn-ml","_content":"\n## 分类：K近邻算法（KNN）\n\n### sklearn使用\n\n```\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=6)\nknn.fit(x_train, y_train)\t# 进行训练\nknn.score(x_test, y_test)\t# 获取训练得分\ny_predict = knn.predict(x_predict)\n```\n\n\n\n### 决策边界\n\n\n\n\n\n## 回归：线性回归\n\n### 基本思想\n\n\n\n### sklearn实现\n\n\n\n```\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, Y_train)\nlin_reg.coef_   # 系数矩阵\nlin_reg.intercept_  # 截距\n```\n\n\n\n多项式回归使用线性回归的思路，为原来的样本添加新的特征，原有的特征的多项式组合\n\n\n\n\n\n## 多项式回归\n\n### 基本思想\n\n\n\n### sklearn使用多项式回归\n\n```\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2)  # 指定x的最高维度为2\npoly.fit(x)\nx2 = poly.transform(x)  # 输出x^0 x^1 x^2作为输入线性回归的参数\n```\n\n\n\n### pipeline\n\n```\nfrom sklearn.pipeline import Pipeline\n\npoly_reg = Pipeline([\n    (\"Poly\", PolynomialFeatures(degree=3)),\n    (\"std_scaler\", StandardScaler()),\n    (\"lin_reg\", LinearRegression())\n])\npoly_reg.fit(x, y)\npoly_reg.predict(x)\n```\n\n\n\n\n\n\n\n## sklearn基本操作\n\n### 数据集的获取与创建\n\n```\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\n# 获取包中自带的数据集，以鸢尾花数据集为例\niris = datasets.load_iris()\nx = iris.data\ny = iris.target\n\n# 将数据集分割为测试数据集和训练数据集\n# 可以传入测试数据集的比例以及一个随机种子\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=666)\n```\n\n\n\n```\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(y_test, y_predict)\n```\n\n\n\n### 超参数搜索\n\n> 用于搜索确定获取最优解的超参数\n>\n> GridSearchCV中的CV指的是交叉验证\n\n```\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# 定义参数的搜索范围\nparam_grid = [\n    {\n        'weights': ['uniform'],\n        'n_neighbors': [i for i in range(1, 4)]\n    },\n    {\n        'weights': ['distance'],\n        'n_neighbors': [i for i in range(1, 4)],\n        'p': [i for i in range(1, 6)]\n    }\n]\n\nknn_clf = KNeighborsClassifier()\n\n# 进行网格搜索，n_jobs代表使用核的个数\ngrid_search = GridSearchCV(knn_clf, param_grid, n_jobs=-1)\ngrid_search.fit(x_train, y_train)\n\ngrid_search.best_estimator_ # 获取最佳分类器\ngrid_search.best_score_     # 获取最佳参数的准确度\ngrid_search.best_params_    # 获取最佳参数\nknn_clf = grid_search.best_estimator_   # 将最佳分类器赋给原模型\n\n```\n\n\n\n### 归一化处理\n\n> 即将所有数据映射到同一尺度，包括最值归一化（映射到0-1之间）与均值方差归一化（将所有数据归一到均值为0方差为1的分布中）\n>\n> 对测试数据集进行归一化处理时，通常使用训练数据集的均值与方差等统计数据\n\nscikit-learn中使用Scaler，实现*均值方差归一化*\n\n```\nfrom sklearn.preprocessing import StandardScaler\n\nstandardScaler = StandardScaler()\nstandardScaler.fit(x_train)\nstandardScaler.mean_    # 不是用户传来的变量，而是用户传进去的数据计算出来的变量\nstandardScaler.scale_   # 得到标准差\nx_train = standardScaler.transform(x_train)\nx_test = standardScaler.transform(x_test)\n```\n\n仿照`sklearn`中的对应类实现一个均值方差归一化的类。\n\n```\nimport numpy as np\n\nclass StandardScaler:\n\n    def __init__(self):\n        self.mean_ = None\n        self.scale_ = None\n\n    def fit(self, X):\n        \"\"\" 计算X获得数据的均值与标准差 \"\"\"\n        self.mean_ = np.array([np.mean(X[:, i]) for i in range(X.shape[1])])\n        self.scale_ = np.array([np.std(X[:, i]) for i in range(X.shape[1])])\n        return self\n\n    def transform(self, X):\n        \"\"\" 将X进行均值方差归一化处理 \"\"\"\n        res = np.empty(shape=X.shape, dtype=float)\n        for col in range(X.shape[1]):\n            res[:, col] = (X[:, col] - self.mean_[col]) / self.scale_[col]\n        return res\n```\n\n\n\n### 模型正则化\n\n导致偏差：对问题本身的定义不正确（选取不相关的特征），欠拟合（线性回归天生高偏差，对数据有极强的假设）\n\n导致方差：数据的扰动会影响，模型太复杂（KNN天生高方差，对数据依赖）\n\n大多数算法具有相应的参数，可以调整偏差与方差\n\n\n\n解决高方差：降低模型复杂度、减少数据噪声、增加样本数、实验验证集、模型正则化\n\n\n\n模型正则化：限制参数的大小\n\n\n\n\n\n\n\n","source":"_posts/AI相关/机器学习/机器学习基础方法与应用.md","raw":"---\ntitle: 机器学习基础方法与应用\ndate: 2020-10-12 12:45:42\ntags:\n\t- 机器学习\n\t- sklearn\ncategories:\n\t- AI相关\n\t- 机器学习\nfileName: sklearn-ml\n---\n\n## 分类：K近邻算法（KNN）\n\n### sklearn使用\n\n```\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=6)\nknn.fit(x_train, y_train)\t# 进行训练\nknn.score(x_test, y_test)\t# 获取训练得分\ny_predict = knn.predict(x_predict)\n```\n\n\n\n### 决策边界\n\n\n\n\n\n## 回归：线性回归\n\n### 基本思想\n\n\n\n### sklearn实现\n\n\n\n```\nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train, Y_train)\nlin_reg.coef_   # 系数矩阵\nlin_reg.intercept_  # 截距\n```\n\n\n\n多项式回归使用线性回归的思路，为原来的样本添加新的特征，原有的特征的多项式组合\n\n\n\n\n\n## 多项式回归\n\n### 基本思想\n\n\n\n### sklearn使用多项式回归\n\n```\nfrom sklearn.preprocessing import PolynomialFeatures\n\npoly = PolynomialFeatures(degree=2)  # 指定x的最高维度为2\npoly.fit(x)\nx2 = poly.transform(x)  # 输出x^0 x^1 x^2作为输入线性回归的参数\n```\n\n\n\n### pipeline\n\n```\nfrom sklearn.pipeline import Pipeline\n\npoly_reg = Pipeline([\n    (\"Poly\", PolynomialFeatures(degree=3)),\n    (\"std_scaler\", StandardScaler()),\n    (\"lin_reg\", LinearRegression())\n])\npoly_reg.fit(x, y)\npoly_reg.predict(x)\n```\n\n\n\n\n\n\n\n## sklearn基本操作\n\n### 数据集的获取与创建\n\n```\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\n\n# 获取包中自带的数据集，以鸢尾花数据集为例\niris = datasets.load_iris()\nx = iris.data\ny = iris.target\n\n# 将数据集分割为测试数据集和训练数据集\n# 可以传入测试数据集的比例以及一个随机种子\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=666)\n```\n\n\n\n```\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(y_test, y_predict)\n```\n\n\n\n### 超参数搜索\n\n> 用于搜索确定获取最优解的超参数\n>\n> GridSearchCV中的CV指的是交叉验证\n\n```\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# 定义参数的搜索范围\nparam_grid = [\n    {\n        'weights': ['uniform'],\n        'n_neighbors': [i for i in range(1, 4)]\n    },\n    {\n        'weights': ['distance'],\n        'n_neighbors': [i for i in range(1, 4)],\n        'p': [i for i in range(1, 6)]\n    }\n]\n\nknn_clf = KNeighborsClassifier()\n\n# 进行网格搜索，n_jobs代表使用核的个数\ngrid_search = GridSearchCV(knn_clf, param_grid, n_jobs=-1)\ngrid_search.fit(x_train, y_train)\n\ngrid_search.best_estimator_ # 获取最佳分类器\ngrid_search.best_score_     # 获取最佳参数的准确度\ngrid_search.best_params_    # 获取最佳参数\nknn_clf = grid_search.best_estimator_   # 将最佳分类器赋给原模型\n\n```\n\n\n\n### 归一化处理\n\n> 即将所有数据映射到同一尺度，包括最值归一化（映射到0-1之间）与均值方差归一化（将所有数据归一到均值为0方差为1的分布中）\n>\n> 对测试数据集进行归一化处理时，通常使用训练数据集的均值与方差等统计数据\n\nscikit-learn中使用Scaler，实现*均值方差归一化*\n\n```\nfrom sklearn.preprocessing import StandardScaler\n\nstandardScaler = StandardScaler()\nstandardScaler.fit(x_train)\nstandardScaler.mean_    # 不是用户传来的变量，而是用户传进去的数据计算出来的变量\nstandardScaler.scale_   # 得到标准差\nx_train = standardScaler.transform(x_train)\nx_test = standardScaler.transform(x_test)\n```\n\n仿照`sklearn`中的对应类实现一个均值方差归一化的类。\n\n```\nimport numpy as np\n\nclass StandardScaler:\n\n    def __init__(self):\n        self.mean_ = None\n        self.scale_ = None\n\n    def fit(self, X):\n        \"\"\" 计算X获得数据的均值与标准差 \"\"\"\n        self.mean_ = np.array([np.mean(X[:, i]) for i in range(X.shape[1])])\n        self.scale_ = np.array([np.std(X[:, i]) for i in range(X.shape[1])])\n        return self\n\n    def transform(self, X):\n        \"\"\" 将X进行均值方差归一化处理 \"\"\"\n        res = np.empty(shape=X.shape, dtype=float)\n        for col in range(X.shape[1]):\n            res[:, col] = (X[:, col] - self.mean_[col]) / self.scale_[col]\n        return res\n```\n\n\n\n### 模型正则化\n\n导致偏差：对问题本身的定义不正确（选取不相关的特征），欠拟合（线性回归天生高偏差，对数据有极强的假设）\n\n导致方差：数据的扰动会影响，模型太复杂（KNN天生高方差，对数据依赖）\n\n大多数算法具有相应的参数，可以调整偏差与方差\n\n\n\n解决高方差：降低模型复杂度、减少数据噪声、增加样本数、实验验证集、模型正则化\n\n\n\n模型正则化：限制参数的大小\n\n\n\n\n\n\n\n","slug":"AI相关/机器学习/机器学习基础方法与应用","published":1,"updated":"2021-01-11T04:44:38.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa6002arwjsbxhzcs4m","content":"<h2 id=\"分类：K近邻算法（KNN）\"><a href=\"#分类：K近邻算法（KNN）\" class=\"headerlink\" title=\"分类：K近邻算法（KNN）\"></a>分类：K近邻算法（KNN）</h2><h3 id=\"sklearn使用\"><a href=\"#sklearn使用\" class=\"headerlink\" title=\"sklearn使用\"></a>sklearn使用</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn.neighbors <span class=\"hljs-built_in\">import</span> KNeighborsClassifier<br><br><span class=\"hljs-attr\">knn</span> = KNeighborsClassifier(<span class=\"hljs-attr\">n_neighbors=6)</span><br>knn.fit(x_train, y_train)\t<span class=\"hljs-comment\"># 进行训练</span><br>knn.score(x_test, y_test)\t<span class=\"hljs-comment\"># 获取训练得分</span><br><span class=\"hljs-attr\">y_predict</span> = knn.predict(x_predict)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"决策边界\"><a href=\"#决策边界\" class=\"headerlink\" title=\"决策边界\"></a>决策边界</h3><h2 id=\"回归：线性回归\"><a href=\"#回归：线性回归\" class=\"headerlink\" title=\"回归：线性回归\"></a>回归：线性回归</h2><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><h3 id=\"sklearn实现\"><a href=\"#sklearn实现\" class=\"headerlink\" title=\"sklearn实现\"></a>sklearn实现</h3><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs capnproto\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression<br><br>lin_reg = LinearRegression()<br>lin_reg.fit(X_train, Y_train)<br>lin_reg.coef_   <span class=\"hljs-comment\"># 系数矩阵</span><br>lin_reg.intercept_  <span class=\"hljs-comment\"># 截距</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多项式回归使用线性回归的思路，为原来的样本添加新的特征，原有的特征的多项式组合</p>\n<h2 id=\"多项式回归\"><a href=\"#多项式回归\" class=\"headerlink\" title=\"多项式回归\"></a>多项式回归</h2><h3 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><h3 id=\"sklearn使用多项式回归\"><a href=\"#sklearn使用多项式回归\" class=\"headerlink\" title=\"sklearn使用多项式回归\"></a>sklearn使用多项式回归</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> PolynomialFeatures<br><br>poly = PolynomialFeatures(degree=<span class=\"hljs-number\">2</span>)  # 指定x的最高维度为<span class=\"hljs-number\">2</span><br>poly.fit(x)<br>x2 = poly.transform(x)  # 输出x^<span class=\"hljs-number\">0</span> x^<span class=\"hljs-number\">1</span> x^<span class=\"hljs-number\">2</span>作为输入线性回归的参数<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h3><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-meta\">from</span> sklearn.pipeline import Pipeline<br><br>poly_reg = Pipeline([<br>    (<span class=\"hljs-string\">\"Poly\"</span>, PolynomialFeatures(degree=3)),<br>    (<span class=\"hljs-string\">\"std_scaler\"</span>, StandardScaler()),<br>    (<span class=\"hljs-string\">\"lin_reg\"</span>, LinearRegressi<span class=\"hljs-meta\">on(</span>))<br>])<br>poly_reg.fit(<span class=\"hljs-meta\">x</span>, y)<br>poly_reg.predict(<span class=\"hljs-meta\">x</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"sklearn基本操作\"><a href=\"#sklearn基本操作\" class=\"headerlink\" title=\"sklearn基本操作\"></a>sklearn基本操作</h2><h3 id=\"数据集的获取与创建\"><a href=\"#数据集的获取与创建\" class=\"headerlink\" title=\"数据集的获取与创建\"></a>数据集的获取与创建</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn <span class=\"hljs-built_in\">import</span> datasets<br>from sklearn.model_selection <span class=\"hljs-built_in\">import</span> train_test_split<br><br><span class=\"hljs-comment\"># 获取包中自带的数据集，以鸢尾花数据集为例</span><br><span class=\"hljs-attr\">iris</span> = datasets.load_iris()<br><span class=\"hljs-attr\">x</span> = iris.data<br><span class=\"hljs-attr\">y</span> = iris.target<br><br><span class=\"hljs-comment\"># 将数据集分割为测试数据集和训练数据集</span><br><span class=\"hljs-comment\"># 可以传入测试数据集的比例以及一个随机种子</span><br>x_train, x_test, y_train, <span class=\"hljs-attr\">y_test</span> = train_test_split(x, y, <span class=\"hljs-attr\">test_size=0.2,</span> <span class=\"hljs-attr\">random_state=666)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">from sklearn<span class=\"hljs-selector-class\">.metrics</span> import accuracy_score<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">accuracy_score</span><span class=\"hljs-params\">(y_test, y_predict)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"超参数搜索\"><a href=\"#超参数搜索\" class=\"headerlink\" title=\"超参数搜索\"></a>超参数搜索</h3><blockquote>\n<p>用于搜索确定获取最优解的超参数</p>\n<p>GridSearchCV中的CV指的是交叉验证</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV<br><span class=\"hljs-keyword\">from</span> sklearn.neighbors <span class=\"hljs-keyword\">import</span> KNeighborsClassifier<br><br># 定义参数的搜索范围<br>param_grid = [<br>    &#123;<br>        <span class=\"hljs-string\">'weights'</span>: [<span class=\"hljs-string\">'uniform'</span>],<br>        <span class=\"hljs-string\">'n_neighbors'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)]<br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">'weights'</span>: [<span class=\"hljs-string\">'distance'</span>],<br>        <span class=\"hljs-string\">'n_neighbors'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)],<br>        <span class=\"hljs-string\">'p'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)]<br>    &#125;<br>]<br><br>knn_clf = KNeighborsClassifier()<br><br># 进行网格搜索，n_jobs代表使用核的个数<br>grid_search = GridSearchCV(knn_clf, param_grid, n_jobs=<span class=\"hljs-number\">-1</span>)<br>grid_search.fit(x_train, y_train)<br><br>grid_search.best_estimator_ # 获取最佳分类器<br>grid_search.best_score_     # 获取最佳参数的准确度<br>grid_search.best_params_    # 获取最佳参数<br>knn_clf = grid_search.best_estimator_   # 将最佳分类器赋给原模型<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"归一化处理\"><a href=\"#归一化处理\" class=\"headerlink\" title=\"归一化处理\"></a>归一化处理</h3><blockquote>\n<p>即将所有数据映射到同一尺度，包括最值归一化（映射到0-1之间）与均值方差归一化（将所有数据归一到均值为0方差为1的分布中）</p>\n<p>对测试数据集进行归一化处理时，通常使用训练数据集的均值与方差等统计数据</p>\n</blockquote>\n<p>scikit-learn中使用Scaler，实现<em>均值方差归一化</em></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn.preprocessing <span class=\"hljs-built_in\">import</span> StandardScaler<br><br><span class=\"hljs-attr\">standardScaler</span> = StandardScaler()<br>standardScaler.fit(x_train)<br>standardScaler.mean_    <span class=\"hljs-comment\"># 不是用户传来的变量，而是用户传进去的数据计算出来的变量</span><br>standardScaler.scale_   <span class=\"hljs-comment\"># 得到标准差</span><br><span class=\"hljs-attr\">x_train</span> = standardScaler.transform(x_train)<br><span class=\"hljs-attr\">x_test</span> = standardScaler.transform(x_test)<br></code></pre></td></tr></table></figure>\n\n<p>仿照<code>sklearn</code>中的对应类实现一个均值方差归一化的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StandardScaler</span>:</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        self.mean_ = <span class=\"hljs-literal\">None</span><br>        self.scale_ = <span class=\"hljs-literal\">None</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 计算X获得数据的均值与标准差 \"\"\"</span><br>        self.mean_ = np.array([np.mean(X[:, i]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>])])<br>        self.scale_ = np.array([np.std(X[:, i]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>])])<br>        <span class=\"hljs-keyword\">return</span> self<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将X进行均值方差归一化处理 \"\"\"</span><br>        res = np.empty(shape=X.shape, dtype=float)<br>        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>]):<br>            res[:, col] = (X[:, col] - self.mean_[col]) / self.scale_[col]<br>        <span class=\"hljs-keyword\">return</span> res<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"模型正则化\"><a href=\"#模型正则化\" class=\"headerlink\" title=\"模型正则化\"></a>模型正则化</h3><p>导致偏差：对问题本身的定义不正确（选取不相关的特征），欠拟合（线性回归天生高偏差，对数据有极强的假设）</p>\n<p>导致方差：数据的扰动会影响，模型太复杂（KNN天生高方差，对数据依赖）</p>\n<p>大多数算法具有相应的参数，可以调整偏差与方差</p>\n<p>解决高方差：降低模型复杂度、减少数据噪声、增加样本数、实验验证集、模型正则化</p>\n<p>模型正则化：限制参数的大小</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分类：K近邻算法（KNN）\"><a href=\"#分类：K近邻算法（KNN）\" class=\"headerlink\" title=\"分类：K近邻算法（KNN）\"></a>分类：K近邻算法（KNN）</h2><h3 id=\"sklearn使用\"><a href=\"#sklearn使用\" class=\"headerlink\" title=\"sklearn使用\"></a>sklearn使用</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn.neighbors <span class=\"hljs-built_in\">import</span> KNeighborsClassifier<br><br><span class=\"hljs-attr\">knn</span> = KNeighborsClassifier(<span class=\"hljs-attr\">n_neighbors=6)</span><br>knn.fit(x_train, y_train)\t<span class=\"hljs-comment\"># 进行训练</span><br>knn.score(x_test, y_test)\t<span class=\"hljs-comment\"># 获取训练得分</span><br><span class=\"hljs-attr\">y_predict</span> = knn.predict(x_predict)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"决策边界\"><a href=\"#决策边界\" class=\"headerlink\" title=\"决策边界\"></a>决策边界</h3><h2 id=\"回归：线性回归\"><a href=\"#回归：线性回归\" class=\"headerlink\" title=\"回归：线性回归\"></a>回归：线性回归</h2><h3 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><h3 id=\"sklearn实现\"><a href=\"#sklearn实现\" class=\"headerlink\" title=\"sklearn实现\"></a>sklearn实现</h3><figure class=\"highlight capnproto\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs capnproto\"><span class=\"hljs-keyword\">from</span> sklearn.linear_model <span class=\"hljs-keyword\">import</span> LinearRegression<br><br>lin_reg = LinearRegression()<br>lin_reg.fit(X_train, Y_train)<br>lin_reg.coef_   <span class=\"hljs-comment\"># 系数矩阵</span><br>lin_reg.intercept_  <span class=\"hljs-comment\"># 截距</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多项式回归使用线性回归的思路，为原来的样本添加新的特征，原有的特征的多项式组合</p>\n<h2 id=\"多项式回归\"><a href=\"#多项式回归\" class=\"headerlink\" title=\"多项式回归\"></a>多项式回归</h2><h3 id=\"基本思想-1\"><a href=\"#基本思想-1\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h3><h3 id=\"sklearn使用多项式回归\"><a href=\"#sklearn使用多项式回归\" class=\"headerlink\" title=\"sklearn使用多项式回归\"></a>sklearn使用多项式回归</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">from</span> sklearn.preprocessing <span class=\"hljs-keyword\">import</span> PolynomialFeatures<br><br>poly = PolynomialFeatures(degree=<span class=\"hljs-number\">2</span>)  # 指定x的最高维度为<span class=\"hljs-number\">2</span><br>poly.fit(x)<br>x2 = poly.transform(x)  # 输出x^<span class=\"hljs-number\">0</span> x^<span class=\"hljs-number\">1</span> x^<span class=\"hljs-number\">2</span>作为输入线性回归的参数<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"pipeline\"><a href=\"#pipeline\" class=\"headerlink\" title=\"pipeline\"></a>pipeline</h3><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-meta\">from</span> sklearn.pipeline import Pipeline<br><br>poly_reg = Pipeline([<br>    (<span class=\"hljs-string\">\"Poly\"</span>, PolynomialFeatures(degree=3)),<br>    (<span class=\"hljs-string\">\"std_scaler\"</span>, StandardScaler()),<br>    (<span class=\"hljs-string\">\"lin_reg\"</span>, LinearRegressi<span class=\"hljs-meta\">on(</span>))<br>])<br>poly_reg.fit(<span class=\"hljs-meta\">x</span>, y)<br>poly_reg.predict(<span class=\"hljs-meta\">x</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"sklearn基本操作\"><a href=\"#sklearn基本操作\" class=\"headerlink\" title=\"sklearn基本操作\"></a>sklearn基本操作</h2><h3 id=\"数据集的获取与创建\"><a href=\"#数据集的获取与创建\" class=\"headerlink\" title=\"数据集的获取与创建\"></a>数据集的获取与创建</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn <span class=\"hljs-built_in\">import</span> datasets<br>from sklearn.model_selection <span class=\"hljs-built_in\">import</span> train_test_split<br><br><span class=\"hljs-comment\"># 获取包中自带的数据集，以鸢尾花数据集为例</span><br><span class=\"hljs-attr\">iris</span> = datasets.load_iris()<br><span class=\"hljs-attr\">x</span> = iris.data<br><span class=\"hljs-attr\">y</span> = iris.target<br><br><span class=\"hljs-comment\"># 将数据集分割为测试数据集和训练数据集</span><br><span class=\"hljs-comment\"># 可以传入测试数据集的比例以及一个随机种子</span><br>x_train, x_test, y_train, <span class=\"hljs-attr\">y_test</span> = train_test_split(x, y, <span class=\"hljs-attr\">test_size=0.2,</span> <span class=\"hljs-attr\">random_state=666)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">from sklearn<span class=\"hljs-selector-class\">.metrics</span> import accuracy_score<br><br><span class=\"hljs-function\"><span class=\"hljs-title\">accuracy_score</span><span class=\"hljs-params\">(y_test, y_predict)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"超参数搜索\"><a href=\"#超参数搜索\" class=\"headerlink\" title=\"超参数搜索\"></a>超参数搜索</h3><blockquote>\n<p>用于搜索确定获取最优解的超参数</p>\n<p>GridSearchCV中的CV指的是交叉验证</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">from</span> sklearn.model_selection <span class=\"hljs-keyword\">import</span> GridSearchCV<br><span class=\"hljs-keyword\">from</span> sklearn.neighbors <span class=\"hljs-keyword\">import</span> KNeighborsClassifier<br><br># 定义参数的搜索范围<br>param_grid = [<br>    &#123;<br>        <span class=\"hljs-string\">'weights'</span>: [<span class=\"hljs-string\">'uniform'</span>],<br>        <span class=\"hljs-string\">'n_neighbors'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)]<br>    &#125;,<br>    &#123;<br>        <span class=\"hljs-string\">'weights'</span>: [<span class=\"hljs-string\">'distance'</span>],<br>        <span class=\"hljs-string\">'n_neighbors'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>)],<br>        <span class=\"hljs-string\">'p'</span>: [i for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)]<br>    &#125;<br>]<br><br>knn_clf = KNeighborsClassifier()<br><br># 进行网格搜索，n_jobs代表使用核的个数<br>grid_search = GridSearchCV(knn_clf, param_grid, n_jobs=<span class=\"hljs-number\">-1</span>)<br>grid_search.fit(x_train, y_train)<br><br>grid_search.best_estimator_ # 获取最佳分类器<br>grid_search.best_score_     # 获取最佳参数的准确度<br>grid_search.best_params_    # 获取最佳参数<br>knn_clf = grid_search.best_estimator_   # 将最佳分类器赋给原模型<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"归一化处理\"><a href=\"#归一化处理\" class=\"headerlink\" title=\"归一化处理\"></a>归一化处理</h3><blockquote>\n<p>即将所有数据映射到同一尺度，包括最值归一化（映射到0-1之间）与均值方差归一化（将所有数据归一到均值为0方差为1的分布中）</p>\n<p>对测试数据集进行归一化处理时，通常使用训练数据集的均值与方差等统计数据</p>\n</blockquote>\n<p>scikit-learn中使用Scaler，实现<em>均值方差归一化</em></p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">from sklearn.preprocessing <span class=\"hljs-built_in\">import</span> StandardScaler<br><br><span class=\"hljs-attr\">standardScaler</span> = StandardScaler()<br>standardScaler.fit(x_train)<br>standardScaler.mean_    <span class=\"hljs-comment\"># 不是用户传来的变量，而是用户传进去的数据计算出来的变量</span><br>standardScaler.scale_   <span class=\"hljs-comment\"># 得到标准差</span><br><span class=\"hljs-attr\">x_train</span> = standardScaler.transform(x_train)<br><span class=\"hljs-attr\">x_test</span> = standardScaler.transform(x_test)<br></code></pre></td></tr></table></figure>\n\n<p>仿照<code>sklearn</code>中的对应类实现一个均值方差归一化的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StandardScaler</span>:</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self)</span>:</span><br>        self.mean_ = <span class=\"hljs-literal\">None</span><br>        self.scale_ = <span class=\"hljs-literal\">None</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 计算X获得数据的均值与标准差 \"\"\"</span><br>        self.mean_ = np.array([np.mean(X[:, i]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>])])<br>        self.scale_ = np.array([np.std(X[:, i]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>])])<br>        <span class=\"hljs-keyword\">return</span> self<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">transform</span><span class=\"hljs-params\">(self, X)</span>:</span><br>        <span class=\"hljs-string\">\"\"\" 将X进行均值方差归一化处理 \"\"\"</span><br>        res = np.empty(shape=X.shape, dtype=float)<br>        <span class=\"hljs-keyword\">for</span> col <span class=\"hljs-keyword\">in</span> range(X.shape[<span class=\"hljs-number\">1</span>]):<br>            res[:, col] = (X[:, col] - self.mean_[col]) / self.scale_[col]<br>        <span class=\"hljs-keyword\">return</span> res<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"模型正则化\"><a href=\"#模型正则化\" class=\"headerlink\" title=\"模型正则化\"></a>模型正则化</h3><p>导致偏差：对问题本身的定义不正确（选取不相关的特征），欠拟合（线性回归天生高偏差，对数据有极强的假设）</p>\n<p>导致方差：数据的扰动会影响，模型太复杂（KNN天生高方差，对数据依赖）</p>\n<p>大多数算法具有相应的参数，可以调整偏差与方差</p>\n<p>解决高方差：降低模型复杂度、减少数据噪声、增加样本数、实验验证集、模型正则化</p>\n<p>模型正则化：限制参数的大小</p>\n"},{"title":"DeepIM：Deep Iterative Matching for 6D Pose Estimation","date":"2020-08-08T14:41:52.000Z","fileName":"deepim-summary","_content":"\n### DeepIM: Deep Iterative Matching for 6D Pose Estimation\n\n这篇论文可以理解为6d姿态估计问题中的一个refinement行为，经过测试可以使RGB数据的精度达到RGB-D数据的程度。\n\n具体可见该论文。\n\n### 主要问题\n\n鉴于直接从图像中回归得到的物体姿态精度不高，将输入图像和物体渲染得到的图像进行匹配，能够得到更加精确的结果。\n\n本文提出的DeepIM深度神经网络：给定一个初始位姿，网络能将观测图像和渲染得到的图像匹配，迭代地优化位姿。网络训练后能够预测一个相对的姿态变换，使用了一种分开表示的3D坐标和3D朝向，并且是用了一种迭代的训练过程。\n\n\n\n### 算法综述\n\n给定图像中一个物体的初始6D位姿，DeepIM能够将物体渲染得到的图像和当前观测的图像匹配，预测一个相对的SE(3)变换；之后迭代地根据估计的更为精确的位姿重新渲染物体得到渲染图像，并和观测图像相匹配，从而会变得越来越相似，使网络得到越来越精确的位姿。整体框架如下图所示：\n\n![](http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n### 网络结构\n\n**输入：**观测图像、渲染图像以及对应的蒙板区域串联形成一个8通道（观测和渲染图像各自具有3通道，蒙板具有1通道）的张量\n\n**主干网络**同时本文使用预测图像间光流的FlowNetSimple架构作为支撑网络；位姿估计分支将由FlowNetSimple网络的11层卷积层得到的特征图作为输入，之后经过2个256维的全连接层，再分别由两个全连接层得到四元数表示的3D旋转和3D平移。\n\n主干网络如下（关于光流法我也不清楚，算一个坑吧）\n\n![](http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple1.png)\n\n![](http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple2.png)\n\n\n\n**网络采用的分支（仅用于训练）：**在训练过程中，增加了两个辅助的分支来归一化网络的特征表示以提高训练的稳定性。一个分支训练后预测渲染图像和观测图像的光流，另一个分支预测观测图像的前景蒙板；\n\n![](http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png)\n\n\n\n### 损失函数\n\n以上三个分支分别对应一个损失函数，经过加权后共同构成了本文网络的损失函数，其中a=0.1，b=0.25，c=0.03\n$$\nL = aL_{pose} + bL_{flow} + cL_{mask}\n$$\n","source":"_posts/AI相关/论文阅读/DeepIM.md","raw":"---\ntitle: DeepIM：Deep Iterative Matching for 6D Pose Estimation\ndate: 2020-08-08 22:41:52\ntags:\n\t- 6dof姿态估计\ncategories:\n\t- AI相关\n\t- 论文阅读\nfileName: deepim-summary\n---\n\n### DeepIM: Deep Iterative Matching for 6D Pose Estimation\n\n这篇论文可以理解为6d姿态估计问题中的一个refinement行为，经过测试可以使RGB数据的精度达到RGB-D数据的程度。\n\n具体可见该论文。\n\n### 主要问题\n\n鉴于直接从图像中回归得到的物体姿态精度不高，将输入图像和物体渲染得到的图像进行匹配，能够得到更加精确的结果。\n\n本文提出的DeepIM深度神经网络：给定一个初始位姿，网络能将观测图像和渲染得到的图像匹配，迭代地优化位姿。网络训练后能够预测一个相对的姿态变换，使用了一种分开表示的3D坐标和3D朝向，并且是用了一种迭代的训练过程。\n\n\n\n### 算法综述\n\n给定图像中一个物体的初始6D位姿，DeepIM能够将物体渲染得到的图像和当前观测的图像匹配，预测一个相对的SE(3)变换；之后迭代地根据估计的更为精确的位姿重新渲染物体得到渲染图像，并和观测图像相匹配，从而会变得越来越相似，使网络得到越来越精确的位姿。整体框架如下图所示：\n\n![](http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n### 网络结构\n\n**输入：**观测图像、渲染图像以及对应的蒙板区域串联形成一个8通道（观测和渲染图像各自具有3通道，蒙板具有1通道）的张量\n\n**主干网络**同时本文使用预测图像间光流的FlowNetSimple架构作为支撑网络；位姿估计分支将由FlowNetSimple网络的11层卷积层得到的特征图作为输入，之后经过2个256维的全连接层，再分别由两个全连接层得到四元数表示的3D旋转和3D平移。\n\n主干网络如下（关于光流法我也不清楚，算一个坑吧）\n\n![](http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple1.png)\n\n![](http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple2.png)\n\n\n\n**网络采用的分支（仅用于训练）：**在训练过程中，增加了两个辅助的分支来归一化网络的特征表示以提高训练的稳定性。一个分支训练后预测渲染图像和观测图像的光流，另一个分支预测观测图像的前景蒙板；\n\n![](http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png)\n\n\n\n### 损失函数\n\n以上三个分支分别对应一个损失函数，经过加权后共同构成了本文网络的损失函数，其中a=0.1，b=0.25，c=0.03\n$$\nL = aL_{pose} + bL_{flow} + cL_{mask}\n$$\n","slug":"AI相关/论文阅读/DeepIM","published":1,"updated":"2021-01-11T04:45:38.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa7002drwjs4p1kg1ev","content":"<h3 id=\"DeepIM-Deep-Iterative-Matching-for-6D-Pose-Estimation\"><a href=\"#DeepIM-Deep-Iterative-Matching-for-6D-Pose-Estimation\" class=\"headerlink\" title=\"DeepIM: Deep Iterative Matching for 6D Pose Estimation\"></a>DeepIM: Deep Iterative Matching for 6D Pose Estimation</h3><p>这篇论文可以理解为6d姿态估计问题中的一个refinement行为，经过测试可以使RGB数据的精度达到RGB-D数据的程度。</p>\n<p>具体可见该论文。</p>\n<h3 id=\"主要问题\"><a href=\"#主要问题\" class=\"headerlink\" title=\"主要问题\"></a>主要问题</h3><p>鉴于直接从图像中回归得到的物体姿态精度不高，将输入图像和物体渲染得到的图像进行匹配，能够得到更加精确的结果。</p>\n<p>本文提出的DeepIM深度神经网络：给定一个初始位姿，网络能将观测图像和渲染得到的图像匹配，迭代地优化位姿。网络训练后能够预测一个相对的姿态变换，使用了一种分开表示的3D坐标和3D朝向，并且是用了一种迭代的训练过程。</p>\n<h3 id=\"算法综述\"><a href=\"#算法综述\" class=\"headerlink\" title=\"算法综述\"></a>算法综述</h3><p>给定图像中一个物体的初始6D位姿，DeepIM能够将物体渲染得到的图像和当前观测的图像匹配，预测一个相对的SE(3)变换；之后迭代地根据估计的更为精确的位姿重新渲染物体得到渲染图像，并和观测图像相匹配，从而会变得越来越相似，使网络得到越来越精确的位姿。整体框架如下图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p><strong>输入：</strong>观测图像、渲染图像以及对应的蒙板区域串联形成一个8通道（观测和渲染图像各自具有3通道，蒙板具有1通道）的张量</p>\n<p><strong>主干网络</strong>同时本文使用预测图像间光流的FlowNetSimple架构作为支撑网络；位姿估计分支将由FlowNetSimple网络的11层卷积层得到的特征图作为输入，之后经过2个256维的全连接层，再分别由两个全连接层得到四元数表示的3D旋转和3D平移。</p>\n<p>主干网络如下（关于光流法我也不清楚，算一个坑吧）</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple1.png\" alt=\"\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple2.png\" alt=\"\"></p>\n<p><strong>网络采用的分支（仅用于训练）：</strong>在训练过程中，增加了两个辅助的分支来归一化网络的特征表示以提高训练的稳定性。一个分支训练后预测渲染图像和观测图像的光流，另一个分支预测观测图像的前景蒙板；</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>以上三个分支分别对应一个损失函数，经过加权后共同构成了本文网络的损失函数，其中a=0.1，b=0.25，c=0.03<br>$$<br>L = aL_{pose} + bL_{flow} + cL_{mask}<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"DeepIM-Deep-Iterative-Matching-for-6D-Pose-Estimation\"><a href=\"#DeepIM-Deep-Iterative-Matching-for-6D-Pose-Estimation\" class=\"headerlink\" title=\"DeepIM: Deep Iterative Matching for 6D Pose Estimation\"></a>DeepIM: Deep Iterative Matching for 6D Pose Estimation</h3><p>这篇论文可以理解为6d姿态估计问题中的一个refinement行为，经过测试可以使RGB数据的精度达到RGB-D数据的程度。</p>\n<p>具体可见该论文。</p>\n<h3 id=\"主要问题\"><a href=\"#主要问题\" class=\"headerlink\" title=\"主要问题\"></a>主要问题</h3><p>鉴于直接从图像中回归得到的物体姿态精度不高，将输入图像和物体渲染得到的图像进行匹配，能够得到更加精确的结果。</p>\n<p>本文提出的DeepIM深度神经网络：给定一个初始位姿，网络能将观测图像和渲染得到的图像匹配，迭代地优化位姿。网络训练后能够预测一个相对的姿态变换，使用了一种分开表示的3D坐标和3D朝向，并且是用了一种迭代的训练过程。</p>\n<h3 id=\"算法综述\"><a href=\"#算法综述\" class=\"headerlink\" title=\"算法综述\"></a>算法综述</h3><p>给定图像中一个物体的初始6D位姿，DeepIM能够将物体渲染得到的图像和当前观测的图像匹配，预测一个相对的SE(3)变换；之后迭代地根据估计的更为精确的位姿重新渲染物体得到渲染图像，并和观测图像相匹配，从而会变得越来越相似，使网络得到越来越精确的位姿。整体框架如下图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><p><strong>输入：</strong>观测图像、渲染图像以及对应的蒙板区域串联形成一个8通道（观测和渲染图像各自具有3通道，蒙板具有1通道）的张量</p>\n<p><strong>主干网络</strong>同时本文使用预测图像间光流的FlowNetSimple架构作为支撑网络；位姿估计分支将由FlowNetSimple网络的11层卷积层得到的特征图作为输入，之后经过2个256维的全连接层，再分别由两个全连接层得到四元数表示的3D旋转和3D平移。</p>\n<p>主干网络如下（关于光流法我也不清楚，算一个坑吧）</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple1.png\" alt=\"\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/FlowNetSimple2.png\" alt=\"\"></p>\n<p><strong>网络采用的分支（仅用于训练）：</strong>在训练过程中，增加了两个辅助的分支来归一化网络的特征表示以提高训练的稳定性。一个分支训练后预测渲染图像和观测图像的光流，另一个分支预测观测图像的前景蒙板；</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DeepIM/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>以上三个分支分别对应一个损失函数，经过加权后共同构成了本文网络的损失函数，其中a=0.1，b=0.25，c=0.03<br>$$<br>L = aL_{pose} + bL_{flow} + cL_{mask}<br>$$</p>\n"},{"title":"DPOD：6D Pose Object Detector and Refiner","date":"2020-08-09T01:30:37.000Z","fileName":"DPOD-summary","_content":"\n### DPOD: 6D Pose Object Detector and Refiner\n\n提出了一种从RGB图像进行3D目标检测和6D位姿估计的深度学习方法（DPOD，Dense Pose Object Detector），即密集姿势目标检测器。\n\n用于估计输入图像和可用3D模型之间的密集2D-3D对应图，使用RANSAC与PnP解算6dof姿态，同时基于深度学习的定制细化方案对初始姿态估计值进行细化\n\n简单来讲两个贡献\n\n1、密集的2D-3D点对，比传统8个框点的对应具有更好的鲁棒性\n\n2、一个效果不错的优化器\n\n\n\n### 关键要素\n\n1、多类对象对应掩膜ID的预测（the pixel-wise prediction of the multi-class object ID masks）\n\n2、直接提供图像像素和3D模型顶点之间关系的对应映射的分类（classification of correspondence maps that directly provide a relation between image pixels and 3D model vertices）\n\n**其中第2点保证了本方法的大量的像素对应（相对于那些使用8个框点进行pnp求解的方法来讲），也是本文dense的由来吧**\n\n其中应该使用了UV的贴图技术将图像点与3D点进行对应（**UV map的使用应该是本文最大的亮点了**），但UV我只在3dmax等软件中看到过，对其原理并不理解，因此对该部分没有完全看懂。\n\n![](http://cdn.ziyedy.top/image/DPOD/%E5%AF%B9%E5%BA%94%E6%A8%A1%E5%9E%8B.png)\n\n\n\n### 整体架构\n\n![](http://cdn.ziyedy.top/image/DPOD/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png)\n\n输入：RGB图像（320×240×3）\n\n**对应模块**：编码器-解码器架构，编码器采用类似ResNet的12层架构（具有残差层，可加快收敛速度），解码器使用双线性内插和卷积层的堆叠进行上采样到原始大小\n\n输出：目标ID掩码（标识是哪个物体）与其对应2D位置；UV对应图（提供了明确的2D-3D对应关系）\n\n**姿态模块**：基于PnP+RANSAC有效计算各个6D姿势\n\n\n\n### Refinement\n\n图中绿色是已知的\n\n![](http://cdn.ziyedy.top/image/DPOD/refinement.png)\n\n结构：\n\n使用ResNet做backbone，用ImageNet权重初始化，两个分支提取完特征后相减，再送到 E2 中，然后三个分支分别回归旋转R、XY、Z，每个头都是两个FC层。\n\n\n\n\n\n### 损失函数\n\n损失函数依然使用的加权的思想，充分考虑到了三个分支的状态\n\n\n\n![](http://cdn.ziyedy.top/image/DPOD/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png)","source":"_posts/AI相关/论文阅读/DPOD.md","raw":"---\ntitle: DPOD：6D Pose Object Detector and Refiner\ndate: 2020-08-09 09:30:37\ntags:\n\t- 6dof姿态估计\ncategories:\n\t- AI相关\n\t- 论文阅读\nfileName: DPOD-summary\n---\n\n### DPOD: 6D Pose Object Detector and Refiner\n\n提出了一种从RGB图像进行3D目标检测和6D位姿估计的深度学习方法（DPOD，Dense Pose Object Detector），即密集姿势目标检测器。\n\n用于估计输入图像和可用3D模型之间的密集2D-3D对应图，使用RANSAC与PnP解算6dof姿态，同时基于深度学习的定制细化方案对初始姿态估计值进行细化\n\n简单来讲两个贡献\n\n1、密集的2D-3D点对，比传统8个框点的对应具有更好的鲁棒性\n\n2、一个效果不错的优化器\n\n\n\n### 关键要素\n\n1、多类对象对应掩膜ID的预测（the pixel-wise prediction of the multi-class object ID masks）\n\n2、直接提供图像像素和3D模型顶点之间关系的对应映射的分类（classification of correspondence maps that directly provide a relation between image pixels and 3D model vertices）\n\n**其中第2点保证了本方法的大量的像素对应（相对于那些使用8个框点进行pnp求解的方法来讲），也是本文dense的由来吧**\n\n其中应该使用了UV的贴图技术将图像点与3D点进行对应（**UV map的使用应该是本文最大的亮点了**），但UV我只在3dmax等软件中看到过，对其原理并不理解，因此对该部分没有完全看懂。\n\n![](http://cdn.ziyedy.top/image/DPOD/%E5%AF%B9%E5%BA%94%E6%A8%A1%E5%9E%8B.png)\n\n\n\n### 整体架构\n\n![](http://cdn.ziyedy.top/image/DPOD/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png)\n\n输入：RGB图像（320×240×3）\n\n**对应模块**：编码器-解码器架构，编码器采用类似ResNet的12层架构（具有残差层，可加快收敛速度），解码器使用双线性内插和卷积层的堆叠进行上采样到原始大小\n\n输出：目标ID掩码（标识是哪个物体）与其对应2D位置；UV对应图（提供了明确的2D-3D对应关系）\n\n**姿态模块**：基于PnP+RANSAC有效计算各个6D姿势\n\n\n\n### Refinement\n\n图中绿色是已知的\n\n![](http://cdn.ziyedy.top/image/DPOD/refinement.png)\n\n结构：\n\n使用ResNet做backbone，用ImageNet权重初始化，两个分支提取完特征后相减，再送到 E2 中，然后三个分支分别回归旋转R、XY、Z，每个头都是两个FC层。\n\n\n\n\n\n### 损失函数\n\n损失函数依然使用的加权的思想，充分考虑到了三个分支的状态\n\n\n\n![](http://cdn.ziyedy.top/image/DPOD/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png)","slug":"AI相关/论文阅读/DPOD","published":1,"updated":"2021-01-11T04:45:50.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa8002frwjs6nww7zlz","content":"<h3 id=\"DPOD-6D-Pose-Object-Detector-and-Refiner\"><a href=\"#DPOD-6D-Pose-Object-Detector-and-Refiner\" class=\"headerlink\" title=\"DPOD: 6D Pose Object Detector and Refiner\"></a>DPOD: 6D Pose Object Detector and Refiner</h3><p>提出了一种从RGB图像进行3D目标检测和6D位姿估计的深度学习方法（DPOD，Dense Pose Object Detector），即密集姿势目标检测器。</p>\n<p>用于估计输入图像和可用3D模型之间的密集2D-3D对应图，使用RANSAC与PnP解算6dof姿态，同时基于深度学习的定制细化方案对初始姿态估计值进行细化</p>\n<p>简单来讲两个贡献</p>\n<p>1、密集的2D-3D点对，比传统8个框点的对应具有更好的鲁棒性</p>\n<p>2、一个效果不错的优化器</p>\n<h3 id=\"关键要素\"><a href=\"#关键要素\" class=\"headerlink\" title=\"关键要素\"></a>关键要素</h3><p>1、多类对象对应掩膜ID的预测（the pixel-wise prediction of the multi-class object ID masks）</p>\n<p>2、直接提供图像像素和3D模型顶点之间关系的对应映射的分类（classification of correspondence maps that directly provide a relation between image pixels and 3D model vertices）</p>\n<p><strong>其中第2点保证了本方法的大量的像素对应（相对于那些使用8个框点进行pnp求解的方法来讲），也是本文dense的由来吧</strong></p>\n<p>其中应该使用了UV的贴图技术将图像点与3D点进行对应（<strong>UV map的使用应该是本文最大的亮点了</strong>），但UV我只在3dmax等软件中看到过，对其原理并不理解，因此对该部分没有完全看懂。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E5%AF%B9%E5%BA%94%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png\" alt=\"\"></p>\n<p>输入：RGB图像（320×240×3）</p>\n<p><strong>对应模块</strong>：编码器-解码器架构，编码器采用类似ResNet的12层架构（具有残差层，可加快收敛速度），解码器使用双线性内插和卷积层的堆叠进行上采样到原始大小</p>\n<p>输出：目标ID掩码（标识是哪个物体）与其对应2D位置；UV对应图（提供了明确的2D-3D对应关系）</p>\n<p><strong>姿态模块</strong>：基于PnP+RANSAC有效计算各个6D姿势</p>\n<h3 id=\"Refinement\"><a href=\"#Refinement\" class=\"headerlink\" title=\"Refinement\"></a>Refinement</h3><p>图中绿色是已知的</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/refinement.png\" alt=\"\"></p>\n<p>结构：</p>\n<p>使用ResNet做backbone，用ImageNet权重初始化，两个分支提取完特征后相减，再送到 E2 中，然后三个分支分别回归旋转R、XY、Z，每个头都是两个FC层。</p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>损失函数依然使用的加权的思想，充分考虑到了三个分支的状态</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"DPOD-6D-Pose-Object-Detector-and-Refiner\"><a href=\"#DPOD-6D-Pose-Object-Detector-and-Refiner\" class=\"headerlink\" title=\"DPOD: 6D Pose Object Detector and Refiner\"></a>DPOD: 6D Pose Object Detector and Refiner</h3><p>提出了一种从RGB图像进行3D目标检测和6D位姿估计的深度学习方法（DPOD，Dense Pose Object Detector），即密集姿势目标检测器。</p>\n<p>用于估计输入图像和可用3D模型之间的密集2D-3D对应图，使用RANSAC与PnP解算6dof姿态，同时基于深度学习的定制细化方案对初始姿态估计值进行细化</p>\n<p>简单来讲两个贡献</p>\n<p>1、密集的2D-3D点对，比传统8个框点的对应具有更好的鲁棒性</p>\n<p>2、一个效果不错的优化器</p>\n<h3 id=\"关键要素\"><a href=\"#关键要素\" class=\"headerlink\" title=\"关键要素\"></a>关键要素</h3><p>1、多类对象对应掩膜ID的预测（the pixel-wise prediction of the multi-class object ID masks）</p>\n<p>2、直接提供图像像素和3D模型顶点之间关系的对应映射的分类（classification of correspondence maps that directly provide a relation between image pixels and 3D model vertices）</p>\n<p><strong>其中第2点保证了本方法的大量的像素对应（相对于那些使用8个框点进行pnp求解的方法来讲），也是本文dense的由来吧</strong></p>\n<p>其中应该使用了UV的贴图技术将图像点与3D点进行对应（<strong>UV map的使用应该是本文最大的亮点了</strong>），但UV我只在3dmax等软件中看到过，对其原理并不理解，因此对该部分没有完全看懂。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E5%AF%B9%E5%BA%94%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png\" alt=\"\"></p>\n<p>输入：RGB图像（320×240×3）</p>\n<p><strong>对应模块</strong>：编码器-解码器架构，编码器采用类似ResNet的12层架构（具有残差层，可加快收敛速度），解码器使用双线性内插和卷积层的堆叠进行上采样到原始大小</p>\n<p>输出：目标ID掩码（标识是哪个物体）与其对应2D位置；UV对应图（提供了明确的2D-3D对应关系）</p>\n<p><strong>姿态模块</strong>：基于PnP+RANSAC有效计算各个6D姿势</p>\n<h3 id=\"Refinement\"><a href=\"#Refinement\" class=\"headerlink\" title=\"Refinement\"></a>Refinement</h3><p>图中绿色是已知的</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/refinement.png\" alt=\"\"></p>\n<p>结构：</p>\n<p>使用ResNet做backbone，用ImageNet权重初始化，两个分支提取完特征后相减，再送到 E2 中，然后三个分支分别回归旋转R、XY、Z，每个头都是两个FC层。</p>\n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3><p>损失函数依然使用的加权的思想，充分考虑到了三个分支的状态</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DPOD/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0.png\" alt=\"\"></p>\n"},{"title":"Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation","date":"2020-10-11T04:32:06.000Z","fileName":"nocs","_content":"\n> [CVPR 2019]Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation\n>\n> 论文地址：https://arxiv.org/abs/1901.02970\n>\n> GitHub：https://github.com/hughw19/NOCS_CVPR2019\n\n## 文章主要内容\n\n### 问题提出\n\n现有的相关6dof姿态估计方法都是instance-level的（即有目标物体的CAD模型作为先验知识）\n\n相关的三维目标检测方法能够得到目标物体的3D边界框，但缺乏精确方向\n\n### category-level的6dof姿态估计\n\n作为严格意义上6dof的类别估计下的*第一篇文章*，本文对category-level的叙述非常简单易懂，需要解决的核心问题即为**如何对同属一类的不同实例进行统一规范的表示（a shared canonical representation）**\n\n面临的主要挑战\n\n1. 在特定类别中为不同实例寻找一种能够**统一表示**其*6D信息和尺寸信息*的表示方法\n2. 现有的**数据集**很难作为训练和测试的基准（相关数据集缺乏相关注释，且很多不包含桌面级物体类别）\n\n### 本文的主要贡献\n\n针对上面两个问题，本文分别提出了相应的解决方案，相应的算法流程如下\n\n![](http://cdn.ziyedy.top/NOCS/%E6%B5%81%E7%A8%8B.png)\n\n#### 1、针对对同类物体的统一表示\n\n> 本文提出了一种NOCS的共享空间关系（Normalized Object Coordinate Spac），用于建立物体像素点与NOCS中物体的信息的对应关系\n\nNOCS是一个三维空间中的单位立方体，对给定的类别将其规范化并“放置”于该立方体当中。\n\n![](http://cdn.ziyedy.top/NOCS/NOCS.png)\n\n立方体中每个点存储的是一个3维的RGB信息，我个人认为这种思路与instance-level中的热力图的方法思路很相近，利用一种可视化的思路表示物体的朝向进而表示物体位姿（比如在NOCS中红色表示模型正前方，那么经过网络前向传播输出的NOCS图中红色最”浓“的地方就表示物体的正前方）\n\n#### 2、针对缺乏数据集的问题\n\n> 本文提出了一种CAMERA（Context-Aware MixEd ReAlity）的数据生成方法用于生成数据\n>\n> 模型来源于ShapeNet，同时创建时考虑了图像上下文（即在将模型2D投影嵌入背景前在Unity中使用灯光对其进行了渲染），并且加入了一些错误的类用以增加训练的鲁棒性\n\n\n\n## 具体方法\n\n### 网络结构\n\n> 使用Mask R-CNN作为骨架网络，并且多了三条分支用于分别估计NOCS中的RGB\n\n![](http://cdn.ziyedy.top/NOCS/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png)\n\n### 训练trick\n\n1. 将回归NOCS变为了一个分类问题（经过文章的实验验证得出改为B=32的分类问题具有最佳的性能）\n2. 在训练中没有使用深度图（作者使用COCO数据集来提高网络鲁棒性，而COCO不包含深度图）\n\n### 后序6D位姿与尺寸估计\n\n利用输出的NOCS图和深度图来进行被检测物体的6D姿态估计与尺寸大小检查。\n\n首先将深度图与RGB图对齐，之后利用输出的Mask来获得物体的3D点云Pm，同时使用NOCS图获得预测位姿Pn。之后，**估计将Pn转换为Pm的比例、旋转和平移**。对于这个7维刚性变换估计问题，作者使用Umeyama算法，而对于离群点去除，作者使用RANSAC。\n\n### 实验结果\n\n#### 在合成数据上\n\n对于50%的3D IoU，mAP为83.9%，位姿使用(5cm，5°)度量，mAP为40.9%\n\n#### 在真实数据集上\n\n对于50%的3D IoU， mAP为76.4%，位姿使用(5cm，5°)，mAP为10.2%\n\n#### 与PoseCNN进行比较\n\n使用2D重投影误差，本文的方法误差的mAP为30.2%，PoseCNN为17.2%\n\n\n\n## 文章的不足与可改进之处\n\n1. 显然，处理对称物体是6dof问题的一个难点，本文所提出的NOCS类别表示器并没有将**物体的对称性**考虑进去（只设计了处理对称物体的损失函数）\n2. 文章的输入数据是RGB-D数据，可以该进的地方在于仅使用较容易获取的RGB数据\n3. 文章中构建的NOCS表示方法仅仅利用了物体的朝向信息，而忽略了可能隐藏的刚体之间的几何等信息，处理类别个人认为应当使用网络对这些信息进行归纳与学习（新的问题）。","source":"_posts/AI相关/论文阅读/NOCS.md","raw":"---\ntitle: Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation\ndate: 2020-10-11 12:32:06\ntags:\n\t- 6dof姿态估计\ncategories:\n\t- AI相关\n\t- 论文阅读\nfileName: nocs\n---\n\n> [CVPR 2019]Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation\n>\n> 论文地址：https://arxiv.org/abs/1901.02970\n>\n> GitHub：https://github.com/hughw19/NOCS_CVPR2019\n\n## 文章主要内容\n\n### 问题提出\n\n现有的相关6dof姿态估计方法都是instance-level的（即有目标物体的CAD模型作为先验知识）\n\n相关的三维目标检测方法能够得到目标物体的3D边界框，但缺乏精确方向\n\n### category-level的6dof姿态估计\n\n作为严格意义上6dof的类别估计下的*第一篇文章*，本文对category-level的叙述非常简单易懂，需要解决的核心问题即为**如何对同属一类的不同实例进行统一规范的表示（a shared canonical representation）**\n\n面临的主要挑战\n\n1. 在特定类别中为不同实例寻找一种能够**统一表示**其*6D信息和尺寸信息*的表示方法\n2. 现有的**数据集**很难作为训练和测试的基准（相关数据集缺乏相关注释，且很多不包含桌面级物体类别）\n\n### 本文的主要贡献\n\n针对上面两个问题，本文分别提出了相应的解决方案，相应的算法流程如下\n\n![](http://cdn.ziyedy.top/NOCS/%E6%B5%81%E7%A8%8B.png)\n\n#### 1、针对对同类物体的统一表示\n\n> 本文提出了一种NOCS的共享空间关系（Normalized Object Coordinate Spac），用于建立物体像素点与NOCS中物体的信息的对应关系\n\nNOCS是一个三维空间中的单位立方体，对给定的类别将其规范化并“放置”于该立方体当中。\n\n![](http://cdn.ziyedy.top/NOCS/NOCS.png)\n\n立方体中每个点存储的是一个3维的RGB信息，我个人认为这种思路与instance-level中的热力图的方法思路很相近，利用一种可视化的思路表示物体的朝向进而表示物体位姿（比如在NOCS中红色表示模型正前方，那么经过网络前向传播输出的NOCS图中红色最”浓“的地方就表示物体的正前方）\n\n#### 2、针对缺乏数据集的问题\n\n> 本文提出了一种CAMERA（Context-Aware MixEd ReAlity）的数据生成方法用于生成数据\n>\n> 模型来源于ShapeNet，同时创建时考虑了图像上下文（即在将模型2D投影嵌入背景前在Unity中使用灯光对其进行了渲染），并且加入了一些错误的类用以增加训练的鲁棒性\n\n\n\n## 具体方法\n\n### 网络结构\n\n> 使用Mask R-CNN作为骨架网络，并且多了三条分支用于分别估计NOCS中的RGB\n\n![](http://cdn.ziyedy.top/NOCS/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png)\n\n### 训练trick\n\n1. 将回归NOCS变为了一个分类问题（经过文章的实验验证得出改为B=32的分类问题具有最佳的性能）\n2. 在训练中没有使用深度图（作者使用COCO数据集来提高网络鲁棒性，而COCO不包含深度图）\n\n### 后序6D位姿与尺寸估计\n\n利用输出的NOCS图和深度图来进行被检测物体的6D姿态估计与尺寸大小检查。\n\n首先将深度图与RGB图对齐，之后利用输出的Mask来获得物体的3D点云Pm，同时使用NOCS图获得预测位姿Pn。之后，**估计将Pn转换为Pm的比例、旋转和平移**。对于这个7维刚性变换估计问题，作者使用Umeyama算法，而对于离群点去除，作者使用RANSAC。\n\n### 实验结果\n\n#### 在合成数据上\n\n对于50%的3D IoU，mAP为83.9%，位姿使用(5cm，5°)度量，mAP为40.9%\n\n#### 在真实数据集上\n\n对于50%的3D IoU， mAP为76.4%，位姿使用(5cm，5°)，mAP为10.2%\n\n#### 与PoseCNN进行比较\n\n使用2D重投影误差，本文的方法误差的mAP为30.2%，PoseCNN为17.2%\n\n\n\n## 文章的不足与可改进之处\n\n1. 显然，处理对称物体是6dof问题的一个难点，本文所提出的NOCS类别表示器并没有将**物体的对称性**考虑进去（只设计了处理对称物体的损失函数）\n2. 文章的输入数据是RGB-D数据，可以该进的地方在于仅使用较容易获取的RGB数据\n3. 文章中构建的NOCS表示方法仅仅利用了物体的朝向信息，而忽略了可能隐藏的刚体之间的几何等信息，处理类别个人认为应当使用网络对这些信息进行归纳与学习（新的问题）。","slug":"AI相关/论文阅读/NOCS","published":1,"updated":"2021-01-11T04:46:16.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moa9002irwjs2hha8w50","content":"<blockquote>\n<p>[CVPR 2019]Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation</p>\n<p>论文地址：<a href=\"https://arxiv.org/abs/1901.02970\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1901.02970</a></p>\n<p>GitHub：<a href=\"https://github.com/hughw19/NOCS_CVPR2019\" target=\"_blank\" rel=\"noopener\">https://github.com/hughw19/NOCS_CVPR2019</a></p>\n</blockquote>\n<h2 id=\"文章主要内容\"><a href=\"#文章主要内容\" class=\"headerlink\" title=\"文章主要内容\"></a>文章主要内容</h2><h3 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h3><p>现有的相关6dof姿态估计方法都是instance-level的（即有目标物体的CAD模型作为先验知识）</p>\n<p>相关的三维目标检测方法能够得到目标物体的3D边界框，但缺乏精确方向</p>\n<h3 id=\"category-level的6dof姿态估计\"><a href=\"#category-level的6dof姿态估计\" class=\"headerlink\" title=\"category-level的6dof姿态估计\"></a>category-level的6dof姿态估计</h3><p>作为严格意义上6dof的类别估计下的<em>第一篇文章</em>，本文对category-level的叙述非常简单易懂，需要解决的核心问题即为<strong>如何对同属一类的不同实例进行统一规范的表示（a shared canonical representation）</strong></p>\n<p>面临的主要挑战</p>\n<ol>\n<li>在特定类别中为不同实例寻找一种能够<strong>统一表示</strong>其<em>6D信息和尺寸信息</em>的表示方法</li>\n<li>现有的<strong>数据集</strong>很难作为训练和测试的基准（相关数据集缺乏相关注释，且很多不包含桌面级物体类别）</li>\n</ol>\n<h3 id=\"本文的主要贡献\"><a href=\"#本文的主要贡献\" class=\"headerlink\" title=\"本文的主要贡献\"></a>本文的主要贡献</h3><p>针对上面两个问题，本文分别提出了相应的解决方案，相应的算法流程如下</p>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<h4 id=\"1、针对对同类物体的统一表示\"><a href=\"#1、针对对同类物体的统一表示\" class=\"headerlink\" title=\"1、针对对同类物体的统一表示\"></a>1、针对对同类物体的统一表示</h4><blockquote>\n<p>本文提出了一种NOCS的共享空间关系（Normalized Object Coordinate Spac），用于建立物体像素点与NOCS中物体的信息的对应关系</p>\n</blockquote>\n<p>NOCS是一个三维空间中的单位立方体，对给定的类别将其规范化并“放置”于该立方体当中。</p>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/NOCS.png\" alt=\"\"></p>\n<p>立方体中每个点存储的是一个3维的RGB信息，我个人认为这种思路与instance-level中的热力图的方法思路很相近，利用一种可视化的思路表示物体的朝向进而表示物体位姿（比如在NOCS中红色表示模型正前方，那么经过网络前向传播输出的NOCS图中红色最”浓“的地方就表示物体的正前方）</p>\n<h4 id=\"2、针对缺乏数据集的问题\"><a href=\"#2、针对缺乏数据集的问题\" class=\"headerlink\" title=\"2、针对缺乏数据集的问题\"></a>2、针对缺乏数据集的问题</h4><blockquote>\n<p>本文提出了一种CAMERA（Context-Aware MixEd ReAlity）的数据生成方法用于生成数据</p>\n<p>模型来源于ShapeNet，同时创建时考虑了图像上下文（即在将模型2D投影嵌入背景前在Unity中使用灯光对其进行了渲染），并且加入了一些错误的类用以增加训练的鲁棒性</p>\n</blockquote>\n<h2 id=\"具体方法\"><a href=\"#具体方法\" class=\"headerlink\" title=\"具体方法\"></a>具体方法</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><blockquote>\n<p>使用Mask R-CNN作为骨架网络，并且多了三条分支用于分别估计NOCS中的RGB</p>\n</blockquote>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"训练trick\"><a href=\"#训练trick\" class=\"headerlink\" title=\"训练trick\"></a>训练trick</h3><ol>\n<li>将回归NOCS变为了一个分类问题（经过文章的实验验证得出改为B=32的分类问题具有最佳的性能）</li>\n<li>在训练中没有使用深度图（作者使用COCO数据集来提高网络鲁棒性，而COCO不包含深度图）</li>\n</ol>\n<h3 id=\"后序6D位姿与尺寸估计\"><a href=\"#后序6D位姿与尺寸估计\" class=\"headerlink\" title=\"后序6D位姿与尺寸估计\"></a>后序6D位姿与尺寸估计</h3><p>利用输出的NOCS图和深度图来进行被检测物体的6D姿态估计与尺寸大小检查。</p>\n<p>首先将深度图与RGB图对齐，之后利用输出的Mask来获得物体的3D点云Pm，同时使用NOCS图获得预测位姿Pn。之后，<strong>估计将Pn转换为Pm的比例、旋转和平移</strong>。对于这个7维刚性变换估计问题，作者使用Umeyama算法，而对于离群点去除，作者使用RANSAC。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><h4 id=\"在合成数据上\"><a href=\"#在合成数据上\" class=\"headerlink\" title=\"在合成数据上\"></a>在合成数据上</h4><p>对于50%的3D IoU，mAP为83.9%，位姿使用(5cm，5°)度量，mAP为40.9%</p>\n<h4 id=\"在真实数据集上\"><a href=\"#在真实数据集上\" class=\"headerlink\" title=\"在真实数据集上\"></a>在真实数据集上</h4><p>对于50%的3D IoU， mAP为76.4%，位姿使用(5cm，5°)，mAP为10.2%</p>\n<h4 id=\"与PoseCNN进行比较\"><a href=\"#与PoseCNN进行比较\" class=\"headerlink\" title=\"与PoseCNN进行比较\"></a>与PoseCNN进行比较</h4><p>使用2D重投影误差，本文的方法误差的mAP为30.2%，PoseCNN为17.2%</p>\n<h2 id=\"文章的不足与可改进之处\"><a href=\"#文章的不足与可改进之处\" class=\"headerlink\" title=\"文章的不足与可改进之处\"></a>文章的不足与可改进之处</h2><ol>\n<li>显然，处理对称物体是6dof问题的一个难点，本文所提出的NOCS类别表示器并没有将<strong>物体的对称性</strong>考虑进去（只设计了处理对称物体的损失函数）</li>\n<li>文章的输入数据是RGB-D数据，可以该进的地方在于仅使用较容易获取的RGB数据</li>\n<li>文章中构建的NOCS表示方法仅仅利用了物体的朝向信息，而忽略了可能隐藏的刚体之间的几何等信息，处理类别个人认为应当使用网络对这些信息进行归纳与学习（新的问题）。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>[CVPR 2019]Normalized Object Coordinate Space for Category-Level 6D Object Pose and Size Estimation</p>\n<p>论文地址：<a href=\"https://arxiv.org/abs/1901.02970\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1901.02970</a></p>\n<p>GitHub：<a href=\"https://github.com/hughw19/NOCS_CVPR2019\" target=\"_blank\" rel=\"noopener\">https://github.com/hughw19/NOCS_CVPR2019</a></p>\n</blockquote>\n<h2 id=\"文章主要内容\"><a href=\"#文章主要内容\" class=\"headerlink\" title=\"文章主要内容\"></a>文章主要内容</h2><h3 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h3><p>现有的相关6dof姿态估计方法都是instance-level的（即有目标物体的CAD模型作为先验知识）</p>\n<p>相关的三维目标检测方法能够得到目标物体的3D边界框，但缺乏精确方向</p>\n<h3 id=\"category-level的6dof姿态估计\"><a href=\"#category-level的6dof姿态估计\" class=\"headerlink\" title=\"category-level的6dof姿态估计\"></a>category-level的6dof姿态估计</h3><p>作为严格意义上6dof的类别估计下的<em>第一篇文章</em>，本文对category-level的叙述非常简单易懂，需要解决的核心问题即为<strong>如何对同属一类的不同实例进行统一规范的表示（a shared canonical representation）</strong></p>\n<p>面临的主要挑战</p>\n<ol>\n<li>在特定类别中为不同实例寻找一种能够<strong>统一表示</strong>其<em>6D信息和尺寸信息</em>的表示方法</li>\n<li>现有的<strong>数据集</strong>很难作为训练和测试的基准（相关数据集缺乏相关注释，且很多不包含桌面级物体类别）</li>\n</ol>\n<h3 id=\"本文的主要贡献\"><a href=\"#本文的主要贡献\" class=\"headerlink\" title=\"本文的主要贡献\"></a>本文的主要贡献</h3><p>针对上面两个问题，本文分别提出了相应的解决方案，相应的算法流程如下</p>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/%E6%B5%81%E7%A8%8B.png\" alt=\"\"></p>\n<h4 id=\"1、针对对同类物体的统一表示\"><a href=\"#1、针对对同类物体的统一表示\" class=\"headerlink\" title=\"1、针对对同类物体的统一表示\"></a>1、针对对同类物体的统一表示</h4><blockquote>\n<p>本文提出了一种NOCS的共享空间关系（Normalized Object Coordinate Spac），用于建立物体像素点与NOCS中物体的信息的对应关系</p>\n</blockquote>\n<p>NOCS是一个三维空间中的单位立方体，对给定的类别将其规范化并“放置”于该立方体当中。</p>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/NOCS.png\" alt=\"\"></p>\n<p>立方体中每个点存储的是一个3维的RGB信息，我个人认为这种思路与instance-level中的热力图的方法思路很相近，利用一种可视化的思路表示物体的朝向进而表示物体位姿（比如在NOCS中红色表示模型正前方，那么经过网络前向传播输出的NOCS图中红色最”浓“的地方就表示物体的正前方）</p>\n<h4 id=\"2、针对缺乏数据集的问题\"><a href=\"#2、针对缺乏数据集的问题\" class=\"headerlink\" title=\"2、针对缺乏数据集的问题\"></a>2、针对缺乏数据集的问题</h4><blockquote>\n<p>本文提出了一种CAMERA（Context-Aware MixEd ReAlity）的数据生成方法用于生成数据</p>\n<p>模型来源于ShapeNet，同时创建时考虑了图像上下文（即在将模型2D投影嵌入背景前在Unity中使用灯光对其进行了渲染），并且加入了一些错误的类用以增加训练的鲁棒性</p>\n</blockquote>\n<h2 id=\"具体方法\"><a href=\"#具体方法\" class=\"headerlink\" title=\"具体方法\"></a>具体方法</h2><h3 id=\"网络结构\"><a href=\"#网络结构\" class=\"headerlink\" title=\"网络结构\"></a>网络结构</h3><blockquote>\n<p>使用Mask R-CNN作为骨架网络，并且多了三条分支用于分别估计NOCS中的RGB</p>\n</blockquote>\n<p><img src=\"http://cdn.ziyedy.top/NOCS/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"训练trick\"><a href=\"#训练trick\" class=\"headerlink\" title=\"训练trick\"></a>训练trick</h3><ol>\n<li>将回归NOCS变为了一个分类问题（经过文章的实验验证得出改为B=32的分类问题具有最佳的性能）</li>\n<li>在训练中没有使用深度图（作者使用COCO数据集来提高网络鲁棒性，而COCO不包含深度图）</li>\n</ol>\n<h3 id=\"后序6D位姿与尺寸估计\"><a href=\"#后序6D位姿与尺寸估计\" class=\"headerlink\" title=\"后序6D位姿与尺寸估计\"></a>后序6D位姿与尺寸估计</h3><p>利用输出的NOCS图和深度图来进行被检测物体的6D姿态估计与尺寸大小检查。</p>\n<p>首先将深度图与RGB图对齐，之后利用输出的Mask来获得物体的3D点云Pm，同时使用NOCS图获得预测位姿Pn。之后，<strong>估计将Pn转换为Pm的比例、旋转和平移</strong>。对于这个7维刚性变换估计问题，作者使用Umeyama算法，而对于离群点去除，作者使用RANSAC。</p>\n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3><h4 id=\"在合成数据上\"><a href=\"#在合成数据上\" class=\"headerlink\" title=\"在合成数据上\"></a>在合成数据上</h4><p>对于50%的3D IoU，mAP为83.9%，位姿使用(5cm，5°)度量，mAP为40.9%</p>\n<h4 id=\"在真实数据集上\"><a href=\"#在真实数据集上\" class=\"headerlink\" title=\"在真实数据集上\"></a>在真实数据集上</h4><p>对于50%的3D IoU， mAP为76.4%，位姿使用(5cm，5°)，mAP为10.2%</p>\n<h4 id=\"与PoseCNN进行比较\"><a href=\"#与PoseCNN进行比较\" class=\"headerlink\" title=\"与PoseCNN进行比较\"></a>与PoseCNN进行比较</h4><p>使用2D重投影误差，本文的方法误差的mAP为30.2%，PoseCNN为17.2%</p>\n<h2 id=\"文章的不足与可改进之处\"><a href=\"#文章的不足与可改进之处\" class=\"headerlink\" title=\"文章的不足与可改进之处\"></a>文章的不足与可改进之处</h2><ol>\n<li>显然，处理对称物体是6dof问题的一个难点，本文所提出的NOCS类别表示器并没有将<strong>物体的对称性</strong>考虑进去（只设计了处理对称物体的损失函数）</li>\n<li>文章的输入数据是RGB-D数据，可以该进的地方在于仅使用较容易获取的RGB数据</li>\n<li>文章中构建的NOCS表示方法仅仅利用了物体的朝向信息，而忽略了可能隐藏的刚体之间的几何等信息，处理类别个人认为应当使用网络对这些信息进行归纳与学习（新的问题）。</li>\n</ol>\n"},{"title":"Fully Convolutional Networks for Semantic Segmentation","date":"2020-03-23T03:50:01.000Z","fileName":"FCN-summary","_content":"\n### Fully Convolutional Networks for Semantic Segmentation\n\n### 核心思想\n\n建立全卷积神经网络，将经典的分类网络如AlexNet、VGG、GoogLeNet中网络结构最后的全连接层用上采样替换\n\npixelwise prediction\n\n\n\n\n\n### 主要内容\n\n1. **全卷积化**\n\n* 将经典CNN网络结构最后的全连接层替换为卷积层（即对最后一个特征图（feature）进行反卷积操作），使得输出图像与输入图像的尺寸完全一致。\n* 经典CNN网络全连接层后对图像进行分类改为了对所有像素都进行softmax分类计算。可以理解为传统分类网络将一幅图像作为一个分类样本，而FCN则将图像中的每一个像素作为分类样本。这样其实就解决了图像语义分割的问题，即进行了密集预测（dense prediction）\n\n\n\n2. 进行了对特征图的**上采样**\n\n文中主要提出了三种上采样方法\n\n1. Shift-and-Stitch\n2. decreasing subsampling\n3. Deconvolution\n\n\n\n3. 使用了**跳跃结构**（ skip architecture）\n\n> We address this by **adding skips** that combine the final prediction layer with lower layers with finer strides\n\n使用跳跃结构融合多层输出，使得网络能够预测更多的位置信息。因为在浅层网络位置信息等保留的比较好，将他们加入到深层输出中，就可以预测到更精细的信息。\n\n本文的做法为将对应的两个位置的网络进行逐元素相加的处理。","source":"_posts/AI相关/论文阅读/FCN.md","raw":"---\ntitle: Fully Convolutional Networks for Semantic Segmentation\ndate: 2020-03-23 11:50:01\ntags:\n\t- 语义分割\ncategories:\n\t- AI相关\n\t- 论文阅读\nfileName: FCN-summary\n---\n\n### Fully Convolutional Networks for Semantic Segmentation\n\n### 核心思想\n\n建立全卷积神经网络，将经典的分类网络如AlexNet、VGG、GoogLeNet中网络结构最后的全连接层用上采样替换\n\npixelwise prediction\n\n\n\n\n\n### 主要内容\n\n1. **全卷积化**\n\n* 将经典CNN网络结构最后的全连接层替换为卷积层（即对最后一个特征图（feature）进行反卷积操作），使得输出图像与输入图像的尺寸完全一致。\n* 经典CNN网络全连接层后对图像进行分类改为了对所有像素都进行softmax分类计算。可以理解为传统分类网络将一幅图像作为一个分类样本，而FCN则将图像中的每一个像素作为分类样本。这样其实就解决了图像语义分割的问题，即进行了密集预测（dense prediction）\n\n\n\n2. 进行了对特征图的**上采样**\n\n文中主要提出了三种上采样方法\n\n1. Shift-and-Stitch\n2. decreasing subsampling\n3. Deconvolution\n\n\n\n3. 使用了**跳跃结构**（ skip architecture）\n\n> We address this by **adding skips** that combine the final prediction layer with lower layers with finer strides\n\n使用跳跃结构融合多层输出，使得网络能够预测更多的位置信息。因为在浅层网络位置信息等保留的比较好，将他们加入到深层输出中，就可以预测到更精细的信息。\n\n本文的做法为将对应的两个位置的网络进行逐元素相加的处理。","slug":"AI相关/论文阅读/FCN","published":1,"updated":"2021-01-11T04:46:04.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moab002lrwjshnohht8r","content":"<h3 id=\"Fully-Convolutional-Networks-for-Semantic-Segmentation\"><a href=\"#Fully-Convolutional-Networks-for-Semantic-Segmentation\" class=\"headerlink\" title=\"Fully Convolutional Networks for Semantic Segmentation\"></a>Fully Convolutional Networks for Semantic Segmentation</h3><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>建立全卷积神经网络，将经典的分类网络如AlexNet、VGG、GoogLeNet中网络结构最后的全连接层用上采样替换</p>\n<p>pixelwise prediction</p>\n<h3 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h3><ol>\n<li><strong>全卷积化</strong></li>\n</ol>\n<ul>\n<li>将经典CNN网络结构最后的全连接层替换为卷积层（即对最后一个特征图（feature）进行反卷积操作），使得输出图像与输入图像的尺寸完全一致。</li>\n<li>经典CNN网络全连接层后对图像进行分类改为了对所有像素都进行softmax分类计算。可以理解为传统分类网络将一幅图像作为一个分类样本，而FCN则将图像中的每一个像素作为分类样本。这样其实就解决了图像语义分割的问题，即进行了密集预测（dense prediction）</li>\n</ul>\n<ol start=\"2\">\n<li>进行了对特征图的<strong>上采样</strong></li>\n</ol>\n<p>文中主要提出了三种上采样方法</p>\n<ol>\n<li>Shift-and-Stitch</li>\n<li>decreasing subsampling</li>\n<li>Deconvolution</li>\n</ol>\n<ol start=\"3\">\n<li>使用了<strong>跳跃结构</strong>（ skip architecture）</li>\n</ol>\n<blockquote>\n<p>We address this by <strong>adding skips</strong> that combine the final prediction layer with lower layers with finer strides</p>\n</blockquote>\n<p>使用跳跃结构融合多层输出，使得网络能够预测更多的位置信息。因为在浅层网络位置信息等保留的比较好，将他们加入到深层输出中，就可以预测到更精细的信息。</p>\n<p>本文的做法为将对应的两个位置的网络进行逐元素相加的处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Fully-Convolutional-Networks-for-Semantic-Segmentation\"><a href=\"#Fully-Convolutional-Networks-for-Semantic-Segmentation\" class=\"headerlink\" title=\"Fully Convolutional Networks for Semantic Segmentation\"></a>Fully Convolutional Networks for Semantic Segmentation</h3><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p>建立全卷积神经网络，将经典的分类网络如AlexNet、VGG、GoogLeNet中网络结构最后的全连接层用上采样替换</p>\n<p>pixelwise prediction</p>\n<h3 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h3><ol>\n<li><strong>全卷积化</strong></li>\n</ol>\n<ul>\n<li>将经典CNN网络结构最后的全连接层替换为卷积层（即对最后一个特征图（feature）进行反卷积操作），使得输出图像与输入图像的尺寸完全一致。</li>\n<li>经典CNN网络全连接层后对图像进行分类改为了对所有像素都进行softmax分类计算。可以理解为传统分类网络将一幅图像作为一个分类样本，而FCN则将图像中的每一个像素作为分类样本。这样其实就解决了图像语义分割的问题，即进行了密集预测（dense prediction）</li>\n</ul>\n<ol start=\"2\">\n<li>进行了对特征图的<strong>上采样</strong></li>\n</ol>\n<p>文中主要提出了三种上采样方法</p>\n<ol>\n<li>Shift-and-Stitch</li>\n<li>decreasing subsampling</li>\n<li>Deconvolution</li>\n</ol>\n<ol start=\"3\">\n<li>使用了<strong>跳跃结构</strong>（ skip architecture）</li>\n</ol>\n<blockquote>\n<p>We address this by <strong>adding skips</strong> that combine the final prediction layer with lower layers with finer strides</p>\n</blockquote>\n<p>使用跳跃结构融合多层输出，使得网络能够预测更多的位置信息。因为在浅层网络位置信息等保留的比较好，将他们加入到深层输出中，就可以预测到更精细的信息。</p>\n<p>本文的做法为将对应的两个位置的网络进行逐元素相加的处理。</p>\n"},{"title":"4、链表","date":"2020-07-17T02:45:22.000Z","fileName":"ds_linked_list","_content":"\n### 链表\n\n#### 特点\n\n链表是一个物理存储结构非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的引用链接次序实现，其示意图如下：\n\n<img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4%E3%80%81%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" style=\"zoom: 80%;\" />\n\n数据存储在节点（Node）中，主要模型如下：包括该节点存储的**元素**以及下一个节点的**地址**。\n\n```\nclass Node {\n\tE e;\n\tNode next;\n}\n```\n\n#### 与顺序表的对比\n\n**1、顺序表**\n\n优点：\n\na、空间利用率高。因为是连续存放，所以如果查找一个元素速度很快。\n\nb、存取速度快，通过下标来直接存储。\n\n缺点：\n\na、插入/删除比较麻烦。插入或者删除的时候，整个表需要遍历挪动元素来实现。\n\nb、空间有限制。因为数组长度是固定的，当需要存取的元素个数多于顺序表的个数时，就会出现溢出问题，而当元素个数远远小于当初分配的空间时，又会造成空间的浪费（动态数组进行扩容同样消耗大量运算）。\n\n**2、链表**\n\n优点：相对于动态数组通过“扩容”等操作实现动态，链表是真正的动态，不需要处理固定容量的问题。\n\n缺点：丧失了随机访问的能力（即无法通过索引进行访问）\n\n\n\n### 链表的实现\n\n#### 类内基本元素\n\n```\npublic class LinkedList<E> {\n    private class Node {\n        public E e;\n        public Node next;\n\n        public Node(E e, Node next) {\n            this.e = e;\n            this.next = next;\n        }\n\n        public Node(E e) {\n            this(e, null);\n        }\n\n        public Node() {\n            this(null, null);\n        }\n    }\n\n    private Node dummyHead;\t// 哑节点，指向链表头节点\n    int size;\n\n    public LinkedList() {\n        dummyHead = new Node(null, null);\n        size = 0;\n    }\n```\n\n\n\n#### 插入元素\n\n时间复杂度为O(n)。\n\n```\n// 在链表中间添加元素\npublic void add(int index, E e) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed\");\n    }\n    Node prev = dummyHead;\n    for (int i=0;i<index;i++) {\n        prev = prev.next;\n    }\n    prev.next = new Node(e, prev.next);\n    size++;\n}\n```\n\n\n\n#### 删除元素\n\n时间复杂度为O(n)\n\n```\n// 删除索引为index的元素\npublic E remove(int index) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed\");\n        }\n    Node prev = dummyHead;\n    for (int i=0;i<index;i++) {\n        prev = prev.next;\n    }\n    Node res = prev.next;\n    prev.next = res.next;\n    res.next = null;\n    size--;\n    return res.e;\n}\n```\n\n\n\n还有其他的一些诸如查找、修改等方法，均只需要通过遍历链表即可实现。\n\n同时需要注意，**在头部处不管插入还是删除元素都是O(1)级别**。因此使用链表作为底层结构实现栈和队列是很优越的，这在之前已经提过了。","source":"_posts/学习笔记/数据结构与算法/4、链表.md","raw":"---\ntitle: 4、链表\ndate: 2020-07-17 10:45:22\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds_linked_list\n---\n\n### 链表\n\n#### 特点\n\n链表是一个物理存储结构非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的引用链接次序实现，其示意图如下：\n\n<img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4%E3%80%81%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" style=\"zoom: 80%;\" />\n\n数据存储在节点（Node）中，主要模型如下：包括该节点存储的**元素**以及下一个节点的**地址**。\n\n```\nclass Node {\n\tE e;\n\tNode next;\n}\n```\n\n#### 与顺序表的对比\n\n**1、顺序表**\n\n优点：\n\na、空间利用率高。因为是连续存放，所以如果查找一个元素速度很快。\n\nb、存取速度快，通过下标来直接存储。\n\n缺点：\n\na、插入/删除比较麻烦。插入或者删除的时候，整个表需要遍历挪动元素来实现。\n\nb、空间有限制。因为数组长度是固定的，当需要存取的元素个数多于顺序表的个数时，就会出现溢出问题，而当元素个数远远小于当初分配的空间时，又会造成空间的浪费（动态数组进行扩容同样消耗大量运算）。\n\n**2、链表**\n\n优点：相对于动态数组通过“扩容”等操作实现动态，链表是真正的动态，不需要处理固定容量的问题。\n\n缺点：丧失了随机访问的能力（即无法通过索引进行访问）\n\n\n\n### 链表的实现\n\n#### 类内基本元素\n\n```\npublic class LinkedList<E> {\n    private class Node {\n        public E e;\n        public Node next;\n\n        public Node(E e, Node next) {\n            this.e = e;\n            this.next = next;\n        }\n\n        public Node(E e) {\n            this(e, null);\n        }\n\n        public Node() {\n            this(null, null);\n        }\n    }\n\n    private Node dummyHead;\t// 哑节点，指向链表头节点\n    int size;\n\n    public LinkedList() {\n        dummyHead = new Node(null, null);\n        size = 0;\n    }\n```\n\n\n\n#### 插入元素\n\n时间复杂度为O(n)。\n\n```\n// 在链表中间添加元素\npublic void add(int index, E e) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed\");\n    }\n    Node prev = dummyHead;\n    for (int i=0;i<index;i++) {\n        prev = prev.next;\n    }\n    prev.next = new Node(e, prev.next);\n    size++;\n}\n```\n\n\n\n#### 删除元素\n\n时间复杂度为O(n)\n\n```\n// 删除索引为index的元素\npublic E remove(int index) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed\");\n        }\n    Node prev = dummyHead;\n    for (int i=0;i<index;i++) {\n        prev = prev.next;\n    }\n    Node res = prev.next;\n    prev.next = res.next;\n    res.next = null;\n    size--;\n    return res.e;\n}\n```\n\n\n\n还有其他的一些诸如查找、修改等方法，均只需要通过遍历链表即可实现。\n\n同时需要注意，**在头部处不管插入还是删除元素都是O(1)级别**。因此使用链表作为底层结构实现栈和队列是很优越的，这在之前已经提过了。","slug":"学习笔记/数据结构与算法/4、链表","published":1,"updated":"2021-01-11T04:51:23.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moac002prwjs61mc2tpg","content":"<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>链表是一个物理存储结构非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的引用链接次序实现，其示意图如下：</p>\n<img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4%E3%80%81%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" style=\"zoom: 80%;\" />\n\n<p>数据存储在节点（Node）中，主要模型如下：包括该节点存储的<strong>元素</strong>以及下一个节点的<strong>地址</strong>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>\tE</span> e;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"与顺序表的对比\"><a href=\"#与顺序表的对比\" class=\"headerlink\" title=\"与顺序表的对比\"></a>与顺序表的对比</h4><p><strong>1、顺序表</strong></p>\n<p>优点：</p>\n<p>a、空间利用率高。因为是连续存放，所以如果查找一个元素速度很快。</p>\n<p>b、存取速度快，通过下标来直接存储。</p>\n<p>缺点：</p>\n<p>a、插入/删除比较麻烦。插入或者删除的时候，整个表需要遍历挪动元素来实现。</p>\n<p>b、空间有限制。因为数组长度是固定的，当需要存取的元素个数多于顺序表的个数时，就会出现溢出问题，而当元素个数远远小于当初分配的空间时，又会造成空间的浪费（动态数组进行扩容同样消耗大量运算）。</p>\n<p><strong>2、链表</strong></p>\n<p>优点：相对于动态数组通过“扩容”等操作实现动态，链表是真正的动态，不需要处理固定容量的问题。</p>\n<p>缺点：丧失了随机访问的能力（即无法通过索引进行访问）</p>\n<h3 id=\"链表的实现\"><a href=\"#链表的实现\" class=\"headerlink\" title=\"链表的实现\"></a>链表的实现</h3><h4 id=\"类内基本元素\"><a href=\"#类内基本元素\" class=\"headerlink\" title=\"类内基本元素\"></a>类内基本元素</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">public class LinkedList<span class=\"hljs-tag\">&lt;E&gt;</span> &#123;<br>    private class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>        public</span> E e;<br>        public <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(E</span> e, <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>) &#123;<br>            this.e = e;<br>            this.next = next;<br>        &#125;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(E</span> e) &#123;<br>            this(e, null);<br>        &#125;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">() &#123;<br>            this</span>(null, null);<br>        &#125;<br>    &#125;<br><br>    private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">dummyHead</span>;\t// 哑节点，指向链表头节点<br>    int size;<br><br>    public LinkedList() &#123;<br>        dummyHead = new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(null</span>, null);<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h4><p>时间复杂度为O(n)。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 在链表中间添加元素</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> add(<span class=\"hljs-keyword\">int</span> index, E e) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-keyword\">size</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Add failed\"</span>);<br>    &#125;<br>    Node prev = dummyHead;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++) &#123;<br>        prev = prev.<span class=\"hljs-keyword\">next</span>;<br>    &#125;<br>    prev.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">new</span> Node(e, prev.<span class=\"hljs-keyword\">next</span>);<br>    <span class=\"hljs-keyword\">size</span>++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><p>时间复杂度为O(n)</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 删除索引为index的元素</span><br><span class=\"hljs-keyword\">public</span> E remove(<span class=\"hljs-keyword\">int</span> index) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-keyword\">size</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Add failed\"</span>);<br>        &#125;<br>    Node prev = dummyHead;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++) &#123;<br>        prev = prev.<span class=\"hljs-keyword\">next</span>;<br>    &#125;<br>    Node res = prev.<span class=\"hljs-keyword\">next</span>;<br>    prev.<span class=\"hljs-keyword\">next</span> = res.<span class=\"hljs-keyword\">next</span>;<br>    res.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">size</span>--;<br>    <span class=\"hljs-keyword\">return</span> res.e;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>还有其他的一些诸如查找、修改等方法，均只需要通过遍历链表即可实现。</p>\n<p>同时需要注意，<strong>在头部处不管插入还是删除元素都是O(1)级别</strong>。因此使用链表作为底层结构实现栈和队列是很优越的，这在之前已经提过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><p>链表是一个物理存储结构非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的引用链接次序实现，其示意图如下：</p>\n<img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/4%E3%80%81%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" style=\"zoom: 80%;\" />\n\n<p>数据存储在节点（Node）中，主要模型如下：包括该节点存储的<strong>元素</strong>以及下一个节点的<strong>地址</strong>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>\tE</span> e;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"与顺序表的对比\"><a href=\"#与顺序表的对比\" class=\"headerlink\" title=\"与顺序表的对比\"></a>与顺序表的对比</h4><p><strong>1、顺序表</strong></p>\n<p>优点：</p>\n<p>a、空间利用率高。因为是连续存放，所以如果查找一个元素速度很快。</p>\n<p>b、存取速度快，通过下标来直接存储。</p>\n<p>缺点：</p>\n<p>a、插入/删除比较麻烦。插入或者删除的时候，整个表需要遍历挪动元素来实现。</p>\n<p>b、空间有限制。因为数组长度是固定的，当需要存取的元素个数多于顺序表的个数时，就会出现溢出问题，而当元素个数远远小于当初分配的空间时，又会造成空间的浪费（动态数组进行扩容同样消耗大量运算）。</p>\n<p><strong>2、链表</strong></p>\n<p>优点：相对于动态数组通过“扩容”等操作实现动态，链表是真正的动态，不需要处理固定容量的问题。</p>\n<p>缺点：丧失了随机访问的能力（即无法通过索引进行访问）</p>\n<h3 id=\"链表的实现\"><a href=\"#链表的实现\" class=\"headerlink\" title=\"链表的实现\"></a>链表的实现</h3><h4 id=\"类内基本元素\"><a href=\"#类内基本元素\" class=\"headerlink\" title=\"类内基本元素\"></a>类内基本元素</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">public class LinkedList<span class=\"hljs-tag\">&lt;E&gt;</span> &#123;<br>    private class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>        public</span> E e;<br>        public <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(E</span> e, <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">next</span>) &#123;<br>            this.e = e;<br>            this.next = next;<br>        &#125;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(E</span> e) &#123;<br>            this(e, null);<br>        &#125;<br><br>        public <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">() &#123;<br>            this</span>(null, null);<br>        &#125;<br>    &#125;<br><br>    private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">dummyHead</span>;\t// 哑节点，指向链表头节点<br>    int size;<br><br>    public LinkedList() &#123;<br>        dummyHead = new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(null</span>, null);<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h4><p>时间复杂度为O(n)。</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 在链表中间添加元素</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> add(<span class=\"hljs-keyword\">int</span> index, E e) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-keyword\">size</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Add failed\"</span>);<br>    &#125;<br>    Node prev = dummyHead;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++) &#123;<br>        prev = prev.<span class=\"hljs-keyword\">next</span>;<br>    &#125;<br>    prev.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">new</span> Node(e, prev.<span class=\"hljs-keyword\">next</span>);<br>    <span class=\"hljs-keyword\">size</span>++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><p>时间复杂度为O(n)</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 删除索引为index的元素</span><br><span class=\"hljs-keyword\">public</span> E remove(<span class=\"hljs-keyword\">int</span> index) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-keyword\">size</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Add failed\"</span>);<br>        &#125;<br>    Node prev = dummyHead;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++) &#123;<br>        prev = prev.<span class=\"hljs-keyword\">next</span>;<br>    &#125;<br>    Node res = prev.<span class=\"hljs-keyword\">next</span>;<br>    prev.<span class=\"hljs-keyword\">next</span> = res.<span class=\"hljs-keyword\">next</span>;<br>    res.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">size</span>--;<br>    <span class=\"hljs-keyword\">return</span> res.e;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>还有其他的一些诸如查找、修改等方法，均只需要通过遍历链表即可实现。</p>\n<p>同时需要注意，<strong>在头部处不管插入还是删除元素都是O(1)级别</strong>。因此使用链表作为底层结构实现栈和队列是很优越的，这在之前已经提过了。</p>\n"},{"title":"1、动态数组","date":"2020-07-05T09:52:25.000Z","fileName":"ds-dynamic-array","_content":"\n### 数组的缺陷\n\n#### 静态数组的缺陷\n\n目前为止所实现的数组类，有一个非常严重的局限性，就是这个数组实际使用的还是一个静态数组，内部容量有限。在实际使用的时候，我们往往**无法预估**要在这个数组中存入**多少个元素**。\n\n#### 解决思路\n\n构建动态数组，使得数组的容量能够随着存入的元素进行伸缩。其实现底层仍为**静态数组**。\n\n即：当元素超过数组当前容量时，对数组进行**扩容**（重新声明一个更大的数组，并将原数组中的元素迁移过去）。当元素由于删除操作远小于当前容量时，对数组容量进行缩小。\n\n\n\n### 动态数组实现\n\n#### 类内基本信息\n\n类中使用泛型\\<E>，同时使用静态数组data作为底层容器，并记录数组中元素的个数size。\n\n同时，构建实现一些基本的方法。\n\n```java\npublic class Array<E> {\n\n    private E[] data;\n    private int size;\n\n    // 有参构造函数\n    // 传入预先设置的容量\n    public Array(int capacity) {\n        data = (E[])new Object[capacity];\n        size = 0;\n    }\n\n    // 无参构造函数，默认容量为10\n    public Array() {\n        this(10);\n    }\n\n    // 获取数组中元素个数\n    public int getSize() {\n        return size;\n    }\n\n    // 获取Array中数组容量\n    public int getCapacity() {\n        return data.length;\n    }\n\n    // 判断是否为空\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n```\n\n\n\n#### 实现数组的伸缩\n\n实现数组的伸缩其实就是重新声明一个容量符合要求的数组，并将原数组中的元素拷贝进去，如下：\n\n```\n// 改变数组中容量大小\n// 传入新容量\nprivate void resize(int newCapacity) {\n    E[] newData = (E[])new Object[newCapacity];\n    for (int i=0;i<size;i++) {\n        newData[i] = data[i];\n    }\n    data = newData;\n}\n```\n\n\n\n#### 向数组中添加元素\n\n1、对输入参数进行判断，不合理抛出异常\n\n2、若原数组已经容纳不下新元素，进行上述resize操作，将新数组容量变为之前的2倍（可以指定为其他倍数）\n\n3、进行添加操作\n\n```\n// 向数组中index位置加入元素e\npublic void add(int index, E e) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed.\");\n    }\n\n    if(size == data.length) {\n        resize(2 * data.length);\n    }\n\n    for (int i=size-1;i>=index;i--) {\n        data[i+1] = data[i];\n    }\n    data[index] = e;\n    size++;\n}\n\n// 向最后添加一个元素\npublic void addLast(E e) {\n    add(size, e);\n}\n\n// 向最前添加一个元素\npublic void addFirst(E e) {\n    add(0, e);\n}\n```\n\n\n\n#### 删除元素\n\n1、对输入参数进行判断，不合理抛出异常\n\n2、若删除元素后数组容量为含有元素个数的4倍，则使用resize将数组容量改为原来的1/2（与add中倍数不同是为了避免**复杂度震荡**）\n\n3、进行删除操作\n\n```\n// 删除索引为index的元素\npublic E remove(int index) {\n    if(index<0 || index >= size) {\n        throw new IllegalArgumentException(\"Set failed\");\n    }\n    E res = data[index];\n    for (int i=index+1;i<size;i++) {\n        data[i-1] = data[i];\n    }\n    size--;\n    data[size] = null;\n\n    if (size == data.length / 4) {\n        resize(data.length / 2);\n    }\n\n    return res;\n}\n\n// 删除第一个元素\npublic E removeFirst() {\n    return remove(0);\n}\n\n// 删除最后一个元素\npublic E removeLast() {\n    return remove(size-1);\n}\n```\n\n\n\n#### 其他操作\n\n其余诸如查找索引等操作就是基本的数组操作了，直接进行实现即可。\n\n\n\n### 复杂度分析\n\n#### 复杂度震荡\n\n在之前提到过，在此进行记录其产生的具体过程：\n\n1、假设现在我们有一个数组，容量是n，并且装满了元素。\n\n2、这时候，我想添加一个元素，显然是需要进行扩容，容量变为2n，耗时O(n)的时间。\n\n3、但是此时，我又删除了一个元素触发了缩容操作，耗时O(n)的时间。\n\n4、当我们每次触发缩容或扩容操作，都会耗费O(n)额复杂度，那么这便是复杂度的震荡\n\n**解决方法：**即将缩容与扩容触发的阈值设置的不同即可。","source":"_posts/学习笔记/数据结构与算法/1、动态数组.md","raw":"---\ntitle: 1、动态数组\ndate: 2020-07-05 17:52:25\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-dynamic-array\n---\n\n### 数组的缺陷\n\n#### 静态数组的缺陷\n\n目前为止所实现的数组类，有一个非常严重的局限性，就是这个数组实际使用的还是一个静态数组，内部容量有限。在实际使用的时候，我们往往**无法预估**要在这个数组中存入**多少个元素**。\n\n#### 解决思路\n\n构建动态数组，使得数组的容量能够随着存入的元素进行伸缩。其实现底层仍为**静态数组**。\n\n即：当元素超过数组当前容量时，对数组进行**扩容**（重新声明一个更大的数组，并将原数组中的元素迁移过去）。当元素由于删除操作远小于当前容量时，对数组容量进行缩小。\n\n\n\n### 动态数组实现\n\n#### 类内基本信息\n\n类中使用泛型\\<E>，同时使用静态数组data作为底层容器，并记录数组中元素的个数size。\n\n同时，构建实现一些基本的方法。\n\n```java\npublic class Array<E> {\n\n    private E[] data;\n    private int size;\n\n    // 有参构造函数\n    // 传入预先设置的容量\n    public Array(int capacity) {\n        data = (E[])new Object[capacity];\n        size = 0;\n    }\n\n    // 无参构造函数，默认容量为10\n    public Array() {\n        this(10);\n    }\n\n    // 获取数组中元素个数\n    public int getSize() {\n        return size;\n    }\n\n    // 获取Array中数组容量\n    public int getCapacity() {\n        return data.length;\n    }\n\n    // 判断是否为空\n    public boolean isEmpty() {\n        return size == 0;\n    }\n}\n```\n\n\n\n#### 实现数组的伸缩\n\n实现数组的伸缩其实就是重新声明一个容量符合要求的数组，并将原数组中的元素拷贝进去，如下：\n\n```\n// 改变数组中容量大小\n// 传入新容量\nprivate void resize(int newCapacity) {\n    E[] newData = (E[])new Object[newCapacity];\n    for (int i=0;i<size;i++) {\n        newData[i] = data[i];\n    }\n    data = newData;\n}\n```\n\n\n\n#### 向数组中添加元素\n\n1、对输入参数进行判断，不合理抛出异常\n\n2、若原数组已经容纳不下新元素，进行上述resize操作，将新数组容量变为之前的2倍（可以指定为其他倍数）\n\n3、进行添加操作\n\n```\n// 向数组中index位置加入元素e\npublic void add(int index, E e) {\n    if(index < 0 || index > size) {\n        throw new IllegalArgumentException(\"Add failed.\");\n    }\n\n    if(size == data.length) {\n        resize(2 * data.length);\n    }\n\n    for (int i=size-1;i>=index;i--) {\n        data[i+1] = data[i];\n    }\n    data[index] = e;\n    size++;\n}\n\n// 向最后添加一个元素\npublic void addLast(E e) {\n    add(size, e);\n}\n\n// 向最前添加一个元素\npublic void addFirst(E e) {\n    add(0, e);\n}\n```\n\n\n\n#### 删除元素\n\n1、对输入参数进行判断，不合理抛出异常\n\n2、若删除元素后数组容量为含有元素个数的4倍，则使用resize将数组容量改为原来的1/2（与add中倍数不同是为了避免**复杂度震荡**）\n\n3、进行删除操作\n\n```\n// 删除索引为index的元素\npublic E remove(int index) {\n    if(index<0 || index >= size) {\n        throw new IllegalArgumentException(\"Set failed\");\n    }\n    E res = data[index];\n    for (int i=index+1;i<size;i++) {\n        data[i-1] = data[i];\n    }\n    size--;\n    data[size] = null;\n\n    if (size == data.length / 4) {\n        resize(data.length / 2);\n    }\n\n    return res;\n}\n\n// 删除第一个元素\npublic E removeFirst() {\n    return remove(0);\n}\n\n// 删除最后一个元素\npublic E removeLast() {\n    return remove(size-1);\n}\n```\n\n\n\n#### 其他操作\n\n其余诸如查找索引等操作就是基本的数组操作了，直接进行实现即可。\n\n\n\n### 复杂度分析\n\n#### 复杂度震荡\n\n在之前提到过，在此进行记录其产生的具体过程：\n\n1、假设现在我们有一个数组，容量是n，并且装满了元素。\n\n2、这时候，我想添加一个元素，显然是需要进行扩容，容量变为2n，耗时O(n)的时间。\n\n3、但是此时，我又删除了一个元素触发了缩容操作，耗时O(n)的时间。\n\n4、当我们每次触发缩容或扩容操作，都会耗费O(n)额复杂度，那么这便是复杂度的震荡\n\n**解决方法：**即将缩容与扩容触发的阈值设置的不同即可。","slug":"学习笔记/数据结构与算法/1、动态数组","published":1,"updated":"2021-01-11T04:50:59.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moae002trwjs9yv64sqk","content":"<h3 id=\"数组的缺陷\"><a href=\"#数组的缺陷\" class=\"headerlink\" title=\"数组的缺陷\"></a>数组的缺陷</h3><h4 id=\"静态数组的缺陷\"><a href=\"#静态数组的缺陷\" class=\"headerlink\" title=\"静态数组的缺陷\"></a>静态数组的缺陷</h4><p>目前为止所实现的数组类，有一个非常严重的局限性，就是这个数组实际使用的还是一个静态数组，内部容量有限。在实际使用的时候，我们往往<strong>无法预估</strong>要在这个数组中存入<strong>多少个元素</strong>。</p>\n<h4 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h4><p>构建动态数组，使得数组的容量能够随着存入的元素进行伸缩。其实现底层仍为<strong>静态数组</strong>。</p>\n<p>即：当元素超过数组当前容量时，对数组进行<strong>扩容</strong>（重新声明一个更大的数组，并将原数组中的元素迁移过去）。当元素由于删除操作远小于当前容量时，对数组容量进行缩小。</p>\n<h3 id=\"动态数组实现\"><a href=\"#动态数组实现\" class=\"headerlink\" title=\"动态数组实现\"></a>动态数组实现</h3><h4 id=\"类内基本信息\"><a href=\"#类内基本信息\" class=\"headerlink\" title=\"类内基本信息\"></a>类内基本信息</h4><p>类中使用泛型&lt;E&gt;，同时使用静态数组data作为底层容器，并记录数组中元素的个数size。</p>\n<p>同时，构建实现一些基本的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Array</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> E[] data;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> size;<br><br>    <span class=\"hljs-comment\">// 有参构造函数</span><br>    <span class=\"hljs-comment\">// 传入预先设置的容量</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Array</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = (E[])<span class=\"hljs-keyword\">new</span> Object[capacity];<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 无参构造函数，默认容量为10</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Array</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-number\">10</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取数组中元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取Array中数组容量</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断是否为空</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size == <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"实现数组的伸缩\"><a href=\"#实现数组的伸缩\" class=\"headerlink\" title=\"实现数组的伸缩\"></a>实现数组的伸缩</h4><p>实现数组的伸缩其实就是重新声明一个容量符合要求的数组，并将原数组中的元素拷贝进去，如下：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 改变数组中容量大小</span><br><span class=\"hljs-comment\">// 传入新容量</span><br><span class=\"hljs-keyword\">private</span> void resize(int <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Capacity</span>) &#123;<br>    E[] <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span> = (E[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Object</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Capacity</span>];<br>    <span class=\"hljs-keyword\">for</span> (int i=<span class=\"hljs-number\">0</span>;i&lt;size;i++) &#123;<br>        <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span>[i] = data[i];<br>    &#125;<br>    data = <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h4><p>1、对输入参数进行判断，不合理抛出异常</p>\n<p>2、若原数组已经容纳不下新元素，进行上述resize操作，将新数组容量变为之前的2倍（可以指定为其他倍数）</p>\n<p>3、进行添加操作</p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\"><span class=\"hljs-comment\">// 向数组中index位置加入元素e</span><br>public <span class=\"hljs-keyword\">void</span> add(<span class=\"hljs-keyword\">int</span> index, E <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-built_in\">size</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Add failed.\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">size</span> == <span class=\"hljs-title\">data</span>.length) &#123;<br>        resize(<span class=\"hljs-number\">2</span> * <span class=\"hljs-title\">data</span>.length);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-built_in\">size</span>-<span class=\"hljs-number\">1</span>;i&gt;=index;i--) &#123;<br>        <span class=\"hljs-title\">data</span>[i+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-title\">data</span>[i];<br>    &#125;<br>    <span class=\"hljs-title\">data</span>[index] = <span class=\"hljs-built_in\">e</span>;<br>    <span class=\"hljs-built_in\">size</span>++;<br>&#125;<br><br><span class=\"hljs-comment\">// 向最后添加一个元素</span><br>public <span class=\"hljs-keyword\">void</span> addLast(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    add(<span class=\"hljs-built_in\">size</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 向最前添加一个元素</span><br>public <span class=\"hljs-keyword\">void</span> addFirst(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    add(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><p>1、对输入参数进行判断，不合理抛出异常</p>\n<p>2、若删除元素后数组容量为含有元素个数的4倍，则使用resize将数组容量改为原来的1/2（与add中倍数不同是为了避免<strong>复杂度震荡</strong>）</p>\n<p>3、进行删除操作</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">// 删除索引为<span class=\"hljs-built_in\">index</span>的元素<br><span class=\"hljs-keyword\">public</span> E remove(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">index</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">index</span>&lt;<span class=\"hljs-number\">0</span> || <span class=\"hljs-built_in\">index</span> &gt;= <span class=\"hljs-built_in\">size</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Set failed\"</span>);<br>    &#125;<br>    E res = <span class=\"hljs-keyword\">data</span>[<span class=\"hljs-built_in\">index</span>];<br>    for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-built_in\">index</span>+<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-built_in\">size</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">data</span>[i-<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">data</span>[i];<br>    &#125;<br>    <span class=\"hljs-built_in\">size</span>--;<br>    <span class=\"hljs-keyword\">data</span>[<span class=\"hljs-built_in\">size</span>] = null;<br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">size</span> == <span class=\"hljs-keyword\">data</span>.length / <span class=\"hljs-number\">4</span>) &#123;<br>        resize(<span class=\"hljs-keyword\">data</span>.length / <span class=\"hljs-number\">2</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><br>// 删除第一个元素<br><span class=\"hljs-keyword\">public</span> E removeFirst() &#123;<br>    <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-number\">0</span>);<br>&#125;<br><br>// 删除最后一个元素<br><span class=\"hljs-keyword\">public</span> E removeLast() &#123;<br>    <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-built_in\">size</span>-<span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><p>其余诸如查找索引等操作就是基本的数组操作了，直接进行实现即可。</p>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><h4 id=\"复杂度震荡\"><a href=\"#复杂度震荡\" class=\"headerlink\" title=\"复杂度震荡\"></a>复杂度震荡</h4><p>在之前提到过，在此进行记录其产生的具体过程：</p>\n<p>1、假设现在我们有一个数组，容量是n，并且装满了元素。</p>\n<p>2、这时候，我想添加一个元素，显然是需要进行扩容，容量变为2n，耗时O(n)的时间。</p>\n<p>3、但是此时，我又删除了一个元素触发了缩容操作，耗时O(n)的时间。</p>\n<p>4、当我们每次触发缩容或扩容操作，都会耗费O(n)额复杂度，那么这便是复杂度的震荡</p>\n<p><strong>解决方法：</strong>即将缩容与扩容触发的阈值设置的不同即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组的缺陷\"><a href=\"#数组的缺陷\" class=\"headerlink\" title=\"数组的缺陷\"></a>数组的缺陷</h3><h4 id=\"静态数组的缺陷\"><a href=\"#静态数组的缺陷\" class=\"headerlink\" title=\"静态数组的缺陷\"></a>静态数组的缺陷</h4><p>目前为止所实现的数组类，有一个非常严重的局限性，就是这个数组实际使用的还是一个静态数组，内部容量有限。在实际使用的时候，我们往往<strong>无法预估</strong>要在这个数组中存入<strong>多少个元素</strong>。</p>\n<h4 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h4><p>构建动态数组，使得数组的容量能够随着存入的元素进行伸缩。其实现底层仍为<strong>静态数组</strong>。</p>\n<p>即：当元素超过数组当前容量时，对数组进行<strong>扩容</strong>（重新声明一个更大的数组，并将原数组中的元素迁移过去）。当元素由于删除操作远小于当前容量时，对数组容量进行缩小。</p>\n<h3 id=\"动态数组实现\"><a href=\"#动态数组实现\" class=\"headerlink\" title=\"动态数组实现\"></a>动态数组实现</h3><h4 id=\"类内基本信息\"><a href=\"#类内基本信息\" class=\"headerlink\" title=\"类内基本信息\"></a>类内基本信息</h4><p>类中使用泛型&lt;E&gt;，同时使用静态数组data作为底层容器，并记录数组中元素的个数size。</p>\n<p>同时，构建实现一些基本的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Array</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> E[] data;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> size;<br><br>    <span class=\"hljs-comment\">// 有参构造函数</span><br>    <span class=\"hljs-comment\">// 传入预先设置的容量</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Array</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = (E[])<span class=\"hljs-keyword\">new</span> Object[capacity];<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 无参构造函数，默认容量为10</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Array</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-number\">10</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取数组中元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取Array中数组容量</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断是否为空</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> size == <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"实现数组的伸缩\"><a href=\"#实现数组的伸缩\" class=\"headerlink\" title=\"实现数组的伸缩\"></a>实现数组的伸缩</h4><p>实现数组的伸缩其实就是重新声明一个容量符合要求的数组，并将原数组中的元素拷贝进去，如下：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-comment\">// 改变数组中容量大小</span><br><span class=\"hljs-comment\">// 传入新容量</span><br><span class=\"hljs-keyword\">private</span> void resize(int <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Capacity</span>) &#123;<br>    E[] <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span> = (E[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Object</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Capacity</span>];<br>    <span class=\"hljs-keyword\">for</span> (int i=<span class=\"hljs-number\">0</span>;i&lt;size;i++) &#123;<br>        <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span>[i] = data[i];<br>    &#125;<br>    data = <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Data</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"向数组中添加元素\"><a href=\"#向数组中添加元素\" class=\"headerlink\" title=\"向数组中添加元素\"></a>向数组中添加元素</h4><p>1、对输入参数进行判断，不合理抛出异常</p>\n<p>2、若原数组已经容纳不下新元素，进行上述resize操作，将新数组容量变为之前的2倍（可以指定为其他倍数）</p>\n<p>3、进行添加操作</p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\"><span class=\"hljs-comment\">// 向数组中index位置加入元素e</span><br>public <span class=\"hljs-keyword\">void</span> add(<span class=\"hljs-keyword\">int</span> index, E <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(index &lt; <span class=\"hljs-number\">0</span> || index &gt; <span class=\"hljs-built_in\">size</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Add failed.\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">size</span> == <span class=\"hljs-title\">data</span>.length) &#123;<br>        resize(<span class=\"hljs-number\">2</span> * <span class=\"hljs-title\">data</span>.length);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-built_in\">size</span>-<span class=\"hljs-number\">1</span>;i&gt;=index;i--) &#123;<br>        <span class=\"hljs-title\">data</span>[i+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-title\">data</span>[i];<br>    &#125;<br>    <span class=\"hljs-title\">data</span>[index] = <span class=\"hljs-built_in\">e</span>;<br>    <span class=\"hljs-built_in\">size</span>++;<br>&#125;<br><br><span class=\"hljs-comment\">// 向最后添加一个元素</span><br>public <span class=\"hljs-keyword\">void</span> addLast(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    add(<span class=\"hljs-built_in\">size</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 向最前添加一个元素</span><br>public <span class=\"hljs-keyword\">void</span> addFirst(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    add(<span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><p>1、对输入参数进行判断，不合理抛出异常</p>\n<p>2、若删除元素后数组容量为含有元素个数的4倍，则使用resize将数组容量改为原来的1/2（与add中倍数不同是为了避免<strong>复杂度震荡</strong>）</p>\n<p>3、进行删除操作</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">// 删除索引为<span class=\"hljs-built_in\">index</span>的元素<br><span class=\"hljs-keyword\">public</span> E remove(<span class=\"hljs-built_in\">int</span> <span class=\"hljs-built_in\">index</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">index</span>&lt;<span class=\"hljs-number\">0</span> || <span class=\"hljs-built_in\">index</span> &gt;= <span class=\"hljs-built_in\">size</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Set failed\"</span>);<br>    &#125;<br>    E res = <span class=\"hljs-keyword\">data</span>[<span class=\"hljs-built_in\">index</span>];<br>    for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-built_in\">index</span>+<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-built_in\">size</span>;i++) &#123;<br>        <span class=\"hljs-keyword\">data</span>[i-<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">data</span>[i];<br>    &#125;<br>    <span class=\"hljs-built_in\">size</span>--;<br>    <span class=\"hljs-keyword\">data</span>[<span class=\"hljs-built_in\">size</span>] = null;<br><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">size</span> == <span class=\"hljs-keyword\">data</span>.length / <span class=\"hljs-number\">4</span>) &#123;<br>        resize(<span class=\"hljs-keyword\">data</span>.length / <span class=\"hljs-number\">2</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> res;<br>&#125;<br><br>// 删除第一个元素<br><span class=\"hljs-keyword\">public</span> E removeFirst() &#123;<br>    <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-number\">0</span>);<br>&#125;<br><br>// 删除最后一个元素<br><span class=\"hljs-keyword\">public</span> E removeLast() &#123;<br>    <span class=\"hljs-keyword\">return</span> remove(<span class=\"hljs-built_in\">size</span>-<span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><p>其余诸如查找索引等操作就是基本的数组操作了，直接进行实现即可。</p>\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><h4 id=\"复杂度震荡\"><a href=\"#复杂度震荡\" class=\"headerlink\" title=\"复杂度震荡\"></a>复杂度震荡</h4><p>在之前提到过，在此进行记录其产生的具体过程：</p>\n<p>1、假设现在我们有一个数组，容量是n，并且装满了元素。</p>\n<p>2、这时候，我想添加一个元素，显然是需要进行扩容，容量变为2n，耗时O(n)的时间。</p>\n<p>3、但是此时，我又删除了一个元素触发了缩容操作，耗时O(n)的时间。</p>\n<p>4、当我们每次触发缩容或扩容操作，都会耗费O(n)额复杂度，那么这便是复杂度的震荡</p>\n<p><strong>解决方法：</strong>即将缩容与扩容触发的阈值设置的不同即可。</p>\n"},{"title":"2、栈","date":"2020-07-06T03:08:00.000Z","fileName":"ds-stack","_content":"\n### 基本特性\n\n#### 特性\n\n栈的特性无非也就是**后进先出（LIFO）**。\n\n其为操作受限的线性表，其主要特点就是栈的插入与删除只能在栈顶进行，分别对应进栈（push）与出栈（pop）两个操作。\n\n#### 用处\n\n首先想到的当然就是系统栈、递归、深度优先搜索了，除此之外还有很多。\n\n#### 需要实现的基本内容\n\n在Java语言中，实现一个栈的接口表示一个栈需要的基本方法，如下：\n\n```\npublic interface Stack<E> {\n    int getSize();\t// 获取元素个数\n    boolean isEmpty();\t// 判断栈是否为空\n    void push(E e);\t// 入栈操作\n    E pop();\t// 出栈操作\n    E peek();\t// 获取栈顶元素\n}\n```\n\n栈主要有两种存储方法，即**线性存储**（底层是动态数组）与**链接存储**（底层为链表），之后分别记录这两种栈的实现方法。\n\n\n\n### 线性存储\n\n存储实现如下，直接套用之前在《1、动态数组》实现的动态数组即可，之后按照类的定义进行实现，代码如下：\n\n```\npublic class ArrayStack<E> implements Stack<E> {\n\n    Array<E> array;\n\n    public ArrayStack(int caoacity) {\n        array = new Array<>(caoacity);\n    }\n\n    public ArrayStack() {\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize() {\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return array.isEmpty();\n    }\n\n    @Override\n    public void push(E e) {\n        array.addLast(e);\n    }\n\n    @Override\n    public E pop() {\n        return array.removeLast();\n    }\n\n    @Override\n    public E peek() {\n        return array.getLast();\n    }\n\n    public int getCapacity() {\n        return array.getCapacity();\n    }\n\n}\n```\n\n\n\n### 链接存储\n\n套用在《4、链表》中实现的链表作为底层数据结构即可进行实现，代码如下：\n\n使用链接存储时栈顶为链表的头，这是由于删除链表的头元素的时间复杂度为O(1)，而要删除链表最后一个元素时间复杂度为O(n)。\n\n```\npublic class LinkedListStack<E> implements Stack<E> {\n\n    private LinkedList<E> list;\n\n    public LinkedListStack() {\n        list = new LinkedList<>();\n    }\n\n    @Override\n    public int getSize() {\n        return list.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    @Override\n    public void push(E e) {\n        list.addFirst(e);\n    }\n\n    @Override\n    public E pop() {\n        return list.removeFirst();\n    }\n\n    @Override\n    public E peek() {\n        return list.getFirst();\n    }\n\n}\n```\n","source":"_posts/学习笔记/数据结构与算法/2、栈.md","raw":"---\ntitle: 2、栈\ndate: 2020-07-06 11:08:00\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-stack\n---\n\n### 基本特性\n\n#### 特性\n\n栈的特性无非也就是**后进先出（LIFO）**。\n\n其为操作受限的线性表，其主要特点就是栈的插入与删除只能在栈顶进行，分别对应进栈（push）与出栈（pop）两个操作。\n\n#### 用处\n\n首先想到的当然就是系统栈、递归、深度优先搜索了，除此之外还有很多。\n\n#### 需要实现的基本内容\n\n在Java语言中，实现一个栈的接口表示一个栈需要的基本方法，如下：\n\n```\npublic interface Stack<E> {\n    int getSize();\t// 获取元素个数\n    boolean isEmpty();\t// 判断栈是否为空\n    void push(E e);\t// 入栈操作\n    E pop();\t// 出栈操作\n    E peek();\t// 获取栈顶元素\n}\n```\n\n栈主要有两种存储方法，即**线性存储**（底层是动态数组）与**链接存储**（底层为链表），之后分别记录这两种栈的实现方法。\n\n\n\n### 线性存储\n\n存储实现如下，直接套用之前在《1、动态数组》实现的动态数组即可，之后按照类的定义进行实现，代码如下：\n\n```\npublic class ArrayStack<E> implements Stack<E> {\n\n    Array<E> array;\n\n    public ArrayStack(int caoacity) {\n        array = new Array<>(caoacity);\n    }\n\n    public ArrayStack() {\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize() {\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return array.isEmpty();\n    }\n\n    @Override\n    public void push(E e) {\n        array.addLast(e);\n    }\n\n    @Override\n    public E pop() {\n        return array.removeLast();\n    }\n\n    @Override\n    public E peek() {\n        return array.getLast();\n    }\n\n    public int getCapacity() {\n        return array.getCapacity();\n    }\n\n}\n```\n\n\n\n### 链接存储\n\n套用在《4、链表》中实现的链表作为底层数据结构即可进行实现，代码如下：\n\n使用链接存储时栈顶为链表的头，这是由于删除链表的头元素的时间复杂度为O(1)，而要删除链表最后一个元素时间复杂度为O(n)。\n\n```\npublic class LinkedListStack<E> implements Stack<E> {\n\n    private LinkedList<E> list;\n\n    public LinkedListStack() {\n        list = new LinkedList<>();\n    }\n\n    @Override\n    public int getSize() {\n        return list.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n\n    @Override\n    public void push(E e) {\n        list.addFirst(e);\n    }\n\n    @Override\n    public E pop() {\n        return list.removeFirst();\n    }\n\n    @Override\n    public E peek() {\n        return list.getFirst();\n    }\n\n}\n```\n","slug":"学习笔记/数据结构与算法/2、栈","published":1,"updated":"2021-01-11T04:51:08.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moag002wrwjs9tnzcupg","content":"<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>栈的特性无非也就是<strong>后进先出（LIFO）</strong>。</p>\n<p>其为操作受限的线性表，其主要特点就是栈的插入与删除只能在栈顶进行，分别对应进栈（push）与出栈（pop）两个操作。</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>首先想到的当然就是系统栈、递归、深度优先搜索了，除此之外还有很多。</p>\n<h4 id=\"需要实现的基本内容\"><a href=\"#需要实现的基本内容\" class=\"headerlink\" title=\"需要实现的基本内容\"></a>需要实现的基本内容</h4><p>在Java语言中，实现一个栈的接口表示一个栈需要的基本方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Stack</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 判断栈是否为空</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span></span>;\t<span class=\"hljs-comment\">// 入栈操作</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 出栈操作</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取栈顶元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>栈主要有两种存储方法，即<strong>线性存储</strong>（底层是动态数组）与<strong>链接存储</strong>（底层为链表），之后分别记录这两种栈的实现方法。</p>\n<h3 id=\"线性存储\"><a href=\"#线性存储\" class=\"headerlink\" title=\"线性存储\"></a>线性存储</h3><p>存储实现如下，直接套用之前在《1、动态数组》实现的动态数组即可，之后按照类的定义进行实现，代码如下：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayStack</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Stack</span>&lt;E&gt; &#123;</span><br><br>    Array&lt;E&gt; <span class=\"hljs-built_in\">array</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayStack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> caoacity)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(caoacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayStack</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.isEmpty();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span>.addLast(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.removeLast();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getLast();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getCapacity();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链接存储\"><a href=\"#链接存储\" class=\"headerlink\" title=\"链接存储\"></a>链接存储</h3><p>套用在《4、链表》中实现的链表作为底层数据结构即可进行实现，代码如下：</p>\n<p>使用链接存储时栈顶为链表的头，这是由于删除链表的头元素的时间复杂度为O(1)，而要删除链表最后一个元素时间复杂度为O(n)。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListStack</span>&lt;<span class=\"hljs-title\">E</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Stack</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;E&gt; list;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedListStack</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        list = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        list.addFirst(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">removeFirst</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">getFirst</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>栈的特性无非也就是<strong>后进先出（LIFO）</strong>。</p>\n<p>其为操作受限的线性表，其主要特点就是栈的插入与删除只能在栈顶进行，分别对应进栈（push）与出栈（pop）两个操作。</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>首先想到的当然就是系统栈、递归、深度优先搜索了，除此之外还有很多。</p>\n<h4 id=\"需要实现的基本内容\"><a href=\"#需要实现的基本内容\" class=\"headerlink\" title=\"需要实现的基本内容\"></a>需要实现的基本内容</h4><p>在Java语言中，实现一个栈的接口表示一个栈需要的基本方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Stack</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 判断栈是否为空</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span></span>;\t<span class=\"hljs-comment\">// 入栈操作</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 出栈操作</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取栈顶元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>栈主要有两种存储方法，即<strong>线性存储</strong>（底层是动态数组）与<strong>链接存储</strong>（底层为链表），之后分别记录这两种栈的实现方法。</p>\n<h3 id=\"线性存储\"><a href=\"#线性存储\" class=\"headerlink\" title=\"线性存储\"></a>线性存储</h3><p>存储实现如下，直接套用之前在《1、动态数组》实现的动态数组即可，之后按照类的定义进行实现，代码如下：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayStack</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Stack</span>&lt;E&gt; &#123;</span><br><br>    Array&lt;E&gt; <span class=\"hljs-built_in\">array</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayStack</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> caoacity)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(caoacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayStack</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.isEmpty();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span>.addLast(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.removeLast();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getLast();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getCapacity();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链接存储\"><a href=\"#链接存储\" class=\"headerlink\" title=\"链接存储\"></a>链接存储</h3><p>套用在《4、链表》中实现的链表作为底层数据结构即可进行实现，代码如下：</p>\n<p>使用链接存储时栈顶为链表的头，这是由于删除链表的头元素的时间复杂度为O(1)，而要删除链表最后一个元素时间复杂度为O(n)。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListStack</span>&lt;<span class=\"hljs-title\">E</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Stack</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;E&gt; list;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedListStack</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        list = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        list.addFirst(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">removeFirst</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">peek</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> list.<span class=\"hljs-title\">getFirst</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"3、队列","date":"2020-07-14T03:32:36.000Z","fileName":"ds-queue","_content":"\n### 基本特性\n\n#### 特性\n\n与栈相反，队列的基本特性为**先入先出（FIFO）**。\n\n其与栈相同，也是一种线性表，允许在队尾插入元素，在队头删除元素。\n\n#### 用处\n\n首先想到的就是操作系统中的进程调度方法？还有当然就是广度优先遍历了。\n\n#### 需要实现的基本内容 \n\n实现队列可以构建相应的接口，其需要实现的方法如下：\n\n```\npublic interface Queue<E> {\n    int getSize();\n    boolean isEmpty();\n    void enqueue(E e);\t// 入队列\n    E dequeue();\t// 出队列\n    E getFront();\t// 获取队首元素\n}\n```\n\n队列有三种实现方法，分别是线性存储（底层数据结构为动态数组，根据实现思路区别可分为**顺序队列**与**循环队列**），链式存储（底层数据结构为链表）\n\n\n\n### 顺序队列\n\n与栈的相应实现方法相同。\n\n```\npublic class ArrayQueue<E> implements Queue<E> {\n\n    private Array<E> array;\n\n    public ArrayQueue(int capacity) {\n        array = new Array<>(capacity);\n    }\n\n    public ArrayQueue() {\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize() {\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return array.isEmpty();\n    }\n\n    @Override\n    public void enqueue(E e) {\n        array.addLast(e);\n    }\n\n    @Override\n    public E dequeue() {\n        return array.removeFirst();\n    }\n\n    @Override\n    public E getFront() {\n        return array.getFirst();\n    }\n\n}\n```\n\n\n\n### 循环队列\n\n#### 实现思路\n\n顺序队列有一个弊端，就是当出队列操作后，动态数组的前面会产生很大的空隙，造成内存的浪费。为了解决这个问题，提出了循环队列的思想，其核心思想就是分别使用**front**和**tail**记录队列的队头和队尾，具体思路见如下示意图（图来源于网上）。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3%E3%80%81%E9%98%9F%E5%88%97%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.jpg)\n\n其中，为避免队列为空与队列为满产生的条件判断重叠（即都为front==tail），我们可以将队列满的条件设置为tail+1==front（即留出一个空间不进行使用）。\n\n除此之外，由于是“循环”队列，因此tail可能小于front，因此需要使用(tail) % (data.length)的形式对相关逻辑进行判断\n\n\n\n#### 具体实现\n\n具体实现如下\n\n```\npublic class LoopQueue<E> implements Queue<E> {\n\n    private E[] data;\n    private int front, tail;\n    private int size;\n\n    public LoopQueue(int capacity) {\n        data = (E[])new Object[capacity+1];\n        front = 0;\n        tail = 0;\n        size = 0;\n    }\n\n    public LoopQueue() {\n        this(10);\n    }\n\n    public int getCapacity() {\n        return data.length - 1;\n    }\n\n\n    @Override\n    public int getSize() {\n        return size;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return front==tail;\n    }\n\n    @Override\n    public void enqueue(E e) {\n    \t// 判断队列满了的条件\n        if((tail+1)%data.length == front) {\n            resize(getCapacity() * 2);\n        }\n        data[tail] = e;\n        tail = (tail + 1) % data.length;\t// 对tail进行更新\n        size++;\n    }\n\n    @Override\n    public E dequeue() {\n        if(isEmpty()) {\n            throw new IllegalArgumentException(\"Queue is empty\");\n        }\n        E res = data[front];\n        data[front] = null;\n        front = (front+1) % data.length;\n        size--;\n        if(size == getCapacity() / 4 && getCapacity() / 2 != 0) {\n            resize(getCapacity() / 2);\n        }\n        return res;\n    }\n\n    @Override\n    public E getFront() {\n        return data[front];\n    }\n\n    private void resize(int newCapacity) {\n        E[] newData = (E[])new Object[newCapacity + 1];\n        for(int i=0;i<size;i++) {\n            newData[i] = data[(i + front) % data.length];\n        }\n        data = newData;\n        front = 0;\n        tail = size;\n    }\n}\n```\n\n\n\n### 链式队列\n\n#### 实现分析\n\n需要记录队列的队首head与队尾tail。其中队首对应链表头（删除方便），队尾对应链表尾。\n\n#### 具体实现\n\n1、类中基础属性\n\n```\npublic class LinkedListQueue<E> implements Queue<E> {\n\n\t// 定义链表的节点，作为内部类\n    private class Node {\n        public E e;\n        public Node next;\n\n        public Node(E e, Node next) {\n            this.e = e;\n            this.next = next;\n        }\n\n        public Node(E e) {\n            this(e, null);\n        }\n\n        public Node() {\n            this(null, null);\n        }\n    }\n\n    private Node head, tail;\n    private int size;\n\n    public LinkedListQueue() {\n        head = null;\n        tail = null;\n        size = 0;\n    }\n}\n```\n\n2、入队列\n\n```\n@Override\npublic void enqueue(E e) {\n    if(tail==null) {\n        tail = new Node(e);\n        head = tail;\n    }\n    else {\n        tail.next = new Node(e);\n        tail = tail.next;\n    }\n    size++;\n}\n```\n\n3、出队列\n\n```\n@Override\npublic E dequeue() {\n    if(isEmpty()) {\n        throw new IllegalArgumentException(\"Can not\");\n    }\n    Node res = head;\n    head = head.next;\n    res.next = null;\n    if(head == null) {\n        tail = null;\n    }\n    size--;\n    return res.e;\n}\n```\n\n其余方法略\n\n\n\n### 复杂度分析与测试\n\n#### 复杂度分析\n\n不同队列实现方式的差距主要体现在出队中。\n\n其中顺序队列的出队的时间复杂度为O(n)，而循环队列与链接队列出队的时间复杂度为O(1)。\n\n#### 复杂度测试\n\n```\nimport java.util.Random;\n\npublic class Main {\n\n\t// 用于计算运行时间\n    private static double testQueue(Queue<Integer> q, int opCount) \t   {\n        long startTime = System.nanoTime();\n\n        Random random = new Random();\n        for(int i=0; i<opCount;i++) {\n            q.enqueue(random.nextInt(Integer.MAX_VALUE));\n        }\n        for(int i=0; i<opCount;i++) {\n            q.dequeue();\n        }\n\n        long endTime = System.nanoTime();\n        return (endTime - startTime) / 1000000000.0;\n    }\n\n    public static void main(String[] args) {\n        int opCount = 100000;\n        ArrayQueue<Integer> arrayQueue = new ArrayQueue<>();\n        double time1 = testQueue(arrayQueue, opCount);\n        LoopQueue<Integer> loopQueue = new LoopQueue<>();\n        double time2 = testQueue(loopQueue,opCount);\n        LinkedListQueue<Integer> linkedListQueue = new LinkedListQueue<>();\n        double time3 = testQueue(linkedListQueue,opCount);\n        System.out.println(\"ArrayQueue: \"+time1+\" s\");\n        System.out.println(\"LoopQueue: \"+time2+\" s\");\n        System.out.println(\"LinkListQueue: \"+time3+\" s\");\n    }\n}\n///////////////////////////////////////////\nArrayQueue: 45.9780233 s\nLoopQueue: 0.0132119 s\nLinkListQueue: 0.0092766 s\n```\n\n由此可以看出，当操作数达到一定级别时，顺序队列的实现方式的速度要远小于其他两种实现方法。这与之前的分析是吻合的。","source":"_posts/学习笔记/数据结构与算法/3、队列.md","raw":"---\ntitle: 3、队列\ndate: 2020-07-14 11:32:36\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-queue\n---\n\n### 基本特性\n\n#### 特性\n\n与栈相反，队列的基本特性为**先入先出（FIFO）**。\n\n其与栈相同，也是一种线性表，允许在队尾插入元素，在队头删除元素。\n\n#### 用处\n\n首先想到的就是操作系统中的进程调度方法？还有当然就是广度优先遍历了。\n\n#### 需要实现的基本内容 \n\n实现队列可以构建相应的接口，其需要实现的方法如下：\n\n```\npublic interface Queue<E> {\n    int getSize();\n    boolean isEmpty();\n    void enqueue(E e);\t// 入队列\n    E dequeue();\t// 出队列\n    E getFront();\t// 获取队首元素\n}\n```\n\n队列有三种实现方法，分别是线性存储（底层数据结构为动态数组，根据实现思路区别可分为**顺序队列**与**循环队列**），链式存储（底层数据结构为链表）\n\n\n\n### 顺序队列\n\n与栈的相应实现方法相同。\n\n```\npublic class ArrayQueue<E> implements Queue<E> {\n\n    private Array<E> array;\n\n    public ArrayQueue(int capacity) {\n        array = new Array<>(capacity);\n    }\n\n    public ArrayQueue() {\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize() {\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return array.isEmpty();\n    }\n\n    @Override\n    public void enqueue(E e) {\n        array.addLast(e);\n    }\n\n    @Override\n    public E dequeue() {\n        return array.removeFirst();\n    }\n\n    @Override\n    public E getFront() {\n        return array.getFirst();\n    }\n\n}\n```\n\n\n\n### 循环队列\n\n#### 实现思路\n\n顺序队列有一个弊端，就是当出队列操作后，动态数组的前面会产生很大的空隙，造成内存的浪费。为了解决这个问题，提出了循环队列的思想，其核心思想就是分别使用**front**和**tail**记录队列的队头和队尾，具体思路见如下示意图（图来源于网上）。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3%E3%80%81%E9%98%9F%E5%88%97%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.jpg)\n\n其中，为避免队列为空与队列为满产生的条件判断重叠（即都为front==tail），我们可以将队列满的条件设置为tail+1==front（即留出一个空间不进行使用）。\n\n除此之外，由于是“循环”队列，因此tail可能小于front，因此需要使用(tail) % (data.length)的形式对相关逻辑进行判断\n\n\n\n#### 具体实现\n\n具体实现如下\n\n```\npublic class LoopQueue<E> implements Queue<E> {\n\n    private E[] data;\n    private int front, tail;\n    private int size;\n\n    public LoopQueue(int capacity) {\n        data = (E[])new Object[capacity+1];\n        front = 0;\n        tail = 0;\n        size = 0;\n    }\n\n    public LoopQueue() {\n        this(10);\n    }\n\n    public int getCapacity() {\n        return data.length - 1;\n    }\n\n\n    @Override\n    public int getSize() {\n        return size;\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return front==tail;\n    }\n\n    @Override\n    public void enqueue(E e) {\n    \t// 判断队列满了的条件\n        if((tail+1)%data.length == front) {\n            resize(getCapacity() * 2);\n        }\n        data[tail] = e;\n        tail = (tail + 1) % data.length;\t// 对tail进行更新\n        size++;\n    }\n\n    @Override\n    public E dequeue() {\n        if(isEmpty()) {\n            throw new IllegalArgumentException(\"Queue is empty\");\n        }\n        E res = data[front];\n        data[front] = null;\n        front = (front+1) % data.length;\n        size--;\n        if(size == getCapacity() / 4 && getCapacity() / 2 != 0) {\n            resize(getCapacity() / 2);\n        }\n        return res;\n    }\n\n    @Override\n    public E getFront() {\n        return data[front];\n    }\n\n    private void resize(int newCapacity) {\n        E[] newData = (E[])new Object[newCapacity + 1];\n        for(int i=0;i<size;i++) {\n            newData[i] = data[(i + front) % data.length];\n        }\n        data = newData;\n        front = 0;\n        tail = size;\n    }\n}\n```\n\n\n\n### 链式队列\n\n#### 实现分析\n\n需要记录队列的队首head与队尾tail。其中队首对应链表头（删除方便），队尾对应链表尾。\n\n#### 具体实现\n\n1、类中基础属性\n\n```\npublic class LinkedListQueue<E> implements Queue<E> {\n\n\t// 定义链表的节点，作为内部类\n    private class Node {\n        public E e;\n        public Node next;\n\n        public Node(E e, Node next) {\n            this.e = e;\n            this.next = next;\n        }\n\n        public Node(E e) {\n            this(e, null);\n        }\n\n        public Node() {\n            this(null, null);\n        }\n    }\n\n    private Node head, tail;\n    private int size;\n\n    public LinkedListQueue() {\n        head = null;\n        tail = null;\n        size = 0;\n    }\n}\n```\n\n2、入队列\n\n```\n@Override\npublic void enqueue(E e) {\n    if(tail==null) {\n        tail = new Node(e);\n        head = tail;\n    }\n    else {\n        tail.next = new Node(e);\n        tail = tail.next;\n    }\n    size++;\n}\n```\n\n3、出队列\n\n```\n@Override\npublic E dequeue() {\n    if(isEmpty()) {\n        throw new IllegalArgumentException(\"Can not\");\n    }\n    Node res = head;\n    head = head.next;\n    res.next = null;\n    if(head == null) {\n        tail = null;\n    }\n    size--;\n    return res.e;\n}\n```\n\n其余方法略\n\n\n\n### 复杂度分析与测试\n\n#### 复杂度分析\n\n不同队列实现方式的差距主要体现在出队中。\n\n其中顺序队列的出队的时间复杂度为O(n)，而循环队列与链接队列出队的时间复杂度为O(1)。\n\n#### 复杂度测试\n\n```\nimport java.util.Random;\n\npublic class Main {\n\n\t// 用于计算运行时间\n    private static double testQueue(Queue<Integer> q, int opCount) \t   {\n        long startTime = System.nanoTime();\n\n        Random random = new Random();\n        for(int i=0; i<opCount;i++) {\n            q.enqueue(random.nextInt(Integer.MAX_VALUE));\n        }\n        for(int i=0; i<opCount;i++) {\n            q.dequeue();\n        }\n\n        long endTime = System.nanoTime();\n        return (endTime - startTime) / 1000000000.0;\n    }\n\n    public static void main(String[] args) {\n        int opCount = 100000;\n        ArrayQueue<Integer> arrayQueue = new ArrayQueue<>();\n        double time1 = testQueue(arrayQueue, opCount);\n        LoopQueue<Integer> loopQueue = new LoopQueue<>();\n        double time2 = testQueue(loopQueue,opCount);\n        LinkedListQueue<Integer> linkedListQueue = new LinkedListQueue<>();\n        double time3 = testQueue(linkedListQueue,opCount);\n        System.out.println(\"ArrayQueue: \"+time1+\" s\");\n        System.out.println(\"LoopQueue: \"+time2+\" s\");\n        System.out.println(\"LinkListQueue: \"+time3+\" s\");\n    }\n}\n///////////////////////////////////////////\nArrayQueue: 45.9780233 s\nLoopQueue: 0.0132119 s\nLinkListQueue: 0.0092766 s\n```\n\n由此可以看出，当操作数达到一定级别时，顺序队列的实现方式的速度要远小于其他两种实现方法。这与之前的分析是吻合的。","slug":"学习笔记/数据结构与算法/3、队列","published":1,"updated":"2021-01-11T04:51:15.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moai002zrwjs07ie2jr8","content":"<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>与栈相反，队列的基本特性为<strong>先入先出（FIFO）</strong>。</p>\n<p>其与栈相同，也是一种线性表，允许在队尾插入元素，在队头删除元素。</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>首先想到的就是操作系统中的进程调度方法？还有当然就是广度优先遍历了。</p>\n<h4 id=\"需要实现的基本内容\"><a href=\"#需要实现的基本内容\" class=\"headerlink\" title=\"需要实现的基本内容\"></a>需要实现的基本内容</h4><p>实现队列可以构建相应的接口，其需要实现的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Queue</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span></span>;\t<span class=\"hljs-comment\">// 入队列</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 出队列</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取队首元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>队列有三种实现方法，分别是线性存储（底层数据结构为动态数组，根据实现思路区别可分为<strong>顺序队列</strong>与<strong>循环队列</strong>），链式存储（底层数据结构为链表）</p>\n<h3 id=\"顺序队列\"><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h3><p>与栈的相应实现方法相同。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayQueue</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Array&lt;E&gt; <span class=\"hljs-built_in\">array</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(capacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.isEmpty();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span>.addLast(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.removeFirst();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getFirst();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3><h4 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h4><p>顺序队列有一个弊端，就是当出队列操作后，动态数组的前面会产生很大的空隙，造成内存的浪费。为了解决这个问题，提出了循环队列的思想，其核心思想就是分别使用<strong>front</strong>和<strong>tail</strong>记录队列的队头和队尾，具体思路见如下示意图（图来源于网上）。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3%E3%80%81%E9%98%9F%E5%88%97%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.jpg\" alt=\"\"></p>\n<p>其中，为避免队列为空与队列为满产生的条件判断重叠（即都为front==tail），我们可以将队列满的条件设置为tail+1==front（即留出一个空间不进行使用）。</p>\n<p>除此之外，由于是“循环”队列，因此tail可能小于front，因此需要使用(tail) % (data.length)的形式对相关逻辑进行判断</p>\n<h4 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><p>具体实现如下</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoopQueue</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> E[] data;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> front, tail;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoopQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = (E[])<span class=\"hljs-keyword\">new</span> Object[capacity+<span class=\"hljs-number\">1</span>];<br>        front = <span class=\"hljs-number\">0</span>;<br>        tail = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">size</span> = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoopQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-number\">10</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data.length - <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">size</span>;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> front==tail;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>    \t<span class=\"hljs-comment\">// 判断队列满了的条件</span><br>        <span class=\"hljs-keyword\">if</span>((tail+<span class=\"hljs-number\">1</span>)%data.length == front) &#123;<br>            resize(getCapacity() * <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        data[tail] = e;<br>        tail = (tail + <span class=\"hljs-number\">1</span>) % data.length;\t<span class=\"hljs-comment\">// 对tail进行更新</span><br>        <span class=\"hljs-built_in\">size</span>++;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Queue is empty\"</span>);<br>        &#125;<br>        E res = data[front];<br>        data[front] = null;<br>        front = (front+<span class=\"hljs-number\">1</span>) % data.length;<br>        <span class=\"hljs-built_in\">size</span>--;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">size</span> == getCapacity() / <span class=\"hljs-number\">4</span> &amp;&amp; getCapacity() / <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>            resize(getCapacity() / <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data[front];<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">resize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> newCapacity)</span> </span>&#123;<br>        E[] newData = (E[])<span class=\"hljs-keyword\">new</span> Object[newCapacity + <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">size</span>;i++) &#123;<br>            newData[i] = data[(i + front) % data.length];<br>        &#125;<br>        data = newData;<br>        front = <span class=\"hljs-number\">0</span>;<br>        tail = <span class=\"hljs-built_in\">size</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式队列\"><a href=\"#链式队列\" class=\"headerlink\" title=\"链式队列\"></a>链式队列</h3><h4 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h4><p>需要记录队列的队首head与队尾tail。其中队首对应链表头（删除方便），队尾对应链表尾。</p>\n<h4 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><p>1、类中基础属性</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">LinkedListQueue</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Queue</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; &#123;<br><br>\t<span class=\"hljs-comment\">// 定义链表的节点，作为内部类</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> E e;<br>        <span class=\"hljs-keyword\">public</span> Node next;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e, Node next) &#123;<br>            <span class=\"hljs-keyword\">this</span>.e = e;<br>            <span class=\"hljs-keyword\">this</span>.next = next;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>            <span class=\"hljs-keyword\">this</span>(e, <span class=\"hljs-literal\">null</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Node() &#123;<br>            <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node head, tail;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> LinkedListQueue() &#123;<br>        head = <span class=\"hljs-literal\">null</span>;<br>        tail = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、入队列</p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\">@Override<br>public <span class=\"hljs-keyword\">void</span> enqueue(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">tail</span>==null) &#123;<br>        <span class=\"hljs-built_in\">tail</span> = new Node(<span class=\"hljs-built_in\">e</span>);<br>        <span class=\"hljs-built_in\">head</span> = <span class=\"hljs-built_in\">tail</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">tail</span>.next = new Node(<span class=\"hljs-built_in\">e</span>);<br>        <span class=\"hljs-built_in\">tail</span> = <span class=\"hljs-built_in\">tail</span>.next;<br>    &#125;<br>    <span class=\"hljs-built_in\">size</span>++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、出队列</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">@Override<br><span class=\"hljs-keyword\">public</span> E dequeue() &#123;<br>    <span class=\"hljs-keyword\">if</span>(isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Can not\"</span>);<br>    &#125;<br>    Node res = head;<br>    head = head.<span class=\"hljs-keyword\">next</span>;<br>    res.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">if</span>(head == <span class=\"hljs-keyword\">null</span>) &#123;<br>        tail = <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">size</span>--;<br>    <span class=\"hljs-keyword\">return</span> res.e;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余方法略</p>\n<h3 id=\"复杂度分析与测试\"><a href=\"#复杂度分析与测试\" class=\"headerlink\" title=\"复杂度分析与测试\"></a>复杂度分析与测试</h3><h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>不同队列实现方式的差距主要体现在出队中。</p>\n<p>其中顺序队列的出队的时间复杂度为O(n)，而循环队列与链接队列出队的时间复杂度为O(1)。</p>\n<h4 id=\"复杂度测试\"><a href=\"#复杂度测试\" class=\"headerlink\" title=\"复杂度测试\"></a>复杂度测试</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">import java.util.Random;<br><br>public <span class=\"hljs-keyword\">class</span> Main &#123;<br><br>\t<span class=\"hljs-comment\">// 用于计算运行时间</span><br>    <span class=\"hljs-keyword\">private</span> static double test<span class=\"hljs-constructor\">Queue(Queue&lt;Integer&gt; <span class=\"hljs-params\">q</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">opCount</span>)</span> \t   &#123;<br>        long startTime = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>nano<span class=\"hljs-constructor\">Time()</span>;<br><br>        Random random = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Random()</span>;<br>        for(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;opCount;i++) &#123;<br>            q.enqueue(random.next<span class=\"hljs-constructor\">Int(Integer.MAX_VALUE)</span>);<br>        &#125;<br>        for(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;opCount;i++) &#123;<br>            q.dequeue<span class=\"hljs-literal\">()</span>;<br>        &#125;<br><br>        long endTime = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>nano<span class=\"hljs-constructor\">Time()</span>;<br>        return (endTime - startTime)<span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">1000000000.0</span>;<br>    &#125;<br><br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        <span class=\"hljs-built_in\">int</span> opCount = <span class=\"hljs-number\">100000</span>;<br>        ArrayQueue&lt;Integer&gt; arrayQueue = <span class=\"hljs-keyword\">new</span> ArrayQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time1 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">arrayQueue</span>, <span class=\"hljs-params\">opCount</span>)</span>;<br>        LoopQueue&lt;Integer&gt; loopQueue = <span class=\"hljs-keyword\">new</span> LoopQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time2 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">loopQueue</span>,<span class=\"hljs-params\">opCount</span>)</span>;<br>        LinkedListQueue&lt;Integer&gt; linkedListQueue = <span class=\"hljs-keyword\">new</span> LinkedListQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time3 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">linkedListQueue</span>,<span class=\"hljs-params\">opCount</span>)</span>;<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"ArrayQueue: \"</span>+time1+<span class=\"hljs-string\">\" s\"</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"LoopQueue: \"</span>+time2+<span class=\"hljs-string\">\" s\"</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"LinkListQueue: \"</span>+time3+<span class=\"hljs-string\">\" s\"</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">///////////////////////////////////////////</span><br>ArrayQueue: <span class=\"hljs-number\">45.9780233</span> s<br>LoopQueue: <span class=\"hljs-number\">0.0132119</span> s<br>LinkListQueue: <span class=\"hljs-number\">0.0092766</span> s<br></code></pre></td></tr></table></figure>\n\n<p>由此可以看出，当操作数达到一定级别时，顺序队列的实现方式的速度要远小于其他两种实现方法。这与之前的分析是吻合的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p>与栈相反，队列的基本特性为<strong>先入先出（FIFO）</strong>。</p>\n<p>其与栈相同，也是一种线性表，允许在队尾插入元素，在队头删除元素。</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>首先想到的就是操作系统中的进程调度方法？还有当然就是广度优先遍历了。</p>\n<h4 id=\"需要实现的基本内容\"><a href=\"#需要实现的基本内容\" class=\"headerlink\" title=\"需要实现的基本内容\"></a>需要实现的基本内容</h4><p>实现队列可以构建相应的接口，其需要实现的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Queue</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span></span>;\t<span class=\"hljs-comment\">// 入队列</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 出队列</span><br>    <span class=\"hljs-function\">E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span></span>;\t<span class=\"hljs-comment\">// 获取队首元素</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>队列有三种实现方法，分别是线性存储（底层数据结构为动态数组，根据实现思路区别可分为<strong>顺序队列</strong>与<strong>循环队列</strong>），链式存储（底层数据结构为链表）</p>\n<h3 id=\"顺序队列\"><a href=\"#顺序队列\" class=\"headerlink\" title=\"顺序队列\"></a>顺序队列</h3><p>与栈的相应实现方法相同。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayQueue</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Array&lt;E&gt; <span class=\"hljs-built_in\">array</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(capacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span> = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.isEmpty();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">array</span>.addLast(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.removeFirst();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">array</span>.getFirst();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"循环队列\"><a href=\"#循环队列\" class=\"headerlink\" title=\"循环队列\"></a>循环队列</h3><h4 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h4><p>顺序队列有一个弊端，就是当出队列操作后，动态数组的前面会产生很大的空隙，造成内存的浪费。为了解决这个问题，提出了循环队列的思想，其核心思想就是分别使用<strong>front</strong>和<strong>tail</strong>记录队列的队头和队尾，具体思路见如下示意图（图来源于网上）。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/3%E3%80%81%E9%98%9F%E5%88%97%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.jpg\" alt=\"\"></p>\n<p>其中，为避免队列为空与队列为满产生的条件判断重叠（即都为front==tail），我们可以将队列满的条件设置为tail+1==front（即留出一个空间不进行使用）。</p>\n<p>除此之外，由于是“循环”队列，因此tail可能小于front，因此需要使用(tail) % (data.length)的形式对相关逻辑进行判断</p>\n<h4 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><p>具体实现如下</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoopQueue</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> E[] data;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> front, tail;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">size</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoopQueue</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = (E[])<span class=\"hljs-keyword\">new</span> Object[capacity+<span class=\"hljs-number\">1</span>];<br>        front = <span class=\"hljs-number\">0</span>;<br>        tail = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-built_in\">size</span> = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LoopQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-number\">10</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getCapacity</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data.length - <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">size</span>;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> front==tail;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>    \t<span class=\"hljs-comment\">// 判断队列满了的条件</span><br>        <span class=\"hljs-keyword\">if</span>((tail+<span class=\"hljs-number\">1</span>)%data.length == front) &#123;<br>            resize(getCapacity() * <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        data[tail] = e;<br>        tail = (tail + <span class=\"hljs-number\">1</span>) % data.length;\t<span class=\"hljs-comment\">// 对tail进行更新</span><br>        <span class=\"hljs-built_in\">size</span>++;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Queue is empty\"</span>);<br>        &#125;<br>        E res = data[front];<br>        data[front] = null;<br>        front = (front+<span class=\"hljs-number\">1</span>) % data.length;<br>        <span class=\"hljs-built_in\">size</span>--;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">size</span> == getCapacity() / <span class=\"hljs-number\">4</span> &amp;&amp; getCapacity() / <span class=\"hljs-number\">2</span> != <span class=\"hljs-number\">0</span>) &#123;<br>            resize(getCapacity() / <span class=\"hljs-number\">2</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> data[front];<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">resize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> newCapacity)</span> </span>&#123;<br>        E[] newData = (E[])<span class=\"hljs-keyword\">new</span> Object[newCapacity + <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">size</span>;i++) &#123;<br>            newData[i] = data[(i + front) % data.length];<br>        &#125;<br>        data = newData;<br>        front = <span class=\"hljs-number\">0</span>;<br>        tail = <span class=\"hljs-built_in\">size</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"链式队列\"><a href=\"#链式队列\" class=\"headerlink\" title=\"链式队列\"></a>链式队列</h3><h4 id=\"实现分析\"><a href=\"#实现分析\" class=\"headerlink\" title=\"实现分析\"></a>实现分析</h4><p>需要记录队列的队首head与队尾tail。其中队首对应链表头（删除方便），队尾对应链表尾。</p>\n<h4 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><p>1、类中基础属性</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">LinkedListQueue</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Queue</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; &#123;<br><br>\t<span class=\"hljs-comment\">// 定义链表的节点，作为内部类</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> E e;<br>        <span class=\"hljs-keyword\">public</span> Node next;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e, Node next) &#123;<br>            <span class=\"hljs-keyword\">this</span>.e = e;<br>            <span class=\"hljs-keyword\">this</span>.next = next;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>            <span class=\"hljs-keyword\">this</span>(e, <span class=\"hljs-literal\">null</span>);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">public</span> Node() &#123;<br>            <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node head, tail;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> LinkedListQueue() &#123;<br>        head = <span class=\"hljs-literal\">null</span>;<br>        tail = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、入队列</p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\">@Override<br>public <span class=\"hljs-keyword\">void</span> enqueue(E <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">tail</span>==null) &#123;<br>        <span class=\"hljs-built_in\">tail</span> = new Node(<span class=\"hljs-built_in\">e</span>);<br>        <span class=\"hljs-built_in\">head</span> = <span class=\"hljs-built_in\">tail</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-built_in\">tail</span>.next = new Node(<span class=\"hljs-built_in\">e</span>);<br>        <span class=\"hljs-built_in\">tail</span> = <span class=\"hljs-built_in\">tail</span>.next;<br>    &#125;<br>    <span class=\"hljs-built_in\">size</span>++;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、出队列</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">@Override<br><span class=\"hljs-keyword\">public</span> E dequeue() &#123;<br>    <span class=\"hljs-keyword\">if</span>(isEmpty()) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Can not\"</span>);<br>    &#125;<br>    Node res = head;<br>    head = head.<span class=\"hljs-keyword\">next</span>;<br>    res.<span class=\"hljs-keyword\">next</span> = <span class=\"hljs-keyword\">null</span>;<br>    <span class=\"hljs-keyword\">if</span>(head == <span class=\"hljs-keyword\">null</span>) &#123;<br>        tail = <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">size</span>--;<br>    <span class=\"hljs-keyword\">return</span> res.e;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余方法略</p>\n<h3 id=\"复杂度分析与测试\"><a href=\"#复杂度分析与测试\" class=\"headerlink\" title=\"复杂度分析与测试\"></a>复杂度分析与测试</h3><h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>不同队列实现方式的差距主要体现在出队中。</p>\n<p>其中顺序队列的出队的时间复杂度为O(n)，而循环队列与链接队列出队的时间复杂度为O(1)。</p>\n<h4 id=\"复杂度测试\"><a href=\"#复杂度测试\" class=\"headerlink\" title=\"复杂度测试\"></a>复杂度测试</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">import java.util.Random;<br><br>public <span class=\"hljs-keyword\">class</span> Main &#123;<br><br>\t<span class=\"hljs-comment\">// 用于计算运行时间</span><br>    <span class=\"hljs-keyword\">private</span> static double test<span class=\"hljs-constructor\">Queue(Queue&lt;Integer&gt; <span class=\"hljs-params\">q</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">opCount</span>)</span> \t   &#123;<br>        long startTime = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>nano<span class=\"hljs-constructor\">Time()</span>;<br><br>        Random random = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Random()</span>;<br>        for(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;opCount;i++) &#123;<br>            q.enqueue(random.next<span class=\"hljs-constructor\">Int(Integer.MAX_VALUE)</span>);<br>        &#125;<br>        for(<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;opCount;i++) &#123;<br>            q.dequeue<span class=\"hljs-literal\">()</span>;<br>        &#125;<br><br>        long endTime = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>nano<span class=\"hljs-constructor\">Time()</span>;<br>        return (endTime - startTime)<span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">1000000000.0</span>;<br>    &#125;<br><br>    public static void main(String<span class=\"hljs-literal\">[]</span> args) &#123;<br>        <span class=\"hljs-built_in\">int</span> opCount = <span class=\"hljs-number\">100000</span>;<br>        ArrayQueue&lt;Integer&gt; arrayQueue = <span class=\"hljs-keyword\">new</span> ArrayQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time1 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">arrayQueue</span>, <span class=\"hljs-params\">opCount</span>)</span>;<br>        LoopQueue&lt;Integer&gt; loopQueue = <span class=\"hljs-keyword\">new</span> LoopQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time2 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">loopQueue</span>,<span class=\"hljs-params\">opCount</span>)</span>;<br>        LinkedListQueue&lt;Integer&gt; linkedListQueue = <span class=\"hljs-keyword\">new</span> LinkedListQueue&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        double time3 = test<span class=\"hljs-constructor\">Queue(<span class=\"hljs-params\">linkedListQueue</span>,<span class=\"hljs-params\">opCount</span>)</span>;<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"ArrayQueue: \"</span>+time1+<span class=\"hljs-string\">\" s\"</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"LoopQueue: \"</span>+time2+<span class=\"hljs-string\">\" s\"</span>);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"LinkListQueue: \"</span>+time3+<span class=\"hljs-string\">\" s\"</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">///////////////////////////////////////////</span><br>ArrayQueue: <span class=\"hljs-number\">45.9780233</span> s<br>LoopQueue: <span class=\"hljs-number\">0.0132119</span> s<br>LinkListQueue: <span class=\"hljs-number\">0.0092766</span> s<br></code></pre></td></tr></table></figure>\n\n<p>由此可以看出，当操作数达到一定级别时，顺序队列的实现方式的速度要远小于其他两种实现方法。这与之前的分析是吻合的。</p>\n"},{"title":"5.1、树与二叉树","date":"2020-07-20T08:11:47.000Z","fileName":"ds-tree-binarytree","_content":"\n## 树\n\n### 基本名词\n\n#### 1、度\n\n节点拥有的子树的数目称为度\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%A6.png)\n\n#### 4、层次与深度\n\n从根开始定义，根为第一层，根的孩子为第二层，以此类推\n\n树中结点的最大层次数称为树的深度或高度\n\n### 二叉树\n\n### 基本性质\n\n#### 基本特点\n\n1、每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。\n\n2、左子树和右子树是有顺序的，次序不能任意颠倒。\n\n3、即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。\n\n#### 特殊的树\n\n1、满二叉树：如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n2、完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n完全二叉树有以下特性（按层编号作为索引），可以用来构建堆结构:\n\n>（1）父节点的编号为i/2。i为孩子节点的编号\n>\n>（2）左子节点编号为2*i+1。i为父节点编号\n\n#### 数学性质\n\n1、在二叉树的第i层上最多有2i-1个节点 （i>=1）\n\n2、二叉树中如果深度为k，那么最多有2k-1个节点(k>=1）\n\n\n\n### 基础实现\n\n二叉树的节点，与之前提到的链表的节点很相似，只不过有两个引用，在Java中可以作为一个类中类。\n\n```\nclass Node {\n\tE e;\n\tNode left;\n\tNode right;\n}\n```\n\n二叉树所需要的基础方法如下，该基础实现与之后要讲的二叉搜索树是一致的，因此此处类名直接采用BST。\n\n```\npublic class BST<E extends Comparable<E>> {\n    private class Node {\n        public E e;\n        public Node left, right;\n\n        public Node(E e) {\n            this.e = e;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public BST() {\n        root = null;\n        size = 0;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size==0;\n    }\n}\n```\n\n\n\n### 遍历操作\n\n遍历操作就是把所有节点都访问一遍，由于树的定义天生就带有递归特性，因此使用递归进行遍历是最简单的，但也可以使用普通的迭代方法。\n\n#### 二叉树中的几种遍历\n\nPreOrder Traversal （前序遍历）\nInOrder Traversal\t（中序遍历）\nPostOrder Traversal\t（后序遍历）\nLevelOrder Traversal\t（层序遍历）\n\n**规律：**显然，中序遍历可以与其余三种遍历方法的任何一种完成对二叉树的重建（唯一），而其余三种遍历方法任何一种两两结合都无法构建唯一的二叉树。\n这很好理解，其余三种遍历方法告知了我们根节点的位置，而根据这一点我们可以由中序遍历确定左右子树，然后根据二叉树的递归定义完成重建\n\n\n\n前三种遍历方法可以依靠递归轻松实现，其不同之处仅在于递归语句中用于遍历当前节点的语句所处的位置，如下。\n\n```\n// 前序遍历处理当前节点位置\n递归（左子树）;\n// 中序遍历处理当前节点位置\n递归（右子树）;\n// 后续遍历处理当前节点位置\n```\n\n其中具体代码可见**迭代实现**中所示。\n\n\n\n前三种遍历都可以依靠递归进行简单的实现，可以简单理解为**深度优先**，而最后一种层序遍历则为**广度优先**，依靠队列即可进行实现，其实现方法如下：\n\n```\npublic void levelOrder() {\n    Queue<Node> q = new LinkedList<>();\n    q.add(root);\n    while (!q.isEmpty()) {\n        Node cur = q.remove();\n        System.out.println(cur.e);\n        if(cur.left != null) q.add(cur.left);\n        if(cur.right != null) q.add(cur.right);\n    }\n}\n```\n\n\n\n#### 递归实现\n\n具体可见（写的很详细）：https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/\n\n1、前序遍历\n\n```\nprivate void preOrder(Node node) {\n    if(node == null) return;\n    System.out.println(node.e);\n    preOrder(node.left);\n    preOrder(node.right);\n}\n```\n\n中序遍历和后序遍历如上所述，只是改变操作位置\n\n\n\n#### 迭代实现\n\n前序遍历\n\n```\npublic void preOrderNR() {\n    Stack<Node> stack = new Stack<>();\n    stack.push(root);\n    while(!stack.isEmpty()) {\n        Node cur = stack.pop();\n        System.out.println(cur.e);\n        if(cur.right != null) stack.push(cur.right);\n        if(cur.left != null) stack.push(cur.left);\n    }\n}\n```\n\n\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/bf73c8d50dc2","source":"_posts/学习笔记/数据结构与算法/5.1、树与二叉树.md","raw":"---\ntitle: 5.1、树与二叉树\ndate: 2020-07-20 16:11:47\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-tree-binarytree\n---\n\n## 树\n\n### 基本名词\n\n#### 1、度\n\n节点拥有的子树的数目称为度\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%A6.png)\n\n#### 4、层次与深度\n\n从根开始定义，根为第一层，根的孩子为第二层，以此类推\n\n树中结点的最大层次数称为树的深度或高度\n\n### 二叉树\n\n### 基本性质\n\n#### 基本特点\n\n1、每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。\n\n2、左子树和右子树是有顺序的，次序不能任意颠倒。\n\n3、即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。\n\n#### 特殊的树\n\n1、满二叉树：如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n2、完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1<=i<=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png)\n\n完全二叉树有以下特性（按层编号作为索引），可以用来构建堆结构:\n\n>（1）父节点的编号为i/2。i为孩子节点的编号\n>\n>（2）左子节点编号为2*i+1。i为父节点编号\n\n#### 数学性质\n\n1、在二叉树的第i层上最多有2i-1个节点 （i>=1）\n\n2、二叉树中如果深度为k，那么最多有2k-1个节点(k>=1）\n\n\n\n### 基础实现\n\n二叉树的节点，与之前提到的链表的节点很相似，只不过有两个引用，在Java中可以作为一个类中类。\n\n```\nclass Node {\n\tE e;\n\tNode left;\n\tNode right;\n}\n```\n\n二叉树所需要的基础方法如下，该基础实现与之后要讲的二叉搜索树是一致的，因此此处类名直接采用BST。\n\n```\npublic class BST<E extends Comparable<E>> {\n    private class Node {\n        public E e;\n        public Node left, right;\n\n        public Node(E e) {\n            this.e = e;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public BST() {\n        root = null;\n        size = 0;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public boolean isEmpty() {\n        return size==0;\n    }\n}\n```\n\n\n\n### 遍历操作\n\n遍历操作就是把所有节点都访问一遍，由于树的定义天生就带有递归特性，因此使用递归进行遍历是最简单的，但也可以使用普通的迭代方法。\n\n#### 二叉树中的几种遍历\n\nPreOrder Traversal （前序遍历）\nInOrder Traversal\t（中序遍历）\nPostOrder Traversal\t（后序遍历）\nLevelOrder Traversal\t（层序遍历）\n\n**规律：**显然，中序遍历可以与其余三种遍历方法的任何一种完成对二叉树的重建（唯一），而其余三种遍历方法任何一种两两结合都无法构建唯一的二叉树。\n这很好理解，其余三种遍历方法告知了我们根节点的位置，而根据这一点我们可以由中序遍历确定左右子树，然后根据二叉树的递归定义完成重建\n\n\n\n前三种遍历方法可以依靠递归轻松实现，其不同之处仅在于递归语句中用于遍历当前节点的语句所处的位置，如下。\n\n```\n// 前序遍历处理当前节点位置\n递归（左子树）;\n// 中序遍历处理当前节点位置\n递归（右子树）;\n// 后续遍历处理当前节点位置\n```\n\n其中具体代码可见**迭代实现**中所示。\n\n\n\n前三种遍历都可以依靠递归进行简单的实现，可以简单理解为**深度优先**，而最后一种层序遍历则为**广度优先**，依靠队列即可进行实现，其实现方法如下：\n\n```\npublic void levelOrder() {\n    Queue<Node> q = new LinkedList<>();\n    q.add(root);\n    while (!q.isEmpty()) {\n        Node cur = q.remove();\n        System.out.println(cur.e);\n        if(cur.left != null) q.add(cur.left);\n        if(cur.right != null) q.add(cur.right);\n    }\n}\n```\n\n\n\n#### 递归实现\n\n具体可见（写的很详细）：https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/\n\n1、前序遍历\n\n```\nprivate void preOrder(Node node) {\n    if(node == null) return;\n    System.out.println(node.e);\n    preOrder(node.left);\n    preOrder(node.right);\n}\n```\n\n中序遍历和后序遍历如上所述，只是改变操作位置\n\n\n\n#### 迭代实现\n\n前序遍历\n\n```\npublic void preOrderNR() {\n    Stack<Node> stack = new Stack<>();\n    stack.push(root);\n    while(!stack.isEmpty()) {\n        Node cur = stack.pop();\n        System.out.println(cur.e);\n        if(cur.right != null) stack.push(cur.right);\n        if(cur.left != null) stack.push(cur.left);\n    }\n}\n```\n\n\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/bf73c8d50dc2","slug":"学习笔记/数据结构与算法/5.1、树与二叉树","published":1,"updated":"2021-01-11T04:51:30.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moaj0033rwjs02ku9k5s","content":"<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"基本名词\"><a href=\"#基本名词\" class=\"headerlink\" title=\"基本名词\"></a>基本名词</h3><h4 id=\"1、度\"><a href=\"#1、度\" class=\"headerlink\" title=\"1、度\"></a>1、度</h4><p>节点拥有的子树的数目称为度</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%A6.png\" alt=\"\"></p>\n<h4 id=\"4、层次与深度\"><a href=\"#4、层次与深度\" class=\"headerlink\" title=\"4、层次与深度\"></a>4、层次与深度</h4><p>从根开始定义，根为第一层，根的孩子为第二层，以此类推</p>\n<p>树中结点的最大层次数称为树的深度或高度</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><h3 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h3><h4 id=\"基本特点\"><a href=\"#基本特点\" class=\"headerlink\" title=\"基本特点\"></a>基本特点</h4><p>1、每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。</p>\n<p>2、左子树和右子树是有顺序的，次序不能任意颠倒。</p>\n<p>3、即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</p>\n<h4 id=\"特殊的树\"><a href=\"#特殊的树\" class=\"headerlink\" title=\"特殊的树\"></a>特殊的树</h4><p>1、满二叉树：如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\"></p>\n<p>2、完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\"></p>\n<p>完全二叉树有以下特性（按层编号作为索引），可以用来构建堆结构:</p>\n<blockquote>\n<p>（1）父节点的编号为i/2。i为孩子节点的编号</p>\n<p>（2）左子节点编号为2*i+1。i为父节点编号</p>\n</blockquote>\n<h4 id=\"数学性质\"><a href=\"#数学性质\" class=\"headerlink\" title=\"数学性质\"></a>数学性质</h4><p>1、在二叉树的第i层上最多有2i-1个节点 （i&gt;=1）</p>\n<p>2、二叉树中如果深度为k，那么最多有2k-1个节点(k&gt;=1）</p>\n<h3 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h3><p>二叉树的节点，与之前提到的链表的节点很相似，只不过有两个引用，在Java中可以作为一个类中类。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>\tE</span> e;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">left</span>;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">right</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>二叉树所需要的基础方法如下，该基础实现与之后要讲的二叉搜索树是一致的，因此此处类名直接采用BST。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">BST</span>&lt;<span class=\"hljs-symbol\">E</span> <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">E</span>&gt;&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> E e;<br>        <span class=\"hljs-keyword\">public</span> Node left, right;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>            <span class=\"hljs-keyword\">this</span>.e = e;<br>            left = <span class=\"hljs-literal\">null</span>;<br>            right = <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node root;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> BST() &#123;<br>        root = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> getSize() &#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span>ean isEmpty() &#123;<br>        <span class=\"hljs-keyword\">return</span> size==<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历操作\"><a href=\"#遍历操作\" class=\"headerlink\" title=\"遍历操作\"></a>遍历操作</h3><p>遍历操作就是把所有节点都访问一遍，由于树的定义天生就带有递归特性，因此使用递归进行遍历是最简单的，但也可以使用普通的迭代方法。</p>\n<h4 id=\"二叉树中的几种遍历\"><a href=\"#二叉树中的几种遍历\" class=\"headerlink\" title=\"二叉树中的几种遍历\"></a>二叉树中的几种遍历</h4><p>PreOrder Traversal （前序遍历）<br>InOrder Traversal    （中序遍历）<br>PostOrder Traversal    （后序遍历）<br>LevelOrder Traversal    （层序遍历）</p>\n<p><strong>规律：</strong>显然，中序遍历可以与其余三种遍历方法的任何一种完成对二叉树的重建（唯一），而其余三种遍历方法任何一种两两结合都无法构建唯一的二叉树。<br>这很好理解，其余三种遍历方法告知了我们根节点的位置，而根据这一点我们可以由中序遍历确定左右子树，然后根据二叉树的递归定义完成重建</p>\n<p>前三种遍历方法可以依靠递归轻松实现，其不同之处仅在于递归语句中用于遍历当前节点的语句所处的位置，如下。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\"><span class=\"hljs-comment\">// 前序遍历处理当前节点位置</span><br>递归（左子树）;<br><span class=\"hljs-comment\">// 中序遍历处理当前节点位置</span><br>递归（右子树）;<br><span class=\"hljs-comment\">// 后续遍历处理当前节点位置</span><br></code></pre></td></tr></table></figure>\n\n<p>其中具体代码可见<strong>迭代实现</strong>中所示。</p>\n<p>前三种遍历都可以依靠递归进行简单的实现，可以简单理解为<strong>深度优先</strong>，而最后一种层序遍历则为<strong>广度优先</strong>，依靠队列即可进行实现，其实现方法如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">levelOrder</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    Queue&lt;Node&gt; q = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    q.<span class=\"hljs-keyword\">add</span>(root);<br>    <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) &#123;<br>        Node cur = q.<span class=\"hljs-keyword\">remove</span>();<br>        System.<span class=\"hljs-keyword\">out</span>.println(cur.e);<br>        <span class=\"hljs-keyword\">if</span>(cur.left != <span class=\"hljs-literal\">null</span>) q.<span class=\"hljs-keyword\">add</span>(cur.left);<br>        <span class=\"hljs-keyword\">if</span>(cur.right != <span class=\"hljs-literal\">null</span>) q.<span class=\"hljs-keyword\">add</span>(cur.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h4><p>具体可见（写的很详细）：<a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/</a></p>\n<p>1、前序遍历</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private void preOrder(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) return;<br>    System.out.println(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>);<br>    preOrder(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>);<br>    preOrder(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>中序遍历和后序遍历如上所述，只是改变操作位置</p>\n<h4 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h4><p>前序遍历</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-literal\">void</span> preOrderNR() &#123;<br>    <span class=\"hljs-built_in\">Stack</span>&lt;Node&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;();<br>    <span class=\"hljs-built_in\">stack</span>.push(root);<br>    <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">stack</span>.isEmpty()) &#123;<br>        Node cur = <span class=\"hljs-built_in\">stack</span>.pop();<br>        System.out.println(cur.e);<br>        <span class=\"hljs-keyword\">if</span>(cur.right != <span class=\"hljs-built_in\">null</span>) <span class=\"hljs-built_in\">stack</span>.push(cur.right);<br>        <span class=\"hljs-keyword\">if</span>(cur.left != <span class=\"hljs-built_in\">null</span>) <span class=\"hljs-built_in\">stack</span>.push(cur.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/bf73c8d50dc2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/bf73c8d50dc2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><h3 id=\"基本名词\"><a href=\"#基本名词\" class=\"headerlink\" title=\"基本名词\"></a>基本名词</h3><h4 id=\"1、度\"><a href=\"#1、度\" class=\"headerlink\" title=\"1、度\"></a>1、度</h4><p>节点拥有的子树的数目称为度</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%BA%A6.png\" alt=\"\"></p>\n<h4 id=\"4、层次与深度\"><a href=\"#4、层次与深度\" class=\"headerlink\" title=\"4、层次与深度\"></a>4、层次与深度</h4><p>从根开始定义，根为第一层，根的孩子为第二层，以此类推</p>\n<p>树中结点的最大层次数称为树的深度或高度</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><h3 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h3><h4 id=\"基本特点\"><a href=\"#基本特点\" class=\"headerlink\" title=\"基本特点\"></a>基本特点</h4><p>1、每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点。</p>\n<p>2、左子树和右子树是有顺序的，次序不能任意颠倒。</p>\n<p>3、即使树中某结点只有一棵子树，也要区分它是左子树还是右子树。</p>\n<h4 id=\"特殊的树\"><a href=\"#特殊的树\" class=\"headerlink\" title=\"特殊的树\"></a>特殊的树</h4><p>1、满二叉树：如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\"></p>\n<p>2、完全二叉树：对一颗具有n个结点的二叉树按层编号，如果编号为i(1&lt;=i&lt;=n)的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同，则这棵二叉树称为完全二叉树。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.1%E3%80%81%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png\" alt=\"\"></p>\n<p>完全二叉树有以下特性（按层编号作为索引），可以用来构建堆结构:</p>\n<blockquote>\n<p>（1）父节点的编号为i/2。i为孩子节点的编号</p>\n<p>（2）左子节点编号为2*i+1。i为父节点编号</p>\n</blockquote>\n<h4 id=\"数学性质\"><a href=\"#数学性质\" class=\"headerlink\" title=\"数学性质\"></a>数学性质</h4><p>1、在二叉树的第i层上最多有2i-1个节点 （i&gt;=1）</p>\n<p>2、二叉树中如果深度为k，那么最多有2k-1个节点(k&gt;=1）</p>\n<h3 id=\"基础实现\"><a href=\"#基础实现\" class=\"headerlink\" title=\"基础实现\"></a>基础实现</h3><p>二叉树的节点，与之前提到的链表的节点很相似，只不过有两个引用，在Java中可以作为一个类中类。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">class <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">&#123;<br>\tE</span> e;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">left</span>;<br>\t<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">right</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>二叉树所需要的基础方法如下，该基础实现与之后要讲的二叉搜索树是一致的，因此此处类名直接采用BST。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">BST</span>&lt;<span class=\"hljs-symbol\">E</span> <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">E</span>&gt;&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> E e;<br>        <span class=\"hljs-keyword\">public</span> Node left, right;<br><br>        <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>            <span class=\"hljs-keyword\">this</span>.e = e;<br>            left = <span class=\"hljs-literal\">null</span>;<br>            right = <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node root;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> BST() &#123;<br>        root = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> getSize() &#123;<br>        <span class=\"hljs-keyword\">return</span> size;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span>ean isEmpty() &#123;<br>        <span class=\"hljs-keyword\">return</span> size==<span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"遍历操作\"><a href=\"#遍历操作\" class=\"headerlink\" title=\"遍历操作\"></a>遍历操作</h3><p>遍历操作就是把所有节点都访问一遍，由于树的定义天生就带有递归特性，因此使用递归进行遍历是最简单的，但也可以使用普通的迭代方法。</p>\n<h4 id=\"二叉树中的几种遍历\"><a href=\"#二叉树中的几种遍历\" class=\"headerlink\" title=\"二叉树中的几种遍历\"></a>二叉树中的几种遍历</h4><p>PreOrder Traversal （前序遍历）<br>InOrder Traversal    （中序遍历）<br>PostOrder Traversal    （后序遍历）<br>LevelOrder Traversal    （层序遍历）</p>\n<p><strong>规律：</strong>显然，中序遍历可以与其余三种遍历方法的任何一种完成对二叉树的重建（唯一），而其余三种遍历方法任何一种两两结合都无法构建唯一的二叉树。<br>这很好理解，其余三种遍历方法告知了我们根节点的位置，而根据这一点我们可以由中序遍历确定左右子树，然后根据二叉树的递归定义完成重建</p>\n<p>前三种遍历方法可以依靠递归轻松实现，其不同之处仅在于递归语句中用于遍历当前节点的语句所处的位置，如下。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs 1c\"><span class=\"hljs-comment\">// 前序遍历处理当前节点位置</span><br>递归（左子树）;<br><span class=\"hljs-comment\">// 中序遍历处理当前节点位置</span><br>递归（右子树）;<br><span class=\"hljs-comment\">// 后续遍历处理当前节点位置</span><br></code></pre></td></tr></table></figure>\n\n<p>其中具体代码可见<strong>迭代实现</strong>中所示。</p>\n<p>前三种遍历都可以依靠递归进行简单的实现，可以简单理解为<strong>深度优先</strong>，而最后一种层序遍历则为<strong>广度优先</strong>，依靠队列即可进行实现，其实现方法如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">levelOrder</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>    Queue&lt;Node&gt; q = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    q.<span class=\"hljs-keyword\">add</span>(root);<br>    <span class=\"hljs-keyword\">while</span> (!q.isEmpty()) &#123;<br>        Node cur = q.<span class=\"hljs-keyword\">remove</span>();<br>        System.<span class=\"hljs-keyword\">out</span>.println(cur.e);<br>        <span class=\"hljs-keyword\">if</span>(cur.left != <span class=\"hljs-literal\">null</span>) q.<span class=\"hljs-keyword\">add</span>(cur.left);<br>        <span class=\"hljs-keyword\">if</span>(cur.right != <span class=\"hljs-literal\">null</span>) q.<span class=\"hljs-keyword\">add</span>(cur.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"递归实现\"><a href=\"#递归实现\" class=\"headerlink\" title=\"递归实现\"></a>递归实现</h4><p>具体可见（写的很详细）：<a href=\"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/</a></p>\n<p>1、前序遍历</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private void preOrder(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) return;<br>    System.out.println(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>);<br>    preOrder(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>);<br>    preOrder(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>中序遍历和后序遍历如上所述，只是改变操作位置</p>\n<h4 id=\"迭代实现\"><a href=\"#迭代实现\" class=\"headerlink\" title=\"迭代实现\"></a>迭代实现</h4><p>前序遍历</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-literal\">void</span> preOrderNR() &#123;<br>    <span class=\"hljs-built_in\">Stack</span>&lt;Node&gt; <span class=\"hljs-built_in\">stack</span> = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Stack</span>&lt;&gt;();<br>    <span class=\"hljs-built_in\">stack</span>.push(root);<br>    <span class=\"hljs-keyword\">while</span>(!<span class=\"hljs-built_in\">stack</span>.isEmpty()) &#123;<br>        Node cur = <span class=\"hljs-built_in\">stack</span>.pop();<br>        System.out.println(cur.e);<br>        <span class=\"hljs-keyword\">if</span>(cur.right != <span class=\"hljs-built_in\">null</span>) <span class=\"hljs-built_in\">stack</span>.push(cur.right);<br>        <span class=\"hljs-keyword\">if</span>(cur.left != <span class=\"hljs-built_in\">null</span>) <span class=\"hljs-built_in\">stack</span>.push(cur.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/bf73c8d50dc2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/bf73c8d50dc2</a></p>\n"},{"title":"5.2、二叉搜索树","date":"2020-07-20T08:11:47.000Z","fileName":"ds-bst","_content":"\n### 定义\n\n二叉搜索树（Binary Search Tree），即对任意节点，其值大于其左子树中任意一个节点的值，而小于其右子树中任意一个节点的值。\n\n是一种特殊的二叉树，因此继承了二叉树的所有特性\n\n二叉搜索树的相关分析见：https://www.jianshu.com/p/ff4b93b088eb\n\n\n\n## 操作实现\n\n### 插入元素\n\n题目来源：https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/\n\n利用二叉树的递归特性可以很简单的构造出相应的递归函数。\n\n```\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if(root==null) {\n            root = new TreeNode(val);\n            return root;\n        }\n        if(val<root.val) {\n            root.left = insertIntoBST(root.left, val);\n        }\n        else {\n            root.right = insertIntoBST(root.right, val);\n        }\n        return root;\n    }\n}\n```\n\n\n\n### 查找某元素是否存在\n\n使用递归进行判断，如果待判断元素比当前节点值小，则向左递归，否则向右递归。\n\n```\nprivate boolean contains(Node node, E e) {\n    if(node==null) return false;\n    if(e.compareTo(node.e) == 0) return true;\n    else if(e.compareTo(node.e) < 0) return contains(node.left, e);\n    else return contains(node.right, e);\n}\n```\n\n\n\n### 最大最小值\n\n这个思路很简单，使用递归与迭代都可以，就是向左或右一直搜索即可。\n\n```\n// 寻找二分搜索树最小值\npublic E minimum() {\n    if(size == 0) {\n        throw new IllegalArgumentException(\"BST is empty\");\n    }\n    return minimun(root).e;\n}\n\nprivate Node minimun(Node node) {\n    if(node.left == null) return node;\n    return minimun(node.left);\n}\n```\n\n其中若要删除最小值或最大值，就可以对应以下“删除元素”中的第一或者第二种情况，十分方便。\n\n\n\n### 删除元素\n\n图片来源：https://www.jianshu.com/p/ff4b93b088eb\n\n对二叉搜索树进行删除主要要考虑以下三种情况。\n\n**1、要删除的是叶子节点**\n\n这种情况只需要直接将其设置为空即可\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_2.png)\n\n**2、要删除的节点有左节点但没有右节点，或有右节点但没有左节点**\n\n这种情况下只需要将其右（左）节点放置在要删除的节点的位置上即可。\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_2.png)\n\n**3、要删除的节点既有左节点又有右节点**\n\n这种情况下，只需要找到待删节点的右子树中最小的节点（或左子树最大的节点），将其删除并将其值赋给待删节点即可（直接操作相应的指针也行）\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_2.png)\n\n删除二叉搜索树的代码：来源于https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/\n\n```\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root==null) return root;\n        if(key > root.val) {\n            root.right = deleteNode(root.right, key);\n        }\n        else if(key < root.val) {\n            root.left = deleteNode(root.left, key);\n        }\n        else {\n            if(root.left==null || root.right==null) {\n                root = (root.left==null) ? root.right : root.left;\n            }\n            else {\n                TreeNode temp = root.right;\n                while(temp.left != null) {\n                    temp = root.left;\n                }\n                root.val = temp.val;\n                root.right = deleteNode(root.right, temp.val);\n            }\n        }\n        return root;\n    }\n}\n```\n\n其中可见：\n\n若是上述第一种和第二种情况，则直接对二叉树节点进行赋值操作即可。\n\n若是第三种情况，则将找到的节点的val值赋给对应“根”节点，之后对其子树进行递归，删除对应的节点即可（此时需要删除的节点必满足一二两种情况）\n\n\n","source":"_posts/学习笔记/数据结构与算法/5.2、二叉搜索树.md","raw":"---\ntitle: 5.2、二叉搜索树\ndate: 2020-07-20 16:11:47\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-bst\n---\n\n### 定义\n\n二叉搜索树（Binary Search Tree），即对任意节点，其值大于其左子树中任意一个节点的值，而小于其右子树中任意一个节点的值。\n\n是一种特殊的二叉树，因此继承了二叉树的所有特性\n\n二叉搜索树的相关分析见：https://www.jianshu.com/p/ff4b93b088eb\n\n\n\n## 操作实现\n\n### 插入元素\n\n题目来源：https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/\n\n利用二叉树的递归特性可以很简单的构造出相应的递归函数。\n\n```\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if(root==null) {\n            root = new TreeNode(val);\n            return root;\n        }\n        if(val<root.val) {\n            root.left = insertIntoBST(root.left, val);\n        }\n        else {\n            root.right = insertIntoBST(root.right, val);\n        }\n        return root;\n    }\n}\n```\n\n\n\n### 查找某元素是否存在\n\n使用递归进行判断，如果待判断元素比当前节点值小，则向左递归，否则向右递归。\n\n```\nprivate boolean contains(Node node, E e) {\n    if(node==null) return false;\n    if(e.compareTo(node.e) == 0) return true;\n    else if(e.compareTo(node.e) < 0) return contains(node.left, e);\n    else return contains(node.right, e);\n}\n```\n\n\n\n### 最大最小值\n\n这个思路很简单，使用递归与迭代都可以，就是向左或右一直搜索即可。\n\n```\n// 寻找二分搜索树最小值\npublic E minimum() {\n    if(size == 0) {\n        throw new IllegalArgumentException(\"BST is empty\");\n    }\n    return minimun(root).e;\n}\n\nprivate Node minimun(Node node) {\n    if(node.left == null) return node;\n    return minimun(node.left);\n}\n```\n\n其中若要删除最小值或最大值，就可以对应以下“删除元素”中的第一或者第二种情况，十分方便。\n\n\n\n### 删除元素\n\n图片来源：https://www.jianshu.com/p/ff4b93b088eb\n\n对二叉搜索树进行删除主要要考虑以下三种情况。\n\n**1、要删除的是叶子节点**\n\n这种情况只需要直接将其设置为空即可\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_2.png)\n\n**2、要删除的节点有左节点但没有右节点，或有右节点但没有左节点**\n\n这种情况下只需要将其右（左）节点放置在要删除的节点的位置上即可。\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_2.png)\n\n**3、要删除的节点既有左节点又有右节点**\n\n这种情况下，只需要找到待删节点的右子树中最小的节点（或左子树最大的节点），将其删除并将其值赋给待删节点即可（直接操作相应的指针也行）\n\n![删除前](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_1.png)\n\n![删除后](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_2.png)\n\n删除二叉搜索树的代码：来源于https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/\n\n```\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root==null) return root;\n        if(key > root.val) {\n            root.right = deleteNode(root.right, key);\n        }\n        else if(key < root.val) {\n            root.left = deleteNode(root.left, key);\n        }\n        else {\n            if(root.left==null || root.right==null) {\n                root = (root.left==null) ? root.right : root.left;\n            }\n            else {\n                TreeNode temp = root.right;\n                while(temp.left != null) {\n                    temp = root.left;\n                }\n                root.val = temp.val;\n                root.right = deleteNode(root.right, temp.val);\n            }\n        }\n        return root;\n    }\n}\n```\n\n其中可见：\n\n若是上述第一种和第二种情况，则直接对二叉树节点进行赋值操作即可。\n\n若是第三种情况，则将找到的节点的val值赋给对应“根”节点，之后对其子树进行递归，删除对应的节点即可（此时需要删除的节点必满足一二两种情况）\n\n\n","slug":"学习笔记/数据结构与算法/5.2、二叉搜索树","published":1,"updated":"2021-01-11T04:51:38.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moak0037rwjsgzq63152","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>二叉搜索树（Binary Search Tree），即对任意节点，其值大于其左子树中任意一个节点的值，而小于其右子树中任意一个节点的值。</p>\n<p>是一种特殊的二叉树，因此继承了二叉树的所有特性</p>\n<p>二叉搜索树的相关分析见：<a href=\"https://www.jianshu.com/p/ff4b93b088eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ff4b93b088eb</a></p>\n<h2 id=\"操作实现\"><a href=\"#操作实现\" class=\"headerlink\" title=\"操作实现\"></a>操作实现</h2><h3 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/</a></p>\n<p>利用二叉树的递归特性可以很简单的构造出相应的递归函数。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">class</span> Solution &#123;<br>    public TreeNode insert<span class=\"hljs-constructor\">IntoBST(TreeNode <span class=\"hljs-params\">root</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">val</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(root==null) &#123;<br>            root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">val</span>)</span>;<br>            return root;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">val</span>&lt;root.<span class=\"hljs-keyword\">val</span>) &#123;<br>            root.left = insert<span class=\"hljs-constructor\">IntoBST(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">left</span>, <span class=\"hljs-params\">val</span>)</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            root.right = insert<span class=\"hljs-constructor\">IntoBST(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">right</span>, <span class=\"hljs-params\">val</span>)</span>;<br>        &#125;<br>        return root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查找某元素是否存在\"><a href=\"#查找某元素是否存在\" class=\"headerlink\" title=\"查找某元素是否存在\"></a>查找某元素是否存在</h3><p>使用递归进行判断，如果待判断元素比当前节点值小，则向左递归，否则向右递归。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private boolean contains(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">==null</span>) return <span class=\"hljs-literal\">false</span>;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) == <span class=\"hljs-number\">0</span>) return <span class=\"hljs-literal\">true</span>;<br>    else if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) return contains(node.left, e);<br>    else return contains(node.right, e);<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"最大最小值\"><a href=\"#最大最小值\" class=\"headerlink\" title=\"最大最小值\"></a>最大最小值</h3><p>这个思路很简单，使用递归与迭代都可以，就是向左或右一直搜索即可。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 寻找二分搜索树最小值<br>public E minimum() &#123;<br>    if(size == <span class=\"hljs-number\">0</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"BST is empty\"</span>);<br>    &#125;<br>    return minimun(root).e;<br>&#125;<br><br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">minimun</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span> == null) return <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>    return</span> minimun(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中若要删除最小值或最大值，就可以对应以下“删除元素”中的第一或者第二种情况，十分方便。</p>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>图片来源：<a href=\"https://www.jianshu.com/p/ff4b93b088eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ff4b93b088eb</a></p>\n<p>对二叉搜索树进行删除主要要考虑以下三种情况。</p>\n<p><strong>1、要删除的是叶子节点</strong></p>\n<p>这种情况只需要直接将其设置为空即可</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_2.png\" alt=\"删除后\"></p>\n<p><strong>2、要删除的节点有左节点但没有右节点，或有右节点但没有左节点</strong></p>\n<p>这种情况下只需要将其右（左）节点放置在要删除的节点的位置上即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_2.png\" alt=\"删除后\"></p>\n<p><strong>3、要删除的节点既有左节点又有右节点</strong></p>\n<p>这种情况下，只需要找到待删节点的右子树中最小的节点（或左子树最大的节点），将其删除并将其值赋给待删节点即可（直接操作相应的指针也行）</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_2.png\" alt=\"删除后\"></p>\n<p>删除二叉搜索树的代码：来源于<a href=\"https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/</a></p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">class Solution &#123;<br>    public TreeNode deleteNode(TreeNode<span class=\"hljs-built_in\"> root</span>, int<span class=\"hljs-built_in\"> key</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(root</span>==null) <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> root</span>;<br>        <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(key</span> &gt;<span class=\"hljs-built_in\"> root</span>.val) &#123;<br>           <span class=\"hljs-built_in\"> root</span>.right = deleteNode<span class=\"hljs-built_in\">(root</span>.right,<span class=\"hljs-built_in\"> key</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(key</span> &lt;<span class=\"hljs-built_in\"> root</span>.val) &#123;<br>           <span class=\"hljs-built_in\"> root</span>.left = deleteNode<span class=\"hljs-built_in\">(root</span>.left,<span class=\"hljs-built_in\"> key</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(root</span>.left==null ||<span class=\"hljs-built_in\"> root</span>.right==null) &#123;<br>               <span class=\"hljs-built_in\"> root</span> = <span class=\"hljs-built_in\">(root</span>.left==null) ?<span class=\"hljs-built_in\"> root</span>.right :<span class=\"hljs-built_in\"> root</span>.left;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                TreeNode temp =<span class=\"hljs-built_in\"> root</span>.right;<br>                while(temp.left != null) &#123;<br>                    temp =<span class=\"hljs-built_in\"> root</span>.left;<br>                &#125;<br>               <span class=\"hljs-built_in\"> root</span>.val = temp.val;<br>               <span class=\"hljs-built_in\"> root</span>.right = deleteNode<span class=\"hljs-built_in\">(root</span>.right, temp.val);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> root</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中可见：</p>\n<p>若是上述第一种和第二种情况，则直接对二叉树节点进行赋值操作即可。</p>\n<p>若是第三种情况，则将找到的节点的val值赋给对应“根”节点，之后对其子树进行递归，删除对应的节点即可（此时需要删除的节点必满足一二两种情况）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>二叉搜索树（Binary Search Tree），即对任意节点，其值大于其左子树中任意一个节点的值，而小于其右子树中任意一个节点的值。</p>\n<p>是一种特殊的二叉树，因此继承了二叉树的所有特性</p>\n<p>二叉搜索树的相关分析见：<a href=\"https://www.jianshu.com/p/ff4b93b088eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ff4b93b088eb</a></p>\n<h2 id=\"操作实现\"><a href=\"#操作实现\" class=\"headerlink\" title=\"操作实现\"></a>操作实现</h2><h3 id=\"插入元素\"><a href=\"#插入元素\" class=\"headerlink\" title=\"插入元素\"></a>插入元素</h3><p>题目来源：<a href=\"https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/</a></p>\n<p>利用二叉树的递归特性可以很简单的构造出相应的递归函数。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">class</span> Solution &#123;<br>    public TreeNode insert<span class=\"hljs-constructor\">IntoBST(TreeNode <span class=\"hljs-params\">root</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">val</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(root==null) &#123;<br>            root = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">TreeNode(<span class=\"hljs-params\">val</span>)</span>;<br>            return root;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">val</span>&lt;root.<span class=\"hljs-keyword\">val</span>) &#123;<br>            root.left = insert<span class=\"hljs-constructor\">IntoBST(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">left</span>, <span class=\"hljs-params\">val</span>)</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            root.right = insert<span class=\"hljs-constructor\">IntoBST(<span class=\"hljs-params\">root</span>.<span class=\"hljs-params\">right</span>, <span class=\"hljs-params\">val</span>)</span>;<br>        &#125;<br>        return root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查找某元素是否存在\"><a href=\"#查找某元素是否存在\" class=\"headerlink\" title=\"查找某元素是否存在\"></a>查找某元素是否存在</h3><p>使用递归进行判断，如果待判断元素比当前节点值小，则向左递归，否则向右递归。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private boolean contains(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">==null</span>) return <span class=\"hljs-literal\">false</span>;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) == <span class=\"hljs-number\">0</span>) return <span class=\"hljs-literal\">true</span>;<br>    else if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) return contains(node.left, e);<br>    else return contains(node.right, e);<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"最大最小值\"><a href=\"#最大最小值\" class=\"headerlink\" title=\"最大最小值\"></a>最大最小值</h3><p>这个思路很简单，使用递归与迭代都可以，就是向左或右一直搜索即可。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 寻找二分搜索树最小值<br>public E minimum() &#123;<br>    if(size == <span class=\"hljs-number\">0</span>) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"BST is empty\"</span>);<br>    &#125;<br>    return minimun(root).e;<br>&#125;<br><br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">minimun</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span> == null) return <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>    return</span> minimun(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中若要删除最小值或最大值，就可以对应以下“删除元素”中的第一或者第二种情况，十分方便。</p>\n<h3 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h3><p>图片来源：<a href=\"https://www.jianshu.com/p/ff4b93b088eb\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ff4b93b088eb</a></p>\n<p>对二叉搜索树进行删除主要要考虑以下三种情况。</p>\n<p><strong>1、要删除的是叶子节点</strong></p>\n<p>这种情况只需要直接将其设置为空即可</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d1_2.png\" alt=\"删除后\"></p>\n<p><strong>2、要删除的节点有左节点但没有右节点，或有右节点但没有左节点</strong></p>\n<p>这种情况下只需要将其右（左）节点放置在要删除的节点的位置上即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d2_2.png\" alt=\"删除后\"></p>\n<p><strong>3、要删除的节点既有左节点又有右节点</strong></p>\n<p>这种情况下，只需要找到待删节点的右子树中最小的节点（或左子树最大的节点），将其删除并将其值赋给待删节点即可（直接操作相应的指针也行）</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_1.png\" alt=\"删除前\"></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.2%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/d3_2.png\" alt=\"删除后\"></p>\n<p>删除二叉搜索树的代码：来源于<a href=\"https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/</a></p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\">class Solution &#123;<br>    public TreeNode deleteNode(TreeNode<span class=\"hljs-built_in\"> root</span>, int<span class=\"hljs-built_in\"> key</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(root</span>==null) <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> root</span>;<br>        <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(key</span> &gt;<span class=\"hljs-built_in\"> root</span>.val) &#123;<br>           <span class=\"hljs-built_in\"> root</span>.right = deleteNode<span class=\"hljs-built_in\">(root</span>.right,<span class=\"hljs-built_in\"> key</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(key</span> &lt;<span class=\"hljs-built_in\"> root</span>.val) &#123;<br>           <span class=\"hljs-built_in\"> root</span>.left = deleteNode<span class=\"hljs-built_in\">(root</span>.left,<span class=\"hljs-built_in\"> key</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">if</span><span class=\"hljs-built_in\">(root</span>.left==null ||<span class=\"hljs-built_in\"> root</span>.right==null) &#123;<br>               <span class=\"hljs-built_in\"> root</span> = <span class=\"hljs-built_in\">(root</span>.left==null) ?<span class=\"hljs-built_in\"> root</span>.right :<span class=\"hljs-built_in\"> root</span>.left;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                TreeNode temp =<span class=\"hljs-built_in\"> root</span>.right;<br>                while(temp.left != null) &#123;<br>                    temp =<span class=\"hljs-built_in\"> root</span>.left;<br>                &#125;<br>               <span class=\"hljs-built_in\"> root</span>.val = temp.val;<br>               <span class=\"hljs-built_in\"> root</span>.right = deleteNode<span class=\"hljs-built_in\">(root</span>.right, temp.val);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span><span class=\"hljs-built_in\"> root</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中可见：</p>\n<p>若是上述第一种和第二种情况，则直接对二叉树节点进行赋值操作即可。</p>\n<p>若是第三种情况，则将找到的节点的val值赋给对应“根”节点，之后对其子树进行递归，删除对应的节点即可（此时需要删除的节点必满足一二两种情况）</p>\n"},{"title":"5.3、AVL树","date":"2020-08-01T00:44:56.000Z","fileName":"ds-avl-tree","_content":"\n## 概况\n\n### AVL树（平衡二叉树）\n\n平衡二叉树是一种二叉搜索树，对于其中任意一个节点，左子树和右子树的高度差不能超过1。\n\n两位俄罗斯数学家共同发明了一种解决平衡二叉树的算法，所以这种树也称为AVL树（取其名称）。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/AVL.png)\n\n注意的地方：**平衡二叉树从叶子节点向上记录节点的高度**，即叶子节点高度为1，向上依次类推。而使用**平衡因子**用来表示左右子树高度差。\n\n### 平衡二叉树的作用\n\n根据之前对二叉搜索树的时间复杂度分析可知，其各项操作的时间复杂度介于O(log n)与O(n)之间，在节点足够多的情况下这两者的效率相差很大。O(n)复杂度的BST实际上已经退化成了一个链表，而复杂度接近O(log n)的情况则就是平衡二叉树的状态了，因此对二叉树进行“平衡处理”是很重要的。\n\n### 平衡性分析\n\n由于AVL树仍然是一个二叉搜索树，所以二叉搜索树的一切操作都可以进行调用，唯一需要注意的就是**当有破坏平衡的操作发生时，需要进行对应操作维护树的平衡性**。\n\n显然，BST的相关操作中添加元素与删除元素这两个操作可能会破坏树的平衡性，因此在add与remove中递归实现的基础上，应该在递归完成之后沿着节点向上维护平衡性（有点后续遍历的味道）。\n\n### 基本操作\n\n#### 1、右旋（左左）\n\n这种情况发生在**向左子树的左孩子添加一个元素，且正好打破了平衡时（即二叉树向左倾斜）**。这种情况我们可以称为**左左**，需要进行**右旋**操作维持平衡\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B1.png)\n\n右旋操作简单来讲如下伪码：\n\n```\n右旋(L):\t\n\ttemp = L.right;\n\tL.right = T;\n\tT.left = temp;\n```\n\n如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B2.png)\n\n#### 2、左旋（右右）\n\n这种情况发生在**向右子树的右孩子添加一个元素，且正好打破了平衡时（即二叉树向右倾斜）**。这种情况我们可以称为**右右**，需要进行**左旋**操作维持平衡。\n\n**左旋操作可以视为右旋的镜像**\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B1.png)\n\n伪码如下：\n\n```\n左旋(R):\n\ttemp = R.left;\n\tR.left = T;\n\tT.right = temp;\n```\n\n如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B2.png)\n\n### 3、左右\n\n顾名思义，也就是向左子树的右孩子插入一个节点。\n\n这种情况下，我们需要**先对右孩子进行一次左旋，再对对应的“根节点”进行一次右旋**。如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B31.png)\n\n伪码如下：\n\n```\n左旋(R);\n右旋(L);\n```\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B32.png)\n\n#### 4、右左\n\n与“左右”是镜像操作，故不再赘述\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E5%B7%A6.png)\n\n## 操作实现\n\n### node中新增height用于记录高度\n\n```\nprivate class Node {\n    public E e;\n    public Node left, right;\n    public int height;\t// 记录高度\n\n    public Node(E e) {\n        this.e = e;\n        left = null;\n        right = null;\n        height = 1;\n    }\n}\n```\n\n### 功能函数\n\n#### 获取节点的高度\n\n```\n// 获取每个节点的高度\nprivate int getHeight(Node node) {\n    if(node == null)\n        return 0;\n    return node.height;\n}\n```\n\n#### 计算每个点的平衡因子\n\n这个功能方法在AVL树的实现中至关重要，记住由于之后在维护平衡时需要判断是上述基本操作中的哪一种，因此**该函数计算的平衡因子一定不能加上abs函数**。\n\n```\n// 计算每个点的平衡因子\n    private int getBalenceFactor(Node node) {\n        if(node == null)\n            return 0;\n        return getHeight(node.left) - getHeight(node.right);\t// 不要加abs函数\n    }\n```\n\n#### 右旋操作\n\n```\n// 对节点y进行向右旋转操作，返回旋转后新的根节点x\n//        y                              x\n//       / \\                           /   \\\n//      x   T4     向右旋转 (y)        z     y\n//     / \\       - - - - - - - ->    / \\   / \\\n//    z   T3                       T1  T2 T3 T4\n//   / \\\n// T1   T2\nprivate Node rightRotate(Node y) {\n    Node x = y.left;\n    Node T3 = x.right;\n\n    // 右旋转\n    x.right = y;\n    y.left = T3;\n\n    // 更新height\n    y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n    x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n\n    return x;\n}\n```\n\n#### 左旋操作\n\n```\n// 对节点y进行向左旋转操作，返回旋转后新的根节点x\n//    y                             x\n//  /  \\                          /   \\\n// T1   x      向左旋转 (y)       y     z\n//     / \\   - - - - - - - ->   / \\   / \\\n//   T2  z                     T1 T2 T3 T4\n//      / \\\n//     T3 T4\nprivate Node leftRotate(Node y) {\n    Node x = y.right;\n    Node T2 = x.left;\n\n    x.left = y;\n    y.right = T2;\n\n    y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n    x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n    return x;\n}\n```\n\n#### 判断是否是平衡二叉树\n\n```\n// 判断是否是平衡二叉树\npublic boolean isBalanced() {\n    return isBalanced(root);\n}\n\nprivate boolean isBalanced(Node node) {\n    if(node == null)\n        return true;\n    int balanceFactor = getBalenceFactor(node);\n    if(Math.abs(balanceFactor) > 1)\n        return false;\n    return isBalanced(node.left) && isBalanced(node.right);\n}\n```\n\n### 维护平衡与更新高度\n\n```\n// 返回进行平衡维护后的节点\nprivate Node keepBalence(Node node) {\n    // 更新height\n    node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));\n\n    // 平衡维护\n    int balanceFactor = getBalenceFactor(node);\n    if(balanceFactor > 1 && getBalenceFactor(node.left) >= 0) {\n        return rightRotate(node);\n    }\n    if(balanceFactor < -1 && getBalenceFactor(node.right) <=0) {\n        return leftRotate(node);\n    }\n    // LR\n    if(balanceFactor > 1 && getBalenceFactor(node.left) < 0) {\n        node.left = leftRotate(node.left);\n        return rightRotate(node);\n    }\n    // RL\n    if(balanceFactor < -1 && getBalenceFactor(node.right) > 0) {\n        node.right = rightRotate(node.right);\n        return leftRotate(node);\n    }\n    return node;\n}\n```\n\n### 插入节点\n\n```\nprivate Node add(Node node, E e) {\n    if(node == null) {\n        size++;\n        return new Node(e);\n    }\n    if(e.compareTo(node.e) < 0) {\n        node.left = add(node.left, e);\n    }\n    else if(e.compareTo(node.e) >0) {\n        node.right = add(node.right, e);\n    }\n\n    return keepBalence(node);\n}\n```\n\n### 删除节点\n\n```java\nprivate Node remove(Node node, E e) {\n    if(node == null)\n        return null;\n\n    Node retNode;\n    if(e.compareTo(node.e) < 0) {\n        node.left = remove(node.left, e);\n        retNode = node;\n    }\n    else if(e.compareTo(node.e) > 0) {\n        node.right = remove(node.right, e);\n        retNode = node;\n    }\n    else {\n        if(node.left == null || node.right == null) {\n            node = (node.left == null) ? node.right : node.left;\n            retNode = node;\n        }\n        else {\n            Node temp = node.right;\n            while (temp.left != null)\n                temp = temp.left;\n            node.e = temp.e;\n            node.right = remove(node.right, temp.e);\n            retNode = node;\n        }\n\t}\n\n    // 当前节点被删除时\n    if(retNode == null)\n        return null;\n\n    return keepBalence(retNode);\n}\n```\n\n\n\n\n\n\n\n### 参考链接：\n\nhttps://www.cnblogs.com/linhaostudy/p/11300556.html\t（图画的相当清楚，点赞！）\n\nhttps://github.com/liuyubobobo/Play-with-Data-Structures","source":"_posts/学习笔记/数据结构与算法/5.3、AVL树.md","raw":"---\ntitle: 5.3、AVL树\ndate: 2020-08-01 08:44:56\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-avl-tree\n---\n\n## 概况\n\n### AVL树（平衡二叉树）\n\n平衡二叉树是一种二叉搜索树，对于其中任意一个节点，左子树和右子树的高度差不能超过1。\n\n两位俄罗斯数学家共同发明了一种解决平衡二叉树的算法，所以这种树也称为AVL树（取其名称）。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/AVL.png)\n\n注意的地方：**平衡二叉树从叶子节点向上记录节点的高度**，即叶子节点高度为1，向上依次类推。而使用**平衡因子**用来表示左右子树高度差。\n\n### 平衡二叉树的作用\n\n根据之前对二叉搜索树的时间复杂度分析可知，其各项操作的时间复杂度介于O(log n)与O(n)之间，在节点足够多的情况下这两者的效率相差很大。O(n)复杂度的BST实际上已经退化成了一个链表，而复杂度接近O(log n)的情况则就是平衡二叉树的状态了，因此对二叉树进行“平衡处理”是很重要的。\n\n### 平衡性分析\n\n由于AVL树仍然是一个二叉搜索树，所以二叉搜索树的一切操作都可以进行调用，唯一需要注意的就是**当有破坏平衡的操作发生时，需要进行对应操作维护树的平衡性**。\n\n显然，BST的相关操作中添加元素与删除元素这两个操作可能会破坏树的平衡性，因此在add与remove中递归实现的基础上，应该在递归完成之后沿着节点向上维护平衡性（有点后续遍历的味道）。\n\n### 基本操作\n\n#### 1、右旋（左左）\n\n这种情况发生在**向左子树的左孩子添加一个元素，且正好打破了平衡时（即二叉树向左倾斜）**。这种情况我们可以称为**左左**，需要进行**右旋**操作维持平衡\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B1.png)\n\n右旋操作简单来讲如下伪码：\n\n```\n右旋(L):\t\n\ttemp = L.right;\n\tL.right = T;\n\tT.left = temp;\n```\n\n如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B2.png)\n\n#### 2、左旋（右右）\n\n这种情况发生在**向右子树的右孩子添加一个元素，且正好打破了平衡时（即二叉树向右倾斜）**。这种情况我们可以称为**右右**，需要进行**左旋**操作维持平衡。\n\n**左旋操作可以视为右旋的镜像**\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B1.png)\n\n伪码如下：\n\n```\n左旋(R):\n\ttemp = R.left;\n\tR.left = T;\n\tT.right = temp;\n```\n\n如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B2.png)\n\n### 3、左右\n\n顾名思义，也就是向左子树的右孩子插入一个节点。\n\n这种情况下，我们需要**先对右孩子进行一次左旋，再对对应的“根节点”进行一次右旋**。如图所示：\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B31.png)\n\n伪码如下：\n\n```\n左旋(R);\n右旋(L);\n```\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B32.png)\n\n#### 4、右左\n\n与“左右”是镜像操作，故不再赘述\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E5%B7%A6.png)\n\n## 操作实现\n\n### node中新增height用于记录高度\n\n```\nprivate class Node {\n    public E e;\n    public Node left, right;\n    public int height;\t// 记录高度\n\n    public Node(E e) {\n        this.e = e;\n        left = null;\n        right = null;\n        height = 1;\n    }\n}\n```\n\n### 功能函数\n\n#### 获取节点的高度\n\n```\n// 获取每个节点的高度\nprivate int getHeight(Node node) {\n    if(node == null)\n        return 0;\n    return node.height;\n}\n```\n\n#### 计算每个点的平衡因子\n\n这个功能方法在AVL树的实现中至关重要，记住由于之后在维护平衡时需要判断是上述基本操作中的哪一种，因此**该函数计算的平衡因子一定不能加上abs函数**。\n\n```\n// 计算每个点的平衡因子\n    private int getBalenceFactor(Node node) {\n        if(node == null)\n            return 0;\n        return getHeight(node.left) - getHeight(node.right);\t// 不要加abs函数\n    }\n```\n\n#### 右旋操作\n\n```\n// 对节点y进行向右旋转操作，返回旋转后新的根节点x\n//        y                              x\n//       / \\                           /   \\\n//      x   T4     向右旋转 (y)        z     y\n//     / \\       - - - - - - - ->    / \\   / \\\n//    z   T3                       T1  T2 T3 T4\n//   / \\\n// T1   T2\nprivate Node rightRotate(Node y) {\n    Node x = y.left;\n    Node T3 = x.right;\n\n    // 右旋转\n    x.right = y;\n    y.left = T3;\n\n    // 更新height\n    y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n    x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n\n    return x;\n}\n```\n\n#### 左旋操作\n\n```\n// 对节点y进行向左旋转操作，返回旋转后新的根节点x\n//    y                             x\n//  /  \\                          /   \\\n// T1   x      向左旋转 (y)       y     z\n//     / \\   - - - - - - - ->   / \\   / \\\n//   T2  z                     T1 T2 T3 T4\n//      / \\\n//     T3 T4\nprivate Node leftRotate(Node y) {\n    Node x = y.right;\n    Node T2 = x.left;\n\n    x.left = y;\n    y.right = T2;\n\n    y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n    x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n    return x;\n}\n```\n\n#### 判断是否是平衡二叉树\n\n```\n// 判断是否是平衡二叉树\npublic boolean isBalanced() {\n    return isBalanced(root);\n}\n\nprivate boolean isBalanced(Node node) {\n    if(node == null)\n        return true;\n    int balanceFactor = getBalenceFactor(node);\n    if(Math.abs(balanceFactor) > 1)\n        return false;\n    return isBalanced(node.left) && isBalanced(node.right);\n}\n```\n\n### 维护平衡与更新高度\n\n```\n// 返回进行平衡维护后的节点\nprivate Node keepBalence(Node node) {\n    // 更新height\n    node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));\n\n    // 平衡维护\n    int balanceFactor = getBalenceFactor(node);\n    if(balanceFactor > 1 && getBalenceFactor(node.left) >= 0) {\n        return rightRotate(node);\n    }\n    if(balanceFactor < -1 && getBalenceFactor(node.right) <=0) {\n        return leftRotate(node);\n    }\n    // LR\n    if(balanceFactor > 1 && getBalenceFactor(node.left) < 0) {\n        node.left = leftRotate(node.left);\n        return rightRotate(node);\n    }\n    // RL\n    if(balanceFactor < -1 && getBalenceFactor(node.right) > 0) {\n        node.right = rightRotate(node.right);\n        return leftRotate(node);\n    }\n    return node;\n}\n```\n\n### 插入节点\n\n```\nprivate Node add(Node node, E e) {\n    if(node == null) {\n        size++;\n        return new Node(e);\n    }\n    if(e.compareTo(node.e) < 0) {\n        node.left = add(node.left, e);\n    }\n    else if(e.compareTo(node.e) >0) {\n        node.right = add(node.right, e);\n    }\n\n    return keepBalence(node);\n}\n```\n\n### 删除节点\n\n```java\nprivate Node remove(Node node, E e) {\n    if(node == null)\n        return null;\n\n    Node retNode;\n    if(e.compareTo(node.e) < 0) {\n        node.left = remove(node.left, e);\n        retNode = node;\n    }\n    else if(e.compareTo(node.e) > 0) {\n        node.right = remove(node.right, e);\n        retNode = node;\n    }\n    else {\n        if(node.left == null || node.right == null) {\n            node = (node.left == null) ? node.right : node.left;\n            retNode = node;\n        }\n        else {\n            Node temp = node.right;\n            while (temp.left != null)\n                temp = temp.left;\n            node.e = temp.e;\n            node.right = remove(node.right, temp.e);\n            retNode = node;\n        }\n\t}\n\n    // 当前节点被删除时\n    if(retNode == null)\n        return null;\n\n    return keepBalence(retNode);\n}\n```\n\n\n\n\n\n\n\n### 参考链接：\n\nhttps://www.cnblogs.com/linhaostudy/p/11300556.html\t（图画的相当清楚，点赞！）\n\nhttps://github.com/liuyubobobo/Play-with-Data-Structures","slug":"学习笔记/数据结构与算法/5.3、AVL树","published":1,"updated":"2021-01-11T04:51:45.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moam003brwjshd1pd1b0","content":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><h3 id=\"AVL树（平衡二叉树）\"><a href=\"#AVL树（平衡二叉树）\" class=\"headerlink\" title=\"AVL树（平衡二叉树）\"></a>AVL树（平衡二叉树）</h3><p>平衡二叉树是一种二叉搜索树，对于其中任意一个节点，左子树和右子树的高度差不能超过1。</p>\n<p>两位俄罗斯数学家共同发明了一种解决平衡二叉树的算法，所以这种树也称为AVL树（取其名称）。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/AVL.png\" alt=\"\"></p>\n<p>注意的地方：<strong>平衡二叉树从叶子节点向上记录节点的高度</strong>，即叶子节点高度为1，向上依次类推。而使用<strong>平衡因子</strong>用来表示左右子树高度差。</p>\n<h3 id=\"平衡二叉树的作用\"><a href=\"#平衡二叉树的作用\" class=\"headerlink\" title=\"平衡二叉树的作用\"></a>平衡二叉树的作用</h3><p>根据之前对二叉搜索树的时间复杂度分析可知，其各项操作的时间复杂度介于O(log n)与O(n)之间，在节点足够多的情况下这两者的效率相差很大。O(n)复杂度的BST实际上已经退化成了一个链表，而复杂度接近O(log n)的情况则就是平衡二叉树的状态了，因此对二叉树进行“平衡处理”是很重要的。</p>\n<h3 id=\"平衡性分析\"><a href=\"#平衡性分析\" class=\"headerlink\" title=\"平衡性分析\"></a>平衡性分析</h3><p>由于AVL树仍然是一个二叉搜索树，所以二叉搜索树的一切操作都可以进行调用，唯一需要注意的就是<strong>当有破坏平衡的操作发生时，需要进行对应操作维护树的平衡性</strong>。</p>\n<p>显然，BST的相关操作中添加元素与删除元素这两个操作可能会破坏树的平衡性，因此在add与remove中递归实现的基础上，应该在递归完成之后沿着节点向上维护平衡性（有点后续遍历的味道）。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><h4 id=\"1、右旋（左左）\"><a href=\"#1、右旋（左左）\" class=\"headerlink\" title=\"1、右旋（左左）\"></a>1、右旋（左左）</h4><p>这种情况发生在<strong>向左子树的左孩子添加一个元素，且正好打破了平衡时（即二叉树向左倾斜）</strong>。这种情况我们可以称为<strong>左左</strong>，需要进行<strong>右旋</strong>操作维持平衡</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B1.png\" alt=\"\"></p>\n<p>右旋操作简单来讲如下伪码：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">右旋(L):\t<br>\ttemp = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">L</span>.</span></span>right;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">L</span>.</span></span>right = T;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">T</span>.</span></span>left = temp;<br></code></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B2.png\" alt=\"\"></p>\n<h4 id=\"2、左旋（右右）\"><a href=\"#2、左旋（右右）\" class=\"headerlink\" title=\"2、左旋（右右）\"></a>2、左旋（右右）</h4><p>这种情况发生在<strong>向右子树的右孩子添加一个元素，且正好打破了平衡时（即二叉树向右倾斜）</strong>。这种情况我们可以称为<strong>右右</strong>，需要进行<strong>左旋</strong>操作维持平衡。</p>\n<p><strong>左旋操作可以视为右旋的镜像</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B1.png\" alt=\"\"></p>\n<p>伪码如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">左旋(R):<br>\ttemp = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>left;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>left = T;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">T</span>.</span></span>right = temp;<br></code></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B2.png\" alt=\"\"></p>\n<h3 id=\"3、左右\"><a href=\"#3、左右\" class=\"headerlink\" title=\"3、左右\"></a>3、左右</h3><p>顾名思义，也就是向左子树的右孩子插入一个节点。</p>\n<p>这种情况下，我们需要<strong>先对右孩子进行一次左旋，再对对应的“根节点”进行一次右旋</strong>。如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B31.png\" alt=\"\"></p>\n<p>伪码如下：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">左旋(R)<span class=\"hljs-comment\">;</span><br>右旋(L)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B32.png\" alt=\"\"></p>\n<h4 id=\"4、右左\"><a href=\"#4、右左\" class=\"headerlink\" title=\"4、右左\"></a>4、右左</h4><p>与“左右”是镜像操作，故不再赘述</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E5%B7%A6.png\" alt=\"\"></p>\n<h2 id=\"操作实现\"><a href=\"#操作实现\" class=\"headerlink\" title=\"操作实现\"></a>操作实现</h2><h3 id=\"node中新增height用于记录高度\"><a href=\"#node中新增height用于记录高度\" class=\"headerlink\" title=\"node中新增height用于记录高度\"></a>node中新增height用于记录高度</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> E e;<br>    <span class=\"hljs-keyword\">public</span> Node left, right;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> height;\t<span class=\"hljs-comment\">// 记录高度</span><br><br>    <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>        <span class=\"hljs-keyword\">this</span>.e = e;<br>        left = <span class=\"hljs-literal\">null</span>;<br>        right = <span class=\"hljs-literal\">null</span>;<br>        height = <span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"功能函数\"><a href=\"#功能函数\" class=\"headerlink\" title=\"功能函数\"></a>功能函数</h3><h4 id=\"获取节点的高度\"><a href=\"#获取节点的高度\" class=\"headerlink\" title=\"获取节点的高度\"></a>获取节点的高度</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 获取每个节点的高度<br>private int getHeight(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return <span class=\"hljs-number\">0</span>;<br>    return <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">height</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算每个点的平衡因子\"><a href=\"#计算每个点的平衡因子\" class=\"headerlink\" title=\"计算每个点的平衡因子\"></a>计算每个点的平衡因子</h4><p>这个功能方法在AVL树的实现中至关重要，记住由于之后在维护平衡时需要判断是上述基本操作中的哪一种，因此<strong>该函数计算的平衡因子一定不能加上abs函数</strong>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 计算每个点的平衡因子<br>    private int getBalenceFactor(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>        if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>            return <span class=\"hljs-number\">0</span>;<br>        return getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) - getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);\t// 不要加abs函数<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"右旋操作\"><a href=\"#右旋操作\" class=\"headerlink\" title=\"右旋操作\"></a>右旋操作</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 对节点y进行向右旋转操作，返回旋转后新的根节点x</span><br><span class=\"hljs-comment\">//        y                              x</span><br><span class=\"hljs-comment\">//       / \\                           /   \\</span><br><span class=\"hljs-comment\">//      x   T4     向右旋转 (y)        z     y</span><br><span class=\"hljs-comment\">//     / \\       - - - - - - - -&gt;    / \\   / \\</span><br><span class=\"hljs-comment\">//    z   T3                       T1  T2 T3 T4</span><br><span class=\"hljs-comment\">//   / \\</span><br><span class=\"hljs-comment\">// T1   T2</span><br><span class=\"hljs-keyword\">private</span> Node right<span class=\"hljs-constructor\">Rotate(Node <span class=\"hljs-params\">y</span>)</span> &#123;<br>    Node x = y.left;<br>    Node T3 = x.right;<br><br>    <span class=\"hljs-comment\">// 右旋转</span><br>    x.right = y;<br>    y.left = T3;<br><br>    <span class=\"hljs-comment\">// 更新height</span><br>    y.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    x.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"左旋操作\"><a href=\"#左旋操作\" class=\"headerlink\" title=\"左旋操作\"></a>左旋操作</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 对节点y进行向左旋转操作，返回旋转后新的根节点x</span><br><span class=\"hljs-comment\">//    y                             x</span><br><span class=\"hljs-comment\">//  /  \\                          /   \\</span><br><span class=\"hljs-comment\">// T1   x      向左旋转 (y)       y     z</span><br><span class=\"hljs-comment\">//     / \\   - - - - - - - -&gt;   / \\   / \\</span><br><span class=\"hljs-comment\">//   T2  z                     T1 T2 T3 T4</span><br><span class=\"hljs-comment\">//      / \\</span><br><span class=\"hljs-comment\">//     T3 T4</span><br><span class=\"hljs-keyword\">private</span> Node left<span class=\"hljs-constructor\">Rotate(Node <span class=\"hljs-params\">y</span>)</span> &#123;<br>    Node x = y.right;<br>    Node T2 = x.left;<br><br>    x.left = y;<br>    y.right = T2;<br><br>    y.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    x.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"判断是否是平衡二叉树\"><a href=\"#判断是否是平衡二叉树\" class=\"headerlink\" title=\"判断是否是平衡二叉树\"></a>判断是否是平衡二叉树</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 判断是否是平衡二叉树<br>public boolean isBalanced() &#123;<br>    return isBalanced(root);<br>&#125;<br><br>private boolean isBalanced(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return <span class=\"hljs-literal\">true</span>;<br>    int balanceFactor = getBalenceFactor(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    if</span>(Math.abs(balanceFactor) &gt; <span class=\"hljs-number\">1</span>)<br>        return <span class=\"hljs-literal\">false</span>;<br>    return isBalanced(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isBalanced(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"维护平衡与更新高度\"><a href=\"#维护平衡与更新高度\" class=\"headerlink\" title=\"维护平衡与更新高度\"></a>维护平衡与更新高度</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 返回进行平衡维护后的节点<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">keepBalence</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    // 更新height<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">height</span> = <span class=\"hljs-number\">1</span> + Math.max(getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>), getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>));<br><br>    // 平衡维护<br>    int balanceFactor = getBalenceFactor(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    if</span>(balanceFactor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; getBalenceFactor(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>        return rightRotate(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    &#125;<br>    if</span>(balanceFactor <span class=\"hljs-tag\">&lt; -1 &amp;&amp; getBalenceFactor(node.right) &lt;=0) &#123;<br>        return leftRotate(node);<br>    &#125;<br>    // LR<br>    if(balanceFactor &gt;</span> <span class=\"hljs-number\">1</span> &amp;&amp; getBalenceFactor(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = leftRotate(node.left);<br>        return rightRotate(node);<br>    &#125;<br>    // RL<br>    if(balanceFactor &lt; -1 &amp;&amp; getBalenceFactor(node.right) &gt;</span> <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = rightRotate(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>        return leftRotate(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    &#125;<br>    return</span> <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) &#123;<br>        size++;<br>        return new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(e</span>);<br>    &#125;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = add(node.left, e);<br>    &#125;<br>    else if(e.compareTo(node.e) &gt;</span><span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = add(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>, e);<br>    &#125;<br><br>    return keepBalence(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Node node, E e)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(node == <span class=\"hljs-keyword\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br><br>    Node retNode;<br>    <span class=\"hljs-keyword\">if</span>(e.compareTo(node.e) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>        node.left = remove(node.left, e);<br>        retNode = node;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(e.compareTo(node.e) &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        node.right = remove(node.right, e);<br>        retNode = node;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(node.left == <span class=\"hljs-keyword\">null</span> || node.right == <span class=\"hljs-keyword\">null</span>) &#123;<br>            node = (node.left == <span class=\"hljs-keyword\">null</span>) ? node.right : node.left;<br>            retNode = node;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            Node temp = node.right;<br>            <span class=\"hljs-keyword\">while</span> (temp.left != <span class=\"hljs-keyword\">null</span>)<br>                temp = temp.left;<br>            node.e = temp.e;<br>            node.right = remove(node.right, temp.e);<br>            retNode = node;<br>        &#125;<br>\t&#125;<br><br>    <span class=\"hljs-comment\">// 当前节点被删除时</span><br>    <span class=\"hljs-keyword\">if</span>(retNode == <span class=\"hljs-keyword\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br><br>    <span class=\"hljs-keyword\">return</span> keepBalence(retNode);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.cnblogs.com/linhaostudy/p/11300556.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linhaostudy/p/11300556.html</a>    （图画的相当清楚，点赞！）</p>\n<p><a href=\"https://github.com/liuyubobobo/Play-with-Data-Structures\" target=\"_blank\" rel=\"noopener\">https://github.com/liuyubobobo/Play-with-Data-Structures</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><h3 id=\"AVL树（平衡二叉树）\"><a href=\"#AVL树（平衡二叉树）\" class=\"headerlink\" title=\"AVL树（平衡二叉树）\"></a>AVL树（平衡二叉树）</h3><p>平衡二叉树是一种二叉搜索树，对于其中任意一个节点，左子树和右子树的高度差不能超过1。</p>\n<p>两位俄罗斯数学家共同发明了一种解决平衡二叉树的算法，所以这种树也称为AVL树（取其名称）。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/AVL.png\" alt=\"\"></p>\n<p>注意的地方：<strong>平衡二叉树从叶子节点向上记录节点的高度</strong>，即叶子节点高度为1，向上依次类推。而使用<strong>平衡因子</strong>用来表示左右子树高度差。</p>\n<h3 id=\"平衡二叉树的作用\"><a href=\"#平衡二叉树的作用\" class=\"headerlink\" title=\"平衡二叉树的作用\"></a>平衡二叉树的作用</h3><p>根据之前对二叉搜索树的时间复杂度分析可知，其各项操作的时间复杂度介于O(log n)与O(n)之间，在节点足够多的情况下这两者的效率相差很大。O(n)复杂度的BST实际上已经退化成了一个链表，而复杂度接近O(log n)的情况则就是平衡二叉树的状态了，因此对二叉树进行“平衡处理”是很重要的。</p>\n<h3 id=\"平衡性分析\"><a href=\"#平衡性分析\" class=\"headerlink\" title=\"平衡性分析\"></a>平衡性分析</h3><p>由于AVL树仍然是一个二叉搜索树，所以二叉搜索树的一切操作都可以进行调用，唯一需要注意的就是<strong>当有破坏平衡的操作发生时，需要进行对应操作维护树的平衡性</strong>。</p>\n<p>显然，BST的相关操作中添加元素与删除元素这两个操作可能会破坏树的平衡性，因此在add与remove中递归实现的基础上，应该在递归完成之后沿着节点向上维护平衡性（有点后续遍历的味道）。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><h4 id=\"1、右旋（左左）\"><a href=\"#1、右旋（左左）\" class=\"headerlink\" title=\"1、右旋（左左）\"></a>1、右旋（左左）</h4><p>这种情况发生在<strong>向左子树的左孩子添加一个元素，且正好打破了平衡时（即二叉树向左倾斜）</strong>。这种情况我们可以称为<strong>左左</strong>，需要进行<strong>右旋</strong>操作维持平衡</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B1.png\" alt=\"\"></p>\n<p>右旋操作简单来讲如下伪码：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">右旋(L):\t<br>\ttemp = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">L</span>.</span></span>right;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">L</span>.</span></span>right = T;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">T</span>.</span></span>left = temp;<br></code></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E6%97%8B2.png\" alt=\"\"></p>\n<h4 id=\"2、左旋（右右）\"><a href=\"#2、左旋（右右）\" class=\"headerlink\" title=\"2、左旋（右右）\"></a>2、左旋（右右）</h4><p>这种情况发生在<strong>向右子树的右孩子添加一个元素，且正好打破了平衡时（即二叉树向右倾斜）</strong>。这种情况我们可以称为<strong>右右</strong>，需要进行<strong>左旋</strong>操作维持平衡。</p>\n<p><strong>左旋操作可以视为右旋的镜像</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B1.png\" alt=\"\"></p>\n<p>伪码如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">左旋(R):<br>\ttemp = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>left;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>left = T;<br>\t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">T</span>.</span></span>right = temp;<br></code></pre></td></tr></table></figure>\n\n<p>如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E6%97%8B2.png\" alt=\"\"></p>\n<h3 id=\"3、左右\"><a href=\"#3、左右\" class=\"headerlink\" title=\"3、左右\"></a>3、左右</h3><p>顾名思义，也就是向左子树的右孩子插入一个节点。</p>\n<p>这种情况下，我们需要<strong>先对右孩子进行一次左旋，再对对应的“根节点”进行一次右旋</strong>。如图所示：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B31.png\" alt=\"\"></p>\n<p>伪码如下：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">左旋(R)<span class=\"hljs-comment\">;</span><br>右旋(L)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%B7%A6%E5%8F%B32.png\" alt=\"\"></p>\n<h4 id=\"4、右左\"><a href=\"#4、右左\" class=\"headerlink\" title=\"4、右左\"></a>4、右左</h4><p>与“左右”是镜像操作，故不再赘述</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/5.3%E3%80%81AVL%E6%A0%91/%E5%8F%B3%E5%B7%A6.png\" alt=\"\"></p>\n<h2 id=\"操作实现\"><a href=\"#操作实现\" class=\"headerlink\" title=\"操作实现\"></a>操作实现</h2><h3 id=\"node中新增height用于记录高度\"><a href=\"#node中新增height用于记录高度\" class=\"headerlink\" title=\"node中新增height用于记录高度\"></a>node中新增height用于记录高度</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> E e;<br>    <span class=\"hljs-keyword\">public</span> Node left, right;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">int</span> height;\t<span class=\"hljs-comment\">// 记录高度</span><br><br>    <span class=\"hljs-keyword\">public</span> Node(E e) &#123;<br>        <span class=\"hljs-keyword\">this</span>.e = e;<br>        left = <span class=\"hljs-literal\">null</span>;<br>        right = <span class=\"hljs-literal\">null</span>;<br>        height = <span class=\"hljs-number\">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"功能函数\"><a href=\"#功能函数\" class=\"headerlink\" title=\"功能函数\"></a>功能函数</h3><h4 id=\"获取节点的高度\"><a href=\"#获取节点的高度\" class=\"headerlink\" title=\"获取节点的高度\"></a>获取节点的高度</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 获取每个节点的高度<br>private int getHeight(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return <span class=\"hljs-number\">0</span>;<br>    return <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">height</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"计算每个点的平衡因子\"><a href=\"#计算每个点的平衡因子\" class=\"headerlink\" title=\"计算每个点的平衡因子\"></a>计算每个点的平衡因子</h4><p>这个功能方法在AVL树的实现中至关重要，记住由于之后在维护平衡时需要判断是上述基本操作中的哪一种，因此<strong>该函数计算的平衡因子一定不能加上abs函数</strong>。</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 计算每个点的平衡因子<br>    private int getBalenceFactor(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>        if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>            return <span class=\"hljs-number\">0</span>;<br>        return getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) - getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);\t// 不要加abs函数<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"右旋操作\"><a href=\"#右旋操作\" class=\"headerlink\" title=\"右旋操作\"></a>右旋操作</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 对节点y进行向右旋转操作，返回旋转后新的根节点x</span><br><span class=\"hljs-comment\">//        y                              x</span><br><span class=\"hljs-comment\">//       / \\                           /   \\</span><br><span class=\"hljs-comment\">//      x   T4     向右旋转 (y)        z     y</span><br><span class=\"hljs-comment\">//     / \\       - - - - - - - -&gt;    / \\   / \\</span><br><span class=\"hljs-comment\">//    z   T3                       T1  T2 T3 T4</span><br><span class=\"hljs-comment\">//   / \\</span><br><span class=\"hljs-comment\">// T1   T2</span><br><span class=\"hljs-keyword\">private</span> Node right<span class=\"hljs-constructor\">Rotate(Node <span class=\"hljs-params\">y</span>)</span> &#123;<br>    Node x = y.left;<br>    Node T3 = x.right;<br><br>    <span class=\"hljs-comment\">// 右旋转</span><br>    x.right = y;<br>    y.left = T3;<br><br>    <span class=\"hljs-comment\">// 更新height</span><br>    y.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    x.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"左旋操作\"><a href=\"#左旋操作\" class=\"headerlink\" title=\"左旋操作\"></a>左旋操作</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 对节点y进行向左旋转操作，返回旋转后新的根节点x</span><br><span class=\"hljs-comment\">//    y                             x</span><br><span class=\"hljs-comment\">//  /  \\                          /   \\</span><br><span class=\"hljs-comment\">// T1   x      向左旋转 (y)       y     z</span><br><span class=\"hljs-comment\">//     / \\   - - - - - - - -&gt;   / \\   / \\</span><br><span class=\"hljs-comment\">//   T2  z                     T1 T2 T3 T4</span><br><span class=\"hljs-comment\">//      / \\</span><br><span class=\"hljs-comment\">//     T3 T4</span><br><span class=\"hljs-keyword\">private</span> Node left<span class=\"hljs-constructor\">Rotate(Node <span class=\"hljs-params\">y</span>)</span> &#123;<br>    Node x = y.right;<br>    Node T2 = x.left;<br><br>    x.left = y;<br>    y.right = T2;<br><br>    y.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">y</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    x.height = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Math</span>.</span></span>max(get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">left</span>)</span>, get<span class=\"hljs-constructor\">Height(<span class=\"hljs-params\">x</span>.<span class=\"hljs-params\">right</span>)</span>) + <span class=\"hljs-number\">1</span>;<br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"判断是否是平衡二叉树\"><a href=\"#判断是否是平衡二叉树\" class=\"headerlink\" title=\"判断是否是平衡二叉树\"></a>判断是否是平衡二叉树</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 判断是否是平衡二叉树<br>public boolean isBalanced() &#123;<br>    return isBalanced(root);<br>&#125;<br><br>private boolean isBalanced(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return <span class=\"hljs-literal\">true</span>;<br>    int balanceFactor = getBalenceFactor(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    if</span>(Math.abs(balanceFactor) &gt; <span class=\"hljs-number\">1</span>)<br>        return <span class=\"hljs-literal\">false</span>;<br>    return isBalanced(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isBalanced(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"维护平衡与更新高度\"><a href=\"#维护平衡与更新高度\" class=\"headerlink\" title=\"维护平衡与更新高度\"></a>维护平衡与更新高度</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 返回进行平衡维护后的节点<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">keepBalence</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    // 更新height<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">height</span> = <span class=\"hljs-number\">1</span> + Math.max(getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>), getHeight(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>));<br><br>    // 平衡维护<br>    int balanceFactor = getBalenceFactor(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    if</span>(balanceFactor &gt; <span class=\"hljs-number\">1</span> &amp;&amp; getBalenceFactor(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &gt;= <span class=\"hljs-number\">0</span>) &#123;<br>        return rightRotate(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    &#125;<br>    if</span>(balanceFactor <span class=\"hljs-tag\">&lt; -1 &amp;&amp; getBalenceFactor(node.right) &lt;=0) &#123;<br>        return leftRotate(node);<br>    &#125;<br>    // LR<br>    if(balanceFactor &gt;</span> <span class=\"hljs-number\">1</span> &amp;&amp; getBalenceFactor(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = leftRotate(node.left);<br>        return rightRotate(node);<br>    &#125;<br>    // RL<br>    if(balanceFactor &lt; -1 &amp;&amp; getBalenceFactor(node.right) &gt;</span> <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = rightRotate(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>);<br>        return leftRotate(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    &#125;<br>    return</span> <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) &#123;<br>        size++;<br>        return new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(e</span>);<br>    &#125;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = add(node.left, e);<br>    &#125;<br>    else if(e.compareTo(node.e) &gt;</span><span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = add(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>, e);<br>    &#125;<br><br>    return keepBalence(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> Node <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(Node node, E e)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(node == <span class=\"hljs-keyword\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br><br>    Node retNode;<br>    <span class=\"hljs-keyword\">if</span>(e.compareTo(node.e) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>        node.left = remove(node.left, e);<br>        retNode = node;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(e.compareTo(node.e) &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        node.right = remove(node.right, e);<br>        retNode = node;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(node.left == <span class=\"hljs-keyword\">null</span> || node.right == <span class=\"hljs-keyword\">null</span>) &#123;<br>            node = (node.left == <span class=\"hljs-keyword\">null</span>) ? node.right : node.left;<br>            retNode = node;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            Node temp = node.right;<br>            <span class=\"hljs-keyword\">while</span> (temp.left != <span class=\"hljs-keyword\">null</span>)<br>                temp = temp.left;<br>            node.e = temp.e;<br>            node.right = remove(node.right, temp.e);<br>            retNode = node;<br>        &#125;<br>\t&#125;<br><br>    <span class=\"hljs-comment\">// 当前节点被删除时</span><br>    <span class=\"hljs-keyword\">if</span>(retNode == <span class=\"hljs-keyword\">null</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br><br>    <span class=\"hljs-keyword\">return</span> keepBalence(retNode);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.cnblogs.com/linhaostudy/p/11300556.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/linhaostudy/p/11300556.html</a>    （图画的相当清楚，点赞！）</p>\n<p><a href=\"https://github.com/liuyubobobo/Play-with-Data-Structures\" target=\"_blank\" rel=\"noopener\">https://github.com/liuyubobobo/Play-with-Data-Structures</a></p>\n"},{"title":"5.4、红黑树","date":"2020-08-02T00:50:13.000Z","fileName":"ds-RBTree","_content":"\n## 概述\n\n### 红黑树的定义与性质\n\n红黑树与AVL树一样，也是一个自平衡的二叉搜索树，其中节点使用“红”与“黑”进行标注。\n\n关于对红黑树的理解，根据23树的相关定义可以很快的认识。\n\n#### 基本性质\n\n1. 每个节点或者是红色的，或者是黑色的。\n2. 根节点是黑色的。\n3. 每一个叶子节点（最后的空节点）是黑色的。\n4. 如果一个节点是红色的，那么他的孩子节点都是黑色的\n5. 从任意一个节点到叶子节点，经过的黑色节点是一样的。\n\n显然，根据第5条性质，可以知道**红黑树是保持“黑平衡”的二叉树**。因此严格意义上不是平衡二叉树，最大高度2log n（每个黑节点都带个红节点）\n\n### 与AVL树的比较\n\n显然，如果单纯按照树的高度这一标准看，红黑树似乎比不上AVL树的性能，但**红黑树添加元素、删除元素较AVL树更快**，在整体性能上优于AVL树，所以这是一个相当重要的数据结构。\n\n当元素偏向于固定，主要进行查询等操作时，使用AVL树更优\n\n当需要频繁的进行插入与删除操作时，则使用红黑树更优。\n\n\n\n## 操作\n\n红黑树的操作绝大部分与二叉搜索树相同，不同的地方与AVL树相同，主要在维护自平衡上，集中表现在插入与删除的过程。**维护的时机也与AVL树一致，在添加节点后回溯向上维护（简单来讲就是代码应该写在插入的递归业务之后，采用后序的思想）**\n\n### 辅助方法\n\n#### 基本Node类\n\n设置插入节点的初始颜色：**红色**。\n\n理由：红色在父结点（如果存在）为黑色结点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1，必须做自平衡。（得时刻记住，红黑树是一个黑节点平衡的树）\n\n```\nprivate static final boolean RED = true;\nprivate static final boolean BLACK = false;\n\nprivate class Node {\n    public E e;\n    public Node left, right;\n    public boolean color;\n\n    public Node(E e) {\n        this.e = e;\n        left = null;\n        right = null;\n        color = RED;\t// 初始节点设置为红色\n    }\n}\n```\n\n#### 判断当前节点是否为红色\n\n```\nprivate boolean isRed(Node node) {\n    if(node == null)\n        return BLACK;\n    return RED;\n}\n```\n\n#### 左旋\n\n```\n//   node                     x\n//  /   \\     左旋转         /  \\\n// T1   x   --------->   node   T3\n//     / \\              /   \\\n//    T2 T3            T1   T2\nprivate Node leftRotate(Node node) {\n    Node x = node.right;\n\n    node.right = x.left;\n    x.left = node;\n\n    x.color = node.color;\n    node.color = RED;\n\n    return x;\n}\n```\n\n#### 右旋\n\n```\n//     node                   x\n//    /   \\     右旋转       /  \\\n//   x    T2   ------->   y   node\n//  / \\                       /  \\\n// y  T1                     T1  T2\nprivate Node rightRotate(Node node) {\n    Node x = node.left;\n    node.left = x.right;\n    x.right = node;\n\n    x.color = node.color;\n    node.color = RED;\n\n    return x;\n}\n```\n\n#### 颜色翻转\n\n```\nprivate void flipColors(Node node) {\n    node.color = RED;\n    node.left.color = BLACK;\n    node.right.color = BLACK;\n}\n```\n\n\n\n### 插入\n\n插入时可能会遇到的情况下图已经总结的很清楚了。主要考虑情景4\n\n<img src=\"http://cdn.ziyedy.top/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5.png\" style=\"zoom:;\" />\n\n而情景4主要可以分为以下①②③三种插入情况，其实是可以分别转化的\n\n<img src=\"http://cdn.ziyedy.top/%E6%8F%92%E5%85%A5.jpg\" style=\"zoom:80%;\" />\n\n这三种操作具体可见辅助方法中的代码。同时应当注意，在这种代码实现下，**红节点是只会出现在左孩子上的（由于颜色翻转的实现）**\n\n#### 情况③\n\n这种情况直接插入并进行**颜色翻转**操作。\n\n#### 情况②\n\n这种情况先进行右旋再进行颜色翻转\n\n#### 情况①\n\n先进行左旋转、再进行右旋转、最后进行颜色反转\n\n```\n// 向红黑树中添加新元素\npublic void add(E e) {\n    root = add(root, e);\n    root.color = BLACK;\t// 设置根节点为黑\n}\n    \nprivate Node add(Node node, E e) {\n    if(node == null) {\n        size++;\n        return new Node(e);\n    }\n    if(e.compareTo(node.e) < 0) {\n        node.left = add(node.left, e);\n    }\n    else if(e.compareTo(node.e) >0) {\n        node.right = add(node.right, e);\n    }\n\n\t// 情况1\n    if(isRed(node.right) && !isRed(node.left))\n        node = leftRotate(node);\n    // 情况2\n    if(isRed(node.left) && isRed(node.left.left))\n        node = rightRotate(node);\n    // 情况3\n    if(isRed(node.left) && isRed(node.right))\n        flipColors(node);\n        \n    return node;\n}\n```\n\n\n\n\n\n\n\n### 参考链接\n\nhttps://www.jianshu.com/p/e136ec79235c\t这篇文章对红黑树阐述的特别详细，其实要了解红黑树看这一篇就行了。\n\n","source":"_posts/学习笔记/数据结构与算法/5.4、红黑树.md","raw":"---\ntitle: 5.4、红黑树\ndate: 2020-08-02 08:50:13\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-RBTree\n---\n\n## 概述\n\n### 红黑树的定义与性质\n\n红黑树与AVL树一样，也是一个自平衡的二叉搜索树，其中节点使用“红”与“黑”进行标注。\n\n关于对红黑树的理解，根据23树的相关定义可以很快的认识。\n\n#### 基本性质\n\n1. 每个节点或者是红色的，或者是黑色的。\n2. 根节点是黑色的。\n3. 每一个叶子节点（最后的空节点）是黑色的。\n4. 如果一个节点是红色的，那么他的孩子节点都是黑色的\n5. 从任意一个节点到叶子节点，经过的黑色节点是一样的。\n\n显然，根据第5条性质，可以知道**红黑树是保持“黑平衡”的二叉树**。因此严格意义上不是平衡二叉树，最大高度2log n（每个黑节点都带个红节点）\n\n### 与AVL树的比较\n\n显然，如果单纯按照树的高度这一标准看，红黑树似乎比不上AVL树的性能，但**红黑树添加元素、删除元素较AVL树更快**，在整体性能上优于AVL树，所以这是一个相当重要的数据结构。\n\n当元素偏向于固定，主要进行查询等操作时，使用AVL树更优\n\n当需要频繁的进行插入与删除操作时，则使用红黑树更优。\n\n\n\n## 操作\n\n红黑树的操作绝大部分与二叉搜索树相同，不同的地方与AVL树相同，主要在维护自平衡上，集中表现在插入与删除的过程。**维护的时机也与AVL树一致，在添加节点后回溯向上维护（简单来讲就是代码应该写在插入的递归业务之后，采用后序的思想）**\n\n### 辅助方法\n\n#### 基本Node类\n\n设置插入节点的初始颜色：**红色**。\n\n理由：红色在父结点（如果存在）为黑色结点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1，必须做自平衡。（得时刻记住，红黑树是一个黑节点平衡的树）\n\n```\nprivate static final boolean RED = true;\nprivate static final boolean BLACK = false;\n\nprivate class Node {\n    public E e;\n    public Node left, right;\n    public boolean color;\n\n    public Node(E e) {\n        this.e = e;\n        left = null;\n        right = null;\n        color = RED;\t// 初始节点设置为红色\n    }\n}\n```\n\n#### 判断当前节点是否为红色\n\n```\nprivate boolean isRed(Node node) {\n    if(node == null)\n        return BLACK;\n    return RED;\n}\n```\n\n#### 左旋\n\n```\n//   node                     x\n//  /   \\     左旋转         /  \\\n// T1   x   --------->   node   T3\n//     / \\              /   \\\n//    T2 T3            T1   T2\nprivate Node leftRotate(Node node) {\n    Node x = node.right;\n\n    node.right = x.left;\n    x.left = node;\n\n    x.color = node.color;\n    node.color = RED;\n\n    return x;\n}\n```\n\n#### 右旋\n\n```\n//     node                   x\n//    /   \\     右旋转       /  \\\n//   x    T2   ------->   y   node\n//  / \\                       /  \\\n// y  T1                     T1  T2\nprivate Node rightRotate(Node node) {\n    Node x = node.left;\n    node.left = x.right;\n    x.right = node;\n\n    x.color = node.color;\n    node.color = RED;\n\n    return x;\n}\n```\n\n#### 颜色翻转\n\n```\nprivate void flipColors(Node node) {\n    node.color = RED;\n    node.left.color = BLACK;\n    node.right.color = BLACK;\n}\n```\n\n\n\n### 插入\n\n插入时可能会遇到的情况下图已经总结的很清楚了。主要考虑情景4\n\n<img src=\"http://cdn.ziyedy.top/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5.png\" style=\"zoom:;\" />\n\n而情景4主要可以分为以下①②③三种插入情况，其实是可以分别转化的\n\n<img src=\"http://cdn.ziyedy.top/%E6%8F%92%E5%85%A5.jpg\" style=\"zoom:80%;\" />\n\n这三种操作具体可见辅助方法中的代码。同时应当注意，在这种代码实现下，**红节点是只会出现在左孩子上的（由于颜色翻转的实现）**\n\n#### 情况③\n\n这种情况直接插入并进行**颜色翻转**操作。\n\n#### 情况②\n\n这种情况先进行右旋再进行颜色翻转\n\n#### 情况①\n\n先进行左旋转、再进行右旋转、最后进行颜色反转\n\n```\n// 向红黑树中添加新元素\npublic void add(E e) {\n    root = add(root, e);\n    root.color = BLACK;\t// 设置根节点为黑\n}\n    \nprivate Node add(Node node, E e) {\n    if(node == null) {\n        size++;\n        return new Node(e);\n    }\n    if(e.compareTo(node.e) < 0) {\n        node.left = add(node.left, e);\n    }\n    else if(e.compareTo(node.e) >0) {\n        node.right = add(node.right, e);\n    }\n\n\t// 情况1\n    if(isRed(node.right) && !isRed(node.left))\n        node = leftRotate(node);\n    // 情况2\n    if(isRed(node.left) && isRed(node.left.left))\n        node = rightRotate(node);\n    // 情况3\n    if(isRed(node.left) && isRed(node.right))\n        flipColors(node);\n        \n    return node;\n}\n```\n\n\n\n\n\n\n\n### 参考链接\n\nhttps://www.jianshu.com/p/e136ec79235c\t这篇文章对红黑树阐述的特别详细，其实要了解红黑树看这一篇就行了。\n\n","slug":"学习笔记/数据结构与算法/5.4、红黑树","published":1,"updated":"2021-01-11T04:51:52.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moan003erwjs83eh0vfe","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"红黑树的定义与性质\"><a href=\"#红黑树的定义与性质\" class=\"headerlink\" title=\"红黑树的定义与性质\"></a>红黑树的定义与性质</h3><p>红黑树与AVL树一样，也是一个自平衡的二叉搜索树，其中节点使用“红”与“黑”进行标注。</p>\n<p>关于对红黑树的理解，根据23树的相关定义可以很快的认识。</p>\n<h4 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h4><ol>\n<li>每个节点或者是红色的，或者是黑色的。</li>\n<li>根节点是黑色的。</li>\n<li>每一个叶子节点（最后的空节点）是黑色的。</li>\n<li>如果一个节点是红色的，那么他的孩子节点都是黑色的</li>\n<li>从任意一个节点到叶子节点，经过的黑色节点是一样的。</li>\n</ol>\n<p>显然，根据第5条性质，可以知道<strong>红黑树是保持“黑平衡”的二叉树</strong>。因此严格意义上不是平衡二叉树，最大高度2log n（每个黑节点都带个红节点）</p>\n<h3 id=\"与AVL树的比较\"><a href=\"#与AVL树的比较\" class=\"headerlink\" title=\"与AVL树的比较\"></a>与AVL树的比较</h3><p>显然，如果单纯按照树的高度这一标准看，红黑树似乎比不上AVL树的性能，但<strong>红黑树添加元素、删除元素较AVL树更快</strong>，在整体性能上优于AVL树，所以这是一个相当重要的数据结构。</p>\n<p>当元素偏向于固定，主要进行查询等操作时，使用AVL树更优</p>\n<p>当需要频繁的进行插入与删除操作时，则使用红黑树更优。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>红黑树的操作绝大部分与二叉搜索树相同，不同的地方与AVL树相同，主要在维护自平衡上，集中表现在插入与删除的过程。<strong>维护的时机也与AVL树一致，在添加节点后回溯向上维护（简单来讲就是代码应该写在插入的递归业务之后，采用后序的思想）</strong></p>\n<h3 id=\"辅助方法\"><a href=\"#辅助方法\" class=\"headerlink\" title=\"辅助方法\"></a>辅助方法</h3><h4 id=\"基本Node类\"><a href=\"#基本Node类\" class=\"headerlink\" title=\"基本Node类\"></a>基本Node类</h4><p>设置插入节点的初始颜色：<strong>红色</strong>。</p>\n<p>理由：红色在父结点（如果存在）为黑色结点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1，必须做自平衡。（得时刻记住，红黑树是一个黑节点平衡的树）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">boolean</span> RED = <span class=\"hljs-keyword\">true</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">boolean</span> BLACK = <span class=\"hljs-keyword\">false</span>;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> E e;<br>    <span class=\"hljs-keyword\">public</span> Node left, right;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> color;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.e = e;<br>        left = <span class=\"hljs-keyword\">null</span>;<br>        right = <span class=\"hljs-keyword\">null</span>;<br>        color = RED;\t<span class=\"hljs-comment\">// 初始节点设置为红色</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"判断当前节点是否为红色\"><a href=\"#判断当前节点是否为红色\" class=\"headerlink\" title=\"判断当前节点是否为红色\"></a>判断当前节点是否为红色</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private boolean isRed(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return BLACK;<br>    return RED;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">//   <span class=\"hljs-keyword\">node</span>                     <span class=\"hljs-title\">x</span><br>//  /   \\     左旋转         /  \\<br>// T1   x   ---------&gt;   <span class=\"hljs-keyword\">node</span>   <span class=\"hljs-title\">T3</span><br>//     / \\              /   \\<br>//    T2 T3            T1   T2<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">leftRotate</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">x</span> = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>;<br><br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = x.left;<br>    x.left = <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br><br>    x</span>.color = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">//     <span class=\"hljs-keyword\">node</span>                   <span class=\"hljs-title\">x</span><br>//    /   \\     右旋转       /  \\<br>//   x    T2   -------&gt;   y   <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">//  / \\                       /  \\<br>// y</span>  T1                     T1  T2<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">rightRotate</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">x</span> = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span> = x.right;<br>    x.right = <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br><br>    x</span>.color = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"颜色翻转\"><a href=\"#颜色翻转\" class=\"headerlink\" title=\"颜色翻转\"></a>颜色翻转</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private void flipColors(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>.color = BLACK;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>.color = BLACK;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>插入时可能会遇到的情况下图已经总结的很清楚了。主要考虑情景4</p>\n<img src=\"http://cdn.ziyedy.top/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5.png\" style=\"zoom:;\" />\n\n<p>而情景4主要可以分为以下①②③三种插入情况，其实是可以分别转化的</p>\n<img src=\"http://cdn.ziyedy.top/%E6%8F%92%E5%85%A5.jpg\" style=\"zoom:80%;\" />\n\n<p>这三种操作具体可见辅助方法中的代码。同时应当注意，在这种代码实现下，<strong>红节点是只会出现在左孩子上的（由于颜色翻转的实现）</strong></p>\n<h4 id=\"情况③\"><a href=\"#情况③\" class=\"headerlink\" title=\"情况③\"></a>情况③</h4><p>这种情况直接插入并进行<strong>颜色翻转</strong>操作。</p>\n<h4 id=\"情况②\"><a href=\"#情况②\" class=\"headerlink\" title=\"情况②\"></a>情况②</h4><p>这种情况先进行右旋再进行颜色翻转</p>\n<h4 id=\"情况①\"><a href=\"#情况①\" class=\"headerlink\" title=\"情况①\"></a>情况①</h4><p>先进行左旋转、再进行右旋转、最后进行颜色反转</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 向红黑树中添加新元素<br>public void add(E e) &#123;<br>    root = add(root, e);<br>    root.color = BLACK;\t// 设置根节点为黑<br>&#125;<br>    <br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) &#123;<br>        size++;<br>        return new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(e</span>);<br>    &#125;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = add(node.left, e);<br>    &#125;<br>    else if(e.compareTo(node.e) &gt;</span><span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = add(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>, e);<br>    &#125;<br><br>\t// 情况<span class=\"hljs-number\">1</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>) &amp;&amp; !isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>))<br>        <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">= leftRotate</span>(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    // 情况2</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>.left))<br>        <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">= rightRotate</span>(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    // 情况3</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>))<br>        flipColors(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>        <br>    return</span> <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/e136ec79235c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e136ec79235c</a>    这篇文章对红黑树阐述的特别详细，其实要了解红黑树看这一篇就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"红黑树的定义与性质\"><a href=\"#红黑树的定义与性质\" class=\"headerlink\" title=\"红黑树的定义与性质\"></a>红黑树的定义与性质</h3><p>红黑树与AVL树一样，也是一个自平衡的二叉搜索树，其中节点使用“红”与“黑”进行标注。</p>\n<p>关于对红黑树的理解，根据23树的相关定义可以很快的认识。</p>\n<h4 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h4><ol>\n<li>每个节点或者是红色的，或者是黑色的。</li>\n<li>根节点是黑色的。</li>\n<li>每一个叶子节点（最后的空节点）是黑色的。</li>\n<li>如果一个节点是红色的，那么他的孩子节点都是黑色的</li>\n<li>从任意一个节点到叶子节点，经过的黑色节点是一样的。</li>\n</ol>\n<p>显然，根据第5条性质，可以知道<strong>红黑树是保持“黑平衡”的二叉树</strong>。因此严格意义上不是平衡二叉树，最大高度2log n（每个黑节点都带个红节点）</p>\n<h3 id=\"与AVL树的比较\"><a href=\"#与AVL树的比较\" class=\"headerlink\" title=\"与AVL树的比较\"></a>与AVL树的比较</h3><p>显然，如果单纯按照树的高度这一标准看，红黑树似乎比不上AVL树的性能，但<strong>红黑树添加元素、删除元素较AVL树更快</strong>，在整体性能上优于AVL树，所以这是一个相当重要的数据结构。</p>\n<p>当元素偏向于固定，主要进行查询等操作时，使用AVL树更优</p>\n<p>当需要频繁的进行插入与删除操作时，则使用红黑树更优。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><p>红黑树的操作绝大部分与二叉搜索树相同，不同的地方与AVL树相同，主要在维护自平衡上，集中表现在插入与删除的过程。<strong>维护的时机也与AVL树一致，在添加节点后回溯向上维护（简单来讲就是代码应该写在插入的递归业务之后，采用后序的思想）</strong></p>\n<h3 id=\"辅助方法\"><a href=\"#辅助方法\" class=\"headerlink\" title=\"辅助方法\"></a>辅助方法</h3><h4 id=\"基本Node类\"><a href=\"#基本Node类\" class=\"headerlink\" title=\"基本Node类\"></a>基本Node类</h4><p>设置插入节点的初始颜色：<strong>红色</strong>。</p>\n<p>理由：红色在父结点（如果存在）为黑色结点时，红黑树的黑色平衡没被破坏，不需要做自平衡操作。但如果插入结点是黑色，那么插入位置所在的子树黑色结点总是多1，必须做自平衡。（得时刻记住，红黑树是一个黑节点平衡的树）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">boolean</span> RED = <span class=\"hljs-keyword\">true</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">boolean</span> BLACK = <span class=\"hljs-keyword\">false</span>;<br><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>&#123;<br>    <span class=\"hljs-keyword\">public</span> E e;<br>    <span class=\"hljs-keyword\">public</span> Node left, right;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> color;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.e = e;<br>        left = <span class=\"hljs-keyword\">null</span>;<br>        right = <span class=\"hljs-keyword\">null</span>;<br>        color = RED;\t<span class=\"hljs-comment\">// 初始节点设置为红色</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"判断当前节点是否为红色\"><a href=\"#判断当前节点是否为红色\" class=\"headerlink\" title=\"判断当前节点是否为红色\"></a>判断当前节点是否为红色</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private boolean isRed(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>)<br>        return BLACK;<br>    return RED;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">//   <span class=\"hljs-keyword\">node</span>                     <span class=\"hljs-title\">x</span><br>//  /   \\     左旋转         /  \\<br>// T1   x   ---------&gt;   <span class=\"hljs-keyword\">node</span>   <span class=\"hljs-title\">T3</span><br>//     / \\              /   \\<br>//    T2 T3            T1   T2<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">leftRotate</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">x</span> = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>;<br><br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = x.left;<br>    x.left = <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br><br>    x</span>.color = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">//     <span class=\"hljs-keyword\">node</span>                   <span class=\"hljs-title\">x</span><br>//    /   \\     右旋转       /  \\<br>//   x    T2   -------&gt;   y   <span class=\"hljs-keyword\">node</span><br><span class=\"hljs-title\">//  / \\                       /  \\<br>// y</span>  T1                     T1  T2<br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">rightRotate</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">x</span> = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span> = x.right;<br>    x.right = <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br><br>    x</span>.color = <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span>;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br><br>    return x;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"颜色翻转\"><a href=\"#颜色翻转\" class=\"headerlink\" title=\"颜色翻转\"></a>颜色翻转</h4><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">private void flipColors(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>) &#123;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">color</span> = RED;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>.color = BLACK;<br>    <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>.color = BLACK;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>插入时可能会遇到的情况下图已经总结的很清楚了。主要考虑情景4</p>\n<img src=\"http://cdn.ziyedy.top/%E7%BA%A2%E9%BB%91%E6%A0%91%E6%8F%92%E5%85%A5.png\" style=\"zoom:;\" />\n\n<p>而情景4主要可以分为以下①②③三种插入情况，其实是可以分别转化的</p>\n<img src=\"http://cdn.ziyedy.top/%E6%8F%92%E5%85%A5.jpg\" style=\"zoom:80%;\" />\n\n<p>这三种操作具体可见辅助方法中的代码。同时应当注意，在这种代码实现下，<strong>红节点是只会出现在左孩子上的（由于颜色翻转的实现）</strong></p>\n<h4 id=\"情况③\"><a href=\"#情况③\" class=\"headerlink\" title=\"情况③\"></a>情况③</h4><p>这种情况直接插入并进行<strong>颜色翻转</strong>操作。</p>\n<h4 id=\"情况②\"><a href=\"#情况②\" class=\"headerlink\" title=\"情况②\"></a>情况②</h4><p>这种情况先进行右旋再进行颜色翻转</p>\n<h4 id=\"情况①\"><a href=\"#情况①\" class=\"headerlink\" title=\"情况①\"></a>情况①</h4><p>先进行左旋转、再进行右旋转、最后进行颜色反转</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">// 向红黑树中添加新元素<br>public void add(E e) &#123;<br>    root = add(root, e);<br>    root.color = BLACK;\t// 设置根节点为黑<br>&#125;<br>    <br>private <span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-keyword\">Node</span> <span class=\"hljs-title\">node</span>, E e) &#123;<br>    if(<span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">== null</span>) &#123;<br>        size++;<br>        return new <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">(e</span>);<br>    &#125;<br>    if(e.compareTo(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">e</span>) <span class=\"hljs-tag\">&lt; 0) &#123;<br>        node.left = add(node.left, e);<br>    &#125;<br>    else if(e.compareTo(node.e) &gt;</span><span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span> = add(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>, e);<br>    &#125;<br><br>\t// 情况<span class=\"hljs-number\">1</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>) &amp;&amp; !isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>))<br>        <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">= leftRotate</span>(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    // 情况2</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>.left))<br>        <span class=\"hljs-keyword\">node</span> <span class=\"hljs-title\">= rightRotate</span>(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>    // 情况3</span><br>    if(isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">left</span>) &amp;&amp; isRed(<span class=\"hljs-keyword\">node</span>.<span class=\"hljs-title\">right</span>))<br>        flipColors(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);<br>        <br>    return</span> <span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">;<br>&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/e136ec79235c\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/e136ec79235c</a>    这篇文章对红黑树阐述的特别详细，其实要了解红黑树看这一篇就行了。</p>\n"},{"title":"6、集合与映射","date":"2020-07-23T13:55:53.000Z","fileName":"ds-set-and-map","_content":"\n## 集合特点\n\n集合通常由一组无序的，**不能重复**的元素构成。\n\n封装的集合接口如下：\n\n```\npublic interface Set<E> {\n    void add(E e);\n    void remove(E e);\n    boolean contains(E e);\n    int getSize();\n    boolean isEmpty();\n}\n```\n\n\n\n## 集合实现\n\n基于BST实现的集合为有序集合，基于链表实现的集合为无序集合\n\n### 基于二叉树\n\n由之前构建二叉树可知，当元素数值在二叉树中存在时，我们并没有对其进行处理，因此利用二叉树（或者说二叉搜索树）构建集合具有天然的优势。Java代码实现如下：\n\n```\npublic class BSTSet<E extends Comparable<E>> implements Set<E> {\n\n    private BST<E> bst;\n\n    public BSTSet() {\n        bst = new BST<>();\n    }\n\n    @Override\n    public void add(E e) {\n        bst.add(e);\n    }\n\n    @Override\n    public void remove(E e) {\n        bst.remove(e);\n    }\n\n    @Override\n    public boolean contains(E e) {\n        return bst.contains(e);\n    }\n\n    @Override\n    public int getSize() {\n        return bst.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return bst.isEmpty();\n    }\n}\n```\n\n#### 基于链表等线性结构\n\n```\npublic class LinkedListSet<E> implements Set<E> {\n\n    private LinkedList<E> list;\n\n    public LinkedListSet() {\n        list = new LinkedList<>();\n    }\n\n    @Override\n    public void add(E e) {\n        if(!list.contains(e)) {\n            list.addFirst(e);   // 在头部添加复杂度为O(1)\n        }\n    }\n\n    @Override\n    public void remove(E e) {\n        list.removeElement(e);\n    }\n\n    @Override\n    public boolean contains(E e) {\n        return list.contains(e);\n    }\n\n    @Override\n    public int getSize() {\n        return list.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n}\n```\n\n#### 复杂度分析\n\n基于链表的增删改查复杂度都为O(n)级别\n\n而基于二叉搜索树的则为O(h)级别（h为二叉树的高度）。依据二叉树的性质，最好的情况（平衡）为O(log n) ，最差为O(n)。\n\n\n\n## 映射特点\n\n映射通俗来讲就是存储（键，值）数据对的数据结构，可以根据键（Key）来寻找值（Value）。\n\n如下是映射的接口及需要实现的方法\n\n```\npublic interface Map<K, V> {\n    void add(K key, V value);\n    V remove(K key);\n    boolean contains(K key);\n    V get(K key);\n    void set(K key, V newValue);\n    int getSize();\n    boolean isEmpty();\n}\n```\n\n### 基于二叉树\n\n实现基本框架\n\n```\npublic class BSTMap<K extends Comparable<K>, V> implements Map<K, V> {\n\n    private class Node {\n        public K key;\n        public V value;\n        public Node left, right;\n\n        public Node(K key, V value) {\n            this.key = key;\n            this.value = value;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public BSTMap() {\n        root = null;\n        size = 0;\n    }\n}\n```\n\n其余诸如添加元素、删除元素等操作，与二叉搜索树中的相应操作完全一致，只是每个节点中有两个值而已。\n\n### 基于链表的实现\n\n将链表中存储的值由一个变为两个，如下：\n\n```\nprivate class Node {\n    public K key;\n    public V value;\n    public Node next;\n\n    public Node(K key, V value, Node next) {\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n\n    public Node(K key, V value) {\n        this(key, value, null);\n    }\n\n    public Node() {\n        this(null, null, null);\n    }\n}\n```\n\n其余增删操作与链表中逻辑一致，只是增加元素的时候需要判断元素是否存在。\n\n### 复杂度分析\n\n基于链表实现的映射的增删改查都为O(n)级别\n\n基于BST实现的映射的增删改查为O(h)级别，这与集合中的复杂度分析是一致的。\n\n","source":"_posts/学习笔记/数据结构与算法/6、集合与映射.md","raw":"---\ntitle: 6、集合与映射\ndate: 2020-07-23 21:55:53\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-set-and-map\n---\n\n## 集合特点\n\n集合通常由一组无序的，**不能重复**的元素构成。\n\n封装的集合接口如下：\n\n```\npublic interface Set<E> {\n    void add(E e);\n    void remove(E e);\n    boolean contains(E e);\n    int getSize();\n    boolean isEmpty();\n}\n```\n\n\n\n## 集合实现\n\n基于BST实现的集合为有序集合，基于链表实现的集合为无序集合\n\n### 基于二叉树\n\n由之前构建二叉树可知，当元素数值在二叉树中存在时，我们并没有对其进行处理，因此利用二叉树（或者说二叉搜索树）构建集合具有天然的优势。Java代码实现如下：\n\n```\npublic class BSTSet<E extends Comparable<E>> implements Set<E> {\n\n    private BST<E> bst;\n\n    public BSTSet() {\n        bst = new BST<>();\n    }\n\n    @Override\n    public void add(E e) {\n        bst.add(e);\n    }\n\n    @Override\n    public void remove(E e) {\n        bst.remove(e);\n    }\n\n    @Override\n    public boolean contains(E e) {\n        return bst.contains(e);\n    }\n\n    @Override\n    public int getSize() {\n        return bst.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return bst.isEmpty();\n    }\n}\n```\n\n#### 基于链表等线性结构\n\n```\npublic class LinkedListSet<E> implements Set<E> {\n\n    private LinkedList<E> list;\n\n    public LinkedListSet() {\n        list = new LinkedList<>();\n    }\n\n    @Override\n    public void add(E e) {\n        if(!list.contains(e)) {\n            list.addFirst(e);   // 在头部添加复杂度为O(1)\n        }\n    }\n\n    @Override\n    public void remove(E e) {\n        list.removeElement(e);\n    }\n\n    @Override\n    public boolean contains(E e) {\n        return list.contains(e);\n    }\n\n    @Override\n    public int getSize() {\n        return list.getSize();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return list.isEmpty();\n    }\n}\n```\n\n#### 复杂度分析\n\n基于链表的增删改查复杂度都为O(n)级别\n\n而基于二叉搜索树的则为O(h)级别（h为二叉树的高度）。依据二叉树的性质，最好的情况（平衡）为O(log n) ，最差为O(n)。\n\n\n\n## 映射特点\n\n映射通俗来讲就是存储（键，值）数据对的数据结构，可以根据键（Key）来寻找值（Value）。\n\n如下是映射的接口及需要实现的方法\n\n```\npublic interface Map<K, V> {\n    void add(K key, V value);\n    V remove(K key);\n    boolean contains(K key);\n    V get(K key);\n    void set(K key, V newValue);\n    int getSize();\n    boolean isEmpty();\n}\n```\n\n### 基于二叉树\n\n实现基本框架\n\n```\npublic class BSTMap<K extends Comparable<K>, V> implements Map<K, V> {\n\n    private class Node {\n        public K key;\n        public V value;\n        public Node left, right;\n\n        public Node(K key, V value) {\n            this.key = key;\n            this.value = value;\n            left = null;\n            right = null;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public BSTMap() {\n        root = null;\n        size = 0;\n    }\n}\n```\n\n其余诸如添加元素、删除元素等操作，与二叉搜索树中的相应操作完全一致，只是每个节点中有两个值而已。\n\n### 基于链表的实现\n\n将链表中存储的值由一个变为两个，如下：\n\n```\nprivate class Node {\n    public K key;\n    public V value;\n    public Node next;\n\n    public Node(K key, V value, Node next) {\n        this.key = key;\n        this.value = value;\n        this.next = next;\n    }\n\n    public Node(K key, V value) {\n        this(key, value, null);\n    }\n\n    public Node() {\n        this(null, null, null);\n    }\n}\n```\n\n其余增删操作与链表中逻辑一致，只是增加元素的时候需要判断元素是否存在。\n\n### 复杂度分析\n\n基于链表实现的映射的增删改查都为O(n)级别\n\n基于BST实现的映射的增删改查为O(h)级别，这与集合中的复杂度分析是一致的。\n\n","slug":"学习笔记/数据结构与算法/6、集合与映射","published":1,"updated":"2021-01-11T04:51:59.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moao003irwjsgvy18kp3","content":"<h2 id=\"集合特点\"><a href=\"#集合特点\" class=\"headerlink\" title=\"集合特点\"></a>集合特点</h2><p>集合通常由一组无序的，<strong>不能重复</strong>的元素构成。</p>\n<p>封装的集合接口如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Set&lt;E&gt; &#123;<br>    void <span class=\"hljs-builtin-name\">add</span>(E e);<br>    void <span class=\"hljs-builtin-name\">remove</span>(E e);<br>    boolean contains(E e);<br>    int getSize();<br>    boolean isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"集合实现\"><a href=\"#集合实现\" class=\"headerlink\" title=\"集合实现\"></a>集合实现</h2><p>基于BST实现的集合为有序集合，基于链表实现的集合为无序集合</p>\n<h3 id=\"基于二叉树\"><a href=\"#基于二叉树\" class=\"headerlink\" title=\"基于二叉树\"></a>基于二叉树</h3><p>由之前构建二叉树可知，当元素数值在二叉树中存在时，我们并没有对其进行处理，因此利用二叉树（或者说二叉搜索树）构建集合具有天然的优势。Java代码实现如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BSTSet</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">E</span>&gt;&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Set</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> BST&lt;E&gt; bst;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BSTSet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        bst = <span class=\"hljs-keyword\">new</span> BST&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        bst.add(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        bst.remove(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(e)</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"基于链表等线性结构\"><a href=\"#基于链表等线性结构\" class=\"headerlink\" title=\"基于链表等线性结构\"></a>基于链表等线性结构</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListSet</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Set</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;E&gt; <span class=\"hljs-built_in\">list</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedListSet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">list</span>.contains(e)) &#123;<br>            <span class=\"hljs-built_in\">list</span>.addFirst(e);   <span class=\"hljs-comment\">// 在头部添加复杂度为O(1)</span><br>        &#125;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">list</span>.removeElement(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.contains(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>基于链表的增删改查复杂度都为O(n)级别</p>\n<p>而基于二叉搜索树的则为O(h)级别（h为二叉树的高度）。依据二叉树的性质，最好的情况（平衡）为O(log n) ，最差为O(n)。</p>\n<h2 id=\"映射特点\"><a href=\"#映射特点\" class=\"headerlink\" title=\"映射特点\"></a>映射特点</h2><p>映射通俗来讲就是存储（键，值）数据对的数据结构，可以根据键（Key）来寻找值（Value）。</p>\n<p>如下是映射的接口及需要实现的方法</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Map&lt;K, V&gt; &#123;<br>    void <span class=\"hljs-builtin-name\">add</span>(K key, V value);<br>    V <span class=\"hljs-builtin-name\">remove</span>(K key);<br>    boolean contains(K key);<br>    V <span class=\"hljs-builtin-name\">get</span>(K key);<br>    void <span class=\"hljs-builtin-name\">set</span>(K key, V newValue);<br>    int getSize();<br>    boolean isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"基于二叉树-1\"><a href=\"#基于二叉树-1\" class=\"headerlink\" title=\"基于二叉树\"></a>基于二叉树</h3><p>实现基本框架</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">BSTMap</span>&lt;<span class=\"hljs-symbol\">K</span> <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">K</span>&gt;, <span class=\"hljs-symbol\">V</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Map</span>&lt;<span class=\"hljs-symbol\">K, <span class=\"hljs-symbol\">V</span></span>&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> K key;<br>        <span class=\"hljs-keyword\">public</span> V value;<br>        <span class=\"hljs-keyword\">public</span> Node left, right;<br><br>        <span class=\"hljs-keyword\">public</span> Node(K key, V value) &#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>            left = <span class=\"hljs-literal\">null</span>;<br>            right = <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node root;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> BSTMap() &#123;<br>        root = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余诸如添加元素、删除元素等操作，与二叉搜索树中的相应操作完全一致，只是每个节点中有两个值而已。</p>\n<h3 id=\"基于链表的实现\"><a href=\"#基于链表的实现\" class=\"headerlink\" title=\"基于链表的实现\"></a>基于链表的实现</h3><p>将链表中存储的值由一个变为两个，如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> K key;<br>    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-keyword\">value</span>;<br>    <span class=\"hljs-keyword\">public</span> Node next;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">K key, V <span class=\"hljs-keyword\">value</span>, Node next</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>.key = key;<br>        <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">value</span>;<br>        <span class=\"hljs-keyword\">this</span>.next = next;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">K key, V <span class=\"hljs-keyword\">value</span></span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>(key, <span class=\"hljs-keyword\">value</span>, <span class=\"hljs-literal\">null</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余增删操作与链表中逻辑一致，只是增加元素的时候需要判断元素是否存在。</p>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>基于链表实现的映射的增删改查都为O(n)级别</p>\n<p>基于BST实现的映射的增删改查为O(h)级别，这与集合中的复杂度分析是一致的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"集合特点\"><a href=\"#集合特点\" class=\"headerlink\" title=\"集合特点\"></a>集合特点</h2><p>集合通常由一组无序的，<strong>不能重复</strong>的元素构成。</p>\n<p>封装的集合接口如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Set&lt;E&gt; &#123;<br>    void <span class=\"hljs-builtin-name\">add</span>(E e);<br>    void <span class=\"hljs-builtin-name\">remove</span>(E e);<br>    boolean contains(E e);<br>    int getSize();<br>    boolean isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"集合实现\"><a href=\"#集合实现\" class=\"headerlink\" title=\"集合实现\"></a>集合实现</h2><p>基于BST实现的集合为有序集合，基于链表实现的集合为无序集合</p>\n<h3 id=\"基于二叉树\"><a href=\"#基于二叉树\" class=\"headerlink\" title=\"基于二叉树\"></a>基于二叉树</h3><p>由之前构建二叉树可知，当元素数值在二叉树中存在时，我们并没有对其进行处理，因此利用二叉树（或者说二叉搜索树）构建集合具有天然的优势。Java代码实现如下：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BSTSet</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">E</span>&gt;&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Set</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> BST&lt;E&gt; bst;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BSTSet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        bst = <span class=\"hljs-keyword\">new</span> BST&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        bst.add(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        bst.remove(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(e)</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> bst.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"基于链表等线性结构\"><a href=\"#基于链表等线性结构\" class=\"headerlink\" title=\"基于链表等线性结构\"></a>基于链表等线性结构</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedListSet</span>&lt;E&gt; <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">Set</span>&lt;E&gt; &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;E&gt; <span class=\"hljs-built_in\">list</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedListSet</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">add</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">list</span>.contains(e)) &#123;<br>            <span class=\"hljs-built_in\">list</span>.addFirst(e);   <span class=\"hljs-comment\">// 在头部添加复杂度为O(1)</span><br>        &#125;<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">remove</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-built_in\">list</span>.removeElement(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">contains</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.contains(e);<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.getSize();<br>    &#125;<br><br>    @<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">list</span>.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h4><p>基于链表的增删改查复杂度都为O(n)级别</p>\n<p>而基于二叉搜索树的则为O(h)级别（h为二叉树的高度）。依据二叉树的性质，最好的情况（平衡）为O(log n) ，最差为O(n)。</p>\n<h2 id=\"映射特点\"><a href=\"#映射特点\" class=\"headerlink\" title=\"映射特点\"></a>映射特点</h2><p>映射通俗来讲就是存储（键，值）数据对的数据结构，可以根据键（Key）来寻找值（Value）。</p>\n<p>如下是映射的接口及需要实现的方法</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Map&lt;K, V&gt; &#123;<br>    void <span class=\"hljs-builtin-name\">add</span>(K key, V value);<br>    V <span class=\"hljs-builtin-name\">remove</span>(K key);<br>    boolean contains(K key);<br>    V <span class=\"hljs-builtin-name\">get</span>(K key);<br>    void <span class=\"hljs-builtin-name\">set</span>(K key, V newValue);<br>    int getSize();<br>    boolean isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"基于二叉树-1\"><a href=\"#基于二叉树-1\" class=\"headerlink\" title=\"基于二叉树\"></a>基于二叉树</h3><p>实现基本框架</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">BSTMap</span>&lt;<span class=\"hljs-symbol\">K</span> <span class=\"hljs-symbol\">extends</span> <span class=\"hljs-symbol\">Comparable</span>&lt;<span class=\"hljs-symbol\">K</span>&gt;, <span class=\"hljs-symbol\">V</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Map</span>&lt;<span class=\"hljs-symbol\">K, <span class=\"hljs-symbol\">V</span></span>&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">Node</span> &#123;<br>        <span class=\"hljs-keyword\">public</span> K key;<br>        <span class=\"hljs-keyword\">public</span> V value;<br>        <span class=\"hljs-keyword\">public</span> Node left, right;<br><br>        <span class=\"hljs-keyword\">public</span> Node(K key, V value) &#123;<br>            <span class=\"hljs-keyword\">this</span>.key = key;<br>            <span class=\"hljs-keyword\">this</span>.value = value;<br>            left = <span class=\"hljs-literal\">null</span>;<br>            right = <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Node root;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> size;<br><br>    <span class=\"hljs-keyword\">public</span> BSTMap() &#123;<br>        root = <span class=\"hljs-literal\">null</span>;<br>        size = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余诸如添加元素、删除元素等操作，与二叉搜索树中的相应操作完全一致，只是每个节点中有两个值而已。</p>\n<h3 id=\"基于链表的实现\"><a href=\"#基于链表的实现\" class=\"headerlink\" title=\"基于链表的实现\"></a>基于链表的实现</h3><p>将链表中存储的值由一个变为两个，如下：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> K key;<br>    <span class=\"hljs-keyword\">public</span> V <span class=\"hljs-keyword\">value</span>;<br>    <span class=\"hljs-keyword\">public</span> Node next;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">K key, V <span class=\"hljs-keyword\">value</span>, Node next</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>.key = key;<br>        <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">value</span> = <span class=\"hljs-keyword\">value</span>;<br>        <span class=\"hljs-keyword\">this</span>.next = next;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\">K key, V <span class=\"hljs-keyword\">value</span></span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>(key, <span class=\"hljs-keyword\">value</span>, <span class=\"hljs-literal\">null</span>);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Node</span>(<span class=\"hljs-params\"></span>)</span> &#123;<br>        <span class=\"hljs-keyword\">this</span>(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余增删操作与链表中逻辑一致，只是增加元素的时候需要判断元素是否存在。</p>\n<h3 id=\"复杂度分析-1\"><a href=\"#复杂度分析-1\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><p>基于链表实现的映射的增删改查都为O(n)级别</p>\n<p>基于BST实现的映射的增删改查为O(h)级别，这与集合中的复杂度分析是一致的。</p>\n"},{"title":"堆与优先队列","date":"2020-07-30T01:02:25.000Z","fileName":"priority-queue-and-heap","_content":"\n## 堆的基本概念\n\n堆（二叉堆）就是用数组实现的二叉树（完全二叉树），所以它没有使用父指针或者子指针。堆根据“堆属性”来排序，“堆属性”决定了树中节点的位置。\n\n### 堆的用处\n\n- 构建优先队列\n- 支持堆排序（O(n log n)）\n- 快速找出一个集合中的最小值（或者最大值）\n\n### 堆属性\n\n堆可以分为最大堆与最小堆等等，差别只在于节点的排序方法。\n\n以最大堆为例，**堆中某个节点的值总是不大于其父亲节点的值** 。也就是说，最大堆总将最大的值放在树的根节点（也就是数组索引为0的位置）。根据堆的这一特性，堆能够作为优先队列的实现。\n\n> **注意：**堆的根节点中存放的是最大或者最小元素，但是其他节点的排序顺序是未知的。例如，在一个最大堆中，最大的那一个元素总是位于 index 0 的位置，但是最小的元素则未必是最后一个元素。--唯一能够保证的是最小的元素是一个叶节点，但是不确定是哪一个。\n\n### 堆与普通树的区别\n\n**节点的顺序。**在二叉搜索树中，左子节点必须比父节点小，右子节点必须必比父节点大。但是在堆中并非如此。在最大堆中两个子节点都必须比父节点小，而在最小堆中，它们都必须比父节点大。**且以最大堆举例，最下层的节点值未必一定小于上层节点的值**\n\n**内存占用。**普通树占用的内存空间比它们存储的数据要多。你必须为节点对象以及左/右子节点指针分配内存。堆仅仅使用一个数据来存储数组，且不使用指针。\n\n**平衡。**二叉搜索树必须是“平衡”的情况下，其大部分操作的复杂度才能达到**O(log n)**。你可以按任意顺序位置插入/删除数据，或者使用 AVL 树或者红黑树，但是在堆中实际上不需要整棵树都是有序的。我们只需要满足堆属性即可，所以在堆中平衡不是问题。因为堆中数据的组织方式可以保证**O(log n)** 的性能。\n\n**搜索。**在二叉树中搜索会很快，但是在堆中搜索会很慢。在堆中搜索不是第一优先级，因为使用堆的目的是将最大（或者最小）的节点放在最前面，从而快速的进行相关插入、删除操作。\n\n\n\n## 堆的实现\n\n### 实现基础\n\n堆的底层可以使用动态数组进行实现，由于完全二叉树的特性，按照层序遍历对二叉树进行存储时父节点与子节点之间有以下的规律：\n\n```\nparent = i/2\t// i为子节点在数组中的索引\n\nleftChild = 2 * i + 1\t// i为父节点\n\nrightChild = 2 * i+ 2\n```\n\n因此可基于之前实现的动态数组进行最大堆的基本实现：\n\n```\npublic class MaxHeap<E extends Comparable> {\n    private Array<E> data;\n    public MaxHeap(int capacity) {\n        data = new Array<>(capacity);\n    }\n\n    public MaxHeap() {\n        data = new Array<>();\n    }\n\n    public MaxHeap(E[] arr) {\n        data = new Array<>(arr);\n        for (int i=parent(arr.length - 1); i>=0; i--) {\n            siftDown(i);\n        }\n    }\n\n    public int size() {\n        return data.getSize();\n    }\n\n    public boolean isEmpty() {\n        return data.isEmpty();\n    }\n\n\t// 获得父节点索引\n    private int parent(int index) {\n        if(index == 0) {\n            throw new IllegalArgumentException(\"Index 0 has no parent\");\n        }\n        return (index - 1) / 2;\n    }\n\n\t// 获得左子节点索引\n    private int leftChild(int index) {\n        return index * 2 + 1;\n    }\n\n\t// 获得右子节点索引\n    private int rightChild(int index) {\n        return index * 2 + 2;\n    }\n\n}\n```\n\n### 添加元素\n\n向堆中添加元素首先将元素添加到数组最后，之后进行**堆的上浮**操作。\n\n即当该元素的父节点值 < 该元素值时：将这两个元素进行交换，知道到达根节点或不满足该条件。详见代码，复杂度为**O(log n)**。\n\n```\n// 添加元素\npublic void add(E e) {\n    data.addLast(e);\n    shiftUp(data.getSize() - 1);\n}\n\n// 堆的上浮\nprivate void shiftUp(int k) {\n    while (k > 0 && data.get(parent(k)).compareTo(data.get(k)) < 0 ) {\n        data.swap(k, parent(k));\n        k = parent(k);\n    }\n}\n```\n\n### 取出堆中最大元素\n\n将第一个元素取出后，将最后一个元素放入根节点的位置（即将索引为0 与 索引为 size-1的元素互换），再进行**堆的下沉**的操作。\n\n堆的下沉即为，如果当前节点小于其子节点中最大的那个，则将其替换。详见代码，复杂度为**O(log n)**\n\n```\n// 返回堆中最大元素\npublic E findMax() {\n    if(data.getSize() == 0) {\n        throw new IllegalArgumentException(\"heap is empty\");\n    }\n    return data.getFirst();\n}\n\n// 取出堆中最大元素\npublic E extractMax() {\n    E ret = findMax();\n    data.swap(0, data.getSize()-1);\n    data.removeLast();\n    siftDown(0);\n    return ret;\n}\n\n// 堆的下浮\nprivate void siftDown(int k) {\n    while (leftChild(k) < data.getSize()) {\n        int maxChild = leftChild(k);\n        if(maxChild +1 < data.getSize() && data.get(maxChild +1).compareTo(data.get(maxChild)) > 0) {\n            maxChild++;\n        }\n        if(data.get(k).compareTo(data.get(maxChild)) >= 0){\n            break;\n        }\n        data.swap(k, maxChild);\n        k = maxChild;\n    }\n}\n```\n\n### 将输入数组变为堆（heapify）\n\n将输入数组变为堆结构，首先找到最后一个非叶子节点（即最后一个叶子节点的父节点），之后向前遍历，并分别进行下沉操作，如代码所示（作为maxHeap类的构造函数）\n\n这样做的好处是时间复杂度只有O(n)，而将数组元素分别插入进堆的时间复杂度为O(n log n)\n\n```\npublic MaxHeap(E[] arr) {\n    data = new Array<>(arr);\n    for (int i=parent(arr.length - 1); i>=0; i--) {\n        siftDown(i);\n    }\n}\n```\n\n\n\n## 优先队列\n\n优先队列也就是优先级最大的元素在队首的队列了，显而易见，其可以使用堆轻松实现，下面是简单的最大值在前的优先队列。\n\n```\npublic class PriorityQueue<E extends Comparable<E>> implements Queue<E> {\n\n    private MaxHeap<E> maxHeap;\n\n    public PriorityQueue() {\n        maxHeap = new MaxHeap<>();\n    }\n\n    @Override\n    public int getSize() {\n        return maxHeap.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return maxHeap.isEmpty();\n    }\n\n    @Override\n    public void enqueue(E e) {\n        maxHeap.add(e);\n    }\n\n    @Override\n    public E dequeue() {\n        return maxHeap.extractMax();\n    }\n\n    @Override\n    public E getFront() {\n        return maxHeap.findMax();\n    }\n}\n```\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/6b526aa481b1","source":"_posts/学习笔记/数据结构与算法/7、堆与优先队列.md","raw":"---\ntitle: 堆与优先队列\ndate: 2020-07-30 09:02:25\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: priority-queue-and-heap\n---\n\n## 堆的基本概念\n\n堆（二叉堆）就是用数组实现的二叉树（完全二叉树），所以它没有使用父指针或者子指针。堆根据“堆属性”来排序，“堆属性”决定了树中节点的位置。\n\n### 堆的用处\n\n- 构建优先队列\n- 支持堆排序（O(n log n)）\n- 快速找出一个集合中的最小值（或者最大值）\n\n### 堆属性\n\n堆可以分为最大堆与最小堆等等，差别只在于节点的排序方法。\n\n以最大堆为例，**堆中某个节点的值总是不大于其父亲节点的值** 。也就是说，最大堆总将最大的值放在树的根节点（也就是数组索引为0的位置）。根据堆的这一特性，堆能够作为优先队列的实现。\n\n> **注意：**堆的根节点中存放的是最大或者最小元素，但是其他节点的排序顺序是未知的。例如，在一个最大堆中，最大的那一个元素总是位于 index 0 的位置，但是最小的元素则未必是最后一个元素。--唯一能够保证的是最小的元素是一个叶节点，但是不确定是哪一个。\n\n### 堆与普通树的区别\n\n**节点的顺序。**在二叉搜索树中，左子节点必须比父节点小，右子节点必须必比父节点大。但是在堆中并非如此。在最大堆中两个子节点都必须比父节点小，而在最小堆中，它们都必须比父节点大。**且以最大堆举例，最下层的节点值未必一定小于上层节点的值**\n\n**内存占用。**普通树占用的内存空间比它们存储的数据要多。你必须为节点对象以及左/右子节点指针分配内存。堆仅仅使用一个数据来存储数组，且不使用指针。\n\n**平衡。**二叉搜索树必须是“平衡”的情况下，其大部分操作的复杂度才能达到**O(log n)**。你可以按任意顺序位置插入/删除数据，或者使用 AVL 树或者红黑树，但是在堆中实际上不需要整棵树都是有序的。我们只需要满足堆属性即可，所以在堆中平衡不是问题。因为堆中数据的组织方式可以保证**O(log n)** 的性能。\n\n**搜索。**在二叉树中搜索会很快，但是在堆中搜索会很慢。在堆中搜索不是第一优先级，因为使用堆的目的是将最大（或者最小）的节点放在最前面，从而快速的进行相关插入、删除操作。\n\n\n\n## 堆的实现\n\n### 实现基础\n\n堆的底层可以使用动态数组进行实现，由于完全二叉树的特性，按照层序遍历对二叉树进行存储时父节点与子节点之间有以下的规律：\n\n```\nparent = i/2\t// i为子节点在数组中的索引\n\nleftChild = 2 * i + 1\t// i为父节点\n\nrightChild = 2 * i+ 2\n```\n\n因此可基于之前实现的动态数组进行最大堆的基本实现：\n\n```\npublic class MaxHeap<E extends Comparable> {\n    private Array<E> data;\n    public MaxHeap(int capacity) {\n        data = new Array<>(capacity);\n    }\n\n    public MaxHeap() {\n        data = new Array<>();\n    }\n\n    public MaxHeap(E[] arr) {\n        data = new Array<>(arr);\n        for (int i=parent(arr.length - 1); i>=0; i--) {\n            siftDown(i);\n        }\n    }\n\n    public int size() {\n        return data.getSize();\n    }\n\n    public boolean isEmpty() {\n        return data.isEmpty();\n    }\n\n\t// 获得父节点索引\n    private int parent(int index) {\n        if(index == 0) {\n            throw new IllegalArgumentException(\"Index 0 has no parent\");\n        }\n        return (index - 1) / 2;\n    }\n\n\t// 获得左子节点索引\n    private int leftChild(int index) {\n        return index * 2 + 1;\n    }\n\n\t// 获得右子节点索引\n    private int rightChild(int index) {\n        return index * 2 + 2;\n    }\n\n}\n```\n\n### 添加元素\n\n向堆中添加元素首先将元素添加到数组最后，之后进行**堆的上浮**操作。\n\n即当该元素的父节点值 < 该元素值时：将这两个元素进行交换，知道到达根节点或不满足该条件。详见代码，复杂度为**O(log n)**。\n\n```\n// 添加元素\npublic void add(E e) {\n    data.addLast(e);\n    shiftUp(data.getSize() - 1);\n}\n\n// 堆的上浮\nprivate void shiftUp(int k) {\n    while (k > 0 && data.get(parent(k)).compareTo(data.get(k)) < 0 ) {\n        data.swap(k, parent(k));\n        k = parent(k);\n    }\n}\n```\n\n### 取出堆中最大元素\n\n将第一个元素取出后，将最后一个元素放入根节点的位置（即将索引为0 与 索引为 size-1的元素互换），再进行**堆的下沉**的操作。\n\n堆的下沉即为，如果当前节点小于其子节点中最大的那个，则将其替换。详见代码，复杂度为**O(log n)**\n\n```\n// 返回堆中最大元素\npublic E findMax() {\n    if(data.getSize() == 0) {\n        throw new IllegalArgumentException(\"heap is empty\");\n    }\n    return data.getFirst();\n}\n\n// 取出堆中最大元素\npublic E extractMax() {\n    E ret = findMax();\n    data.swap(0, data.getSize()-1);\n    data.removeLast();\n    siftDown(0);\n    return ret;\n}\n\n// 堆的下浮\nprivate void siftDown(int k) {\n    while (leftChild(k) < data.getSize()) {\n        int maxChild = leftChild(k);\n        if(maxChild +1 < data.getSize() && data.get(maxChild +1).compareTo(data.get(maxChild)) > 0) {\n            maxChild++;\n        }\n        if(data.get(k).compareTo(data.get(maxChild)) >= 0){\n            break;\n        }\n        data.swap(k, maxChild);\n        k = maxChild;\n    }\n}\n```\n\n### 将输入数组变为堆（heapify）\n\n将输入数组变为堆结构，首先找到最后一个非叶子节点（即最后一个叶子节点的父节点），之后向前遍历，并分别进行下沉操作，如代码所示（作为maxHeap类的构造函数）\n\n这样做的好处是时间复杂度只有O(n)，而将数组元素分别插入进堆的时间复杂度为O(n log n)\n\n```\npublic MaxHeap(E[] arr) {\n    data = new Array<>(arr);\n    for (int i=parent(arr.length - 1); i>=0; i--) {\n        siftDown(i);\n    }\n}\n```\n\n\n\n## 优先队列\n\n优先队列也就是优先级最大的元素在队首的队列了，显而易见，其可以使用堆轻松实现，下面是简单的最大值在前的优先队列。\n\n```\npublic class PriorityQueue<E extends Comparable<E>> implements Queue<E> {\n\n    private MaxHeap<E> maxHeap;\n\n    public PriorityQueue() {\n        maxHeap = new MaxHeap<>();\n    }\n\n    @Override\n    public int getSize() {\n        return maxHeap.size();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return maxHeap.isEmpty();\n    }\n\n    @Override\n    public void enqueue(E e) {\n        maxHeap.add(e);\n    }\n\n    @Override\n    public E dequeue() {\n        return maxHeap.extractMax();\n    }\n\n    @Override\n    public E getFront() {\n        return maxHeap.findMax();\n    }\n}\n```\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/6b526aa481b1","slug":"学习笔记/数据结构与算法/7、堆与优先队列","published":1,"updated":"2021-01-11T04:52:06.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moap003mrwjs4g8zabg3","content":"<h2 id=\"堆的基本概念\"><a href=\"#堆的基本概念\" class=\"headerlink\" title=\"堆的基本概念\"></a>堆的基本概念</h2><p>堆（二叉堆）就是用数组实现的二叉树（完全二叉树），所以它没有使用父指针或者子指针。堆根据“堆属性”来排序，“堆属性”决定了树中节点的位置。</p>\n<h3 id=\"堆的用处\"><a href=\"#堆的用处\" class=\"headerlink\" title=\"堆的用处\"></a>堆的用处</h3><ul>\n<li>构建优先队列</li>\n<li>支持堆排序（O(n log n)）</li>\n<li>快速找出一个集合中的最小值（或者最大值）</li>\n</ul>\n<h3 id=\"堆属性\"><a href=\"#堆属性\" class=\"headerlink\" title=\"堆属性\"></a>堆属性</h3><p>堆可以分为最大堆与最小堆等等，差别只在于节点的排序方法。</p>\n<p>以最大堆为例，<strong>堆中某个节点的值总是不大于其父亲节点的值</strong> 。也就是说，最大堆总将最大的值放在树的根节点（也就是数组索引为0的位置）。根据堆的这一特性，堆能够作为优先队列的实现。</p>\n<blockquote>\n<p><strong>注意：</strong>堆的根节点中存放的是最大或者最小元素，但是其他节点的排序顺序是未知的。例如，在一个最大堆中，最大的那一个元素总是位于 index 0 的位置，但是最小的元素则未必是最后一个元素。–唯一能够保证的是最小的元素是一个叶节点，但是不确定是哪一个。</p>\n</blockquote>\n<h3 id=\"堆与普通树的区别\"><a href=\"#堆与普通树的区别\" class=\"headerlink\" title=\"堆与普通树的区别\"></a>堆与普通树的区别</h3><p><strong>节点的顺序。</strong>在二叉搜索树中，左子节点必须比父节点小，右子节点必须必比父节点大。但是在堆中并非如此。在最大堆中两个子节点都必须比父节点小，而在最小堆中，它们都必须比父节点大。<strong>且以最大堆举例，最下层的节点值未必一定小于上层节点的值</strong></p>\n<p><strong>内存占用。</strong>普通树占用的内存空间比它们存储的数据要多。你必须为节点对象以及左/右子节点指针分配内存。堆仅仅使用一个数据来存储数组，且不使用指针。</p>\n<p><strong>平衡。</strong>二叉搜索树必须是“平衡”的情况下，其大部分操作的复杂度才能达到<strong>O(log n)</strong>。你可以按任意顺序位置插入/删除数据，或者使用 AVL 树或者红黑树，但是在堆中实际上不需要整棵树都是有序的。我们只需要满足堆属性即可，所以在堆中平衡不是问题。因为堆中数据的组织方式可以保证<strong>O(log n)</strong> 的性能。</p>\n<p><strong>搜索。</strong>在二叉树中搜索会很快，但是在堆中搜索会很慢。在堆中搜索不是第一优先级，因为使用堆的目的是将最大（或者最小）的节点放在最前面，从而快速的进行相关插入、删除操作。</p>\n<h2 id=\"堆的实现\"><a href=\"#堆的实现\" class=\"headerlink\" title=\"堆的实现\"></a>堆的实现</h2><h3 id=\"实现基础\"><a href=\"#实现基础\" class=\"headerlink\" title=\"实现基础\"></a>实现基础</h3><p>堆的底层可以使用动态数组进行实现，由于完全二叉树的特性，按照层序遍历对二叉树进行存储时父节点与子节点之间有以下的规律：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">parent = i/<span class=\"hljs-number\">2</span>\t<span class=\"hljs-comment\">// i为子节点在数组中的索引</span><br><br>leftChild = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\t<span class=\"hljs-comment\">// i为父节点</span><br><br>rightChild = <span class=\"hljs-number\">2</span> * i+ <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>因此可基于之前实现的动态数组进行最大堆的基本实现：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MaxHeap</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&gt; </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Array&lt;E&gt; data;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(capacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">(E[] arr)</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(arr);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=parent(arr.length - <span class=\"hljs-number\">1</span>); i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>            siftDown(i);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> data.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> data.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得父节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">parent</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(index == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Index 0 has no parent\"</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得左子节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">leftChild</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得右子节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rightChild</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><p>向堆中添加元素首先将元素添加到数组最后，之后进行<strong>堆的上浮</strong>操作。</p>\n<p>即当该元素的父节点值 &lt; 该元素值时：将这两个元素进行交换，知道到达根节点或不满足该条件。详见代码，复杂度为<strong>O(log n)</strong>。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 添加元素</span><br>public void add(E e) &#123;<br>    data.add<span class=\"hljs-constructor\">Last(<span class=\"hljs-params\">e</span>)</span>;<br>    shift<span class=\"hljs-constructor\">Up(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">getSize</span>()</span> - <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 堆的上浮</span><br><span class=\"hljs-keyword\">private</span> void shift<span class=\"hljs-constructor\">Up(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">k</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> &amp;&amp; </span>data.get(parent(k)).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">k</span>)</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>        data.swap(k, parent(k));<br>        k = parent(k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"取出堆中最大元素\"><a href=\"#取出堆中最大元素\" class=\"headerlink\" title=\"取出堆中最大元素\"></a>取出堆中最大元素</h3><p>将第一个元素取出后，将最后一个元素放入根节点的位置（即将索引为0 与 索引为 size-1的元素互换），再进行<strong>堆的下沉</strong>的操作。</p>\n<p>堆的下沉即为，如果当前节点小于其子节点中最大的那个，则将其替换。详见代码，复杂度为<strong>O(log n)</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 返回堆中最大元素</span><br>public E find<span class=\"hljs-constructor\">Max()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(data.get<span class=\"hljs-constructor\">Size()</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>) &#123;<br>        throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"heap is empty\"</span>)</span>;<br>    &#125;<br>    return data.get<span class=\"hljs-constructor\">First()</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 取出堆中最大元素</span><br>public E extract<span class=\"hljs-constructor\">Max()</span> &#123;<br>    E ret = find<span class=\"hljs-constructor\">Max()</span>;<br>    data.swap(<span class=\"hljs-number\">0</span>, data.get<span class=\"hljs-constructor\">Size()</span>-<span class=\"hljs-number\">1</span>);<br>    data.remove<span class=\"hljs-constructor\">Last()</span>;<br>    sift<span class=\"hljs-constructor\">Down(0)</span>;<br>    return ret;<br>&#125;<br><br><span class=\"hljs-comment\">// 堆的下浮</span><br><span class=\"hljs-keyword\">private</span> void sift<span class=\"hljs-constructor\">Down(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">k</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">while</span> (left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">k</span>)</span> &lt; data.get<span class=\"hljs-constructor\">Size()</span>) &#123;<br>        <span class=\"hljs-built_in\">int</span> maxChild = left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">k</span>)</span>;<br>        <span class=\"hljs-keyword\">if</span>(maxChild +<span class=\"hljs-number\">1</span> &lt; data.get<span class=\"hljs-constructor\">Size()</span><span class=\"hljs-operator\"> &amp;&amp; </span>data.get(maxChild +<span class=\"hljs-number\">1</span>).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">maxChild</span>)</span>) &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            maxChild++;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(data.get(k).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">maxChild</span>)</span>) &gt;= <span class=\"hljs-number\">0</span>)&#123;<br>            break;<br>        &#125;<br>        data.swap(k, maxChild);<br>        k = maxChild;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将输入数组变为堆（heapify）\"><a href=\"#将输入数组变为堆（heapify）\" class=\"headerlink\" title=\"将输入数组变为堆（heapify）\"></a>将输入数组变为堆（heapify）</h3><p>将输入数组变为堆结构，首先找到最后一个非叶子节点（即最后一个叶子节点的父节点），之后向前遍历，并分别进行下沉操作，如代码所示（作为maxHeap类的构造函数）</p>\n<p>这样做的好处是时间复杂度只有O(n)，而将数组元素分别插入进堆的时间复杂度为O(n log n)</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-constructor\">MaxHeap(E[] <span class=\"hljs-params\">arr</span>)</span> &#123;<br>    data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(arr);<br>    for (<span class=\"hljs-built_in\">int</span> i=parent(arr.length - <span class=\"hljs-number\">1</span>); i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>        sift<span class=\"hljs-constructor\">Down(<span class=\"hljs-params\">i</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>优先队列也就是优先级最大的元素在队首的队列了，显而易见，其可以使用堆轻松实现，下面是简单的最大值在前的优先队列。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PriorityQueue</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">E</span>&gt;&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> MaxHeap&lt;E&gt; maxHeap;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PriorityQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        maxHeap = <span class=\"hljs-keyword\">new</span> MaxHeap&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        maxHeap.add(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">extractMax</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">findMax</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/6b526aa481b1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6b526aa481b1</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆的基本概念\"><a href=\"#堆的基本概念\" class=\"headerlink\" title=\"堆的基本概念\"></a>堆的基本概念</h2><p>堆（二叉堆）就是用数组实现的二叉树（完全二叉树），所以它没有使用父指针或者子指针。堆根据“堆属性”来排序，“堆属性”决定了树中节点的位置。</p>\n<h3 id=\"堆的用处\"><a href=\"#堆的用处\" class=\"headerlink\" title=\"堆的用处\"></a>堆的用处</h3><ul>\n<li>构建优先队列</li>\n<li>支持堆排序（O(n log n)）</li>\n<li>快速找出一个集合中的最小值（或者最大值）</li>\n</ul>\n<h3 id=\"堆属性\"><a href=\"#堆属性\" class=\"headerlink\" title=\"堆属性\"></a>堆属性</h3><p>堆可以分为最大堆与最小堆等等，差别只在于节点的排序方法。</p>\n<p>以最大堆为例，<strong>堆中某个节点的值总是不大于其父亲节点的值</strong> 。也就是说，最大堆总将最大的值放在树的根节点（也就是数组索引为0的位置）。根据堆的这一特性，堆能够作为优先队列的实现。</p>\n<blockquote>\n<p><strong>注意：</strong>堆的根节点中存放的是最大或者最小元素，但是其他节点的排序顺序是未知的。例如，在一个最大堆中，最大的那一个元素总是位于 index 0 的位置，但是最小的元素则未必是最后一个元素。–唯一能够保证的是最小的元素是一个叶节点，但是不确定是哪一个。</p>\n</blockquote>\n<h3 id=\"堆与普通树的区别\"><a href=\"#堆与普通树的区别\" class=\"headerlink\" title=\"堆与普通树的区别\"></a>堆与普通树的区别</h3><p><strong>节点的顺序。</strong>在二叉搜索树中，左子节点必须比父节点小，右子节点必须必比父节点大。但是在堆中并非如此。在最大堆中两个子节点都必须比父节点小，而在最小堆中，它们都必须比父节点大。<strong>且以最大堆举例，最下层的节点值未必一定小于上层节点的值</strong></p>\n<p><strong>内存占用。</strong>普通树占用的内存空间比它们存储的数据要多。你必须为节点对象以及左/右子节点指针分配内存。堆仅仅使用一个数据来存储数组，且不使用指针。</p>\n<p><strong>平衡。</strong>二叉搜索树必须是“平衡”的情况下，其大部分操作的复杂度才能达到<strong>O(log n)</strong>。你可以按任意顺序位置插入/删除数据，或者使用 AVL 树或者红黑树，但是在堆中实际上不需要整棵树都是有序的。我们只需要满足堆属性即可，所以在堆中平衡不是问题。因为堆中数据的组织方式可以保证<strong>O(log n)</strong> 的性能。</p>\n<p><strong>搜索。</strong>在二叉树中搜索会很快，但是在堆中搜索会很慢。在堆中搜索不是第一优先级，因为使用堆的目的是将最大（或者最小）的节点放在最前面，从而快速的进行相关插入、删除操作。</p>\n<h2 id=\"堆的实现\"><a href=\"#堆的实现\" class=\"headerlink\" title=\"堆的实现\"></a>堆的实现</h2><h3 id=\"实现基础\"><a href=\"#实现基础\" class=\"headerlink\" title=\"实现基础\"></a>实现基础</h3><p>堆的底层可以使用动态数组进行实现，由于完全二叉树的特性，按照层序遍历对二叉树进行存储时父节点与子节点之间有以下的规律：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">parent = i/<span class=\"hljs-number\">2</span>\t<span class=\"hljs-comment\">// i为子节点在数组中的索引</span><br><br>leftChild = <span class=\"hljs-number\">2</span> * i + <span class=\"hljs-number\">1</span>\t<span class=\"hljs-comment\">// i为父节点</span><br><br>rightChild = <span class=\"hljs-number\">2</span> * i+ <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>因此可基于之前实现的动态数组进行最大堆的基本实现：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MaxHeap</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&gt; </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Array&lt;E&gt; data;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> capacity)</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(capacity);<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">MaxHeap</span><span class=\"hljs-params\">(E[] arr)</span> </span>&#123;<br>        data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(arr);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=parent(arr.length - <span class=\"hljs-number\">1</span>); i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>            siftDown(i);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> data.<span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> data.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得父节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">parent</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(index == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"Index 0 has no parent\"</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (index - <span class=\"hljs-number\">1</span>) / <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得左子节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">leftChild</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获得右子节点索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">rightChild</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> index)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> index * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h3><p>向堆中添加元素首先将元素添加到数组最后，之后进行<strong>堆的上浮</strong>操作。</p>\n<p>即当该元素的父节点值 &lt; 该元素值时：将这两个元素进行交换，知道到达根节点或不满足该条件。详见代码，复杂度为<strong>O(log n)</strong>。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 添加元素</span><br>public void add(E e) &#123;<br>    data.add<span class=\"hljs-constructor\">Last(<span class=\"hljs-params\">e</span>)</span>;<br>    shift<span class=\"hljs-constructor\">Up(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">getSize</span>()</span> - <span class=\"hljs-number\">1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">// 堆的上浮</span><br><span class=\"hljs-keyword\">private</span> void shift<span class=\"hljs-constructor\">Up(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">k</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">while</span> (k &gt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> &amp;&amp; </span>data.get(parent(k)).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">k</span>)</span>) &lt; <span class=\"hljs-number\">0</span> ) &#123;<br>        data.swap(k, parent(k));<br>        k = parent(k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"取出堆中最大元素\"><a href=\"#取出堆中最大元素\" class=\"headerlink\" title=\"取出堆中最大元素\"></a>取出堆中最大元素</h3><p>将第一个元素取出后，将最后一个元素放入根节点的位置（即将索引为0 与 索引为 size-1的元素互换），再进行<strong>堆的下沉</strong>的操作。</p>\n<p>堆的下沉即为，如果当前节点小于其子节点中最大的那个，则将其替换。详见代码，复杂度为<strong>O(log n)</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 返回堆中最大元素</span><br>public E find<span class=\"hljs-constructor\">Max()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(data.get<span class=\"hljs-constructor\">Size()</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>) &#123;<br>        throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"heap is empty\"</span>)</span>;<br>    &#125;<br>    return data.get<span class=\"hljs-constructor\">First()</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 取出堆中最大元素</span><br>public E extract<span class=\"hljs-constructor\">Max()</span> &#123;<br>    E ret = find<span class=\"hljs-constructor\">Max()</span>;<br>    data.swap(<span class=\"hljs-number\">0</span>, data.get<span class=\"hljs-constructor\">Size()</span>-<span class=\"hljs-number\">1</span>);<br>    data.remove<span class=\"hljs-constructor\">Last()</span>;<br>    sift<span class=\"hljs-constructor\">Down(0)</span>;<br>    return ret;<br>&#125;<br><br><span class=\"hljs-comment\">// 堆的下浮</span><br><span class=\"hljs-keyword\">private</span> void sift<span class=\"hljs-constructor\">Down(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">k</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">while</span> (left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">k</span>)</span> &lt; data.get<span class=\"hljs-constructor\">Size()</span>) &#123;<br>        <span class=\"hljs-built_in\">int</span> maxChild = left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">k</span>)</span>;<br>        <span class=\"hljs-keyword\">if</span>(maxChild +<span class=\"hljs-number\">1</span> &lt; data.get<span class=\"hljs-constructor\">Size()</span><span class=\"hljs-operator\"> &amp;&amp; </span>data.get(maxChild +<span class=\"hljs-number\">1</span>).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">maxChild</span>)</span>) &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            maxChild++;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(data.get(k).compare<span class=\"hljs-constructor\">To(<span class=\"hljs-params\">data</span>.<span class=\"hljs-params\">get</span>(<span class=\"hljs-params\">maxChild</span>)</span>) &gt;= <span class=\"hljs-number\">0</span>)&#123;<br>            break;<br>        &#125;<br>        data.swap(k, maxChild);<br>        k = maxChild;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"将输入数组变为堆（heapify）\"><a href=\"#将输入数组变为堆（heapify）\" class=\"headerlink\" title=\"将输入数组变为堆（heapify）\"></a>将输入数组变为堆（heapify）</h3><p>将输入数组变为堆结构，首先找到最后一个非叶子节点（即最后一个叶子节点的父节点），之后向前遍历，并分别进行下沉操作，如代码所示（作为maxHeap类的构造函数）</p>\n<p>这样做的好处是时间复杂度只有O(n)，而将数组元素分别插入进堆的时间复杂度为O(n log n)</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-constructor\">MaxHeap(E[] <span class=\"hljs-params\">arr</span>)</span> &#123;<br>    data = <span class=\"hljs-keyword\">new</span> Array&lt;&gt;(arr);<br>    for (<span class=\"hljs-built_in\">int</span> i=parent(arr.length - <span class=\"hljs-number\">1</span>); i&gt;=<span class=\"hljs-number\">0</span>; i--) &#123;<br>        sift<span class=\"hljs-constructor\">Down(<span class=\"hljs-params\">i</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"优先队列\"><a href=\"#优先队列\" class=\"headerlink\" title=\"优先队列\"></a>优先队列</h2><p>优先队列也就是优先级最大的元素在队首的队列了，显而易见，其可以使用堆轻松实现，下面是简单的最大值在前的优先队列。</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PriorityQueue</span>&lt;<span class=\"hljs-title\">E</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">E</span>&gt;&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Queue</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> MaxHeap&lt;E&gt; maxHeap;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">PriorityQueue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        maxHeap = <span class=\"hljs-keyword\">new</span> MaxHeap&lt;&gt;();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">size</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">isEmpty</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enqueue</span><span class=\"hljs-params\">(E e)</span> </span>&#123;<br>        maxHeap.add(e);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">dequeue</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">extractMax</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\">E <span class=\"hljs-title\">getFront</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">return</span> maxHeap.<span class=\"hljs-title\">findMax</span><span class=\"hljs-params\">()</span></span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/6b526aa481b1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6b526aa481b1</a></p>\n"},{"title":"图的遍历及应用","date":"2020-08-23T04:37:02.000Z","fileName":"graph-traverse-and-user","_content":"\n图的遍历思想是解决很多算法问题的关键，其中深度优先遍历可以使用栈（递归）进行实现，广度优先搜索可以使用队列进行实现。\n\n图的遍历的实现其实和树基本一致，深度优先对应前序遍历，广度优先对应层序遍历\n\n## 遍历实现\n\n### 深度优先遍历（DFS）\n\n```\nimport java.util.ArrayList;\n\npublic class GraphDFS {\n\n    private Graph G;\t// 使用邻接表实现的图结构，参考图的概念与存储结构中的实现\n    private boolean[] visited;\t// 记录是否访问过\n    private ArrayList<Integer> order = new ArrayList<>();\t// 存储遍历结果\n\n    public GraphDFS(Graph G) {\n        this.G = G;\n        visited = new boolean[G.getVertex()];\n        // 超过一个连通分量时，进行完全遍历\n        for (int v=0; v<G.getVertex(); v++) {\n            if(!visited[v]) {\n                dfs(v);\n            }\n        }\n    }\n\n    private void dfs(int v) {\n        visited[v] = true;\n        order.add(v);\n        for (int w : G.adj(v)) {\n            if (!visited[w]) {\n                dfs(w);\n            }\n        }\n    }\n\n    public Iterable<Integer> order() {\n        return order;\n    }\n}\n```\n\n\n\n### 广度优先遍历（BFS）\n\n广度优先遍历在图中有一条很重要的性质，即广度优先搜索能够直接得到**无权图的最短路径**\n\n```\npublic class GraphBFS {\n\n    private Graph G;\n    private boolean[] visited;\n    private ArrayList<Integer> order = new ArrayList<>();\n\n    public GraphBFS(Graph G) {\n        this.G = G;\n        visited = new boolean[G.getVertex()];\n\n        for (int v = 0; v<G.getVertex(); v++) {\n            if(!visited[v])\n                bfs(v);\n        }\n    }\n\n    private void bfs(int s) {\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(s);\n        visited[s] = true;\n        while (!queue.isEmpty()) {\n            int v = queue.remove();\n            order.add(v);\n            for (int w : G.adj(v)) {\n                if (!visited[w]) {\n                    queue.add(w);\n                    visited[w] = true;\n                }\n            }\n        }\n    }\n\n    public Iterable<Integer> order() {\n        return order;\n    }\n}\n```\n\n\n\n\n\n## 利用遍历可以实现的简单操作\n\n利用遍历可以解决图结构中包括连通性等诸多问题，这些问题使用bfs和dfs都能够得到解决，以dfs为例。\n\n### 求图的连通分量\n\n在遍历代码的基础上使用一个整型记录主函数调用dfs的次数即可（该类问题与常见的海岛个数问题\\<floodfill算法\\>思路完全一致）。思路如下\n\n```\nint count = 0\nfor (int v=0; v<G.getVertex(); v++) {\n    if(!visited[v]) {\n        dfs(v);\n        count++;\n    }\n}\n```\n\n\n\n### 记录图中每个节点所属的连通分量\n\n将记录是否访问过节点的boolean型数组visited改为整型数组，在不同连通分量递归时使用不同的值进行记录即可。大致思路如下半伪码。\n\n```\nint[] visited;\n// 遍历将visited的值全部设置为-1，表示没有进行访问\nint record = 0;\nfor (int v=0; v<G.getVertex(); v++) {\n    if(!visited[v]) {\n        dfs(v, record);\t// 将record值用于标记已访问该节点\n        record++;\n    }\n}\n// 此时visited中就已经记录了每个节点所属连通分量的信息\n```\n\n\n\n### 求两点间是否可达\n\n若两点在同一个连通分量，则代表可达，在上一个问题的基础上进行一下判断就行了。\n\n\n\n### 求两点间的任意一条路径\n\n使用一个数组存储当前节点前面一个节点，之后根据数组信息即可得到两点间的一条路径，伪码如下：\n\n```\nint[] pre;\nint target;\ndfs(v, v);\t// 求从v到target的任一路径\n\n// v的上一个节点是parent\nvoid dfs(v, parent) {\n\tif(v == target) return;\n\tvisited[v] = true;\n\tpre[v] = parent;\n\tfor(w : G.adj(v))\n\t\tif(!visited[w])\n\t\tdfs(w, v)\n}\n```\n\n\n\n### 检查是否有环\n\n利用深度优先遍历，若访问到了一个已访问过的点，则有环，若遍历结束都没访问到，则无环。\n\n\n\n### 二分图检测\n\n二分图就是**顶点V可以分成不相交的两部分，且所有边的两个端点隶属于不同的部分**的一种特殊图结构\n\n二分图的检测也可以使用深度优先遍历进行检测，每遍历到一个点则对其进行染色操作，若相应点已染色，则检查其与其相邻顶点颜色是否匹配，若不匹配则直接返回false\n\n\n\n\n\n\n\n","source":"_posts/学习笔记/数据结构与算法/9.1、图的遍历及应用.md","raw":"---\ntitle: 图的遍历及应用\ndate: 2020-08-23 12:37:02\ntags:\n\t- 算法\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: graph-traverse-and-user\n---\n\n图的遍历思想是解决很多算法问题的关键，其中深度优先遍历可以使用栈（递归）进行实现，广度优先搜索可以使用队列进行实现。\n\n图的遍历的实现其实和树基本一致，深度优先对应前序遍历，广度优先对应层序遍历\n\n## 遍历实现\n\n### 深度优先遍历（DFS）\n\n```\nimport java.util.ArrayList;\n\npublic class GraphDFS {\n\n    private Graph G;\t// 使用邻接表实现的图结构，参考图的概念与存储结构中的实现\n    private boolean[] visited;\t// 记录是否访问过\n    private ArrayList<Integer> order = new ArrayList<>();\t// 存储遍历结果\n\n    public GraphDFS(Graph G) {\n        this.G = G;\n        visited = new boolean[G.getVertex()];\n        // 超过一个连通分量时，进行完全遍历\n        for (int v=0; v<G.getVertex(); v++) {\n            if(!visited[v]) {\n                dfs(v);\n            }\n        }\n    }\n\n    private void dfs(int v) {\n        visited[v] = true;\n        order.add(v);\n        for (int w : G.adj(v)) {\n            if (!visited[w]) {\n                dfs(w);\n            }\n        }\n    }\n\n    public Iterable<Integer> order() {\n        return order;\n    }\n}\n```\n\n\n\n### 广度优先遍历（BFS）\n\n广度优先遍历在图中有一条很重要的性质，即广度优先搜索能够直接得到**无权图的最短路径**\n\n```\npublic class GraphBFS {\n\n    private Graph G;\n    private boolean[] visited;\n    private ArrayList<Integer> order = new ArrayList<>();\n\n    public GraphBFS(Graph G) {\n        this.G = G;\n        visited = new boolean[G.getVertex()];\n\n        for (int v = 0; v<G.getVertex(); v++) {\n            if(!visited[v])\n                bfs(v);\n        }\n    }\n\n    private void bfs(int s) {\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(s);\n        visited[s] = true;\n        while (!queue.isEmpty()) {\n            int v = queue.remove();\n            order.add(v);\n            for (int w : G.adj(v)) {\n                if (!visited[w]) {\n                    queue.add(w);\n                    visited[w] = true;\n                }\n            }\n        }\n    }\n\n    public Iterable<Integer> order() {\n        return order;\n    }\n}\n```\n\n\n\n\n\n## 利用遍历可以实现的简单操作\n\n利用遍历可以解决图结构中包括连通性等诸多问题，这些问题使用bfs和dfs都能够得到解决，以dfs为例。\n\n### 求图的连通分量\n\n在遍历代码的基础上使用一个整型记录主函数调用dfs的次数即可（该类问题与常见的海岛个数问题\\<floodfill算法\\>思路完全一致）。思路如下\n\n```\nint count = 0\nfor (int v=0; v<G.getVertex(); v++) {\n    if(!visited[v]) {\n        dfs(v);\n        count++;\n    }\n}\n```\n\n\n\n### 记录图中每个节点所属的连通分量\n\n将记录是否访问过节点的boolean型数组visited改为整型数组，在不同连通分量递归时使用不同的值进行记录即可。大致思路如下半伪码。\n\n```\nint[] visited;\n// 遍历将visited的值全部设置为-1，表示没有进行访问\nint record = 0;\nfor (int v=0; v<G.getVertex(); v++) {\n    if(!visited[v]) {\n        dfs(v, record);\t// 将record值用于标记已访问该节点\n        record++;\n    }\n}\n// 此时visited中就已经记录了每个节点所属连通分量的信息\n```\n\n\n\n### 求两点间是否可达\n\n若两点在同一个连通分量，则代表可达，在上一个问题的基础上进行一下判断就行了。\n\n\n\n### 求两点间的任意一条路径\n\n使用一个数组存储当前节点前面一个节点，之后根据数组信息即可得到两点间的一条路径，伪码如下：\n\n```\nint[] pre;\nint target;\ndfs(v, v);\t// 求从v到target的任一路径\n\n// v的上一个节点是parent\nvoid dfs(v, parent) {\n\tif(v == target) return;\n\tvisited[v] = true;\n\tpre[v] = parent;\n\tfor(w : G.adj(v))\n\t\tif(!visited[w])\n\t\tdfs(w, v)\n}\n```\n\n\n\n### 检查是否有环\n\n利用深度优先遍历，若访问到了一个已访问过的点，则有环，若遍历结束都没访问到，则无环。\n\n\n\n### 二分图检测\n\n二分图就是**顶点V可以分成不相交的两部分，且所有边的两个端点隶属于不同的部分**的一种特殊图结构\n\n二分图的检测也可以使用深度优先遍历进行检测，每遍历到一个点则对其进行染色操作，若相应点已染色，则检查其与其相邻顶点颜色是否匹配，若不匹配则直接返回false\n\n\n\n\n\n\n\n","slug":"学习笔记/数据结构与算法/9.1、图的遍历及应用","published":1,"updated":"2021-01-11T04:52:32.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moar003qrwjsbflwbzff","content":"<p>图的遍历思想是解决很多算法问题的关键，其中深度优先遍历可以使用栈（递归）进行实现，广度优先搜索可以使用队列进行实现。</p>\n<p>图的遍历的实现其实和树基本一致，深度优先对应前序遍历，广度优先对应层序遍历</p>\n<h2 id=\"遍历实现\"><a href=\"#遍历实现\" class=\"headerlink\" title=\"遍历实现\"></a>遍历实现</h2><h3 id=\"深度优先遍历（DFS）\"><a href=\"#深度优先遍历（DFS）\" class=\"headerlink\" title=\"深度优先遍历（DFS）\"></a>深度优先遍历（DFS）</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GraphDFS</span> &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Graph G;\t<span class=\"hljs-comment\">// 使用邻接表实现的图结构，参考图的概念与存储结构中的实现</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[] visited;\t<span class=\"hljs-comment\">// 记录是否访问过</span><br>    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; order = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\t<span class=\"hljs-comment\">// 存储遍历结果</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GraphDFS</span><span class=\"hljs-params\">(Graph G)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.G = G;<br>        visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[G.getVertex()];<br>        <span class=\"hljs-comment\">// 超过一个连通分量时，进行完全遍历</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;G.getVertex(); v++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(!visited[v]) &#123;<br>                dfs(v);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>        visited[v] = <span class=\"hljs-literal\">true</span>;<br>        order.add(v);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> w : G.adj(v)) &#123;<br>            <span class=\"hljs-keyword\">if</span> (!visited[w]) &#123;<br>                dfs(w);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"广度优先遍历（BFS）\"><a href=\"#广度优先遍历（BFS）\" class=\"headerlink\" title=\"广度优先遍历（BFS）\"></a>广度优先遍历（BFS）</h3><p>广度优先遍历在图中有一条很重要的性质，即广度优先搜索能够直接得到<strong>无权图的最短路径</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GraphBFS</span> &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Graph G;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[] visited;<br>    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; order = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GraphBFS</span><span class=\"hljs-params\">(Graph G)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.G = G;<br>        visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[G.getVertex()];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-number\">0</span>; v&lt;G.getVertex(); v++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(!visited[v])<br>                bfs(v);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s)</span> </span>&#123;<br>        Queue&lt;Integer&gt; <span class=\"hljs-built_in\">queue</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>        <span class=\"hljs-built_in\">queue</span>.add(s);<br>        visited[s] = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-built_in\">queue</span>.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-built_in\">queue</span>.<span class=\"hljs-built_in\">remove</span>();<br>            order.add(v);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> w : G.adj(v)) &#123;<br>                <span class=\"hljs-keyword\">if</span> (!visited[w]) &#123;<br>                    <span class=\"hljs-built_in\">queue</span>.add(w);<br>                    visited[w] = <span class=\"hljs-literal\">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"利用遍历可以实现的简单操作\"><a href=\"#利用遍历可以实现的简单操作\" class=\"headerlink\" title=\"利用遍历可以实现的简单操作\"></a>利用遍历可以实现的简单操作</h2><p>利用遍历可以解决图结构中包括连通性等诸多问题，这些问题使用bfs和dfs都能够得到解决，以dfs为例。</p>\n<h3 id=\"求图的连通分量\"><a href=\"#求图的连通分量\" class=\"headerlink\" title=\"求图的连通分量\"></a>求图的连通分量</h3><p>在遍历代码的基础上使用一个整型记录主函数调用dfs的次数即可（该类问题与常见的海岛个数问题&lt;floodfill算法&gt;思路完全一致）。思路如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span> count = <span class=\"hljs-number\">0</span><br>for (<span class=\"hljs-built_in\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">G</span>.</span></span>get<span class=\"hljs-constructor\">Vertex()</span>; v++) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!visited<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>) &#123;<br>        dfs(v);<br>        count++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"记录图中每个节点所属的连通分量\"><a href=\"#记录图中每个节点所属的连通分量\" class=\"headerlink\" title=\"记录图中每个节点所属的连通分量\"></a>记录图中每个节点所属的连通分量</h3><p>将记录是否访问过节点的boolean型数组visited改为整型数组，在不同连通分量递归时使用不同的值进行记录即可。大致思路如下半伪码。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span> visited;<br><span class=\"hljs-comment\">// 遍历将visited的值全部设置为-1，表示没有进行访问</span><br><span class=\"hljs-built_in\">int</span> record = <span class=\"hljs-number\">0</span>;<br>for (<span class=\"hljs-built_in\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">G</span>.</span></span>get<span class=\"hljs-constructor\">Vertex()</span>; v++) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!visited<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>) &#123;<br>        dfs(v, record);\t<span class=\"hljs-comment\">// 将record值用于标记已访问该节点</span><br>        record++;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 此时visited中就已经记录了每个节点所属连通分量的信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"求两点间是否可达\"><a href=\"#求两点间是否可达\" class=\"headerlink\" title=\"求两点间是否可达\"></a>求两点间是否可达</h3><p>若两点在同一个连通分量，则代表可达，在上一个问题的基础上进行一下判断就行了。</p>\n<h3 id=\"求两点间的任意一条路径\"><a href=\"#求两点间的任意一条路径\" class=\"headerlink\" title=\"求两点间的任意一条路径\"></a>求两点间的任意一条路径</h3><p>使用一个数组存储当前节点前面一个节点，之后根据数组信息即可得到两点间的一条路径，伪码如下：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-built_in\">int</span>[] pre;<br><span class=\"hljs-built_in\">int</span> target;<br>dfs(v, v);\t<span class=\"hljs-comment\">// 求从v到target的任一路径</span><br><br><span class=\"hljs-comment\">// v的上一个节点是parent</span><br><span class=\"hljs-keyword\">void</span> dfs(v, <span class=\"hljs-built_in\">parent</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span>(v == target) <span class=\"hljs-keyword\">return</span>;<br>\tvisited[v] = <span class=\"hljs-literal\">true</span>;<br>\tpre[v] = <span class=\"hljs-built_in\">parent</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-attribute\">w</span> : G.adj(v))<br>\t\t<span class=\"hljs-keyword\">if</span>(!visited[w])<br>\t\tdfs(w, v)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"检查是否有环\"><a href=\"#检查是否有环\" class=\"headerlink\" title=\"检查是否有环\"></a>检查是否有环</h3><p>利用深度优先遍历，若访问到了一个已访问过的点，则有环，若遍历结束都没访问到，则无环。</p>\n<h3 id=\"二分图检测\"><a href=\"#二分图检测\" class=\"headerlink\" title=\"二分图检测\"></a>二分图检测</h3><p>二分图就是<strong>顶点V可以分成不相交的两部分，且所有边的两个端点隶属于不同的部分</strong>的一种特殊图结构</p>\n<p>二分图的检测也可以使用深度优先遍历进行检测，每遍历到一个点则对其进行染色操作，若相应点已染色，则检查其与其相邻顶点颜色是否匹配，若不匹配则直接返回false</p>\n","site":{"data":{}},"excerpt":"","more":"<p>图的遍历思想是解决很多算法问题的关键，其中深度优先遍历可以使用栈（递归）进行实现，广度优先搜索可以使用队列进行实现。</p>\n<p>图的遍历的实现其实和树基本一致，深度优先对应前序遍历，广度优先对应层序遍历</p>\n<h2 id=\"遍历实现\"><a href=\"#遍历实现\" class=\"headerlink\" title=\"遍历实现\"></a>遍历实现</h2><h3 id=\"深度优先遍历（DFS）\"><a href=\"#深度优先遍历（DFS）\" class=\"headerlink\" title=\"深度优先遍历（DFS）\"></a>深度优先遍历（DFS）</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GraphDFS</span> &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Graph G;\t<span class=\"hljs-comment\">// 使用邻接表实现的图结构，参考图的概念与存储结构中的实现</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[] visited;\t<span class=\"hljs-comment\">// 记录是否访问过</span><br>    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; order = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\t<span class=\"hljs-comment\">// 存储遍历结果</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GraphDFS</span><span class=\"hljs-params\">(Graph G)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.G = G;<br>        visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[G.getVertex()];<br>        <span class=\"hljs-comment\">// 超过一个连通分量时，进行完全遍历</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;G.getVertex(); v++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(!visited[v]) &#123;<br>                dfs(v);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> v)</span> </span>&#123;<br>        visited[v] = <span class=\"hljs-literal\">true</span>;<br>        order.add(v);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> w : G.adj(v)) &#123;<br>            <span class=\"hljs-keyword\">if</span> (!visited[w]) &#123;<br>                dfs(w);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"广度优先遍历（BFS）\"><a href=\"#广度优先遍历（BFS）\" class=\"headerlink\" title=\"广度优先遍历（BFS）\"></a>广度优先遍历（BFS）</h3><p>广度优先遍历在图中有一条很重要的性质，即广度优先搜索能够直接得到<strong>无权图的最短路径</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">GraphBFS</span> &#123;</span><br><br>    <span class=\"hljs-keyword\">private</span> Graph G;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span>[] visited;<br>    <span class=\"hljs-keyword\">private</span> ArrayList&lt;Integer&gt; order = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">GraphBFS</span><span class=\"hljs-params\">(Graph G)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">this</span>.G = G;<br>        visited = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">boolean</span>[G.getVertex()];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-number\">0</span>; v&lt;G.getVertex(); v++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(!visited[v])<br>                bfs(v);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">bfs</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> s)</span> </span>&#123;<br>        Queue&lt;Integer&gt; <span class=\"hljs-built_in\">queue</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();<br>        <span class=\"hljs-built_in\">queue</span>.add(s);<br>        visited[s] = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">while</span> (!<span class=\"hljs-built_in\">queue</span>.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">int</span> v = <span class=\"hljs-built_in\">queue</span>.<span class=\"hljs-built_in\">remove</span>();<br>            order.add(v);<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> w : G.adj(v)) &#123;<br>                <span class=\"hljs-keyword\">if</span> (!visited[w]) &#123;<br>                    <span class=\"hljs-built_in\">queue</span>.add(w);<br>                    visited[w] = <span class=\"hljs-literal\">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterable&lt;Integer&gt; <span class=\"hljs-title\">order</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"利用遍历可以实现的简单操作\"><a href=\"#利用遍历可以实现的简单操作\" class=\"headerlink\" title=\"利用遍历可以实现的简单操作\"></a>利用遍历可以实现的简单操作</h2><p>利用遍历可以解决图结构中包括连通性等诸多问题，这些问题使用bfs和dfs都能够得到解决，以dfs为例。</p>\n<h3 id=\"求图的连通分量\"><a href=\"#求图的连通分量\" class=\"headerlink\" title=\"求图的连通分量\"></a>求图的连通分量</h3><p>在遍历代码的基础上使用一个整型记录主函数调用dfs的次数即可（该类问题与常见的海岛个数问题&lt;floodfill算法&gt;思路完全一致）。思路如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span> count = <span class=\"hljs-number\">0</span><br>for (<span class=\"hljs-built_in\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">G</span>.</span></span>get<span class=\"hljs-constructor\">Vertex()</span>; v++) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!visited<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>) &#123;<br>        dfs(v);<br>        count++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"记录图中每个节点所属的连通分量\"><a href=\"#记录图中每个节点所属的连通分量\" class=\"headerlink\" title=\"记录图中每个节点所属的连通分量\"></a>记录图中每个节点所属的连通分量</h3><p>将记录是否访问过节点的boolean型数组visited改为整型数组，在不同连通分量递归时使用不同的值进行记录即可。大致思路如下半伪码。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span> visited;<br><span class=\"hljs-comment\">// 遍历将visited的值全部设置为-1，表示没有进行访问</span><br><span class=\"hljs-built_in\">int</span> record = <span class=\"hljs-number\">0</span>;<br>for (<span class=\"hljs-built_in\">int</span> v=<span class=\"hljs-number\">0</span>; v&lt;<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">G</span>.</span></span>get<span class=\"hljs-constructor\">Vertex()</span>; v++) &#123;<br>    <span class=\"hljs-keyword\">if</span>(!visited<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>) &#123;<br>        dfs(v, record);\t<span class=\"hljs-comment\">// 将record值用于标记已访问该节点</span><br>        record++;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 此时visited中就已经记录了每个节点所属连通分量的信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"求两点间是否可达\"><a href=\"#求两点间是否可达\" class=\"headerlink\" title=\"求两点间是否可达\"></a>求两点间是否可达</h3><p>若两点在同一个连通分量，则代表可达，在上一个问题的基础上进行一下判断就行了。</p>\n<h3 id=\"求两点间的任意一条路径\"><a href=\"#求两点间的任意一条路径\" class=\"headerlink\" title=\"求两点间的任意一条路径\"></a>求两点间的任意一条路径</h3><p>使用一个数组存储当前节点前面一个节点，之后根据数组信息即可得到两点间的一条路径，伪码如下：</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs qml\"><span class=\"hljs-built_in\">int</span>[] pre;<br><span class=\"hljs-built_in\">int</span> target;<br>dfs(v, v);\t<span class=\"hljs-comment\">// 求从v到target的任一路径</span><br><br><span class=\"hljs-comment\">// v的上一个节点是parent</span><br><span class=\"hljs-keyword\">void</span> dfs(v, <span class=\"hljs-built_in\">parent</span>) &#123;<br>\t<span class=\"hljs-keyword\">if</span>(v == target) <span class=\"hljs-keyword\">return</span>;<br>\tvisited[v] = <span class=\"hljs-literal\">true</span>;<br>\tpre[v] = <span class=\"hljs-built_in\">parent</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-attribute\">w</span> : G.adj(v))<br>\t\t<span class=\"hljs-keyword\">if</span>(!visited[w])<br>\t\tdfs(w, v)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"检查是否有环\"><a href=\"#检查是否有环\" class=\"headerlink\" title=\"检查是否有环\"></a>检查是否有环</h3><p>利用深度优先遍历，若访问到了一个已访问过的点，则有环，若遍历结束都没访问到，则无环。</p>\n<h3 id=\"二分图检测\"><a href=\"#二分图检测\" class=\"headerlink\" title=\"二分图检测\"></a>二分图检测</h3><p>二分图就是<strong>顶点V可以分成不相交的两部分，且所有边的两个端点隶属于不同的部分</strong>的一种特殊图结构</p>\n<p>二分图的检测也可以使用深度优先遍历进行检测，每遍历到一个点则对其进行染色操作，若相应点已染色，则检查其与其相邻顶点颜色是否匹配，若不匹配则直接返回false</p>\n"},{"title":"8、哈希表","date":"2020-08-01T04:44:21.000Z","fileName":"ds-hashtable","_content":"\n### 哈希表\n\n哈希表可以理解为是通过一个映射函数（哈希函数）直接得到存储地址的数据结构，通常基于数组实现（**容量通常采用质数**）。\n\n```\n存储地址 = f(关键字)\t// f为哈希函数\n```\n\n根据这一基本特征可以看出，哈希表可以提供非常快速的插入-删除操作，理想状况下时间复杂度为0(1)级别。\n\n### 哈希函数\n\n哈希函数可以简单理解为是对需要存储的元素本身——>存储下标的映射。\n\n如对字符串可以分别取其符号进行运算（整型则通常使用取模得到），而对于相关类，也可以自己定义hashcode函数，来获取坐标方式。\n\n#### 哈希函数的设计：\n\n一致性：如果a==b,则hash(a)==hash(b)\n\n高效性：计算高效简便\n\n均匀性：哈希值均匀分布\n\n\n\n### 哈希冲突\n\n比如我们的哈希函数是对7取余，那么元素14和元素77通过哈希函数得到的索引就是相同的，这种情况就叫哈希冲突。\n\n解决哈希冲突的方法有很多，具体有：**链地址法（数组中存链表、平衡二叉树等元素）**、**开放地址法（向下找没存元素的位置，个人认为很麻烦不适用）**等方法。\n\n也可以将实现哈希表的数组直接保存一个平衡二叉树，总之就是为了解决冲突问题。\n\n\n\n### 哈希表扩容\n\n如果哈希函数设计的不好，很多元素都重叠在了一个地址，那么理论上O(1)的时间复杂度在以平衡二叉树为数组元素的哈希表中就会达到O(log n/m)，因此遇到这种时候，就应该对哈希表进行扩容。\n\n平均每个地址承载的元素多过一定程度，就进行扩容，通常这个值是0.75。缩容同理。\n\n\n\n由于哈希表的实现方法很多，而且并不算太难，所以不进行代码记录，主要思想就是**以空间换时间**\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/6e88d63061f2\n","source":"_posts/学习笔记/数据结构与算法/8、哈希表.md","raw":"---\ntitle: 8、哈希表\ndate: 2020-08-01 12:44:21\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-hashtable\n---\n\n### 哈希表\n\n哈希表可以理解为是通过一个映射函数（哈希函数）直接得到存储地址的数据结构，通常基于数组实现（**容量通常采用质数**）。\n\n```\n存储地址 = f(关键字)\t// f为哈希函数\n```\n\n根据这一基本特征可以看出，哈希表可以提供非常快速的插入-删除操作，理想状况下时间复杂度为0(1)级别。\n\n### 哈希函数\n\n哈希函数可以简单理解为是对需要存储的元素本身——>存储下标的映射。\n\n如对字符串可以分别取其符号进行运算（整型则通常使用取模得到），而对于相关类，也可以自己定义hashcode函数，来获取坐标方式。\n\n#### 哈希函数的设计：\n\n一致性：如果a==b,则hash(a)==hash(b)\n\n高效性：计算高效简便\n\n均匀性：哈希值均匀分布\n\n\n\n### 哈希冲突\n\n比如我们的哈希函数是对7取余，那么元素14和元素77通过哈希函数得到的索引就是相同的，这种情况就叫哈希冲突。\n\n解决哈希冲突的方法有很多，具体有：**链地址法（数组中存链表、平衡二叉树等元素）**、**开放地址法（向下找没存元素的位置，个人认为很麻烦不适用）**等方法。\n\n也可以将实现哈希表的数组直接保存一个平衡二叉树，总之就是为了解决冲突问题。\n\n\n\n### 哈希表扩容\n\n如果哈希函数设计的不好，很多元素都重叠在了一个地址，那么理论上O(1)的时间复杂度在以平衡二叉树为数组元素的哈希表中就会达到O(log n/m)，因此遇到这种时候，就应该对哈希表进行扩容。\n\n平均每个地址承载的元素多过一定程度，就进行扩容，通常这个值是0.75。缩容同理。\n\n\n\n由于哈希表的实现方法很多，而且并不算太难，所以不进行代码记录，主要思想就是**以空间换时间**\n\n\n\n### 参考链接：\n\nhttps://www.jianshu.com/p/6e88d63061f2\n","slug":"学习笔记/数据结构与算法/8、哈希表","published":1,"updated":"2021-01-11T04:52:19.172Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moas003trwjs5k30do1p","content":"<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>哈希表可以理解为是通过一个映射函数（哈希函数）直接得到存储地址的数据结构，通常基于数组实现（<strong>容量通常采用质数</strong>）。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">存储地址 = f<span class=\"hljs-comment\">(关键字)</span>\t<span class=\"hljs-comment\">// f为哈希函数</span><br></code></pre></td></tr></table></figure>\n\n<p>根据这一基本特征可以看出，哈希表可以提供非常快速的插入-删除操作，理想状况下时间复杂度为0(1)级别。</p>\n<h3 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h3><p>哈希函数可以简单理解为是对需要存储的元素本身——&gt;存储下标的映射。</p>\n<p>如对字符串可以分别取其符号进行运算（整型则通常使用取模得到），而对于相关类，也可以自己定义hashcode函数，来获取坐标方式。</p>\n<h4 id=\"哈希函数的设计：\"><a href=\"#哈希函数的设计：\" class=\"headerlink\" title=\"哈希函数的设计：\"></a>哈希函数的设计：</h4><p>一致性：如果a==b,则hash(a)==hash(b)</p>\n<p>高效性：计算高效简便</p>\n<p>均匀性：哈希值均匀分布</p>\n<h3 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h3><p>比如我们的哈希函数是对7取余，那么元素14和元素77通过哈希函数得到的索引就是相同的，这种情况就叫哈希冲突。</p>\n<p>解决哈希冲突的方法有很多，具体有：<strong>链地址法（数组中存链表、平衡二叉树等元素）</strong>、<strong>开放地址法（向下找没存元素的位置，个人认为很麻烦不适用）</strong>等方法。</p>\n<p>也可以将实现哈希表的数组直接保存一个平衡二叉树，总之就是为了解决冲突问题。</p>\n<h3 id=\"哈希表扩容\"><a href=\"#哈希表扩容\" class=\"headerlink\" title=\"哈希表扩容\"></a>哈希表扩容</h3><p>如果哈希函数设计的不好，很多元素都重叠在了一个地址，那么理论上O(1)的时间复杂度在以平衡二叉树为数组元素的哈希表中就会达到O(log n/m)，因此遇到这种时候，就应该对哈希表进行扩容。</p>\n<p>平均每个地址承载的元素多过一定程度，就进行扩容，通常这个值是0.75。缩容同理。</p>\n<p>由于哈希表的实现方法很多，而且并不算太难，所以不进行代码记录，主要思想就是<strong>以空间换时间</strong></p>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/6e88d63061f2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6e88d63061f2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3><p>哈希表可以理解为是通过一个映射函数（哈希函数）直接得到存储地址的数据结构，通常基于数组实现（<strong>容量通常采用质数</strong>）。</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">存储地址 = f<span class=\"hljs-comment\">(关键字)</span>\t<span class=\"hljs-comment\">// f为哈希函数</span><br></code></pre></td></tr></table></figure>\n\n<p>根据这一基本特征可以看出，哈希表可以提供非常快速的插入-删除操作，理想状况下时间复杂度为0(1)级别。</p>\n<h3 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h3><p>哈希函数可以简单理解为是对需要存储的元素本身——&gt;存储下标的映射。</p>\n<p>如对字符串可以分别取其符号进行运算（整型则通常使用取模得到），而对于相关类，也可以自己定义hashcode函数，来获取坐标方式。</p>\n<h4 id=\"哈希函数的设计：\"><a href=\"#哈希函数的设计：\" class=\"headerlink\" title=\"哈希函数的设计：\"></a>哈希函数的设计：</h4><p>一致性：如果a==b,则hash(a)==hash(b)</p>\n<p>高效性：计算高效简便</p>\n<p>均匀性：哈希值均匀分布</p>\n<h3 id=\"哈希冲突\"><a href=\"#哈希冲突\" class=\"headerlink\" title=\"哈希冲突\"></a>哈希冲突</h3><p>比如我们的哈希函数是对7取余，那么元素14和元素77通过哈希函数得到的索引就是相同的，这种情况就叫哈希冲突。</p>\n<p>解决哈希冲突的方法有很多，具体有：<strong>链地址法（数组中存链表、平衡二叉树等元素）</strong>、<strong>开放地址法（向下找没存元素的位置，个人认为很麻烦不适用）</strong>等方法。</p>\n<p>也可以将实现哈希表的数组直接保存一个平衡二叉树，总之就是为了解决冲突问题。</p>\n<h3 id=\"哈希表扩容\"><a href=\"#哈希表扩容\" class=\"headerlink\" title=\"哈希表扩容\"></a>哈希表扩容</h3><p>如果哈希函数设计的不好，很多元素都重叠在了一个地址，那么理论上O(1)的时间复杂度在以平衡二叉树为数组元素的哈希表中就会达到O(log n/m)，因此遇到这种时候，就应该对哈希表进行扩容。</p>\n<p>平均每个地址承载的元素多过一定程度，就进行扩容，通常这个值是0.75。缩容同理。</p>\n<p>由于哈希表的实现方法很多，而且并不算太难，所以不进行代码记录，主要思想就是<strong>以空间换时间</strong></p>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><p><a href=\"https://www.jianshu.com/p/6e88d63061f2\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/6e88d63061f2</a></p>\n"},{"title":"图的概念与存储结构","date":"2020-08-15T20:00:14.000Z","fileName":"graph-basic-knowledge","_content":"\n## 图的基本概念\n\n图是由顶点的集合和顶点之间的边的集合组成的，通常表示为G(V, E)。其中G表示一个图，V是图G中的顶点的集合，E是图G中边的集合。\n\n图按照**边是否有方向**和**边是否带权重**可以分为四类，即有向无权图、有向有权图、无向无权图、无向有权图。\n\n**无向图的边**通常使用“()”表示，如A与B之间的边就是(A, B)或(B, A)\n\n**有向边**则通常使用“<>”表示，如A到B的边就是<A, B>，这时边有方向性，字母不能够替换。\n\n图按照边的多少分为**稀疏图**和**稠密图**。若任意两个顶点之间都存在边叫**完全图**（无向完全图有n(n-1)/2条边）。没有自环边、没有平行边的图称为**简单图**。\n\n无向图顶点的边数叫做“度”，有向图分为出度和入度\n\n### 连通图\n\n在无向图G中，如果对于图中任意两个顶点都是连通的，则称G为连通图。\n\n无向图中极大连通子图称为**连通分量**。其实就是有几个可以互相连通的块，类似于树结构中定义的森林。\n\n**连通图的生成树**是一个极小的连通子图，其含有图中全部的V个节点，但只有足以构成一棵树的v-1条边\n\n\n\n## 图的存储方法与实现\n\n### 邻接矩阵\n\n在邻接矩阵实现中，由行和列都表示顶点，由两个顶点所决定的矩阵对应元素表示这里两个顶点是否相连。如果是无权图的话相连为1，不相连为0，如果是有权图的话该处的数组则为边上所带的权重。\n\n![](http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png)\n\n```\npublic class AdjMatrix {\n    private int V;  // 顶点集合\n    private int E;  // 边集合\n    private int[][] adj;    // 邻接矩阵\n    \n    // 读入数据，构建图\n    // 先读入顶点数V，再读入边数E，最后读入边的信息\n    public AdjMatrix(String filename) {\n        File file = new File(filename);\n        try(Scanner scanner = new Scanner(file)) {\n            V = scanner.nextInt();\n            if(V < 0)\n                throw new IllegalArgumentException(\"V must be non-negative\");\n            E = scanner.nextInt();\n            if(E < 0)\n                throw new IllegalArgumentException(\"E must be non-negative\");\n            adj = new int[V][V];\n\n            for (int i=0; i<E; i++) {\n                int a = scanner.nextInt();\n                validateVertex(a);\n                int b = scanner.nextInt();\n                validateVertex(b);\n                if(a == b)\n                    throw new IllegalArgumentException(\"Self Loop is Detected\");\n                if(adj[a][b] == 1)\n                    throw new IllegalArgumentException(\"Parallel Edge is Detected\");\n                adj[a][b] = 1;\n                adj[b][a] = 1;\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 判断输入数据是否合理\n    private void validateVertex(int v) {\n        if(v < 0 || v >=V)\n            throw new IllegalArgumentException(\"Vertex\" + v + \"is valid\");\n    }\n\n    // 输出顶点数\n    public int getVertex() {\n        return V;\n    }\n\n    // 输出边数\n    public int getEdge() {\n        return E;\n    }\n\n    // 判断v1与v2之间存不存在边\n    public boolean hasEdge(int v1, int v2) {\n        validateVertex(v1);\n        validateVertex(v2);\n        return adj[v1][v2] == 1;\n    }\n\n    // 获取所有邻接的顶点\n    public ArrayList<Integer> adj(int v) {\n        validateVertex(v);\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i=0; i<V; i++) {\n            if(adj[v][i] == 1)\n                res.add(i);\n        }\n        return res;\n    }\n\n    // 获取顶点v的度\n    public int degree(int v) {\n        return adj(v).size();\n    }\n}\n```\n\n\n\n### 邻接表\n\n在邻接列表实现中，每一个顶点会存储一个从它这里开始的边的列表。这个“列表”的具体实现的数据结构可以是链表，也可以是红黑树与哈希表等等。\n\n![](http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E8%A1%A8.png)\n\n```\npublic class AdjList {\n    private int V;  // 顶点集合\n    private int E;  // 边集合\n    private LinkedList<Integer>[] adj;  // 邻接表\n\n    // 读入数据，构建图\n    // 先读入顶点数V，再读入边数E，最后读入边的信息\n    public AdjList(String filename) {\n        File file = new File(filename);\n        try(Scanner scanner = new Scanner(file)) {\n            V = scanner.nextInt();\n            if(V < 0)\n                throw new IllegalArgumentException(\"V must be non-negative\");\n            E = scanner.nextInt();\n            if(E < 0)\n                throw new IllegalArgumentException(\"E must be non-negative\");\n            adj = new LinkedList[V];\n\n            for (int i=0; i<V; i++) {\n                adj[i] = new LinkedList<>();\n            }\n\n            for (int i=0; i<E; i++) {\n                int a = scanner.nextInt();\n                validateVertex(a);\n                int b = scanner.nextInt();\n                validateVertex(b);\n                if(a == b)\n                    throw new IllegalArgumentException(\"Self Loop is Detected\");\n                if(adj[a].contains(b))\n                    throw new IllegalArgumentException(\"Parallel Edge is Detected\");\n                adj[a].add(b);\n                adj[b].add(a);\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 判断输入数据是否合理\n    private void validateVertex(int v) {\n        if(v < 0 || v >=V)\n            throw new IllegalArgumentException(\"Vertex\" + v + \"is valid\");\n    }\n\n    // 输出顶点数\n    public int getVertex() {\n        return V;\n    }\n\n    // 输出边数\n    public int getEdge() {\n        return E;\n    }\n\n    // 判断v1与v2之间存不存在边\n    public boolean hasEdge(int v1, int v2) {\n        validateVertex(v1);\n        validateVertex(v2);\n        return adj[v1].contains(v2);\n    }\n\n    // 获取所有邻接的顶点\n    public LinkedList<Integer> adj(int v) {\n        validateVertex(v);\n        return adj[v];\n    }\n\n    // 获取顶点v的度\n    public int degree(int v) {\n        return adj(v).size();\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n| 操作                   | 邻接矩阵 | 邻接表（链表）           | 邻接表（红黑树）         |\n| ---------------------- | -------- | ------------------------ | ------------------------ |\n| 空间复杂度             | O(V^2)   | O(V+E)                   | O(V+E)                   |\n| 建图                   | O(E)     | O(E*V)                   | O(E*log V)               |\n| 查看是否相邻           | O(1)     | O(degree(V))，最差时O(V) | O(log V)                 |\n| 返回该点的所有相邻节点 | O(V)     | O(degree(V))，最差时O(V) | O(degree(V))，最差时O(V) |\n\n\n\n### 参考\n\nhttps://www.jianshu.com/p/bce71b2bdbc8","source":"_posts/学习笔记/数据结构与算法/9、图的概念与存储结构.md","raw":"---\ntitle: 图的概念与存储结构\ndate: 2020-08-16 04:00:14\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: graph-basic-knowledge\n---\n\n## 图的基本概念\n\n图是由顶点的集合和顶点之间的边的集合组成的，通常表示为G(V, E)。其中G表示一个图，V是图G中的顶点的集合，E是图G中边的集合。\n\n图按照**边是否有方向**和**边是否带权重**可以分为四类，即有向无权图、有向有权图、无向无权图、无向有权图。\n\n**无向图的边**通常使用“()”表示，如A与B之间的边就是(A, B)或(B, A)\n\n**有向边**则通常使用“<>”表示，如A到B的边就是<A, B>，这时边有方向性，字母不能够替换。\n\n图按照边的多少分为**稀疏图**和**稠密图**。若任意两个顶点之间都存在边叫**完全图**（无向完全图有n(n-1)/2条边）。没有自环边、没有平行边的图称为**简单图**。\n\n无向图顶点的边数叫做“度”，有向图分为出度和入度\n\n### 连通图\n\n在无向图G中，如果对于图中任意两个顶点都是连通的，则称G为连通图。\n\n无向图中极大连通子图称为**连通分量**。其实就是有几个可以互相连通的块，类似于树结构中定义的森林。\n\n**连通图的生成树**是一个极小的连通子图，其含有图中全部的V个节点，但只有足以构成一棵树的v-1条边\n\n\n\n## 图的存储方法与实现\n\n### 邻接矩阵\n\n在邻接矩阵实现中，由行和列都表示顶点，由两个顶点所决定的矩阵对应元素表示这里两个顶点是否相连。如果是无权图的话相连为1，不相连为0，如果是有权图的话该处的数组则为边上所带的权重。\n\n![](http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png)\n\n```\npublic class AdjMatrix {\n    private int V;  // 顶点集合\n    private int E;  // 边集合\n    private int[][] adj;    // 邻接矩阵\n    \n    // 读入数据，构建图\n    // 先读入顶点数V，再读入边数E，最后读入边的信息\n    public AdjMatrix(String filename) {\n        File file = new File(filename);\n        try(Scanner scanner = new Scanner(file)) {\n            V = scanner.nextInt();\n            if(V < 0)\n                throw new IllegalArgumentException(\"V must be non-negative\");\n            E = scanner.nextInt();\n            if(E < 0)\n                throw new IllegalArgumentException(\"E must be non-negative\");\n            adj = new int[V][V];\n\n            for (int i=0; i<E; i++) {\n                int a = scanner.nextInt();\n                validateVertex(a);\n                int b = scanner.nextInt();\n                validateVertex(b);\n                if(a == b)\n                    throw new IllegalArgumentException(\"Self Loop is Detected\");\n                if(adj[a][b] == 1)\n                    throw new IllegalArgumentException(\"Parallel Edge is Detected\");\n                adj[a][b] = 1;\n                adj[b][a] = 1;\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 判断输入数据是否合理\n    private void validateVertex(int v) {\n        if(v < 0 || v >=V)\n            throw new IllegalArgumentException(\"Vertex\" + v + \"is valid\");\n    }\n\n    // 输出顶点数\n    public int getVertex() {\n        return V;\n    }\n\n    // 输出边数\n    public int getEdge() {\n        return E;\n    }\n\n    // 判断v1与v2之间存不存在边\n    public boolean hasEdge(int v1, int v2) {\n        validateVertex(v1);\n        validateVertex(v2);\n        return adj[v1][v2] == 1;\n    }\n\n    // 获取所有邻接的顶点\n    public ArrayList<Integer> adj(int v) {\n        validateVertex(v);\n        ArrayList<Integer> res = new ArrayList<>();\n        for (int i=0; i<V; i++) {\n            if(adj[v][i] == 1)\n                res.add(i);\n        }\n        return res;\n    }\n\n    // 获取顶点v的度\n    public int degree(int v) {\n        return adj(v).size();\n    }\n}\n```\n\n\n\n### 邻接表\n\n在邻接列表实现中，每一个顶点会存储一个从它这里开始的边的列表。这个“列表”的具体实现的数据结构可以是链表，也可以是红黑树与哈希表等等。\n\n![](http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E8%A1%A8.png)\n\n```\npublic class AdjList {\n    private int V;  // 顶点集合\n    private int E;  // 边集合\n    private LinkedList<Integer>[] adj;  // 邻接表\n\n    // 读入数据，构建图\n    // 先读入顶点数V，再读入边数E，最后读入边的信息\n    public AdjList(String filename) {\n        File file = new File(filename);\n        try(Scanner scanner = new Scanner(file)) {\n            V = scanner.nextInt();\n            if(V < 0)\n                throw new IllegalArgumentException(\"V must be non-negative\");\n            E = scanner.nextInt();\n            if(E < 0)\n                throw new IllegalArgumentException(\"E must be non-negative\");\n            adj = new LinkedList[V];\n\n            for (int i=0; i<V; i++) {\n                adj[i] = new LinkedList<>();\n            }\n\n            for (int i=0; i<E; i++) {\n                int a = scanner.nextInt();\n                validateVertex(a);\n                int b = scanner.nextInt();\n                validateVertex(b);\n                if(a == b)\n                    throw new IllegalArgumentException(\"Self Loop is Detected\");\n                if(adj[a].contains(b))\n                    throw new IllegalArgumentException(\"Parallel Edge is Detected\");\n                adj[a].add(b);\n                adj[b].add(a);\n            }\n        }\n        catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 判断输入数据是否合理\n    private void validateVertex(int v) {\n        if(v < 0 || v >=V)\n            throw new IllegalArgumentException(\"Vertex\" + v + \"is valid\");\n    }\n\n    // 输出顶点数\n    public int getVertex() {\n        return V;\n    }\n\n    // 输出边数\n    public int getEdge() {\n        return E;\n    }\n\n    // 判断v1与v2之间存不存在边\n    public boolean hasEdge(int v1, int v2) {\n        validateVertex(v1);\n        validateVertex(v2);\n        return adj[v1].contains(v2);\n    }\n\n    // 获取所有邻接的顶点\n    public LinkedList<Integer> adj(int v) {\n        validateVertex(v);\n        return adj[v];\n    }\n\n    // 获取顶点v的度\n    public int degree(int v) {\n        return adj(v).size();\n    }\n}\n```\n\n\n\n### 复杂度分析\n\n| 操作                   | 邻接矩阵 | 邻接表（链表）           | 邻接表（红黑树）         |\n| ---------------------- | -------- | ------------------------ | ------------------------ |\n| 空间复杂度             | O(V^2)   | O(V+E)                   | O(V+E)                   |\n| 建图                   | O(E)     | O(E*V)                   | O(E*log V)               |\n| 查看是否相邻           | O(1)     | O(degree(V))，最差时O(V) | O(log V)                 |\n| 返回该点的所有相邻节点 | O(V)     | O(degree(V))，最差时O(V) | O(degree(V))，最差时O(V) |\n\n\n\n### 参考\n\nhttps://www.jianshu.com/p/bce71b2bdbc8","slug":"学习笔记/数据结构与算法/9、图的概念与存储结构","published":1,"updated":"2021-01-11T04:52:26.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moau003xrwjs9njc6bmd","content":"<h2 id=\"图的基本概念\"><a href=\"#图的基本概念\" class=\"headerlink\" title=\"图的基本概念\"></a>图的基本概念</h2><p>图是由顶点的集合和顶点之间的边的集合组成的，通常表示为G(V, E)。其中G表示一个图，V是图G中的顶点的集合，E是图G中边的集合。</p>\n<p>图按照<strong>边是否有方向</strong>和<strong>边是否带权重</strong>可以分为四类，即有向无权图、有向有权图、无向无权图、无向有权图。</p>\n<p><strong>无向图的边</strong>通常使用“()”表示，如A与B之间的边就是(A, B)或(B, A)</p>\n<p><strong>有向边</strong>则通常使用“&lt;&gt;”表示，如A到B的边就是&lt;A, B&gt;，这时边有方向性，字母不能够替换。</p>\n<p>图按照边的多少分为<strong>稀疏图</strong>和<strong>稠密图</strong>。若任意两个顶点之间都存在边叫<strong>完全图</strong>（无向完全图有n(n-1)/2条边）。没有自环边、没有平行边的图称为<strong>简单图</strong>。</p>\n<p>无向图顶点的边数叫做“度”，有向图分为出度和入度</p>\n<h3 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h3><p>在无向图G中，如果对于图中任意两个顶点都是连通的，则称G为连通图。</p>\n<p>无向图中极大连通子图称为<strong>连通分量</strong>。其实就是有几个可以互相连通的块，类似于树结构中定义的森林。</p>\n<p><strong>连通图的生成树</strong>是一个极小的连通子图，其含有图中全部的V个节点，但只有足以构成一棵树的v-1条边</p>\n<h2 id=\"图的存储方法与实现\"><a href=\"#图的存储方法与实现\" class=\"headerlink\" title=\"图的存储方法与实现\"></a>图的存储方法与实现</h2><h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>在邻接矩阵实现中，由行和列都表示顶点，由两个顶点所决定的矩阵对应元素表示这里两个顶点是否相连。如果是无权图的话相连为1，不相连为0，如果是有权图的话该处的数组则为边上所带的权重。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png\" alt=\"\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> AdjMatrix &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> V;  <span class=\"hljs-comment\">// 顶点集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> E;  <span class=\"hljs-comment\">// 边集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span><span class=\"hljs-literal\">[]</span> adj;    <span class=\"hljs-comment\">// 邻接矩阵</span><br>    <br>    <span class=\"hljs-comment\">// 读入数据，构建图</span><br>    <span class=\"hljs-comment\">// 先读入顶点数V，再读入边数E，最后读入边的信息</span><br>    public <span class=\"hljs-constructor\">AdjMatrix(String <span class=\"hljs-params\">filename</span>)</span> &#123;<br>        File file = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">File(<span class=\"hljs-params\">filename</span>)</span>;<br>        <span class=\"hljs-keyword\">try</span>(Scanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(<span class=\"hljs-params\">file</span>)</span>) &#123;<br>            V = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(V &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"V must be non-negative\"</span>)</span>;<br>            E = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(E &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"E must be non-negative\"</span>)</span>;<br>            adj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[V]</span><span class=\"hljs-literal\">[V]</span>;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;E; i++) &#123;<br>                <span class=\"hljs-built_in\">int</span> a = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">a</span>)</span>;<br>                <span class=\"hljs-built_in\">int</span> b = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">b</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(a<span class=\"hljs-operator\"> == </span>b)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Self Loop is Detected\"</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Parallel Edge is Detected\"</span>)</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span> = <span class=\"hljs-number\">1</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span> = <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        catch (IOException e) &#123;<br>            e.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断输入数据是否合理</span><br>    <span class=\"hljs-keyword\">private</span> void validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(v &lt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> || </span>v &gt;=V)<br>            throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Vertex\"</span> + <span class=\"hljs-params\">v</span> + <span class=\"hljs-string\">\"is valid\"</span>)</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出顶点数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Vertex()</span> &#123;<br>        return V;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出边数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Edge()</span> &#123;<br>        return E;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断v1与v2之间存不存在边</span><br>    public boolean has<span class=\"hljs-constructor\">Edge(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v1</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v2</span>)</span> &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v1</span>)</span>;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v2</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v1</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v2</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取所有邻接的顶点</span><br>    public ArrayList&lt;Integer&gt; adj(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v</span>)</span>;<br>        ArrayList&lt;Integer&gt; res = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;V; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)<br>                res.add(i);<br>        &#125;<br>        return res;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取顶点v的度</span><br>    public <span class=\"hljs-built_in\">int</span> degree(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        return adj(v).size<span class=\"hljs-literal\">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>在邻接列表实现中，每一个顶点会存储一个从它这里开始的边的列表。这个“列表”的具体实现的数据结构可以是链表，也可以是红黑树与哈希表等等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E8%A1%A8.png\" alt=\"\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> AdjList &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> V;  <span class=\"hljs-comment\">// 顶点集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> E;  <span class=\"hljs-comment\">// 边集合</span><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt;<span class=\"hljs-literal\">[]</span> adj;  <span class=\"hljs-comment\">// 邻接表</span><br><br>    <span class=\"hljs-comment\">// 读入数据，构建图</span><br>    <span class=\"hljs-comment\">// 先读入顶点数V，再读入边数E，最后读入边的信息</span><br>    public <span class=\"hljs-constructor\">AdjList(String <span class=\"hljs-params\">filename</span>)</span> &#123;<br>        File file = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">File(<span class=\"hljs-params\">filename</span>)</span>;<br>        <span class=\"hljs-keyword\">try</span>(Scanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(<span class=\"hljs-params\">file</span>)</span>) &#123;<br>            V = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(V &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"V must be non-negative\"</span>)</span>;<br>            E = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(E &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"E must be non-negative\"</span>)</span>;<br>            adj = <span class=\"hljs-keyword\">new</span> LinkedList<span class=\"hljs-literal\">[V]</span>;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;V; i++) &#123;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>            &#125;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;E; i++) &#123;<br>                <span class=\"hljs-built_in\">int</span> a = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">a</span>)</span>;<br>                <span class=\"hljs-built_in\">int</span> b = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">b</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(a<span class=\"hljs-operator\"> == </span>b)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Self Loop is Detected\"</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span>.contains(b))<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Parallel Edge is Detected\"</span>)</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span>.add(b);<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span>.add(a);<br>            &#125;<br>        &#125;<br>        catch (IOException e) &#123;<br>            e.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断输入数据是否合理</span><br>    <span class=\"hljs-keyword\">private</span> void validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(v &lt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> || </span>v &gt;=V)<br>            throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Vertex\"</span> + <span class=\"hljs-params\">v</span> + <span class=\"hljs-string\">\"is valid\"</span>)</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出顶点数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Vertex()</span> &#123;<br>        return V;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出边数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Edge()</span> &#123;<br>        return E;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断v1与v2之间存不存在边</span><br>    public boolean has<span class=\"hljs-constructor\">Edge(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v1</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v2</span>)</span> &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v1</span>)</span>;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v2</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v1</span>]</span>.contains(v2);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取所有邻接的顶点</span><br>    public LinkedList&lt;Integer&gt; adj(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取顶点v的度</span><br>    public <span class=\"hljs-built_in\">int</span> degree(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        return adj(v).size<span class=\"hljs-literal\">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>邻接矩阵</th>\n<th>邻接表（链表）</th>\n<th>邻接表（红黑树）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空间复杂度</td>\n<td>O(V^2)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>建图</td>\n<td>O(E)</td>\n<td>O(E*V)</td>\n<td>O(E*log V)</td>\n</tr>\n<tr>\n<td>查看是否相邻</td>\n<td>O(1)</td>\n<td>O(degree(V))，最差时O(V)</td>\n<td>O(log V)</td>\n</tr>\n<tr>\n<td>返回该点的所有相邻节点</td>\n<td>O(V)</td>\n<td>O(degree(V))，最差时O(V)</td>\n<td>O(degree(V))，最差时O(V)</td>\n</tr>\n</tbody></table>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/bce71b2bdbc8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/bce71b2bdbc8</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"图的基本概念\"><a href=\"#图的基本概念\" class=\"headerlink\" title=\"图的基本概念\"></a>图的基本概念</h2><p>图是由顶点的集合和顶点之间的边的集合组成的，通常表示为G(V, E)。其中G表示一个图，V是图G中的顶点的集合，E是图G中边的集合。</p>\n<p>图按照<strong>边是否有方向</strong>和<strong>边是否带权重</strong>可以分为四类，即有向无权图、有向有权图、无向无权图、无向有权图。</p>\n<p><strong>无向图的边</strong>通常使用“()”表示，如A与B之间的边就是(A, B)或(B, A)</p>\n<p><strong>有向边</strong>则通常使用“&lt;&gt;”表示，如A到B的边就是&lt;A, B&gt;，这时边有方向性，字母不能够替换。</p>\n<p>图按照边的多少分为<strong>稀疏图</strong>和<strong>稠密图</strong>。若任意两个顶点之间都存在边叫<strong>完全图</strong>（无向完全图有n(n-1)/2条边）。没有自环边、没有平行边的图称为<strong>简单图</strong>。</p>\n<p>无向图顶点的边数叫做“度”，有向图分为出度和入度</p>\n<h3 id=\"连通图\"><a href=\"#连通图\" class=\"headerlink\" title=\"连通图\"></a>连通图</h3><p>在无向图G中，如果对于图中任意两个顶点都是连通的，则称G为连通图。</p>\n<p>无向图中极大连通子图称为<strong>连通分量</strong>。其实就是有几个可以互相连通的块，类似于树结构中定义的森林。</p>\n<p><strong>连通图的生成树</strong>是一个极小的连通子图，其含有图中全部的V个节点，但只有足以构成一棵树的v-1条边</p>\n<h2 id=\"图的存储方法与实现\"><a href=\"#图的存储方法与实现\" class=\"headerlink\" title=\"图的存储方法与实现\"></a>图的存储方法与实现</h2><h3 id=\"邻接矩阵\"><a href=\"#邻接矩阵\" class=\"headerlink\" title=\"邻接矩阵\"></a>邻接矩阵</h3><p>在邻接矩阵实现中，由行和列都表示顶点，由两个顶点所决定的矩阵对应元素表示这里两个顶点是否相连。如果是无权图的话相连为1，不相连为0，如果是有权图的话该处的数组则为边上所带的权重。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5.png\" alt=\"\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> AdjMatrix &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> V;  <span class=\"hljs-comment\">// 顶点集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> E;  <span class=\"hljs-comment\">// 边集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[]</span><span class=\"hljs-literal\">[]</span> adj;    <span class=\"hljs-comment\">// 邻接矩阵</span><br>    <br>    <span class=\"hljs-comment\">// 读入数据，构建图</span><br>    <span class=\"hljs-comment\">// 先读入顶点数V，再读入边数E，最后读入边的信息</span><br>    public <span class=\"hljs-constructor\">AdjMatrix(String <span class=\"hljs-params\">filename</span>)</span> &#123;<br>        File file = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">File(<span class=\"hljs-params\">filename</span>)</span>;<br>        <span class=\"hljs-keyword\">try</span>(Scanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(<span class=\"hljs-params\">file</span>)</span>) &#123;<br>            V = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(V &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"V must be non-negative\"</span>)</span>;<br>            E = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(E &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"E must be non-negative\"</span>)</span>;<br>            adj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span><span class=\"hljs-literal\">[V]</span><span class=\"hljs-literal\">[V]</span>;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;E; i++) &#123;<br>                <span class=\"hljs-built_in\">int</span> a = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">a</span>)</span>;<br>                <span class=\"hljs-built_in\">int</span> b = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">b</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(a<span class=\"hljs-operator\"> == </span>b)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Self Loop is Detected\"</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Parallel Edge is Detected\"</span>)</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span> = <span class=\"hljs-number\">1</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span> = <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>        catch (IOException e) &#123;<br>            e.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断输入数据是否合理</span><br>    <span class=\"hljs-keyword\">private</span> void validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(v &lt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> || </span>v &gt;=V)<br>            throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Vertex\"</span> + <span class=\"hljs-params\">v</span> + <span class=\"hljs-string\">\"is valid\"</span>)</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出顶点数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Vertex()</span> &#123;<br>        return V;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出边数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Edge()</span> &#123;<br>        return E;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断v1与v2之间存不存在边</span><br>    public boolean has<span class=\"hljs-constructor\">Edge(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v1</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v2</span>)</span> &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v1</span>)</span>;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v2</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v1</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v2</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取所有邻接的顶点</span><br>    public ArrayList&lt;Integer&gt; adj(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v</span>)</span>;<br>        ArrayList&lt;Integer&gt; res = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>        for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;V; i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span><span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)<br>                res.add(i);<br>        &#125;<br>        return res;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取顶点v的度</span><br>    public <span class=\"hljs-built_in\">int</span> degree(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        return adj(v).size<span class=\"hljs-literal\">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"邻接表\"><a href=\"#邻接表\" class=\"headerlink\" title=\"邻接表\"></a>邻接表</h3><p>在邻接列表实现中，每一个顶点会存储一个从它这里开始的边的列表。这个“列表”的具体实现的数据结构可以是链表，也可以是红黑树与哈希表等等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E5%9B%BE%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/%E9%82%BB%E6%8E%A5%E8%A1%A8.png\" alt=\"\"></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> AdjList &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> V;  <span class=\"hljs-comment\">// 顶点集合</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> E;  <span class=\"hljs-comment\">// 边集合</span><br>    <span class=\"hljs-keyword\">private</span> LinkedList&lt;Integer&gt;<span class=\"hljs-literal\">[]</span> adj;  <span class=\"hljs-comment\">// 邻接表</span><br><br>    <span class=\"hljs-comment\">// 读入数据，构建图</span><br>    <span class=\"hljs-comment\">// 先读入顶点数V，再读入边数E，最后读入边的信息</span><br>    public <span class=\"hljs-constructor\">AdjList(String <span class=\"hljs-params\">filename</span>)</span> &#123;<br>        File file = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">File(<span class=\"hljs-params\">filename</span>)</span>;<br>        <span class=\"hljs-keyword\">try</span>(Scanner scanner = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Scanner(<span class=\"hljs-params\">file</span>)</span>) &#123;<br>            V = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(V &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"V must be non-negative\"</span>)</span>;<br>            E = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>            <span class=\"hljs-keyword\">if</span>(E &lt; <span class=\"hljs-number\">0</span>)<br>                throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"E must be non-negative\"</span>)</span>;<br>            adj = <span class=\"hljs-keyword\">new</span> LinkedList<span class=\"hljs-literal\">[V]</span>;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;V; i++) &#123;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span> = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;<span class=\"hljs-literal\">()</span>;<br>            &#125;<br><br>            for (<span class=\"hljs-built_in\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;E; i++) &#123;<br>                <span class=\"hljs-built_in\">int</span> a = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">a</span>)</span>;<br>                <span class=\"hljs-built_in\">int</span> b = scanner.next<span class=\"hljs-constructor\">Int()</span>;<br>                validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">b</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(a<span class=\"hljs-operator\"> == </span>b)<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Self Loop is Detected\"</span>)</span>;<br>                <span class=\"hljs-keyword\">if</span>(adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span>.contains(b))<br>                    throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Parallel Edge is Detected\"</span>)</span>;<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">a</span>]</span>.add(b);<br>                adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">b</span>]</span>.add(a);<br>            &#125;<br>        &#125;<br>        catch (IOException e) &#123;<br>            e.print<span class=\"hljs-constructor\">StackTrace()</span>;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断输入数据是否合理</span><br>    <span class=\"hljs-keyword\">private</span> void validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v</span>)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>(v &lt; <span class=\"hljs-number\">0</span><span class=\"hljs-operator\"> || </span>v &gt;=V)<br>            throw <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IllegalArgumentException(<span class=\"hljs-string\">\"Vertex\"</span> + <span class=\"hljs-params\">v</span> + <span class=\"hljs-string\">\"is valid\"</span>)</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出顶点数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Vertex()</span> &#123;<br>        return V;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 输出边数</span><br>    public <span class=\"hljs-built_in\">int</span> get<span class=\"hljs-constructor\">Edge()</span> &#123;<br>        return E;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 判断v1与v2之间存不存在边</span><br>    public boolean has<span class=\"hljs-constructor\">Edge(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v1</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">v2</span>)</span> &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v1</span>)</span>;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v2</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v1</span>]</span>.contains(v2);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取所有邻接的顶点</span><br>    public LinkedList&lt;Integer&gt; adj(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        validate<span class=\"hljs-constructor\">Vertex(<span class=\"hljs-params\">v</span>)</span>;<br>        return adj<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">v</span>]</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取顶点v的度</span><br>    public <span class=\"hljs-built_in\">int</span> degree(<span class=\"hljs-built_in\">int</span> v) &#123;<br>        return adj(v).size<span class=\"hljs-literal\">()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"复杂度分析\"><a href=\"#复杂度分析\" class=\"headerlink\" title=\"复杂度分析\"></a>复杂度分析</h3><table>\n<thead>\n<tr>\n<th>操作</th>\n<th>邻接矩阵</th>\n<th>邻接表（链表）</th>\n<th>邻接表（红黑树）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空间复杂度</td>\n<td>O(V^2)</td>\n<td>O(V+E)</td>\n<td>O(V+E)</td>\n</tr>\n<tr>\n<td>建图</td>\n<td>O(E)</td>\n<td>O(E*V)</td>\n<td>O(E*log V)</td>\n</tr>\n<tr>\n<td>查看是否相邻</td>\n<td>O(1)</td>\n<td>O(degree(V))，最差时O(V)</td>\n<td>O(log V)</td>\n</tr>\n<tr>\n<td>返回该点的所有相邻节点</td>\n<td>O(V)</td>\n<td>O(degree(V))，最差时O(V)</td>\n<td>O(degree(V))，最差时O(V)</td>\n</tr>\n</tbody></table>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.jianshu.com/p/bce71b2bdbc8\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/bce71b2bdbc8</a></p>\n"},{"title":"并查集","date":"2020-07-31T05:24:46.000Z","fileName":"ds-Union-Find","_content":"\n## 概述\n\n### 并查集定义\n\n**并查集(Union-Find Set)**，顾名思义，是实现快速合并集合与查询元素所在集合的数据结构。\n\n### 基本操作\n\n1. 合并两个不相交集合**（Union）**\n2. 判断两个元素是否属于同一个集合**（Find）**\n\n基于此，可以实现一个并查集的Java接口如下：\n\n```\npublic interface UF {\n    int getSize();  // 获取元素个数\n    boolean find(int p, int q); // 判断两个元素是否属于同一集合\n    void union(int p, int q);   // 合并两个不相交的集合\n}\n```\n\n\n\n## 实现思路\n\n### Quick Find概述\n\n如图，使用一个数组id标识不同元素所属的集合。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickfind.jpg)\n\n则并查集的实现逻辑如下。由于可以直接通过索引得到某元素所属的集合，则**Find操作的时间复杂度为O(1)**，但Union操作由于要遍历整个数组，因此**时间复杂度为O(n)**。\n\n```\npublic class UnionFind1 implements UF {\n\n    private int[] id;\n\n    public UnionFind1(int size) {\n        id = new int[size];\n        for(int i=0;i<id.length;i++)\n            id[i] = i;\n    }\n\n    @Override\n    public int getSize() {\n        return id.length;\n    }\n\n    // 获取元素所属集合\n    private int getID(int p) {\n        if (p < 0 || p >=id.length)\n            throw new IllegalArgumentException(\"p is illegal\");\n        return id[p];\n    }\n\n    // 查看元素p和元素q是否所属同一个集合\n    @Override\n    public boolean find(int p, int q) {\n        return getID(p) == getID(q);\n    }\n\n    // 合并元素p和元素q\n    @Override\n    public void union(int p, int q) {\n        int pID = getID(p);\n        int qID = getID(q);\n        if(pID == qID)\n            return;\n        for (int i=0;i<id.length;i++) {\n            if(id[i] == qID)\n                id[i] = pID;\n        }\n    }\n}\n```\n\n### Quick Union概述\n\n很显然，之前的Quick Find中查找是否属于同一元素速度很快，而Quick Union则着重于合并的速度。\n\n如图所示，Quick Union的设计思想采用树（森林）进行。每个集合都使用一个根节点进行标识（根节点的父节点为其自身），**在具体存储时，也可以使用一个parent数组来标识其父节点的位置**。因此：\n\n**Find操作只需要找到对应节点的根节点判断是否相等即可；**\n\n**Union操作只需要将一个元素的根节点指向Union操作的另一元素的根节点即可**，具体如图将元素1与元素2进行合并的操作示意\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickunion.jpg)\n\n具体实现如下（略去了不关键的几个方法）：这种方法下，find与union操作的时间复杂度都为O(h)，h为树的深度。\n\n```\npublic class UnionFind2 implements UF {\n\n    private int[] parent;\n\n    public UnionFind2(int size) {\n        parent = new int[size];\n\n        for (int i=0;i<size;i++) {\n            parent[i] = i;\n        }\n    }\n\n    private int getID(int p) {\n        if (p < 0 || p >= parent.length)\n            throw new IllegalArgumentException(\"p is out of bound\");\n        while (p != parent[p])\n            p = parent[p];\n        return p;\n    }\n\n    @Override\n    public boolean find(int p, int q) {\n        return getID(p) == getID(q);\n    }\n\n    @Override\n    public void union(int p, int q) {\n        int pRoot = getID(p);\n        int qRoot = getID(q);\n\n        if(pRoot == qRoot)\n            return;\n\n        parent[pRoot] = qRoot;\n    }\n}\n```\n\n### 优化\n\nQuick Union的效率与树的深度有关，因此需要尽可能的缩短树的深度，从而提高效率。\n\n#### 思路1：记录每棵树的节点个数\n\n节点个数多的树**大概率**深度高，因此让节点个数少的集合的根节点指向节点个数大的根节点即可。代码逻辑如下（sz[i]表示以i为根的集合中元素个数）\n\n```\n@Override\npublic void union(int p, int q) {\n    int pRoot = getID(p);\n    int qRoot = getID(q);\n\n    if(pRoot == qRoot)\n        return;\n\n    if(sz[pRoot] < sz[qRoot]) {\n        parent[pRoot] = qRoot;\n        sz[qRoot] += sz[pRoot];\n    }\n    else {\n        parent[qRoot] = pRoot;\n        sz[pRoot] += sz[qRoot];\n    }\n}\n```\n\n#### 思路2：记录没棵树的深度\n\n思路1的主要漏洞在于节点个数多的树未必深度大，因此可以通过记录树的深度来进行判断，代码逻辑如下（rank[i]表示以i为根的集合的层数）\n\n```\npublic void union(int p, int q) {\n    int pRoot = getID(p);\n    int qRoot = getID(q);\n\n    if(pRoot == qRoot)\n        return;\n\n    if(rank[pRoot] < rank[qRoot]) {\n        parent[pRoot] = qRoot;\n    }\n    else if(rank[qRoot] < rank[pRoot]){\n        parent[qRoot] = pRoot;\n    }\n    else {\n        parent[pRoot] = qRoot;\n        rank[qRoot]++;\n    }\n}\n```\n\n#### 思路3：路径压缩（Path Compression）\n\n使用`parent[p] = parent[parent[p]]`这种逻辑在每次获取根节点时将树的高度缩减。\n\n```\nprivate int getID(int p) {\n    if (p < 0 || p >= parent.length)\n        throw new IllegalArgumentException(\"p is out of bound\");\n    while (p != parent[p]) {\n        parent[p] = parent[parent[p]];  // 路径压缩\n        p = parent[p];\n    }\n    return p;\n}\n```\n\n使用递归直接将，每个元素直接连接在集合的根节点上\n\n```\nprivate int getID2(int p) {\n    if (p < 0 || p >= parent.length)\n        throw new IllegalArgumentException(\"p is out of bound\");\n    if(p != parent[p]) {\n        parent[p] = getID2(p);\n    }\n    return parent[p];\n}\n```","source":"_posts/学习笔记/数据结构与算法/并查集.md","raw":"---\ntitle: 并查集\ndate: 2020-07-31 13:24:46\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-Union-Find\n---\n\n## 概述\n\n### 并查集定义\n\n**并查集(Union-Find Set)**，顾名思义，是实现快速合并集合与查询元素所在集合的数据结构。\n\n### 基本操作\n\n1. 合并两个不相交集合**（Union）**\n2. 判断两个元素是否属于同一个集合**（Find）**\n\n基于此，可以实现一个并查集的Java接口如下：\n\n```\npublic interface UF {\n    int getSize();  // 获取元素个数\n    boolean find(int p, int q); // 判断两个元素是否属于同一集合\n    void union(int p, int q);   // 合并两个不相交的集合\n}\n```\n\n\n\n## 实现思路\n\n### Quick Find概述\n\n如图，使用一个数组id标识不同元素所属的集合。\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickfind.jpg)\n\n则并查集的实现逻辑如下。由于可以直接通过索引得到某元素所属的集合，则**Find操作的时间复杂度为O(1)**，但Union操作由于要遍历整个数组，因此**时间复杂度为O(n)**。\n\n```\npublic class UnionFind1 implements UF {\n\n    private int[] id;\n\n    public UnionFind1(int size) {\n        id = new int[size];\n        for(int i=0;i<id.length;i++)\n            id[i] = i;\n    }\n\n    @Override\n    public int getSize() {\n        return id.length;\n    }\n\n    // 获取元素所属集合\n    private int getID(int p) {\n        if (p < 0 || p >=id.length)\n            throw new IllegalArgumentException(\"p is illegal\");\n        return id[p];\n    }\n\n    // 查看元素p和元素q是否所属同一个集合\n    @Override\n    public boolean find(int p, int q) {\n        return getID(p) == getID(q);\n    }\n\n    // 合并元素p和元素q\n    @Override\n    public void union(int p, int q) {\n        int pID = getID(p);\n        int qID = getID(q);\n        if(pID == qID)\n            return;\n        for (int i=0;i<id.length;i++) {\n            if(id[i] == qID)\n                id[i] = pID;\n        }\n    }\n}\n```\n\n### Quick Union概述\n\n很显然，之前的Quick Find中查找是否属于同一元素速度很快，而Quick Union则着重于合并的速度。\n\n如图所示，Quick Union的设计思想采用树（森林）进行。每个集合都使用一个根节点进行标识（根节点的父节点为其自身），**在具体存储时，也可以使用一个parent数组来标识其父节点的位置**。因此：\n\n**Find操作只需要找到对应节点的根节点判断是否相等即可；**\n\n**Union操作只需要将一个元素的根节点指向Union操作的另一元素的根节点即可**，具体如图将元素1与元素2进行合并的操作示意\n\n![](http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickunion.jpg)\n\n具体实现如下（略去了不关键的几个方法）：这种方法下，find与union操作的时间复杂度都为O(h)，h为树的深度。\n\n```\npublic class UnionFind2 implements UF {\n\n    private int[] parent;\n\n    public UnionFind2(int size) {\n        parent = new int[size];\n\n        for (int i=0;i<size;i++) {\n            parent[i] = i;\n        }\n    }\n\n    private int getID(int p) {\n        if (p < 0 || p >= parent.length)\n            throw new IllegalArgumentException(\"p is out of bound\");\n        while (p != parent[p])\n            p = parent[p];\n        return p;\n    }\n\n    @Override\n    public boolean find(int p, int q) {\n        return getID(p) == getID(q);\n    }\n\n    @Override\n    public void union(int p, int q) {\n        int pRoot = getID(p);\n        int qRoot = getID(q);\n\n        if(pRoot == qRoot)\n            return;\n\n        parent[pRoot] = qRoot;\n    }\n}\n```\n\n### 优化\n\nQuick Union的效率与树的深度有关，因此需要尽可能的缩短树的深度，从而提高效率。\n\n#### 思路1：记录每棵树的节点个数\n\n节点个数多的树**大概率**深度高，因此让节点个数少的集合的根节点指向节点个数大的根节点即可。代码逻辑如下（sz[i]表示以i为根的集合中元素个数）\n\n```\n@Override\npublic void union(int p, int q) {\n    int pRoot = getID(p);\n    int qRoot = getID(q);\n\n    if(pRoot == qRoot)\n        return;\n\n    if(sz[pRoot] < sz[qRoot]) {\n        parent[pRoot] = qRoot;\n        sz[qRoot] += sz[pRoot];\n    }\n    else {\n        parent[qRoot] = pRoot;\n        sz[pRoot] += sz[qRoot];\n    }\n}\n```\n\n#### 思路2：记录没棵树的深度\n\n思路1的主要漏洞在于节点个数多的树未必深度大，因此可以通过记录树的深度来进行判断，代码逻辑如下（rank[i]表示以i为根的集合的层数）\n\n```\npublic void union(int p, int q) {\n    int pRoot = getID(p);\n    int qRoot = getID(q);\n\n    if(pRoot == qRoot)\n        return;\n\n    if(rank[pRoot] < rank[qRoot]) {\n        parent[pRoot] = qRoot;\n    }\n    else if(rank[qRoot] < rank[pRoot]){\n        parent[qRoot] = pRoot;\n    }\n    else {\n        parent[pRoot] = qRoot;\n        rank[qRoot]++;\n    }\n}\n```\n\n#### 思路3：路径压缩（Path Compression）\n\n使用`parent[p] = parent[parent[p]]`这种逻辑在每次获取根节点时将树的高度缩减。\n\n```\nprivate int getID(int p) {\n    if (p < 0 || p >= parent.length)\n        throw new IllegalArgumentException(\"p is out of bound\");\n    while (p != parent[p]) {\n        parent[p] = parent[parent[p]];  // 路径压缩\n        p = parent[p];\n    }\n    return p;\n}\n```\n\n使用递归直接将，每个元素直接连接在集合的根节点上\n\n```\nprivate int getID2(int p) {\n    if (p < 0 || p >= parent.length)\n        throw new IllegalArgumentException(\"p is out of bound\");\n    if(p != parent[p]) {\n        parent[p] = getID2(p);\n    }\n    return parent[p];\n}\n```","slug":"学习笔记/数据结构与算法/并查集","published":1,"updated":"2021-01-11T04:52:42.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moav0040rwjsbmkbd4j3","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"并查集定义\"><a href=\"#并查集定义\" class=\"headerlink\" title=\"并查集定义\"></a>并查集定义</h3><p><strong>并查集(Union-Find Set)</strong>，顾名思义，是实现快速合并集合与查询元素所在集合的数据结构。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ol>\n<li>合并两个不相交集合<strong>（Union）</strong></li>\n<li>判断两个元素是否属于同一个集合<strong>（Find）</strong></li>\n</ol>\n<p>基于此，可以实现一个并查集的Java接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;  <span class=\"hljs-comment\">// 获取元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span></span>; <span class=\"hljs-comment\">// 判断两个元素是否属于同一集合</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span></span>;   <span class=\"hljs-comment\">// 合并两个不相交的集合</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"Quick-Find概述\"><a href=\"#Quick-Find概述\" class=\"headerlink\" title=\"Quick Find概述\"></a>Quick Find概述</h3><p>如图，使用一个数组id标识不同元素所属的集合。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickfind.jpg\" alt=\"\"></p>\n<p>则并查集的实现逻辑如下。由于可以直接通过索引得到某元素所属的集合，则<strong>Find操作的时间复杂度为O(1)</strong>，但Union操作由于要遍历整个数组，因此<strong>时间复杂度为O(n)</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnionFind1</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] id;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UnionFind1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> size)</span> </span>&#123;<br>        id = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[size];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;id.length;i++)<br>            id[i] = i;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取元素所属集合</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getID</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;=id.length)<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is illegal\"</span>);<br>        <span class=\"hljs-keyword\">return</span> id[p];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 查看元素p和元素q是否所属同一个集合</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> getID(p) == getID(q);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 合并元素p和元素q</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> pID = getID(p);<br>        <span class=\"hljs-keyword\">int</span> qID = getID(q);<br>        <span class=\"hljs-keyword\">if</span>(pID == qID)<br>            <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;id.length;i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(id[i] == qID)<br>                id[i] = pID;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Quick-Union概述\"><a href=\"#Quick-Union概述\" class=\"headerlink\" title=\"Quick Union概述\"></a>Quick Union概述</h3><p>很显然，之前的Quick Find中查找是否属于同一元素速度很快，而Quick Union则着重于合并的速度。</p>\n<p>如图所示，Quick Union的设计思想采用树（森林）进行。每个集合都使用一个根节点进行标识（根节点的父节点为其自身），<strong>在具体存储时，也可以使用一个parent数组来标识其父节点的位置</strong>。因此：</p>\n<p><strong>Find操作只需要找到对应节点的根节点判断是否相等即可；</strong></p>\n<p><strong>Union操作只需要将一个元素的根节点指向Union操作的另一元素的根节点即可</strong>，具体如图将元素1与元素2进行合并的操作示意</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickunion.jpg\" alt=\"\"></p>\n<p>具体实现如下（略去了不关键的几个方法）：这种方法下，find与union操作的时间复杂度都为O(h)，h为树的深度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnionFind2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] parent;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UnionFind2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> size)</span> </span>&#123;<br>        parent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[size];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;size;i++) &#123;<br>            parent[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getID</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= parent.length)<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>        <span class=\"hljs-keyword\">while</span> (p != parent[p])<br>            p = parent[p];<br>        <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> getID(p) == getID(q);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> pRoot = getID(p);<br>        <span class=\"hljs-keyword\">int</span> qRoot = getID(q);<br><br>        <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>            <span class=\"hljs-keyword\">return</span>;<br><br>        parent[pRoot] = qRoot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>Quick Union的效率与树的深度有关，因此需要尽可能的缩短树的深度，从而提高效率。</p>\n<h4 id=\"思路1：记录每棵树的节点个数\"><a href=\"#思路1：记录每棵树的节点个数\" class=\"headerlink\" title=\"思路1：记录每棵树的节点个数\"></a>思路1：记录每棵树的节点个数</h4><p>节点个数多的树<strong>大概率</strong>深度高，因此让节点个数少的集合的根节点指向节点个数大的根节点即可。代码逻辑如下（sz[i]表示以i为根的集合中元素个数）</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">@Override<br>public void <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span>(<span class=\"hljs-title\">int</span> <span class=\"hljs-title\">p</span>, <span class=\"hljs-title\">int</span> <span class=\"hljs-title\">q</span>) &#123;</span><br>    int pRoot = getID(p);<br>    int qRoot = getID(q);<br><br>    <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-keyword\">if</span>(sz[pRoot] &lt; sz[qRoot]) &#123;<br>        parent[pRoot] = qRoot;<br>        sz[qRoot] += sz[pRoot];<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        parent[qRoot] = pRoot;<br>        sz[pRoot] += sz[qRoot];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路2：记录没棵树的深度\"><a href=\"#思路2：记录没棵树的深度\" class=\"headerlink\" title=\"思路2：记录没棵树的深度\"></a>思路2：记录没棵树的深度</h4><p>思路1的主要漏洞在于节点个数多的树未必深度大，因此可以通过记录树的深度来进行判断，代码逻辑如下（rank[i]表示以i为根的集合的层数）</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">public void <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span>(<span class=\"hljs-title\">int</span> <span class=\"hljs-title\">p</span>, <span class=\"hljs-title\">int</span> <span class=\"hljs-title\">q</span>) &#123;</span><br>    int pRoot = getID(p);<br>    int qRoot = getID(q);<br><br>    <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-keyword\">if</span>(rank[pRoot] &lt; rank[qRoot]) &#123;<br>        parent[pRoot] = qRoot;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(rank[qRoot] &lt; rank[pRoot])&#123;<br>        parent[qRoot] = pRoot;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        parent[pRoot] = qRoot;<br>        rank[qRoot]++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路3：路径压缩（Path-Compression）\"><a href=\"#思路3：路径压缩（Path-Compression）\" class=\"headerlink\" title=\"思路3：路径压缩（Path Compression）\"></a>思路3：路径压缩（Path Compression）</h4><p>使用<code>parent[p] = parent[parent[p]]</code>这种逻辑在每次获取根节点时将树的高度缩减。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> getID(<span class=\"hljs-keyword\">int</span> p) &#123;<br>    <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= <span class=\"hljs-keyword\">parent</span>.length)<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">parent</span>[p]) &#123;<br>        <span class=\"hljs-keyword\">parent</span>[p] = <span class=\"hljs-keyword\">parent</span>[<span class=\"hljs-keyword\">parent</span>[p]];  <span class=\"hljs-comment\">// 路径压缩</span><br>        p = <span class=\"hljs-keyword\">parent</span>[p];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用递归直接将，每个元素直接连接在集合的根节点上</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> getID2(<span class=\"hljs-keyword\">int</span> p) &#123;<br>    <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= <span class=\"hljs-keyword\">parent</span>.length)<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-keyword\">parent</span>[p]) &#123;<br>        <span class=\"hljs-keyword\">parent</span>[p] = getID2(p);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">parent</span>[p];<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"并查集定义\"><a href=\"#并查集定义\" class=\"headerlink\" title=\"并查集定义\"></a>并查集定义</h3><p><strong>并查集(Union-Find Set)</strong>，顾名思义，是实现快速合并集合与查询元素所在集合的数据结构。</p>\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><ol>\n<li>合并两个不相交集合<strong>（Union）</strong></li>\n<li>判断两个元素是否属于同一个集合<strong>（Find）</strong></li>\n</ol>\n<p>基于此，可以实现一个并查集的Java接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span></span>;  <span class=\"hljs-comment\">// 获取元素个数</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span></span>; <span class=\"hljs-comment\">// 判断两个元素是否属于同一集合</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span></span>;   <span class=\"hljs-comment\">// 合并两个不相交的集合</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"Quick-Find概述\"><a href=\"#Quick-Find概述\" class=\"headerlink\" title=\"Quick Find概述\"></a>Quick Find概述</h3><p>如图，使用一个数组id标识不同元素所属的集合。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickfind.jpg\" alt=\"\"></p>\n<p>则并查集的实现逻辑如下。由于可以直接通过索引得到某元素所属的集合，则<strong>Find操作的时间复杂度为O(1)</strong>，但Union操作由于要遍历整个数组，因此<strong>时间复杂度为O(n)</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnionFind1</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] id;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UnionFind1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> size)</span> </span>&#123;<br>        id = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[size];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;id.length;i++)<br>            id[i] = i;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getSize</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> id.length;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 获取元素所属集合</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getID</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;=id.length)<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is illegal\"</span>);<br>        <span class=\"hljs-keyword\">return</span> id[p];<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 查看元素p和元素q是否所属同一个集合</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> getID(p) == getID(q);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 合并元素p和元素q</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> pID = getID(p);<br>        <span class=\"hljs-keyword\">int</span> qID = getID(q);<br>        <span class=\"hljs-keyword\">if</span>(pID == qID)<br>            <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;id.length;i++) &#123;<br>            <span class=\"hljs-keyword\">if</span>(id[i] == qID)<br>                id[i] = pID;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Quick-Union概述\"><a href=\"#Quick-Union概述\" class=\"headerlink\" title=\"Quick Union概述\"></a>Quick Union概述</h3><p>很显然，之前的Quick Find中查找是否属于同一元素速度很快，而Quick Union则着重于合并的速度。</p>\n<p>如图所示，Quick Union的设计思想采用树（森林）进行。每个集合都使用一个根节点进行标识（根节点的父节点为其自身），<strong>在具体存储时，也可以使用一个parent数组来标识其父节点的位置</strong>。因此：</p>\n<p><strong>Find操作只需要找到对应节点的根节点判断是否相等即可；</strong></p>\n<p><strong>Union操作只需要将一个元素的根节点指向Union操作的另一元素的根节点即可</strong>，具体如图将元素1与元素2进行合并的操作示意</p>\n<p><img src=\"http://cdn.ziyedy.top/image/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%B9%B6%E6%9F%A5%E9%9B%86/quickunion.jpg\" alt=\"\"></p>\n<p>具体实现如下（略去了不关键的几个方法）：这种方法下，find与union操作的时间复杂度都为O(h)，h为树的深度。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnionFind2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">UF</span> </span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span>[] parent;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">UnionFind2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> size)</span> </span>&#123;<br>        parent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[size];<br><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;size;i++) &#123;<br>            parent[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getID</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= parent.length)<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>        <span class=\"hljs-keyword\">while</span> (p != parent[p])<br>            p = parent[p];<br>        <span class=\"hljs-keyword\">return</span> p;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">find</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> getID(p) == getID(q);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">union</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> p, <span class=\"hljs-keyword\">int</span> q)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">int</span> pRoot = getID(p);<br>        <span class=\"hljs-keyword\">int</span> qRoot = getID(q);<br><br>        <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>            <span class=\"hljs-keyword\">return</span>;<br><br>        parent[pRoot] = qRoot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>Quick Union的效率与树的深度有关，因此需要尽可能的缩短树的深度，从而提高效率。</p>\n<h4 id=\"思路1：记录每棵树的节点个数\"><a href=\"#思路1：记录每棵树的节点个数\" class=\"headerlink\" title=\"思路1：记录每棵树的节点个数\"></a>思路1：记录每棵树的节点个数</h4><p>节点个数多的树<strong>大概率</strong>深度高，因此让节点个数少的集合的根节点指向节点个数大的根节点即可。代码逻辑如下（sz[i]表示以i为根的集合中元素个数）</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">@Override<br>public void <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span>(<span class=\"hljs-title\">int</span> <span class=\"hljs-title\">p</span>, <span class=\"hljs-title\">int</span> <span class=\"hljs-title\">q</span>) &#123;</span><br>    int pRoot = getID(p);<br>    int qRoot = getID(q);<br><br>    <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-keyword\">if</span>(sz[pRoot] &lt; sz[qRoot]) &#123;<br>        parent[pRoot] = qRoot;<br>        sz[qRoot] += sz[pRoot];<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        parent[qRoot] = pRoot;<br>        sz[pRoot] += sz[qRoot];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路2：记录没棵树的深度\"><a href=\"#思路2：记录没棵树的深度\" class=\"headerlink\" title=\"思路2：记录没棵树的深度\"></a>思路2：记录没棵树的深度</h4><p>思路1的主要漏洞在于节点个数多的树未必深度大，因此可以通过记录树的深度来进行判断，代码逻辑如下（rank[i]表示以i为根的集合的层数）</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crystal\">public void <span class=\"hljs-class\"><span class=\"hljs-keyword\">union</span>(<span class=\"hljs-title\">int</span> <span class=\"hljs-title\">p</span>, <span class=\"hljs-title\">int</span> <span class=\"hljs-title\">q</span>) &#123;</span><br>    int pRoot = getID(p);<br>    int qRoot = getID(q);<br><br>    <span class=\"hljs-keyword\">if</span>(pRoot == qRoot)<br>        <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-keyword\">if</span>(rank[pRoot] &lt; rank[qRoot]) &#123;<br>        parent[pRoot] = qRoot;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(rank[qRoot] &lt; rank[pRoot])&#123;<br>        parent[qRoot] = pRoot;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> &#123;<br>        parent[pRoot] = qRoot;<br>        rank[qRoot]++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"思路3：路径压缩（Path-Compression）\"><a href=\"#思路3：路径压缩（Path-Compression）\" class=\"headerlink\" title=\"思路3：路径压缩（Path Compression）\"></a>思路3：路径压缩（Path Compression）</h4><p>使用<code>parent[p] = parent[parent[p]]</code>这种逻辑在每次获取根节点时将树的高度缩减。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> getID(<span class=\"hljs-keyword\">int</span> p) &#123;<br>    <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= <span class=\"hljs-keyword\">parent</span>.length)<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>    <span class=\"hljs-keyword\">while</span> (p != <span class=\"hljs-keyword\">parent</span>[p]) &#123;<br>        <span class=\"hljs-keyword\">parent</span>[p] = <span class=\"hljs-keyword\">parent</span>[<span class=\"hljs-keyword\">parent</span>[p]];  <span class=\"hljs-comment\">// 路径压缩</span><br>        p = <span class=\"hljs-keyword\">parent</span>[p];<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用递归直接将，每个元素直接连接在集合的根节点上</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> getID2(<span class=\"hljs-keyword\">int</span> p) &#123;<br>    <span class=\"hljs-keyword\">if</span> (p &lt; <span class=\"hljs-number\">0</span> || p &gt;= <span class=\"hljs-keyword\">parent</span>.length)<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> IllegalArgumentException(<span class=\"hljs-string\">\"p is out of bound\"</span>);<br>    <span class=\"hljs-keyword\">if</span>(p != <span class=\"hljs-keyword\">parent</span>[p]) &#123;<br>        <span class=\"hljs-keyword\">parent</span>[p] = getID2(p);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">parent</span>[p];<br>&#125;<br></code></pre></td></tr></table></figure>"},{"title":"线段树","date":"2020-07-31T01:24:46.000Z","fileName":"ds-segment-tree","_content":"\n## 概述\n\n线段树，也叫区间树，是一个完全二叉树，它在各个节点保存一条线段（即“子数组”），因而常用于解决**数列维护问题**，它基本能保证每个操作的复杂度为O(lgN)。\n\n### 特点\n\n1、线段树是一棵高度平衡的二叉树，通常为完全二叉树（叶子节点不一定在同一层，但可以通过将最后一层非叶子节点的值视为null进行构造）\n\n2、线段树的每一个结点都代表一个区间。父结点所代表的区间是两个子结点的和（或者其他操作，可以自己定义）。兄弟结点所代表的区间相互不重叠。根结点代表整个区间\n\n### 实现思路\n\n线段树是一种基于分治算法的二叉树。每个结点维护一个区间，以及在该区间内的数据信息。在当前结点，它的区间是[left,right]，则它的两个子结点的区间分别为[left, mid]，[mid+1, right]。由于采用了分治的思想，在进行操作时每一层至多访问两个结点，极大优化了效率。\n\n同时，根据完全二叉树的规律，**如果原始数组有n个元素，则要使用数组对线段树进行存储的话，需要4n的空间**。\n\n### 主要方法\n\n1、构造线段树\n\n2、区间查询\n\n3、区间修改\n\n\n\n## 实现\n\n### 基本实现\n\n1、构造用于定义线段树计算方法的接口\n\n```\npublic interface Merger<E> {\n    E merge(E a, E b);\n}\n```\n\n2、线段树类的基本实现\n\n```\npublic class SegmentTree<E> {\n\n    private E[] tree;\t// 存储线段树\n    private E[] data;\t// 存储原始数据\n    private Merger<E> merger;\t// 定义线段树计算方法\n\n    public SegmentTree(E[] arr, Merger<E> merger) {\n\n        this.merger = merger;\n\n        data = (E[])new Object[arr.length];\n        for (int i = 0; i< arr.length; i++) {\n            data[i] = arr[i];\n        }\n\n        tree = (E[])new Object[4 * arr.length];\n        buildSegmentTree(0, 0, data.length-1);\t// 构造线段树\n\n    }\n\n\t// 获取左孩子索引\n    private int leftChild(int index) {\n        return 2 * index + 1;\n    }\n\t\n\t// 获取右孩子索引\n    private int rightChild(int index) {\n        return 2 * index + 2;\n    }\n\n}\n```\n\n### 构造线段树\n\n使用递归构造线段树，整个过程有点像使用一个有序数组构造二叉搜索树。\n\n```\nprivate void buildSegmentTree(int treeIndex, int l, int r) {\n    if(l == r) {\n        tree[treeIndex] = data[l];\n        return;\n    }\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    int mid = l + (r - l) / 2;\n    buildSegmentTree(leftTreeIndex, l, mid);\n    buildSegmentTree(rightTreeIndex, mid+1, r);\n    tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);\n}\n```\n\n### 区间查询\n\n也是使用递归进行查询，分三种情况进行讨论。\n\n```\n// 返回[queryL, queryR]的值\npublic E query(int queryL, int queryR) {\n    if(queryL < 0 || queryL >= data.length ||\n        queryR < 0 || queryR >= data.length || queryL > queryR) {\n        throw new IllegalArgumentException(\"Index is illegal\");\n    }\n    return query(0, 0, data.length-1, queryL, queryR);\n}\n\nprivate E query(int treeIndex, int l, int r, int queryL, int queryR) {\n    if(l == queryL && r == queryR) {\n        return tree[treeIndex];\n    }\n    int mid = l+(r-l)/2;\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    if(queryL >= mid + 1) {\n        return query(rightTreeIndex, mid+1, r, queryL, queryR);\n    }\n    else if(queryR <= mid) {\n        return query(leftTreeIndex, l, mid, queryL, queryR);\n    }\n    E leftResult = query(leftTreeIndex, l, mid, queryL, mid);\n    E rightResult = query(rightTreeIndex, mid+1, r, mid+1, queryR);\n    return merger.merge(leftResult, rightResult);\n}\n```\n\n### 区间修改\n\n```\n// 将index位置的值，更新为e\npublic void set(int index, E e) {\n    if(index < 0 || index >= data.length)\n        throw new IllegalArgumentException(\"Index is illegal\");\n    data[index] = e;\n    set(0, 0, data.length-1, index, e);\n}\n\n// 在以treeIndex为根的线段树中更新index的值为e\nprivate void set(int treeIndex, int l, int r, int index, E e) {\n    if(l == r) {\n        tree[treeIndex] = e;\n        return;\n    }\n    int mid = l + (r-l)/2;\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    if(index >= mid+1)\n        set(rightTreeIndex, mid+1, r, index, e);\n    else\n        set(leftTreeIndex, l, mid, index, e);\n    tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);\n}\n```\n\n\n","source":"_posts/学习笔记/数据结构与算法/线段树.md","raw":"---\ntitle: 线段树\ndate: 2020-07-31 09:24:46\ntags:\n\t- 数据结构\ncategories:\n\t- 学习笔记\n\t- 数据结构与算法\nfileName: ds-segment-tree\n---\n\n## 概述\n\n线段树，也叫区间树，是一个完全二叉树，它在各个节点保存一条线段（即“子数组”），因而常用于解决**数列维护问题**，它基本能保证每个操作的复杂度为O(lgN)。\n\n### 特点\n\n1、线段树是一棵高度平衡的二叉树，通常为完全二叉树（叶子节点不一定在同一层，但可以通过将最后一层非叶子节点的值视为null进行构造）\n\n2、线段树的每一个结点都代表一个区间。父结点所代表的区间是两个子结点的和（或者其他操作，可以自己定义）。兄弟结点所代表的区间相互不重叠。根结点代表整个区间\n\n### 实现思路\n\n线段树是一种基于分治算法的二叉树。每个结点维护一个区间，以及在该区间内的数据信息。在当前结点，它的区间是[left,right]，则它的两个子结点的区间分别为[left, mid]，[mid+1, right]。由于采用了分治的思想，在进行操作时每一层至多访问两个结点，极大优化了效率。\n\n同时，根据完全二叉树的规律，**如果原始数组有n个元素，则要使用数组对线段树进行存储的话，需要4n的空间**。\n\n### 主要方法\n\n1、构造线段树\n\n2、区间查询\n\n3、区间修改\n\n\n\n## 实现\n\n### 基本实现\n\n1、构造用于定义线段树计算方法的接口\n\n```\npublic interface Merger<E> {\n    E merge(E a, E b);\n}\n```\n\n2、线段树类的基本实现\n\n```\npublic class SegmentTree<E> {\n\n    private E[] tree;\t// 存储线段树\n    private E[] data;\t// 存储原始数据\n    private Merger<E> merger;\t// 定义线段树计算方法\n\n    public SegmentTree(E[] arr, Merger<E> merger) {\n\n        this.merger = merger;\n\n        data = (E[])new Object[arr.length];\n        for (int i = 0; i< arr.length; i++) {\n            data[i] = arr[i];\n        }\n\n        tree = (E[])new Object[4 * arr.length];\n        buildSegmentTree(0, 0, data.length-1);\t// 构造线段树\n\n    }\n\n\t// 获取左孩子索引\n    private int leftChild(int index) {\n        return 2 * index + 1;\n    }\n\t\n\t// 获取右孩子索引\n    private int rightChild(int index) {\n        return 2 * index + 2;\n    }\n\n}\n```\n\n### 构造线段树\n\n使用递归构造线段树，整个过程有点像使用一个有序数组构造二叉搜索树。\n\n```\nprivate void buildSegmentTree(int treeIndex, int l, int r) {\n    if(l == r) {\n        tree[treeIndex] = data[l];\n        return;\n    }\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    int mid = l + (r - l) / 2;\n    buildSegmentTree(leftTreeIndex, l, mid);\n    buildSegmentTree(rightTreeIndex, mid+1, r);\n    tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);\n}\n```\n\n### 区间查询\n\n也是使用递归进行查询，分三种情况进行讨论。\n\n```\n// 返回[queryL, queryR]的值\npublic E query(int queryL, int queryR) {\n    if(queryL < 0 || queryL >= data.length ||\n        queryR < 0 || queryR >= data.length || queryL > queryR) {\n        throw new IllegalArgumentException(\"Index is illegal\");\n    }\n    return query(0, 0, data.length-1, queryL, queryR);\n}\n\nprivate E query(int treeIndex, int l, int r, int queryL, int queryR) {\n    if(l == queryL && r == queryR) {\n        return tree[treeIndex];\n    }\n    int mid = l+(r-l)/2;\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    if(queryL >= mid + 1) {\n        return query(rightTreeIndex, mid+1, r, queryL, queryR);\n    }\n    else if(queryR <= mid) {\n        return query(leftTreeIndex, l, mid, queryL, queryR);\n    }\n    E leftResult = query(leftTreeIndex, l, mid, queryL, mid);\n    E rightResult = query(rightTreeIndex, mid+1, r, mid+1, queryR);\n    return merger.merge(leftResult, rightResult);\n}\n```\n\n### 区间修改\n\n```\n// 将index位置的值，更新为e\npublic void set(int index, E e) {\n    if(index < 0 || index >= data.length)\n        throw new IllegalArgumentException(\"Index is illegal\");\n    data[index] = e;\n    set(0, 0, data.length-1, index, e);\n}\n\n// 在以treeIndex为根的线段树中更新index的值为e\nprivate void set(int treeIndex, int l, int r, int index, E e) {\n    if(l == r) {\n        tree[treeIndex] = e;\n        return;\n    }\n    int mid = l + (r-l)/2;\n    int leftTreeIndex = leftChild(treeIndex);\n    int rightTreeIndex = rightChild(treeIndex);\n    if(index >= mid+1)\n        set(rightTreeIndex, mid+1, r, index, e);\n    else\n        set(leftTreeIndex, l, mid, index, e);\n    tree[treeIndex] = merger.merge(tree[leftTreeIndex], tree[rightTreeIndex]);\n}\n```\n\n\n","slug":"学习笔记/数据结构与算法/线段树","published":1,"updated":"2021-01-11T04:52:50.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moaw0044rwjs1k817cdg","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线段树，也叫区间树，是一个完全二叉树，它在各个节点保存一条线段（即“子数组”），因而常用于解决<strong>数列维护问题</strong>，它基本能保证每个操作的复杂度为O(lgN)。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、线段树是一棵高度平衡的二叉树，通常为完全二叉树（叶子节点不一定在同一层，但可以通过将最后一层非叶子节点的值视为null进行构造）</p>\n<p>2、线段树的每一个结点都代表一个区间。父结点所代表的区间是两个子结点的和（或者其他操作，可以自己定义）。兄弟结点所代表的区间相互不重叠。根结点代表整个区间</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>线段树是一种基于分治算法的二叉树。每个结点维护一个区间，以及在该区间内的数据信息。在当前结点，它的区间是[left,right]，则它的两个子结点的区间分别为[left, mid]，[mid+1, right]。由于采用了分治的思想，在进行操作时每一层至多访问两个结点，极大优化了效率。</p>\n<p>同时，根据完全二叉树的规律，<strong>如果原始数组有n个元素，则要使用数组对线段树进行存储的话，需要4n的空间</strong>。</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><p>1、构造线段树</p>\n<p>2、区间查询</p>\n<p>3、区间修改</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h3><p>1、构造用于定义线段树计算方法的接口</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Merger&lt;E&gt; &#123;<br>    E merge(E a, E b);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、线段树类的基本实现</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SegmentTree</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> E[] tree;\t<span class=\"hljs-comment\">// 存储线段树</span><br>    <span class=\"hljs-keyword\">private</span> E[] data;\t<span class=\"hljs-comment\">// 存储原始数据</span><br>    <span class=\"hljs-keyword\">private</span> Merger&lt;E&gt; merger;\t<span class=\"hljs-comment\">// 定义线段树计算方法</span><br><br>    <span class=\"hljs-keyword\">public</span> SegmentTree(E[] arr, Merger&lt;E&gt; merger) &#123;<br><br>        <span class=\"hljs-keyword\">this</span>.merger = merger;<br><br>        data = (E[])new Object[arr.length];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; arr.length; i++) &#123;<br>            data[i] = arr[i];<br>        &#125;<br><br>        tree = (E[])new Object[<span class=\"hljs-number\">4</span> * arr.length];<br>        buildSegmentTree(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, data.length<span class=\"hljs-number\">-1</span>);\t<span class=\"hljs-comment\">// 构造线段树</span><br><br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获取左孩子索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> leftChild(<span class=\"hljs-built_in\">int</span> index) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>\t<br>\t<span class=\"hljs-comment\">// 获取右孩子索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> rightChild(<span class=\"hljs-built_in\">int</span> index) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构造线段树\"><a href=\"#构造线段树\" class=\"headerlink\" title=\"构造线段树\"></a>构造线段树</h3><p>使用递归构造线段树，整个过程有点像使用一个有序数组构造二叉搜索树。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">treeIndex</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">l</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">r</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(l<span class=\"hljs-operator\"> == </span>r) &#123;<br>        tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">treeIndex</span>]</span> = data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">l</span>]</span>;<br>        return;<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> leftTreeIndex = left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">treeIndex</span>)</span>;<br>    <span class=\"hljs-built_in\">int</span> rightTreeIndex = right<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">treeIndex</span>)</span>;<br>    <span class=\"hljs-built_in\">int</span> mid = l + (r - l)<span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">2</span>;<br>    build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">leftTreeIndex</span>, <span class=\"hljs-params\">l</span>, <span class=\"hljs-params\">mid</span>)</span>;<br>    build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">rightTreeIndex</span>, <span class=\"hljs-params\">mid</span>+1, <span class=\"hljs-params\">r</span>)</span>;<br>    tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">treeIndex</span>]</span> = merger.merge(tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">leftTreeIndex</span>]</span>, tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">rightTreeIndex</span>]</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"区间查询\"><a href=\"#区间查询\" class=\"headerlink\" title=\"区间查询\"></a>区间查询</h3><p>也是使用递归进行查询，分三种情况进行讨论。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 返回[queryL, queryR]的值</span><br><span class=\"hljs-keyword\">public</span> E query(<span class=\"hljs-built_in\">int</span> queryL, <span class=\"hljs-built_in\">int</span> queryR) &#123;<br>    <span class=\"hljs-keyword\">if</span>(queryL &lt; <span class=\"hljs-number\">0</span> || queryL &gt;= data.length ||<br>        queryR &lt; <span class=\"hljs-number\">0</span> || queryR &gt;= data.length || queryL &gt; queryR) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Index is illegal\"</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> query(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, data.length<span class=\"hljs-number\">-1</span>, queryL, queryR);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> E query(<span class=\"hljs-built_in\">int</span> treeIndex, <span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> queryL, <span class=\"hljs-built_in\">int</span> queryR) &#123;<br>    <span class=\"hljs-keyword\">if</span>(l == queryL &amp;&amp; r == queryR) &#123;<br>        <span class=\"hljs-keyword\">return</span> tree[treeIndex];<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> mid = l+(r-l)/<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-built_in\">int</span> leftTreeIndex = leftChild(treeIndex);<br>    <span class=\"hljs-built_in\">int</span> rightTreeIndex = rightChild(treeIndex);<br>    <span class=\"hljs-keyword\">if</span>(queryL &gt;= mid + <span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> query(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, queryL, queryR);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(queryR &lt;= mid) &#123;<br>        <span class=\"hljs-keyword\">return</span> query(leftTreeIndex, l, mid, queryL, queryR);<br>    &#125;<br>    E leftResult = query(leftTreeIndex, l, mid, queryL, mid);<br>    E rightResult = query(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, mid+<span class=\"hljs-number\">1</span>, queryR);<br>    <span class=\"hljs-keyword\">return</span> merger.merge(leftResult, rightResult);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"区间修改\"><a href=\"#区间修改\" class=\"headerlink\" title=\"区间修改\"></a>区间修改</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">// 将<span class=\"hljs-keyword\">index</span>位置的值，更新为<span class=\"hljs-built_in\">e</span><br><span class=\"hljs-keyword\">public</span> void <span class=\"hljs-keyword\">set</span>(int <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">E</span> <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">index</span> &lt; <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">index</span> &gt;= data.<span class=\"hljs-built_in\">length</span>)<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Index is illegal\"</span>);<br>    data[<span class=\"hljs-keyword\">index</span>] = <span class=\"hljs-built_in\">e</span>;<br>    set(0, 0, data.length-1, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br><br>// 在以treeIndex为根的线段树中更新<span class=\"hljs-keyword\">index</span>的值为<span class=\"hljs-built_in\">e</span><br><span class=\"hljs-keyword\">private</span> void <span class=\"hljs-keyword\">set</span>(int treeIndex, int l, int r, int <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">E</span> <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(l == r) &#123;<br>        tree[treeIndex] = <span class=\"hljs-built_in\">e</span>;<br>        return;<br>    &#125;<br>    int mid = l + (r-l)/2;<br>    int leftTreeIndex = leftChild(treeIndex);<br>    int rightTreeIndex = rightChild(treeIndex);<br>    if(<span class=\"hljs-keyword\">index</span> &gt;= mid+<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">set</span>(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>    else<br>        set(leftTreeIndex, l, mid, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>    tree[treeIndex] = merger.<span class=\"hljs-keyword\">merge</span>(tree[leftTreeIndex], tree[rightTreeIndex]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线段树，也叫区间树，是一个完全二叉树，它在各个节点保存一条线段（即“子数组”），因而常用于解决<strong>数列维护问题</strong>，它基本能保证每个操作的复杂度为O(lgN)。</p>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><p>1、线段树是一棵高度平衡的二叉树，通常为完全二叉树（叶子节点不一定在同一层，但可以通过将最后一层非叶子节点的值视为null进行构造）</p>\n<p>2、线段树的每一个结点都代表一个区间。父结点所代表的区间是两个子结点的和（或者其他操作，可以自己定义）。兄弟结点所代表的区间相互不重叠。根结点代表整个区间</p>\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><p>线段树是一种基于分治算法的二叉树。每个结点维护一个区间，以及在该区间内的数据信息。在当前结点，它的区间是[left,right]，则它的两个子结点的区间分别为[left, mid]，[mid+1, right]。由于采用了分治的思想，在进行操作时每一层至多访问两个结点，极大优化了效率。</p>\n<p>同时，根据完全二叉树的规律，<strong>如果原始数组有n个元素，则要使用数组对线段树进行存储的话，需要4n的空间</strong>。</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><p>1、构造线段树</p>\n<p>2、区间查询</p>\n<p>3、区间修改</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h3><p>1、构造用于定义线段树计算方法的接口</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Merger&lt;E&gt; &#123;<br>    E merge(E a, E b);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、线段树类的基本实现</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">SegmentTree</span>&lt;<span class=\"hljs-symbol\">E</span>&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> E[] tree;\t<span class=\"hljs-comment\">// 存储线段树</span><br>    <span class=\"hljs-keyword\">private</span> E[] data;\t<span class=\"hljs-comment\">// 存储原始数据</span><br>    <span class=\"hljs-keyword\">private</span> Merger&lt;E&gt; merger;\t<span class=\"hljs-comment\">// 定义线段树计算方法</span><br><br>    <span class=\"hljs-keyword\">public</span> SegmentTree(E[] arr, Merger&lt;E&gt; merger) &#123;<br><br>        <span class=\"hljs-keyword\">this</span>.merger = merger;<br><br>        data = (E[])new Object[arr.length];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i&lt; arr.length; i++) &#123;<br>            data[i] = arr[i];<br>        &#125;<br><br>        tree = (E[])new Object[<span class=\"hljs-number\">4</span> * arr.length];<br>        buildSegmentTree(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, data.length<span class=\"hljs-number\">-1</span>);\t<span class=\"hljs-comment\">// 构造线段树</span><br><br>    &#125;<br><br>\t<span class=\"hljs-comment\">// 获取左孩子索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> leftChild(<span class=\"hljs-built_in\">int</span> index) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">1</span>;<br>    &#125;<br>\t<br>\t<span class=\"hljs-comment\">// 获取右孩子索引</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">int</span> rightChild(<span class=\"hljs-built_in\">int</span> index) &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span> * index + <span class=\"hljs-number\">2</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"构造线段树\"><a href=\"#构造线段树\" class=\"headerlink\" title=\"构造线段树\"></a>构造线段树</h3><p>使用递归构造线段树，整个过程有点像使用一个有序数组构造二叉搜索树。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">treeIndex</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">l</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">r</span>)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span>(l<span class=\"hljs-operator\"> == </span>r) &#123;<br>        tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">treeIndex</span>]</span> = data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">l</span>]</span>;<br>        return;<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> leftTreeIndex = left<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">treeIndex</span>)</span>;<br>    <span class=\"hljs-built_in\">int</span> rightTreeIndex = right<span class=\"hljs-constructor\">Child(<span class=\"hljs-params\">treeIndex</span>)</span>;<br>    <span class=\"hljs-built_in\">int</span> mid = l + (r - l)<span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">2</span>;<br>    build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">leftTreeIndex</span>, <span class=\"hljs-params\">l</span>, <span class=\"hljs-params\">mid</span>)</span>;<br>    build<span class=\"hljs-constructor\">SegmentTree(<span class=\"hljs-params\">rightTreeIndex</span>, <span class=\"hljs-params\">mid</span>+1, <span class=\"hljs-params\">r</span>)</span>;<br>    tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">treeIndex</span>]</span> = merger.merge(tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">leftTreeIndex</span>]</span>, tree<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">rightTreeIndex</span>]</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"区间查询\"><a href=\"#区间查询\" class=\"headerlink\" title=\"区间查询\"></a>区间查询</h3><p>也是使用递归进行查询，分三种情况进行讨论。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 返回[queryL, queryR]的值</span><br><span class=\"hljs-keyword\">public</span> E query(<span class=\"hljs-built_in\">int</span> queryL, <span class=\"hljs-built_in\">int</span> queryR) &#123;<br>    <span class=\"hljs-keyword\">if</span>(queryL &lt; <span class=\"hljs-number\">0</span> || queryL &gt;= data.length ||<br>        queryR &lt; <span class=\"hljs-number\">0</span> || queryR &gt;= data.length || queryL &gt; queryR) &#123;<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Index is illegal\"</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> query(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, data.length<span class=\"hljs-number\">-1</span>, queryL, queryR);<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> E query(<span class=\"hljs-built_in\">int</span> treeIndex, <span class=\"hljs-built_in\">int</span> l, <span class=\"hljs-built_in\">int</span> r, <span class=\"hljs-built_in\">int</span> queryL, <span class=\"hljs-built_in\">int</span> queryR) &#123;<br>    <span class=\"hljs-keyword\">if</span>(l == queryL &amp;&amp; r == queryR) &#123;<br>        <span class=\"hljs-keyword\">return</span> tree[treeIndex];<br>    &#125;<br>    <span class=\"hljs-built_in\">int</span> mid = l+(r-l)/<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-built_in\">int</span> leftTreeIndex = leftChild(treeIndex);<br>    <span class=\"hljs-built_in\">int</span> rightTreeIndex = rightChild(treeIndex);<br>    <span class=\"hljs-keyword\">if</span>(queryL &gt;= mid + <span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> query(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, queryL, queryR);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(queryR &lt;= mid) &#123;<br>        <span class=\"hljs-keyword\">return</span> query(leftTreeIndex, l, mid, queryL, queryR);<br>    &#125;<br>    E leftResult = query(leftTreeIndex, l, mid, queryL, mid);<br>    E rightResult = query(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, mid+<span class=\"hljs-number\">1</span>, queryR);<br>    <span class=\"hljs-keyword\">return</span> merger.merge(leftResult, rightResult);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"区间修改\"><a href=\"#区间修改\" class=\"headerlink\" title=\"区间修改\"></a>区间修改</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">// 将<span class=\"hljs-keyword\">index</span>位置的值，更新为<span class=\"hljs-built_in\">e</span><br><span class=\"hljs-keyword\">public</span> void <span class=\"hljs-keyword\">set</span>(int <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">E</span> <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">index</span> &lt; <span class=\"hljs-number\">0</span> || <span class=\"hljs-keyword\">index</span> &gt;= data.<span class=\"hljs-built_in\">length</span>)<br>        throw new IllegalArgumentException(<span class=\"hljs-string\">\"Index is illegal\"</span>);<br>    data[<span class=\"hljs-keyword\">index</span>] = <span class=\"hljs-built_in\">e</span>;<br>    set(0, 0, data.length-1, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>&#125;<br><br>// 在以treeIndex为根的线段树中更新<span class=\"hljs-keyword\">index</span>的值为<span class=\"hljs-built_in\">e</span><br><span class=\"hljs-keyword\">private</span> void <span class=\"hljs-keyword\">set</span>(int treeIndex, int l, int r, int <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">E</span> <span class=\"hljs-built_in\">e</span>) &#123;<br>    <span class=\"hljs-keyword\">if</span>(l == r) &#123;<br>        tree[treeIndex] = <span class=\"hljs-built_in\">e</span>;<br>        return;<br>    &#125;<br>    int mid = l + (r-l)/2;<br>    int leftTreeIndex = leftChild(treeIndex);<br>    int rightTreeIndex = rightChild(treeIndex);<br>    if(<span class=\"hljs-keyword\">index</span> &gt;= mid+<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">set</span>(rightTreeIndex, mid+<span class=\"hljs-number\">1</span>, r, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>    else<br>        set(leftTreeIndex, l, mid, <span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">e</span>);<br>    tree[treeIndex] = merger.<span class=\"hljs-keyword\">merge</span>(tree[leftTreeIndex], tree[rightTreeIndex]);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n"},{"title":"改变","date":"2019-05-04T11:46:58.000Z","fileName":"the_change","_content":"时光本身没有魔力，它的奇妙来自于人们很容易愣神。\n\n当你发呆的时候，当你全身心地在做一件事的时候，当你摊在沙发上消磨时光的时候，它总会轻而易举地从你的指尖溜走。“溜”，这是个形容时光已经用烂了的动词，但大可不必对这种形容做一些所谓老生常谈的说教，因为这在汉语中确实用的很妙。\n\n小学生用文字形容时光是一把好手，因为似乎我们的教育自小到大一个很大的主题就是劝人切莫虚度时光。所谓“少壮不努力，老大徒伤悲”也可以视为是对时光的隐喻，这种隐喻隐藏在许许多多与时光本身看似并不相关的事物上，但作为两种状态之间的对比却往往体现出时光的作用来。从这个角度来看，也许本身就没有什么隐喻不隐喻的吧，毕竟活在时光长河里的生物，怎么可能规避的了时光二字呢。如此看来“时光”这两个汉字也着实幸运，明明是人造出的东西，表达的却是一种任何人也捉摸不透却又身在其中的感觉。\n\n现在已经五月份了，其实我也很纳闷怎么就五月份了。我不记得上一次愣神是在什么时候，大概是今年二月？或者是去年的什么时间，或许是十年前？总之现在已经快要接近我生命中的第21个年头了。我在愣神当中曾经说过我才18，也曾经说过我才20，但我现在快满21了。这是一种相当奇妙的感觉，你不知道起点在哪，也无法推算终点何在，你一次又一次的愣神，又一次又一次地回过神来开始思考，可每次回忆起自己上一次的思考，又会发现那不过是无数次愣神递归过程之中的某个终止条件。人的一生永远是在愣神中度过，而时光却又如此狡猾，永远会在你愣神的时候从你的指尖溜走。\n\n仿佛避开守卫出逃的囚犯，仿佛透过缝隙射入的阳光。\n\n今年的五一假期，武汉的阳光十分强烈，但温度并不高，是让人很舒服的那种天气，但又给人以预示，夏天显然快要来了。\n\n我很喜欢夏天，现在回想起来也许是因为夏天是成长过程中唯一可以自由自在的季节吧。庐山上的夏天并不热，反而充满着慵懒的感觉。其他地方的夏天虽然普遍地能够被称为酷暑，但酷热之中却又蕴含了随意与激情，透露着狄俄倪索斯的气息，我很喜欢去品尝这种缺乏理性的味道，它会让愣神与发呆变得顺理成章。\n\n这不是我今年第一次感到夏天要来了。我依稀可以记得，度过清明节假期之后的那天，很热。在回汉的路上，高铁里那种通过机器进行流通的空气的味道。呆板，麻木，但每每闻到它我总能想起旅行的过程，想起我四处寻找不同城市中别样的迪厄尼多斯的故事。这种感觉将过去的我和现在的我融为一体，时刻提醒从前的我与现在的我还是同一个人。这种非人的物质不断地通过嗅觉神经冲击你的大脑，一遍又一遍地通过一种缺乏科学与理性的方法强迫你去相信一个没有理性能够论证的哲学命题，强行告诉你你已经惫藾了多久以及你是否将永远以这种状态惫藾下去。\n\n我还能够记得，从学校南二门回寝室的路上，四月的空气显得过于闷热了，给了我一种很不舒服的感觉。仿佛我还在去年的6月，大病初愈在六月的烈阳下回寝室收拾东西回家，我无法形容那是一种什么感觉，大病过后精神似乎由于充裕的休息变得很好，但总给人以一种缺憾的感觉。就像六月的阳光除去酷热以外似乎于我而言少了一层意义，但少的是什么呢？我苦苦思索也得不到答案。也许今年的夏天我能够找到它，也许永远也找不到了，也许它将被我遗忘，这也是大概率的事情了，也许这种缺憾感只是因为我对阳光多了一层理解而产生的错觉，也许缺憾的感觉与获得的感觉纠缠一起令我无法区分。但不论产生这种感觉的机理是什么，我只知道那时的我与现在的我多少有些不同了，也许是去年躺在病床上痛苦地享受闲暇时光以及六月的天气造成的，也许是命中注定在这个年龄会产生的改变，也许只是一个发展趋势附着于生病这件事情上带给我的错觉。我能写下很多种也许，但也许它们没有一个是答案。\n\n从前有一段时间我热衷于探讨“Riddles of Existence”这个永远也不会有答案的形而上学问题，里面有一种支持宿命论的观点。如果加上空间三维与时间一维的话，在我们的生活中每一个结点的坐标都是固定的，一切事情都是一定会发生的。具体的证明方法我已经记不清了，但的的确确，我们的每一秒，每一个抉择，每一个时间节点上发生的事，都在我们愣神之后被一笔带过，被时光这个东西窃取而空。而下一个时间节点当我们思虑从前那些改变的时候，这种思虑又成为了下下个节点思考的素材。我们就如俄罗斯套娃一般死死地在时光的长河之中套下过去的自己，再被将来的自己套下，无穷无尽。而在我们执着于套娃本身的方法时，时光流逝，间断性地带给我们套下过去自己的满足感，告诉我们有些东西从未改变，就如木制娃娃用颜料画上的微笑的脸庞。\n\n五月出头，这几天天气很好，阳光明媚却不毒辣，路边的梧桐树重新长出了夏天最亮眼的绿，我于道中抬头，看见阳光透过树叶缝隙泛起的柔和的光。\n\n我感觉并不舒服，就像感受到了从前的自己。傍晚看到了属于夏天独有的那种灿烂的夕阳，我于美感之中蹉跎，我想起了海，想起了很多年前在海边的自己，想起了自己惫藾的时光，亦美亦不美，两个时空的我产生了龃龉，这是很难用理性判断的事情。\n\n改变是必然的，“往者不可谏，来者犹可追”这句话永远是苍白无力的，但也没有多少人会纠结于改变本身而放弃对这句话的追求。\n\n毕竟，人们在愣神之时总会开始学会欣赏从前的自己，总会以最柔和的方法面对改变所带来的龃龉。\n\n就像俄罗斯套娃，大的娃娃总会接纳小的，尽管它们是那么不同。\n\n> 记于19.5.5  武汉","source":"_posts/杂谈杂想/杂想/改变.md","raw":"---\ntitle: 改变\ndate: 2019-05-04 19:46:58\ntags:\n    - 杂想\ncategories:\n    - 杂谈杂想\n    - 杂想\nfileName: the_change\n---\n时光本身没有魔力，它的奇妙来自于人们很容易愣神。\n\n当你发呆的时候，当你全身心地在做一件事的时候，当你摊在沙发上消磨时光的时候，它总会轻而易举地从你的指尖溜走。“溜”，这是个形容时光已经用烂了的动词，但大可不必对这种形容做一些所谓老生常谈的说教，因为这在汉语中确实用的很妙。\n\n小学生用文字形容时光是一把好手，因为似乎我们的教育自小到大一个很大的主题就是劝人切莫虚度时光。所谓“少壮不努力，老大徒伤悲”也可以视为是对时光的隐喻，这种隐喻隐藏在许许多多与时光本身看似并不相关的事物上，但作为两种状态之间的对比却往往体现出时光的作用来。从这个角度来看，也许本身就没有什么隐喻不隐喻的吧，毕竟活在时光长河里的生物，怎么可能规避的了时光二字呢。如此看来“时光”这两个汉字也着实幸运，明明是人造出的东西，表达的却是一种任何人也捉摸不透却又身在其中的感觉。\n\n现在已经五月份了，其实我也很纳闷怎么就五月份了。我不记得上一次愣神是在什么时候，大概是今年二月？或者是去年的什么时间，或许是十年前？总之现在已经快要接近我生命中的第21个年头了。我在愣神当中曾经说过我才18，也曾经说过我才20，但我现在快满21了。这是一种相当奇妙的感觉，你不知道起点在哪，也无法推算终点何在，你一次又一次的愣神，又一次又一次地回过神来开始思考，可每次回忆起自己上一次的思考，又会发现那不过是无数次愣神递归过程之中的某个终止条件。人的一生永远是在愣神中度过，而时光却又如此狡猾，永远会在你愣神的时候从你的指尖溜走。\n\n仿佛避开守卫出逃的囚犯，仿佛透过缝隙射入的阳光。\n\n今年的五一假期，武汉的阳光十分强烈，但温度并不高，是让人很舒服的那种天气，但又给人以预示，夏天显然快要来了。\n\n我很喜欢夏天，现在回想起来也许是因为夏天是成长过程中唯一可以自由自在的季节吧。庐山上的夏天并不热，反而充满着慵懒的感觉。其他地方的夏天虽然普遍地能够被称为酷暑，但酷热之中却又蕴含了随意与激情，透露着狄俄倪索斯的气息，我很喜欢去品尝这种缺乏理性的味道，它会让愣神与发呆变得顺理成章。\n\n这不是我今年第一次感到夏天要来了。我依稀可以记得，度过清明节假期之后的那天，很热。在回汉的路上，高铁里那种通过机器进行流通的空气的味道。呆板，麻木，但每每闻到它我总能想起旅行的过程，想起我四处寻找不同城市中别样的迪厄尼多斯的故事。这种感觉将过去的我和现在的我融为一体，时刻提醒从前的我与现在的我还是同一个人。这种非人的物质不断地通过嗅觉神经冲击你的大脑，一遍又一遍地通过一种缺乏科学与理性的方法强迫你去相信一个没有理性能够论证的哲学命题，强行告诉你你已经惫藾了多久以及你是否将永远以这种状态惫藾下去。\n\n我还能够记得，从学校南二门回寝室的路上，四月的空气显得过于闷热了，给了我一种很不舒服的感觉。仿佛我还在去年的6月，大病初愈在六月的烈阳下回寝室收拾东西回家，我无法形容那是一种什么感觉，大病过后精神似乎由于充裕的休息变得很好，但总给人以一种缺憾的感觉。就像六月的阳光除去酷热以外似乎于我而言少了一层意义，但少的是什么呢？我苦苦思索也得不到答案。也许今年的夏天我能够找到它，也许永远也找不到了，也许它将被我遗忘，这也是大概率的事情了，也许这种缺憾感只是因为我对阳光多了一层理解而产生的错觉，也许缺憾的感觉与获得的感觉纠缠一起令我无法区分。但不论产生这种感觉的机理是什么，我只知道那时的我与现在的我多少有些不同了，也许是去年躺在病床上痛苦地享受闲暇时光以及六月的天气造成的，也许是命中注定在这个年龄会产生的改变，也许只是一个发展趋势附着于生病这件事情上带给我的错觉。我能写下很多种也许，但也许它们没有一个是答案。\n\n从前有一段时间我热衷于探讨“Riddles of Existence”这个永远也不会有答案的形而上学问题，里面有一种支持宿命论的观点。如果加上空间三维与时间一维的话，在我们的生活中每一个结点的坐标都是固定的，一切事情都是一定会发生的。具体的证明方法我已经记不清了，但的的确确，我们的每一秒，每一个抉择，每一个时间节点上发生的事，都在我们愣神之后被一笔带过，被时光这个东西窃取而空。而下一个时间节点当我们思虑从前那些改变的时候，这种思虑又成为了下下个节点思考的素材。我们就如俄罗斯套娃一般死死地在时光的长河之中套下过去的自己，再被将来的自己套下，无穷无尽。而在我们执着于套娃本身的方法时，时光流逝，间断性地带给我们套下过去自己的满足感，告诉我们有些东西从未改变，就如木制娃娃用颜料画上的微笑的脸庞。\n\n五月出头，这几天天气很好，阳光明媚却不毒辣，路边的梧桐树重新长出了夏天最亮眼的绿，我于道中抬头，看见阳光透过树叶缝隙泛起的柔和的光。\n\n我感觉并不舒服，就像感受到了从前的自己。傍晚看到了属于夏天独有的那种灿烂的夕阳，我于美感之中蹉跎，我想起了海，想起了很多年前在海边的自己，想起了自己惫藾的时光，亦美亦不美，两个时空的我产生了龃龉，这是很难用理性判断的事情。\n\n改变是必然的，“往者不可谏，来者犹可追”这句话永远是苍白无力的，但也没有多少人会纠结于改变本身而放弃对这句话的追求。\n\n毕竟，人们在愣神之时总会开始学会欣赏从前的自己，总会以最柔和的方法面对改变所带来的龃龉。\n\n就像俄罗斯套娃，大的娃娃总会接纳小的，尽管它们是那么不同。\n\n> 记于19.5.5  武汉","slug":"杂谈杂想/杂想/改变","published":1,"updated":"2021-01-11T04:47:18.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobe004yrwjscq75an6j","content":"<p>时光本身没有魔力，它的奇妙来自于人们很容易愣神。</p>\n<p>当你发呆的时候，当你全身心地在做一件事的时候，当你摊在沙发上消磨时光的时候，它总会轻而易举地从你的指尖溜走。“溜”，这是个形容时光已经用烂了的动词，但大可不必对这种形容做一些所谓老生常谈的说教，因为这在汉语中确实用的很妙。</p>\n<p>小学生用文字形容时光是一把好手，因为似乎我们的教育自小到大一个很大的主题就是劝人切莫虚度时光。所谓“少壮不努力，老大徒伤悲”也可以视为是对时光的隐喻，这种隐喻隐藏在许许多多与时光本身看似并不相关的事物上，但作为两种状态之间的对比却往往体现出时光的作用来。从这个角度来看，也许本身就没有什么隐喻不隐喻的吧，毕竟活在时光长河里的生物，怎么可能规避的了时光二字呢。如此看来“时光”这两个汉字也着实幸运，明明是人造出的东西，表达的却是一种任何人也捉摸不透却又身在其中的感觉。</p>\n<p>现在已经五月份了，其实我也很纳闷怎么就五月份了。我不记得上一次愣神是在什么时候，大概是今年二月？或者是去年的什么时间，或许是十年前？总之现在已经快要接近我生命中的第21个年头了。我在愣神当中曾经说过我才18，也曾经说过我才20，但我现在快满21了。这是一种相当奇妙的感觉，你不知道起点在哪，也无法推算终点何在，你一次又一次的愣神，又一次又一次地回过神来开始思考，可每次回忆起自己上一次的思考，又会发现那不过是无数次愣神递归过程之中的某个终止条件。人的一生永远是在愣神中度过，而时光却又如此狡猾，永远会在你愣神的时候从你的指尖溜走。</p>\n<p>仿佛避开守卫出逃的囚犯，仿佛透过缝隙射入的阳光。</p>\n<p>今年的五一假期，武汉的阳光十分强烈，但温度并不高，是让人很舒服的那种天气，但又给人以预示，夏天显然快要来了。</p>\n<p>我很喜欢夏天，现在回想起来也许是因为夏天是成长过程中唯一可以自由自在的季节吧。庐山上的夏天并不热，反而充满着慵懒的感觉。其他地方的夏天虽然普遍地能够被称为酷暑，但酷热之中却又蕴含了随意与激情，透露着狄俄倪索斯的气息，我很喜欢去品尝这种缺乏理性的味道，它会让愣神与发呆变得顺理成章。</p>\n<p>这不是我今年第一次感到夏天要来了。我依稀可以记得，度过清明节假期之后的那天，很热。在回汉的路上，高铁里那种通过机器进行流通的空气的味道。呆板，麻木，但每每闻到它我总能想起旅行的过程，想起我四处寻找不同城市中别样的迪厄尼多斯的故事。这种感觉将过去的我和现在的我融为一体，时刻提醒从前的我与现在的我还是同一个人。这种非人的物质不断地通过嗅觉神经冲击你的大脑，一遍又一遍地通过一种缺乏科学与理性的方法强迫你去相信一个没有理性能够论证的哲学命题，强行告诉你你已经惫藾了多久以及你是否将永远以这种状态惫藾下去。</p>\n<p>我还能够记得，从学校南二门回寝室的路上，四月的空气显得过于闷热了，给了我一种很不舒服的感觉。仿佛我还在去年的6月，大病初愈在六月的烈阳下回寝室收拾东西回家，我无法形容那是一种什么感觉，大病过后精神似乎由于充裕的休息变得很好，但总给人以一种缺憾的感觉。就像六月的阳光除去酷热以外似乎于我而言少了一层意义，但少的是什么呢？我苦苦思索也得不到答案。也许今年的夏天我能够找到它，也许永远也找不到了，也许它将被我遗忘，这也是大概率的事情了，也许这种缺憾感只是因为我对阳光多了一层理解而产生的错觉，也许缺憾的感觉与获得的感觉纠缠一起令我无法区分。但不论产生这种感觉的机理是什么，我只知道那时的我与现在的我多少有些不同了，也许是去年躺在病床上痛苦地享受闲暇时光以及六月的天气造成的，也许是命中注定在这个年龄会产生的改变，也许只是一个发展趋势附着于生病这件事情上带给我的错觉。我能写下很多种也许，但也许它们没有一个是答案。</p>\n<p>从前有一段时间我热衷于探讨“Riddles of Existence”这个永远也不会有答案的形而上学问题，里面有一种支持宿命论的观点。如果加上空间三维与时间一维的话，在我们的生活中每一个结点的坐标都是固定的，一切事情都是一定会发生的。具体的证明方法我已经记不清了，但的的确确，我们的每一秒，每一个抉择，每一个时间节点上发生的事，都在我们愣神之后被一笔带过，被时光这个东西窃取而空。而下一个时间节点当我们思虑从前那些改变的时候，这种思虑又成为了下下个节点思考的素材。我们就如俄罗斯套娃一般死死地在时光的长河之中套下过去的自己，再被将来的自己套下，无穷无尽。而在我们执着于套娃本身的方法时，时光流逝，间断性地带给我们套下过去自己的满足感，告诉我们有些东西从未改变，就如木制娃娃用颜料画上的微笑的脸庞。</p>\n<p>五月出头，这几天天气很好，阳光明媚却不毒辣，路边的梧桐树重新长出了夏天最亮眼的绿，我于道中抬头，看见阳光透过树叶缝隙泛起的柔和的光。</p>\n<p>我感觉并不舒服，就像感受到了从前的自己。傍晚看到了属于夏天独有的那种灿烂的夕阳，我于美感之中蹉跎，我想起了海，想起了很多年前在海边的自己，想起了自己惫藾的时光，亦美亦不美，两个时空的我产生了龃龉，这是很难用理性判断的事情。</p>\n<p>改变是必然的，“往者不可谏，来者犹可追”这句话永远是苍白无力的，但也没有多少人会纠结于改变本身而放弃对这句话的追求。</p>\n<p>毕竟，人们在愣神之时总会开始学会欣赏从前的自己，总会以最柔和的方法面对改变所带来的龃龉。</p>\n<p>就像俄罗斯套娃，大的娃娃总会接纳小的，尽管它们是那么不同。</p>\n<blockquote>\n<p>记于19.5.5  武汉</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>时光本身没有魔力，它的奇妙来自于人们很容易愣神。</p>\n<p>当你发呆的时候，当你全身心地在做一件事的时候，当你摊在沙发上消磨时光的时候，它总会轻而易举地从你的指尖溜走。“溜”，这是个形容时光已经用烂了的动词，但大可不必对这种形容做一些所谓老生常谈的说教，因为这在汉语中确实用的很妙。</p>\n<p>小学生用文字形容时光是一把好手，因为似乎我们的教育自小到大一个很大的主题就是劝人切莫虚度时光。所谓“少壮不努力，老大徒伤悲”也可以视为是对时光的隐喻，这种隐喻隐藏在许许多多与时光本身看似并不相关的事物上，但作为两种状态之间的对比却往往体现出时光的作用来。从这个角度来看，也许本身就没有什么隐喻不隐喻的吧，毕竟活在时光长河里的生物，怎么可能规避的了时光二字呢。如此看来“时光”这两个汉字也着实幸运，明明是人造出的东西，表达的却是一种任何人也捉摸不透却又身在其中的感觉。</p>\n<p>现在已经五月份了，其实我也很纳闷怎么就五月份了。我不记得上一次愣神是在什么时候，大概是今年二月？或者是去年的什么时间，或许是十年前？总之现在已经快要接近我生命中的第21个年头了。我在愣神当中曾经说过我才18，也曾经说过我才20，但我现在快满21了。这是一种相当奇妙的感觉，你不知道起点在哪，也无法推算终点何在，你一次又一次的愣神，又一次又一次地回过神来开始思考，可每次回忆起自己上一次的思考，又会发现那不过是无数次愣神递归过程之中的某个终止条件。人的一生永远是在愣神中度过，而时光却又如此狡猾，永远会在你愣神的时候从你的指尖溜走。</p>\n<p>仿佛避开守卫出逃的囚犯，仿佛透过缝隙射入的阳光。</p>\n<p>今年的五一假期，武汉的阳光十分强烈，但温度并不高，是让人很舒服的那种天气，但又给人以预示，夏天显然快要来了。</p>\n<p>我很喜欢夏天，现在回想起来也许是因为夏天是成长过程中唯一可以自由自在的季节吧。庐山上的夏天并不热，反而充满着慵懒的感觉。其他地方的夏天虽然普遍地能够被称为酷暑，但酷热之中却又蕴含了随意与激情，透露着狄俄倪索斯的气息，我很喜欢去品尝这种缺乏理性的味道，它会让愣神与发呆变得顺理成章。</p>\n<p>这不是我今年第一次感到夏天要来了。我依稀可以记得，度过清明节假期之后的那天，很热。在回汉的路上，高铁里那种通过机器进行流通的空气的味道。呆板，麻木，但每每闻到它我总能想起旅行的过程，想起我四处寻找不同城市中别样的迪厄尼多斯的故事。这种感觉将过去的我和现在的我融为一体，时刻提醒从前的我与现在的我还是同一个人。这种非人的物质不断地通过嗅觉神经冲击你的大脑，一遍又一遍地通过一种缺乏科学与理性的方法强迫你去相信一个没有理性能够论证的哲学命题，强行告诉你你已经惫藾了多久以及你是否将永远以这种状态惫藾下去。</p>\n<p>我还能够记得，从学校南二门回寝室的路上，四月的空气显得过于闷热了，给了我一种很不舒服的感觉。仿佛我还在去年的6月，大病初愈在六月的烈阳下回寝室收拾东西回家，我无法形容那是一种什么感觉，大病过后精神似乎由于充裕的休息变得很好，但总给人以一种缺憾的感觉。就像六月的阳光除去酷热以外似乎于我而言少了一层意义，但少的是什么呢？我苦苦思索也得不到答案。也许今年的夏天我能够找到它，也许永远也找不到了，也许它将被我遗忘，这也是大概率的事情了，也许这种缺憾感只是因为我对阳光多了一层理解而产生的错觉，也许缺憾的感觉与获得的感觉纠缠一起令我无法区分。但不论产生这种感觉的机理是什么，我只知道那时的我与现在的我多少有些不同了，也许是去年躺在病床上痛苦地享受闲暇时光以及六月的天气造成的，也许是命中注定在这个年龄会产生的改变，也许只是一个发展趋势附着于生病这件事情上带给我的错觉。我能写下很多种也许，但也许它们没有一个是答案。</p>\n<p>从前有一段时间我热衷于探讨“Riddles of Existence”这个永远也不会有答案的形而上学问题，里面有一种支持宿命论的观点。如果加上空间三维与时间一维的话，在我们的生活中每一个结点的坐标都是固定的，一切事情都是一定会发生的。具体的证明方法我已经记不清了，但的的确确，我们的每一秒，每一个抉择，每一个时间节点上发生的事，都在我们愣神之后被一笔带过，被时光这个东西窃取而空。而下一个时间节点当我们思虑从前那些改变的时候，这种思虑又成为了下下个节点思考的素材。我们就如俄罗斯套娃一般死死地在时光的长河之中套下过去的自己，再被将来的自己套下，无穷无尽。而在我们执着于套娃本身的方法时，时光流逝，间断性地带给我们套下过去自己的满足感，告诉我们有些东西从未改变，就如木制娃娃用颜料画上的微笑的脸庞。</p>\n<p>五月出头，这几天天气很好，阳光明媚却不毒辣，路边的梧桐树重新长出了夏天最亮眼的绿，我于道中抬头，看见阳光透过树叶缝隙泛起的柔和的光。</p>\n<p>我感觉并不舒服，就像感受到了从前的自己。傍晚看到了属于夏天独有的那种灿烂的夕阳，我于美感之中蹉跎，我想起了海，想起了很多年前在海边的自己，想起了自己惫藾的时光，亦美亦不美，两个时空的我产生了龃龉，这是很难用理性判断的事情。</p>\n<p>改变是必然的，“往者不可谏，来者犹可追”这句话永远是苍白无力的，但也没有多少人会纠结于改变本身而放弃对这句话的追求。</p>\n<p>毕竟，人们在愣神之时总会开始学会欣赏从前的自己，总会以最柔和的方法面对改变所带来的龃龉。</p>\n<p>就像俄罗斯套娃，大的娃娃总会接纳小的，尽管它们是那么不同。</p>\n<blockquote>\n<p>记于19.5.5  武汉</p>\n</blockquote>\n"},{"title":"雨与晴","date":"2019-03-20T11:13:06.000Z","fileName":"the_rain_and_the_shine","_content":"今天早上8点半左右，我像往常一样上三楼接水，在楼梯间的窗户向外瞥，围墙外的篮球场的塑胶地上湿了一片。围墙略显斑驳，是本来就不那么年经了的建筑被大水冲洗过后的一种自然姿态，带着一些年迈的美丽。\n\n没事的时候我很喜欢透过这里向外望，但这次不是，因为我的眼光里多少带了些形色匆匆的味道。被水洗过的塑胶绿和围墙这边的绿色的植物，与其说是我看到了她们，不如说是她们的颜色主宰了那一秒内我的视神经。现在窗外夜色朦胧，是置身城市里很少见到的那种纯粹的墨蓝，纯粹的证明也并非是我自情自愿，是因为我抬头能看到星星。\n\n不对，在东边的天空，还有一轮月亮，也许足够用皓月来形容。\n\n我并不像一些下午一样，站在那个楼梯间的窗户面前带着什么思考或者纯粹性的发呆向外望。清晨的我手里拿着洗面奶和脸盆毛巾经过了那里，我现在也只能以上帝的姿态回顾那个瞬间我究竟是迈开了左腿还是右腿，脑子中想的究竟是窗外的绿还是一些什么别的乱七八糟的东西。这到底是模拟，有一万种不同的可能，这花了我很长的时间，沉淀了许多情感。我并不喜欢喝白酒，事实上也的确没怎么喝过，但我觉得所谓后劲，就是如此吧。在张开嘴的瞬间，咽下的酒精会让觥筹交错之后的你花上几个小时醉在自己的梦里，所需要的契机也只是热闹向平淡的自然转变。\n\n雨是早就要下的了，昨晚睡前就已经开始了，但我并没有太在意，只记得它很大，像是夏天的雷雨，全然不同于上个月那阴雨绵绵的枯燥，倒是热烈洒脱，干脆利落。昨晚12点左右的时候，我躺在床上，感觉很累很累。我不知道“累”这种感觉的产生是基于什么，也许是某种激素，那我觉得自己想必是有些内分泌失调了。我并没有什么能过得去的让我感觉到疲惫的理由，但我就是很累。这一个月来我思考了很多，这个多也只是相对于我某种程度上放弃思考开始自欺欺人的那大段时间而已，只是一个正常水平，就像冬末的阴雨只要地球还在正常的轨道上，只要太阳不出什么问题，就一定会消散一样。阴天和晴天，只不过是地球表面的两种正常状态，但其微小的不同，的确会对地表的生物造成一些困扰，这我想是肯定的。\n\n半夜的时候我被雨声惊醒了，这很少见，除去呼噜声与钟表的滴答，我是很难被别的声音惊醒的。半夜醒来的人对时间是没法计数的，一切理性和情感都处于朦胧的状态，也许这道朦胧会在大脑留下沙滩上城堡般的记忆，也许不会。但我却记得，那算是雨后的阴沉的味道吧。翠绿的世界总是会给人一种虽然充满生气但却脆弱稚嫩的感觉，在这脆弱稚嫩之下不知纯粹为何物，但被大雨蹂躏过后的植物的墨绿虽然给人阴沉郁结之感，却又十足纯粹。淅沥小雨下的天空阴沉混沌，赶时间的人会痛恨这种“欲擒故纵”般的感觉，世界并不是在接受清洗，而是在把污浊借雨水之名平摊到各地，也许是为了遮瑕，但却使原来作为“瑜”的部分都消失殆尽，纯粹一词无处藏身。而大雨磅礴的天空也许更是阴沉可怖，但却给人以十足的命令感，再赶时间你也不会为“走”或“不走”而面露难色，只有在屋檐下耐心等待。等待的过程也许是生活中难得的纯粹的仪式，因为静坐听雨的意境在当代实在是少的可怜，就连裤腿被大雨淋湿的触感都变得弥足珍贵。\n\n雨后，空气中会有清爽的纯粹，世界接受清洗之后，无论是借着日光还是霓虹，路面倒映出的射影，是世界的另一种面貌，印着纯粹二字。\n\n但我并不知道纯粹为何物，它是最狡诈多变的一个词。在我有不同的情感时，思考不同的问题时，面临不同的选择时，它是我最后的仪仗，是我追求的东西，尽管为此我注定没有方向。\n\n我不知道小时候庐山上的蓝天白云与我的无忧无虑算不算纯粹，也许无忧无虑只是假象，是人丢掉一段时间内的大部分记忆的一种自然而然的感受。我马上21了，在我以1开头的年岁里，我的确很少看到记忆中的那种蓝天了。在熬过二月的阴雨之后，最近武汉的天气晴空万里，就连今天早上阴沉潮湿的墨绿在我中午再一次以相同的视角观望时都已经消失殆尽了，但蓝天上仍然有一层阴霾，蓝的并不纯粹，而我已经习惯了这种蓝，并且也开始用湛蓝形容它。没事的时候我也会在教五门口的广场上休息，或者在万林艺术馆的天台上坐着以一个不至于让太阳抢去风头的角度欣赏蓝天，我为这种天气而欣喜，但内心中又似乎对一场夏天的雷雨更为期待。我不知道是因为暴雨真的能够洗刷世界，还是因为我仅仅期待那雨声给我带来的视觉、听觉再到触觉的全方位的模拟，能够带我回到小时候，或者说情感更加纯粹的年岁。\n\n现在外面天很黑，皓月当空，高悬东方，在宿舍门口我看到有人在用微单拍摄。我很遗憾单反不在身边，同时又很庆幸单反不在身边。我尝试用手机对这个美丽的夜色进行记录，但最后发现它只属于我的眼睛，属于在我记忆中注定渐渐消散的那一块区域。我很快会把昨晚的雨、清晨的绿以及东方的月这些印记着今天的一切特征给淡忘，因为未来还会有无数个相同的日子，武大的樱花会一直开下去，我的路，我的追求，我的思考也不会停下，至死方休。时不时想想上一个今天自己对纯粹的定义，也许会发现愚蠢，也许会发现美丽，但更重要的是找到不同日子纯粹变化的轨迹。文字的意义总会是虚无缥缈的，但追求的东西如果套用一个词来表达的话我认为总不至于两个时间的方向会是南北迥异的吧。\n\n说句实话，我想家了。\n\n人只有在意识到自己脆弱的时候才会顿生羁旅之情。\n\n但也从来没有用羁旅表达自己状态的人会停下脚步。\n\n> 记于 19.3.20 武汉","source":"_posts/杂谈杂想/杂想/雨与晴.md","raw":"---\ntitle: 雨与晴\ndate: 2019-03-20 19:13:06\ntags:\n    - 杂想\ncategories:\n    - 杂谈杂想\n    - 杂想\nfileName: the_rain_and_the_shine\n---\n今天早上8点半左右，我像往常一样上三楼接水，在楼梯间的窗户向外瞥，围墙外的篮球场的塑胶地上湿了一片。围墙略显斑驳，是本来就不那么年经了的建筑被大水冲洗过后的一种自然姿态，带着一些年迈的美丽。\n\n没事的时候我很喜欢透过这里向外望，但这次不是，因为我的眼光里多少带了些形色匆匆的味道。被水洗过的塑胶绿和围墙这边的绿色的植物，与其说是我看到了她们，不如说是她们的颜色主宰了那一秒内我的视神经。现在窗外夜色朦胧，是置身城市里很少见到的那种纯粹的墨蓝，纯粹的证明也并非是我自情自愿，是因为我抬头能看到星星。\n\n不对，在东边的天空，还有一轮月亮，也许足够用皓月来形容。\n\n我并不像一些下午一样，站在那个楼梯间的窗户面前带着什么思考或者纯粹性的发呆向外望。清晨的我手里拿着洗面奶和脸盆毛巾经过了那里，我现在也只能以上帝的姿态回顾那个瞬间我究竟是迈开了左腿还是右腿，脑子中想的究竟是窗外的绿还是一些什么别的乱七八糟的东西。这到底是模拟，有一万种不同的可能，这花了我很长的时间，沉淀了许多情感。我并不喜欢喝白酒，事实上也的确没怎么喝过，但我觉得所谓后劲，就是如此吧。在张开嘴的瞬间，咽下的酒精会让觥筹交错之后的你花上几个小时醉在自己的梦里，所需要的契机也只是热闹向平淡的自然转变。\n\n雨是早就要下的了，昨晚睡前就已经开始了，但我并没有太在意，只记得它很大，像是夏天的雷雨，全然不同于上个月那阴雨绵绵的枯燥，倒是热烈洒脱，干脆利落。昨晚12点左右的时候，我躺在床上，感觉很累很累。我不知道“累”这种感觉的产生是基于什么，也许是某种激素，那我觉得自己想必是有些内分泌失调了。我并没有什么能过得去的让我感觉到疲惫的理由，但我就是很累。这一个月来我思考了很多，这个多也只是相对于我某种程度上放弃思考开始自欺欺人的那大段时间而已，只是一个正常水平，就像冬末的阴雨只要地球还在正常的轨道上，只要太阳不出什么问题，就一定会消散一样。阴天和晴天，只不过是地球表面的两种正常状态，但其微小的不同，的确会对地表的生物造成一些困扰，这我想是肯定的。\n\n半夜的时候我被雨声惊醒了，这很少见，除去呼噜声与钟表的滴答，我是很难被别的声音惊醒的。半夜醒来的人对时间是没法计数的，一切理性和情感都处于朦胧的状态，也许这道朦胧会在大脑留下沙滩上城堡般的记忆，也许不会。但我却记得，那算是雨后的阴沉的味道吧。翠绿的世界总是会给人一种虽然充满生气但却脆弱稚嫩的感觉，在这脆弱稚嫩之下不知纯粹为何物，但被大雨蹂躏过后的植物的墨绿虽然给人阴沉郁结之感，却又十足纯粹。淅沥小雨下的天空阴沉混沌，赶时间的人会痛恨这种“欲擒故纵”般的感觉，世界并不是在接受清洗，而是在把污浊借雨水之名平摊到各地，也许是为了遮瑕，但却使原来作为“瑜”的部分都消失殆尽，纯粹一词无处藏身。而大雨磅礴的天空也许更是阴沉可怖，但却给人以十足的命令感，再赶时间你也不会为“走”或“不走”而面露难色，只有在屋檐下耐心等待。等待的过程也许是生活中难得的纯粹的仪式，因为静坐听雨的意境在当代实在是少的可怜，就连裤腿被大雨淋湿的触感都变得弥足珍贵。\n\n雨后，空气中会有清爽的纯粹，世界接受清洗之后，无论是借着日光还是霓虹，路面倒映出的射影，是世界的另一种面貌，印着纯粹二字。\n\n但我并不知道纯粹为何物，它是最狡诈多变的一个词。在我有不同的情感时，思考不同的问题时，面临不同的选择时，它是我最后的仪仗，是我追求的东西，尽管为此我注定没有方向。\n\n我不知道小时候庐山上的蓝天白云与我的无忧无虑算不算纯粹，也许无忧无虑只是假象，是人丢掉一段时间内的大部分记忆的一种自然而然的感受。我马上21了，在我以1开头的年岁里，我的确很少看到记忆中的那种蓝天了。在熬过二月的阴雨之后，最近武汉的天气晴空万里，就连今天早上阴沉潮湿的墨绿在我中午再一次以相同的视角观望时都已经消失殆尽了，但蓝天上仍然有一层阴霾，蓝的并不纯粹，而我已经习惯了这种蓝，并且也开始用湛蓝形容它。没事的时候我也会在教五门口的广场上休息，或者在万林艺术馆的天台上坐着以一个不至于让太阳抢去风头的角度欣赏蓝天，我为这种天气而欣喜，但内心中又似乎对一场夏天的雷雨更为期待。我不知道是因为暴雨真的能够洗刷世界，还是因为我仅仅期待那雨声给我带来的视觉、听觉再到触觉的全方位的模拟，能够带我回到小时候，或者说情感更加纯粹的年岁。\n\n现在外面天很黑，皓月当空，高悬东方，在宿舍门口我看到有人在用微单拍摄。我很遗憾单反不在身边，同时又很庆幸单反不在身边。我尝试用手机对这个美丽的夜色进行记录，但最后发现它只属于我的眼睛，属于在我记忆中注定渐渐消散的那一块区域。我很快会把昨晚的雨、清晨的绿以及东方的月这些印记着今天的一切特征给淡忘，因为未来还会有无数个相同的日子，武大的樱花会一直开下去，我的路，我的追求，我的思考也不会停下，至死方休。时不时想想上一个今天自己对纯粹的定义，也许会发现愚蠢，也许会发现美丽，但更重要的是找到不同日子纯粹变化的轨迹。文字的意义总会是虚无缥缈的，但追求的东西如果套用一个词来表达的话我认为总不至于两个时间的方向会是南北迥异的吧。\n\n说句实话，我想家了。\n\n人只有在意识到自己脆弱的时候才会顿生羁旅之情。\n\n但也从来没有用羁旅表达自己状态的人会停下脚步。\n\n> 记于 19.3.20 武汉","slug":"杂谈杂想/杂想/雨与晴","published":1,"updated":"2021-01-11T04:47:39.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobg0053rwjsgxnn08eb","content":"<p>今天早上8点半左右，我像往常一样上三楼接水，在楼梯间的窗户向外瞥，围墙外的篮球场的塑胶地上湿了一片。围墙略显斑驳，是本来就不那么年经了的建筑被大水冲洗过后的一种自然姿态，带着一些年迈的美丽。</p>\n<p>没事的时候我很喜欢透过这里向外望，但这次不是，因为我的眼光里多少带了些形色匆匆的味道。被水洗过的塑胶绿和围墙这边的绿色的植物，与其说是我看到了她们，不如说是她们的颜色主宰了那一秒内我的视神经。现在窗外夜色朦胧，是置身城市里很少见到的那种纯粹的墨蓝，纯粹的证明也并非是我自情自愿，是因为我抬头能看到星星。</p>\n<p>不对，在东边的天空，还有一轮月亮，也许足够用皓月来形容。</p>\n<p>我并不像一些下午一样，站在那个楼梯间的窗户面前带着什么思考或者纯粹性的发呆向外望。清晨的我手里拿着洗面奶和脸盆毛巾经过了那里，我现在也只能以上帝的姿态回顾那个瞬间我究竟是迈开了左腿还是右腿，脑子中想的究竟是窗外的绿还是一些什么别的乱七八糟的东西。这到底是模拟，有一万种不同的可能，这花了我很长的时间，沉淀了许多情感。我并不喜欢喝白酒，事实上也的确没怎么喝过，但我觉得所谓后劲，就是如此吧。在张开嘴的瞬间，咽下的酒精会让觥筹交错之后的你花上几个小时醉在自己的梦里，所需要的契机也只是热闹向平淡的自然转变。</p>\n<p>雨是早就要下的了，昨晚睡前就已经开始了，但我并没有太在意，只记得它很大，像是夏天的雷雨，全然不同于上个月那阴雨绵绵的枯燥，倒是热烈洒脱，干脆利落。昨晚12点左右的时候，我躺在床上，感觉很累很累。我不知道“累”这种感觉的产生是基于什么，也许是某种激素，那我觉得自己想必是有些内分泌失调了。我并没有什么能过得去的让我感觉到疲惫的理由，但我就是很累。这一个月来我思考了很多，这个多也只是相对于我某种程度上放弃思考开始自欺欺人的那大段时间而已，只是一个正常水平，就像冬末的阴雨只要地球还在正常的轨道上，只要太阳不出什么问题，就一定会消散一样。阴天和晴天，只不过是地球表面的两种正常状态，但其微小的不同，的确会对地表的生物造成一些困扰，这我想是肯定的。</p>\n<p>半夜的时候我被雨声惊醒了，这很少见，除去呼噜声与钟表的滴答，我是很难被别的声音惊醒的。半夜醒来的人对时间是没法计数的，一切理性和情感都处于朦胧的状态，也许这道朦胧会在大脑留下沙滩上城堡般的记忆，也许不会。但我却记得，那算是雨后的阴沉的味道吧。翠绿的世界总是会给人一种虽然充满生气但却脆弱稚嫩的感觉，在这脆弱稚嫩之下不知纯粹为何物，但被大雨蹂躏过后的植物的墨绿虽然给人阴沉郁结之感，却又十足纯粹。淅沥小雨下的天空阴沉混沌，赶时间的人会痛恨这种“欲擒故纵”般的感觉，世界并不是在接受清洗，而是在把污浊借雨水之名平摊到各地，也许是为了遮瑕，但却使原来作为“瑜”的部分都消失殆尽，纯粹一词无处藏身。而大雨磅礴的天空也许更是阴沉可怖，但却给人以十足的命令感，再赶时间你也不会为“走”或“不走”而面露难色，只有在屋檐下耐心等待。等待的过程也许是生活中难得的纯粹的仪式，因为静坐听雨的意境在当代实在是少的可怜，就连裤腿被大雨淋湿的触感都变得弥足珍贵。</p>\n<p>雨后，空气中会有清爽的纯粹，世界接受清洗之后，无论是借着日光还是霓虹，路面倒映出的射影，是世界的另一种面貌，印着纯粹二字。</p>\n<p>但我并不知道纯粹为何物，它是最狡诈多变的一个词。在我有不同的情感时，思考不同的问题时，面临不同的选择时，它是我最后的仪仗，是我追求的东西，尽管为此我注定没有方向。</p>\n<p>我不知道小时候庐山上的蓝天白云与我的无忧无虑算不算纯粹，也许无忧无虑只是假象，是人丢掉一段时间内的大部分记忆的一种自然而然的感受。我马上21了，在我以1开头的年岁里，我的确很少看到记忆中的那种蓝天了。在熬过二月的阴雨之后，最近武汉的天气晴空万里，就连今天早上阴沉潮湿的墨绿在我中午再一次以相同的视角观望时都已经消失殆尽了，但蓝天上仍然有一层阴霾，蓝的并不纯粹，而我已经习惯了这种蓝，并且也开始用湛蓝形容它。没事的时候我也会在教五门口的广场上休息，或者在万林艺术馆的天台上坐着以一个不至于让太阳抢去风头的角度欣赏蓝天，我为这种天气而欣喜，但内心中又似乎对一场夏天的雷雨更为期待。我不知道是因为暴雨真的能够洗刷世界，还是因为我仅仅期待那雨声给我带来的视觉、听觉再到触觉的全方位的模拟，能够带我回到小时候，或者说情感更加纯粹的年岁。</p>\n<p>现在外面天很黑，皓月当空，高悬东方，在宿舍门口我看到有人在用微单拍摄。我很遗憾单反不在身边，同时又很庆幸单反不在身边。我尝试用手机对这个美丽的夜色进行记录，但最后发现它只属于我的眼睛，属于在我记忆中注定渐渐消散的那一块区域。我很快会把昨晚的雨、清晨的绿以及东方的月这些印记着今天的一切特征给淡忘，因为未来还会有无数个相同的日子，武大的樱花会一直开下去，我的路，我的追求，我的思考也不会停下，至死方休。时不时想想上一个今天自己对纯粹的定义，也许会发现愚蠢，也许会发现美丽，但更重要的是找到不同日子纯粹变化的轨迹。文字的意义总会是虚无缥缈的，但追求的东西如果套用一个词来表达的话我认为总不至于两个时间的方向会是南北迥异的吧。</p>\n<p>说句实话，我想家了。</p>\n<p>人只有在意识到自己脆弱的时候才会顿生羁旅之情。</p>\n<p>但也从来没有用羁旅表达自己状态的人会停下脚步。</p>\n<blockquote>\n<p>记于 19.3.20 武汉</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>今天早上8点半左右，我像往常一样上三楼接水，在楼梯间的窗户向外瞥，围墙外的篮球场的塑胶地上湿了一片。围墙略显斑驳，是本来就不那么年经了的建筑被大水冲洗过后的一种自然姿态，带着一些年迈的美丽。</p>\n<p>没事的时候我很喜欢透过这里向外望，但这次不是，因为我的眼光里多少带了些形色匆匆的味道。被水洗过的塑胶绿和围墙这边的绿色的植物，与其说是我看到了她们，不如说是她们的颜色主宰了那一秒内我的视神经。现在窗外夜色朦胧，是置身城市里很少见到的那种纯粹的墨蓝，纯粹的证明也并非是我自情自愿，是因为我抬头能看到星星。</p>\n<p>不对，在东边的天空，还有一轮月亮，也许足够用皓月来形容。</p>\n<p>我并不像一些下午一样，站在那个楼梯间的窗户面前带着什么思考或者纯粹性的发呆向外望。清晨的我手里拿着洗面奶和脸盆毛巾经过了那里，我现在也只能以上帝的姿态回顾那个瞬间我究竟是迈开了左腿还是右腿，脑子中想的究竟是窗外的绿还是一些什么别的乱七八糟的东西。这到底是模拟，有一万种不同的可能，这花了我很长的时间，沉淀了许多情感。我并不喜欢喝白酒，事实上也的确没怎么喝过，但我觉得所谓后劲，就是如此吧。在张开嘴的瞬间，咽下的酒精会让觥筹交错之后的你花上几个小时醉在自己的梦里，所需要的契机也只是热闹向平淡的自然转变。</p>\n<p>雨是早就要下的了，昨晚睡前就已经开始了，但我并没有太在意，只记得它很大，像是夏天的雷雨，全然不同于上个月那阴雨绵绵的枯燥，倒是热烈洒脱，干脆利落。昨晚12点左右的时候，我躺在床上，感觉很累很累。我不知道“累”这种感觉的产生是基于什么，也许是某种激素，那我觉得自己想必是有些内分泌失调了。我并没有什么能过得去的让我感觉到疲惫的理由，但我就是很累。这一个月来我思考了很多，这个多也只是相对于我某种程度上放弃思考开始自欺欺人的那大段时间而已，只是一个正常水平，就像冬末的阴雨只要地球还在正常的轨道上，只要太阳不出什么问题，就一定会消散一样。阴天和晴天，只不过是地球表面的两种正常状态，但其微小的不同，的确会对地表的生物造成一些困扰，这我想是肯定的。</p>\n<p>半夜的时候我被雨声惊醒了，这很少见，除去呼噜声与钟表的滴答，我是很难被别的声音惊醒的。半夜醒来的人对时间是没法计数的，一切理性和情感都处于朦胧的状态，也许这道朦胧会在大脑留下沙滩上城堡般的记忆，也许不会。但我却记得，那算是雨后的阴沉的味道吧。翠绿的世界总是会给人一种虽然充满生气但却脆弱稚嫩的感觉，在这脆弱稚嫩之下不知纯粹为何物，但被大雨蹂躏过后的植物的墨绿虽然给人阴沉郁结之感，却又十足纯粹。淅沥小雨下的天空阴沉混沌，赶时间的人会痛恨这种“欲擒故纵”般的感觉，世界并不是在接受清洗，而是在把污浊借雨水之名平摊到各地，也许是为了遮瑕，但却使原来作为“瑜”的部分都消失殆尽，纯粹一词无处藏身。而大雨磅礴的天空也许更是阴沉可怖，但却给人以十足的命令感，再赶时间你也不会为“走”或“不走”而面露难色，只有在屋檐下耐心等待。等待的过程也许是生活中难得的纯粹的仪式，因为静坐听雨的意境在当代实在是少的可怜，就连裤腿被大雨淋湿的触感都变得弥足珍贵。</p>\n<p>雨后，空气中会有清爽的纯粹，世界接受清洗之后，无论是借着日光还是霓虹，路面倒映出的射影，是世界的另一种面貌，印着纯粹二字。</p>\n<p>但我并不知道纯粹为何物，它是最狡诈多变的一个词。在我有不同的情感时，思考不同的问题时，面临不同的选择时，它是我最后的仪仗，是我追求的东西，尽管为此我注定没有方向。</p>\n<p>我不知道小时候庐山上的蓝天白云与我的无忧无虑算不算纯粹，也许无忧无虑只是假象，是人丢掉一段时间内的大部分记忆的一种自然而然的感受。我马上21了，在我以1开头的年岁里，我的确很少看到记忆中的那种蓝天了。在熬过二月的阴雨之后，最近武汉的天气晴空万里，就连今天早上阴沉潮湿的墨绿在我中午再一次以相同的视角观望时都已经消失殆尽了，但蓝天上仍然有一层阴霾，蓝的并不纯粹，而我已经习惯了这种蓝，并且也开始用湛蓝形容它。没事的时候我也会在教五门口的广场上休息，或者在万林艺术馆的天台上坐着以一个不至于让太阳抢去风头的角度欣赏蓝天，我为这种天气而欣喜，但内心中又似乎对一场夏天的雷雨更为期待。我不知道是因为暴雨真的能够洗刷世界，还是因为我仅仅期待那雨声给我带来的视觉、听觉再到触觉的全方位的模拟，能够带我回到小时候，或者说情感更加纯粹的年岁。</p>\n<p>现在外面天很黑，皓月当空，高悬东方，在宿舍门口我看到有人在用微单拍摄。我很遗憾单反不在身边，同时又很庆幸单反不在身边。我尝试用手机对这个美丽的夜色进行记录，但最后发现它只属于我的眼睛，属于在我记忆中注定渐渐消散的那一块区域。我很快会把昨晚的雨、清晨的绿以及东方的月这些印记着今天的一切特征给淡忘，因为未来还会有无数个相同的日子，武大的樱花会一直开下去，我的路，我的追求，我的思考也不会停下，至死方休。时不时想想上一个今天自己对纯粹的定义，也许会发现愚蠢，也许会发现美丽，但更重要的是找到不同日子纯粹变化的轨迹。文字的意义总会是虚无缥缈的，但追求的东西如果套用一个词来表达的话我认为总不至于两个时间的方向会是南北迥异的吧。</p>\n<p>说句实话，我想家了。</p>\n<p>人只有在意识到自己脆弱的时候才会顿生羁旅之情。</p>\n<p>但也从来没有用羁旅表达自己状态的人会停下脚步。</p>\n<blockquote>\n<p>记于 19.3.20 武汉</p>\n</blockquote>\n"},{"title":"务虚时代下的国贼——李鸿章","date":"2020-03-04T04:17:16.000Z","fileName":"Li_Hongzhang","_content":"<center>一</center>\n\n近日看老剧《走向共和》，其前半段多以李鸿章之视角演绎，李鸿章何许人也，若非要集这百年悠悠之口套出几个词来，想必就是汉奸卖国贼之类的了，至少用于普及基本历史常识的历史课本中，作为百年国耻代表的《马关条约》与《辛丑条约》之上，就铸着该君的名字，所以这样说也没错。\n\n所谓汉奸，所谓卖国贼，这两个词至少在中华文化体系下是一种性质非常恶劣的词了吧，这与百年辛酸史，或者说在国家危亡之际国人对所谓“忠臣名将”的向往是分不开的，无论何人，无论何时，只要在身份认同上认为自己是中国人的，对待这些人都可以堂而皇之的啐一口唾沫，道一声“呸”。因为在我们中国人眼中，对历史的“通俗看法”（所谓通俗看法，是指不专门研究某一段历史的普通人，对身处该时段历史人物的主观看法，或说评价）是有底线和顶线的，底线想必就是卖国攘民等龌龊行径了，而顶线就是所谓为国请命的英雄们了，或者说以死明志的气节。当然除此之外，在看待历史人物时，顶线与底线往往还联络着主角道德的好与坏。\n\n<center>二</center>\n\n底线之下，无论之前干过什么，无论这个人作为一个人来讲怎么样，都不值得原谅，参考秦桧与汪精卫（前者还跪着呢）；而顶线之上，有所作为当然更好，但似乎事情做没做成也没有太大所谓，死谏，不趋附权贵，最好再带点文采写些个正气凛然的东西或者稀里糊涂的处在一段展现美好品行的故事中心，都值得树碑立传，万世景仰（至少在大部分国人心目中此类人物的形象是好的），参考孔融。\n\n底线之下，无甚好说，做了过分引人注目的坏事情，难道还会有很多人愿意去考虑你干这坏事之前的心路？大部分人会憎恶你，少部分脑袋勤快点的人会在憎恶中加上一些同情，还有极小部分人会把你当成一个工具，表达他们“看清事实”与“与众不同”的工具，这一类人不谈也罢，他们不懂得当瑕疵多到一种程度时，瑕不掩瑜这个词是不适用的。\n\n但顶线之上就会有一些问题了，在史书中活成这一类的人心念一动就能想出很多，他们大部分都可以作为鲁迅先生笔下我中华的脊梁，但我偏偏把孔融放在这里，为何呢？是因为我想说明这条适用于大众的对历史人物看法的惯性思维多半有些不客观。“孔四岁，能让梨”，这是大部分人都清楚的故事，别的不说，我在痴迷三国的那个年龄，总还是把孔融当成个人物的。但稍稍读点书，以今日之眼光，想瞧得上孔融这个人实在是难，可他却在未来的两千年里享尽英德之名，被无数父母当作启蒙孩子的一个典范，与古往今来无数仁人志士枭雄豪杰并排而立，我以为实在是忝列其中啊。\n\n<center>三</center>\n\n让一个梨便得以流芳千古，这个梨也实在是贵的很啊，让梨这个操作也算是东汉末年一个最成功的炒作了吧。但我实在是不明白大一点的梨子是孔融吃掉还是他哥哥吃掉到底对他们一家或者说对他们兄弟二人能有多大干系呢。非要说的话，难道梨子在东汉越大越香？而大到一定程度会产生口感上的质变？还是一个天生不太喜欢吃梨子的小孩在东汉不太常见？\n\n我以为是后者，毕竟在一个百姓连饭都吃不饱的时代，产生一个类似孔融这种不喜欢梨的小孩实在是困难，这也是保证这件事合理性的唯一解释了，不然孔融一家想必都有癔症。\n\n但遗憾的是，事实来看他们一家就是有癔症，也许是遗传的吧。毕竟硬要说的话，他们的老祖宗孔丘也有癔症，但孔夫子的癔症到底是在我这个两千多年后的后生眼里才能得见的，在孔夫子那个时代就算是癔症也多少有些可爱。但一种病毒也许两千年前无伤大雅甚至可以说是可爱，到一千年前病毒几经变异变成了值得称颂的一个身体特征，而到了一百多年前当一个群体把感染了这个病毒当成荣耀并认为人人便该如此的时候，来了另一群没得病且更强壮的人使得感染这个病毒变成了自然选择的一个逆选项时，有一些病人开始尝试治病但囿于同胞掣肘与病毒几经进化下的狡诈以及自身体内病毒的顽固，失败了，对于这种人，在考虑失败后果之前，我以为首先得感慨一下其知其不可而为之的勇气，至少这是我尊敬孔子的一个重要原因，也是我认为对卖国贼李鸿章，有必要进行另一番议论的原因。\n\n<center>四</center>\n\n以上所述的“癔症”，我想与今年的新冠肺炎多少有些类似，症状复杂容易变异，只是这癔症并不作用在生理上而是作用在精神上。其症状很多，五花八门，但我今天想谈谈的只有务虚。\n\n就像孔融让梨得到赞扬一样，赞扬的不是让梨这个动作而是其谦让的品德。我从不否认谦让是个美德，但让一个历史上实实在在活生生的人，因为这样一个简单的动作就成为了根植一个名族内心千年的道德符号，我认为实在是荒谬了些，哲学上喜欢将一件事情推到极端而后再观察其是否仍然符合某一标准，而长大后的孔融倒着实使这个荒谬的意味更深了些。\n\n几乎没有付出任何代价与个人的努力，一件名门世家随意记录的小小的事情，让一个人毫不费力收获了也许是古往今来来自孩子和家长们最多的赞誉，这不是偶然，而是自先秦到清末国人一直存在的务虚观念，几个小小的汉字，所谓仁义礼智信孝廉，都是好的优秀的修身品德，也从来都是封建时代的国人精英们竞相模仿参照的对象，可仔细想想，这几个字有所谓放之四海而皆准的具体的标准与定义吗？是所谓的标准管用还是历代大儒帝王的一声惊叹或者流传坊间的一段传奇更加管用呢？普通人是实实在在的做事更能得到赞扬还是卧冰求鲤式的“作秀”更能得到赞扬呢？\n\n这些品德确立之初的好坏我无从得知，但由于上述文字解释权等原因，这几个字或者说我中华中世纪所追求的那些抽象的概念，渐渐变为了权力与利益的代言人，成为了统治者所谓推行“王治”的工具（与其说是王治，不如说是愚民）。而随着皇权的愈加集中，传播这些务虚概念的工具，即我们引以为傲的科举，使得无数中世纪乃至近代的国人精英沦为了务虚的奴隶，深陷囹圄而自以为自由（李鸿章有改变很多事物的资本，但他囿于所谓忠君之类的概念敷衍其事含糊其词，想必也是务虚已入骨髓矣）。在没有西方文化冲击的情况下，整个民族和国家都浸沐在这务虚的汤药中，难以自拔。\n\n我本身是一个很懒惰的人，所谓磨洋工的一把好手，所以倘若我在百年千年前的话，肯定会变着花样以把自己弄死为标准去对应这些百姓追求统治者喜欢的概念，也许周围正好来了个大儒书圣，听说了我的故事的话还能把我的事迹记录一些，这样“流芳百世”的难度的确是大，但想必也比实干勤学的概率要大的多，还省去了不论是脑力还是体力带来的困难与麻烦，整不好运气更好点倒是能成为孔融一样的道德符号，实在是妙啊，妙不可言。\n\n既然务虚便能带来一切能够自我宽慰还得社会认可的东西，那作为贵族官员干嘛要务实呢？留着指甲，以商贾为耻，以农桑为耻，以一切实干为耻（当然社会是需要人做实事的，但做实事在我们的文化里受待见吗？所谓君子远庖厨，历朝历代各个英雄豪杰当然也有很多实干的，但实干的基础仍然是这个务虚的社会，这本身就给这个实干抹上了一层务虚的阴影），专注虚妄的经学便能高人一等，有文才胸富万经的为官一处自是高高在上，没有这个本事的寒窗苦读一番也能落个“读书人的偷能叫偷吗”的阿Q式精神胜利，在精神上又是高高在上，都是高高在上，在1793年英国使团来华时是高高在上，在19世纪被英国揍、被日本揍之后还是高高在上。永远都是高高在上，这一词也许便能概括李鸿章一生大部分清廷官员的心理了吧，即使对洋人卑躬屈膝，对着百姓照样还是高高在上，照样是所谓“牧民于野”的当代俊杰。\n\n欺民，罔民，愚民，却将这种行为解释为王化，“王化”过后便使牧民如放牧牛羊那般简单（如此看来儒家的王治倒是能够作为畜牧业一个很好的理论），古语中的这个“牧”字用的很是精髓啊。这也概括了务虚之道能够得以盛行，国人能够自欺欺人的原因，在这样一个务虚时代之末，则有国贼李鸿章。\n\n<center>五</center>\n\n梁任公先生在1901年为李鸿章做的传记里，有这样一段话：\n\n>*夫李鸿章果足称为中国第一人与否吾不敢知，而要之现今五十岁以上之人，三四品以上之官，无一可以望李之肩背者，则吾所能断言也。李之死，于中国全局有关系与否吾不敢知，而要之现在政府失一李鸿章，如虎之丧其伥，前途岌岌，愈益多事，此又吾所敢断言也*\n\n加之记述一下李鸿章光绪元年所上之奏疏：\n\n>*近时拘谨之儒，多以交涉洋务为涴人之具；取巧之士，又以引避洋务为自便之图。若非朝廷力开风气，破拘挛之故习，求制胜之实际，天下危局，终不可支，日后乏才，且有甚于今日者。以中国之大，而无自立之时，非惟可忧，抑亦可耻*\n\n摘录至此，不由扼腕感慨百多年前洋务之艰难，掣肘之猖獗。\n\n引避洋务以自便，多轻松的自便之法啊，从前务虚以留其名，尚且还得付出诸多代价，而洋人来了后为一个高风亮节之名，却只需对奇技淫巧表达不屑，对操办洋务以自强求富之人以鄙夷眼光视之。多轻便啊，居庙堂之高则上书参劾，处江湖之远则煽民怨怼，永远站在务虚下道德的制高点，倒颇像今天的键盘侠，下笔滔滔如有千言，若问韬略胸无一策。可惜的是今天的键盘侠倒是稍讲道理的人就会心生厌恶，而那个时代做一个真正杀人的键盘侠倒成了政治正确。\n\n而“求制胜之实际”这句话倒着实让我奇怪，我实在不知道制胜的实际为什么要求。在一个逝者如斯夫的三维世界，什么东西都是一锤子买卖，制胜难道还有实际与不实际的分别？一个管理着四亿五千万人口的朝廷，于国事竟要以“实际”与否为争论点，实在荒唐（也许以往务虚之实际对洋人不管用吧，毕竟洋人大部分人都不给你“牧”，明明这才是现在看来正常的表现到了晚清士大夫眼中成了蛮夷无廉耻的表现，估计他们也很苦恼吧），也难怪任公先生有以上断言了。\n\n这就是那个时代我国的头号国贼了，倒不知他卖的国是虚妄概念上的国还是实际意义上的国了，不知道满清朝廷在马关之后的朝堂上有没有这一议论。\n\n<center>六</center>\n\n说李是国贼的论据，我以为归纳起来大约有四个大点。其一为边防塞防之争；其二为甲午战争之败；其三为辛丑条约之耻；其四为死后余产之巨。针对这几点，我也想简单谈谈我的看法。\n\n关于边防塞防之争，以今日结果的眼光来看李鸿章所谓的“放弃新疆”自然是妥妥卖国行为，引述其作此决策的理由大致如下：\n\n>*历代备边，多在西北，其强弱之势，主客之形，皆适相埒，且犹有中外界限。今则东南海疆万余里，各国通商传教，往来自如，麇集京师，及各省腹地，阳托和好之名，阴怀吞噬之计，一国生事，诸国构煽，实为数千年来未有之变局。轮船、电报之速，瞬息千里，军器、机事之精，工力百倍，又为数千年来未有之强敌。外患之乘，变幻如此，而我犹以成法制之，譬如医者疗疾，不问何症，概投之以古方，诚未见其效也*\n\n彼时背景正为日本寻衅侵略台湾，海防压力巨大，若忽略新疆一事，我以为兴建海防实在算是清末洋务少有的高瞻远瞩之举了，而对于新疆问题，李鸿章倒似乎想以外交途径解决（这也是他的惯用伎俩了，甲午之败这也是因素之一）。唉，彼时之人哪里懂得弱国无外交的道理呢，如此看来若无左宗棠收复新疆，也许新疆在那时候就成为了永远收不回的东三省了吧（九一八事变后民国政府也企图通过外交途径解决东北问题）。\n\n也正应如此，世人往往厚左而薄李，但以我之见，左宗棠与李鸿章并无大分别，李并非一意放弃塞防而是以为边防更为紧迫，而左亦非务虚守旧之人，只是认为新疆之失已迫在眉睫而海上之难尚可以时日斡旋。边防塞防之争，与其说是善恶之争，倒不如说是厉害得失之争。可叹啊，百年后的课本中，左宗棠成了英雄，而李鸿章却成了国贼，实在只是命长与命短的分别啊。\n\n而对甲午战争之败，我没有什么好说的，整个战争我仿佛看到的不是战争，而是一帮小孩在拿人命、鲜血与一个民族的尊严为筹码玩过家家，仿佛这个国，不是实际意义上的国。世人皆知甲午海战北洋水师全军覆没，是以为耻，却不知陆军在朝鲜更是一败涂地。对此战的总结梁任公先生在为李所作传记中已经分析的很透彻了，我不再赘言，遂摘录如下。\n\n>*当中日战事之际，李鸿章以一身为万矢之的，几于身无完肤，人皆欲杀。平心而论，李鸿章诚有不能辞其咎者，其始误劝朝鲜与外国立约，昧于公法，咎一；既许立约，默认其自主，而复以兵干涉其内乱，授人口实，咎二；日本既调兵，势固有进无退，而不察先机，辄欲倚赖他国调停，致误时日，咎三；聂士成请乘日军未集之时，以兵直捣韩城以制敌而不能用，咎四；高升事未起之前，丁汝昌请以北洋海军先鏖敌舰，而不能用，遂令反客为主，敌坐大而我愈危，综其原因，皆由不欲衅自我开，以为外交之道应尔，而不知当甲午五六月间，中日早成敌国，而非友邦矣，误以交邻之道施诸兵机，咎五；鸿章将自解曰：量我兵力不足以敌日本，故惮于发难也。虽然，身任北洋整军经武二十年，何以不能一战？咎六；彼又将自解曰：政府掣肘，经费不足也。虽然，此不过不能扩充已耳，何以其所现有者，如叶志超、卫汝贵诸军，素以久练著名，亦脆弱乃尔，且克减口粮盗掠民妇之事，时有所闻，乃并纪律而无之也，咎七；枪或苦窳，弹或赝物，弹不对枪，药不随械，谓从前管军械局之人皆廉明，谁能信之，咎八；平壤之役，军无统帅，此兵家所忌，李乃蹈之，咎九；始终坐待敌攻，致于人而不能致人，畏敌如虎，咎十；海军不知用快船快炮，咎十一；旅顺天险，西人谓以数百兵守之，粮食苟足，三年不能破，乃委之于所亲昵阘冗恇怯之人，闻风先遁，咎十二。此皆可以为李鸿章罪者。若夫甲午九十月以后，则群盲狂吠，筑室道谋，号令不出自一人，则责备自不得归于一点。若尽以为李鸿章咎，李固不任受也。又岂惟不任受而已，吾见彼责李罪李者，其可责可罪，更倍蓰于李而未有已也。是役将帅无一人不辱国，不待言矣。然比较于百步五十步之间，则海军优于陆军，李鸿章部下之陆军，又较优于他军也。*\n\n战争之后，尚有广东水师向日本索要被俘舰只，理由竟是此次战役与广东无涉。荒唐至此，毫无国家民族观念，以五十步笑百步之典，李倒着实是那五十步之人，但一个国家只有五十步与百步的分别，岂不谬哉！\n\n至于辛丑条约，我以为无甚好说，前两者对李都有切实可责可恨之处，凡是认为李无一点错误责任，无一点卖国嫌疑者都是巧言令色之人。惟此辛丑条约，说李是代国背锅言辞尚可牵强而去。只是可惜可恨啊，面对务实之世界，务虚者仍活在往日虚幻的天朝大国的旧梦里，可惜是针对那时被虚妄的概念奴役却自以为自由的愚民，可恨是针对朝堂上自私自利毫无理性的那几家几姓。\n\n最后也就是死后遗产之巨了，关于这个我没有观点，也没做什么考证，四千万家产的言论没有什么根据，但清正廉洁的说法也就是自娱自乐了，而对于因为李鸿章财产甚多而输了甲午战争的言论，我也无话可说，见解如此，与键盘侠无异。以下摘录任公所作传记中的一段话，仁者见仁，智者见智吧。\n\n>*世人竞传李鸿章富甲天下，此其事殆不足信，大约数百万金之产业，意中事也。招商局、电报局、开平煤矿、中国通商银行，其股份皆不少，或言南京、上海各地之当铺银号，多属其管业云*\n\n以上四点，第一、第三、第四点我认为以此为依据对李进行口诛笔伐只是视李为国贼带来的惯性思维所致，即在摆出论据之前心中已有答案，而后用这些论据中的点去套已有的结论。这样做虽然看起来不够客观，但我认为实在是人心所向。而第二点则是“国贼论”的核心，也是李鸿章以及所谓大清帝国的转折点吧，在这一点上李鸿章有直接责任。从前被英法等一流列强欺负，但装饰门面倒还对的起“帝国”这两个字的隐形含义，今而兴洋务练出的新军在日本人面前不堪一击，以使敌人在朝鲜都不相信战胜的就是所谓清廷按照西法练成的精锐部队。\n\n由此看来，这些活在近代的中古士大夫在务虚本领之上倒还是实在的啊，能够做到让外人不辨雌雄。\n\n<center>七</center>\n\n对李鸿章，梁任公先生总结其为“时势所造之英雄，非造时势之英雄”，又对其一生事迹评价为“不学无术，不敢破格，是其所短也；不避劳苦，不畏谤言，是其所长也”。\n\n是英雄造时势还是时势造英雄，这一直可以视为是一个悖论问题，这一问题有诸多解法的原因其实也只是因为对英雄与时势有诸多不同的定义与见解而已。\n\n英雄是什么，一怒之下伏尸百万流血千里的应该能算，这是就其权威而论的；率性任侠义气为先的想必也能算，这是就其个性担当而言的；富国强兵振兴朝政的一定能算，这是就其能力而论的；而为国请命鞠躬尽瘁死而后已的也一定能算，这是就其一片赤子之心而论的。这四点似乎都没错，但偏偏国贼李鸿章似乎与后三点都沾些边，对部下讲情义，为国事不避艰难，临死之前尚在为国事操心，按这个道理，他该是英雄啊，在通俗历史评价上他该是顶线以上的人啊，怎么会落得底线以下的看法与待遇呢？还是引用任公先生的话。\n\n>*十九世纪列国皆有英雄，而我国独无一英雄，则吾辈安得不指鹿为马，聊自解嘲，翘李鸿章以示于世界曰，此我国之英雄也。呜呼！亦适我国之英雄而已矣，亦适成为我国十九世纪以前之英雄而已矣*\n\n是啊，自始皇帝嬴政开创中央集权政体之日起，五经四书浸染之下的千年务虚时代，又哪有什么英雄造时势的事情呢？始皇殁后有项羽，一个勇武过人的英雄在乎的是如何让锦衣不夜行，在意这种虚妄的概念使他重新推行分封。后有刘邦，有曹操，有李世民，有赵匡胤，有朱洪武，再有所谓康乾盛世，有所谓同治中兴，那么多个皇帝之下有那么多个能人猛士堪称英雄，可有谁真正造就过时势吗？似乎有，如周瑜赤壁的那一把火，似乎又没有，因为我只看到了一个个朝代的更替与牧民锁链的加重。也许以百年局部的眼光来看，总有公瑾一般的豪杰改造时势，但以千年民族国家的眼光来看，十九世纪前所谓的英雄，不过是在同一片天空之下翻手为云覆手为雨罢了，他们从没有改天换日的见识与气魄。\n\n话虽这样说，但英雄在他们的时代仍然是英雄，非要以今日之眼光视昨日之旧人未免落入历史虚无主义的窠臼。而对李鸿章以国贼的态度进行苛责，与此同理，无非是以今日之评价观点视旧时之英雄罢了。在对李一系列失误的讨论之外，我认为不应该让一个旧时代的先行者为他所处的整个时代背锅。\n\n但话又说回来，这样一个不避劳苦的旧时代先行者，究其一生却为何在历史上仍落个身败名裂的下场呢？\n\n千年务虚时代，治经论典自然是务虚，可人毕竟是活在现实世界的啊，“务实”必不可少，闻鸡起舞者有之，改政变法者有之，“格物致知”者亦有之，为何集数千年这亿万之人，却无一个堪当变务虚时势为务实的英雄呢？自是千年务虚痼疾已深，不彻底打碎更变实在是无从谈起啊。否定了这一点，就是对20世纪我们中国人长达一个世纪的更革奋斗视而不见。\n\n而以李鸿章为汉奸国贼者，必为甲午之败辛丑之耻痛惜扼腕，仿佛杀李则能改变战局避免国耻，而清廷则仍是堂堂正正的大清帝国，这实在是癔梦啊。想当造时势之英雄，则必须要能真正的打破务虚学而有术，这在当时几乎是与整个千年文化积习为敌，事实证明李鸿章这种务虚时代的实干家不行，翁同龢这种务虚时代的所谓君子、康有为这种务虚时代所谓的改革家都不行，那些务虚时代的小人就更不必说了。\n\n以李鸿章之务实敢干不辞辛劳生于务虚时代都难以学而有术，洋务半生尚“不识国民之原理，不通世界之大势，不知政治之本原”，一生兢兢业业如履薄冰都难以在后世摆脱一个“国贼”的骂名，可见务虚痼疾程度之深了。以务虚时代之英雄而成务实时代之国贼，英雄和国贼果然有所谓巨大的间隙吗？还是李鸿章生平前后的主流文化之间有这般巨大的间隙呢？这百年来，那么多只如鲁迅先生般的如椽巨笔，才堪堪扭转千年痼疾在人心中的荼毒之深，将这种荼毒所表现出的后果让李一人一力承担，我觉得实在是肤浅过分的言论。\n\n唉，以旧英雄之身份而成新时代之国贼，以今日之眼光，到底该视为李鸿章的过错还是千年务虚文化的过错呢？\n\n<center>八</center>\n\n作为一个中国人，对历史总会心存一些假如（毕竟有强汉盛唐，现在的口号也还是复兴）。总有人会说满清误国，认为遇上19世纪那千年未有之变局的假如不是满清朝廷而是汉人王朝情况会完全不同；也有人会想若遭遇此事的中国统治者不是咸丰，不是光绪，不是慈禧，而是秦皇汉武唐宗宋祖，结局也会不一样；还有人说明朝的资本主义萌芽是被满清给消灭的，否则中国也会自然而然的成为近代西方那样发达的资本主义国家。\n\n诸如此类的想法很多，但历史没有偶然，即使有偶然，在一个模拟器中能够重现历史，让那些明君圣君放弃一家一姓特权，让那些世家门阀放弃所有地方权益的概率能有多少呢？即使有人真的愿意，他能够扳的过整个旧文化的手腕吗？（过继当上皇帝的想尊自己的生父历朝历代士大夫都会罗里吧嗦的，没有点手腕的皇帝连这种事都搞不定，即使手腕通天难道能搞定整个文化变革的事情吗？因此在中国这种务虚文化的千年体系下，自上而下的改革是不可能行的通的，想变革只有改变一个民族的思想，这又哪里是一个人能够办得到的呢），孟子说过“人之所以异于禽兽者几希，庶民去之，君子存之”，孟子当然是惯于骂人禽兽，而放弃他这种庶民君子的成见，还智于百姓，让“君子”与“禽兽”平起平坐，历代有君王与权臣能够做到吗？（也许中国能够依赖如明治天皇那样的明君通过变革依靠广阔的土地在19世纪成为列强，但这种强国方式与英美等国还是有根本区别，日本明治维新后是变强了，但仍然有华族这种旧时代产物，我以为仍然带着野蛮不理性的气息，以中国之大，如此，更甚矣，仍然只会成为如沙皇俄国那样的纸老虎）王莽的改制引来了千古骂名只是因为其制过激而使掣肘过厉，而“科举”的产生也只是得益于旧门阀势力的削弱，而这种削弱，无不是血与铁的结果，而后再看19世纪末李鸿章所遭之非议，守旧势力在19世纪到20世纪的关口还指望着把洋人赶走继续上古时期的统治方法。这是他们幼稚吗？不是，实在是千年务虚积疾过深，使得四万万国人人人为鸵鸟而不自知，大才如严复尚且崇尚科举，务实如李鸿章尚且惋惜自己一生没做成军机大臣。\n\n在这种千年务虚观念深入骨髓的情况下，小修小补有用吗？剜肉补疮有用吗？我看把血全换了都未必有用。在这种情况下，将千年务虚积累下导致的癔病产生的痛苦全部归咎给李鸿章这种只会小医小补的郎中，合理吗？骂李是国贼，那必须带上当时满朝文武，带上当时被欺罔了数千年的四万万百姓，带上数千年政治文化风俗的方方面面。雪崩之时，没有一片雪花是无辜的，但作为压死骆驼的最后一根稻草，难道李鸿章留给历史的意义只是让后人怒斥痛骂吗？\n\n十九世纪以前的英雄，配上了务虚思想引导下的务实，却成了日后人们眼中的国贼，应该感到悲哀吗？不应该感到悲哀吗？对着那个由务虚向务实转化的时代，是继续痛斥那务虚时代下的国贼或者说英雄，还是应该对我们19世纪以前的文化多做一些反思呢？\n\n后者，我以为才是李鸿章这个历史车轮扭动间隙下产生的矛盾人物该给我们带来的意义。\n\n<center>后记</center>\n\n本文基本可以视为是《走向共和》电视剧前半段以及梁任公先生的传记《李鸿章》的观后感吧，写之前没想过要什么纲领也没有确定什么中心论点，写到现在洋洋洒洒有八千多字，也渐渐形成了一个很不清晰的脉络吧。\n\n全文的中心其实也就是以李鸿章个人在通俗历史评价上的矛盾为引，引出对19世纪前中华传统文化的反思吧。一个代表着那段历史的人物，以两种文化的眼光看待，会得出英雄和国贼两个迥异的看法，这种激烈的矛盾也着实可以说明旧文化的一些荒谬之处了。\n\n当然全文只是借用了务实与务虚这一对矛盾在19世纪末那个节点上所爆发出来的强弱态势，并没有对中西文化或者说中国传统文化与现代文化进行所谓优劣对比及形成原因说明。因为非要进行详细的对比说明的话，我认为恐怕得从先秦思想和古希腊哲学的迥异说起，那话题就大了，所以全文对这种矛盾在我国中世纪的表现仅仅以叙代议，所表达的仅仅只是矛盾本身而不是对矛盾产生原因的分析论证。\n\n全文以李鸿章为引，但对李鸿章一生的事迹仅仅摘捡了其作为国贼原因的几个大点论述，如果对李鸿章或那个时代感兴趣，着实推荐任公先生的传记《李鸿章》（即《同光以来大事记》），其文作于1901年李鸿章死后不久，集合了那个时代的视角与梁公极其客观的评价，我认为堪称是了解李鸿章的第一手资料，也是了解那个时代的一个不错的POV。\n\n再来谈谈文章的另一个引子孔融，也许以知人论世而言他该算是在文学上卓有成就（建安七子之首），气节上也不错（堪称魏晋风骨，虽然我以为孔融这种气节不要也罢）。我在文章中如此苛责他说实话与大众苛责李鸿章也许没有什么本质的区别吧，要说区别，其实也是因为孔融所代表的这种务虚做派着实让我disgusting吧（细细想来，古人会写字的不多，所以键盘侠才会如此弥足珍贵吧），之前读过一些孔融的史料，有机会会写写我为啥那么不喜欢孔融，在此不再说明了。\n\n最后，谈谈为何我写着写着就以务虚作为一个主线了吧，这个原因说来惭愧，实在是自己的务虚行为所致，如今三月，还有三个月本科就该画上句号，但纵观自己这四年，基本没干成什么实在的事情（书读的好当然是实在的，游戏打出了名堂也是实在的啊，唯独什么都没做的像样倒是值得思考的一个点），遂作此文以自勉。\n\n子夜，记于2020.3.4 九江。希望疫情退散武汉加油。","source":"_posts/杂谈杂想/杂谈/务虚时代下的国贼——李鸿章.md","raw":"---\ntitle: 务虚时代下的国贼——李鸿章\ndate: 2020-03-04 12:17:16\ntags:\n    - 杂谈\ncategories:\n    - 杂谈杂想\n    - 杂谈\nfileName: Li_Hongzhang\n---\n<center>一</center>\n\n近日看老剧《走向共和》，其前半段多以李鸿章之视角演绎，李鸿章何许人也，若非要集这百年悠悠之口套出几个词来，想必就是汉奸卖国贼之类的了，至少用于普及基本历史常识的历史课本中，作为百年国耻代表的《马关条约》与《辛丑条约》之上，就铸着该君的名字，所以这样说也没错。\n\n所谓汉奸，所谓卖国贼，这两个词至少在中华文化体系下是一种性质非常恶劣的词了吧，这与百年辛酸史，或者说在国家危亡之际国人对所谓“忠臣名将”的向往是分不开的，无论何人，无论何时，只要在身份认同上认为自己是中国人的，对待这些人都可以堂而皇之的啐一口唾沫，道一声“呸”。因为在我们中国人眼中，对历史的“通俗看法”（所谓通俗看法，是指不专门研究某一段历史的普通人，对身处该时段历史人物的主观看法，或说评价）是有底线和顶线的，底线想必就是卖国攘民等龌龊行径了，而顶线就是所谓为国请命的英雄们了，或者说以死明志的气节。当然除此之外，在看待历史人物时，顶线与底线往往还联络着主角道德的好与坏。\n\n<center>二</center>\n\n底线之下，无论之前干过什么，无论这个人作为一个人来讲怎么样，都不值得原谅，参考秦桧与汪精卫（前者还跪着呢）；而顶线之上，有所作为当然更好，但似乎事情做没做成也没有太大所谓，死谏，不趋附权贵，最好再带点文采写些个正气凛然的东西或者稀里糊涂的处在一段展现美好品行的故事中心，都值得树碑立传，万世景仰（至少在大部分国人心目中此类人物的形象是好的），参考孔融。\n\n底线之下，无甚好说，做了过分引人注目的坏事情，难道还会有很多人愿意去考虑你干这坏事之前的心路？大部分人会憎恶你，少部分脑袋勤快点的人会在憎恶中加上一些同情，还有极小部分人会把你当成一个工具，表达他们“看清事实”与“与众不同”的工具，这一类人不谈也罢，他们不懂得当瑕疵多到一种程度时，瑕不掩瑜这个词是不适用的。\n\n但顶线之上就会有一些问题了，在史书中活成这一类的人心念一动就能想出很多，他们大部分都可以作为鲁迅先生笔下我中华的脊梁，但我偏偏把孔融放在这里，为何呢？是因为我想说明这条适用于大众的对历史人物看法的惯性思维多半有些不客观。“孔四岁，能让梨”，这是大部分人都清楚的故事，别的不说，我在痴迷三国的那个年龄，总还是把孔融当成个人物的。但稍稍读点书，以今日之眼光，想瞧得上孔融这个人实在是难，可他却在未来的两千年里享尽英德之名，被无数父母当作启蒙孩子的一个典范，与古往今来无数仁人志士枭雄豪杰并排而立，我以为实在是忝列其中啊。\n\n<center>三</center>\n\n让一个梨便得以流芳千古，这个梨也实在是贵的很啊，让梨这个操作也算是东汉末年一个最成功的炒作了吧。但我实在是不明白大一点的梨子是孔融吃掉还是他哥哥吃掉到底对他们一家或者说对他们兄弟二人能有多大干系呢。非要说的话，难道梨子在东汉越大越香？而大到一定程度会产生口感上的质变？还是一个天生不太喜欢吃梨子的小孩在东汉不太常见？\n\n我以为是后者，毕竟在一个百姓连饭都吃不饱的时代，产生一个类似孔融这种不喜欢梨的小孩实在是困难，这也是保证这件事合理性的唯一解释了，不然孔融一家想必都有癔症。\n\n但遗憾的是，事实来看他们一家就是有癔症，也许是遗传的吧。毕竟硬要说的话，他们的老祖宗孔丘也有癔症，但孔夫子的癔症到底是在我这个两千多年后的后生眼里才能得见的，在孔夫子那个时代就算是癔症也多少有些可爱。但一种病毒也许两千年前无伤大雅甚至可以说是可爱，到一千年前病毒几经变异变成了值得称颂的一个身体特征，而到了一百多年前当一个群体把感染了这个病毒当成荣耀并认为人人便该如此的时候，来了另一群没得病且更强壮的人使得感染这个病毒变成了自然选择的一个逆选项时，有一些病人开始尝试治病但囿于同胞掣肘与病毒几经进化下的狡诈以及自身体内病毒的顽固，失败了，对于这种人，在考虑失败后果之前，我以为首先得感慨一下其知其不可而为之的勇气，至少这是我尊敬孔子的一个重要原因，也是我认为对卖国贼李鸿章，有必要进行另一番议论的原因。\n\n<center>四</center>\n\n以上所述的“癔症”，我想与今年的新冠肺炎多少有些类似，症状复杂容易变异，只是这癔症并不作用在生理上而是作用在精神上。其症状很多，五花八门，但我今天想谈谈的只有务虚。\n\n就像孔融让梨得到赞扬一样，赞扬的不是让梨这个动作而是其谦让的品德。我从不否认谦让是个美德，但让一个历史上实实在在活生生的人，因为这样一个简单的动作就成为了根植一个名族内心千年的道德符号，我认为实在是荒谬了些，哲学上喜欢将一件事情推到极端而后再观察其是否仍然符合某一标准，而长大后的孔融倒着实使这个荒谬的意味更深了些。\n\n几乎没有付出任何代价与个人的努力，一件名门世家随意记录的小小的事情，让一个人毫不费力收获了也许是古往今来来自孩子和家长们最多的赞誉，这不是偶然，而是自先秦到清末国人一直存在的务虚观念，几个小小的汉字，所谓仁义礼智信孝廉，都是好的优秀的修身品德，也从来都是封建时代的国人精英们竞相模仿参照的对象，可仔细想想，这几个字有所谓放之四海而皆准的具体的标准与定义吗？是所谓的标准管用还是历代大儒帝王的一声惊叹或者流传坊间的一段传奇更加管用呢？普通人是实实在在的做事更能得到赞扬还是卧冰求鲤式的“作秀”更能得到赞扬呢？\n\n这些品德确立之初的好坏我无从得知，但由于上述文字解释权等原因，这几个字或者说我中华中世纪所追求的那些抽象的概念，渐渐变为了权力与利益的代言人，成为了统治者所谓推行“王治”的工具（与其说是王治，不如说是愚民）。而随着皇权的愈加集中，传播这些务虚概念的工具，即我们引以为傲的科举，使得无数中世纪乃至近代的国人精英沦为了务虚的奴隶，深陷囹圄而自以为自由（李鸿章有改变很多事物的资本，但他囿于所谓忠君之类的概念敷衍其事含糊其词，想必也是务虚已入骨髓矣）。在没有西方文化冲击的情况下，整个民族和国家都浸沐在这务虚的汤药中，难以自拔。\n\n我本身是一个很懒惰的人，所谓磨洋工的一把好手，所以倘若我在百年千年前的话，肯定会变着花样以把自己弄死为标准去对应这些百姓追求统治者喜欢的概念，也许周围正好来了个大儒书圣，听说了我的故事的话还能把我的事迹记录一些，这样“流芳百世”的难度的确是大，但想必也比实干勤学的概率要大的多，还省去了不论是脑力还是体力带来的困难与麻烦，整不好运气更好点倒是能成为孔融一样的道德符号，实在是妙啊，妙不可言。\n\n既然务虚便能带来一切能够自我宽慰还得社会认可的东西，那作为贵族官员干嘛要务实呢？留着指甲，以商贾为耻，以农桑为耻，以一切实干为耻（当然社会是需要人做实事的，但做实事在我们的文化里受待见吗？所谓君子远庖厨，历朝历代各个英雄豪杰当然也有很多实干的，但实干的基础仍然是这个务虚的社会，这本身就给这个实干抹上了一层务虚的阴影），专注虚妄的经学便能高人一等，有文才胸富万经的为官一处自是高高在上，没有这个本事的寒窗苦读一番也能落个“读书人的偷能叫偷吗”的阿Q式精神胜利，在精神上又是高高在上，都是高高在上，在1793年英国使团来华时是高高在上，在19世纪被英国揍、被日本揍之后还是高高在上。永远都是高高在上，这一词也许便能概括李鸿章一生大部分清廷官员的心理了吧，即使对洋人卑躬屈膝，对着百姓照样还是高高在上，照样是所谓“牧民于野”的当代俊杰。\n\n欺民，罔民，愚民，却将这种行为解释为王化，“王化”过后便使牧民如放牧牛羊那般简单（如此看来儒家的王治倒是能够作为畜牧业一个很好的理论），古语中的这个“牧”字用的很是精髓啊。这也概括了务虚之道能够得以盛行，国人能够自欺欺人的原因，在这样一个务虚时代之末，则有国贼李鸿章。\n\n<center>五</center>\n\n梁任公先生在1901年为李鸿章做的传记里，有这样一段话：\n\n>*夫李鸿章果足称为中国第一人与否吾不敢知，而要之现今五十岁以上之人，三四品以上之官，无一可以望李之肩背者，则吾所能断言也。李之死，于中国全局有关系与否吾不敢知，而要之现在政府失一李鸿章，如虎之丧其伥，前途岌岌，愈益多事，此又吾所敢断言也*\n\n加之记述一下李鸿章光绪元年所上之奏疏：\n\n>*近时拘谨之儒，多以交涉洋务为涴人之具；取巧之士，又以引避洋务为自便之图。若非朝廷力开风气，破拘挛之故习，求制胜之实际，天下危局，终不可支，日后乏才，且有甚于今日者。以中国之大，而无自立之时，非惟可忧，抑亦可耻*\n\n摘录至此，不由扼腕感慨百多年前洋务之艰难，掣肘之猖獗。\n\n引避洋务以自便，多轻松的自便之法啊，从前务虚以留其名，尚且还得付出诸多代价，而洋人来了后为一个高风亮节之名，却只需对奇技淫巧表达不屑，对操办洋务以自强求富之人以鄙夷眼光视之。多轻便啊，居庙堂之高则上书参劾，处江湖之远则煽民怨怼，永远站在务虚下道德的制高点，倒颇像今天的键盘侠，下笔滔滔如有千言，若问韬略胸无一策。可惜的是今天的键盘侠倒是稍讲道理的人就会心生厌恶，而那个时代做一个真正杀人的键盘侠倒成了政治正确。\n\n而“求制胜之实际”这句话倒着实让我奇怪，我实在不知道制胜的实际为什么要求。在一个逝者如斯夫的三维世界，什么东西都是一锤子买卖，制胜难道还有实际与不实际的分别？一个管理着四亿五千万人口的朝廷，于国事竟要以“实际”与否为争论点，实在荒唐（也许以往务虚之实际对洋人不管用吧，毕竟洋人大部分人都不给你“牧”，明明这才是现在看来正常的表现到了晚清士大夫眼中成了蛮夷无廉耻的表现，估计他们也很苦恼吧），也难怪任公先生有以上断言了。\n\n这就是那个时代我国的头号国贼了，倒不知他卖的国是虚妄概念上的国还是实际意义上的国了，不知道满清朝廷在马关之后的朝堂上有没有这一议论。\n\n<center>六</center>\n\n说李是国贼的论据，我以为归纳起来大约有四个大点。其一为边防塞防之争；其二为甲午战争之败；其三为辛丑条约之耻；其四为死后余产之巨。针对这几点，我也想简单谈谈我的看法。\n\n关于边防塞防之争，以今日结果的眼光来看李鸿章所谓的“放弃新疆”自然是妥妥卖国行为，引述其作此决策的理由大致如下：\n\n>*历代备边，多在西北，其强弱之势，主客之形，皆适相埒，且犹有中外界限。今则东南海疆万余里，各国通商传教，往来自如，麇集京师，及各省腹地，阳托和好之名，阴怀吞噬之计，一国生事，诸国构煽，实为数千年来未有之变局。轮船、电报之速，瞬息千里，军器、机事之精，工力百倍，又为数千年来未有之强敌。外患之乘，变幻如此，而我犹以成法制之，譬如医者疗疾，不问何症，概投之以古方，诚未见其效也*\n\n彼时背景正为日本寻衅侵略台湾，海防压力巨大，若忽略新疆一事，我以为兴建海防实在算是清末洋务少有的高瞻远瞩之举了，而对于新疆问题，李鸿章倒似乎想以外交途径解决（这也是他的惯用伎俩了，甲午之败这也是因素之一）。唉，彼时之人哪里懂得弱国无外交的道理呢，如此看来若无左宗棠收复新疆，也许新疆在那时候就成为了永远收不回的东三省了吧（九一八事变后民国政府也企图通过外交途径解决东北问题）。\n\n也正应如此，世人往往厚左而薄李，但以我之见，左宗棠与李鸿章并无大分别，李并非一意放弃塞防而是以为边防更为紧迫，而左亦非务虚守旧之人，只是认为新疆之失已迫在眉睫而海上之难尚可以时日斡旋。边防塞防之争，与其说是善恶之争，倒不如说是厉害得失之争。可叹啊，百年后的课本中，左宗棠成了英雄，而李鸿章却成了国贼，实在只是命长与命短的分别啊。\n\n而对甲午战争之败，我没有什么好说的，整个战争我仿佛看到的不是战争，而是一帮小孩在拿人命、鲜血与一个民族的尊严为筹码玩过家家，仿佛这个国，不是实际意义上的国。世人皆知甲午海战北洋水师全军覆没，是以为耻，却不知陆军在朝鲜更是一败涂地。对此战的总结梁任公先生在为李所作传记中已经分析的很透彻了，我不再赘言，遂摘录如下。\n\n>*当中日战事之际，李鸿章以一身为万矢之的，几于身无完肤，人皆欲杀。平心而论，李鸿章诚有不能辞其咎者，其始误劝朝鲜与外国立约，昧于公法，咎一；既许立约，默认其自主，而复以兵干涉其内乱，授人口实，咎二；日本既调兵，势固有进无退，而不察先机，辄欲倚赖他国调停，致误时日，咎三；聂士成请乘日军未集之时，以兵直捣韩城以制敌而不能用，咎四；高升事未起之前，丁汝昌请以北洋海军先鏖敌舰，而不能用，遂令反客为主，敌坐大而我愈危，综其原因，皆由不欲衅自我开，以为外交之道应尔，而不知当甲午五六月间，中日早成敌国，而非友邦矣，误以交邻之道施诸兵机，咎五；鸿章将自解曰：量我兵力不足以敌日本，故惮于发难也。虽然，身任北洋整军经武二十年，何以不能一战？咎六；彼又将自解曰：政府掣肘，经费不足也。虽然，此不过不能扩充已耳，何以其所现有者，如叶志超、卫汝贵诸军，素以久练著名，亦脆弱乃尔，且克减口粮盗掠民妇之事，时有所闻，乃并纪律而无之也，咎七；枪或苦窳，弹或赝物，弹不对枪，药不随械，谓从前管军械局之人皆廉明，谁能信之，咎八；平壤之役，军无统帅，此兵家所忌，李乃蹈之，咎九；始终坐待敌攻，致于人而不能致人，畏敌如虎，咎十；海军不知用快船快炮，咎十一；旅顺天险，西人谓以数百兵守之，粮食苟足，三年不能破，乃委之于所亲昵阘冗恇怯之人，闻风先遁，咎十二。此皆可以为李鸿章罪者。若夫甲午九十月以后，则群盲狂吠，筑室道谋，号令不出自一人，则责备自不得归于一点。若尽以为李鸿章咎，李固不任受也。又岂惟不任受而已，吾见彼责李罪李者，其可责可罪，更倍蓰于李而未有已也。是役将帅无一人不辱国，不待言矣。然比较于百步五十步之间，则海军优于陆军，李鸿章部下之陆军，又较优于他军也。*\n\n战争之后，尚有广东水师向日本索要被俘舰只，理由竟是此次战役与广东无涉。荒唐至此，毫无国家民族观念，以五十步笑百步之典，李倒着实是那五十步之人，但一个国家只有五十步与百步的分别，岂不谬哉！\n\n至于辛丑条约，我以为无甚好说，前两者对李都有切实可责可恨之处，凡是认为李无一点错误责任，无一点卖国嫌疑者都是巧言令色之人。惟此辛丑条约，说李是代国背锅言辞尚可牵强而去。只是可惜可恨啊，面对务实之世界，务虚者仍活在往日虚幻的天朝大国的旧梦里，可惜是针对那时被虚妄的概念奴役却自以为自由的愚民，可恨是针对朝堂上自私自利毫无理性的那几家几姓。\n\n最后也就是死后遗产之巨了，关于这个我没有观点，也没做什么考证，四千万家产的言论没有什么根据，但清正廉洁的说法也就是自娱自乐了，而对于因为李鸿章财产甚多而输了甲午战争的言论，我也无话可说，见解如此，与键盘侠无异。以下摘录任公所作传记中的一段话，仁者见仁，智者见智吧。\n\n>*世人竞传李鸿章富甲天下，此其事殆不足信，大约数百万金之产业，意中事也。招商局、电报局、开平煤矿、中国通商银行，其股份皆不少，或言南京、上海各地之当铺银号，多属其管业云*\n\n以上四点，第一、第三、第四点我认为以此为依据对李进行口诛笔伐只是视李为国贼带来的惯性思维所致，即在摆出论据之前心中已有答案，而后用这些论据中的点去套已有的结论。这样做虽然看起来不够客观，但我认为实在是人心所向。而第二点则是“国贼论”的核心，也是李鸿章以及所谓大清帝国的转折点吧，在这一点上李鸿章有直接责任。从前被英法等一流列强欺负，但装饰门面倒还对的起“帝国”这两个字的隐形含义，今而兴洋务练出的新军在日本人面前不堪一击，以使敌人在朝鲜都不相信战胜的就是所谓清廷按照西法练成的精锐部队。\n\n由此看来，这些活在近代的中古士大夫在务虚本领之上倒还是实在的啊，能够做到让外人不辨雌雄。\n\n<center>七</center>\n\n对李鸿章，梁任公先生总结其为“时势所造之英雄，非造时势之英雄”，又对其一生事迹评价为“不学无术，不敢破格，是其所短也；不避劳苦，不畏谤言，是其所长也”。\n\n是英雄造时势还是时势造英雄，这一直可以视为是一个悖论问题，这一问题有诸多解法的原因其实也只是因为对英雄与时势有诸多不同的定义与见解而已。\n\n英雄是什么，一怒之下伏尸百万流血千里的应该能算，这是就其权威而论的；率性任侠义气为先的想必也能算，这是就其个性担当而言的；富国强兵振兴朝政的一定能算，这是就其能力而论的；而为国请命鞠躬尽瘁死而后已的也一定能算，这是就其一片赤子之心而论的。这四点似乎都没错，但偏偏国贼李鸿章似乎与后三点都沾些边，对部下讲情义，为国事不避艰难，临死之前尚在为国事操心，按这个道理，他该是英雄啊，在通俗历史评价上他该是顶线以上的人啊，怎么会落得底线以下的看法与待遇呢？还是引用任公先生的话。\n\n>*十九世纪列国皆有英雄，而我国独无一英雄，则吾辈安得不指鹿为马，聊自解嘲，翘李鸿章以示于世界曰，此我国之英雄也。呜呼！亦适我国之英雄而已矣，亦适成为我国十九世纪以前之英雄而已矣*\n\n是啊，自始皇帝嬴政开创中央集权政体之日起，五经四书浸染之下的千年务虚时代，又哪有什么英雄造时势的事情呢？始皇殁后有项羽，一个勇武过人的英雄在乎的是如何让锦衣不夜行，在意这种虚妄的概念使他重新推行分封。后有刘邦，有曹操，有李世民，有赵匡胤，有朱洪武，再有所谓康乾盛世，有所谓同治中兴，那么多个皇帝之下有那么多个能人猛士堪称英雄，可有谁真正造就过时势吗？似乎有，如周瑜赤壁的那一把火，似乎又没有，因为我只看到了一个个朝代的更替与牧民锁链的加重。也许以百年局部的眼光来看，总有公瑾一般的豪杰改造时势，但以千年民族国家的眼光来看，十九世纪前所谓的英雄，不过是在同一片天空之下翻手为云覆手为雨罢了，他们从没有改天换日的见识与气魄。\n\n话虽这样说，但英雄在他们的时代仍然是英雄，非要以今日之眼光视昨日之旧人未免落入历史虚无主义的窠臼。而对李鸿章以国贼的态度进行苛责，与此同理，无非是以今日之评价观点视旧时之英雄罢了。在对李一系列失误的讨论之外，我认为不应该让一个旧时代的先行者为他所处的整个时代背锅。\n\n但话又说回来，这样一个不避劳苦的旧时代先行者，究其一生却为何在历史上仍落个身败名裂的下场呢？\n\n千年务虚时代，治经论典自然是务虚，可人毕竟是活在现实世界的啊，“务实”必不可少，闻鸡起舞者有之，改政变法者有之，“格物致知”者亦有之，为何集数千年这亿万之人，却无一个堪当变务虚时势为务实的英雄呢？自是千年务虚痼疾已深，不彻底打碎更变实在是无从谈起啊。否定了这一点，就是对20世纪我们中国人长达一个世纪的更革奋斗视而不见。\n\n而以李鸿章为汉奸国贼者，必为甲午之败辛丑之耻痛惜扼腕，仿佛杀李则能改变战局避免国耻，而清廷则仍是堂堂正正的大清帝国，这实在是癔梦啊。想当造时势之英雄，则必须要能真正的打破务虚学而有术，这在当时几乎是与整个千年文化积习为敌，事实证明李鸿章这种务虚时代的实干家不行，翁同龢这种务虚时代的所谓君子、康有为这种务虚时代所谓的改革家都不行，那些务虚时代的小人就更不必说了。\n\n以李鸿章之务实敢干不辞辛劳生于务虚时代都难以学而有术，洋务半生尚“不识国民之原理，不通世界之大势，不知政治之本原”，一生兢兢业业如履薄冰都难以在后世摆脱一个“国贼”的骂名，可见务虚痼疾程度之深了。以务虚时代之英雄而成务实时代之国贼，英雄和国贼果然有所谓巨大的间隙吗？还是李鸿章生平前后的主流文化之间有这般巨大的间隙呢？这百年来，那么多只如鲁迅先生般的如椽巨笔，才堪堪扭转千年痼疾在人心中的荼毒之深，将这种荼毒所表现出的后果让李一人一力承担，我觉得实在是肤浅过分的言论。\n\n唉，以旧英雄之身份而成新时代之国贼，以今日之眼光，到底该视为李鸿章的过错还是千年务虚文化的过错呢？\n\n<center>八</center>\n\n作为一个中国人，对历史总会心存一些假如（毕竟有强汉盛唐，现在的口号也还是复兴）。总有人会说满清误国，认为遇上19世纪那千年未有之变局的假如不是满清朝廷而是汉人王朝情况会完全不同；也有人会想若遭遇此事的中国统治者不是咸丰，不是光绪，不是慈禧，而是秦皇汉武唐宗宋祖，结局也会不一样；还有人说明朝的资本主义萌芽是被满清给消灭的，否则中国也会自然而然的成为近代西方那样发达的资本主义国家。\n\n诸如此类的想法很多，但历史没有偶然，即使有偶然，在一个模拟器中能够重现历史，让那些明君圣君放弃一家一姓特权，让那些世家门阀放弃所有地方权益的概率能有多少呢？即使有人真的愿意，他能够扳的过整个旧文化的手腕吗？（过继当上皇帝的想尊自己的生父历朝历代士大夫都会罗里吧嗦的，没有点手腕的皇帝连这种事都搞不定，即使手腕通天难道能搞定整个文化变革的事情吗？因此在中国这种务虚文化的千年体系下，自上而下的改革是不可能行的通的，想变革只有改变一个民族的思想，这又哪里是一个人能够办得到的呢），孟子说过“人之所以异于禽兽者几希，庶民去之，君子存之”，孟子当然是惯于骂人禽兽，而放弃他这种庶民君子的成见，还智于百姓，让“君子”与“禽兽”平起平坐，历代有君王与权臣能够做到吗？（也许中国能够依赖如明治天皇那样的明君通过变革依靠广阔的土地在19世纪成为列强，但这种强国方式与英美等国还是有根本区别，日本明治维新后是变强了，但仍然有华族这种旧时代产物，我以为仍然带着野蛮不理性的气息，以中国之大，如此，更甚矣，仍然只会成为如沙皇俄国那样的纸老虎）王莽的改制引来了千古骂名只是因为其制过激而使掣肘过厉，而“科举”的产生也只是得益于旧门阀势力的削弱，而这种削弱，无不是血与铁的结果，而后再看19世纪末李鸿章所遭之非议，守旧势力在19世纪到20世纪的关口还指望着把洋人赶走继续上古时期的统治方法。这是他们幼稚吗？不是，实在是千年务虚积疾过深，使得四万万国人人人为鸵鸟而不自知，大才如严复尚且崇尚科举，务实如李鸿章尚且惋惜自己一生没做成军机大臣。\n\n在这种千年务虚观念深入骨髓的情况下，小修小补有用吗？剜肉补疮有用吗？我看把血全换了都未必有用。在这种情况下，将千年务虚积累下导致的癔病产生的痛苦全部归咎给李鸿章这种只会小医小补的郎中，合理吗？骂李是国贼，那必须带上当时满朝文武，带上当时被欺罔了数千年的四万万百姓，带上数千年政治文化风俗的方方面面。雪崩之时，没有一片雪花是无辜的，但作为压死骆驼的最后一根稻草，难道李鸿章留给历史的意义只是让后人怒斥痛骂吗？\n\n十九世纪以前的英雄，配上了务虚思想引导下的务实，却成了日后人们眼中的国贼，应该感到悲哀吗？不应该感到悲哀吗？对着那个由务虚向务实转化的时代，是继续痛斥那务虚时代下的国贼或者说英雄，还是应该对我们19世纪以前的文化多做一些反思呢？\n\n后者，我以为才是李鸿章这个历史车轮扭动间隙下产生的矛盾人物该给我们带来的意义。\n\n<center>后记</center>\n\n本文基本可以视为是《走向共和》电视剧前半段以及梁任公先生的传记《李鸿章》的观后感吧，写之前没想过要什么纲领也没有确定什么中心论点，写到现在洋洋洒洒有八千多字，也渐渐形成了一个很不清晰的脉络吧。\n\n全文的中心其实也就是以李鸿章个人在通俗历史评价上的矛盾为引，引出对19世纪前中华传统文化的反思吧。一个代表着那段历史的人物，以两种文化的眼光看待，会得出英雄和国贼两个迥异的看法，这种激烈的矛盾也着实可以说明旧文化的一些荒谬之处了。\n\n当然全文只是借用了务实与务虚这一对矛盾在19世纪末那个节点上所爆发出来的强弱态势，并没有对中西文化或者说中国传统文化与现代文化进行所谓优劣对比及形成原因说明。因为非要进行详细的对比说明的话，我认为恐怕得从先秦思想和古希腊哲学的迥异说起，那话题就大了，所以全文对这种矛盾在我国中世纪的表现仅仅以叙代议，所表达的仅仅只是矛盾本身而不是对矛盾产生原因的分析论证。\n\n全文以李鸿章为引，但对李鸿章一生的事迹仅仅摘捡了其作为国贼原因的几个大点论述，如果对李鸿章或那个时代感兴趣，着实推荐任公先生的传记《李鸿章》（即《同光以来大事记》），其文作于1901年李鸿章死后不久，集合了那个时代的视角与梁公极其客观的评价，我认为堪称是了解李鸿章的第一手资料，也是了解那个时代的一个不错的POV。\n\n再来谈谈文章的另一个引子孔融，也许以知人论世而言他该算是在文学上卓有成就（建安七子之首），气节上也不错（堪称魏晋风骨，虽然我以为孔融这种气节不要也罢）。我在文章中如此苛责他说实话与大众苛责李鸿章也许没有什么本质的区别吧，要说区别，其实也是因为孔融所代表的这种务虚做派着实让我disgusting吧（细细想来，古人会写字的不多，所以键盘侠才会如此弥足珍贵吧），之前读过一些孔融的史料，有机会会写写我为啥那么不喜欢孔融，在此不再说明了。\n\n最后，谈谈为何我写着写着就以务虚作为一个主线了吧，这个原因说来惭愧，实在是自己的务虚行为所致，如今三月，还有三个月本科就该画上句号，但纵观自己这四年，基本没干成什么实在的事情（书读的好当然是实在的，游戏打出了名堂也是实在的啊，唯独什么都没做的像样倒是值得思考的一个点），遂作此文以自勉。\n\n子夜，记于2020.3.4 九江。希望疫情退散武汉加油。","slug":"杂谈杂想/杂谈/务虚时代下的国贼——李鸿章","published":1,"updated":"2021-01-11T04:46:56.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobg0055rwjsfmdt0n6n","content":"<center>一</center>\n\n<p>近日看老剧《走向共和》，其前半段多以李鸿章之视角演绎，李鸿章何许人也，若非要集这百年悠悠之口套出几个词来，想必就是汉奸卖国贼之类的了，至少用于普及基本历史常识的历史课本中，作为百年国耻代表的《马关条约》与《辛丑条约》之上，就铸着该君的名字，所以这样说也没错。</p>\n<p>所谓汉奸，所谓卖国贼，这两个词至少在中华文化体系下是一种性质非常恶劣的词了吧，这与百年辛酸史，或者说在国家危亡之际国人对所谓“忠臣名将”的向往是分不开的，无论何人，无论何时，只要在身份认同上认为自己是中国人的，对待这些人都可以堂而皇之的啐一口唾沫，道一声“呸”。因为在我们中国人眼中，对历史的“通俗看法”（所谓通俗看法，是指不专门研究某一段历史的普通人，对身处该时段历史人物的主观看法，或说评价）是有底线和顶线的，底线想必就是卖国攘民等龌龊行径了，而顶线就是所谓为国请命的英雄们了，或者说以死明志的气节。当然除此之外，在看待历史人物时，顶线与底线往往还联络着主角道德的好与坏。</p>\n<center>二</center>\n\n<p>底线之下，无论之前干过什么，无论这个人作为一个人来讲怎么样，都不值得原谅，参考秦桧与汪精卫（前者还跪着呢）；而顶线之上，有所作为当然更好，但似乎事情做没做成也没有太大所谓，死谏，不趋附权贵，最好再带点文采写些个正气凛然的东西或者稀里糊涂的处在一段展现美好品行的故事中心，都值得树碑立传，万世景仰（至少在大部分国人心目中此类人物的形象是好的），参考孔融。</p>\n<p>底线之下，无甚好说，做了过分引人注目的坏事情，难道还会有很多人愿意去考虑你干这坏事之前的心路？大部分人会憎恶你，少部分脑袋勤快点的人会在憎恶中加上一些同情，还有极小部分人会把你当成一个工具，表达他们“看清事实”与“与众不同”的工具，这一类人不谈也罢，他们不懂得当瑕疵多到一种程度时，瑕不掩瑜这个词是不适用的。</p>\n<p>但顶线之上就会有一些问题了，在史书中活成这一类的人心念一动就能想出很多，他们大部分都可以作为鲁迅先生笔下我中华的脊梁，但我偏偏把孔融放在这里，为何呢？是因为我想说明这条适用于大众的对历史人物看法的惯性思维多半有些不客观。“孔四岁，能让梨”，这是大部分人都清楚的故事，别的不说，我在痴迷三国的那个年龄，总还是把孔融当成个人物的。但稍稍读点书，以今日之眼光，想瞧得上孔融这个人实在是难，可他却在未来的两千年里享尽英德之名，被无数父母当作启蒙孩子的一个典范，与古往今来无数仁人志士枭雄豪杰并排而立，我以为实在是忝列其中啊。</p>\n<center>三</center>\n\n<p>让一个梨便得以流芳千古，这个梨也实在是贵的很啊，让梨这个操作也算是东汉末年一个最成功的炒作了吧。但我实在是不明白大一点的梨子是孔融吃掉还是他哥哥吃掉到底对他们一家或者说对他们兄弟二人能有多大干系呢。非要说的话，难道梨子在东汉越大越香？而大到一定程度会产生口感上的质变？还是一个天生不太喜欢吃梨子的小孩在东汉不太常见？</p>\n<p>我以为是后者，毕竟在一个百姓连饭都吃不饱的时代，产生一个类似孔融这种不喜欢梨的小孩实在是困难，这也是保证这件事合理性的唯一解释了，不然孔融一家想必都有癔症。</p>\n<p>但遗憾的是，事实来看他们一家就是有癔症，也许是遗传的吧。毕竟硬要说的话，他们的老祖宗孔丘也有癔症，但孔夫子的癔症到底是在我这个两千多年后的后生眼里才能得见的，在孔夫子那个时代就算是癔症也多少有些可爱。但一种病毒也许两千年前无伤大雅甚至可以说是可爱，到一千年前病毒几经变异变成了值得称颂的一个身体特征，而到了一百多年前当一个群体把感染了这个病毒当成荣耀并认为人人便该如此的时候，来了另一群没得病且更强壮的人使得感染这个病毒变成了自然选择的一个逆选项时，有一些病人开始尝试治病但囿于同胞掣肘与病毒几经进化下的狡诈以及自身体内病毒的顽固，失败了，对于这种人，在考虑失败后果之前，我以为首先得感慨一下其知其不可而为之的勇气，至少这是我尊敬孔子的一个重要原因，也是我认为对卖国贼李鸿章，有必要进行另一番议论的原因。</p>\n<center>四</center>\n\n<p>以上所述的“癔症”，我想与今年的新冠肺炎多少有些类似，症状复杂容易变异，只是这癔症并不作用在生理上而是作用在精神上。其症状很多，五花八门，但我今天想谈谈的只有务虚。</p>\n<p>就像孔融让梨得到赞扬一样，赞扬的不是让梨这个动作而是其谦让的品德。我从不否认谦让是个美德，但让一个历史上实实在在活生生的人，因为这样一个简单的动作就成为了根植一个名族内心千年的道德符号，我认为实在是荒谬了些，哲学上喜欢将一件事情推到极端而后再观察其是否仍然符合某一标准，而长大后的孔融倒着实使这个荒谬的意味更深了些。</p>\n<p>几乎没有付出任何代价与个人的努力，一件名门世家随意记录的小小的事情，让一个人毫不费力收获了也许是古往今来来自孩子和家长们最多的赞誉，这不是偶然，而是自先秦到清末国人一直存在的务虚观念，几个小小的汉字，所谓仁义礼智信孝廉，都是好的优秀的修身品德，也从来都是封建时代的国人精英们竞相模仿参照的对象，可仔细想想，这几个字有所谓放之四海而皆准的具体的标准与定义吗？是所谓的标准管用还是历代大儒帝王的一声惊叹或者流传坊间的一段传奇更加管用呢？普通人是实实在在的做事更能得到赞扬还是卧冰求鲤式的“作秀”更能得到赞扬呢？</p>\n<p>这些品德确立之初的好坏我无从得知，但由于上述文字解释权等原因，这几个字或者说我中华中世纪所追求的那些抽象的概念，渐渐变为了权力与利益的代言人，成为了统治者所谓推行“王治”的工具（与其说是王治，不如说是愚民）。而随着皇权的愈加集中，传播这些务虚概念的工具，即我们引以为傲的科举，使得无数中世纪乃至近代的国人精英沦为了务虚的奴隶，深陷囹圄而自以为自由（李鸿章有改变很多事物的资本，但他囿于所谓忠君之类的概念敷衍其事含糊其词，想必也是务虚已入骨髓矣）。在没有西方文化冲击的情况下，整个民族和国家都浸沐在这务虚的汤药中，难以自拔。</p>\n<p>我本身是一个很懒惰的人，所谓磨洋工的一把好手，所以倘若我在百年千年前的话，肯定会变着花样以把自己弄死为标准去对应这些百姓追求统治者喜欢的概念，也许周围正好来了个大儒书圣，听说了我的故事的话还能把我的事迹记录一些，这样“流芳百世”的难度的确是大，但想必也比实干勤学的概率要大的多，还省去了不论是脑力还是体力带来的困难与麻烦，整不好运气更好点倒是能成为孔融一样的道德符号，实在是妙啊，妙不可言。</p>\n<p>既然务虚便能带来一切能够自我宽慰还得社会认可的东西，那作为贵族官员干嘛要务实呢？留着指甲，以商贾为耻，以农桑为耻，以一切实干为耻（当然社会是需要人做实事的，但做实事在我们的文化里受待见吗？所谓君子远庖厨，历朝历代各个英雄豪杰当然也有很多实干的，但实干的基础仍然是这个务虚的社会，这本身就给这个实干抹上了一层务虚的阴影），专注虚妄的经学便能高人一等，有文才胸富万经的为官一处自是高高在上，没有这个本事的寒窗苦读一番也能落个“读书人的偷能叫偷吗”的阿Q式精神胜利，在精神上又是高高在上，都是高高在上，在1793年英国使团来华时是高高在上，在19世纪被英国揍、被日本揍之后还是高高在上。永远都是高高在上，这一词也许便能概括李鸿章一生大部分清廷官员的心理了吧，即使对洋人卑躬屈膝，对着百姓照样还是高高在上，照样是所谓“牧民于野”的当代俊杰。</p>\n<p>欺民，罔民，愚民，却将这种行为解释为王化，“王化”过后便使牧民如放牧牛羊那般简单（如此看来儒家的王治倒是能够作为畜牧业一个很好的理论），古语中的这个“牧”字用的很是精髓啊。这也概括了务虚之道能够得以盛行，国人能够自欺欺人的原因，在这样一个务虚时代之末，则有国贼李鸿章。</p>\n<center>五</center>\n\n<p>梁任公先生在1901年为李鸿章做的传记里，有这样一段话：</p>\n<blockquote>\n<p><em>夫李鸿章果足称为中国第一人与否吾不敢知，而要之现今五十岁以上之人，三四品以上之官，无一可以望李之肩背者，则吾所能断言也。李之死，于中国全局有关系与否吾不敢知，而要之现在政府失一李鸿章，如虎之丧其伥，前途岌岌，愈益多事，此又吾所敢断言也</em></p>\n</blockquote>\n<p>加之记述一下李鸿章光绪元年所上之奏疏：</p>\n<blockquote>\n<p><em>近时拘谨之儒，多以交涉洋务为涴人之具；取巧之士，又以引避洋务为自便之图。若非朝廷力开风气，破拘挛之故习，求制胜之实际，天下危局，终不可支，日后乏才，且有甚于今日者。以中国之大，而无自立之时，非惟可忧，抑亦可耻</em></p>\n</blockquote>\n<p>摘录至此，不由扼腕感慨百多年前洋务之艰难，掣肘之猖獗。</p>\n<p>引避洋务以自便，多轻松的自便之法啊，从前务虚以留其名，尚且还得付出诸多代价，而洋人来了后为一个高风亮节之名，却只需对奇技淫巧表达不屑，对操办洋务以自强求富之人以鄙夷眼光视之。多轻便啊，居庙堂之高则上书参劾，处江湖之远则煽民怨怼，永远站在务虚下道德的制高点，倒颇像今天的键盘侠，下笔滔滔如有千言，若问韬略胸无一策。可惜的是今天的键盘侠倒是稍讲道理的人就会心生厌恶，而那个时代做一个真正杀人的键盘侠倒成了政治正确。</p>\n<p>而“求制胜之实际”这句话倒着实让我奇怪，我实在不知道制胜的实际为什么要求。在一个逝者如斯夫的三维世界，什么东西都是一锤子买卖，制胜难道还有实际与不实际的分别？一个管理着四亿五千万人口的朝廷，于国事竟要以“实际”与否为争论点，实在荒唐（也许以往务虚之实际对洋人不管用吧，毕竟洋人大部分人都不给你“牧”，明明这才是现在看来正常的表现到了晚清士大夫眼中成了蛮夷无廉耻的表现，估计他们也很苦恼吧），也难怪任公先生有以上断言了。</p>\n<p>这就是那个时代我国的头号国贼了，倒不知他卖的国是虚妄概念上的国还是实际意义上的国了，不知道满清朝廷在马关之后的朝堂上有没有这一议论。</p>\n<center>六</center>\n\n<p>说李是国贼的论据，我以为归纳起来大约有四个大点。其一为边防塞防之争；其二为甲午战争之败；其三为辛丑条约之耻；其四为死后余产之巨。针对这几点，我也想简单谈谈我的看法。</p>\n<p>关于边防塞防之争，以今日结果的眼光来看李鸿章所谓的“放弃新疆”自然是妥妥卖国行为，引述其作此决策的理由大致如下：</p>\n<blockquote>\n<p><em>历代备边，多在西北，其强弱之势，主客之形，皆适相埒，且犹有中外界限。今则东南海疆万余里，各国通商传教，往来自如，麇集京师，及各省腹地，阳托和好之名，阴怀吞噬之计，一国生事，诸国构煽，实为数千年来未有之变局。轮船、电报之速，瞬息千里，军器、机事之精，工力百倍，又为数千年来未有之强敌。外患之乘，变幻如此，而我犹以成法制之，譬如医者疗疾，不问何症，概投之以古方，诚未见其效也</em></p>\n</blockquote>\n<p>彼时背景正为日本寻衅侵略台湾，海防压力巨大，若忽略新疆一事，我以为兴建海防实在算是清末洋务少有的高瞻远瞩之举了，而对于新疆问题，李鸿章倒似乎想以外交途径解决（这也是他的惯用伎俩了，甲午之败这也是因素之一）。唉，彼时之人哪里懂得弱国无外交的道理呢，如此看来若无左宗棠收复新疆，也许新疆在那时候就成为了永远收不回的东三省了吧（九一八事变后民国政府也企图通过外交途径解决东北问题）。</p>\n<p>也正应如此，世人往往厚左而薄李，但以我之见，左宗棠与李鸿章并无大分别，李并非一意放弃塞防而是以为边防更为紧迫，而左亦非务虚守旧之人，只是认为新疆之失已迫在眉睫而海上之难尚可以时日斡旋。边防塞防之争，与其说是善恶之争，倒不如说是厉害得失之争。可叹啊，百年后的课本中，左宗棠成了英雄，而李鸿章却成了国贼，实在只是命长与命短的分别啊。</p>\n<p>而对甲午战争之败，我没有什么好说的，整个战争我仿佛看到的不是战争，而是一帮小孩在拿人命、鲜血与一个民族的尊严为筹码玩过家家，仿佛这个国，不是实际意义上的国。世人皆知甲午海战北洋水师全军覆没，是以为耻，却不知陆军在朝鲜更是一败涂地。对此战的总结梁任公先生在为李所作传记中已经分析的很透彻了，我不再赘言，遂摘录如下。</p>\n<blockquote>\n<p><em>当中日战事之际，李鸿章以一身为万矢之的，几于身无完肤，人皆欲杀。平心而论，李鸿章诚有不能辞其咎者，其始误劝朝鲜与外国立约，昧于公法，咎一；既许立约，默认其自主，而复以兵干涉其内乱，授人口实，咎二；日本既调兵，势固有进无退，而不察先机，辄欲倚赖他国调停，致误时日，咎三；聂士成请乘日军未集之时，以兵直捣韩城以制敌而不能用，咎四；高升事未起之前，丁汝昌请以北洋海军先鏖敌舰，而不能用，遂令反客为主，敌坐大而我愈危，综其原因，皆由不欲衅自我开，以为外交之道应尔，而不知当甲午五六月间，中日早成敌国，而非友邦矣，误以交邻之道施诸兵机，咎五；鸿章将自解曰：量我兵力不足以敌日本，故惮于发难也。虽然，身任北洋整军经武二十年，何以不能一战？咎六；彼又将自解曰：政府掣肘，经费不足也。虽然，此不过不能扩充已耳，何以其所现有者，如叶志超、卫汝贵诸军，素以久练著名，亦脆弱乃尔，且克减口粮盗掠民妇之事，时有所闻，乃并纪律而无之也，咎七；枪或苦窳，弹或赝物，弹不对枪，药不随械，谓从前管军械局之人皆廉明，谁能信之，咎八；平壤之役，军无统帅，此兵家所忌，李乃蹈之，咎九；始终坐待敌攻，致于人而不能致人，畏敌如虎，咎十；海军不知用快船快炮，咎十一；旅顺天险，西人谓以数百兵守之，粮食苟足，三年不能破，乃委之于所亲昵阘冗恇怯之人，闻风先遁，咎十二。此皆可以为李鸿章罪者。若夫甲午九十月以后，则群盲狂吠，筑室道谋，号令不出自一人，则责备自不得归于一点。若尽以为李鸿章咎，李固不任受也。又岂惟不任受而已，吾见彼责李罪李者，其可责可罪，更倍蓰于李而未有已也。是役将帅无一人不辱国，不待言矣。然比较于百步五十步之间，则海军优于陆军，李鸿章部下之陆军，又较优于他军也。</em></p>\n</blockquote>\n<p>战争之后，尚有广东水师向日本索要被俘舰只，理由竟是此次战役与广东无涉。荒唐至此，毫无国家民族观念，以五十步笑百步之典，李倒着实是那五十步之人，但一个国家只有五十步与百步的分别，岂不谬哉！</p>\n<p>至于辛丑条约，我以为无甚好说，前两者对李都有切实可责可恨之处，凡是认为李无一点错误责任，无一点卖国嫌疑者都是巧言令色之人。惟此辛丑条约，说李是代国背锅言辞尚可牵强而去。只是可惜可恨啊，面对务实之世界，务虚者仍活在往日虚幻的天朝大国的旧梦里，可惜是针对那时被虚妄的概念奴役却自以为自由的愚民，可恨是针对朝堂上自私自利毫无理性的那几家几姓。</p>\n<p>最后也就是死后遗产之巨了，关于这个我没有观点，也没做什么考证，四千万家产的言论没有什么根据，但清正廉洁的说法也就是自娱自乐了，而对于因为李鸿章财产甚多而输了甲午战争的言论，我也无话可说，见解如此，与键盘侠无异。以下摘录任公所作传记中的一段话，仁者见仁，智者见智吧。</p>\n<blockquote>\n<p><em>世人竞传李鸿章富甲天下，此其事殆不足信，大约数百万金之产业，意中事也。招商局、电报局、开平煤矿、中国通商银行，其股份皆不少，或言南京、上海各地之当铺银号，多属其管业云</em></p>\n</blockquote>\n<p>以上四点，第一、第三、第四点我认为以此为依据对李进行口诛笔伐只是视李为国贼带来的惯性思维所致，即在摆出论据之前心中已有答案，而后用这些论据中的点去套已有的结论。这样做虽然看起来不够客观，但我认为实在是人心所向。而第二点则是“国贼论”的核心，也是李鸿章以及所谓大清帝国的转折点吧，在这一点上李鸿章有直接责任。从前被英法等一流列强欺负，但装饰门面倒还对的起“帝国”这两个字的隐形含义，今而兴洋务练出的新军在日本人面前不堪一击，以使敌人在朝鲜都不相信战胜的就是所谓清廷按照西法练成的精锐部队。</p>\n<p>由此看来，这些活在近代的中古士大夫在务虚本领之上倒还是实在的啊，能够做到让外人不辨雌雄。</p>\n<center>七</center>\n\n<p>对李鸿章，梁任公先生总结其为“时势所造之英雄，非造时势之英雄”，又对其一生事迹评价为“不学无术，不敢破格，是其所短也；不避劳苦，不畏谤言，是其所长也”。</p>\n<p>是英雄造时势还是时势造英雄，这一直可以视为是一个悖论问题，这一问题有诸多解法的原因其实也只是因为对英雄与时势有诸多不同的定义与见解而已。</p>\n<p>英雄是什么，一怒之下伏尸百万流血千里的应该能算，这是就其权威而论的；率性任侠义气为先的想必也能算，这是就其个性担当而言的；富国强兵振兴朝政的一定能算，这是就其能力而论的；而为国请命鞠躬尽瘁死而后已的也一定能算，这是就其一片赤子之心而论的。这四点似乎都没错，但偏偏国贼李鸿章似乎与后三点都沾些边，对部下讲情义，为国事不避艰难，临死之前尚在为国事操心，按这个道理，他该是英雄啊，在通俗历史评价上他该是顶线以上的人啊，怎么会落得底线以下的看法与待遇呢？还是引用任公先生的话。</p>\n<blockquote>\n<p><em>十九世纪列国皆有英雄，而我国独无一英雄，则吾辈安得不指鹿为马，聊自解嘲，翘李鸿章以示于世界曰，此我国之英雄也。呜呼！亦适我国之英雄而已矣，亦适成为我国十九世纪以前之英雄而已矣</em></p>\n</blockquote>\n<p>是啊，自始皇帝嬴政开创中央集权政体之日起，五经四书浸染之下的千年务虚时代，又哪有什么英雄造时势的事情呢？始皇殁后有项羽，一个勇武过人的英雄在乎的是如何让锦衣不夜行，在意这种虚妄的概念使他重新推行分封。后有刘邦，有曹操，有李世民，有赵匡胤，有朱洪武，再有所谓康乾盛世，有所谓同治中兴，那么多个皇帝之下有那么多个能人猛士堪称英雄，可有谁真正造就过时势吗？似乎有，如周瑜赤壁的那一把火，似乎又没有，因为我只看到了一个个朝代的更替与牧民锁链的加重。也许以百年局部的眼光来看，总有公瑾一般的豪杰改造时势，但以千年民族国家的眼光来看，十九世纪前所谓的英雄，不过是在同一片天空之下翻手为云覆手为雨罢了，他们从没有改天换日的见识与气魄。</p>\n<p>话虽这样说，但英雄在他们的时代仍然是英雄，非要以今日之眼光视昨日之旧人未免落入历史虚无主义的窠臼。而对李鸿章以国贼的态度进行苛责，与此同理，无非是以今日之评价观点视旧时之英雄罢了。在对李一系列失误的讨论之外，我认为不应该让一个旧时代的先行者为他所处的整个时代背锅。</p>\n<p>但话又说回来，这样一个不避劳苦的旧时代先行者，究其一生却为何在历史上仍落个身败名裂的下场呢？</p>\n<p>千年务虚时代，治经论典自然是务虚，可人毕竟是活在现实世界的啊，“务实”必不可少，闻鸡起舞者有之，改政变法者有之，“格物致知”者亦有之，为何集数千年这亿万之人，却无一个堪当变务虚时势为务实的英雄呢？自是千年务虚痼疾已深，不彻底打碎更变实在是无从谈起啊。否定了这一点，就是对20世纪我们中国人长达一个世纪的更革奋斗视而不见。</p>\n<p>而以李鸿章为汉奸国贼者，必为甲午之败辛丑之耻痛惜扼腕，仿佛杀李则能改变战局避免国耻，而清廷则仍是堂堂正正的大清帝国，这实在是癔梦啊。想当造时势之英雄，则必须要能真正的打破务虚学而有术，这在当时几乎是与整个千年文化积习为敌，事实证明李鸿章这种务虚时代的实干家不行，翁同龢这种务虚时代的所谓君子、康有为这种务虚时代所谓的改革家都不行，那些务虚时代的小人就更不必说了。</p>\n<p>以李鸿章之务实敢干不辞辛劳生于务虚时代都难以学而有术，洋务半生尚“不识国民之原理，不通世界之大势，不知政治之本原”，一生兢兢业业如履薄冰都难以在后世摆脱一个“国贼”的骂名，可见务虚痼疾程度之深了。以务虚时代之英雄而成务实时代之国贼，英雄和国贼果然有所谓巨大的间隙吗？还是李鸿章生平前后的主流文化之间有这般巨大的间隙呢？这百年来，那么多只如鲁迅先生般的如椽巨笔，才堪堪扭转千年痼疾在人心中的荼毒之深，将这种荼毒所表现出的后果让李一人一力承担，我觉得实在是肤浅过分的言论。</p>\n<p>唉，以旧英雄之身份而成新时代之国贼，以今日之眼光，到底该视为李鸿章的过错还是千年务虚文化的过错呢？</p>\n<center>八</center>\n\n<p>作为一个中国人，对历史总会心存一些假如（毕竟有强汉盛唐，现在的口号也还是复兴）。总有人会说满清误国，认为遇上19世纪那千年未有之变局的假如不是满清朝廷而是汉人王朝情况会完全不同；也有人会想若遭遇此事的中国统治者不是咸丰，不是光绪，不是慈禧，而是秦皇汉武唐宗宋祖，结局也会不一样；还有人说明朝的资本主义萌芽是被满清给消灭的，否则中国也会自然而然的成为近代西方那样发达的资本主义国家。</p>\n<p>诸如此类的想法很多，但历史没有偶然，即使有偶然，在一个模拟器中能够重现历史，让那些明君圣君放弃一家一姓特权，让那些世家门阀放弃所有地方权益的概率能有多少呢？即使有人真的愿意，他能够扳的过整个旧文化的手腕吗？（过继当上皇帝的想尊自己的生父历朝历代士大夫都会罗里吧嗦的，没有点手腕的皇帝连这种事都搞不定，即使手腕通天难道能搞定整个文化变革的事情吗？因此在中国这种务虚文化的千年体系下，自上而下的改革是不可能行的通的，想变革只有改变一个民族的思想，这又哪里是一个人能够办得到的呢），孟子说过“人之所以异于禽兽者几希，庶民去之，君子存之”，孟子当然是惯于骂人禽兽，而放弃他这种庶民君子的成见，还智于百姓，让“君子”与“禽兽”平起平坐，历代有君王与权臣能够做到吗？（也许中国能够依赖如明治天皇那样的明君通过变革依靠广阔的土地在19世纪成为列强，但这种强国方式与英美等国还是有根本区别，日本明治维新后是变强了，但仍然有华族这种旧时代产物，我以为仍然带着野蛮不理性的气息，以中国之大，如此，更甚矣，仍然只会成为如沙皇俄国那样的纸老虎）王莽的改制引来了千古骂名只是因为其制过激而使掣肘过厉，而“科举”的产生也只是得益于旧门阀势力的削弱，而这种削弱，无不是血与铁的结果，而后再看19世纪末李鸿章所遭之非议，守旧势力在19世纪到20世纪的关口还指望着把洋人赶走继续上古时期的统治方法。这是他们幼稚吗？不是，实在是千年务虚积疾过深，使得四万万国人人人为鸵鸟而不自知，大才如严复尚且崇尚科举，务实如李鸿章尚且惋惜自己一生没做成军机大臣。</p>\n<p>在这种千年务虚观念深入骨髓的情况下，小修小补有用吗？剜肉补疮有用吗？我看把血全换了都未必有用。在这种情况下，将千年务虚积累下导致的癔病产生的痛苦全部归咎给李鸿章这种只会小医小补的郎中，合理吗？骂李是国贼，那必须带上当时满朝文武，带上当时被欺罔了数千年的四万万百姓，带上数千年政治文化风俗的方方面面。雪崩之时，没有一片雪花是无辜的，但作为压死骆驼的最后一根稻草，难道李鸿章留给历史的意义只是让后人怒斥痛骂吗？</p>\n<p>十九世纪以前的英雄，配上了务虚思想引导下的务实，却成了日后人们眼中的国贼，应该感到悲哀吗？不应该感到悲哀吗？对着那个由务虚向务实转化的时代，是继续痛斥那务虚时代下的国贼或者说英雄，还是应该对我们19世纪以前的文化多做一些反思呢？</p>\n<p>后者，我以为才是李鸿章这个历史车轮扭动间隙下产生的矛盾人物该给我们带来的意义。</p>\n<center>后记</center>\n\n<p>本文基本可以视为是《走向共和》电视剧前半段以及梁任公先生的传记《李鸿章》的观后感吧，写之前没想过要什么纲领也没有确定什么中心论点，写到现在洋洋洒洒有八千多字，也渐渐形成了一个很不清晰的脉络吧。</p>\n<p>全文的中心其实也就是以李鸿章个人在通俗历史评价上的矛盾为引，引出对19世纪前中华传统文化的反思吧。一个代表着那段历史的人物，以两种文化的眼光看待，会得出英雄和国贼两个迥异的看法，这种激烈的矛盾也着实可以说明旧文化的一些荒谬之处了。</p>\n<p>当然全文只是借用了务实与务虚这一对矛盾在19世纪末那个节点上所爆发出来的强弱态势，并没有对中西文化或者说中国传统文化与现代文化进行所谓优劣对比及形成原因说明。因为非要进行详细的对比说明的话，我认为恐怕得从先秦思想和古希腊哲学的迥异说起，那话题就大了，所以全文对这种矛盾在我国中世纪的表现仅仅以叙代议，所表达的仅仅只是矛盾本身而不是对矛盾产生原因的分析论证。</p>\n<p>全文以李鸿章为引，但对李鸿章一生的事迹仅仅摘捡了其作为国贼原因的几个大点论述，如果对李鸿章或那个时代感兴趣，着实推荐任公先生的传记《李鸿章》（即《同光以来大事记》），其文作于1901年李鸿章死后不久，集合了那个时代的视角与梁公极其客观的评价，我认为堪称是了解李鸿章的第一手资料，也是了解那个时代的一个不错的POV。</p>\n<p>再来谈谈文章的另一个引子孔融，也许以知人论世而言他该算是在文学上卓有成就（建安七子之首），气节上也不错（堪称魏晋风骨，虽然我以为孔融这种气节不要也罢）。我在文章中如此苛责他说实话与大众苛责李鸿章也许没有什么本质的区别吧，要说区别，其实也是因为孔融所代表的这种务虚做派着实让我disgusting吧（细细想来，古人会写字的不多，所以键盘侠才会如此弥足珍贵吧），之前读过一些孔融的史料，有机会会写写我为啥那么不喜欢孔融，在此不再说明了。</p>\n<p>最后，谈谈为何我写着写着就以务虚作为一个主线了吧，这个原因说来惭愧，实在是自己的务虚行为所致，如今三月，还有三个月本科就该画上句号，但纵观自己这四年，基本没干成什么实在的事情（书读的好当然是实在的，游戏打出了名堂也是实在的啊，唯独什么都没做的像样倒是值得思考的一个点），遂作此文以自勉。</p>\n<p>子夜，记于2020.3.4 九江。希望疫情退散武汉加油。</p>\n","site":{"data":{}},"excerpt":"","more":"<center>一</center>\n\n<p>近日看老剧《走向共和》，其前半段多以李鸿章之视角演绎，李鸿章何许人也，若非要集这百年悠悠之口套出几个词来，想必就是汉奸卖国贼之类的了，至少用于普及基本历史常识的历史课本中，作为百年国耻代表的《马关条约》与《辛丑条约》之上，就铸着该君的名字，所以这样说也没错。</p>\n<p>所谓汉奸，所谓卖国贼，这两个词至少在中华文化体系下是一种性质非常恶劣的词了吧，这与百年辛酸史，或者说在国家危亡之际国人对所谓“忠臣名将”的向往是分不开的，无论何人，无论何时，只要在身份认同上认为自己是中国人的，对待这些人都可以堂而皇之的啐一口唾沫，道一声“呸”。因为在我们中国人眼中，对历史的“通俗看法”（所谓通俗看法，是指不专门研究某一段历史的普通人，对身处该时段历史人物的主观看法，或说评价）是有底线和顶线的，底线想必就是卖国攘民等龌龊行径了，而顶线就是所谓为国请命的英雄们了，或者说以死明志的气节。当然除此之外，在看待历史人物时，顶线与底线往往还联络着主角道德的好与坏。</p>\n<center>二</center>\n\n<p>底线之下，无论之前干过什么，无论这个人作为一个人来讲怎么样，都不值得原谅，参考秦桧与汪精卫（前者还跪着呢）；而顶线之上，有所作为当然更好，但似乎事情做没做成也没有太大所谓，死谏，不趋附权贵，最好再带点文采写些个正气凛然的东西或者稀里糊涂的处在一段展现美好品行的故事中心，都值得树碑立传，万世景仰（至少在大部分国人心目中此类人物的形象是好的），参考孔融。</p>\n<p>底线之下，无甚好说，做了过分引人注目的坏事情，难道还会有很多人愿意去考虑你干这坏事之前的心路？大部分人会憎恶你，少部分脑袋勤快点的人会在憎恶中加上一些同情，还有极小部分人会把你当成一个工具，表达他们“看清事实”与“与众不同”的工具，这一类人不谈也罢，他们不懂得当瑕疵多到一种程度时，瑕不掩瑜这个词是不适用的。</p>\n<p>但顶线之上就会有一些问题了，在史书中活成这一类的人心念一动就能想出很多，他们大部分都可以作为鲁迅先生笔下我中华的脊梁，但我偏偏把孔融放在这里，为何呢？是因为我想说明这条适用于大众的对历史人物看法的惯性思维多半有些不客观。“孔四岁，能让梨”，这是大部分人都清楚的故事，别的不说，我在痴迷三国的那个年龄，总还是把孔融当成个人物的。但稍稍读点书，以今日之眼光，想瞧得上孔融这个人实在是难，可他却在未来的两千年里享尽英德之名，被无数父母当作启蒙孩子的一个典范，与古往今来无数仁人志士枭雄豪杰并排而立，我以为实在是忝列其中啊。</p>\n<center>三</center>\n\n<p>让一个梨便得以流芳千古，这个梨也实在是贵的很啊，让梨这个操作也算是东汉末年一个最成功的炒作了吧。但我实在是不明白大一点的梨子是孔融吃掉还是他哥哥吃掉到底对他们一家或者说对他们兄弟二人能有多大干系呢。非要说的话，难道梨子在东汉越大越香？而大到一定程度会产生口感上的质变？还是一个天生不太喜欢吃梨子的小孩在东汉不太常见？</p>\n<p>我以为是后者，毕竟在一个百姓连饭都吃不饱的时代，产生一个类似孔融这种不喜欢梨的小孩实在是困难，这也是保证这件事合理性的唯一解释了，不然孔融一家想必都有癔症。</p>\n<p>但遗憾的是，事实来看他们一家就是有癔症，也许是遗传的吧。毕竟硬要说的话，他们的老祖宗孔丘也有癔症，但孔夫子的癔症到底是在我这个两千多年后的后生眼里才能得见的，在孔夫子那个时代就算是癔症也多少有些可爱。但一种病毒也许两千年前无伤大雅甚至可以说是可爱，到一千年前病毒几经变异变成了值得称颂的一个身体特征，而到了一百多年前当一个群体把感染了这个病毒当成荣耀并认为人人便该如此的时候，来了另一群没得病且更强壮的人使得感染这个病毒变成了自然选择的一个逆选项时，有一些病人开始尝试治病但囿于同胞掣肘与病毒几经进化下的狡诈以及自身体内病毒的顽固，失败了，对于这种人，在考虑失败后果之前，我以为首先得感慨一下其知其不可而为之的勇气，至少这是我尊敬孔子的一个重要原因，也是我认为对卖国贼李鸿章，有必要进行另一番议论的原因。</p>\n<center>四</center>\n\n<p>以上所述的“癔症”，我想与今年的新冠肺炎多少有些类似，症状复杂容易变异，只是这癔症并不作用在生理上而是作用在精神上。其症状很多，五花八门，但我今天想谈谈的只有务虚。</p>\n<p>就像孔融让梨得到赞扬一样，赞扬的不是让梨这个动作而是其谦让的品德。我从不否认谦让是个美德，但让一个历史上实实在在活生生的人，因为这样一个简单的动作就成为了根植一个名族内心千年的道德符号，我认为实在是荒谬了些，哲学上喜欢将一件事情推到极端而后再观察其是否仍然符合某一标准，而长大后的孔融倒着实使这个荒谬的意味更深了些。</p>\n<p>几乎没有付出任何代价与个人的努力，一件名门世家随意记录的小小的事情，让一个人毫不费力收获了也许是古往今来来自孩子和家长们最多的赞誉，这不是偶然，而是自先秦到清末国人一直存在的务虚观念，几个小小的汉字，所谓仁义礼智信孝廉，都是好的优秀的修身品德，也从来都是封建时代的国人精英们竞相模仿参照的对象，可仔细想想，这几个字有所谓放之四海而皆准的具体的标准与定义吗？是所谓的标准管用还是历代大儒帝王的一声惊叹或者流传坊间的一段传奇更加管用呢？普通人是实实在在的做事更能得到赞扬还是卧冰求鲤式的“作秀”更能得到赞扬呢？</p>\n<p>这些品德确立之初的好坏我无从得知，但由于上述文字解释权等原因，这几个字或者说我中华中世纪所追求的那些抽象的概念，渐渐变为了权力与利益的代言人，成为了统治者所谓推行“王治”的工具（与其说是王治，不如说是愚民）。而随着皇权的愈加集中，传播这些务虚概念的工具，即我们引以为傲的科举，使得无数中世纪乃至近代的国人精英沦为了务虚的奴隶，深陷囹圄而自以为自由（李鸿章有改变很多事物的资本，但他囿于所谓忠君之类的概念敷衍其事含糊其词，想必也是务虚已入骨髓矣）。在没有西方文化冲击的情况下，整个民族和国家都浸沐在这务虚的汤药中，难以自拔。</p>\n<p>我本身是一个很懒惰的人，所谓磨洋工的一把好手，所以倘若我在百年千年前的话，肯定会变着花样以把自己弄死为标准去对应这些百姓追求统治者喜欢的概念，也许周围正好来了个大儒书圣，听说了我的故事的话还能把我的事迹记录一些，这样“流芳百世”的难度的确是大，但想必也比实干勤学的概率要大的多，还省去了不论是脑力还是体力带来的困难与麻烦，整不好运气更好点倒是能成为孔融一样的道德符号，实在是妙啊，妙不可言。</p>\n<p>既然务虚便能带来一切能够自我宽慰还得社会认可的东西，那作为贵族官员干嘛要务实呢？留着指甲，以商贾为耻，以农桑为耻，以一切实干为耻（当然社会是需要人做实事的，但做实事在我们的文化里受待见吗？所谓君子远庖厨，历朝历代各个英雄豪杰当然也有很多实干的，但实干的基础仍然是这个务虚的社会，这本身就给这个实干抹上了一层务虚的阴影），专注虚妄的经学便能高人一等，有文才胸富万经的为官一处自是高高在上，没有这个本事的寒窗苦读一番也能落个“读书人的偷能叫偷吗”的阿Q式精神胜利，在精神上又是高高在上，都是高高在上，在1793年英国使团来华时是高高在上，在19世纪被英国揍、被日本揍之后还是高高在上。永远都是高高在上，这一词也许便能概括李鸿章一生大部分清廷官员的心理了吧，即使对洋人卑躬屈膝，对着百姓照样还是高高在上，照样是所谓“牧民于野”的当代俊杰。</p>\n<p>欺民，罔民，愚民，却将这种行为解释为王化，“王化”过后便使牧民如放牧牛羊那般简单（如此看来儒家的王治倒是能够作为畜牧业一个很好的理论），古语中的这个“牧”字用的很是精髓啊。这也概括了务虚之道能够得以盛行，国人能够自欺欺人的原因，在这样一个务虚时代之末，则有国贼李鸿章。</p>\n<center>五</center>\n\n<p>梁任公先生在1901年为李鸿章做的传记里，有这样一段话：</p>\n<blockquote>\n<p><em>夫李鸿章果足称为中国第一人与否吾不敢知，而要之现今五十岁以上之人，三四品以上之官，无一可以望李之肩背者，则吾所能断言也。李之死，于中国全局有关系与否吾不敢知，而要之现在政府失一李鸿章，如虎之丧其伥，前途岌岌，愈益多事，此又吾所敢断言也</em></p>\n</blockquote>\n<p>加之记述一下李鸿章光绪元年所上之奏疏：</p>\n<blockquote>\n<p><em>近时拘谨之儒，多以交涉洋务为涴人之具；取巧之士，又以引避洋务为自便之图。若非朝廷力开风气，破拘挛之故习，求制胜之实际，天下危局，终不可支，日后乏才，且有甚于今日者。以中国之大，而无自立之时，非惟可忧，抑亦可耻</em></p>\n</blockquote>\n<p>摘录至此，不由扼腕感慨百多年前洋务之艰难，掣肘之猖獗。</p>\n<p>引避洋务以自便，多轻松的自便之法啊，从前务虚以留其名，尚且还得付出诸多代价，而洋人来了后为一个高风亮节之名，却只需对奇技淫巧表达不屑，对操办洋务以自强求富之人以鄙夷眼光视之。多轻便啊，居庙堂之高则上书参劾，处江湖之远则煽民怨怼，永远站在务虚下道德的制高点，倒颇像今天的键盘侠，下笔滔滔如有千言，若问韬略胸无一策。可惜的是今天的键盘侠倒是稍讲道理的人就会心生厌恶，而那个时代做一个真正杀人的键盘侠倒成了政治正确。</p>\n<p>而“求制胜之实际”这句话倒着实让我奇怪，我实在不知道制胜的实际为什么要求。在一个逝者如斯夫的三维世界，什么东西都是一锤子买卖，制胜难道还有实际与不实际的分别？一个管理着四亿五千万人口的朝廷，于国事竟要以“实际”与否为争论点，实在荒唐（也许以往务虚之实际对洋人不管用吧，毕竟洋人大部分人都不给你“牧”，明明这才是现在看来正常的表现到了晚清士大夫眼中成了蛮夷无廉耻的表现，估计他们也很苦恼吧），也难怪任公先生有以上断言了。</p>\n<p>这就是那个时代我国的头号国贼了，倒不知他卖的国是虚妄概念上的国还是实际意义上的国了，不知道满清朝廷在马关之后的朝堂上有没有这一议论。</p>\n<center>六</center>\n\n<p>说李是国贼的论据，我以为归纳起来大约有四个大点。其一为边防塞防之争；其二为甲午战争之败；其三为辛丑条约之耻；其四为死后余产之巨。针对这几点，我也想简单谈谈我的看法。</p>\n<p>关于边防塞防之争，以今日结果的眼光来看李鸿章所谓的“放弃新疆”自然是妥妥卖国行为，引述其作此决策的理由大致如下：</p>\n<blockquote>\n<p><em>历代备边，多在西北，其强弱之势，主客之形，皆适相埒，且犹有中外界限。今则东南海疆万余里，各国通商传教，往来自如，麇集京师，及各省腹地，阳托和好之名，阴怀吞噬之计，一国生事，诸国构煽，实为数千年来未有之变局。轮船、电报之速，瞬息千里，军器、机事之精，工力百倍，又为数千年来未有之强敌。外患之乘，变幻如此，而我犹以成法制之，譬如医者疗疾，不问何症，概投之以古方，诚未见其效也</em></p>\n</blockquote>\n<p>彼时背景正为日本寻衅侵略台湾，海防压力巨大，若忽略新疆一事，我以为兴建海防实在算是清末洋务少有的高瞻远瞩之举了，而对于新疆问题，李鸿章倒似乎想以外交途径解决（这也是他的惯用伎俩了，甲午之败这也是因素之一）。唉，彼时之人哪里懂得弱国无外交的道理呢，如此看来若无左宗棠收复新疆，也许新疆在那时候就成为了永远收不回的东三省了吧（九一八事变后民国政府也企图通过外交途径解决东北问题）。</p>\n<p>也正应如此，世人往往厚左而薄李，但以我之见，左宗棠与李鸿章并无大分别，李并非一意放弃塞防而是以为边防更为紧迫，而左亦非务虚守旧之人，只是认为新疆之失已迫在眉睫而海上之难尚可以时日斡旋。边防塞防之争，与其说是善恶之争，倒不如说是厉害得失之争。可叹啊，百年后的课本中，左宗棠成了英雄，而李鸿章却成了国贼，实在只是命长与命短的分别啊。</p>\n<p>而对甲午战争之败，我没有什么好说的，整个战争我仿佛看到的不是战争，而是一帮小孩在拿人命、鲜血与一个民族的尊严为筹码玩过家家，仿佛这个国，不是实际意义上的国。世人皆知甲午海战北洋水师全军覆没，是以为耻，却不知陆军在朝鲜更是一败涂地。对此战的总结梁任公先生在为李所作传记中已经分析的很透彻了，我不再赘言，遂摘录如下。</p>\n<blockquote>\n<p><em>当中日战事之际，李鸿章以一身为万矢之的，几于身无完肤，人皆欲杀。平心而论，李鸿章诚有不能辞其咎者，其始误劝朝鲜与外国立约，昧于公法，咎一；既许立约，默认其自主，而复以兵干涉其内乱，授人口实，咎二；日本既调兵，势固有进无退，而不察先机，辄欲倚赖他国调停，致误时日，咎三；聂士成请乘日军未集之时，以兵直捣韩城以制敌而不能用，咎四；高升事未起之前，丁汝昌请以北洋海军先鏖敌舰，而不能用，遂令反客为主，敌坐大而我愈危，综其原因，皆由不欲衅自我开，以为外交之道应尔，而不知当甲午五六月间，中日早成敌国，而非友邦矣，误以交邻之道施诸兵机，咎五；鸿章将自解曰：量我兵力不足以敌日本，故惮于发难也。虽然，身任北洋整军经武二十年，何以不能一战？咎六；彼又将自解曰：政府掣肘，经费不足也。虽然，此不过不能扩充已耳，何以其所现有者，如叶志超、卫汝贵诸军，素以久练著名，亦脆弱乃尔，且克减口粮盗掠民妇之事，时有所闻，乃并纪律而无之也，咎七；枪或苦窳，弹或赝物，弹不对枪，药不随械，谓从前管军械局之人皆廉明，谁能信之，咎八；平壤之役，军无统帅，此兵家所忌，李乃蹈之，咎九；始终坐待敌攻，致于人而不能致人，畏敌如虎，咎十；海军不知用快船快炮，咎十一；旅顺天险，西人谓以数百兵守之，粮食苟足，三年不能破，乃委之于所亲昵阘冗恇怯之人，闻风先遁，咎十二。此皆可以为李鸿章罪者。若夫甲午九十月以后，则群盲狂吠，筑室道谋，号令不出自一人，则责备自不得归于一点。若尽以为李鸿章咎，李固不任受也。又岂惟不任受而已，吾见彼责李罪李者，其可责可罪，更倍蓰于李而未有已也。是役将帅无一人不辱国，不待言矣。然比较于百步五十步之间，则海军优于陆军，李鸿章部下之陆军，又较优于他军也。</em></p>\n</blockquote>\n<p>战争之后，尚有广东水师向日本索要被俘舰只，理由竟是此次战役与广东无涉。荒唐至此，毫无国家民族观念，以五十步笑百步之典，李倒着实是那五十步之人，但一个国家只有五十步与百步的分别，岂不谬哉！</p>\n<p>至于辛丑条约，我以为无甚好说，前两者对李都有切实可责可恨之处，凡是认为李无一点错误责任，无一点卖国嫌疑者都是巧言令色之人。惟此辛丑条约，说李是代国背锅言辞尚可牵强而去。只是可惜可恨啊，面对务实之世界，务虚者仍活在往日虚幻的天朝大国的旧梦里，可惜是针对那时被虚妄的概念奴役却自以为自由的愚民，可恨是针对朝堂上自私自利毫无理性的那几家几姓。</p>\n<p>最后也就是死后遗产之巨了，关于这个我没有观点，也没做什么考证，四千万家产的言论没有什么根据，但清正廉洁的说法也就是自娱自乐了，而对于因为李鸿章财产甚多而输了甲午战争的言论，我也无话可说，见解如此，与键盘侠无异。以下摘录任公所作传记中的一段话，仁者见仁，智者见智吧。</p>\n<blockquote>\n<p><em>世人竞传李鸿章富甲天下，此其事殆不足信，大约数百万金之产业，意中事也。招商局、电报局、开平煤矿、中国通商银行，其股份皆不少，或言南京、上海各地之当铺银号，多属其管业云</em></p>\n</blockquote>\n<p>以上四点，第一、第三、第四点我认为以此为依据对李进行口诛笔伐只是视李为国贼带来的惯性思维所致，即在摆出论据之前心中已有答案，而后用这些论据中的点去套已有的结论。这样做虽然看起来不够客观，但我认为实在是人心所向。而第二点则是“国贼论”的核心，也是李鸿章以及所谓大清帝国的转折点吧，在这一点上李鸿章有直接责任。从前被英法等一流列强欺负，但装饰门面倒还对的起“帝国”这两个字的隐形含义，今而兴洋务练出的新军在日本人面前不堪一击，以使敌人在朝鲜都不相信战胜的就是所谓清廷按照西法练成的精锐部队。</p>\n<p>由此看来，这些活在近代的中古士大夫在务虚本领之上倒还是实在的啊，能够做到让外人不辨雌雄。</p>\n<center>七</center>\n\n<p>对李鸿章，梁任公先生总结其为“时势所造之英雄，非造时势之英雄”，又对其一生事迹评价为“不学无术，不敢破格，是其所短也；不避劳苦，不畏谤言，是其所长也”。</p>\n<p>是英雄造时势还是时势造英雄，这一直可以视为是一个悖论问题，这一问题有诸多解法的原因其实也只是因为对英雄与时势有诸多不同的定义与见解而已。</p>\n<p>英雄是什么，一怒之下伏尸百万流血千里的应该能算，这是就其权威而论的；率性任侠义气为先的想必也能算，这是就其个性担当而言的；富国强兵振兴朝政的一定能算，这是就其能力而论的；而为国请命鞠躬尽瘁死而后已的也一定能算，这是就其一片赤子之心而论的。这四点似乎都没错，但偏偏国贼李鸿章似乎与后三点都沾些边，对部下讲情义，为国事不避艰难，临死之前尚在为国事操心，按这个道理，他该是英雄啊，在通俗历史评价上他该是顶线以上的人啊，怎么会落得底线以下的看法与待遇呢？还是引用任公先生的话。</p>\n<blockquote>\n<p><em>十九世纪列国皆有英雄，而我国独无一英雄，则吾辈安得不指鹿为马，聊自解嘲，翘李鸿章以示于世界曰，此我国之英雄也。呜呼！亦适我国之英雄而已矣，亦适成为我国十九世纪以前之英雄而已矣</em></p>\n</blockquote>\n<p>是啊，自始皇帝嬴政开创中央集权政体之日起，五经四书浸染之下的千年务虚时代，又哪有什么英雄造时势的事情呢？始皇殁后有项羽，一个勇武过人的英雄在乎的是如何让锦衣不夜行，在意这种虚妄的概念使他重新推行分封。后有刘邦，有曹操，有李世民，有赵匡胤，有朱洪武，再有所谓康乾盛世，有所谓同治中兴，那么多个皇帝之下有那么多个能人猛士堪称英雄，可有谁真正造就过时势吗？似乎有，如周瑜赤壁的那一把火，似乎又没有，因为我只看到了一个个朝代的更替与牧民锁链的加重。也许以百年局部的眼光来看，总有公瑾一般的豪杰改造时势，但以千年民族国家的眼光来看，十九世纪前所谓的英雄，不过是在同一片天空之下翻手为云覆手为雨罢了，他们从没有改天换日的见识与气魄。</p>\n<p>话虽这样说，但英雄在他们的时代仍然是英雄，非要以今日之眼光视昨日之旧人未免落入历史虚无主义的窠臼。而对李鸿章以国贼的态度进行苛责，与此同理，无非是以今日之评价观点视旧时之英雄罢了。在对李一系列失误的讨论之外，我认为不应该让一个旧时代的先行者为他所处的整个时代背锅。</p>\n<p>但话又说回来，这样一个不避劳苦的旧时代先行者，究其一生却为何在历史上仍落个身败名裂的下场呢？</p>\n<p>千年务虚时代，治经论典自然是务虚，可人毕竟是活在现实世界的啊，“务实”必不可少，闻鸡起舞者有之，改政变法者有之，“格物致知”者亦有之，为何集数千年这亿万之人，却无一个堪当变务虚时势为务实的英雄呢？自是千年务虚痼疾已深，不彻底打碎更变实在是无从谈起啊。否定了这一点，就是对20世纪我们中国人长达一个世纪的更革奋斗视而不见。</p>\n<p>而以李鸿章为汉奸国贼者，必为甲午之败辛丑之耻痛惜扼腕，仿佛杀李则能改变战局避免国耻，而清廷则仍是堂堂正正的大清帝国，这实在是癔梦啊。想当造时势之英雄，则必须要能真正的打破务虚学而有术，这在当时几乎是与整个千年文化积习为敌，事实证明李鸿章这种务虚时代的实干家不行，翁同龢这种务虚时代的所谓君子、康有为这种务虚时代所谓的改革家都不行，那些务虚时代的小人就更不必说了。</p>\n<p>以李鸿章之务实敢干不辞辛劳生于务虚时代都难以学而有术，洋务半生尚“不识国民之原理，不通世界之大势，不知政治之本原”，一生兢兢业业如履薄冰都难以在后世摆脱一个“国贼”的骂名，可见务虚痼疾程度之深了。以务虚时代之英雄而成务实时代之国贼，英雄和国贼果然有所谓巨大的间隙吗？还是李鸿章生平前后的主流文化之间有这般巨大的间隙呢？这百年来，那么多只如鲁迅先生般的如椽巨笔，才堪堪扭转千年痼疾在人心中的荼毒之深，将这种荼毒所表现出的后果让李一人一力承担，我觉得实在是肤浅过分的言论。</p>\n<p>唉，以旧英雄之身份而成新时代之国贼，以今日之眼光，到底该视为李鸿章的过错还是千年务虚文化的过错呢？</p>\n<center>八</center>\n\n<p>作为一个中国人，对历史总会心存一些假如（毕竟有强汉盛唐，现在的口号也还是复兴）。总有人会说满清误国，认为遇上19世纪那千年未有之变局的假如不是满清朝廷而是汉人王朝情况会完全不同；也有人会想若遭遇此事的中国统治者不是咸丰，不是光绪，不是慈禧，而是秦皇汉武唐宗宋祖，结局也会不一样；还有人说明朝的资本主义萌芽是被满清给消灭的，否则中国也会自然而然的成为近代西方那样发达的资本主义国家。</p>\n<p>诸如此类的想法很多，但历史没有偶然，即使有偶然，在一个模拟器中能够重现历史，让那些明君圣君放弃一家一姓特权，让那些世家门阀放弃所有地方权益的概率能有多少呢？即使有人真的愿意，他能够扳的过整个旧文化的手腕吗？（过继当上皇帝的想尊自己的生父历朝历代士大夫都会罗里吧嗦的，没有点手腕的皇帝连这种事都搞不定，即使手腕通天难道能搞定整个文化变革的事情吗？因此在中国这种务虚文化的千年体系下，自上而下的改革是不可能行的通的，想变革只有改变一个民族的思想，这又哪里是一个人能够办得到的呢），孟子说过“人之所以异于禽兽者几希，庶民去之，君子存之”，孟子当然是惯于骂人禽兽，而放弃他这种庶民君子的成见，还智于百姓，让“君子”与“禽兽”平起平坐，历代有君王与权臣能够做到吗？（也许中国能够依赖如明治天皇那样的明君通过变革依靠广阔的土地在19世纪成为列强，但这种强国方式与英美等国还是有根本区别，日本明治维新后是变强了，但仍然有华族这种旧时代产物，我以为仍然带着野蛮不理性的气息，以中国之大，如此，更甚矣，仍然只会成为如沙皇俄国那样的纸老虎）王莽的改制引来了千古骂名只是因为其制过激而使掣肘过厉，而“科举”的产生也只是得益于旧门阀势力的削弱，而这种削弱，无不是血与铁的结果，而后再看19世纪末李鸿章所遭之非议，守旧势力在19世纪到20世纪的关口还指望着把洋人赶走继续上古时期的统治方法。这是他们幼稚吗？不是，实在是千年务虚积疾过深，使得四万万国人人人为鸵鸟而不自知，大才如严复尚且崇尚科举，务实如李鸿章尚且惋惜自己一生没做成军机大臣。</p>\n<p>在这种千年务虚观念深入骨髓的情况下，小修小补有用吗？剜肉补疮有用吗？我看把血全换了都未必有用。在这种情况下，将千年务虚积累下导致的癔病产生的痛苦全部归咎给李鸿章这种只会小医小补的郎中，合理吗？骂李是国贼，那必须带上当时满朝文武，带上当时被欺罔了数千年的四万万百姓，带上数千年政治文化风俗的方方面面。雪崩之时，没有一片雪花是无辜的，但作为压死骆驼的最后一根稻草，难道李鸿章留给历史的意义只是让后人怒斥痛骂吗？</p>\n<p>十九世纪以前的英雄，配上了务虚思想引导下的务实，却成了日后人们眼中的国贼，应该感到悲哀吗？不应该感到悲哀吗？对着那个由务虚向务实转化的时代，是继续痛斥那务虚时代下的国贼或者说英雄，还是应该对我们19世纪以前的文化多做一些反思呢？</p>\n<p>后者，我以为才是李鸿章这个历史车轮扭动间隙下产生的矛盾人物该给我们带来的意义。</p>\n<center>后记</center>\n\n<p>本文基本可以视为是《走向共和》电视剧前半段以及梁任公先生的传记《李鸿章》的观后感吧，写之前没想过要什么纲领也没有确定什么中心论点，写到现在洋洋洒洒有八千多字，也渐渐形成了一个很不清晰的脉络吧。</p>\n<p>全文的中心其实也就是以李鸿章个人在通俗历史评价上的矛盾为引，引出对19世纪前中华传统文化的反思吧。一个代表着那段历史的人物，以两种文化的眼光看待，会得出英雄和国贼两个迥异的看法，这种激烈的矛盾也着实可以说明旧文化的一些荒谬之处了。</p>\n<p>当然全文只是借用了务实与务虚这一对矛盾在19世纪末那个节点上所爆发出来的强弱态势，并没有对中西文化或者说中国传统文化与现代文化进行所谓优劣对比及形成原因说明。因为非要进行详细的对比说明的话，我认为恐怕得从先秦思想和古希腊哲学的迥异说起，那话题就大了，所以全文对这种矛盾在我国中世纪的表现仅仅以叙代议，所表达的仅仅只是矛盾本身而不是对矛盾产生原因的分析论证。</p>\n<p>全文以李鸿章为引，但对李鸿章一生的事迹仅仅摘捡了其作为国贼原因的几个大点论述，如果对李鸿章或那个时代感兴趣，着实推荐任公先生的传记《李鸿章》（即《同光以来大事记》），其文作于1901年李鸿章死后不久，集合了那个时代的视角与梁公极其客观的评价，我认为堪称是了解李鸿章的第一手资料，也是了解那个时代的一个不错的POV。</p>\n<p>再来谈谈文章的另一个引子孔融，也许以知人论世而言他该算是在文学上卓有成就（建安七子之首），气节上也不错（堪称魏晋风骨，虽然我以为孔融这种气节不要也罢）。我在文章中如此苛责他说实话与大众苛责李鸿章也许没有什么本质的区别吧，要说区别，其实也是因为孔融所代表的这种务虚做派着实让我disgusting吧（细细想来，古人会写字的不多，所以键盘侠才会如此弥足珍贵吧），之前读过一些孔融的史料，有机会会写写我为啥那么不喜欢孔融，在此不再说明了。</p>\n<p>最后，谈谈为何我写着写着就以务虚作为一个主线了吧，这个原因说来惭愧，实在是自己的务虚行为所致，如今三月，还有三个月本科就该画上句号，但纵观自己这四年，基本没干成什么实在的事情（书读的好当然是实在的，游戏打出了名堂也是实在的啊，唯独什么都没做的像样倒是值得思考的一个点），遂作此文以自勉。</p>\n<p>子夜，记于2020.3.4 九江。希望疫情退散武汉加油。</p>\n"},{"title":"Android开发一：HelloWorld","date":"2020-08-29T02:13:02.000Z","fileName":"android-dev-helloworld","_content":"\n## HelloWorld程序运行\n\n### AS设置\n\n#### gradle版本设置\n\n在`gradle-wrapper.properties`文件中修改以下代码中的版本号即可\n\n```\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\n```\n\n同时，可以去gradle官网上下载相关版本，避免下载缓慢的问题\n\n#### 使用镜像\n\n在`build.gradle`文件中的仓库前加上阿里镜像加快下载速度（两处都要进行更改）\n\n```\nrepositories {\n    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}\n    google()\n    jcenter()\n}\n```\n\n### 运行程序\n\n在AS设置正常的情况下，直接按运行健即可运行IDE自动创建的helloworld程序了，此时需要先在右上角的`AVD Manager`中创建虚拟机器，之后按运行按钮即可运行，运行效果如下\n\n<img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/helloworld.png\" style=\"zoom:50%;\" />\n\n## Android项目结构\n\n将项目结构模式设置为**Project**后（默认为Android），项目结构如下。\n\n其中重点需要关注的是**app**文件，项目中的代码、资源等内容基本都在该文件夹下。而其他文件多半是自动生成的配置文件，一般情况下不需要进行修改\n\n![](http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png)\n\n### app文件下的文件\n\n#### build\n\n包含了一些在编译时自动生成的文件，一般情况下不需要修改\n\n#### libs\n\n项目中需要用到的jar包都放置在该目录下\n\n#### androidTest\n\n用来编写Android Test测试用例的，可以对项目进行一些自动化测试\n\n#### java\n\n放置Java代码的文件夹\n\n#### res\n\n项目中用到的所有图片、布局等资源都存放在该目录下（如：**图片放在drawable下，布局放在layout下，字符串放在values下**）\n\n#### AndroidManifest.xml\n\n整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件中注册，也可以在该文件中给应用程序添加权限声明。\n\n如下是该文件中的部分代码，该段代码表示对MainActivity这个活动进行注册（未在该文件中进行注册的活动是不能使用的）\n\n```\n<activity android:name=\".MainActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\t<!--表示该活动是主活动-->\n\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```\n\n#### test\n\n用来编写单元测试用例\n\n### 主活动代码\n\n由于Android讲究**逻辑和视图分离**，因此应该在**布局文件中编写界面，在活动中引入进来**。\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\t// 引入了一个布局\n    }\n}\n```\n\n因此，在`res/layout`中能够找到helloworld程序的布局样式如下\n\n![](http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E5%B8%83%E5%B1%80.png)\n\n\n\n### res中的资源文件\n\n在之前已经简单叙述过了，现在简单讲讲如何使用这些资源\n\n以`res/values/strings.xml`为例，该处定义了一个应用程序名的字符串\n\n```\n<resources>\n    <string name=\"app_name\">My Application</string>\n</resources>\n```\n\n> **在代码中通过`R.string.app_name`来引用**\n>\n> **在XML中通过`@string/app_name`来引用**\n\n如AndroidManifest.xml中部分代码如下\n\n```\nandroid:icon=\"@mipmap/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:roundIcon=\"@mipmap/ic_launcher_round\"\n```\n\n\n\n### build.gradle文件\n\n整个项目结构中有两个这个文件，一个是在项目最外层（之前添加阿里镜像就是在这儿添加的），一个则是在app文件夹下面\n\n#### 外层build.gradle\n\n其中**jcenter()**声明了一个代码托管仓库，很多开源项目都会选择将代码托管在jcenter中。\n\n之后**classpath**声明了一个Gradle插件，该插件表示是使用Gradle来构建Android项目\n\n```\nbuildscript {\n    repositories {\n        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:4.0.1\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n#### app文件下的build.gradle\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.2\"\n\n    defaultConfig {\n        applicationId \"com.example.myapplication\"\n        minSdkVersion 15\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n\n}\n```\n\n**apply plugin**：\n\n> 应用了一个插件，通常是com.android.application与com.android.library二选一。\n>\n> 前者表示一个应用程序模块，后者表示一个库模块（不能直接运行）\n\n**android**\n\n> 配置项目构建的各种属性\n\n**dependencies**\n\n> 指定项目所有依赖关系：\n>\n> 1、本地依赖\n>\n> 2、库依赖\n>\n> 3、远程依赖：对jcenter库上的开源项目添加依赖关系\n\n\n\n## 日志工具\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","source":"_posts/编程相关/Android/Android开发一：HelloWorld.md","raw":"---\ntitle: Android开发一：HelloWorld\ndate: 2020-08-29 10:13:02\ntags:\n\t- Android\ncategories:\n\t- 编程相关\n\t- Android\nfileName: android-dev-helloworld\n---\n\n## HelloWorld程序运行\n\n### AS设置\n\n#### gradle版本设置\n\n在`gradle-wrapper.properties`文件中修改以下代码中的版本号即可\n\n```\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.1.1-all.zip\n```\n\n同时，可以去gradle官网上下载相关版本，避免下载缓慢的问题\n\n#### 使用镜像\n\n在`build.gradle`文件中的仓库前加上阿里镜像加快下载速度（两处都要进行更改）\n\n```\nrepositories {\n    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}\n    google()\n    jcenter()\n}\n```\n\n### 运行程序\n\n在AS设置正常的情况下，直接按运行健即可运行IDE自动创建的helloworld程序了，此时需要先在右上角的`AVD Manager`中创建虚拟机器，之后按运行按钮即可运行，运行效果如下\n\n<img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/helloworld.png\" style=\"zoom:50%;\" />\n\n## Android项目结构\n\n将项目结构模式设置为**Project**后（默认为Android），项目结构如下。\n\n其中重点需要关注的是**app**文件，项目中的代码、资源等内容基本都在该文件夹下。而其他文件多半是自动生成的配置文件，一般情况下不需要进行修改\n\n![](http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png)\n\n### app文件下的文件\n\n#### build\n\n包含了一些在编译时自动生成的文件，一般情况下不需要修改\n\n#### libs\n\n项目中需要用到的jar包都放置在该目录下\n\n#### androidTest\n\n用来编写Android Test测试用例的，可以对项目进行一些自动化测试\n\n#### java\n\n放置Java代码的文件夹\n\n#### res\n\n项目中用到的所有图片、布局等资源都存放在该目录下（如：**图片放在drawable下，布局放在layout下，字符串放在values下**）\n\n#### AndroidManifest.xml\n\n整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件中注册，也可以在该文件中给应用程序添加权限声明。\n\n如下是该文件中的部分代码，该段代码表示对MainActivity这个活动进行注册（未在该文件中进行注册的活动是不能使用的）\n\n```\n<activity android:name=\".MainActivity\">\n    <intent-filter>\n        <action android:name=\"android.intent.action.MAIN\" />\t<!--表示该活动是主活动-->\n\n        <category android:name=\"android.intent.category.LAUNCHER\" />\n    </intent-filter>\n</activity>\n```\n\n#### test\n\n用来编写单元测试用例\n\n### 主活动代码\n\n由于Android讲究**逻辑和视图分离**，因此应该在**布局文件中编写界面，在活动中引入进来**。\n\n```java\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\t// 引入了一个布局\n    }\n}\n```\n\n因此，在`res/layout`中能够找到helloworld程序的布局样式如下\n\n![](http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E5%B8%83%E5%B1%80.png)\n\n\n\n### res中的资源文件\n\n在之前已经简单叙述过了，现在简单讲讲如何使用这些资源\n\n以`res/values/strings.xml`为例，该处定义了一个应用程序名的字符串\n\n```\n<resources>\n    <string name=\"app_name\">My Application</string>\n</resources>\n```\n\n> **在代码中通过`R.string.app_name`来引用**\n>\n> **在XML中通过`@string/app_name`来引用**\n\n如AndroidManifest.xml中部分代码如下\n\n```\nandroid:icon=\"@mipmap/ic_launcher\"\nandroid:label=\"@string/app_name\"\nandroid:roundIcon=\"@mipmap/ic_launcher_round\"\n```\n\n\n\n### build.gradle文件\n\n整个项目结构中有两个这个文件，一个是在项目最外层（之前添加阿里镜像就是在这儿添加的），一个则是在app文件夹下面\n\n#### 外层build.gradle\n\n其中**jcenter()**声明了一个代码托管仓库，很多开源项目都会选择将代码托管在jcenter中。\n\n之后**classpath**声明了一个Gradle插件，该插件表示是使用Gradle来构建Android项目\n\n```\nbuildscript {\n    repositories {\n        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:4.0.1\"\n\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n```\n\n#### app文件下的build.gradle\n\n```\napply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.2\"\n\n    defaultConfig {\n        applicationId \"com.example.myapplication\"\n        minSdkVersion 15\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n\n}\n```\n\n**apply plugin**：\n\n> 应用了一个插件，通常是com.android.application与com.android.library二选一。\n>\n> 前者表示一个应用程序模块，后者表示一个库模块（不能直接运行）\n\n**android**\n\n> 配置项目构建的各种属性\n\n**dependencies**\n\n> 指定项目所有依赖关系：\n>\n> 1、本地依赖\n>\n> 2、库依赖\n>\n> 3、远程依赖：对jcenter库上的开源项目添加依赖关系\n\n\n\n## 日志工具\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","slug":"编程相关/Android/Android开发一：HelloWorld","published":1,"updated":"2021-01-11T04:22:13.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobi0059rwjs9kf3el1q","content":"<h2 id=\"HelloWorld程序运行\"><a href=\"#HelloWorld程序运行\" class=\"headerlink\" title=\"HelloWorld程序运行\"></a>HelloWorld程序运行</h2><h3 id=\"AS设置\"><a href=\"#AS设置\" class=\"headerlink\" title=\"AS设置\"></a>AS设置</h3><h4 id=\"gradle版本设置\"><a href=\"#gradle版本设置\" class=\"headerlink\" title=\"gradle版本设置\"></a>gradle版本设置</h4><p>在<code>gradle-wrapper.properties</code>文件中修改以下代码中的版本号即可</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">distributionUrl=https\\<span class=\"hljs-symbol\">://services</span>.gradle.org/distributions/gradle<span class=\"hljs-number\">-6.1</span>.<span class=\"hljs-number\">1</span>-all.zip<br></code></pre></td></tr></table></figure>\n\n<p>同时，可以去gradle官网上下载相关版本，避免下载缓慢的问题</p>\n<h4 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h4><p>在<code>build.gradle</code>文件中的仓库前加上阿里镜像加快下载速度（两处都要进行更改）</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-variable\">repositories</span> &#123;<br>    <span class=\"hljs-variable\">maven</span>&#123; <span class=\"hljs-variable\">url</span> <span class=\"hljs-string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">google</span>()</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">jcenter</span>()</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h3><p>在AS设置正常的情况下，直接按运行健即可运行IDE自动创建的helloworld程序了，此时需要先在右上角的<code>AVD Manager</code>中创建虚拟机器，之后按运行按钮即可运行，运行效果如下</p>\n<img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/helloworld.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"Android项目结构\"><a href=\"#Android项目结构\" class=\"headerlink\" title=\"Android项目结构\"></a>Android项目结构</h2><p>将项目结构模式设置为<strong>Project</strong>后（默认为Android），项目结构如下。</p>\n<p>其中重点需要关注的是<strong>app</strong>文件，项目中的代码、资源等内容基本都在该文件夹下。而其他文件多半是自动生成的配置文件，一般情况下不需要进行修改</p>\n<p><img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"app文件下的文件\"><a href=\"#app文件下的文件\" class=\"headerlink\" title=\"app文件下的文件\"></a>app文件下的文件</h3><h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p>包含了一些在编译时自动生成的文件，一般情况下不需要修改</p>\n<h4 id=\"libs\"><a href=\"#libs\" class=\"headerlink\" title=\"libs\"></a>libs</h4><p>项目中需要用到的jar包都放置在该目录下</p>\n<h4 id=\"androidTest\"><a href=\"#androidTest\" class=\"headerlink\" title=\"androidTest\"></a>androidTest</h4><p>用来编写Android Test测试用例的，可以对项目进行一些自动化测试</p>\n<h4 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h4><p>放置Java代码的文件夹</p>\n<h4 id=\"res\"><a href=\"#res\" class=\"headerlink\" title=\"res\"></a>res</h4><p>项目中用到的所有图片、布局等资源都存放在该目录下（如：<strong>图片放在drawable下，布局放在layout下，字符串放在values下</strong>）</p>\n<h4 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h4><p>整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件中注册，也可以在该文件中给应用程序添加权限声明。</p>\n<p>如下是该文件中的部分代码，该段代码表示对MainActivity这个活动进行注册（未在该文件中进行注册的活动是不能使用的）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.MAIN\"</span> /&gt;</span>\t<span class=\"hljs-comment\">&lt;!--表示该活动是主活动--&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><p>用来编写单元测试用例</p>\n<h3 id=\"主活动代码\"><a href=\"#主活动代码\" class=\"headerlink\" title=\"主活动代码\"></a>主活动代码</h3><p>由于Android讲究<strong>逻辑和视图分离</strong>，因此应该在<strong>布局文件中编写界面，在活动中引入进来</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AppCompatActivity</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);\t<span class=\"hljs-comment\">// 引入了一个布局</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因此，在<code>res/layout</code>中能够找到helloworld程序的布局样式如下</p>\n<p><img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E5%B8%83%E5%B1%80.png\" alt=\"\"></p>\n<h3 id=\"res中的资源文件\"><a href=\"#res中的资源文件\" class=\"headerlink\" title=\"res中的资源文件\"></a>res中的资源文件</h3><p>在之前已经简单叙述过了，现在简单讲讲如何使用这些资源</p>\n<p>以<code>res/values/strings.xml</code>为例，该处定义了一个应用程序名的字符串</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"app_name\"</span>&gt;</span>My Application<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>在代码中通过<code>R.string.app_name</code>来引用</strong></p>\n<p><strong>在XML中通过<code>@string/app_name</code>来引用</strong></p>\n</blockquote>\n<p>如AndroidManifest.xml中部分代码如下</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>icon=<span class=\"hljs-string\">\"@mipmap/ic_launcher\"</span><br><span class=\"hljs-symbol\">android:</span>label=<span class=\"hljs-string\">\"@string/app_name\"</span><br><span class=\"hljs-symbol\">android:</span>roundIcon=<span class=\"hljs-string\">\"@mipmap/ic_launcher_round\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"build-gradle文件\"><a href=\"#build-gradle文件\" class=\"headerlink\" title=\"build.gradle文件\"></a>build.gradle文件</h3><p>整个项目结构中有两个这个文件，一个是在项目最外层（之前添加阿里镜像就是在这儿添加的），一个则是在app文件夹下面</p>\n<h4 id=\"外层build-gradle\"><a href=\"#外层build-gradle\" class=\"headerlink\" title=\"外层build.gradle\"></a>外层build.gradle</h4><p>其中<strong>jcenter()</strong>声明了一个代码托管仓库，很多开源项目都会选择将代码托管在jcenter中。</p>\n<p>之后<strong>classpath</strong>声明了一个Gradle插件，该插件表示是使用Gradle来构建Android项目</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">buildscript</span> &#123;<br>    <span class=\"hljs-keyword\">repositories</span> &#123;<br>        maven&#123; url <span class=\"hljs-string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;<br>        google()<br>        jcenter()<br>    &#125;<br>    <span class=\"hljs-keyword\">dependencies</span> &#123;<br>        <span class=\"hljs-keyword\">classpath</span> <span class=\"hljs-string\">\"com.android.tools.build:gradle:4.0.1\"</span><br><br>        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span><br>        <span class=\"hljs-comment\">// in the individual module build.gradle files</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"app文件下的build-gradle\"><a href=\"#app文件下的build-gradle\" class=\"headerlink\" title=\"app文件下的build.gradle\"></a>app文件下的build.gradle</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">apply</span> <span class=\"hljs-string\">plugin: 'com.android.application'</span><br><br><span class=\"hljs-attr\">android</span> <span class=\"hljs-string\">&#123;</span><br>    <span class=\"hljs-attr\">compileSdkVersion</span> <span class=\"hljs-string\">30</span><br>    <span class=\"hljs-attr\">buildToolsVersion</span> <span class=\"hljs-string\">\"30.0.2\"</span><br><br>    <span class=\"hljs-attr\">defaultConfig</span> <span class=\"hljs-string\">&#123;</span><br>        <span class=\"hljs-attr\">applicationId</span> <span class=\"hljs-string\">\"com.example.myapplication\"</span><br>        <span class=\"hljs-attr\">minSdkVersion</span> <span class=\"hljs-string\">15</span><br>        <span class=\"hljs-attr\">targetSdkVersion</span> <span class=\"hljs-string\">30</span><br>        <span class=\"hljs-attr\">versionCode</span> <span class=\"hljs-string\">1</span><br>        <span class=\"hljs-attr\">versionName</span> <span class=\"hljs-string\">\"1.0\"</span><br><br>        <span class=\"hljs-attr\">testInstrumentationRunner</span> <span class=\"hljs-string\">\"androidx.test.runner.AndroidJUnitRunner\"</span><br>    <span class=\"hljs-attr\">&#125;</span><br><br>    <span class=\"hljs-attr\">buildTypes</span> <span class=\"hljs-string\">&#123;</span><br>        <span class=\"hljs-attr\">release</span> <span class=\"hljs-string\">&#123;</span><br>            <span class=\"hljs-attr\">minifyEnabled</span> <span class=\"hljs-string\">false</span><br>            <span class=\"hljs-attr\">proguardFiles</span> <span class=\"hljs-string\">getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'</span><br>        <span class=\"hljs-attr\">&#125;</span><br>    <span class=\"hljs-attr\">&#125;</span><br><span class=\"hljs-attr\">&#125;</span><br><br><span class=\"hljs-attr\">dependencies</span> <span class=\"hljs-string\">&#123;</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">fileTree(dir: \"libs\", include: [\"*.jar\"])</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">'androidx.appcompat:appcompat:1.2.0'</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">'androidx.constraintlayout:constraintlayout:2.0.1'</span><br>    <span class=\"hljs-attr\">testImplementation</span> <span class=\"hljs-string\">'junit:junit:4.12'</span><br>    <span class=\"hljs-attr\">androidTestImplementation</span> <span class=\"hljs-string\">'androidx.test.ext:junit:1.1.2'</span><br>    <span class=\"hljs-attr\">androidTestImplementation</span> <span class=\"hljs-string\">'androidx.test.espresso:espresso-core:3.3.0'</span><br><br><span class=\"hljs-attr\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>apply plugin</strong>：</p>\n<blockquote>\n<p>应用了一个插件，通常是com.android.application与com.android.library二选一。</p>\n<p>前者表示一个应用程序模块，后者表示一个库模块（不能直接运行）</p>\n</blockquote>\n<p><strong>android</strong></p>\n<blockquote>\n<p>配置项目构建的各种属性</p>\n</blockquote>\n<p><strong>dependencies</strong></p>\n<blockquote>\n<p>指定项目所有依赖关系：</p>\n<p>1、本地依赖</p>\n<p>2、库依赖</p>\n<p>3、远程依赖：对jcenter库上的开源项目添加依赖关系</p>\n</blockquote>\n<h2 id=\"日志工具\"><a href=\"#日志工具\" class=\"headerlink\" title=\"日志工具\"></a>日志工具</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"HelloWorld程序运行\"><a href=\"#HelloWorld程序运行\" class=\"headerlink\" title=\"HelloWorld程序运行\"></a>HelloWorld程序运行</h2><h3 id=\"AS设置\"><a href=\"#AS设置\" class=\"headerlink\" title=\"AS设置\"></a>AS设置</h3><h4 id=\"gradle版本设置\"><a href=\"#gradle版本设置\" class=\"headerlink\" title=\"gradle版本设置\"></a>gradle版本设置</h4><p>在<code>gradle-wrapper.properties</code>文件中修改以下代码中的版本号即可</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\">distributionUrl=https\\<span class=\"hljs-symbol\">://services</span>.gradle.org/distributions/gradle<span class=\"hljs-number\">-6.1</span>.<span class=\"hljs-number\">1</span>-all.zip<br></code></pre></td></tr></table></figure>\n\n<p>同时，可以去gradle官网上下载相关版本，避免下载缓慢的问题</p>\n<h4 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h4><p>在<code>build.gradle</code>文件中的仓库前加上阿里镜像加快下载速度（两处都要进行更改）</p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs isbl\"><span class=\"hljs-variable\">repositories</span> &#123;<br>    <span class=\"hljs-variable\">maven</span>&#123; <span class=\"hljs-variable\">url</span> <span class=\"hljs-string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;<br>    <span class=\"hljs-function\"><span class=\"hljs-title\">google</span>()</span><br>    <span class=\"hljs-function\"><span class=\"hljs-title\">jcenter</span>()</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h3><p>在AS设置正常的情况下，直接按运行健即可运行IDE自动创建的helloworld程序了，此时需要先在右上角的<code>AVD Manager</code>中创建虚拟机器，之后按运行按钮即可运行，运行效果如下</p>\n<img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/helloworld.png\" style=\"zoom:50%;\" />\n\n<h2 id=\"Android项目结构\"><a href=\"#Android项目结构\" class=\"headerlink\" title=\"Android项目结构\"></a>Android项目结构</h2><p>将项目结构模式设置为<strong>Project</strong>后（默认为Android），项目结构如下。</p>\n<p>其中重点需要关注的是<strong>app</strong>文件，项目中的代码、资源等内容基本都在该文件夹下。而其他文件多半是自动生成的配置文件，一般情况下不需要进行修改</p>\n<p><img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png\" alt=\"\"></p>\n<h3 id=\"app文件下的文件\"><a href=\"#app文件下的文件\" class=\"headerlink\" title=\"app文件下的文件\"></a>app文件下的文件</h3><h4 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h4><p>包含了一些在编译时自动生成的文件，一般情况下不需要修改</p>\n<h4 id=\"libs\"><a href=\"#libs\" class=\"headerlink\" title=\"libs\"></a>libs</h4><p>项目中需要用到的jar包都放置在该目录下</p>\n<h4 id=\"androidTest\"><a href=\"#androidTest\" class=\"headerlink\" title=\"androidTest\"></a>androidTest</h4><p>用来编写Android Test测试用例的，可以对项目进行一些自动化测试</p>\n<h4 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h4><p>放置Java代码的文件夹</p>\n<h4 id=\"res\"><a href=\"#res\" class=\"headerlink\" title=\"res\"></a>res</h4><p>项目中用到的所有图片、布局等资源都存放在该目录下（如：<strong>图片放在drawable下，布局放在layout下，字符串放在values下</strong>）</p>\n<h4 id=\"AndroidManifest-xml\"><a href=\"#AndroidManifest-xml\" class=\"headerlink\" title=\"AndroidManifest.xml\"></a>AndroidManifest.xml</h4><p>整个Android项目的配置文件，在程序中定义的四大组件都需要在这个文件中注册，也可以在该文件中给应用程序添加权限声明。</p>\n<p>如下是该文件中的部分代码，该段代码表示对MainActivity这个活动进行注册（未在该文件中进行注册的活动是不能使用的）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".MainActivity\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.MAIN\"</span> /&gt;</span>\t<span class=\"hljs-comment\">&lt;!--表示该活动是主活动--&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activity</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"test\"><a href=\"#test\" class=\"headerlink\" title=\"test\"></a>test</h4><p>用来编写单元测试用例</p>\n<h3 id=\"主活动代码\"><a href=\"#主活动代码\" class=\"headerlink\" title=\"主活动代码\"></a>主活动代码</h3><p>由于Android讲究<strong>逻辑和视图分离</strong>，因此应该在<strong>布局文件中编写界面，在活动中引入进来</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AppCompatActivity</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);\t<span class=\"hljs-comment\">// 引入了一个布局</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>因此，在<code>res/layout</code>中能够找到helloworld程序的布局样式如下</p>\n<p><img src=\"http://cdn.ziyedy.top/%E4%B8%80%E3%80%81Android%E5%BC%80%E5%8F%91HelloWorld/%E5%B8%83%E5%B1%80.png\" alt=\"\"></p>\n<h3 id=\"res中的资源文件\"><a href=\"#res中的资源文件\" class=\"headerlink\" title=\"res中的资源文件\"></a>res中的资源文件</h3><p>在之前已经简单叙述过了，现在简单讲讲如何使用这些资源</p>\n<p>以<code>res/values/strings.xml</code>为例，该处定义了一个应用程序名的字符串</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">resources</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">string</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"app_name\"</span>&gt;</span>My Application<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">string</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>在代码中通过<code>R.string.app_name</code>来引用</strong></p>\n<p><strong>在XML中通过<code>@string/app_name</code>来引用</strong></p>\n</blockquote>\n<p>如AndroidManifest.xml中部分代码如下</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>icon=<span class=\"hljs-string\">\"@mipmap/ic_launcher\"</span><br><span class=\"hljs-symbol\">android:</span>label=<span class=\"hljs-string\">\"@string/app_name\"</span><br><span class=\"hljs-symbol\">android:</span>roundIcon=<span class=\"hljs-string\">\"@mipmap/ic_launcher_round\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"build-gradle文件\"><a href=\"#build-gradle文件\" class=\"headerlink\" title=\"build.gradle文件\"></a>build.gradle文件</h3><p>整个项目结构中有两个这个文件，一个是在项目最外层（之前添加阿里镜像就是在这儿添加的），一个则是在app文件夹下面</p>\n<h4 id=\"外层build-gradle\"><a href=\"#外层build-gradle\" class=\"headerlink\" title=\"外层build.gradle\"></a>外层build.gradle</h4><p>其中<strong>jcenter()</strong>声明了一个代码托管仓库，很多开源项目都会选择将代码托管在jcenter中。</p>\n<p>之后<strong>classpath</strong>声明了一个Gradle插件，该插件表示是使用Gradle来构建Android项目</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">buildscript</span> &#123;<br>    <span class=\"hljs-keyword\">repositories</span> &#123;<br>        maven&#123; url <span class=\"hljs-string\">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;<br>        google()<br>        jcenter()<br>    &#125;<br>    <span class=\"hljs-keyword\">dependencies</span> &#123;<br>        <span class=\"hljs-keyword\">classpath</span> <span class=\"hljs-string\">\"com.android.tools.build:gradle:4.0.1\"</span><br><br>        <span class=\"hljs-comment\">// <span class=\"hljs-doctag\">NOTE:</span> Do not place your application dependencies here; they belong</span><br>        <span class=\"hljs-comment\">// in the individual module build.gradle files</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"app文件下的build-gradle\"><a href=\"#app文件下的build-gradle\" class=\"headerlink\" title=\"app文件下的build.gradle\"></a>app文件下的build.gradle</h4><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">apply</span> <span class=\"hljs-string\">plugin: 'com.android.application'</span><br><br><span class=\"hljs-attr\">android</span> <span class=\"hljs-string\">&#123;</span><br>    <span class=\"hljs-attr\">compileSdkVersion</span> <span class=\"hljs-string\">30</span><br>    <span class=\"hljs-attr\">buildToolsVersion</span> <span class=\"hljs-string\">\"30.0.2\"</span><br><br>    <span class=\"hljs-attr\">defaultConfig</span> <span class=\"hljs-string\">&#123;</span><br>        <span class=\"hljs-attr\">applicationId</span> <span class=\"hljs-string\">\"com.example.myapplication\"</span><br>        <span class=\"hljs-attr\">minSdkVersion</span> <span class=\"hljs-string\">15</span><br>        <span class=\"hljs-attr\">targetSdkVersion</span> <span class=\"hljs-string\">30</span><br>        <span class=\"hljs-attr\">versionCode</span> <span class=\"hljs-string\">1</span><br>        <span class=\"hljs-attr\">versionName</span> <span class=\"hljs-string\">\"1.0\"</span><br><br>        <span class=\"hljs-attr\">testInstrumentationRunner</span> <span class=\"hljs-string\">\"androidx.test.runner.AndroidJUnitRunner\"</span><br>    <span class=\"hljs-attr\">&#125;</span><br><br>    <span class=\"hljs-attr\">buildTypes</span> <span class=\"hljs-string\">&#123;</span><br>        <span class=\"hljs-attr\">release</span> <span class=\"hljs-string\">&#123;</span><br>            <span class=\"hljs-attr\">minifyEnabled</span> <span class=\"hljs-string\">false</span><br>            <span class=\"hljs-attr\">proguardFiles</span> <span class=\"hljs-string\">getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'</span><br>        <span class=\"hljs-attr\">&#125;</span><br>    <span class=\"hljs-attr\">&#125;</span><br><span class=\"hljs-attr\">&#125;</span><br><br><span class=\"hljs-attr\">dependencies</span> <span class=\"hljs-string\">&#123;</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">fileTree(dir: \"libs\", include: [\"*.jar\"])</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">'androidx.appcompat:appcompat:1.2.0'</span><br>    <span class=\"hljs-attr\">implementation</span> <span class=\"hljs-string\">'androidx.constraintlayout:constraintlayout:2.0.1'</span><br>    <span class=\"hljs-attr\">testImplementation</span> <span class=\"hljs-string\">'junit:junit:4.12'</span><br>    <span class=\"hljs-attr\">androidTestImplementation</span> <span class=\"hljs-string\">'androidx.test.ext:junit:1.1.2'</span><br>    <span class=\"hljs-attr\">androidTestImplementation</span> <span class=\"hljs-string\">'androidx.test.espresso:espresso-core:3.3.0'</span><br><br><span class=\"hljs-attr\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>apply plugin</strong>：</p>\n<blockquote>\n<p>应用了一个插件，通常是com.android.application与com.android.library二选一。</p>\n<p>前者表示一个应用程序模块，后者表示一个库模块（不能直接运行）</p>\n</blockquote>\n<p><strong>android</strong></p>\n<blockquote>\n<p>配置项目构建的各种属性</p>\n</blockquote>\n<p><strong>dependencies</strong></p>\n<blockquote>\n<p>指定项目所有依赖关系：</p>\n<p>1、本地依赖</p>\n<p>2、库依赖</p>\n<p>3、远程依赖：对jcenter库上的开源项目添加依赖关系</p>\n</blockquote>\n<h2 id=\"日志工具\"><a href=\"#日志工具\" class=\"headerlink\" title=\"日志工具\"></a>日志工具</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n"},{"title":"Android开发三：布局（layout）","date":"2020-08-30T02:06:09.000Z","fileName":"Android3-layout","_content":"\n## Android常用控件\n\n### TextView\n\n> 在界面上显示一段文本信息\n\n#### 常用属性\n\n ```\nandroid:text=\"TextView\"\t\t显示的文本\nandroid:gravity=\"center\"\t对齐方式\nandroid:textSize=\"30sp\"\t\t文字大小\nandroid:textColor=\"#03A9F4\"\t文字颜色\n ```\n\n![](http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/TextView.png)\n\n### Button\n\n> 配置一个按钮，默认全为大写\n\n#### 常用属性\n\n常用属性与TextView类似\n\n```\nandroid:textAllCaps=\"false\"\t\t将默认文字全部大写关掉\n```\n\n#### 绑定逻辑代码（注册监听器）\n\n**使用匿名类的写法，不需要对view进行判断**\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // 添加逻辑代码\n        }\n    });\n}\n```\n\n**使用实现View.OnClickListener接口的方法**\n\n```\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(this);\n}\n\n@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\t// 判断触发监听器的是哪个按钮\n        case R.id.button:\n            // 添加逻辑代码\n            break;\n        default:\n            break;\n    }\n}\n```\n\n\n\n### EditText\n\n> 允许用户在控件里输入和编辑内容，并可以在程序中对这些内容进行处理\n\n#### 常用属性\n\n```\nandroid:hint=\"Type something here\"\t输入时的提示信息\nandroid:maxLines=\"1\"\t指定最大行数（如密码输入框最大行数为1），大于最大行数向下滚动\n```\n\n#### 常用方法\n\n```\ngetText()\t// 获取输入的内容\n```\n\n\n\n### AlertDialog\n\n> 在当前的界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够屏蔽掉其他控件的交互能力，因此 AlertDialog 一般都是用于提示一些非常重要的内容或者警告信息\n\n#### 对话框使用流程\n\n1. 通过` AlertDialog.Builder `创建一个 AlertDialog 的实例\n2. 为这个对话框设置标题、内容（`setMessage`）、可否用 Back 键关闭对话框（`setCancelable`）等属性\n3. 调用 setPositiveButton() 方法为对话框设置确定按钮的点击事件，调用 setNegativeButton() 方法设置取消按钮的点击事件\n4. 调用 show()方法将对话框显示出来\n\n#### 点击按钮将EditText在对话框中弹出\n\n该示例需要使用到按钮点击事件，从EditText获取内容，及AlertDialog的相关操作。\n\n```\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button = (Button) findViewById(R.id.button);\n        editText = (EditText) findViewById(R.id.edit_text);\n        button.setOnClickListener(this);\n    }\n\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.button:\n                String inputText = editText.getText().toString();\t// 获取输入内容\n                AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);\n                dialog.setMessage(inputText);\n                dialog.setCancelable(false);\n                dialog.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n\n                    }\n                });\n                dialog.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n\n                    }\n                });\n                dialog.show();\n                break;\n            default:\n                break;\n        }\n    }\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%BE%93%E5%85%A5%E6%A1%86%E5%BC%B9%E5%87%BA%E6%95%88%E6%9E%9C.png\" style=\"zoom:67%;\" />\n\n\n\n### ImageView\n\n> 在界面上展示图片的一个控件\n>\n> 图片通常放置在以 “drawable” 开头的目录下（drawable后会跟具体的分辨率）\n\n#### 常用属性和方法\n\n```\nandroid:src=\"@drawable/img_1 \"\t指定显示图片的位置\n```\n\n在代码中可以使用`setImageResource(R.drawable.img_2)`来指定图片的位置\n\n\n\n### ProgressBar\n\n> 在界面上显示一个进度条，表示我们的程序正在加载一些数据\n\n#### 常用属性\n\n```\nstyle=\"?android:attr/progressBarStyleHorizontal\"\t使用style属性改变进度条的样式（该行为指定为水平条状）\nandroid:max=\"100\"\tmax设置进度条最大值\n```\n\n#### 常用方法\n\n```\ngetVisibility()\nsetVisibility(View.VISIBLE)\t// 设置可见度\ngetProgress()\t// 获取进度条进度\nsetProgress(progress)\t// 更改进度条进度\n```\n\n\n\n### ProgressDialog\n\n> 与`AlertDialog `类似，都可以在界面上弹出一个对话框，都能够屏蔽掉其他控件的交互能力\n>\n> 不同的是，ProgressDialog 会在对话框中显示一个进度条，一般用于表示当前操作比较耗时，让用户耐心地等待\n>\n> **用法和 AlertDialog 也相似**\n>\n> 可以使用`dismiss()` 方法来关闭对话框\n\n\n\n\n\n## 滚动控件（ListView与RecyclerView）\n\n### ListView\n\n> ListView 允许用户通过手指上下滑动的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据则会滚动出屏幕（如聊天记录等等）\n\n#### 基础用法\n\n1. 编写相关的布局代码\n\n```\n<ListView\n\tandroid:id=\"@+id/list_view\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\" />\n```\n\n2. 定义数据，并使用`ArrayAdapter`适配器将要适配的数据传入\n\n> `ArrayAdapter`可以指定数据泛型。\n>\n> 参数分别为`(当前上下文, ListView 子项布局的 id, 要适配的数据)`\n\n3. 调用 ListView 的` setAdapter() `方法，将构建好的适配器对象传递进去，建立ListView与数据的关联\n\n```\nprivate String[] data = { \"Apple\", \"Banana\", \"Orange\", \"Watermelon\",\n            \"Pear\", \"Grape\", \"Pineapple\", \"Strawberry\", \"Cherry\", \"Mango\",\n            \"Apple\", \"Banana\", \"Orange\", \"Watermelon\", \"Pear\", \"Grape\",\n            \"Pineapple\", \"Strawberry\", \"Cherry\", \"Mango\" };\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\t// 使用适配器\n    ArrayAdapter<String> adapter = new ArrayAdapter<>(MainActivity.this,\n                android.R.layout.simple_list_item_1, data);\n    ListView listView = (ListView) findViewById(R.id.list_view);\n    listView.setAdapter(adapter);\t// 传入适配器\n}\n```\n\n**显示效果如下**\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/ListView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.png\" style=\"zoom: 50%;\" />\n\n\n\n#### 自定义ListView界面\n\n> 1、自定义 ListView 子项布局的样式（即写一个layout的xml）\n>\n> 2、写一个实例类，用于作为列表项的泛型\n>\n> 3、创建一个自定义的适配器，这个适配器继承自 ArrayAdapter。重写构造方法与getView()等方法\n>\n> 4、按ListView的基础用法在主活动中引入即可\n\n#### ListView的点击事件\n\n**标准写法如下：`setOnItemClickListener`**\n\n```\nlistView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n    \t// position指列表中点击的索引\n        // 添加逻辑代码\n    }\n});\n```\n\n\n\n### RecyclerView\n\n> 加强版的ListView，更推荐使用\n>\n> ListView 的布局排列是由自身去管理的，而 RecyclerView 则将这个工作交给了`LayoutManager`等接口，因此在布局上非常方便\n\n#### 标准使用\n\n> 与ListView相比不同之处在于`setLayoutManager`设置了“滚动方式”\n\n```\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n\nLinearLayoutManager layoutManager = new LinearLayoutManager(this);\nlayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);\t// 设置滚动方式（此处设置为水平）\nrecyclerView.setLayoutManager(layoutManager);\t// 设置LinearLayoutManager对象\nFruitAdapter adapter = new FruitAdapter(fruitList);\nrecyclerView.setAdapter(adapter);\n```\n\n除此之外，还可以通过`GridLayoutManager`与`StaggeredGridLayoutManager`这两种方式实现网格布局和瀑布流布局\n\n\n\n\n\n## 布局\n\n### 常用布局属性\n\n```\nandroid:layout_width=\"match_parent\"\t\t表示width与父布局的width相同\nandroid:layout_height=\"wrap_content\"\t表示height刚好能够容纳内容\n```\n\n\n\n### 线性布局（LinearLayout）\n\n```\n<LinearLayout\n    android:orientation=\"horizontal\"    \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n        \n\t<!-- 添加布局内部的组件 -->\n    \n</LinearLayout>\n```\n\n#### 常用属性\n\n```\nandroid:orientation=\"horizontal\"\t指定是水平还是垂直（horizontal与vertical可选）\nandroid:layout _gravity\t\t指定布局内控件的对齐方式\nandroid:layout _weight\t\t使用比例的方式来指定控件的大小（即将所有控件按比例指定长宽大小）\n```\n\n#### layout_weight示例\n\n```\n<LinearLayout\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n<EditText\n    android:id=\"@+id/edit_text\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:layout_weight=\"3\"\n    />\n\n<Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"send\"\n    android:layout_weight=\"1\"\n    />\n    \n</LinearLayout>\n```\n\n![layout-weight：3比1的效果](http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/layout-weight%E6%95%88%E6%9E%9C.png)\n\n\n\n### 相对布局（RelativeLayout）\n\n> 相对布局较为灵活，可以通过相对定位的方式让控件出现在布局的任何位置\n\n#### 相对于父布局定位\n\n\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E7%88%B6%E5%B8%83%E5%B1%80.png\" style=\"zoom: 50%;\" />\n\n\n\n#### 相对于控件定位\n\n\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:50%;\" />\n\n\n\n### 帧布局（FrameLayout）\n\n> 所有的控件都会默认摆放在布局的左上角，应用很少\n\n\n\n### 百分比布局\n\n> 百分比布局为 FrameLayout 和 RelativeLayout 进行了**功能扩展**，提供了 PercentFrameLayout 和 PercentRelativeLayout 这两个全新的布局\n\n\n\n## 自定义控件\n\n### 引入布局\n\n> 引入布局即新建一个布局文件，并在“主布局文件中”进行引用，达到**重复应用某一布局的效果**\n\n引用布局使用include语句即可，示例：`<include layout=\"@layout/title\" />`。即引入了一个`title.xml`的布局文件\n\n#### 示例\n\n1. 新建`title.xml`文件，并在其中编写相应控件代码。\n2. 在`activity_main.xml`中使用`include`语句将新建的布局添加进去（就像添加常规布局一样）\n\n\n\n### 自定义控件\n\n> 引入布局解决了重复编写布局代码的问题，但布局中的响应事件常常还需要编写\n>\n> 自定义控件即编写布局中的响应事件，避免重复编写相同代码\n\n#### 示例\n\n在之前自定义布局的基础上，新建一个Java类，继承自`LinearLayout`，代码如下（即实现了该布局中控件的相关功能）：\n\n```\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        LayoutInflater.from(context).inflate(R.layout.title, this);\t// 进行加载\n\n\t\t// 编写控件中的按钮代码\n        Button titleBack = (Button) findViewById(R.id.title_back);\n        Button titleEdit = (Button) findViewById(R.id.title_edit);\n        titleBack.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                ((Activity) getContext()).finish();\n            }\n        });\n        titleEdit.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(getContext(), \"You clicked Edit button\",\n                        Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","source":"_posts/编程相关/Android/Android开发三：布局（layout）.md","raw":"---\ntitle: Android开发三：布局（layout）\ndate: 2020-08-30 10:06:09\ntags:\n\t- Android\ncategories:\n\t- 编程相关\n\t- Android\nfileName: Android3-layout\n---\n\n## Android常用控件\n\n### TextView\n\n> 在界面上显示一段文本信息\n\n#### 常用属性\n\n ```\nandroid:text=\"TextView\"\t\t显示的文本\nandroid:gravity=\"center\"\t对齐方式\nandroid:textSize=\"30sp\"\t\t文字大小\nandroid:textColor=\"#03A9F4\"\t文字颜色\n ```\n\n![](http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/TextView.png)\n\n### Button\n\n> 配置一个按钮，默认全为大写\n\n#### 常用属性\n\n常用属性与TextView类似\n\n```\nandroid:textAllCaps=\"false\"\t\t将默认文字全部大写关掉\n```\n\n#### 绑定逻辑代码（注册监听器）\n\n**使用匿名类的写法，不需要对view进行判断**\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            // 添加逻辑代码\n        }\n    });\n}\n```\n\n**使用实现View.OnClickListener接口的方法**\n\n```\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    Button button = (Button) findViewById(R.id.button);\n    button.setOnClickListener(this);\n}\n\n@Override\npublic void onClick(View v) {\n    switch (v.getId()) {\t// 判断触发监听器的是哪个按钮\n        case R.id.button:\n            // 添加逻辑代码\n            break;\n        default:\n            break;\n    }\n}\n```\n\n\n\n### EditText\n\n> 允许用户在控件里输入和编辑内容，并可以在程序中对这些内容进行处理\n\n#### 常用属性\n\n```\nandroid:hint=\"Type something here\"\t输入时的提示信息\nandroid:maxLines=\"1\"\t指定最大行数（如密码输入框最大行数为1），大于最大行数向下滚动\n```\n\n#### 常用方法\n\n```\ngetText()\t// 获取输入的内容\n```\n\n\n\n### AlertDialog\n\n> 在当前的界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够屏蔽掉其他控件的交互能力，因此 AlertDialog 一般都是用于提示一些非常重要的内容或者警告信息\n\n#### 对话框使用流程\n\n1. 通过` AlertDialog.Builder `创建一个 AlertDialog 的实例\n2. 为这个对话框设置标题、内容（`setMessage`）、可否用 Back 键关闭对话框（`setCancelable`）等属性\n3. 调用 setPositiveButton() 方法为对话框设置确定按钮的点击事件，调用 setNegativeButton() 方法设置取消按钮的点击事件\n4. 调用 show()方法将对话框显示出来\n\n#### 点击按钮将EditText在对话框中弹出\n\n该示例需要使用到按钮点击事件，从EditText获取内容，及AlertDialog的相关操作。\n\n```\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener {\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        Button button = (Button) findViewById(R.id.button);\n        editText = (EditText) findViewById(R.id.edit_text);\n        button.setOnClickListener(this);\n    }\n\n\n    @Override\n    public void onClick(View v) {\n        switch (v.getId()) {\n            case R.id.button:\n                String inputText = editText.getText().toString();\t// 获取输入内容\n                AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this);\n                dialog.setMessage(inputText);\n                dialog.setCancelable(false);\n                dialog.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n\n                    }\n                });\n                dialog.setNegativeButton(\"Cancel\", new DialogInterface.OnClickListener() {\n                    @Override\n                    public void onClick(DialogInterface dialogInterface, int i) {\n\n                    }\n                });\n                dialog.show();\n                break;\n            default:\n                break;\n        }\n    }\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%BE%93%E5%85%A5%E6%A1%86%E5%BC%B9%E5%87%BA%E6%95%88%E6%9E%9C.png\" style=\"zoom:67%;\" />\n\n\n\n### ImageView\n\n> 在界面上展示图片的一个控件\n>\n> 图片通常放置在以 “drawable” 开头的目录下（drawable后会跟具体的分辨率）\n\n#### 常用属性和方法\n\n```\nandroid:src=\"@drawable/img_1 \"\t指定显示图片的位置\n```\n\n在代码中可以使用`setImageResource(R.drawable.img_2)`来指定图片的位置\n\n\n\n### ProgressBar\n\n> 在界面上显示一个进度条，表示我们的程序正在加载一些数据\n\n#### 常用属性\n\n```\nstyle=\"?android:attr/progressBarStyleHorizontal\"\t使用style属性改变进度条的样式（该行为指定为水平条状）\nandroid:max=\"100\"\tmax设置进度条最大值\n```\n\n#### 常用方法\n\n```\ngetVisibility()\nsetVisibility(View.VISIBLE)\t// 设置可见度\ngetProgress()\t// 获取进度条进度\nsetProgress(progress)\t// 更改进度条进度\n```\n\n\n\n### ProgressDialog\n\n> 与`AlertDialog `类似，都可以在界面上弹出一个对话框，都能够屏蔽掉其他控件的交互能力\n>\n> 不同的是，ProgressDialog 会在对话框中显示一个进度条，一般用于表示当前操作比较耗时，让用户耐心地等待\n>\n> **用法和 AlertDialog 也相似**\n>\n> 可以使用`dismiss()` 方法来关闭对话框\n\n\n\n\n\n## 滚动控件（ListView与RecyclerView）\n\n### ListView\n\n> ListView 允许用户通过手指上下滑动的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据则会滚动出屏幕（如聊天记录等等）\n\n#### 基础用法\n\n1. 编写相关的布局代码\n\n```\n<ListView\n\tandroid:id=\"@+id/list_view\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\" />\n```\n\n2. 定义数据，并使用`ArrayAdapter`适配器将要适配的数据传入\n\n> `ArrayAdapter`可以指定数据泛型。\n>\n> 参数分别为`(当前上下文, ListView 子项布局的 id, 要适配的数据)`\n\n3. 调用 ListView 的` setAdapter() `方法，将构建好的适配器对象传递进去，建立ListView与数据的关联\n\n```\nprivate String[] data = { \"Apple\", \"Banana\", \"Orange\", \"Watermelon\",\n            \"Pear\", \"Grape\", \"Pineapple\", \"Strawberry\", \"Cherry\", \"Mango\",\n            \"Apple\", \"Banana\", \"Orange\", \"Watermelon\", \"Pear\", \"Grape\",\n            \"Pineapple\", \"Strawberry\", \"Cherry\", \"Mango\" };\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\t// 使用适配器\n    ArrayAdapter<String> adapter = new ArrayAdapter<>(MainActivity.this,\n                android.R.layout.simple_list_item_1, data);\n    ListView listView = (ListView) findViewById(R.id.list_view);\n    listView.setAdapter(adapter);\t// 传入适配器\n}\n```\n\n**显示效果如下**\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/ListView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.png\" style=\"zoom: 50%;\" />\n\n\n\n#### 自定义ListView界面\n\n> 1、自定义 ListView 子项布局的样式（即写一个layout的xml）\n>\n> 2、写一个实例类，用于作为列表项的泛型\n>\n> 3、创建一个自定义的适配器，这个适配器继承自 ArrayAdapter。重写构造方法与getView()等方法\n>\n> 4、按ListView的基础用法在主活动中引入即可\n\n#### ListView的点击事件\n\n**标准写法如下：`setOnItemClickListener`**\n\n```\nlistView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n    @Override\n    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n    \t// position指列表中点击的索引\n        // 添加逻辑代码\n    }\n});\n```\n\n\n\n### RecyclerView\n\n> 加强版的ListView，更推荐使用\n>\n> ListView 的布局排列是由自身去管理的，而 RecyclerView 则将这个工作交给了`LayoutManager`等接口，因此在布局上非常方便\n\n#### 标准使用\n\n> 与ListView相比不同之处在于`setLayoutManager`设置了“滚动方式”\n\n```\nRecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\n\nLinearLayoutManager layoutManager = new LinearLayoutManager(this);\nlayoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);\t// 设置滚动方式（此处设置为水平）\nrecyclerView.setLayoutManager(layoutManager);\t// 设置LinearLayoutManager对象\nFruitAdapter adapter = new FruitAdapter(fruitList);\nrecyclerView.setAdapter(adapter);\n```\n\n除此之外，还可以通过`GridLayoutManager`与`StaggeredGridLayoutManager`这两种方式实现网格布局和瀑布流布局\n\n\n\n\n\n## 布局\n\n### 常用布局属性\n\n```\nandroid:layout_width=\"match_parent\"\t\t表示width与父布局的width相同\nandroid:layout_height=\"wrap_content\"\t表示height刚好能够容纳内容\n```\n\n\n\n### 线性布局（LinearLayout）\n\n```\n<LinearLayout\n    android:orientation=\"horizontal\"    \n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n        \n\t<!-- 添加布局内部的组件 -->\n    \n</LinearLayout>\n```\n\n#### 常用属性\n\n```\nandroid:orientation=\"horizontal\"\t指定是水平还是垂直（horizontal与vertical可选）\nandroid:layout _gravity\t\t指定布局内控件的对齐方式\nandroid:layout _weight\t\t使用比例的方式来指定控件的大小（即将所有控件按比例指定长宽大小）\n```\n\n#### layout_weight示例\n\n```\n<LinearLayout\n    android:orientation=\"horizontal\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n<EditText\n    android:id=\"@+id/edit_text\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:layout_weight=\"3\"\n    />\n\n<Button\n    android:id=\"@+id/button\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"send\"\n    android:layout_weight=\"1\"\n    />\n    \n</LinearLayout>\n```\n\n![layout-weight：3比1的效果](http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/layout-weight%E6%95%88%E6%9E%9C.png)\n\n\n\n### 相对布局（RelativeLayout）\n\n> 相对布局较为灵活，可以通过相对定位的方式让控件出现在布局的任何位置\n\n#### 相对于父布局定位\n\n\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E7%88%B6%E5%B8%83%E5%B1%80.png\" style=\"zoom: 50%;\" />\n\n\n\n#### 相对于控件定位\n\n\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:50%;\" />\n\n\n\n### 帧布局（FrameLayout）\n\n> 所有的控件都会默认摆放在布局的左上角，应用很少\n\n\n\n### 百分比布局\n\n> 百分比布局为 FrameLayout 和 RelativeLayout 进行了**功能扩展**，提供了 PercentFrameLayout 和 PercentRelativeLayout 这两个全新的布局\n\n\n\n## 自定义控件\n\n### 引入布局\n\n> 引入布局即新建一个布局文件，并在“主布局文件中”进行引用，达到**重复应用某一布局的效果**\n\n引用布局使用include语句即可，示例：`<include layout=\"@layout/title\" />`。即引入了一个`title.xml`的布局文件\n\n#### 示例\n\n1. 新建`title.xml`文件，并在其中编写相应控件代码。\n2. 在`activity_main.xml`中使用`include`语句将新建的布局添加进去（就像添加常规布局一样）\n\n\n\n### 自定义控件\n\n> 引入布局解决了重复编写布局代码的问题，但布局中的响应事件常常还需要编写\n>\n> 自定义控件即编写布局中的响应事件，避免重复编写相同代码\n\n#### 示例\n\n在之前自定义布局的基础上，新建一个Java类，继承自`LinearLayout`，代码如下（即实现了该布局中控件的相关功能）：\n\n```\npublic class TitleLayout extends LinearLayout {\n    public TitleLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        LayoutInflater.from(context).inflate(R.layout.title, this);\t// 进行加载\n\n\t\t// 编写控件中的按钮代码\n        Button titleBack = (Button) findViewById(R.id.title_back);\n        Button titleEdit = (Button) findViewById(R.id.title_edit);\n        titleBack.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                ((Activity) getContext()).finish();\n            }\n        });\n        titleEdit.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                Toast.makeText(getContext(), \"You clicked Edit button\",\n                        Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","slug":"编程相关/Android/Android开发三：布局（layout）","published":1,"updated":"2021-01-11T04:23:03.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobj005crwjs2t76et5h","content":"<h2 id=\"Android常用控件\"><a href=\"#Android常用控件\" class=\"headerlink\" title=\"Android常用控件\"></a>Android常用控件</h2><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><blockquote>\n<p>在界面上显示一段文本信息</p>\n</blockquote>\n<h4 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4> <figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>text=<span class=\"hljs-string\">\"TextView\"</span>\t\t显示的文本<br><span class=\"hljs-symbol\">android:</span>gravity=<span class=\"hljs-string\">\"center\"</span>\t对齐方式<br><span class=\"hljs-symbol\">android:</span>textSize=<span class=\"hljs-string\">\"30sp\"</span>\t\t文字大小<br><span class=\"hljs-symbol\">android:</span>textColor=<span class=\"hljs-string\">\"#03A9F4\"</span>\t文字颜色<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/TextView.png\" alt=\"\"></p>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><blockquote>\n<p>配置一个按钮，默认全为大写</p>\n</blockquote>\n<h4 id=\"常用属性-1\"><a href=\"#常用属性-1\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><p>常用属性与TextView类似</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>textAllCaps=<span class=\"hljs-string\">\"false\"</span>\t\t将默认文字全部大写关掉<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"绑定逻辑代码（注册监听器）\"><a href=\"#绑定逻辑代码（注册监听器）\" class=\"headerlink\" title=\"绑定逻辑代码（注册监听器）\"></a>绑定逻辑代码（注册监听器）</h4><p><strong>使用匿名类的写法，不需要对view进行判断</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>    Button button = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button</span>)</span>;<br>    button.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            <span class=\"hljs-comment\">// 添加逻辑代码</span><br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用实现View.OnClickListener接口的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AppCompatActivity</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">View</span>.<span class=\"hljs-title\">OnClickListener</span> </span>&#123;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    Button button = (Button) findViewById(R.id.button);<br>    button.setOnClickListener(<span class=\"hljs-keyword\">this</span>);<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onClick</span><span class=\"hljs-params\">(View v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">switch</span> (v.getId()) &#123;\t<span class=\"hljs-comment\">// 判断触发监听器的是哪个按钮</span><br>        <span class=\"hljs-keyword\">case</span> R.id.button:<br>            <span class=\"hljs-comment\">// 添加逻辑代码</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">default</span>:<br>            <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><blockquote>\n<p>允许用户在控件里输入和编辑内容，并可以在程序中对这些内容进行处理</p>\n</blockquote>\n<h4 id=\"常用属性-2\"><a href=\"#常用属性-2\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>hint=<span class=\"hljs-string\">\"Type something here\"</span>\t输入时的提示信息<br><span class=\"hljs-symbol\">android:</span>maxLines=<span class=\"hljs-string\">\"1\"</span>\t指定最大行数（如密码输入框最大行数为<span class=\"hljs-number\">1</span>），大于最大行数向下滚动<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">getText</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-comment\">// 获取输入的内容</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><blockquote>\n<p>在当前的界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够屏蔽掉其他控件的交互能力，因此 AlertDialog 一般都是用于提示一些非常重要的内容或者警告信息</p>\n</blockquote>\n<h4 id=\"对话框使用流程\"><a href=\"#对话框使用流程\" class=\"headerlink\" title=\"对话框使用流程\"></a>对话框使用流程</h4><ol>\n<li>通过<code>AlertDialog.Builder</code>创建一个 AlertDialog 的实例</li>\n<li>为这个对话框设置标题、内容（<code>setMessage</code>）、可否用 Back 键关闭对话框（<code>setCancelable</code>）等属性</li>\n<li>调用 setPositiveButton() 方法为对话框设置确定按钮的点击事件，调用 setNegativeButton() 方法设置取消按钮的点击事件</li>\n<li>调用 show()方法将对话框显示出来</li>\n</ol>\n<h4 id=\"点击按钮将EditText在对话框中弹出\"><a href=\"#点击按钮将EditText在对话框中弹出\" class=\"headerlink\" title=\"点击按钮将EditText在对话框中弹出\"></a>点击按钮将EditText在对话框中弹出</h4><p>该示例需要使用到按钮点击事件，从EditText获取内容，及AlertDialog的相关操作。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> MainActivity extends AppCompatActivity implements View.OnClickListener &#123;<br><br>    <span class=\"hljs-keyword\">private</span> EditText editText;<br><br>    @Override<br>    protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>        super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>        set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>        Button button = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button</span>)</span>;<br>        editText = (EditText) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">edit_text</span>)</span>;<br>        button.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">this</span>)</span>;<br>    &#125;<br><br><br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">v</span>)</span> &#123;<br>        switch (v.get<span class=\"hljs-constructor\">Id()</span>) &#123;<br>            case <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>id.button:<br>                String inputText = editText.get<span class=\"hljs-constructor\">Text()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span>;\t<span class=\"hljs-comment\">// 获取输入内容</span><br>                AlertDialog.Builder dialog = <span class=\"hljs-keyword\">new</span> AlertDialog.<span class=\"hljs-constructor\">Builder(MainActivity.<span class=\"hljs-params\">this</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">Message(<span class=\"hljs-params\">inputText</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">Cancelable(<span class=\"hljs-params\">false</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">PositiveButton(<span class=\"hljs-string\">\"OK\"</span>, <span class=\"hljs-params\">new</span> DialogInterface.OnClickListener()</span> &#123;<br>                    @Override<br>                    public void on<span class=\"hljs-constructor\">Click(DialogInterface <span class=\"hljs-params\">dialogInterface</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br><br>                    &#125;<br>                &#125;);<br>                dialog.set<span class=\"hljs-constructor\">NegativeButton(<span class=\"hljs-string\">\"Cancel\"</span>, <span class=\"hljs-params\">new</span> DialogInterface.OnClickListener()</span> &#123;<br>                    @Override<br>                    public void on<span class=\"hljs-constructor\">Click(DialogInterface <span class=\"hljs-params\">dialogInterface</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br><br>                    &#125;<br>                &#125;);<br>                dialog.show<span class=\"hljs-literal\">()</span>;<br>                break;<br>            default:<br>                break;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%BE%93%E5%85%A5%E6%A1%86%E5%BC%B9%E5%87%BA%E6%95%88%E6%9E%9C.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><blockquote>\n<p>在界面上展示图片的一个控件</p>\n<p>图片通常放置在以 “drawable” 开头的目录下（drawable后会跟具体的分辨率）</p>\n</blockquote>\n<h4 id=\"常用属性和方法\"><a href=\"#常用属性和方法\" class=\"headerlink\" title=\"常用属性和方法\"></a>常用属性和方法</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>src=<span class=\"hljs-string\">\"@drawable/img_1 \"</span>\t指定显示图片的位置<br></code></pre></td></tr></table></figure>\n\n<p>在代码中可以使用<code>setImageResource(R.drawable.img_2)</code>来指定图片的位置</p>\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><blockquote>\n<p>在界面上显示一个进度条，表示我们的程序正在加载一些数据</p>\n</blockquote>\n<h4 id=\"常用属性-3\"><a href=\"#常用属性-3\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">style</span>=<span class=\"hljs-string\">\"?android:attr/progressBarStyleHorizontal\"</span>\t使用<span class=\"hljs-built_in\">style</span>属性改变进度条的样式（该行为指定为水平条状）<br>android:<span class=\"hljs-built_in\">max</span>=<span class=\"hljs-string\">\"100\"</span>\t<span class=\"hljs-built_in\">max</span>设置进度条最大值<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">getVisibility</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setVisibility</span><span class=\"hljs-params\">(View.VISIBLE)</span></span>\t<span class=\"hljs-comment\">// 设置可见度</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">getProgress</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-comment\">// 获取进度条进度</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setProgress</span><span class=\"hljs-params\">(progress)</span></span>\t<span class=\"hljs-comment\">// 更改进度条进度</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><blockquote>\n<p>与<code>AlertDialog</code>类似，都可以在界面上弹出一个对话框，都能够屏蔽掉其他控件的交互能力</p>\n<p>不同的是，ProgressDialog 会在对话框中显示一个进度条，一般用于表示当前操作比较耗时，让用户耐心地等待</p>\n<p><strong>用法和 AlertDialog 也相似</strong></p>\n<p>可以使用<code>dismiss()</code> 方法来关闭对话框</p>\n</blockquote>\n<h2 id=\"滚动控件（ListView与RecyclerView）\"><a href=\"#滚动控件（ListView与RecyclerView）\" class=\"headerlink\" title=\"滚动控件（ListView与RecyclerView）\"></a>滚动控件（ListView与RecyclerView）</h2><h3 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h3><blockquote>\n<p>ListView 允许用户通过手指上下滑动的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据则会滚动出屏幕（如聊天记录等等）</p>\n</blockquote>\n<h4 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h4><ol>\n<li>编写相关的布局代码</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;ListView<br>\tandroid:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/list_view\"</span><br>\tandroid:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>\tandroid:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义数据，并使用<code>ArrayAdapter</code>适配器将要适配的数据传入</li>\n</ol>\n<blockquote>\n<p><code>ArrayAdapter</code>可以指定数据泛型。</p>\n<p>参数分别为<code>(当前上下文, ListView 子项布局的 id, 要适配的数据)</code></p>\n</blockquote>\n<ol start=\"3\">\n<li>调用 ListView 的<code>setAdapter()</code>方法，将构建好的适配器对象传递进去，建立ListView与数据的关联</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> String<span class=\"hljs-literal\">[]</span> data = &#123; <span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Banana\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Watermelon\"</span>,<br>            <span class=\"hljs-string\">\"Pear\"</span>, <span class=\"hljs-string\">\"Grape\"</span>, <span class=\"hljs-string\">\"Pineapple\"</span>, <span class=\"hljs-string\">\"Strawberry\"</span>, <span class=\"hljs-string\">\"Cherry\"</span>, <span class=\"hljs-string\">\"Mango\"</span>,<br>            <span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Banana\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Watermelon\"</span>, <span class=\"hljs-string\">\"Pear\"</span>, <span class=\"hljs-string\">\"Grape\"</span>,<br>            <span class=\"hljs-string\">\"Pineapple\"</span>, <span class=\"hljs-string\">\"Strawberry\"</span>, <span class=\"hljs-string\">\"Cherry\"</span>, <span class=\"hljs-string\">\"Mango\"</span> &#125;;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>\t<span class=\"hljs-comment\">// 使用适配器</span><br>    ArrayAdapter&lt;String&gt; adapter = <span class=\"hljs-keyword\">new</span> ArrayAdapter&lt;&gt;(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MainActivity</span>.</span></span>this,<br>                android.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>layout.simple_list_item_1, data);<br>    ListView listView = (ListView) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">list_view</span>)</span>;<br>    listView.set<span class=\"hljs-constructor\">Adapter(<span class=\"hljs-params\">adapter</span>)</span>;\t<span class=\"hljs-comment\">// 传入适配器</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>显示效果如下</strong></p>\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/ListView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.png\" style=\"zoom: 50%;\" />\n\n\n\n<h4 id=\"自定义ListView界面\"><a href=\"#自定义ListView界面\" class=\"headerlink\" title=\"自定义ListView界面\"></a>自定义ListView界面</h4><blockquote>\n<p>1、自定义 ListView 子项布局的样式（即写一个layout的xml）</p>\n<p>2、写一个实例类，用于作为列表项的泛型</p>\n<p>3、创建一个自定义的适配器，这个适配器继承自 ArrayAdapter。重写构造方法与getView()等方法</p>\n<p>4、按ListView的基础用法在主活动中引入即可</p>\n</blockquote>\n<h4 id=\"ListView的点击事件\"><a href=\"#ListView的点击事件\" class=\"headerlink\" title=\"ListView的点击事件\"></a>ListView的点击事件</h4><p><strong>标准写法如下：<code>setOnItemClickListener</code></strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">listView.set<span class=\"hljs-constructor\">OnItemClickListener(<span class=\"hljs-params\">new</span> AdapterView.OnItemClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">ItemClick(AdapterView&lt;?&gt; <span class=\"hljs-params\">parent</span>, View <span class=\"hljs-params\">view</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">position</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">id</span>)</span> &#123;<br>    \t<span class=\"hljs-comment\">// position指列表中点击的索引</span><br>        <span class=\"hljs-comment\">// 添加逻辑代码</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h3><blockquote>\n<p>加强版的ListView，更推荐使用</p>\n<p>ListView 的布局排列是由自身去管理的，而 RecyclerView 则将这个工作交给了<code>LayoutManager</code>等接口，因此在布局上非常方便</p>\n</blockquote>\n<h4 id=\"标准使用\"><a href=\"#标准使用\" class=\"headerlink\" title=\"标准使用\"></a>标准使用</h4><blockquote>\n<p>与ListView相比不同之处在于<code>setLayoutManager</code>设置了“滚动方式”</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">RecyclerView recyclerView = (RecyclerView) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">recycler_view</span>)</span>;<br><br>LinearLayoutManager layoutManager = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">LinearLayoutManager(<span class=\"hljs-params\">this</span>)</span>;<br>layoutManager.set<span class=\"hljs-constructor\">Orientation(LinearLayoutManager.HORIZONTAL)</span>;\t<span class=\"hljs-comment\">// 设置滚动方式（此处设置为水平）</span><br>recyclerView.set<span class=\"hljs-constructor\">LayoutManager(<span class=\"hljs-params\">layoutManager</span>)</span>;\t<span class=\"hljs-comment\">// 设置LinearLayoutManager对象</span><br>FruitAdapter adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FruitAdapter(<span class=\"hljs-params\">fruitList</span>)</span>;<br>recyclerView.set<span class=\"hljs-constructor\">Adapter(<span class=\"hljs-params\">adapter</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>除此之外，还可以通过<code>GridLayoutManager</code>与<code>StaggeredGridLayoutManager</code>这两种方式实现网格布局和瀑布流布局</p>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><h3 id=\"常用布局属性\"><a href=\"#常用布局属性\" class=\"headerlink\" title=\"常用布局属性\"></a>常用布局属性</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">android:layout_width=<span class=\"hljs-string\">\"match_parent\"</span>\t\t表示<span class=\"hljs-built_in\">width</span>与父布局的<span class=\"hljs-built_in\">width</span>相同<br>android:layout_height=<span class=\"hljs-string\">\"wrap_content\"</span>\t表示<span class=\"hljs-built_in\">height</span>刚好能够容纳内容<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"线性布局（LinearLayout）\"><a href=\"#线性布局（LinearLayout）\" class=\"headerlink\" title=\"线性布局（LinearLayout）\"></a>线性布局（LinearLayout）</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span><br>    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span>    <br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>&gt;</span><br>        <br>\t<span class=\"hljs-comment\">&lt;!-- 添加布局内部的组件 --&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用属性-4\"><a href=\"#常用属性-4\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>orientation=<span class=\"hljs-string\">\"horizontal\"</span>\t指定是水平还是垂直（horizontal与vertical可选）<br><span class=\"hljs-symbol\">android:</span>layout _gravity\t\t指定布局内控件的对齐方式<br><span class=\"hljs-symbol\">android:</span>layout _weight\t\t使用比例的方式来指定控件的大小（即将所有控件按比例指定长宽大小）<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"layout-weight示例\"><a href=\"#layout-weight示例\" class=\"headerlink\" title=\"layout_weight示例\"></a>layout_weight示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span><br>    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EditText</span><br>    <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/edit_text\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"3\"</span><br>    /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span><br>    <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"send\"</span><br>    <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span><br>    /&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/layout-weight%E6%95%88%E6%9E%9C.png\" alt=\"layout-weight：3比1的效果\"></p>\n<h3 id=\"相对布局（RelativeLayout）\"><a href=\"#相对布局（RelativeLayout）\" class=\"headerlink\" title=\"相对布局（RelativeLayout）\"></a>相对布局（RelativeLayout）</h3><blockquote>\n<p>相对布局较为灵活，可以通过相对定位的方式让控件出现在布局的任何位置</p>\n</blockquote>\n<h4 id=\"相对于父布局定位\"><a href=\"#相对于父布局定位\" class=\"headerlink\" title=\"相对于父布局定位\"></a>相对于父布局定位</h4><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E7%88%B6%E5%B8%83%E5%B1%80.png\" style=\"zoom: 50%;\" />\n\n\n\n<h4 id=\"相对于控件定位\"><a href=\"#相对于控件定位\" class=\"headerlink\" title=\"相对于控件定位\"></a>相对于控件定位</h4><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"帧布局（FrameLayout）\"><a href=\"#帧布局（FrameLayout）\" class=\"headerlink\" title=\"帧布局（FrameLayout）\"></a>帧布局（FrameLayout）</h3><blockquote>\n<p>所有的控件都会默认摆放在布局的左上角，应用很少</p>\n</blockquote>\n<h3 id=\"百分比布局\"><a href=\"#百分比布局\" class=\"headerlink\" title=\"百分比布局\"></a>百分比布局</h3><blockquote>\n<p>百分比布局为 FrameLayout 和 RelativeLayout 进行了<strong>功能扩展</strong>，提供了 PercentFrameLayout 和 PercentRelativeLayout 这两个全新的布局</p>\n</blockquote>\n<h2 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h2><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><blockquote>\n<p>引入布局即新建一个布局文件，并在“主布局文件中”进行引用，达到<strong>重复应用某一布局的效果</strong></p>\n</blockquote>\n<p>引用布局使用include语句即可，示例：<code>&lt;include layout=&quot;@layout/title&quot; /&gt;</code>。即引入了一个<code>title.xml</code>的布局文件</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><ol>\n<li>新建<code>title.xml</code>文件，并在其中编写相应控件代码。</li>\n<li>在<code>activity_main.xml</code>中使用<code>include</code>语句将新建的布局添加进去（就像添加常规布局一样）</li>\n</ol>\n<h3 id=\"自定义控件-1\"><a href=\"#自定义控件-1\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h3><blockquote>\n<p>引入布局解决了重复编写布局代码的问题，但布局中的响应事件常常还需要编写</p>\n<p>自定义控件即编写布局中的响应事件，避免重复编写相同代码</p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在之前自定义布局的基础上，新建一个Java类，继承自<code>LinearLayout</code>，代码如下（即实现了该布局中控件的相关功能）：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> TitleLayout extends LinearLayout &#123;<br>    public <span class=\"hljs-constructor\">TitleLayout(Context <span class=\"hljs-params\">context</span>, AttributeSet <span class=\"hljs-params\">attrs</span>)</span> &#123;<br>        super(context, attrs);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LayoutInflater</span>.</span></span>from(context).inflate(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>layout.title, this);\t<span class=\"hljs-comment\">// 进行加载</span><br><br>\t\t<span class=\"hljs-comment\">// 编写控件中的按钮代码</span><br>        Button titleBack = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">title_back</span>)</span>;<br>        Button titleEdit = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">title_edit</span>)</span>;<br>        titleBack.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> OnClickListener()</span> &#123;<br>            @Override<br>            public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>                ((Activity) get<span class=\"hljs-constructor\">Context()</span>).finish<span class=\"hljs-literal\">()</span>;<br>            &#125;<br>        &#125;);<br>        titleEdit.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> OnClickListener()</span> &#123;<br>            @Override<br>            public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">getContext</span>()</span>, <span class=\"hljs-string\">\"You clicked Edit button\"</span>,<br>                        Toast.LENGTH_SHORT).show<span class=\"hljs-literal\">()</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Android常用控件\"><a href=\"#Android常用控件\" class=\"headerlink\" title=\"Android常用控件\"></a>Android常用控件</h2><h3 id=\"TextView\"><a href=\"#TextView\" class=\"headerlink\" title=\"TextView\"></a>TextView</h3><blockquote>\n<p>在界面上显示一段文本信息</p>\n</blockquote>\n<h4 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4> <figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>text=<span class=\"hljs-string\">\"TextView\"</span>\t\t显示的文本<br><span class=\"hljs-symbol\">android:</span>gravity=<span class=\"hljs-string\">\"center\"</span>\t对齐方式<br><span class=\"hljs-symbol\">android:</span>textSize=<span class=\"hljs-string\">\"30sp\"</span>\t\t文字大小<br><span class=\"hljs-symbol\">android:</span>textColor=<span class=\"hljs-string\">\"#03A9F4\"</span>\t文字颜色<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/TextView.png\" alt=\"\"></p>\n<h3 id=\"Button\"><a href=\"#Button\" class=\"headerlink\" title=\"Button\"></a>Button</h3><blockquote>\n<p>配置一个按钮，默认全为大写</p>\n</blockquote>\n<h4 id=\"常用属性-1\"><a href=\"#常用属性-1\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><p>常用属性与TextView类似</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>textAllCaps=<span class=\"hljs-string\">\"false\"</span>\t\t将默认文字全部大写关掉<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"绑定逻辑代码（注册监听器）\"><a href=\"#绑定逻辑代码（注册监听器）\" class=\"headerlink\" title=\"绑定逻辑代码（注册监听器）\"></a>绑定逻辑代码（注册监听器）</h4><p><strong>使用匿名类的写法，不需要对view进行判断</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>    Button button = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button</span>)</span>;<br>    button.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            <span class=\"hljs-comment\">// 添加逻辑代码</span><br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>使用实现View.OnClickListener接口的方法</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AppCompatActivity</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">View</span>.<span class=\"hljs-title\">OnClickListener</span> </span>&#123;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    Button button = (Button) findViewById(R.id.button);<br>    button.setOnClickListener(<span class=\"hljs-keyword\">this</span>);<br>&#125;<br><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onClick</span><span class=\"hljs-params\">(View v)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">switch</span> (v.getId()) &#123;\t<span class=\"hljs-comment\">// 判断触发监听器的是哪个按钮</span><br>        <span class=\"hljs-keyword\">case</span> R.id.button:<br>            <span class=\"hljs-comment\">// 添加逻辑代码</span><br>            <span class=\"hljs-keyword\">break</span>;<br>        <span class=\"hljs-keyword\">default</span>:<br>            <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"EditText\"><a href=\"#EditText\" class=\"headerlink\" title=\"EditText\"></a>EditText</h3><blockquote>\n<p>允许用户在控件里输入和编辑内容，并可以在程序中对这些内容进行处理</p>\n</blockquote>\n<h4 id=\"常用属性-2\"><a href=\"#常用属性-2\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>hint=<span class=\"hljs-string\">\"Type something here\"</span>\t输入时的提示信息<br><span class=\"hljs-symbol\">android:</span>maxLines=<span class=\"hljs-string\">\"1\"</span>\t指定最大行数（如密码输入框最大行数为<span class=\"hljs-number\">1</span>），大于最大行数向下滚动<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">getText</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-comment\">// 获取输入的内容</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"AlertDialog\"><a href=\"#AlertDialog\" class=\"headerlink\" title=\"AlertDialog\"></a>AlertDialog</h3><blockquote>\n<p>在当前的界面弹出一个对话框，这个对话框是置顶于所有界面元素之上的，能够屏蔽掉其他控件的交互能力，因此 AlertDialog 一般都是用于提示一些非常重要的内容或者警告信息</p>\n</blockquote>\n<h4 id=\"对话框使用流程\"><a href=\"#对话框使用流程\" class=\"headerlink\" title=\"对话框使用流程\"></a>对话框使用流程</h4><ol>\n<li>通过<code>AlertDialog.Builder</code>创建一个 AlertDialog 的实例</li>\n<li>为这个对话框设置标题、内容（<code>setMessage</code>）、可否用 Back 键关闭对话框（<code>setCancelable</code>）等属性</li>\n<li>调用 setPositiveButton() 方法为对话框设置确定按钮的点击事件，调用 setNegativeButton() 方法设置取消按钮的点击事件</li>\n<li>调用 show()方法将对话框显示出来</li>\n</ol>\n<h4 id=\"点击按钮将EditText在对话框中弹出\"><a href=\"#点击按钮将EditText在对话框中弹出\" class=\"headerlink\" title=\"点击按钮将EditText在对话框中弹出\"></a>点击按钮将EditText在对话框中弹出</h4><p>该示例需要使用到按钮点击事件，从EditText获取内容，及AlertDialog的相关操作。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> MainActivity extends AppCompatActivity implements View.OnClickListener &#123;<br><br>    <span class=\"hljs-keyword\">private</span> EditText editText;<br><br>    @Override<br>    protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>        super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>        set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>        Button button = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button</span>)</span>;<br>        editText = (EditText) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">edit_text</span>)</span>;<br>        button.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">this</span>)</span>;<br>    &#125;<br><br><br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">v</span>)</span> &#123;<br>        switch (v.get<span class=\"hljs-constructor\">Id()</span>) &#123;<br>            case <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>id.button:<br>                String inputText = editText.get<span class=\"hljs-constructor\">Text()</span>.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span>;\t<span class=\"hljs-comment\">// 获取输入内容</span><br>                AlertDialog.Builder dialog = <span class=\"hljs-keyword\">new</span> AlertDialog.<span class=\"hljs-constructor\">Builder(MainActivity.<span class=\"hljs-params\">this</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">Message(<span class=\"hljs-params\">inputText</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">Cancelable(<span class=\"hljs-params\">false</span>)</span>;<br>                dialog.set<span class=\"hljs-constructor\">PositiveButton(<span class=\"hljs-string\">\"OK\"</span>, <span class=\"hljs-params\">new</span> DialogInterface.OnClickListener()</span> &#123;<br>                    @Override<br>                    public void on<span class=\"hljs-constructor\">Click(DialogInterface <span class=\"hljs-params\">dialogInterface</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br><br>                    &#125;<br>                &#125;);<br>                dialog.set<span class=\"hljs-constructor\">NegativeButton(<span class=\"hljs-string\">\"Cancel\"</span>, <span class=\"hljs-params\">new</span> DialogInterface.OnClickListener()</span> &#123;<br>                    @Override<br>                    public void on<span class=\"hljs-constructor\">Click(DialogInterface <span class=\"hljs-params\">dialogInterface</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br><br>                    &#125;<br>                &#125;);<br>                dialog.show<span class=\"hljs-literal\">()</span>;<br>                break;<br>            default:<br>                break;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%BE%93%E5%85%A5%E6%A1%86%E5%BC%B9%E5%87%BA%E6%95%88%E6%9E%9C.png\" style=\"zoom:67%;\" />\n\n\n\n<h3 id=\"ImageView\"><a href=\"#ImageView\" class=\"headerlink\" title=\"ImageView\"></a>ImageView</h3><blockquote>\n<p>在界面上展示图片的一个控件</p>\n<p>图片通常放置在以 “drawable” 开头的目录下（drawable后会跟具体的分辨率）</p>\n</blockquote>\n<h4 id=\"常用属性和方法\"><a href=\"#常用属性和方法\" class=\"headerlink\" title=\"常用属性和方法\"></a>常用属性和方法</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>src=<span class=\"hljs-string\">\"@drawable/img_1 \"</span>\t指定显示图片的位置<br></code></pre></td></tr></table></figure>\n\n<p>在代码中可以使用<code>setImageResource(R.drawable.img_2)</code>来指定图片的位置</p>\n<h3 id=\"ProgressBar\"><a href=\"#ProgressBar\" class=\"headerlink\" title=\"ProgressBar\"></a>ProgressBar</h3><blockquote>\n<p>在界面上显示一个进度条，表示我们的程序正在加载一些数据</p>\n</blockquote>\n<h4 id=\"常用属性-3\"><a href=\"#常用属性-3\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">style</span>=<span class=\"hljs-string\">\"?android:attr/progressBarStyleHorizontal\"</span>\t使用<span class=\"hljs-built_in\">style</span>属性改变进度条的样式（该行为指定为水平条状）<br>android:<span class=\"hljs-built_in\">max</span>=<span class=\"hljs-string\">\"100\"</span>\t<span class=\"hljs-built_in\">max</span>设置进度条最大值<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">getVisibility</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setVisibility</span><span class=\"hljs-params\">(View.VISIBLE)</span></span>\t<span class=\"hljs-comment\">// 设置可见度</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">getProgress</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-comment\">// 获取进度条进度</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setProgress</span><span class=\"hljs-params\">(progress)</span></span>\t<span class=\"hljs-comment\">// 更改进度条进度</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ProgressDialog\"><a href=\"#ProgressDialog\" class=\"headerlink\" title=\"ProgressDialog\"></a>ProgressDialog</h3><blockquote>\n<p>与<code>AlertDialog</code>类似，都可以在界面上弹出一个对话框，都能够屏蔽掉其他控件的交互能力</p>\n<p>不同的是，ProgressDialog 会在对话框中显示一个进度条，一般用于表示当前操作比较耗时，让用户耐心地等待</p>\n<p><strong>用法和 AlertDialog 也相似</strong></p>\n<p>可以使用<code>dismiss()</code> 方法来关闭对话框</p>\n</blockquote>\n<h2 id=\"滚动控件（ListView与RecyclerView）\"><a href=\"#滚动控件（ListView与RecyclerView）\" class=\"headerlink\" title=\"滚动控件（ListView与RecyclerView）\"></a>滚动控件（ListView与RecyclerView）</h2><h3 id=\"ListView\"><a href=\"#ListView\" class=\"headerlink\" title=\"ListView\"></a>ListView</h3><blockquote>\n<p>ListView 允许用户通过手指上下滑动的方式将屏幕外的数据滚动到屏幕内，同时屏幕上原有的数据则会滚动出屏幕（如聊天记录等等）</p>\n</blockquote>\n<h4 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h4><ol>\n<li>编写相关的布局代码</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;ListView<br>\tandroid:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/list_view\"</span><br>\tandroid:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>\tandroid:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>定义数据，并使用<code>ArrayAdapter</code>适配器将要适配的数据传入</li>\n</ol>\n<blockquote>\n<p><code>ArrayAdapter</code>可以指定数据泛型。</p>\n<p>参数分别为<code>(当前上下文, ListView 子项布局的 id, 要适配的数据)</code></p>\n</blockquote>\n<ol start=\"3\">\n<li>调用 ListView 的<code>setAdapter()</code>方法，将构建好的适配器对象传递进去，建立ListView与数据的关联</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> String<span class=\"hljs-literal\">[]</span> data = &#123; <span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Banana\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Watermelon\"</span>,<br>            <span class=\"hljs-string\">\"Pear\"</span>, <span class=\"hljs-string\">\"Grape\"</span>, <span class=\"hljs-string\">\"Pineapple\"</span>, <span class=\"hljs-string\">\"Strawberry\"</span>, <span class=\"hljs-string\">\"Cherry\"</span>, <span class=\"hljs-string\">\"Mango\"</span>,<br>            <span class=\"hljs-string\">\"Apple\"</span>, <span class=\"hljs-string\">\"Banana\"</span>, <span class=\"hljs-string\">\"Orange\"</span>, <span class=\"hljs-string\">\"Watermelon\"</span>, <span class=\"hljs-string\">\"Pear\"</span>, <span class=\"hljs-string\">\"Grape\"</span>,<br>            <span class=\"hljs-string\">\"Pineapple\"</span>, <span class=\"hljs-string\">\"Strawberry\"</span>, <span class=\"hljs-string\">\"Cherry\"</span>, <span class=\"hljs-string\">\"Mango\"</span> &#125;;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>\t<span class=\"hljs-comment\">// 使用适配器</span><br>    ArrayAdapter&lt;String&gt; adapter = <span class=\"hljs-keyword\">new</span> ArrayAdapter&lt;&gt;(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">MainActivity</span>.</span></span>this,<br>                android.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>layout.simple_list_item_1, data);<br>    ListView listView = (ListView) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">list_view</span>)</span>;<br>    listView.set<span class=\"hljs-constructor\">Adapter(<span class=\"hljs-params\">adapter</span>)</span>;\t<span class=\"hljs-comment\">// 传入适配器</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>显示效果如下</strong></p>\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/ListView%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8.png\" style=\"zoom: 50%;\" />\n\n\n\n<h4 id=\"自定义ListView界面\"><a href=\"#自定义ListView界面\" class=\"headerlink\" title=\"自定义ListView界面\"></a>自定义ListView界面</h4><blockquote>\n<p>1、自定义 ListView 子项布局的样式（即写一个layout的xml）</p>\n<p>2、写一个实例类，用于作为列表项的泛型</p>\n<p>3、创建一个自定义的适配器，这个适配器继承自 ArrayAdapter。重写构造方法与getView()等方法</p>\n<p>4、按ListView的基础用法在主活动中引入即可</p>\n</blockquote>\n<h4 id=\"ListView的点击事件\"><a href=\"#ListView的点击事件\" class=\"headerlink\" title=\"ListView的点击事件\"></a>ListView的点击事件</h4><p><strong>标准写法如下：<code>setOnItemClickListener</code></strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">listView.set<span class=\"hljs-constructor\">OnItemClickListener(<span class=\"hljs-params\">new</span> AdapterView.OnItemClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">ItemClick(AdapterView&lt;?&gt; <span class=\"hljs-params\">parent</span>, View <span class=\"hljs-params\">view</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">position</span>, <span class=\"hljs-params\">long</span> <span class=\"hljs-params\">id</span>)</span> &#123;<br>    \t<span class=\"hljs-comment\">// position指列表中点击的索引</span><br>        <span class=\"hljs-comment\">// 添加逻辑代码</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"RecyclerView\"><a href=\"#RecyclerView\" class=\"headerlink\" title=\"RecyclerView\"></a>RecyclerView</h3><blockquote>\n<p>加强版的ListView，更推荐使用</p>\n<p>ListView 的布局排列是由自身去管理的，而 RecyclerView 则将这个工作交给了<code>LayoutManager</code>等接口，因此在布局上非常方便</p>\n</blockquote>\n<h4 id=\"标准使用\"><a href=\"#标准使用\" class=\"headerlink\" title=\"标准使用\"></a>标准使用</h4><blockquote>\n<p>与ListView相比不同之处在于<code>setLayoutManager</code>设置了“滚动方式”</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">RecyclerView recyclerView = (RecyclerView) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">recycler_view</span>)</span>;<br><br>LinearLayoutManager layoutManager = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">LinearLayoutManager(<span class=\"hljs-params\">this</span>)</span>;<br>layoutManager.set<span class=\"hljs-constructor\">Orientation(LinearLayoutManager.HORIZONTAL)</span>;\t<span class=\"hljs-comment\">// 设置滚动方式（此处设置为水平）</span><br>recyclerView.set<span class=\"hljs-constructor\">LayoutManager(<span class=\"hljs-params\">layoutManager</span>)</span>;\t<span class=\"hljs-comment\">// 设置LinearLayoutManager对象</span><br>FruitAdapter adapter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">FruitAdapter(<span class=\"hljs-params\">fruitList</span>)</span>;<br>recyclerView.set<span class=\"hljs-constructor\">Adapter(<span class=\"hljs-params\">adapter</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>除此之外，还可以通过<code>GridLayoutManager</code>与<code>StaggeredGridLayoutManager</code>这两种方式实现网格布局和瀑布流布局</p>\n<h2 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h2><h3 id=\"常用布局属性\"><a href=\"#常用布局属性\" class=\"headerlink\" title=\"常用布局属性\"></a>常用布局属性</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">android:layout_width=<span class=\"hljs-string\">\"match_parent\"</span>\t\t表示<span class=\"hljs-built_in\">width</span>与父布局的<span class=\"hljs-built_in\">width</span>相同<br>android:layout_height=<span class=\"hljs-string\">\"wrap_content\"</span>\t表示<span class=\"hljs-built_in\">height</span>刚好能够容纳内容<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"线性布局（LinearLayout）\"><a href=\"#线性布局（LinearLayout）\" class=\"headerlink\" title=\"线性布局（LinearLayout）\"></a>线性布局（LinearLayout）</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span><br>    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span>    <br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>&gt;</span><br>        <br>\t<span class=\"hljs-comment\">&lt;!-- 添加布局内部的组件 --&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用属性-4\"><a href=\"#常用属性-4\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>orientation=<span class=\"hljs-string\">\"horizontal\"</span>\t指定是水平还是垂直（horizontal与vertical可选）<br><span class=\"hljs-symbol\">android:</span>layout _gravity\t\t指定布局内控件的对齐方式<br><span class=\"hljs-symbol\">android:</span>layout _weight\t\t使用比例的方式来指定控件的大小（即将所有控件按比例指定长宽大小）<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"layout-weight示例\"><a href=\"#layout-weight示例\" class=\"headerlink\" title=\"layout_weight示例\"></a>layout_weight示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">LinearLayout</span><br>    <span class=\"hljs-attr\">android:orientation</span>=<span class=\"hljs-string\">\"horizontal\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">EditText</span><br>    <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/edit_text\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"3\"</span><br>    /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span><br>    <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/button\"</span><br>    <span class=\"hljs-attr\">android:layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    <span class=\"hljs-attr\">android:layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    <span class=\"hljs-attr\">android:text</span>=<span class=\"hljs-string\">\"send\"</span><br>    <span class=\"hljs-attr\">android:layout_weight</span>=<span class=\"hljs-string\">\"1\"</span><br>    /&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/layout-weight%E6%95%88%E6%9E%9C.png\" alt=\"layout-weight：3比1的效果\"></p>\n<h3 id=\"相对布局（RelativeLayout）\"><a href=\"#相对布局（RelativeLayout）\" class=\"headerlink\" title=\"相对布局（RelativeLayout）\"></a>相对布局（RelativeLayout）</h3><blockquote>\n<p>相对布局较为灵活，可以通过相对定位的方式让控件出现在布局的任何位置</p>\n</blockquote>\n<h4 id=\"相对于父布局定位\"><a href=\"#相对于父布局定位\" class=\"headerlink\" title=\"相对于父布局定位\"></a>相对于父布局定位</h4><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E7%88%B6%E5%B8%83%E5%B1%80.png\" style=\"zoom: 50%;\" />\n\n\n\n<h4 id=\"相对于控件定位\"><a href=\"#相对于控件定位\" class=\"headerlink\" title=\"相对于控件定位\"></a>相对于控件定位</h4><img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E7%9B%B8%E5%AF%B9%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"帧布局（FrameLayout）\"><a href=\"#帧布局（FrameLayout）\" class=\"headerlink\" title=\"帧布局（FrameLayout）\"></a>帧布局（FrameLayout）</h3><blockquote>\n<p>所有的控件都会默认摆放在布局的左上角，应用很少</p>\n</blockquote>\n<h3 id=\"百分比布局\"><a href=\"#百分比布局\" class=\"headerlink\" title=\"百分比布局\"></a>百分比布局</h3><blockquote>\n<p>百分比布局为 FrameLayout 和 RelativeLayout 进行了<strong>功能扩展</strong>，提供了 PercentFrameLayout 和 PercentRelativeLayout 这两个全新的布局</p>\n</blockquote>\n<h2 id=\"自定义控件\"><a href=\"#自定义控件\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h2><h3 id=\"引入布局\"><a href=\"#引入布局\" class=\"headerlink\" title=\"引入布局\"></a>引入布局</h3><blockquote>\n<p>引入布局即新建一个布局文件，并在“主布局文件中”进行引用，达到<strong>重复应用某一布局的效果</strong></p>\n</blockquote>\n<p>引用布局使用include语句即可，示例：<code>&lt;include layout=&quot;@layout/title&quot; /&gt;</code>。即引入了一个<code>title.xml</code>的布局文件</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><ol>\n<li>新建<code>title.xml</code>文件，并在其中编写相应控件代码。</li>\n<li>在<code>activity_main.xml</code>中使用<code>include</code>语句将新建的布局添加进去（就像添加常规布局一样）</li>\n</ol>\n<h3 id=\"自定义控件-1\"><a href=\"#自定义控件-1\" class=\"headerlink\" title=\"自定义控件\"></a>自定义控件</h3><blockquote>\n<p>引入布局解决了重复编写布局代码的问题，但布局中的响应事件常常还需要编写</p>\n<p>自定义控件即编写布局中的响应事件，避免重复编写相同代码</p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在之前自定义布局的基础上，新建一个Java类，继承自<code>LinearLayout</code>，代码如下（即实现了该布局中控件的相关功能）：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public <span class=\"hljs-keyword\">class</span> TitleLayout extends LinearLayout &#123;<br>    public <span class=\"hljs-constructor\">TitleLayout(Context <span class=\"hljs-params\">context</span>, AttributeSet <span class=\"hljs-params\">attrs</span>)</span> &#123;<br>        super(context, attrs);<br>        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LayoutInflater</span>.</span></span>from(context).inflate(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>layout.title, this);\t<span class=\"hljs-comment\">// 进行加载</span><br><br>\t\t<span class=\"hljs-comment\">// 编写控件中的按钮代码</span><br>        Button titleBack = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">title_back</span>)</span>;<br>        Button titleEdit = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">title_edit</span>)</span>;<br>        titleBack.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> OnClickListener()</span> &#123;<br>            @Override<br>            public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>                ((Activity) get<span class=\"hljs-constructor\">Context()</span>).finish<span class=\"hljs-literal\">()</span>;<br>            &#125;<br>        &#125;);<br>        titleEdit.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> OnClickListener()</span> &#123;<br>            @Override<br>            public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>                <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">getContext</span>()</span>, <span class=\"hljs-string\">\"You clicked Edit button\"</span>,<br>                        Toast.LENGTH_SHORT).show<span class=\"hljs-literal\">()</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%B8%89%EF%BC%9A%E5%B8%83%E5%B1%80%EF%BC%88layout%EF%BC%89/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n"},{"title":"Android开发五：广播机制","date":"2020-09-02T02:50:44.000Z","fileName":"Android5-broadcast","_content":"\n\n\n## 接收系统广播\n\n### 动态注册（app运行时能够进行接收）\n\n1. 创建一个广播接收器\n\n> 新建一个继承自 `BroadcastReceiver`的类，并重写父类的 `onReceive()` 方法\n\n```\nclass NetworkChangeReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n    \t// 若检测到变化，则弹出相关信息\n        Toast.makeText(context, \"network changes\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n2. 在`onCreate()`中创建一个`IntentFilter`实例，并使用`addAction()`添加系统发送的广播（`action1`）。之后创建一个步骤1类的实例。调用`registerReceiver()`方法将`NetworkChangeReceiver`的实例与`IntentFilter`的实例都传进去，即可**使得`NetworkChangeReceiver`接收到对应的`action1`**\n\n```\nprivate IntentFilter intentFilter;\nprivate NetworkChangeReceive networkChangeReceive;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    intentFilter = new IntentFilter();\n    intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\t// 添加需要监听的广播\n    networkChangeReceive = new NetworkChangeReceive();\n    registerReceiver(networkChangeReceive, intentFilter);\t// 绑定\n}\n```\n\n3. 动态注册的广播接收器一定都要取消注册才行，在`onDestroy()`方法中通过调用`unregisterReceiver()`方法来实现\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    unregisterReceiver(networkChangeReceive);\n}\n```\n\n4. 在`AndroidManifest.xml`中声明权限\n\n> 注：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序将会直接崩溃\n\n```\n<uses-permission android:name=\"填入相关权限\" />\n```\n\n### 静态注册（开机启动）\n\n1. 右击 com.example.broadcasttest 包 →New→Other→ Broadcast Receiver，创建一个广播接收器\n2. 重写`onReceive()`方法\n\n3. 在`AndroidManifest.xml`文件中注册（AS通常情况会自动注册）\n\n```\n<!-- 声明权限 -->\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n\n<receiver\n    android:name=\".BootCompleteReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\">\n    <intent-filter>\n    \t<!-- 开机启动 -->\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n    </intent-filter>\n</receiver>\n```\n\n\n\n## 自定义广播\n\n### 发送标准广播\n\n1. 定义接收器（与上一部分一样）\n\n```\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in MyReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n2. 在`AndroidManifest.xml`中对事件接收器进行注册（注册接收什么事件）\n\n```\n<receiver\n    android:name=\".MyReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\">\n    <intent-filter>\n    \t<!-- 接收名为MY_BROADCAST的广播 -->\n        <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n    </intent-filter>\n</receiver>\n```\n\n3. 定义发送广播（名称与接收处一致，此处以点击事件作为例子）。首先构建一个`Intent`对象，并传入广播值，之后调用`sendBroadcast()`方法将广播发送出去（此时所有监听该广播的广播接收器就会收到消息）\n\n```\n@Override\npublic void onClick(View view) {\n    Intent intent = new Intent(\"com.example.broadcasttest.MY_BROADCAST\");\n    sendBroadcast(intent);\n}\n```\n\n\n\n### 发送有序广播\n\n> 广播是一种可以跨进程的通信方式，即在我们应用程序内发出的广播，其他的应用程序应该也可以收到\n\n发送有序广播只需要改变广播发送的代码为`sendOrderedBroadcast()`，传入Intent和与权限相关的字符串。\n\n```\nsendOrderedBroadcast(intent, null);\n```\n\n#### 设置广播接收器的先后顺序\n\n如下，使用`android:priority`设置优先级为100\n\n```\n<intent-filter android:priority=\"100\">\n    <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n</intent-filter>\n```\n\n#### 中断广播\n\n在`onReceive()`方法中调用了`abortBroadcast()`方法，就表示将这条广播截断，后面的广播接收器将无法再接收到这条广播。\n\n\n\n## 本地广播\n\n> **本地广播机制**：使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播\n\n> **本地广播使用**：使用一个`LocalBroadcastManager`来对广播进行管理，并提供了发送广播和注册广播接收器的方法（*与动态注册广播流程基本一致*）\n\n```\nLocalBroadcastManager localBroadcastManager;\nlocalBroadcastManager = LocalBroadcastManager.getInstance(this);\t// 获取实例\nlocalBroadcastManager.sendBroadcast(intent);\t// 发送本地广播\nlocalBroadcastManager.registerReceiver(localReceiver, intentFilter); \t// 注册本地广播监听器\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程相关/Android/Android开发五：广播机制.md","raw":"---\ntitle: Android开发五：广播机制\ndate: 2020-09-02 10:50:44\ntags:\n\t- Android\ncategories:\n\t- 编程相关\n\t- Android\nfileName: Android5-broadcast\n---\n\n\n\n## 接收系统广播\n\n### 动态注册（app运行时能够进行接收）\n\n1. 创建一个广播接收器\n\n> 新建一个继承自 `BroadcastReceiver`的类，并重写父类的 `onReceive()` 方法\n\n```\nclass NetworkChangeReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n    \t// 若检测到变化，则弹出相关信息\n        Toast.makeText(context, \"network changes\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n2. 在`onCreate()`中创建一个`IntentFilter`实例，并使用`addAction()`添加系统发送的广播（`action1`）。之后创建一个步骤1类的实例。调用`registerReceiver()`方法将`NetworkChangeReceiver`的实例与`IntentFilter`的实例都传进去，即可**使得`NetworkChangeReceiver`接收到对应的`action1`**\n\n```\nprivate IntentFilter intentFilter;\nprivate NetworkChangeReceive networkChangeReceive;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n    intentFilter = new IntentFilter();\n    intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\");\t// 添加需要监听的广播\n    networkChangeReceive = new NetworkChangeReceive();\n    registerReceiver(networkChangeReceive, intentFilter);\t// 绑定\n}\n```\n\n3. 动态注册的广播接收器一定都要取消注册才行，在`onDestroy()`方法中通过调用`unregisterReceiver()`方法来实现\n\n```\n@Override\nprotected void onDestroy() {\n    super.onDestroy();\n    unregisterReceiver(networkChangeReceive);\n}\n```\n\n4. 在`AndroidManifest.xml`中声明权限\n\n> 注：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序将会直接崩溃\n\n```\n<uses-permission android:name=\"填入相关权限\" />\n```\n\n### 静态注册（开机启动）\n\n1. 右击 com.example.broadcasttest 包 →New→Other→ Broadcast Receiver，创建一个广播接收器\n2. 重写`onReceive()`方法\n\n3. 在`AndroidManifest.xml`文件中注册（AS通常情况会自动注册）\n\n```\n<!-- 声明权限 -->\n<uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n\n<receiver\n    android:name=\".BootCompleteReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\">\n    <intent-filter>\n    \t<!-- 开机启动 -->\n        <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n    </intent-filter>\n</receiver>\n```\n\n\n\n## 自定义广播\n\n### 发送标准广播\n\n1. 定义接收器（与上一部分一样）\n\n```\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, \"received in MyReceiver\", Toast.LENGTH_SHORT).show();\n    }\n}\n```\n\n2. 在`AndroidManifest.xml`中对事件接收器进行注册（注册接收什么事件）\n\n```\n<receiver\n    android:name=\".MyReceiver\"\n    android:enabled=\"true\"\n    android:exported=\"true\">\n    <intent-filter>\n    \t<!-- 接收名为MY_BROADCAST的广播 -->\n        <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n    </intent-filter>\n</receiver>\n```\n\n3. 定义发送广播（名称与接收处一致，此处以点击事件作为例子）。首先构建一个`Intent`对象，并传入广播值，之后调用`sendBroadcast()`方法将广播发送出去（此时所有监听该广播的广播接收器就会收到消息）\n\n```\n@Override\npublic void onClick(View view) {\n    Intent intent = new Intent(\"com.example.broadcasttest.MY_BROADCAST\");\n    sendBroadcast(intent);\n}\n```\n\n\n\n### 发送有序广播\n\n> 广播是一种可以跨进程的通信方式，即在我们应用程序内发出的广播，其他的应用程序应该也可以收到\n\n发送有序广播只需要改变广播发送的代码为`sendOrderedBroadcast()`，传入Intent和与权限相关的字符串。\n\n```\nsendOrderedBroadcast(intent, null);\n```\n\n#### 设置广播接收器的先后顺序\n\n如下，使用`android:priority`设置优先级为100\n\n```\n<intent-filter android:priority=\"100\">\n    <action android:name=\"com.example.broadcasttest.MY_BROADCAST\" />\n</intent-filter>\n```\n\n#### 中断广播\n\n在`onReceive()`方法中调用了`abortBroadcast()`方法，就表示将这条广播截断，后面的广播接收器将无法再接收到这条广播。\n\n\n\n## 本地广播\n\n> **本地广播机制**：使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播\n\n> **本地广播使用**：使用一个`LocalBroadcastManager`来对广播进行管理，并提供了发送广播和注册广播接收器的方法（*与动态注册广播流程基本一致*）\n\n```\nLocalBroadcastManager localBroadcastManager;\nlocalBroadcastManager = LocalBroadcastManager.getInstance(this);\t// 获取实例\nlocalBroadcastManager.sendBroadcast(intent);\t// 发送本地广播\nlocalBroadcastManager.registerReceiver(localReceiver, intentFilter); \t// 注册本地广播监听器\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程相关/Android/Android开发五：广播机制","published":1,"updated":"2021-01-11T04:23:32.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobk005frwjshp0ehdrh","content":"<h2 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h2><h3 id=\"动态注册（app运行时能够进行接收）\"><a href=\"#动态注册（app运行时能够进行接收）\" class=\"headerlink\" title=\"动态注册（app运行时能够进行接收）\"></a>动态注册（app运行时能够进行接收）</h3><ol>\n<li>创建一个广播接收器</li>\n</ol>\n<blockquote>\n<p>新建一个继承自 <code>BroadcastReceiver</code>的类，并重写父类的 <code>onReceive()</code> 方法</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkChangeReceiver</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BroadcastReceiver</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    public void onReceive(<span class=\"hljs-type\">Context</span> context, <span class=\"hljs-type\">Intent</span> intent) &#123;<br>    \t<span class=\"hljs-comment\">// 若检测到变化，则弹出相关信息</span><br>        <span class=\"hljs-type\">Toast</span>.makeText(context, <span class=\"hljs-string\">\"network changes\"</span>, <span class=\"hljs-type\">Toast</span>.<span class=\"hljs-type\">LENGTH_SHORT</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>onCreate()</code>中创建一个<code>IntentFilter</code>实例，并使用<code>addAction()</code>添加系统发送的广播（<code>action1</code>）。之后创建一个步骤1类的实例。调用<code>registerReceiver()</code>方法将<code>NetworkChangeReceiver</code>的实例与<code>IntentFilter</code>的实例都传进去，即可<strong>使得<code>NetworkChangeReceiver</code>接收到对应的<code>action1</code></strong></li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> IntentFilter intentFilter;<br><span class=\"hljs-keyword\">private</span> NetworkChangeReceive networkChangeReceive;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>    intentFilter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IntentFilter()</span>;<br>    intentFilter.add<span class=\"hljs-constructor\">Action(<span class=\"hljs-string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>)</span>;\t<span class=\"hljs-comment\">// 添加需要监听的广播</span><br>    networkChangeReceive = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NetworkChangeReceive()</span>;<br>    register<span class=\"hljs-constructor\">Receiver(<span class=\"hljs-params\">networkChangeReceive</span>, <span class=\"hljs-params\">intentFilter</span>)</span>;\t<span class=\"hljs-comment\">// 绑定</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>动态注册的广播接收器一定都要取消注册才行，在<code>onDestroy()</code>方法中通过调用<code>unregisterReceiver()</code>方法来实现</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onDestroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onDestroy();<br>    unregisterReceiver(networkChangeReceive);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在<code>AndroidManifest.xml</code>中声明权限</li>\n</ol>\n<blockquote>\n<p>注：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序将会直接崩溃</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"填入相关权限\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"静态注册（开机启动）\"><a href=\"#静态注册（开机启动）\" class=\"headerlink\" title=\"静态注册（开机启动）\"></a>静态注册（开机启动）</h3><ol>\n<li><p>右击 com.example.broadcasttest 包 →New→Other→ Broadcast Receiver，创建一个广播接收器</p>\n</li>\n<li><p>重写<code>onReceive()</code>方法</p>\n</li>\n<li><p>在<code>AndroidManifest.xml</code>文件中注册（AS通常情况会自动注册）</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 声明权限 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.RECEIVE_BOOT_COMPLETED\"</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">receiver</span><br>    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".BootCompleteReceiver\"</span><br>    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span><br>    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>    \t<span class=\"hljs-comment\">&lt;!-- 开机启动 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.BOOT_COMPLETED\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h2><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><ol>\n<li>定义接收器（与上一部分一样）</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyReceiver</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BroadcastReceiver</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    public void onReceive(<span class=\"hljs-type\">Context</span> context, <span class=\"hljs-type\">Intent</span> intent) &#123;<br>        <span class=\"hljs-type\">Toast</span>.makeText(context, <span class=\"hljs-string\">\"received in MyReceiver\"</span>, <span class=\"hljs-type\">Toast</span>.<span class=\"hljs-type\">LENGTH_SHORT</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>AndroidManifest.xml</code>中对事件接收器进行注册（注册接收什么事件）</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">receiver</span><br>    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".MyReceiver\"</span><br>    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span><br>    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>    \t<span class=\"hljs-comment\">&lt;!-- 接收名为MY_BROADCAST的广播 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>定义发送广播（名称与接收处一致，此处以点击事件作为例子）。首先构建一个<code>Intent</code>对象，并传入广播值，之后调用<code>sendBroadcast()</code>方法将广播发送出去（此时所有监听该广播的广播接收器就会收到消息）</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>    Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span>)</span>;<br>    send<span class=\"hljs-constructor\">Broadcast(<span class=\"hljs-params\">intent</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><blockquote>\n<p>广播是一种可以跨进程的通信方式，即在我们应用程序内发出的广播，其他的应用程序应该也可以收到</p>\n</blockquote>\n<p>发送有序广播只需要改变广播发送的代码为<code>sendOrderedBroadcast()</code>，传入Intent和与权限相关的字符串。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">send<span class=\"hljs-constructor\">OrderedBroadcast(<span class=\"hljs-params\">intent</span>, <span class=\"hljs-params\">null</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"设置广播接收器的先后顺序\"><a href=\"#设置广播接收器的先后顺序\" class=\"headerlink\" title=\"设置广播接收器的先后顺序\"></a>设置广播接收器的先后顺序</h4><p>如下，使用<code>android:priority</code>设置优先级为100</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span> <span class=\"hljs-attr\">android:priority</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"中断广播\"><a href=\"#中断广播\" class=\"headerlink\" title=\"中断广播\"></a>中断广播</h4><p>在<code>onReceive()</code>方法中调用了<code>abortBroadcast()</code>方法，就表示将这条广播截断，后面的广播接收器将无法再接收到这条广播。</p>\n<h2 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h2><blockquote>\n<p><strong>本地广播机制</strong>：使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播</p>\n</blockquote>\n<blockquote>\n<p><strong>本地广播使用</strong>：使用一个<code>LocalBroadcastManager</code>来对广播进行管理，并提供了发送广播和注册广播接收器的方法（<em>与动态注册广播流程基本一致</em>）</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">LocalBroadcastManager localBroadcastManager;<br>localBroadcastManager = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalBroadcastManager</span>.</span></span>get<span class=\"hljs-constructor\">Instance(<span class=\"hljs-params\">this</span>)</span>;\t<span class=\"hljs-comment\">// 获取实例</span><br>localBroadcastManager.send<span class=\"hljs-constructor\">Broadcast(<span class=\"hljs-params\">intent</span>)</span>;\t<span class=\"hljs-comment\">// 发送本地广播</span><br>localBroadcastManager.register<span class=\"hljs-constructor\">Receiver(<span class=\"hljs-params\">localReceiver</span>, <span class=\"hljs-params\">intentFilter</span>)</span>; \t<span class=\"hljs-comment\">// 注册本地广播监听器</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"接收系统广播\"><a href=\"#接收系统广播\" class=\"headerlink\" title=\"接收系统广播\"></a>接收系统广播</h2><h3 id=\"动态注册（app运行时能够进行接收）\"><a href=\"#动态注册（app运行时能够进行接收）\" class=\"headerlink\" title=\"动态注册（app运行时能够进行接收）\"></a>动态注册（app运行时能够进行接收）</h3><ol>\n<li>创建一个广播接收器</li>\n</ol>\n<blockquote>\n<p>新建一个继承自 <code>BroadcastReceiver</code>的类，并重写父类的 <code>onReceive()</code> 方法</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NetworkChangeReceiver</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BroadcastReceiver</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    public void onReceive(<span class=\"hljs-type\">Context</span> context, <span class=\"hljs-type\">Intent</span> intent) &#123;<br>    \t<span class=\"hljs-comment\">// 若检测到变化，则弹出相关信息</span><br>        <span class=\"hljs-type\">Toast</span>.makeText(context, <span class=\"hljs-string\">\"network changes\"</span>, <span class=\"hljs-type\">Toast</span>.<span class=\"hljs-type\">LENGTH_SHORT</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>onCreate()</code>中创建一个<code>IntentFilter</code>实例，并使用<code>addAction()</code>添加系统发送的广播（<code>action1</code>）。之后创建一个步骤1类的实例。调用<code>registerReceiver()</code>方法将<code>NetworkChangeReceiver</code>的实例与<code>IntentFilter</code>的实例都传进去，即可<strong>使得<code>NetworkChangeReceiver</code>接收到对应的<code>action1</code></strong></li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> IntentFilter intentFilter;<br><span class=\"hljs-keyword\">private</span> NetworkChangeReceive networkChangeReceive;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">activity_main</span>)</span>;<br>    intentFilter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">IntentFilter()</span>;<br>    intentFilter.add<span class=\"hljs-constructor\">Action(<span class=\"hljs-string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span>)</span>;\t<span class=\"hljs-comment\">// 添加需要监听的广播</span><br>    networkChangeReceive = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">NetworkChangeReceive()</span>;<br>    register<span class=\"hljs-constructor\">Receiver(<span class=\"hljs-params\">networkChangeReceive</span>, <span class=\"hljs-params\">intentFilter</span>)</span>;\t<span class=\"hljs-comment\">// 绑定</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>动态注册的广播接收器一定都要取消注册才行，在<code>onDestroy()</code>方法中通过调用<code>unregisterReceiver()</code>方法来实现</li>\n</ol>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onDestroy</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onDestroy();<br>    unregisterReceiver(networkChangeReceive);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在<code>AndroidManifest.xml</code>中声明权限</li>\n</ol>\n<blockquote>\n<p>注：如果程序需要进行一些对用户来说比较敏感的操作，就必须在配置文件中声明权限才可以，否则程序将会直接崩溃</p>\n</blockquote>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">&lt;uses-permission android:<span class=\"hljs-built_in\">name</span>=<span class=\"hljs-string\">\"填入相关权限\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"静态注册（开机启动）\"><a href=\"#静态注册（开机启动）\" class=\"headerlink\" title=\"静态注册（开机启动）\"></a>静态注册（开机启动）</h3><ol>\n<li><p>右击 com.example.broadcasttest 包 →New→Other→ Broadcast Receiver，创建一个广播接收器</p>\n</li>\n<li><p>重写<code>onReceive()</code>方法</p>\n</li>\n<li><p>在<code>AndroidManifest.xml</code>文件中注册（AS通常情况会自动注册）</p>\n</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 声明权限 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">uses-permission</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.permission.RECEIVE_BOOT_COMPLETED\"</span> /&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">receiver</span><br>    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".BootCompleteReceiver\"</span><br>    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span><br>    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>    \t<span class=\"hljs-comment\">&lt;!-- 开机启动 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.action.BOOT_COMPLETED\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义广播\"><a href=\"#自定义广播\" class=\"headerlink\" title=\"自定义广播\"></a>自定义广播</h2><h3 id=\"发送标准广播\"><a href=\"#发送标准广播\" class=\"headerlink\" title=\"发送标准广播\"></a>发送标准广播</h3><ol>\n<li>定义接收器（与上一部分一样）</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyReceiver</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">BroadcastReceiver</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    public void onReceive(<span class=\"hljs-type\">Context</span> context, <span class=\"hljs-type\">Intent</span> intent) &#123;<br>        <span class=\"hljs-type\">Toast</span>.makeText(context, <span class=\"hljs-string\">\"received in MyReceiver\"</span>, <span class=\"hljs-type\">Toast</span>.<span class=\"hljs-type\">LENGTH_SHORT</span>).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在<code>AndroidManifest.xml</code>中对事件接收器进行注册（注册接收什么事件）</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">receiver</span><br>    <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".MyReceiver\"</span><br>    <span class=\"hljs-attr\">android:enabled</span>=<span class=\"hljs-string\">\"true\"</span><br>    <span class=\"hljs-attr\">android:exported</span>=<span class=\"hljs-string\">\"true\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>    \t<span class=\"hljs-comment\">&lt;!-- 接收名为MY_BROADCAST的广播 --&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>定义发送广播（名称与接收处一致，此处以点击事件作为例子）。首先构建一个<code>Intent</code>对象，并传入广播值，之后调用<code>sendBroadcast()</code>方法将广播发送出去（此时所有监听该广播的广播接收器就会收到消息）</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>    Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span>)</span>;<br>    send<span class=\"hljs-constructor\">Broadcast(<span class=\"hljs-params\">intent</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"发送有序广播\"><a href=\"#发送有序广播\" class=\"headerlink\" title=\"发送有序广播\"></a>发送有序广播</h3><blockquote>\n<p>广播是一种可以跨进程的通信方式，即在我们应用程序内发出的广播，其他的应用程序应该也可以收到</p>\n</blockquote>\n<p>发送有序广播只需要改变广播发送的代码为<code>sendOrderedBroadcast()</code>，传入Intent和与权限相关的字符串。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">send<span class=\"hljs-constructor\">OrderedBroadcast(<span class=\"hljs-params\">intent</span>, <span class=\"hljs-params\">null</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"设置广播接收器的先后顺序\"><a href=\"#设置广播接收器的先后顺序\" class=\"headerlink\" title=\"设置广播接收器的先后顺序\"></a>设置广播接收器的先后顺序</h4><p>如下，使用<code>android:priority</code>设置优先级为100</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span> <span class=\"hljs-attr\">android:priority</span>=<span class=\"hljs-string\">\"100\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.broadcasttest.MY_BROADCAST\"</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"中断广播\"><a href=\"#中断广播\" class=\"headerlink\" title=\"中断广播\"></a>中断广播</h4><p>在<code>onReceive()</code>方法中调用了<code>abortBroadcast()</code>方法，就表示将这条广播截断，后面的广播接收器将无法再接收到这条广播。</p>\n<h2 id=\"本地广播\"><a href=\"#本地广播\" class=\"headerlink\" title=\"本地广播\"></a>本地广播</h2><blockquote>\n<p><strong>本地广播机制</strong>：使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播</p>\n</blockquote>\n<blockquote>\n<p><strong>本地广播使用</strong>：使用一个<code>LocalBroadcastManager</code>来对广播进行管理，并提供了发送广播和注册广播接收器的方法（<em>与动态注册广播流程基本一致</em>）</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">LocalBroadcastManager localBroadcastManager;<br>localBroadcastManager = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">LocalBroadcastManager</span>.</span></span>get<span class=\"hljs-constructor\">Instance(<span class=\"hljs-params\">this</span>)</span>;\t<span class=\"hljs-comment\">// 获取实例</span><br>localBroadcastManager.send<span class=\"hljs-constructor\">Broadcast(<span class=\"hljs-params\">intent</span>)</span>;\t<span class=\"hljs-comment\">// 发送本地广播</span><br>localBroadcastManager.register<span class=\"hljs-constructor\">Receiver(<span class=\"hljs-params\">localReceiver</span>, <span class=\"hljs-params\">intentFilter</span>)</span>; \t<span class=\"hljs-comment\">// 注册本地广播监听器</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Android开发二：活动（Activity）","date":"2020-08-30T01:21:58.000Z","fileName":"Android2-activity","_content":"\n## 从0构建一个活动\n\n### 构建活动及布局\n\n1. 在创建项目时选择**“Add no Activity”**\n2. 在项目架构中的app->src->main下的包中右击，选择新建一个Activity，命名为FirstActivity\n3. 在布局文件夹layout中新建一个布局，命名为first_layout，并修改加上一个按钮，代码如下\n\n```\n<Button\n    android:id=\"@+id/button_1\"\t<!-- 定义id用于代码中使用 -->\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button 1\"\n    />\n```\n\n4. 在**AndroidManifest.xml**文件中注册活动，使用`<activity>`标签注册活动（AS已经自动注册好了），并放在`<application>`标签内，之后\n\n### 使用Toast完成消息提醒\n\n**Android中的Toast类似于其他GUI中的messagebox，“弹出”一条消息**\n\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.first_layout);\n    Button button1 = (Button) findViewById(R.id.button_1);\t// 获取该活动中的按钮\n    button1.setOnClickListener(new View.OnClickListener() {\t// 为按钮注册一个监听器\n        @Override\n        public void onClick(View view) {\t// 点击按钮，即执行监听器下的onClick方法\n            Toast.makeText(FirstActivity.this, \"You clicked Button 1\",\n                    Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n```\n\n其中makeText()包含三个参数，第一个是要求的上下文，第二个是显示的文本内容，第三个是显示的时长\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/toast-demo.png\" style=\"zoom: 50%;\" />\n\n### 使用menu\n\n1. 在res目录下创建一个menu文件，之后创建一个menu资源文件。\n2. 之后使用`<item>`标签创建一个菜单项，如下\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:id=\"@+id/add_item\"\t<!-- 创建唯一标识符 -->\n        android:title=\"Add\" />\t<!-- 创建菜单项的名称 -->\n    <item\n        android:id=\"@+id/remove_item\"\n        android:title=\"Remove\" />\n</menu>\n```\n\n3. 之后在相应活动中重写`onCreateOptionsMenu`函数，用以显示菜单，如下\n\n```java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main, menu);\t// \n    return true;\t// 返回true表示允许菜单显示出来\n}\n```\n\n4. 定义菜单响应事件，重写`onOptionsItemSelected()`方法\n\n```\n@Override\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.add_item:\n            Toast.makeText(this, \"You clicked Add\", Toast.LENGTH_SHORT).show();\n            break;\n        case R.id.remove_item:\n            Toast.makeText(this, \"You clicked remove\", Toast.LENGTH_SHORT).show();\n            break;\n        default:\n    }\n    return true;\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/menu-demo.png\" style=\"zoom:50%;\" />\n\n\n\n### 使用finish()销毁一个活动，类似于返回键\n\n使用Activity类提供的**finish()**方法，取得的效果跟按下Back一致\n\n\n\n\n\n## 使用Intent构建不同活动间的联系\n\nintent是Android程序中**各组件之间进行交互的一种重要方式**，一般可用于启动活动、启动服务以及发送广播。根据指定响应对象是否直接可以分为显式Intent和隐式Intent。\n\n以下，像之前一样构建一个`SecondActivity`，用于响应实验。\n\n### 显式Intent\n\n**直接指定响应对象**，如下（点击按钮即可跳转到第二个页面）\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(FirstActivity.this, SecondActivity.class);\t// 由上下文响应目标活动\n        startActivity(intent);\t// 启动传入的Intent参数\n    }\n});\n```\n\n`Intent(Context packageContext, Class <?> cls)`，第一个参数 Context 要求提供一个启动活动的上下文，第二个参数 Class 则是指定想要启动的目标活动\n\nActivity 类中提供了一个 startActivity() 方法，这个方法是专门用于启动活动的，它接收一个 Intent 参数，这里我们将构建好的 Intent 传入 startActivity() 方法就可以启动目标活动了。\n\n\n\n### 隐式Intent\n\n隐式Intent**并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动**（即能够相应该隐式intent的活动）去启动\n\n通过在`<activity>`标签下配置`< intent-filter >`的内容，可以指定当前活动能够响应的 action 和 category。同时，**只有 `<action>` 和 `<category>` 中的内容同时能够匹配上 Intent 中指定的 action 和 category 时，这个活动才能响应该 Intent**。\n\n如下，在**AndroidManifest.xml**文件中配置SecondActivity的信息如下\n\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"com.example.activitytest.ACTION_START\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"com.example.activitytest.MY_CATEGORY\" />\n    </intent-filter>\n</activity>\n<activity\n```\n\n在FirstActivity中使用隐式Intent，完成点击按钮跳转到第二个界面\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(\"com.example.activitytest.ACTION_START\");\n        intent.addCategory(\"com.example.activitytest.MY_CATEGORY\");\n        startActivity(intent);\n    }\n});\n```\n\n\n\n\n\n用隐式 Intent，我们**不仅可以启动自己程序内的活动，还可以启动其他程序的活动（如调用浏览器）**，这使得 Android 多个应用程序之间的功能共享成为了可能\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(Uri.parse(\"http://www.baidu.com\"));\t// 将Uri对象传递进去，可以使用浏览器打开\n        startActivity(intent);\n    }\n});\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8.png\" style=\"zoom:50%;\" />\n\n\n\n### Intent向下一个活动传递数据\n\nIntent 中提供了一系列 **putExtra()** 方法的重载，可以把我们想要传递的数据暂存在 Intent 中，启动了另一个活动后，只需要把这些数据再从 Intent 中取出就可以了\n\nputExtra() 方法接收两个参数，第一个参数是键，用于后面从 Intent 中取值，第二个参数才是真正要传递的数据。\n\n#### 示例\n\n在FirstActivity中相应位置填入以下代码\n\n```\nString data = \"Hello, Second Activity\";\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class);\nintent.putExtra(\"extra_data\", data);\t// 将data传入，同时键值为extra_dat\nstartActivity(intent);\n```\n\n在SecondActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Intent intent = getIntent();\n    String data = intent.getStringExtra(\"extra_data\");\t// 通过键值获取信息\n    Toast.makeText(this, data, Toast.LENGTH_SHORT).show();\t// 显示信息\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8.png\" style=\"zoom: 67%;\" />\n\n### Intent返回数据给上一个活动\n\n**1、 使用startActivityForResult() 方法启动活动，在活动销毁后即可将数据传递回来**\n\n> startActivityForResult() 方法接收两个参数，第一个参数还是 Intent，第二个参数是**请求码（requestCode）**，用于在之后的回调中判断数据的来源。\n\n**2、在第二个活动中使用setResult() 方法将带有数据的Intent传递回去**\n\n> setResult() 方法接收两个参数，第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 或 RESULT_CANCELED 这两个值，第二个参数则把带有数据的 Intent 传递回去\n\n**3、使用startActivityForResult() 方法启动活动在活动销毁后会回调onActivityResult() 方法**，因此在第一个活动中重写该方法。\n\n>  onActivityResult() 方法带有三个参数，第一个参数 requestCode ，即我们在启动活动时传入的请求码。第二个参数 resultCode ，即我们在返回数据时传入的处理结果。第三个参数 data，即携带着返回数据的 Intent\n\n#### 示例\n\n在FirstActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.first_layout);\n    Button button1 = (Button) findViewById(R.id.button_1);\n    button1.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent(FirstActivity.this, SecondActivity.class);\n            startActivityForResult(intent, 1);\t// 请求码为1\n        }\n    });\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == 1) {\n        if (resultCode == RESULT_OK) {\n            assert data != null;\n            String returnData = data.getStringExtra(\"data_return\");\n            Toast.makeText(FirstActivity.this, returnData, Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n在SecondActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Button button2 = (Button) findViewById(R.id.button_2);\n    button2.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent();\n            intent.putExtra(\"data_return\", \"Return message from SecondActivity\");\n            setResult(RESULT_OK, intent);\n            finish();\n        }\n    });\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BB%8E%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF.png\" style=\"zoom:67%;\" />\n\n\n\n## 活动的生命周期\n\n### 活动状态\n\n每个活动在其生命周期最多可能有4种状态\n\n#### 运行状态\n\n一个活动位于返回栈的**栈顶**时，这时活动就处于运行状态\n\n#### 暂停状态\n\n当一个活动**不再处于栈顶位置，但仍然可见**时，这时活动就进入了暂停状态。\n\n#### 停止状态\n\n当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。（当其他地方需要内存时，处于停止状态的活动有可能会被系统回收）\n\n#### 销毁状态\n\n当一个活动**从返回栈中移除后**就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。\n\n### 活动的生存期\n\nActivity 类中定义了 7 个回调方法，覆盖了活动生命周期的每一个环节\n\n#### onCreate()\n\n> 在活动第一次被创建的时候调用\n>\n> 在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等\n\n#### onStart()\n\n> 活动由不可见变为可见的时候调用\n\n#### onResume()\n\n> 活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态\n\n#### onPause()\n\n> 这个方法在系统准备去启动或者恢复另一个活动的时候调用\n\n#### onStop()\n\n> 这个方法在活动完全不可见的时候调用\n\n#### onDestroy()\n\n> 这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。\n\n#### onRestart()\n\n> 这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。\n\n\n\n## 活动的启动模式\n\n### standard\n\n> 活动默认的启动模式，每次启动都会创建该活动的一个新的实例\n\n\n\n### singleTop\n\n> 启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例\n>\n> **不重复创建栈顶活动**\n\n在`AndroidManifest.xml`中`<activity>`标签内设置\n\n```\nandroid:launchMode=\"singleTop\"\n```\n\n\n\n### singleTask\n\n> 让任意活动在整个应用程序的上下文中**只存在一个实例**\n>\n> `android:launchMode=\"singleTask\"`\n\n\n\n### singleInstance\n\n> 这种模式下会有一个**单独的返回栈**来管理这个活动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，解决了**共享活动实例**的问题\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","source":"_posts/编程相关/Android/Android开发二：活动（Activity）.md","raw":"---\ntitle: Android开发二：活动（Activity）\ndate: 2020-08-30 09:21:58\ntags:\n\t- Android\ncategories:\n\t- 编程相关\n\t- Android\nfileName: Android2-activity\n---\n\n## 从0构建一个活动\n\n### 构建活动及布局\n\n1. 在创建项目时选择**“Add no Activity”**\n2. 在项目架构中的app->src->main下的包中右击，选择新建一个Activity，命名为FirstActivity\n3. 在布局文件夹layout中新建一个布局，命名为first_layout，并修改加上一个按钮，代码如下\n\n```\n<Button\n    android:id=\"@+id/button_1\"\t<!-- 定义id用于代码中使用 -->\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"Button 1\"\n    />\n```\n\n4. 在**AndroidManifest.xml**文件中注册活动，使用`<activity>`标签注册活动（AS已经自动注册好了），并放在`<application>`标签内，之后\n\n### 使用Toast完成消息提醒\n\n**Android中的Toast类似于其他GUI中的messagebox，“弹出”一条消息**\n\n```java\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.first_layout);\n    Button button1 = (Button) findViewById(R.id.button_1);\t// 获取该活动中的按钮\n    button1.setOnClickListener(new View.OnClickListener() {\t// 为按钮注册一个监听器\n        @Override\n        public void onClick(View view) {\t// 点击按钮，即执行监听器下的onClick方法\n            Toast.makeText(FirstActivity.this, \"You clicked Button 1\",\n                    Toast.LENGTH_SHORT).show();\n        }\n    });\n}\n```\n\n其中makeText()包含三个参数，第一个是要求的上下文，第二个是显示的文本内容，第三个是显示的时长\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/toast-demo.png\" style=\"zoom: 50%;\" />\n\n### 使用menu\n\n1. 在res目录下创建一个menu文件，之后创建一个menu资源文件。\n2. 之后使用`<item>`标签创建一个菜单项，如下\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<menu xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:id=\"@+id/add_item\"\t<!-- 创建唯一标识符 -->\n        android:title=\"Add\" />\t<!-- 创建菜单项的名称 -->\n    <item\n        android:id=\"@+id/remove_item\"\n        android:title=\"Remove\" />\n</menu>\n```\n\n3. 之后在相应活动中重写`onCreateOptionsMenu`函数，用以显示菜单，如下\n\n```java\n@Override\npublic boolean onCreateOptionsMenu(Menu menu) {\n    getMenuInflater().inflate(R.menu.main, menu);\t// \n    return true;\t// 返回true表示允许菜单显示出来\n}\n```\n\n4. 定义菜单响应事件，重写`onOptionsItemSelected()`方法\n\n```\n@Override\npublic boolean onOptionsItemSelected(@NonNull MenuItem item) {\n    switch (item.getItemId()) {\n        case R.id.add_item:\n            Toast.makeText(this, \"You clicked Add\", Toast.LENGTH_SHORT).show();\n            break;\n        case R.id.remove_item:\n            Toast.makeText(this, \"You clicked remove\", Toast.LENGTH_SHORT).show();\n            break;\n        default:\n    }\n    return true;\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/menu-demo.png\" style=\"zoom:50%;\" />\n\n\n\n### 使用finish()销毁一个活动，类似于返回键\n\n使用Activity类提供的**finish()**方法，取得的效果跟按下Back一致\n\n\n\n\n\n## 使用Intent构建不同活动间的联系\n\nintent是Android程序中**各组件之间进行交互的一种重要方式**，一般可用于启动活动、启动服务以及发送广播。根据指定响应对象是否直接可以分为显式Intent和隐式Intent。\n\n以下，像之前一样构建一个`SecondActivity`，用于响应实验。\n\n### 显式Intent\n\n**直接指定响应对象**，如下（点击按钮即可跳转到第二个页面）\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(FirstActivity.this, SecondActivity.class);\t// 由上下文响应目标活动\n        startActivity(intent);\t// 启动传入的Intent参数\n    }\n});\n```\n\n`Intent(Context packageContext, Class <?> cls)`，第一个参数 Context 要求提供一个启动活动的上下文，第二个参数 Class 则是指定想要启动的目标活动\n\nActivity 类中提供了一个 startActivity() 方法，这个方法是专门用于启动活动的，它接收一个 Intent 参数，这里我们将构建好的 Intent 传入 startActivity() 方法就可以启动目标活动了。\n\n\n\n### 隐式Intent\n\n隐式Intent**并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动**（即能够相应该隐式intent的活动）去启动\n\n通过在`<activity>`标签下配置`< intent-filter >`的内容，可以指定当前活动能够响应的 action 和 category。同时，**只有 `<action>` 和 `<category>` 中的内容同时能够匹配上 Intent 中指定的 action 和 category 时，这个活动才能响应该 Intent**。\n\n如下，在**AndroidManifest.xml**文件中配置SecondActivity的信息如下\n\n```\n<activity android:name=\".SecondActivity\">\n    <intent-filter>\n        <action android:name=\"com.example.activitytest.ACTION_START\" />\n        <category android:name=\"android.intent.category.DEFAULT\" />\n        <category android:name=\"com.example.activitytest.MY_CATEGORY\" />\n    </intent-filter>\n</activity>\n<activity\n```\n\n在FirstActivity中使用隐式Intent，完成点击按钮跳转到第二个界面\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(\"com.example.activitytest.ACTION_START\");\n        intent.addCategory(\"com.example.activitytest.MY_CATEGORY\");\n        startActivity(intent);\n    }\n});\n```\n\n\n\n\n\n用隐式 Intent，我们**不仅可以启动自己程序内的活动，还可以启动其他程序的活动（如调用浏览器）**，这使得 Android 多个应用程序之间的功能共享成为了可能\n\n```\nbutton1.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View view) {\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setData(Uri.parse(\"http://www.baidu.com\"));\t// 将Uri对象传递进去，可以使用浏览器打开\n        startActivity(intent);\n    }\n});\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8.png\" style=\"zoom:50%;\" />\n\n\n\n### Intent向下一个活动传递数据\n\nIntent 中提供了一系列 **putExtra()** 方法的重载，可以把我们想要传递的数据暂存在 Intent 中，启动了另一个活动后，只需要把这些数据再从 Intent 中取出就可以了\n\nputExtra() 方法接收两个参数，第一个参数是键，用于后面从 Intent 中取值，第二个参数才是真正要传递的数据。\n\n#### 示例\n\n在FirstActivity中相应位置填入以下代码\n\n```\nString data = \"Hello, Second Activity\";\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class);\nintent.putExtra(\"extra_data\", data);\t// 将data传入，同时键值为extra_dat\nstartActivity(intent);\n```\n\n在SecondActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Intent intent = getIntent();\n    String data = intent.getStringExtra(\"extra_data\");\t// 通过键值获取信息\n    Toast.makeText(this, data, Toast.LENGTH_SHORT).show();\t// 显示信息\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8.png\" style=\"zoom: 67%;\" />\n\n### Intent返回数据给上一个活动\n\n**1、 使用startActivityForResult() 方法启动活动，在活动销毁后即可将数据传递回来**\n\n> startActivityForResult() 方法接收两个参数，第一个参数还是 Intent，第二个参数是**请求码（requestCode）**，用于在之后的回调中判断数据的来源。\n\n**2、在第二个活动中使用setResult() 方法将带有数据的Intent传递回去**\n\n> setResult() 方法接收两个参数，第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 或 RESULT_CANCELED 这两个值，第二个参数则把带有数据的 Intent 传递回去\n\n**3、使用startActivityForResult() 方法启动活动在活动销毁后会回调onActivityResult() 方法**，因此在第一个活动中重写该方法。\n\n>  onActivityResult() 方法带有三个参数，第一个参数 requestCode ，即我们在启动活动时传入的请求码。第二个参数 resultCode ，即我们在返回数据时传入的处理结果。第三个参数 data，即携带着返回数据的 Intent\n\n#### 示例\n\n在FirstActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.first_layout);\n    Button button1 = (Button) findViewById(R.id.button_1);\n    button1.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent(FirstActivity.this, SecondActivity.class);\n            startActivityForResult(intent, 1);\t// 请求码为1\n        }\n    });\n}\n\n@Override\nprotected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\n    super.onActivityResult(requestCode, resultCode, data);\n    if (requestCode == 1) {\n        if (resultCode == RESULT_OK) {\n            assert data != null;\n            String returnData = data.getStringExtra(\"data_return\");\n            Toast.makeText(FirstActivity.this, returnData, Toast.LENGTH_SHORT).show();\n        }\n    }\n}\n```\n\n在SecondActivity中相应位置填入以下代码\n\n```\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.second_layout);\n    Button button2 = (Button) findViewById(R.id.button_2);\n    button2.setOnClickListener(new View.OnClickListener() {\n        @Override\n        public void onClick(View view) {\n            Intent intent = new Intent();\n            intent.putExtra(\"data_return\", \"Return message from SecondActivity\");\n            setResult(RESULT_OK, intent);\n            finish();\n        }\n    });\n}\n```\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BB%8E%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF.png\" style=\"zoom:67%;\" />\n\n\n\n## 活动的生命周期\n\n### 活动状态\n\n每个活动在其生命周期最多可能有4种状态\n\n#### 运行状态\n\n一个活动位于返回栈的**栈顶**时，这时活动就处于运行状态\n\n#### 暂停状态\n\n当一个活动**不再处于栈顶位置，但仍然可见**时，这时活动就进入了暂停状态。\n\n#### 停止状态\n\n当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。（当其他地方需要内存时，处于停止状态的活动有可能会被系统回收）\n\n#### 销毁状态\n\n当一个活动**从返回栈中移除后**就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。\n\n### 活动的生存期\n\nActivity 类中定义了 7 个回调方法，覆盖了活动生命周期的每一个环节\n\n#### onCreate()\n\n> 在活动第一次被创建的时候调用\n>\n> 在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等\n\n#### onStart()\n\n> 活动由不可见变为可见的时候调用\n\n#### onResume()\n\n> 活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态\n\n#### onPause()\n\n> 这个方法在系统准备去启动或者恢复另一个活动的时候调用\n\n#### onStop()\n\n> 这个方法在活动完全不可见的时候调用\n\n#### onDestroy()\n\n> 这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。\n\n#### onRestart()\n\n> 这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。\n\n\n\n## 活动的启动模式\n\n### standard\n\n> 活动默认的启动模式，每次启动都会创建该活动的一个新的实例\n\n\n\n### singleTop\n\n> 启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例\n>\n> **不重复创建栈顶活动**\n\n在`AndroidManifest.xml`中`<activity>`标签内设置\n\n```\nandroid:launchMode=\"singleTop\"\n```\n\n\n\n### singleTask\n\n> 让任意活动在整个应用程序的上下文中**只存在一个实例**\n>\n> `android:launchMode=\"singleTask\"`\n\n\n\n### singleInstance\n\n> 这种模式下会有一个**单独的返回栈**来管理这个活动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，解决了**共享活动实例**的问题\n\n\n\n\n\n### 参考\n\n第一行代码——Android（郭霖）","slug":"编程相关/Android/Android开发二：活动（Activity）","published":1,"updated":"2021-01-11T04:22:38.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobl005hrwjsbs8egeiw","content":"<h2 id=\"从0构建一个活动\"><a href=\"#从0构建一个活动\" class=\"headerlink\" title=\"从0构建一个活动\"></a>从0构建一个活动</h2><h3 id=\"构建活动及布局\"><a href=\"#构建活动及布局\" class=\"headerlink\" title=\"构建活动及布局\"></a>构建活动及布局</h3><ol>\n<li>在创建项目时选择<strong>“Add no Activity”</strong></li>\n<li>在项目架构中的app-&gt;src-&gt;main下的包中右击，选择新建一个Activity，命名为FirstActivity</li>\n<li>在布局文件夹layout中新建一个布局，命名为first_layout，并修改加上一个按钮，代码如下</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;Button<br>    android:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/button_1\"</span>\t&lt;!-- 定义id用于代码中使用 --&gt;<br>    android:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    android:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    android:<span class=\"hljs-attribute\">text</span>=<span class=\"hljs-string\">\"Button 1\"</span><br>    /&gt;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在<strong>AndroidManifest.xml</strong>文件中注册活动，使用<code>&lt;activity&gt;</code>标签注册活动（AS已经自动注册好了），并放在<code>&lt;application&gt;</code>标签内，之后</li>\n</ol>\n<h3 id=\"使用Toast完成消息提醒\"><a href=\"#使用Toast完成消息提醒\" class=\"headerlink\" title=\"使用Toast完成消息提醒\"></a>使用Toast完成消息提醒</h3><p><strong>Android中的Toast类似于其他GUI中的messagebox，“弹出”一条消息</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.first_layout);<br>    Button button1 = (Button) findViewById(R.id.button_1);\t<span class=\"hljs-comment\">// 获取该活动中的按钮</span><br>    button1.setOnClickListener(<span class=\"hljs-keyword\">new</span> View.OnClickListener() &#123;\t<span class=\"hljs-comment\">// 为按钮注册一个监听器</span><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onClick</span><span class=\"hljs-params\">(View view)</span> </span>&#123;\t<span class=\"hljs-comment\">// 点击按钮，即执行监听器下的onClick方法</span><br>            Toast.makeText(FirstActivity.<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"You clicked Button 1\"</span>,<br>                    Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中makeText()包含三个参数，第一个是要求的上下文，第二个是显示的文本内容，第三个是显示的时长</p>\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/toast-demo.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"使用menu\"><a href=\"#使用menu\" class=\"headerlink\" title=\"使用menu\"></a>使用menu</h3><ol>\n<li>在res目录下创建一个menu文件，之后创建一个menu资源文件。</li>\n<li>之后使用<code>&lt;item&gt;</code>标签创建一个菜单项，如下</li>\n</ol>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">menu</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">item</span><br>        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/add_item\"</span>\t&lt;!<span class=\"hljs-attr\">--</span> 创建唯一标识符 <span class=\"hljs-attr\">--</span>&gt;</span><br>        android:title=\"Add\" /&gt;\t<span class=\"hljs-comment\">&lt;!-- 创建菜单项的名称 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">item</span><br>        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/remove_item\"</span><br>        <span class=\"hljs-attr\">android:title</span>=<span class=\"hljs-string\">\"Remove\"</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">menu</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>之后在相应活动中重写<code>onCreateOptionsMenu</code>函数，用以显示菜单，如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">onCreateOptionsMenu</span><span class=\"hljs-params\">(Menu menu)</span> </span>&#123;<br>    getMenuInflater().inflate(R.menu.main, menu);\t<span class=\"hljs-comment\">// </span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\t<span class=\"hljs-comment\">// 返回true表示允许菜单显示出来</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>定义菜单响应事件，重写<code>onOptionsItemSelected()</code>方法</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Override</span><br>public boolean onOptionsItemSelected(<span class=\"hljs-variable\">@NonNull</span> MenuItem item) &#123;<br>    <span class=\"hljs-selector-tag\">switch</span> (item.getItemId()) &#123;<br>        <span class=\"hljs-selector-tag\">case</span> <span class=\"hljs-selector-tag\">R</span><span class=\"hljs-selector-class\">.id</span><span class=\"hljs-selector-class\">.add_item</span>:<br>            <span class=\"hljs-selector-tag\">Toast</span><span class=\"hljs-selector-class\">.makeText</span>(this, <span class=\"hljs-string\">\"You clicked Add\"</span>, Toast.LENGTH_SHORT)<span class=\"hljs-selector-class\">.show</span>();<br>            <span class=\"hljs-selector-tag\">break</span>;<br>        <span class=\"hljs-selector-tag\">case</span> <span class=\"hljs-selector-tag\">R</span><span class=\"hljs-selector-class\">.id</span><span class=\"hljs-selector-class\">.remove_item</span>:<br>            <span class=\"hljs-selector-tag\">Toast</span><span class=\"hljs-selector-class\">.makeText</span>(this, <span class=\"hljs-string\">\"You clicked remove\"</span>, Toast.LENGTH_SHORT)<span class=\"hljs-selector-class\">.show</span>();<br>            <span class=\"hljs-selector-tag\">break</span>;<br>        <span class=\"hljs-selector-tag\">default</span>:<br>    &#125;<br>    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/menu-demo.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"使用finish-销毁一个活动，类似于返回键\"><a href=\"#使用finish-销毁一个活动，类似于返回键\" class=\"headerlink\" title=\"使用finish()销毁一个活动，类似于返回键\"></a>使用finish()销毁一个活动，类似于返回键</h3><p>使用Activity类提供的<strong>finish()</strong>方法，取得的效果跟按下Back一致</p>\n<h2 id=\"使用Intent构建不同活动间的联系\"><a href=\"#使用Intent构建不同活动间的联系\" class=\"headerlink\" title=\"使用Intent构建不同活动间的联系\"></a>使用Intent构建不同活动间的联系</h2><p>intent是Android程序中<strong>各组件之间进行交互的一种重要方式</strong>，一般可用于启动活动、启动服务以及发送广播。根据指定响应对象是否直接可以分为显式Intent和隐式Intent。</p>\n<p>以下，像之前一样构建一个<code>SecondActivity</code>，用于响应实验。</p>\n<h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><p><strong>直接指定响应对象</strong>，如下（点击按钮即可跳转到第二个页面）</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;\t<span class=\"hljs-comment\">// 由上下文响应目标活动</span><br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;\t<span class=\"hljs-comment\">// 启动传入的Intent参数</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><code>Intent(Context packageContext, Class &lt;?&gt; cls)</code>，第一个参数 Context 要求提供一个启动活动的上下文，第二个参数 Class 则是指定想要启动的目标活动</p>\n<p>Activity 类中提供了一个 startActivity() 方法，这个方法是专门用于启动活动的，它接收一个 Intent 参数，这里我们将构建好的 Intent 传入 startActivity() 方法就可以启动目标活动了。</p>\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>隐式Intent<strong>并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动</strong>（即能够相应该隐式intent的活动）去启动</p>\n<p>通过在<code>&lt;activity&gt;</code>标签下配置<code>&lt; intent-filter &gt;</code>的内容，可以指定当前活动能够响应的 action 和 category。同时，<strong>只有 <code>&lt;action&gt;</code> 和 <code>&lt;category&gt;</code> 中的内容同时能够匹配上 Intent 中指定的 action 和 category 时，这个活动才能响应该 Intent</strong>。</p>\n<p>如下，在<strong>AndroidManifest.xml</strong>文件中配置SecondActivity的信息如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".SecondActivity\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.activitytest.ACTION_START\"</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.activitytest.MY_CATEGORY\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activity</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span></span><br></code></pre></td></tr></table></figure>\n\n<p>在FirstActivity中使用隐式Intent，完成点击按钮跳转到第二个界面</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(<span class=\"hljs-string\">\"com.example.activitytest.ACTION_START\"</span>)</span>;<br>        intent.add<span class=\"hljs-constructor\">Category(<span class=\"hljs-string\">\"com.example.activitytest.MY_CATEGORY\"</span>)</span>;<br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>用隐式 Intent，我们<strong>不仅可以启动自己程序内的活动，还可以启动其他程序的活动（如调用浏览器）</strong>，这使得 Android 多个应用程序之间的功能共享成为了可能</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(Intent.ACTION_VIEW)</span>;<br>        intent.set<span class=\"hljs-constructor\">Data(Uri.<span class=\"hljs-params\">parse</span>(<span class=\"hljs-string\">\"http://www.baidu.com\"</span>)</span>);\t<span class=\"hljs-comment\">// 将Uri对象传递进去，可以使用浏览器打开</span><br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"Intent向下一个活动传递数据\"><a href=\"#Intent向下一个活动传递数据\" class=\"headerlink\" title=\"Intent向下一个活动传递数据\"></a>Intent向下一个活动传递数据</h3><p>Intent 中提供了一系列 <strong>putExtra()</strong> 方法的重载，可以把我们想要传递的数据暂存在 Intent 中，启动了另一个活动后，只需要把这些数据再从 Intent 中取出就可以了</p>\n<p>putExtra() 方法接收两个参数，第一个参数是键，用于后面从 Intent 中取值，第二个参数才是真正要传递的数据。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在FirstActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String data = <span class=\"hljs-string\">\"Hello, Second Activity\"</span>;<br>Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;<br>intent.put<span class=\"hljs-constructor\">Extra(<span class=\"hljs-string\">\"extra_data\"</span>, <span class=\"hljs-params\">data</span>)</span>;\t<span class=\"hljs-comment\">// 将data传入，同时键值为extra_dat</span><br>start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在SecondActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">second_layout</span>)</span>;<br>    Intent intent = get<span class=\"hljs-constructor\">Intent()</span>;<br>    String data = intent.get<span class=\"hljs-constructor\">StringExtra(<span class=\"hljs-string\">\"extra_data\"</span>)</span>;\t<span class=\"hljs-comment\">// 通过键值获取信息</span><br>    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">data</span>, Toast.LENGTH_SHORT)</span>.show<span class=\"hljs-literal\">()</span>;\t<span class=\"hljs-comment\">// 显示信息</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8.png\" style=\"zoom: 67%;\" />\n\n<h3 id=\"Intent返回数据给上一个活动\"><a href=\"#Intent返回数据给上一个活动\" class=\"headerlink\" title=\"Intent返回数据给上一个活动\"></a>Intent返回数据给上一个活动</h3><p><strong>1、 使用startActivityForResult() 方法启动活动，在活动销毁后即可将数据传递回来</strong></p>\n<blockquote>\n<p>startActivityForResult() 方法接收两个参数，第一个参数还是 Intent，第二个参数是<strong>请求码（requestCode）</strong>，用于在之后的回调中判断数据的来源。</p>\n</blockquote>\n<p><strong>2、在第二个活动中使用setResult() 方法将带有数据的Intent传递回去</strong></p>\n<blockquote>\n<p>setResult() 方法接收两个参数，第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 或 RESULT_CANCELED 这两个值，第二个参数则把带有数据的 Intent 传递回去</p>\n</blockquote>\n<p><strong>3、使用startActivityForResult() 方法启动活动在活动销毁后会回调onActivityResult() 方法</strong>，因此在第一个活动中重写该方法。</p>\n<blockquote>\n<p> onActivityResult() 方法带有三个参数，第一个参数 requestCode ，即我们在启动活动时传入的请求码。第二个参数 resultCode ，即我们在返回数据时传入的处理结果。第三个参数 data，即携带着返回数据的 Intent</p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在FirstActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">first_layout</span>)</span>;<br>    Button button1 = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button_1</span>)</span>;<br>    button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;<br>            start<span class=\"hljs-constructor\">ActivityForResult(<span class=\"hljs-params\">intent</span>, 1)</span>;\t<span class=\"hljs-comment\">// 请求码为1</span><br>        &#125;<br>    &#125;);<br>&#125;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">ActivityResult(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">requestCode</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">resultCode</span>, @Nullable Intent <span class=\"hljs-params\">data</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">ActivityResult(<span class=\"hljs-params\">requestCode</span>, <span class=\"hljs-params\">resultCode</span>, <span class=\"hljs-params\">data</span>)</span>;<br>    <span class=\"hljs-keyword\">if</span> (requestCode<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (resultCode<span class=\"hljs-operator\"> == </span>RESULT_OK) &#123;<br>            <span class=\"hljs-keyword\">assert</span> data != null;<br>            String returnData = data.get<span class=\"hljs-constructor\">StringExtra(<span class=\"hljs-string\">\"data_return\"</span>)</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(FirstActivity.<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">returnData</span>, Toast.LENGTH_SHORT)</span>.show<span class=\"hljs-literal\">()</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在SecondActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">second_layout</span>)</span>;<br>    Button button2 = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button_2</span>)</span>;<br>    button2.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent()</span>;<br>            intent.put<span class=\"hljs-constructor\">Extra(<span class=\"hljs-string\">\"data_return\"</span>, <span class=\"hljs-string\">\"Return message from SecondActivity\"</span>)</span>;<br>            set<span class=\"hljs-constructor\">Result(RESULT_OK, <span class=\"hljs-params\">intent</span>)</span>;<br>            finish<span class=\"hljs-literal\">()</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BB%8E%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"活动的生命周期\"><a href=\"#活动的生命周期\" class=\"headerlink\" title=\"活动的生命周期\"></a>活动的生命周期</h2><h3 id=\"活动状态\"><a href=\"#活动状态\" class=\"headerlink\" title=\"活动状态\"></a>活动状态</h3><p>每个活动在其生命周期最多可能有4种状态</p>\n<h4 id=\"运行状态\"><a href=\"#运行状态\" class=\"headerlink\" title=\"运行状态\"></a>运行状态</h4><p>一个活动位于返回栈的<strong>栈顶</strong>时，这时活动就处于运行状态</p>\n<h4 id=\"暂停状态\"><a href=\"#暂停状态\" class=\"headerlink\" title=\"暂停状态\"></a>暂停状态</h4><p>当一个活动<strong>不再处于栈顶位置，但仍然可见</strong>时，这时活动就进入了暂停状态。</p>\n<h4 id=\"停止状态\"><a href=\"#停止状态\" class=\"headerlink\" title=\"停止状态\"></a>停止状态</h4><p>当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。（当其他地方需要内存时，处于停止状态的活动有可能会被系统回收）</p>\n<h4 id=\"销毁状态\"><a href=\"#销毁状态\" class=\"headerlink\" title=\"销毁状态\"></a>销毁状态</h4><p>当一个活动<strong>从返回栈中移除后</strong>就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。</p>\n<h3 id=\"活动的生存期\"><a href=\"#活动的生存期\" class=\"headerlink\" title=\"活动的生存期\"></a>活动的生存期</h3><p>Activity 类中定义了 7 个回调方法，覆盖了活动生命周期的每一个环节</p>\n<h4 id=\"onCreate\"><a href=\"#onCreate\" class=\"headerlink\" title=\"onCreate()\"></a>onCreate()</h4><blockquote>\n<p>在活动第一次被创建的时候调用</p>\n<p>在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等</p>\n</blockquote>\n<h4 id=\"onStart\"><a href=\"#onStart\" class=\"headerlink\" title=\"onStart()\"></a>onStart()</h4><blockquote>\n<p>活动由不可见变为可见的时候调用</p>\n</blockquote>\n<h4 id=\"onResume\"><a href=\"#onResume\" class=\"headerlink\" title=\"onResume()\"></a>onResume()</h4><blockquote>\n<p>活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态</p>\n</blockquote>\n<h4 id=\"onPause\"><a href=\"#onPause\" class=\"headerlink\" title=\"onPause()\"></a>onPause()</h4><blockquote>\n<p>这个方法在系统准备去启动或者恢复另一个活动的时候调用</p>\n</blockquote>\n<h4 id=\"onStop\"><a href=\"#onStop\" class=\"headerlink\" title=\"onStop()\"></a>onStop()</h4><blockquote>\n<p>这个方法在活动完全不可见的时候调用</p>\n</blockquote>\n<h4 id=\"onDestroy\"><a href=\"#onDestroy\" class=\"headerlink\" title=\"onDestroy()\"></a>onDestroy()</h4><blockquote>\n<p>这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</p>\n</blockquote>\n<h4 id=\"onRestart\"><a href=\"#onRestart\" class=\"headerlink\" title=\"onRestart()\"></a>onRestart()</h4><blockquote>\n<p>这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</p>\n</blockquote>\n<h2 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h2><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><blockquote>\n<p>活动默认的启动模式，每次启动都会创建该活动的一个新的实例</p>\n</blockquote>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><blockquote>\n<p>启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例</p>\n<p><strong>不重复创建栈顶活动</strong></p>\n</blockquote>\n<p>在<code>AndroidManifest.xml</code>中<code>&lt;activity&gt;</code>标签内设置</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>launchMode=<span class=\"hljs-string\">\"singleTop\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h3><blockquote>\n<p>让任意活动在整个应用程序的上下文中<strong>只存在一个实例</strong></p>\n<p><code>android:launchMode=&quot;singleTask&quot;</code></p>\n</blockquote>\n<h3 id=\"singleInstance\"><a href=\"#singleInstance\" class=\"headerlink\" title=\"singleInstance\"></a>singleInstance</h3><blockquote>\n<p>这种模式下会有一个<strong>单独的返回栈</strong>来管理这个活动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，解决了<strong>共享活动实例</strong>的问题</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"从0构建一个活动\"><a href=\"#从0构建一个活动\" class=\"headerlink\" title=\"从0构建一个活动\"></a>从0构建一个活动</h2><h3 id=\"构建活动及布局\"><a href=\"#构建活动及布局\" class=\"headerlink\" title=\"构建活动及布局\"></a>构建活动及布局</h3><ol>\n<li>在创建项目时选择<strong>“Add no Activity”</strong></li>\n<li>在项目架构中的app-&gt;src-&gt;main下的包中右击，选择新建一个Activity，命名为FirstActivity</li>\n<li>在布局文件夹layout中新建一个布局，命名为first_layout，并修改加上一个按钮，代码如下</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;Button<br>    android:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/button_1\"</span>\t&lt;!-- 定义id用于代码中使用 --&gt;<br>    android:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    android:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"wrap_content\"</span><br>    android:<span class=\"hljs-attribute\">text</span>=<span class=\"hljs-string\">\"Button 1\"</span><br>    /&gt;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>在<strong>AndroidManifest.xml</strong>文件中注册活动，使用<code>&lt;activity&gt;</code>标签注册活动（AS已经自动注册好了），并放在<code>&lt;application&gt;</code>标签内，之后</li>\n</ol>\n<h3 id=\"使用Toast完成消息提醒\"><a href=\"#使用Toast完成消息提醒\" class=\"headerlink\" title=\"使用Toast完成消息提醒\"></a>使用Toast完成消息提醒</h3><p><strong>Android中的Toast类似于其他GUI中的messagebox，“弹出”一条消息</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>&#123;<br>    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.first_layout);<br>    Button button1 = (Button) findViewById(R.id.button_1);\t<span class=\"hljs-comment\">// 获取该活动中的按钮</span><br>    button1.setOnClickListener(<span class=\"hljs-keyword\">new</span> View.OnClickListener() &#123;\t<span class=\"hljs-comment\">// 为按钮注册一个监听器</span><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onClick</span><span class=\"hljs-params\">(View view)</span> </span>&#123;\t<span class=\"hljs-comment\">// 点击按钮，即执行监听器下的onClick方法</span><br>            Toast.makeText(FirstActivity.<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"You clicked Button 1\"</span>,<br>                    Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其中makeText()包含三个参数，第一个是要求的上下文，第二个是显示的文本内容，第三个是显示的时长</p>\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/toast-demo.png\" style=\"zoom: 50%;\" />\n\n<h3 id=\"使用menu\"><a href=\"#使用menu\" class=\"headerlink\" title=\"使用menu\"></a>使用menu</h3><ol>\n<li>在res目录下创建一个menu文件，之后创建一个menu资源文件。</li>\n<li>之后使用<code>&lt;item&gt;</code>标签创建一个菜单项，如下</li>\n</ol>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs django\"><span class=\"xml\"><span class=\"hljs-meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">menu</span> <span class=\"hljs-attr\">xmlns:android</span>=<span class=\"hljs-string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">item</span><br>        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/add_item\"</span>\t&lt;!<span class=\"hljs-attr\">--</span> 创建唯一标识符 <span class=\"hljs-attr\">--</span>&gt;</span><br>        android:title=\"Add\" /&gt;\t<span class=\"hljs-comment\">&lt;!-- 创建菜单项的名称 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">item</span><br>        <span class=\"hljs-attr\">android:id</span>=<span class=\"hljs-string\">\"@+id/remove_item\"</span><br>        <span class=\"hljs-attr\">android:title</span>=<span class=\"hljs-string\">\"Remove\"</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">menu</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>之后在相应活动中重写<code>onCreateOptionsMenu</code>函数，用以显示菜单，如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">onCreateOptionsMenu</span><span class=\"hljs-params\">(Menu menu)</span> </span>&#123;<br>    getMenuInflater().inflate(R.menu.main, menu);\t<span class=\"hljs-comment\">// </span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">true</span>;\t<span class=\"hljs-comment\">// 返回true表示允许菜单显示出来</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>定义菜单响应事件，重写<code>onOptionsItemSelected()</code>方法</li>\n</ol>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@Override</span><br>public boolean onOptionsItemSelected(<span class=\"hljs-variable\">@NonNull</span> MenuItem item) &#123;<br>    <span class=\"hljs-selector-tag\">switch</span> (item.getItemId()) &#123;<br>        <span class=\"hljs-selector-tag\">case</span> <span class=\"hljs-selector-tag\">R</span><span class=\"hljs-selector-class\">.id</span><span class=\"hljs-selector-class\">.add_item</span>:<br>            <span class=\"hljs-selector-tag\">Toast</span><span class=\"hljs-selector-class\">.makeText</span>(this, <span class=\"hljs-string\">\"You clicked Add\"</span>, Toast.LENGTH_SHORT)<span class=\"hljs-selector-class\">.show</span>();<br>            <span class=\"hljs-selector-tag\">break</span>;<br>        <span class=\"hljs-selector-tag\">case</span> <span class=\"hljs-selector-tag\">R</span><span class=\"hljs-selector-class\">.id</span><span class=\"hljs-selector-class\">.remove_item</span>:<br>            <span class=\"hljs-selector-tag\">Toast</span><span class=\"hljs-selector-class\">.makeText</span>(this, <span class=\"hljs-string\">\"You clicked remove\"</span>, Toast.LENGTH_SHORT)<span class=\"hljs-selector-class\">.show</span>();<br>            <span class=\"hljs-selector-tag\">break</span>;<br>        <span class=\"hljs-selector-tag\">default</span>:<br>    &#125;<br>    <span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/menu-demo.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"使用finish-销毁一个活动，类似于返回键\"><a href=\"#使用finish-销毁一个活动，类似于返回键\" class=\"headerlink\" title=\"使用finish()销毁一个活动，类似于返回键\"></a>使用finish()销毁一个活动，类似于返回键</h3><p>使用Activity类提供的<strong>finish()</strong>方法，取得的效果跟按下Back一致</p>\n<h2 id=\"使用Intent构建不同活动间的联系\"><a href=\"#使用Intent构建不同活动间的联系\" class=\"headerlink\" title=\"使用Intent构建不同活动间的联系\"></a>使用Intent构建不同活动间的联系</h2><p>intent是Android程序中<strong>各组件之间进行交互的一种重要方式</strong>，一般可用于启动活动、启动服务以及发送广播。根据指定响应对象是否直接可以分为显式Intent和隐式Intent。</p>\n<p>以下，像之前一样构建一个<code>SecondActivity</code>，用于响应实验。</p>\n<h3 id=\"显式Intent\"><a href=\"#显式Intent\" class=\"headerlink\" title=\"显式Intent\"></a>显式Intent</h3><p><strong>直接指定响应对象</strong>，如下（点击按钮即可跳转到第二个页面）</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;\t<span class=\"hljs-comment\">// 由上下文响应目标活动</span><br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;\t<span class=\"hljs-comment\">// 启动传入的Intent参数</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><code>Intent(Context packageContext, Class &lt;?&gt; cls)</code>，第一个参数 Context 要求提供一个启动活动的上下文，第二个参数 Class 则是指定想要启动的目标活动</p>\n<p>Activity 类中提供了一个 startActivity() 方法，这个方法是专门用于启动活动的，它接收一个 Intent 参数，这里我们将构建好的 Intent 传入 startActivity() 方法就可以启动目标活动了。</p>\n<h3 id=\"隐式Intent\"><a href=\"#隐式Intent\" class=\"headerlink\" title=\"隐式Intent\"></a>隐式Intent</h3><p>隐式Intent<strong>并不明确指出我们想要启动哪一个活动，而是指定了一系列更为抽象的 action 和 category 等信息，然后交由系统去分析这个 Intent，并帮我们找出合适的活动</strong>（即能够相应该隐式intent的活动）去启动</p>\n<p>通过在<code>&lt;activity&gt;</code>标签下配置<code>&lt; intent-filter &gt;</code>的内容，可以指定当前活动能够响应的 action 和 category。同时，<strong>只有 <code>&lt;action&gt;</code> 和 <code>&lt;category&gt;</code> 中的内容同时能够匹配上 Intent 中指定的 action 和 category 时，这个活动才能响应该 Intent</strong>。</p>\n<p>如下，在<strong>AndroidManifest.xml</strong>文件中配置SecondActivity的信息如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\".SecondActivity\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">intent-filter</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">action</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.activitytest.ACTION_START\"</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"android.intent.category.DEFAULT\"</span> /&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">category</span> <span class=\"hljs-attr\">android:name</span>=<span class=\"hljs-string\">\"com.example.activitytest.MY_CATEGORY\"</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">intent-filter</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">activity</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">activity</span></span><br></code></pre></td></tr></table></figure>\n\n<p>在FirstActivity中使用隐式Intent，完成点击按钮跳转到第二个界面</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(<span class=\"hljs-string\">\"com.example.activitytest.ACTION_START\"</span>)</span>;<br>        intent.add<span class=\"hljs-constructor\">Category(<span class=\"hljs-string\">\"com.example.activitytest.MY_CATEGORY\"</span>)</span>;<br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>用隐式 Intent，我们<strong>不仅可以启动自己程序内的活动，还可以启动其他程序的活动（如调用浏览器）</strong>，这使得 Android 多个应用程序之间的功能共享成为了可能</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>    @Override<br>    public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>        Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(Intent.ACTION_VIEW)</span>;<br>        intent.set<span class=\"hljs-constructor\">Data(Uri.<span class=\"hljs-params\">parse</span>(<span class=\"hljs-string\">\"http://www.baidu.com\"</span>)</span>);\t<span class=\"hljs-comment\">// 将Uri对象传递进去，可以使用浏览器打开</span><br>        start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E5%99%A8.png\" style=\"zoom:50%;\" />\n\n\n\n<h3 id=\"Intent向下一个活动传递数据\"><a href=\"#Intent向下一个活动传递数据\" class=\"headerlink\" title=\"Intent向下一个活动传递数据\"></a>Intent向下一个活动传递数据</h3><p>Intent 中提供了一系列 <strong>putExtra()</strong> 方法的重载，可以把我们想要传递的数据暂存在 Intent 中，启动了另一个活动后，只需要把这些数据再从 Intent 中取出就可以了</p>\n<p>putExtra() 方法接收两个参数，第一个参数是键，用于后面从 Intent 中取值，第二个参数才是真正要传递的数据。</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在FirstActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String data = <span class=\"hljs-string\">\"Hello, Second Activity\"</span>;<br>Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;<br>intent.put<span class=\"hljs-constructor\">Extra(<span class=\"hljs-string\">\"extra_data\"</span>, <span class=\"hljs-params\">data</span>)</span>;\t<span class=\"hljs-comment\">// 将data传入，同时键值为extra_dat</span><br>start<span class=\"hljs-constructor\">Activity(<span class=\"hljs-params\">intent</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>在SecondActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">second_layout</span>)</span>;<br>    Intent intent = get<span class=\"hljs-constructor\">Intent()</span>;<br>    String data = intent.get<span class=\"hljs-constructor\">StringExtra(<span class=\"hljs-string\">\"extra_data\"</span>)</span>;\t<span class=\"hljs-comment\">// 通过键值获取信息</span><br>    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">data</span>, Toast.LENGTH_SHORT)</span>.show<span class=\"hljs-literal\">()</span>;\t<span class=\"hljs-comment\">// 显示信息</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BC%A0%E9%80%92%E6%B6%88%E6%81%AF%E7%BB%99%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8.png\" style=\"zoom: 67%;\" />\n\n<h3 id=\"Intent返回数据给上一个活动\"><a href=\"#Intent返回数据给上一个活动\" class=\"headerlink\" title=\"Intent返回数据给上一个活动\"></a>Intent返回数据给上一个活动</h3><p><strong>1、 使用startActivityForResult() 方法启动活动，在活动销毁后即可将数据传递回来</strong></p>\n<blockquote>\n<p>startActivityForResult() 方法接收两个参数，第一个参数还是 Intent，第二个参数是<strong>请求码（requestCode）</strong>，用于在之后的回调中判断数据的来源。</p>\n</blockquote>\n<p><strong>2、在第二个活动中使用setResult() 方法将带有数据的Intent传递回去</strong></p>\n<blockquote>\n<p>setResult() 方法接收两个参数，第一个参数用于向上一个活动返回处理结果，一般只使用 RESULT_OK 或 RESULT_CANCELED 这两个值，第二个参数则把带有数据的 Intent 传递回去</p>\n</blockquote>\n<p><strong>3、使用startActivityForResult() 方法启动活动在活动销毁后会回调onActivityResult() 方法</strong>，因此在第一个活动中重写该方法。</p>\n<blockquote>\n<p> onActivityResult() 方法带有三个参数，第一个参数 requestCode ，即我们在启动活动时传入的请求码。第二个参数 resultCode ，即我们在返回数据时传入的处理结果。第三个参数 data，即携带着返回数据的 Intent</p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在FirstActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">first_layout</span>)</span>;<br>    Button button1 = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button_1</span>)</span>;<br>    button1.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent(FirstActivity.<span class=\"hljs-params\">this</span>, SecondActivity.<span class=\"hljs-params\">class</span>)</span>;<br>            start<span class=\"hljs-constructor\">ActivityForResult(<span class=\"hljs-params\">intent</span>, 1)</span>;\t<span class=\"hljs-comment\">// 请求码为1</span><br>        &#125;<br>    &#125;);<br>&#125;<br><br>@Override<br>protected void on<span class=\"hljs-constructor\">ActivityResult(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">requestCode</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">resultCode</span>, @Nullable Intent <span class=\"hljs-params\">data</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">ActivityResult(<span class=\"hljs-params\">requestCode</span>, <span class=\"hljs-params\">resultCode</span>, <span class=\"hljs-params\">data</span>)</span>;<br>    <span class=\"hljs-keyword\">if</span> (requestCode<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>) &#123;<br>        <span class=\"hljs-keyword\">if</span> (resultCode<span class=\"hljs-operator\"> == </span>RESULT_OK) &#123;<br>            <span class=\"hljs-keyword\">assert</span> data != null;<br>            String returnData = data.get<span class=\"hljs-constructor\">StringExtra(<span class=\"hljs-string\">\"data_return\"</span>)</span>;<br>            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Toast</span>.</span></span>make<span class=\"hljs-constructor\">Text(FirstActivity.<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">returnData</span>, Toast.LENGTH_SHORT)</span>.show<span class=\"hljs-literal\">()</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在SecondActivity中相应位置填入以下代码</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@Override<br>protected void on<span class=\"hljs-constructor\">Create(Bundle <span class=\"hljs-params\">savedInstanceState</span>)</span> &#123;<br>    super.on<span class=\"hljs-constructor\">Create(<span class=\"hljs-params\">savedInstanceState</span>)</span>;<br>    set<span class=\"hljs-constructor\">ContentView(R.<span class=\"hljs-params\">layout</span>.<span class=\"hljs-params\">second_layout</span>)</span>;<br>    Button button2 = (Button) find<span class=\"hljs-constructor\">ViewById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">button_2</span>)</span>;<br>    button2.set<span class=\"hljs-constructor\">OnClickListener(<span class=\"hljs-params\">new</span> View.OnClickListener()</span> &#123;<br>        @Override<br>        public void on<span class=\"hljs-constructor\">Click(View <span class=\"hljs-params\">view</span>)</span> &#123;<br>            Intent intent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Intent()</span>;<br>            intent.put<span class=\"hljs-constructor\">Extra(<span class=\"hljs-string\">\"data_return\"</span>, <span class=\"hljs-string\">\"Return message from SecondActivity\"</span>)</span>;<br>            set<span class=\"hljs-constructor\">Result(RESULT_OK, <span class=\"hljs-params\">intent</span>)</span>;<br>            finish<span class=\"hljs-literal\">()</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<img src=\"http://cdn.ziyedy.top/Android%E5%BC%80%E5%8F%91%E4%BA%8C%EF%BC%9A%E6%B4%BB%E5%8A%A8%EF%BC%88Activity%EF%BC%89/%E4%BB%8E%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E8%BF%94%E5%9B%9E%E6%B6%88%E6%81%AF.png\" style=\"zoom:67%;\" />\n\n\n\n<h2 id=\"活动的生命周期\"><a href=\"#活动的生命周期\" class=\"headerlink\" title=\"活动的生命周期\"></a>活动的生命周期</h2><h3 id=\"活动状态\"><a href=\"#活动状态\" class=\"headerlink\" title=\"活动状态\"></a>活动状态</h3><p>每个活动在其生命周期最多可能有4种状态</p>\n<h4 id=\"运行状态\"><a href=\"#运行状态\" class=\"headerlink\" title=\"运行状态\"></a>运行状态</h4><p>一个活动位于返回栈的<strong>栈顶</strong>时，这时活动就处于运行状态</p>\n<h4 id=\"暂停状态\"><a href=\"#暂停状态\" class=\"headerlink\" title=\"暂停状态\"></a>暂停状态</h4><p>当一个活动<strong>不再处于栈顶位置，但仍然可见</strong>时，这时活动就进入了暂停状态。</p>\n<h4 id=\"停止状态\"><a href=\"#停止状态\" class=\"headerlink\" title=\"停止状态\"></a>停止状态</h4><p>当一个活动不再处于栈顶位置，并且完全不可见的时候，就进入了停止状态。（当其他地方需要内存时，处于停止状态的活动有可能会被系统回收）</p>\n<h4 id=\"销毁状态\"><a href=\"#销毁状态\" class=\"headerlink\" title=\"销毁状态\"></a>销毁状态</h4><p>当一个活动<strong>从返回栈中移除后</strong>就变成了销毁状态。系统会最倾向于回收处于这种状态的活动，从而保证手机的内存充足。</p>\n<h3 id=\"活动的生存期\"><a href=\"#活动的生存期\" class=\"headerlink\" title=\"活动的生存期\"></a>活动的生存期</h3><p>Activity 类中定义了 7 个回调方法，覆盖了活动生命周期的每一个环节</p>\n<h4 id=\"onCreate\"><a href=\"#onCreate\" class=\"headerlink\" title=\"onCreate()\"></a>onCreate()</h4><blockquote>\n<p>在活动第一次被创建的时候调用</p>\n<p>在这个方法中完成活动的初始化操作，比如说加载布局、绑定事件等</p>\n</blockquote>\n<h4 id=\"onStart\"><a href=\"#onStart\" class=\"headerlink\" title=\"onStart()\"></a>onStart()</h4><blockquote>\n<p>活动由不可见变为可见的时候调用</p>\n</blockquote>\n<h4 id=\"onResume\"><a href=\"#onResume\" class=\"headerlink\" title=\"onResume()\"></a>onResume()</h4><blockquote>\n<p>活动准备好和用户进行交互的时候调用。此时的活动一定位于返回栈的栈顶，并且处于运行状态</p>\n</blockquote>\n<h4 id=\"onPause\"><a href=\"#onPause\" class=\"headerlink\" title=\"onPause()\"></a>onPause()</h4><blockquote>\n<p>这个方法在系统准备去启动或者恢复另一个活动的时候调用</p>\n</blockquote>\n<h4 id=\"onStop\"><a href=\"#onStop\" class=\"headerlink\" title=\"onStop()\"></a>onStop()</h4><blockquote>\n<p>这个方法在活动完全不可见的时候调用</p>\n</blockquote>\n<h4 id=\"onDestroy\"><a href=\"#onDestroy\" class=\"headerlink\" title=\"onDestroy()\"></a>onDestroy()</h4><blockquote>\n<p>这个方法在活动被销毁之前调用，之后活动的状态将变为销毁状态。</p>\n</blockquote>\n<h4 id=\"onRestart\"><a href=\"#onRestart\" class=\"headerlink\" title=\"onRestart()\"></a>onRestart()</h4><blockquote>\n<p>这个方法在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。</p>\n</blockquote>\n<h2 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h2><h3 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h3><blockquote>\n<p>活动默认的启动模式，每次启动都会创建该活动的一个新的实例</p>\n</blockquote>\n<h3 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h3><blockquote>\n<p>启动活动时如果发现返回栈的栈顶已经是该活动，则认为可以直接使用它，不会再创建新的活动实例</p>\n<p><strong>不重复创建栈顶活动</strong></p>\n</blockquote>\n<p>在<code>AndroidManifest.xml</code>中<code>&lt;activity&gt;</code>标签内设置</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">android:</span>launchMode=<span class=\"hljs-string\">\"singleTop\"</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h3><blockquote>\n<p>让任意活动在整个应用程序的上下文中<strong>只存在一个实例</strong></p>\n<p><code>android:launchMode=&quot;singleTask&quot;</code></p>\n</blockquote>\n<h3 id=\"singleInstance\"><a href=\"#singleInstance\" class=\"headerlink\" title=\"singleInstance\"></a>singleInstance</h3><blockquote>\n<p>这种模式下会有一个<strong>单独的返回栈</strong>来管理这个活动，不管是哪个应用程序来访问这个活动，都共用的同一个返回栈，解决了<strong>共享活动实例</strong>的问题</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>第一行代码——Android（郭霖）</p>\n"},{"title":"Android开发四：碎片（Fragment）","date":"2020-09-01T06:48:59.000Z","fileName":"Android4-fragment","_content":"\n## 碎片的基本使用\n\n> 碎片是一种可嵌入在活动当中的UI片段，能让程序更加合理充分的利用大屏幕空间（常应用在平板上）\n\n### 基本使用\n\n1. 新建一个碎片布局（xml文件）\n2. 新建一个`LeftFragment`类，并让它继承自 `Fragment`，并重写`onCreateView()`方法（将刚刚新建的布局文件加载进来）\n\n```\npublic class RightFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.right_fragment, container, false);\n        return view;\n    }\n}\n```\n\n3. 使用`<fragment>`标签在*主布局*中添加碎片，通过 `android:name`属性来显式指明要添加的碎片类名\n\n```\n<fragment\n    android:id=\"@+id/right_fragment\"\n    android:name=\"com.example.fragmenttest.RightFragment\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"match_parent\"\n    android:layout_weight=\"1\" />\n```\n\n\n\n### 动态添加碎片\n\n1. 创建待添加的碎片实例\n2. 获取 `FragmentManager` ，在活动中可以直接通过调用 `getSupportFragmentManager()` 方法得到\n3. 通过调用`beginTransaction()`方法开启一个事务\n4. 向容器内添加或替换碎片，一般使用`replace()`方法实现，需要传入*容器*的 id 和待添加的碎片实例\n5. 调用`commit()`方法来提交事务\n\n*实现动态添加碎片如下：*\n\n```\nprivate void replaceFragment(Fragment fragment) {\n    FragmentManager fragmentManager = getSupportFragmentManager();\n    FragmentTransaction transaction = fragmentManager.beginTransaction();\n    transaction.replace(R.id.right_layout, fragment);\n    // transaction.addToBackStack(null);\t// 将该事务添加到返回栈\n    transaction.commit();\n}\n```\n\n\n\n### 碎片与活动之间的通信\n\n#### 在碎片中获取活动\n\n使用`getActivity()`方法来得到与当前碎片相关联的活动实例\n\n```\nMainActivity activity = (MainActivity) getActivity();\n```\n\n#### 在活动中获取碎片\n\n```\nRightFragment rightFragment = (RightFragment) getSupportFragmentManager().findFragmentById(R.id.right_fragment);\n```\n\n\n\n## 动态加载布局\n\n> 使程序根据设备的分辨率或屏幕大小在运行时来决定加载哪个布局\n\n### 限定符（Qualifiers）\n\n可以简单理解为在资源文件夹名字之后添加的关键字\n\n#### 常用限定符\n\n| 屏幕特征 | 限定符 | 描述             |\n| -------- | ------ | ---------------- |\n| 大小     | small  | 提供给小屏幕设备 |\n|          | large  | 提供给大屏幕设备 |\n| 分辨率   | ldpi   | 120dpi以下的设备 |\n|          | mdpi   | 120-160dpi的设备 |\n|          | hdpi   | 160-240dpi的设别 |\n| 方向     | land   | 横屏设备         |\n|          | port   | 竖屏设备         |\n\n#### 最小宽度限定符（Smallest-width Qualifier）\n\n**以 dp 为单位**，如新建`layout-sw 600dp`文件夹，当程序运行在屏幕宽度大于 600dp 的设备上时，则会加载 `layout-sw 600dp/activity_main`布局\n\n#### 示例\n\n在 res 目录下新建`layout-large`文件夹，并新建布局`activity_main.xml`。之后在两个`activity_main.xml`中分别写入布局信息\n\n* 当使用平板运行时，会使用`layout-large`中的布局信息\n* 当使用手机运行时，会使用`layout`中的布局信息\n\n\n\n\n\n\n\n","source":"_posts/编程相关/Android/Android开发四：碎片（Fragment）.md","raw":"---\ntitle: Android开发四：碎片（Fragment）\ndate: 2020-09-01 14:48:59\ntags:\n\t- Android\ncategories:\n\t- 编程相关\n\t- Android\nfileName: Android4-fragment\n---\n\n## 碎片的基本使用\n\n> 碎片是一种可嵌入在活动当中的UI片段，能让程序更加合理充分的利用大屏幕空间（常应用在平板上）\n\n### 基本使用\n\n1. 新建一个碎片布局（xml文件）\n2. 新建一个`LeftFragment`类，并让它继承自 `Fragment`，并重写`onCreateView()`方法（将刚刚新建的布局文件加载进来）\n\n```\npublic class RightFragment extends Fragment {\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.right_fragment, container, false);\n        return view;\n    }\n}\n```\n\n3. 使用`<fragment>`标签在*主布局*中添加碎片，通过 `android:name`属性来显式指明要添加的碎片类名\n\n```\n<fragment\n    android:id=\"@+id/right_fragment\"\n    android:name=\"com.example.fragmenttest.RightFragment\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"match_parent\"\n    android:layout_weight=\"1\" />\n```\n\n\n\n### 动态添加碎片\n\n1. 创建待添加的碎片实例\n2. 获取 `FragmentManager` ，在活动中可以直接通过调用 `getSupportFragmentManager()` 方法得到\n3. 通过调用`beginTransaction()`方法开启一个事务\n4. 向容器内添加或替换碎片，一般使用`replace()`方法实现，需要传入*容器*的 id 和待添加的碎片实例\n5. 调用`commit()`方法来提交事务\n\n*实现动态添加碎片如下：*\n\n```\nprivate void replaceFragment(Fragment fragment) {\n    FragmentManager fragmentManager = getSupportFragmentManager();\n    FragmentTransaction transaction = fragmentManager.beginTransaction();\n    transaction.replace(R.id.right_layout, fragment);\n    // transaction.addToBackStack(null);\t// 将该事务添加到返回栈\n    transaction.commit();\n}\n```\n\n\n\n### 碎片与活动之间的通信\n\n#### 在碎片中获取活动\n\n使用`getActivity()`方法来得到与当前碎片相关联的活动实例\n\n```\nMainActivity activity = (MainActivity) getActivity();\n```\n\n#### 在活动中获取碎片\n\n```\nRightFragment rightFragment = (RightFragment) getSupportFragmentManager().findFragmentById(R.id.right_fragment);\n```\n\n\n\n## 动态加载布局\n\n> 使程序根据设备的分辨率或屏幕大小在运行时来决定加载哪个布局\n\n### 限定符（Qualifiers）\n\n可以简单理解为在资源文件夹名字之后添加的关键字\n\n#### 常用限定符\n\n| 屏幕特征 | 限定符 | 描述             |\n| -------- | ------ | ---------------- |\n| 大小     | small  | 提供给小屏幕设备 |\n|          | large  | 提供给大屏幕设备 |\n| 分辨率   | ldpi   | 120dpi以下的设备 |\n|          | mdpi   | 120-160dpi的设备 |\n|          | hdpi   | 160-240dpi的设别 |\n| 方向     | land   | 横屏设备         |\n|          | port   | 竖屏设备         |\n\n#### 最小宽度限定符（Smallest-width Qualifier）\n\n**以 dp 为单位**，如新建`layout-sw 600dp`文件夹，当程序运行在屏幕宽度大于 600dp 的设备上时，则会加载 `layout-sw 600dp/activity_main`布局\n\n#### 示例\n\n在 res 目录下新建`layout-large`文件夹，并新建布局`activity_main.xml`。之后在两个`activity_main.xml`中分别写入布局信息\n\n* 当使用平板运行时，会使用`layout-large`中的布局信息\n* 当使用手机运行时，会使用`layout`中的布局信息\n\n\n\n\n\n\n\n","slug":"编程相关/Android/Android开发四：碎片（Fragment）","published":1,"updated":"2021-01-11T04:23:15.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobm005krwjs089g2mlx","content":"<h2 id=\"碎片的基本使用\"><a href=\"#碎片的基本使用\" class=\"headerlink\" title=\"碎片的基本使用\"></a>碎片的基本使用</h2><blockquote>\n<p>碎片是一种可嵌入在活动当中的UI片段，能让程序更加合理充分的利用大屏幕空间（常应用在平板上）</p>\n</blockquote>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ol>\n<li>新建一个碎片布局（xml文件）</li>\n<li>新建一个<code>LeftFragment</code>类，并让它继承自 <code>Fragment</code>，并重写<code>onCreateView()</code>方法（将刚刚新建的布局文件加载进来）</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RightFragment</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Fragment</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    public <span class=\"hljs-type\">View</span> onCreateView(<span class=\"hljs-type\">LayoutInflater</span> inflater, <span class=\"hljs-type\">ViewGroup</span> container,<br>                             <span class=\"hljs-type\">Bundle</span> savedInstanceState) &#123;<br>        <span class=\"hljs-type\">View</span> view = inflater.inflate(<span class=\"hljs-type\">R</span>.layout.right_fragment, container, <span class=\"hljs-literal\">false</span>);<br>        <span class=\"hljs-keyword\">return</span> view;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用<code>&lt;fragment&gt;</code>标签在<em>主布局</em>中添加碎片，通过 <code>android:name</code>属性来显式指明要添加的碎片类名</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;fragment<br>    android:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/right_fragment\"</span><br>    android:<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"com.example.fragmenttest.RightFragment\"</span><br>    android:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    android:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    android:<span class=\"hljs-attribute\">layout_weight</span>=<span class=\"hljs-string\">\"1\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态添加碎片\"><a href=\"#动态添加碎片\" class=\"headerlink\" title=\"动态添加碎片\"></a>动态添加碎片</h3><ol>\n<li>创建待添加的碎片实例</li>\n<li>获取 <code>FragmentManager</code> ，在活动中可以直接通过调用 <code>getSupportFragmentManager()</code> 方法得到</li>\n<li>通过调用<code>beginTransaction()</code>方法开启一个事务</li>\n<li>向容器内添加或替换碎片，一般使用<code>replace()</code>方法实现，需要传入<em>容器</em>的 id 和待添加的碎片实例</li>\n<li>调用<code>commit()</code>方法来提交事务</li>\n</ol>\n<p><em>实现动态添加碎片如下：</em></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void replace<span class=\"hljs-constructor\">Fragment(Fragment <span class=\"hljs-params\">fragment</span>)</span> &#123;<br>    FragmentManager fragmentManager = get<span class=\"hljs-constructor\">SupportFragmentManager()</span>;<br>    FragmentTransaction transaction = fragmentManager.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">Transaction()</span>;<br>    transaction.replace(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>id.right_layout, fragment);<br>    <span class=\"hljs-comment\">// transaction.addToBackStack(null);\t// 将该事务添加到返回栈</span><br>    transaction.commit<span class=\"hljs-literal\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"碎片与活动之间的通信\"><a href=\"#碎片与活动之间的通信\" class=\"headerlink\" title=\"碎片与活动之间的通信\"></a>碎片与活动之间的通信</h3><h4 id=\"在碎片中获取活动\"><a href=\"#在碎片中获取活动\" class=\"headerlink\" title=\"在碎片中获取活动\"></a>在碎片中获取活动</h4><p>使用<code>getActivity()</code>方法来得到与当前碎片相关联的活动实例</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">MainActivity activity = (<span class=\"hljs-name\">MainActivity</span>) getActivity()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"在活动中获取碎片\"><a href=\"#在活动中获取碎片\" class=\"headerlink\" title=\"在活动中获取碎片\"></a>在活动中获取碎片</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">RightFragment rightFragment = (RightFragment) get<span class=\"hljs-constructor\">SupportFragmentManager()</span>.find<span class=\"hljs-constructor\">FragmentById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">right_fragment</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"动态加载布局\"><a href=\"#动态加载布局\" class=\"headerlink\" title=\"动态加载布局\"></a>动态加载布局</h2><blockquote>\n<p>使程序根据设备的分辨率或屏幕大小在运行时来决定加载哪个布局</p>\n</blockquote>\n<h3 id=\"限定符（Qualifiers）\"><a href=\"#限定符（Qualifiers）\" class=\"headerlink\" title=\"限定符（Qualifiers）\"></a>限定符（Qualifiers）</h3><p>可以简单理解为在资源文件夹名字之后添加的关键字</p>\n<h4 id=\"常用限定符\"><a href=\"#常用限定符\" class=\"headerlink\" title=\"常用限定符\"></a>常用限定符</h4><table>\n<thead>\n<tr>\n<th>屏幕特征</th>\n<th>限定符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>大小</td>\n<td>small</td>\n<td>提供给小屏幕设备</td>\n</tr>\n<tr>\n<td></td>\n<td>large</td>\n<td>提供给大屏幕设备</td>\n</tr>\n<tr>\n<td>分辨率</td>\n<td>ldpi</td>\n<td>120dpi以下的设备</td>\n</tr>\n<tr>\n<td></td>\n<td>mdpi</td>\n<td>120-160dpi的设备</td>\n</tr>\n<tr>\n<td></td>\n<td>hdpi</td>\n<td>160-240dpi的设别</td>\n</tr>\n<tr>\n<td>方向</td>\n<td>land</td>\n<td>横屏设备</td>\n</tr>\n<tr>\n<td></td>\n<td>port</td>\n<td>竖屏设备</td>\n</tr>\n</tbody></table>\n<h4 id=\"最小宽度限定符（Smallest-width-Qualifier）\"><a href=\"#最小宽度限定符（Smallest-width-Qualifier）\" class=\"headerlink\" title=\"最小宽度限定符（Smallest-width Qualifier）\"></a>最小宽度限定符（Smallest-width Qualifier）</h4><p><strong>以 dp 为单位</strong>，如新建<code>layout-sw 600dp</code>文件夹，当程序运行在屏幕宽度大于 600dp 的设备上时，则会加载 <code>layout-sw 600dp/activity_main</code>布局</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在 res 目录下新建<code>layout-large</code>文件夹，并新建布局<code>activity_main.xml</code>。之后在两个<code>activity_main.xml</code>中分别写入布局信息</p>\n<ul>\n<li>当使用平板运行时，会使用<code>layout-large</code>中的布局信息</li>\n<li>当使用手机运行时，会使用<code>layout</code>中的布局信息</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"碎片的基本使用\"><a href=\"#碎片的基本使用\" class=\"headerlink\" title=\"碎片的基本使用\"></a>碎片的基本使用</h2><blockquote>\n<p>碎片是一种可嵌入在活动当中的UI片段，能让程序更加合理充分的利用大屏幕空间（常应用在平板上）</p>\n</blockquote>\n<h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ol>\n<li>新建一个碎片布局（xml文件）</li>\n<li>新建一个<code>LeftFragment</code>类，并让它继承自 <code>Fragment</code>，并重写<code>onCreateView()</code>方法（将刚刚新建的布局文件加载进来）</li>\n</ol>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RightFragment</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Fragment</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    public <span class=\"hljs-type\">View</span> onCreateView(<span class=\"hljs-type\">LayoutInflater</span> inflater, <span class=\"hljs-type\">ViewGroup</span> container,<br>                             <span class=\"hljs-type\">Bundle</span> savedInstanceState) &#123;<br>        <span class=\"hljs-type\">View</span> view = inflater.inflate(<span class=\"hljs-type\">R</span>.layout.right_fragment, container, <span class=\"hljs-literal\">false</span>);<br>        <span class=\"hljs-keyword\">return</span> view;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用<code>&lt;fragment&gt;</code>标签在<em>主布局</em>中添加碎片，通过 <code>android:name</code>属性来显式指明要添加的碎片类名</li>\n</ol>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">&lt;fragment<br>    android:<span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"@+id/right_fragment\"</span><br>    android:<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"com.example.fragmenttest.RightFragment\"</span><br>    android:<span class=\"hljs-attribute\">layout_width</span>=<span class=\"hljs-string\">\"0dp\"</span><br>    android:<span class=\"hljs-attribute\">layout_height</span>=<span class=\"hljs-string\">\"match_parent\"</span><br>    android:<span class=\"hljs-attribute\">layout_weight</span>=<span class=\"hljs-string\">\"1\"</span> /&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动态添加碎片\"><a href=\"#动态添加碎片\" class=\"headerlink\" title=\"动态添加碎片\"></a>动态添加碎片</h3><ol>\n<li>创建待添加的碎片实例</li>\n<li>获取 <code>FragmentManager</code> ，在活动中可以直接通过调用 <code>getSupportFragmentManager()</code> 方法得到</li>\n<li>通过调用<code>beginTransaction()</code>方法开启一个事务</li>\n<li>向容器内添加或替换碎片，一般使用<code>replace()</code>方法实现，需要传入<em>容器</em>的 id 和待添加的碎片实例</li>\n<li>调用<code>commit()</code>方法来提交事务</li>\n</ol>\n<p><em>实现动态添加碎片如下：</em></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">private</span> void replace<span class=\"hljs-constructor\">Fragment(Fragment <span class=\"hljs-params\">fragment</span>)</span> &#123;<br>    FragmentManager fragmentManager = get<span class=\"hljs-constructor\">SupportFragmentManager()</span>;<br>    FragmentTransaction transaction = fragmentManager.<span class=\"hljs-keyword\">begin</span><span class=\"hljs-constructor\">Transaction()</span>;<br>    transaction.replace(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">R</span>.</span></span>id.right_layout, fragment);<br>    <span class=\"hljs-comment\">// transaction.addToBackStack(null);\t// 将该事务添加到返回栈</span><br>    transaction.commit<span class=\"hljs-literal\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"碎片与活动之间的通信\"><a href=\"#碎片与活动之间的通信\" class=\"headerlink\" title=\"碎片与活动之间的通信\"></a>碎片与活动之间的通信</h3><h4 id=\"在碎片中获取活动\"><a href=\"#在碎片中获取活动\" class=\"headerlink\" title=\"在碎片中获取活动\"></a>在碎片中获取活动</h4><p>使用<code>getActivity()</code>方法来得到与当前碎片相关联的活动实例</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">MainActivity activity = (<span class=\"hljs-name\">MainActivity</span>) getActivity()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"在活动中获取碎片\"><a href=\"#在活动中获取碎片\" class=\"headerlink\" title=\"在活动中获取碎片\"></a>在活动中获取碎片</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">RightFragment rightFragment = (RightFragment) get<span class=\"hljs-constructor\">SupportFragmentManager()</span>.find<span class=\"hljs-constructor\">FragmentById(R.<span class=\"hljs-params\">id</span>.<span class=\"hljs-params\">right_fragment</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"动态加载布局\"><a href=\"#动态加载布局\" class=\"headerlink\" title=\"动态加载布局\"></a>动态加载布局</h2><blockquote>\n<p>使程序根据设备的分辨率或屏幕大小在运行时来决定加载哪个布局</p>\n</blockquote>\n<h3 id=\"限定符（Qualifiers）\"><a href=\"#限定符（Qualifiers）\" class=\"headerlink\" title=\"限定符（Qualifiers）\"></a>限定符（Qualifiers）</h3><p>可以简单理解为在资源文件夹名字之后添加的关键字</p>\n<h4 id=\"常用限定符\"><a href=\"#常用限定符\" class=\"headerlink\" title=\"常用限定符\"></a>常用限定符</h4><table>\n<thead>\n<tr>\n<th>屏幕特征</th>\n<th>限定符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>大小</td>\n<td>small</td>\n<td>提供给小屏幕设备</td>\n</tr>\n<tr>\n<td></td>\n<td>large</td>\n<td>提供给大屏幕设备</td>\n</tr>\n<tr>\n<td>分辨率</td>\n<td>ldpi</td>\n<td>120dpi以下的设备</td>\n</tr>\n<tr>\n<td></td>\n<td>mdpi</td>\n<td>120-160dpi的设备</td>\n</tr>\n<tr>\n<td></td>\n<td>hdpi</td>\n<td>160-240dpi的设别</td>\n</tr>\n<tr>\n<td>方向</td>\n<td>land</td>\n<td>横屏设备</td>\n</tr>\n<tr>\n<td></td>\n<td>port</td>\n<td>竖屏设备</td>\n</tr>\n</tbody></table>\n<h4 id=\"最小宽度限定符（Smallest-width-Qualifier）\"><a href=\"#最小宽度限定符（Smallest-width-Qualifier）\" class=\"headerlink\" title=\"最小宽度限定符（Smallest-width Qualifier）\"></a>最小宽度限定符（Smallest-width Qualifier）</h4><p><strong>以 dp 为单位</strong>，如新建<code>layout-sw 600dp</code>文件夹，当程序运行在屏幕宽度大于 600dp 的设备上时，则会加载 <code>layout-sw 600dp/activity_main</code>布局</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在 res 目录下新建<code>layout-large</code>文件夹，并新建布局<code>activity_main.xml</code>。之后在两个<code>activity_main.xml</code>中分别写入布局信息</p>\n<ul>\n<li>当使用平板运行时，会使用<code>layout-large</code>中的布局信息</li>\n<li>当使用手机运行时，会使用<code>layout</code>中的布局信息</li>\n</ul>\n"},{"title":"CSS基础","date":"2020-08-04T08:07:30.000Z","fileName":"css-basic-knowledge","_content":"\n## CSS基础\n\n### 语法\n\n```\n选择器{\n\tk:v;\n\tk:v;\n\tk:v;\n\tk:v;\n}\n\n/*\n\t注释内容\n*/\n```\n\n### 引用方式\n\n#### 1、行内样式\n\n在HTML标签里写\n\n#### 2、内部样式\n\n在页面的head里采用`<style>`写\n\n#### 3、链入外部样式：页面加载时，同时加载CSS样式\n\n```\n<link rel = \"stylesheet\" type = \"text/css\" href = \"a.css\"></link>\n```\n\n#### 4、导入式（@import）：读取完html文件后加载\n\n写在`<style>`标签中，且必须是第一句。`@import url(a.css);`\n\n### 选择器\n\n#### 1、标签选择器\n\n```\np {\n}\n```\n\n#### 2、ID选择器\n\n```\n# id1 {\n}\n```\n\n#### 3、类选择器\n\n```\n.class1 {\n}\n```\n\n#### 4、通用选择器（通配符）\n\n在初始化时常常使用该选择器将整个网页的边距等去掉\n\n```\n* {\n}\n```\n\n#### 其他组合\n\n在父子间加上一个空格，如下表示设置div元素的p子元素的样式\n\n```\n<div> <p></p> </div>\n\ndiv p {\n}\n```\n\n还有交集和并集，分别使用 . 与 , 进行分隔\n\n#### 伪类\n\n同一个标签，根据其**不同的种状态，有不同的样式**。这就叫做“伪类”。伪类用冒号来表示。\n\n比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。\n\n1、**静态伪类：**只能用于超链接的样式\n\n- `:link` 超链接点击之前\n- `:visited` 链接被访问过之后\n\n2、**动态伪类**：针对**所有标签**都适用的样式。如下：\n\n- `:hover` “悬停”：鼠标放到标签上的时候\n- `:active`\t“激活”： 鼠标点击标签，但是不松手时。\n- `:focus` 是某个标签获得焦点时的样式（比如某个输入框获得焦点）\n\n### 继承与层叠\n\n#### 继承\n\n如文字样式等能够继承，如盒子、定位等不能继承\n\n#### 层叠\n\n层叠性就是css处理冲突的能力。\n\n![](http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80/%E5%B1%82%E5%8F%A0.jpg)\n\n**以下为计算权重的方法，即优先级**，实际时分别查看以下有没有定义样式，如果有，比较优先级，如果优先级一致，**就近原则（即最后一个进行覆盖）**\n\n1、行内样式优先于内部样式，内部样式与链接样式取决于书写先后顺序（后定义覆盖新定义）\n\n2、id选择器>class选择器>标签选择器\n\n3、选择器有权值 ，使用`!important;`标记优先级最高\n\n\n\n\n\n## 盒子模型\n\n盒子模型如下，即包含外边距（margin）、边界（border）、内边距（padding）和内容的一种模型。\n\n![](http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png)\n\n### padding\n\npadding为内边距，其区域有背景颜色（与内容区域相同），background-color将填充所有border以内的区域\n\n#### 写法\n\n四个值：上、右、下、左\n\n```\npadding:30px 40px 30px 40px;\n```\n\n三个值：上、右、下、（左与右一样）\n\n上下、左右\n\n```\npadding:30px 40px;\n```\n\n\n\n### margin\n\n注意：**`<body>`标签默认有margin，为8px，因此很多情况下都需要加上以下语句清除margin。**\n\n```\n* {\n    margin: 0;\n    padding: 0;\n}\n```\n\n其余操作与padding中差不多\n\n\n\n### border\n\n边框主要有三个要素：像素（粗细）、线型、颜色\n\n```\nborder: 2px solid red;\n```\n\n","source":"_posts/编程相关/CSS/CSS基础.md","raw":"---\ntitle: CSS基础\ndate: 2020-08-04 16:07:30\ntags:\n\t- 前端样式\ncategories:\n\t- 编程相关\n\t- CSS\nfileName: css-basic-knowledge\n---\n\n## CSS基础\n\n### 语法\n\n```\n选择器{\n\tk:v;\n\tk:v;\n\tk:v;\n\tk:v;\n}\n\n/*\n\t注释内容\n*/\n```\n\n### 引用方式\n\n#### 1、行内样式\n\n在HTML标签里写\n\n#### 2、内部样式\n\n在页面的head里采用`<style>`写\n\n#### 3、链入外部样式：页面加载时，同时加载CSS样式\n\n```\n<link rel = \"stylesheet\" type = \"text/css\" href = \"a.css\"></link>\n```\n\n#### 4、导入式（@import）：读取完html文件后加载\n\n写在`<style>`标签中，且必须是第一句。`@import url(a.css);`\n\n### 选择器\n\n#### 1、标签选择器\n\n```\np {\n}\n```\n\n#### 2、ID选择器\n\n```\n# id1 {\n}\n```\n\n#### 3、类选择器\n\n```\n.class1 {\n}\n```\n\n#### 4、通用选择器（通配符）\n\n在初始化时常常使用该选择器将整个网页的边距等去掉\n\n```\n* {\n}\n```\n\n#### 其他组合\n\n在父子间加上一个空格，如下表示设置div元素的p子元素的样式\n\n```\n<div> <p></p> </div>\n\ndiv p {\n}\n```\n\n还有交集和并集，分别使用 . 与 , 进行分隔\n\n#### 伪类\n\n同一个标签，根据其**不同的种状态，有不同的样式**。这就叫做“伪类”。伪类用冒号来表示。\n\n比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。\n\n1、**静态伪类：**只能用于超链接的样式\n\n- `:link` 超链接点击之前\n- `:visited` 链接被访问过之后\n\n2、**动态伪类**：针对**所有标签**都适用的样式。如下：\n\n- `:hover` “悬停”：鼠标放到标签上的时候\n- `:active`\t“激活”： 鼠标点击标签，但是不松手时。\n- `:focus` 是某个标签获得焦点时的样式（比如某个输入框获得焦点）\n\n### 继承与层叠\n\n#### 继承\n\n如文字样式等能够继承，如盒子、定位等不能继承\n\n#### 层叠\n\n层叠性就是css处理冲突的能力。\n\n![](http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80/%E5%B1%82%E5%8F%A0.jpg)\n\n**以下为计算权重的方法，即优先级**，实际时分别查看以下有没有定义样式，如果有，比较优先级，如果优先级一致，**就近原则（即最后一个进行覆盖）**\n\n1、行内样式优先于内部样式，内部样式与链接样式取决于书写先后顺序（后定义覆盖新定义）\n\n2、id选择器>class选择器>标签选择器\n\n3、选择器有权值 ，使用`!important;`标记优先级最高\n\n\n\n\n\n## 盒子模型\n\n盒子模型如下，即包含外边距（margin）、边界（border）、内边距（padding）和内容的一种模型。\n\n![](http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png)\n\n### padding\n\npadding为内边距，其区域有背景颜色（与内容区域相同），background-color将填充所有border以内的区域\n\n#### 写法\n\n四个值：上、右、下、左\n\n```\npadding:30px 40px 30px 40px;\n```\n\n三个值：上、右、下、（左与右一样）\n\n上下、左右\n\n```\npadding:30px 40px;\n```\n\n\n\n### margin\n\n注意：**`<body>`标签默认有margin，为8px，因此很多情况下都需要加上以下语句清除margin。**\n\n```\n* {\n    margin: 0;\n    padding: 0;\n}\n```\n\n其余操作与padding中差不多\n\n\n\n### border\n\n边框主要有三个要素：像素（粗细）、线型、颜色\n\n```\nborder: 2px solid red;\n```\n\n","slug":"编程相关/CSS/CSS基础","published":1,"updated":"2021-01-11T04:24:05.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobn005mrwjs0fle6ap4","content":"<h2 id=\"CSS基础\"><a href=\"#CSS基础\" class=\"headerlink\" title=\"CSS基础\"></a>CSS基础</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">选择器&#123;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>&#125;<br><br><span class=\"hljs-comment\">/*<br>\t注释内容<br>*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><h4 id=\"1、行内样式\"><a href=\"#1、行内样式\" class=\"headerlink\" title=\"1、行内样式\"></a>1、行内样式</h4><p>在HTML标签里写</p>\n<h4 id=\"2、内部样式\"><a href=\"#2、内部样式\" class=\"headerlink\" title=\"2、内部样式\"></a>2、内部样式</h4><p>在页面的head里采用<code>&lt;style&gt;</code>写</p>\n<h4 id=\"3、链入外部样式：页面加载时，同时加载CSS样式\"><a href=\"#3、链入外部样式：页面加载时，同时加载CSS样式\" class=\"headerlink\" title=\"3、链入外部样式：页面加载时，同时加载CSS样式\"></a>3、链入外部样式：页面加载时，同时加载CSS样式</h4><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">&lt;<span class=\"hljs-keyword\">link</span> rel = <span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-string\">\"text/css\"</span> href = <span class=\"hljs-string\">\"a.css\"</span>&gt;&lt;/<span class=\"hljs-keyword\">link</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、导入式（-import）：读取完html文件后加载\"><a href=\"#4、导入式（-import）：读取完html文件后加载\" class=\"headerlink\" title=\"4、导入式（@import）：读取完html文件后加载\"></a>4、导入式（@import）：读取完html文件后加载</h4><p>写在<code>&lt;style&gt;</code>标签中，且必须是第一句。<code>@import url(a.css);</code></p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"1、标签选择器\"><a href=\"#1、标签选择器\" class=\"headerlink\" title=\"1、标签选择器\"></a>1、标签选择器</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">p</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、ID选择器\"><a href=\"#2、ID选择器\" class=\"headerlink\" title=\"2、ID选择器\"></a>2、ID选择器</h4><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># id1 &#123;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、类选择器\"><a href=\"#3、类选择器\" class=\"headerlink\" title=\"3、类选择器\"></a>3、类选择器</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.class1</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、通用选择器（通配符）\"><a href=\"#4、通用选择器（通配符）\" class=\"headerlink\" title=\"4、通用选择器（通配符）\"></a>4、通用选择器（通配符）</h4><p>在初始化时常常使用该选择器将整个网页的边距等去掉</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他组合\"><a href=\"#其他组合\" class=\"headerlink\" title=\"其他组合\"></a>其他组合</h4><p>在父子间加上一个空格，如下表示设置div元素的p子元素的样式</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span> <span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span> <span class=\"hljs-params\">&lt;/div&gt;</span><br><br>div <span class=\"hljs-class\">p </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>还有交集和并集，分别使用 . 与 , 进行分隔</p>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><p>同一个标签，根据其<strong>不同的种状态，有不同的样式</strong>。这就叫做“伪类”。伪类用冒号来表示。</p>\n<p>比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。</p>\n<p>1、<strong>静态伪类：</strong>只能用于超链接的样式</p>\n<ul>\n<li><code>:link</code> 超链接点击之前</li>\n<li><code>:visited</code> 链接被访问过之后</li>\n</ul>\n<p>2、<strong>动态伪类</strong>：针对<strong>所有标签</strong>都适用的样式。如下：</p>\n<ul>\n<li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li>\n<li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li>\n<li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li>\n</ul>\n<h3 id=\"继承与层叠\"><a href=\"#继承与层叠\" class=\"headerlink\" title=\"继承与层叠\"></a>继承与层叠</h3><h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>如文字样式等能够继承，如盒子、定位等不能继承</p>\n<h4 id=\"层叠\"><a href=\"#层叠\" class=\"headerlink\" title=\"层叠\"></a>层叠</h4><p>层叠性就是css处理冲突的能力。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80/%E5%B1%82%E5%8F%A0.jpg\" alt=\"\"></p>\n<p><strong>以下为计算权重的方法，即优先级</strong>，实际时分别查看以下有没有定义样式，如果有，比较优先级，如果优先级一致，<strong>就近原则（即最后一个进行覆盖）</strong></p>\n<p>1、行内样式优先于内部样式，内部样式与链接样式取决于书写先后顺序（后定义覆盖新定义）</p>\n<p>2、id选择器&gt;class选择器&gt;标签选择器</p>\n<p>3、选择器有权值 ，使用<code>!important;</code>标记优先级最高</p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>盒子模型如下，即包含外边距（margin）、边界（border）、内边距（padding）和内容的一种模型。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h3><p>padding为内边距，其区域有背景颜色（与内容区域相同），background-color将填充所有border以内的区域</p>\n<h4 id=\"写法\"><a href=\"#写法\" class=\"headerlink\" title=\"写法\"></a>写法</h4><p>四个值：上、右、下、左</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">padding:<span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px <span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px;<br></code></pre></td></tr></table></figure>\n\n<p>三个值：上、右、下、（左与右一样）</p>\n<p>上下、左右</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">padding:<span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h3><p>注意：<strong><code>&lt;body&gt;</code>标签默认有margin，为8px，因此很多情况下都需要加上以下语句清除margin。</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余操作与padding中差不多</p>\n<h3 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h3><p>边框主要有三个要素：像素（粗细）、线型、颜色</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid red;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CSS基础\"><a href=\"#CSS基础\" class=\"headerlink\" title=\"CSS基础\"></a>CSS基础</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">选择器&#123;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>\t<span class=\"hljs-attribute\">k</span>:v;<br>&#125;<br><br><span class=\"hljs-comment\">/*<br>\t注释内容<br>*/</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"引用方式\"><a href=\"#引用方式\" class=\"headerlink\" title=\"引用方式\"></a>引用方式</h3><h4 id=\"1、行内样式\"><a href=\"#1、行内样式\" class=\"headerlink\" title=\"1、行内样式\"></a>1、行内样式</h4><p>在HTML标签里写</p>\n<h4 id=\"2、内部样式\"><a href=\"#2、内部样式\" class=\"headerlink\" title=\"2、内部样式\"></a>2、内部样式</h4><p>在页面的head里采用<code>&lt;style&gt;</code>写</p>\n<h4 id=\"3、链入外部样式：页面加载时，同时加载CSS样式\"><a href=\"#3、链入外部样式：页面加载时，同时加载CSS样式\" class=\"headerlink\" title=\"3、链入外部样式：页面加载时，同时加载CSS样式\"></a>3、链入外部样式：页面加载时，同时加载CSS样式</h4><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">&lt;<span class=\"hljs-keyword\">link</span> rel = <span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-keyword\">type</span> = <span class=\"hljs-string\">\"text/css\"</span> href = <span class=\"hljs-string\">\"a.css\"</span>&gt;&lt;/<span class=\"hljs-keyword\">link</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、导入式（-import）：读取完html文件后加载\"><a href=\"#4、导入式（-import）：读取完html文件后加载\" class=\"headerlink\" title=\"4、导入式（@import）：读取完html文件后加载\"></a>4、导入式（@import）：读取完html文件后加载</h4><p>写在<code>&lt;style&gt;</code>标签中，且必须是第一句。<code>@import url(a.css);</code></p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"1、标签选择器\"><a href=\"#1、标签选择器\" class=\"headerlink\" title=\"1、标签选择器\"></a>1、标签选择器</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">p</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、ID选择器\"><a href=\"#2、ID选择器\" class=\"headerlink\" title=\"2、ID选择器\"></a>2、ID选择器</h4><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># id1 &#123;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、类选择器\"><a href=\"#3、类选择器\" class=\"headerlink\" title=\"3、类选择器\"></a>3、类选择器</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.class1</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、通用选择器（通配符）\"><a href=\"#4、通用选择器（通配符）\" class=\"headerlink\" title=\"4、通用选择器（通配符）\"></a>4、通用选择器（通配符）</h4><p>在初始化时常常使用该选择器将整个网页的边距等去掉</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他组合\"><a href=\"#其他组合\" class=\"headerlink\" title=\"其他组合\"></a>其他组合</h4><p>在父子间加上一个空格，如下表示设置div元素的p子元素的样式</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span> <span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span> <span class=\"hljs-params\">&lt;/div&gt;</span><br><br>div <span class=\"hljs-class\">p </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>还有交集和并集，分别使用 . 与 , 进行分隔</p>\n<h4 id=\"伪类\"><a href=\"#伪类\" class=\"headerlink\" title=\"伪类\"></a>伪类</h4><p>同一个标签，根据其<strong>不同的种状态，有不同的样式</strong>。这就叫做“伪类”。伪类用冒号来表示。</p>\n<p>比如div是属于box类，这一点很明确，就是属于box类。但是a属于什么类？不明确。因为需要看用户点击前是什么状态，点击后是什么状态。所以，就叫做“伪类”。</p>\n<p>1、<strong>静态伪类：</strong>只能用于超链接的样式</p>\n<ul>\n<li><code>:link</code> 超链接点击之前</li>\n<li><code>:visited</code> 链接被访问过之后</li>\n</ul>\n<p>2、<strong>动态伪类</strong>：针对<strong>所有标签</strong>都适用的样式。如下：</p>\n<ul>\n<li><code>:hover</code> “悬停”：鼠标放到标签上的时候</li>\n<li><code>:active</code>    “激活”： 鼠标点击标签，但是不松手时。</li>\n<li><code>:focus</code> 是某个标签获得焦点时的样式（比如某个输入框获得焦点）</li>\n</ul>\n<h3 id=\"继承与层叠\"><a href=\"#继承与层叠\" class=\"headerlink\" title=\"继承与层叠\"></a>继承与层叠</h3><h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>如文字样式等能够继承，如盒子、定位等不能继承</p>\n<h4 id=\"层叠\"><a href=\"#层叠\" class=\"headerlink\" title=\"层叠\"></a>层叠</h4><p>层叠性就是css处理冲突的能力。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80/%E5%B1%82%E5%8F%A0.jpg\" alt=\"\"></p>\n<p><strong>以下为计算权重的方法，即优先级</strong>，实际时分别查看以下有没有定义样式，如果有，比较优先级，如果优先级一致，<strong>就近原则（即最后一个进行覆盖）</strong></p>\n<p>1、行内样式优先于内部样式，内部样式与链接样式取决于书写先后顺序（后定义覆盖新定义）</p>\n<p>2、id选择器&gt;class选择器&gt;标签选择器</p>\n<p>3、选择器有权值 ，使用<code>!important;</code>标记优先级最高</p>\n<h2 id=\"盒子模型\"><a href=\"#盒子模型\" class=\"headerlink\" title=\"盒子模型\"></a>盒子模型</h2><p>盒子模型如下，即包含外边距（margin）、边界（border）、内边距（padding）和内容的一种模型。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/CSS%E5%9F%BA%E7%A1%80%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"padding\"><a href=\"#padding\" class=\"headerlink\" title=\"padding\"></a>padding</h3><p>padding为内边距，其区域有背景颜色（与内容区域相同），background-color将填充所有border以内的区域</p>\n<h4 id=\"写法\"><a href=\"#写法\" class=\"headerlink\" title=\"写法\"></a>写法</h4><p>四个值：上、右、下、左</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">padding:<span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px <span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px;<br></code></pre></td></tr></table></figure>\n\n<p>三个值：上、右、下、（左与右一样）</p>\n<p>上下、左右</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">padding:<span class=\"hljs-number\">30</span>px <span class=\"hljs-number\">40</span>px;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h3><p>注意：<strong><code>&lt;body&gt;</code>标签默认有margin，为8px，因此很多情况下都需要加上以下语句清除margin。</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">* &#123;<br>    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其余操作与padding中差不多</p>\n<h3 id=\"border\"><a href=\"#border\" class=\"headerlink\" title=\"border\"></a>border</h3><p>边框主要有三个要素：像素（粗细）、线型、颜色</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">2px</span> solid red;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CSS3：transition与transform","date":"2020-08-15T07:08:01.000Z","fileName":"css3-transition-transform","_content":"\n## 过渡\n\n### transition\n\n**transition实现元素不同状态间的平滑过渡**，可以用来制作动画效果\n\n#### 属性\n\n```css\n/* 让哪些属性发生过渡，all表示所有属性 */\ntransition-property: all;\n\n/*过渡的持续时间*/\ntransition-duration: 1s;\n\n/*过渡的运动曲线\nlinear表示线性，ease表示减速，ease-in表示加速\n也可以使用cubic-bezier，自定义曲线*/\ntransition-timing-function: linear;\n\n/*多长时间后执行过渡*/\ntransition-delay: 1s;\n\n/*综合写法*/\ntransition: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;\n```\n\n#### 示例\n\n给`<div class=\"box\"></div>`添加如下css代码。\n\n```\n<style>\n    .box {\n        width: 200px;\n        height: 200px;\n        background-color: greenyellow;\n        margin: 100px auto;\n        /* 只渐变宽度，不渐变颜色 */\n        transition: width 2s linear 0s;\n    }\n    .box:hover {\n        width: 500px;\n        background-color: blue;\n    }\n</style>\n```\n\n\n\n### transitionend（过渡完成事件）\n\ntransitionend 事件在 CSS **完成过渡后触发**。\n\n#### 示例\n\n在过渡事件的代码中添加如下代码\n\n```\n<script>\n    const div = document.querySelector(\".box\");\n    div.addEventListener(\"transitionend\", function() {\n        alert(\"过渡已完成！\");\n    })\n</script>\n```\n\n\n\n## 转换（transform）\n\n### 缩放：scale\n\n参数解释：\n\n x：表示水平方向的缩放倍数；y：表示垂直方向的缩放倍数。大于1表示放大，小于1表示缩小\n\n```\ntransform: scale(x, y);\ntransform: scale(0.8, 1.2)\n```\n\n\n\n### 位移：translate\n\n参数为百分比，相对于自身移动。正值为向右和向下，只写一个值代表水平移动\n\n```\ntransform: translate(水平位移, 垂直位移);\ntransform: translate(-30%, 30%);\n```\n\n\n\n### 旋转：rotate\n\n正值代表顺时针。\n\n```\ntransform: rotate(角度);\ntransform: rotate(45deg);\n```\n\n#### 旋转的坐标原点\n\n参数可为百分比、长度以及定位位置的词（如left，center等）\n\n```\ntransform-origin: x-axis y-axis z-axis;\n```\n\n\n\n### 3D转换\n\n### 使用rotateX、rotateY、rotateZ进行旋转\n\n```\ntransform: rotateX(360deg);\n```\n\n","source":"_posts/编程相关/CSS/CSS3：transition与transform.md","raw":"---\ntitle: CSS3：transition与transform\ndate: 2020-08-15 15:08:01\ntags:\n\t- 前端样式\ncategories:\n\t- 编程相关\n\t- CSS\nfileName: css3-transition-transform\n---\n\n## 过渡\n\n### transition\n\n**transition实现元素不同状态间的平滑过渡**，可以用来制作动画效果\n\n#### 属性\n\n```css\n/* 让哪些属性发生过渡，all表示所有属性 */\ntransition-property: all;\n\n/*过渡的持续时间*/\ntransition-duration: 1s;\n\n/*过渡的运动曲线\nlinear表示线性，ease表示减速，ease-in表示加速\n也可以使用cubic-bezier，自定义曲线*/\ntransition-timing-function: linear;\n\n/*多长时间后执行过渡*/\ntransition-delay: 1s;\n\n/*综合写法*/\ntransition: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;\n```\n\n#### 示例\n\n给`<div class=\"box\"></div>`添加如下css代码。\n\n```\n<style>\n    .box {\n        width: 200px;\n        height: 200px;\n        background-color: greenyellow;\n        margin: 100px auto;\n        /* 只渐变宽度，不渐变颜色 */\n        transition: width 2s linear 0s;\n    }\n    .box:hover {\n        width: 500px;\n        background-color: blue;\n    }\n</style>\n```\n\n\n\n### transitionend（过渡完成事件）\n\ntransitionend 事件在 CSS **完成过渡后触发**。\n\n#### 示例\n\n在过渡事件的代码中添加如下代码\n\n```\n<script>\n    const div = document.querySelector(\".box\");\n    div.addEventListener(\"transitionend\", function() {\n        alert(\"过渡已完成！\");\n    })\n</script>\n```\n\n\n\n## 转换（transform）\n\n### 缩放：scale\n\n参数解释：\n\n x：表示水平方向的缩放倍数；y：表示垂直方向的缩放倍数。大于1表示放大，小于1表示缩小\n\n```\ntransform: scale(x, y);\ntransform: scale(0.8, 1.2)\n```\n\n\n\n### 位移：translate\n\n参数为百分比，相对于自身移动。正值为向右和向下，只写一个值代表水平移动\n\n```\ntransform: translate(水平位移, 垂直位移);\ntransform: translate(-30%, 30%);\n```\n\n\n\n### 旋转：rotate\n\n正值代表顺时针。\n\n```\ntransform: rotate(角度);\ntransform: rotate(45deg);\n```\n\n#### 旋转的坐标原点\n\n参数可为百分比、长度以及定位位置的词（如left，center等）\n\n```\ntransform-origin: x-axis y-axis z-axis;\n```\n\n\n\n### 3D转换\n\n### 使用rotateX、rotateY、rotateZ进行旋转\n\n```\ntransform: rotateX(360deg);\n```\n\n","slug":"编程相关/CSS/CSS3：transition与transform","published":1,"updated":"2021-01-11T04:24:35.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobp005prwjs4mwagoqm","content":"<h2 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h2><h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><p><strong>transition实现元素不同状态间的平滑过渡</strong>，可以用来制作动画效果</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 让哪些属性发生过渡，all表示所有属性 */</span><br><span class=\"hljs-selector-tag\">transition-property</span>: <span class=\"hljs-selector-tag\">all</span>;<br><br><span class=\"hljs-comment\">/*过渡的持续时间*/</span><br><span class=\"hljs-selector-tag\">transition-duration</span>: 1<span class=\"hljs-selector-tag\">s</span>;<br><br><span class=\"hljs-comment\">/*过渡的运动曲线<br>linear表示线性，ease表示减速，ease-in表示加速<br>也可以使用cubic-bezier，自定义曲线*/</span><br><span class=\"hljs-selector-tag\">transition-timing-function</span>: <span class=\"hljs-selector-tag\">linear</span>;<br><br><span class=\"hljs-comment\">/*多长时间后执行过渡*/</span><br><span class=\"hljs-selector-tag\">transition-delay</span>: 1<span class=\"hljs-selector-tag\">s</span>;<br><br><span class=\"hljs-comment\">/*综合写法*/</span><br><span class=\"hljs-selector-tag\">transition</span>: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>给<code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code>添加如下css代码。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"><br>    <span class=\"hljs-selector-class\">.box</span> &#123;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>        <span class=\"hljs-attribute\">background-color</span>: greenyellow;<br>        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>        <span class=\"hljs-comment\">/* 只渐变宽度，不渐变颜色 */</span><br>        <span class=\"hljs-attribute\">transition</span>: width <span class=\"hljs-number\">2s</span> linear <span class=\"hljs-number\">0s</span>;<br>    &#125;<br>    <span class=\"hljs-selector-class\">.box</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>        <span class=\"hljs-attribute\">background-color</span>: blue;<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"transitionend（过渡完成事件）\"><a href=\"#transitionend（过渡完成事件）\" class=\"headerlink\" title=\"transitionend（过渡完成事件）\"></a>transitionend（过渡完成事件）</h3><p>transitionend 事件在 CSS <strong>完成过渡后触发</strong>。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在过渡事件的代码中添加如下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\".box\"</span>);<br>    div.addEventListener(<span class=\"hljs-string\">\"transitionend\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>        alert(<span class=\"hljs-string\">\"过渡已完成！\"</span>);<br>    &#125;)<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"转换（transform）\"><a href=\"#转换（transform）\" class=\"headerlink\" title=\"转换（transform）\"></a>转换（transform）</h2><h3 id=\"缩放：scale\"><a href=\"#缩放：scale\" class=\"headerlink\" title=\"缩放：scale\"></a>缩放：scale</h3><p>参数解释：</p>\n<p> x：表示水平方向的缩放倍数；y：表示垂直方向的缩放倍数。大于1表示放大，小于1表示缩小</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">scale</span>(x, y);<br><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1.2</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"位移：translate\"><a href=\"#位移：translate\" class=\"headerlink\" title=\"位移：translate\"></a>位移：translate</h3><p>参数为百分比，相对于自身移动。正值为向右和向下，只写一个值代表水平移动</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">translate</span>(水平位移, 垂直位移);<br><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">30</span><span class=\"hljs-symbol\">%</span>, <span class=\"hljs-number\">30</span><span class=\"hljs-symbol\">%</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"旋转：rotate\"><a href=\"#旋转：rotate\" class=\"headerlink\" title=\"旋转：rotate\"></a>旋转：rotate</h3><p>正值代表顺时针。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">transform</span>: rotate(角度);<br><span class=\"hljs-attribute\">transform</span>: rotate(<span class=\"hljs-number\">45deg</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"旋转的坐标原点\"><a href=\"#旋转的坐标原点\" class=\"headerlink\" title=\"旋转的坐标原点\"></a>旋转的坐标原点</h4><p>参数可为百分比、长度以及定位位置的词（如left，center等）</p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">transform-origin: <span class=\"hljs-symbol\">x</span>-axis <span class=\"hljs-symbol\">y</span>-axis z-axis;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3D转换\"><a href=\"#3D转换\" class=\"headerlink\" title=\"3D转换\"></a>3D转换</h3><h3 id=\"使用rotateX、rotateY、rotateZ进行旋转\"><a href=\"#使用rotateX、rotateY、rotateZ进行旋转\" class=\"headerlink\" title=\"使用rotateX、rotateY、rotateZ进行旋转\"></a>使用rotateX、rotateY、rotateZ进行旋转</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">transform</span>: rotateX(<span class=\"hljs-number\">360deg</span>);<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"过渡\"><a href=\"#过渡\" class=\"headerlink\" title=\"过渡\"></a>过渡</h2><h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3><p><strong>transition实现元素不同状态间的平滑过渡</strong>，可以用来制作动画效果</p>\n<h4 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-comment\">/* 让哪些属性发生过渡，all表示所有属性 */</span><br><span class=\"hljs-selector-tag\">transition-property</span>: <span class=\"hljs-selector-tag\">all</span>;<br><br><span class=\"hljs-comment\">/*过渡的持续时间*/</span><br><span class=\"hljs-selector-tag\">transition-duration</span>: 1<span class=\"hljs-selector-tag\">s</span>;<br><br><span class=\"hljs-comment\">/*过渡的运动曲线<br>linear表示线性，ease表示减速，ease-in表示加速<br>也可以使用cubic-bezier，自定义曲线*/</span><br><span class=\"hljs-selector-tag\">transition-timing-function</span>: <span class=\"hljs-selector-tag\">linear</span>;<br><br><span class=\"hljs-comment\">/*多长时间后执行过渡*/</span><br><span class=\"hljs-selector-tag\">transition-delay</span>: 1<span class=\"hljs-selector-tag\">s</span>;<br><br><span class=\"hljs-comment\">/*综合写法*/</span><br><span class=\"hljs-selector-tag\">transition</span>: 让哪些属性进行过度 过渡的持续时间 运动曲线 延迟时间;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>给<code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code>添加如下css代码。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\"><br>    <span class=\"hljs-selector-class\">.box</span> &#123;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>        <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>        <span class=\"hljs-attribute\">background-color</span>: greenyellow;<br>        <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;<br>        <span class=\"hljs-comment\">/* 只渐变宽度，不渐变颜色 */</span><br>        <span class=\"hljs-attribute\">transition</span>: width <span class=\"hljs-number\">2s</span> linear <span class=\"hljs-number\">0s</span>;<br>    &#125;<br>    <span class=\"hljs-selector-class\">.box</span><span class=\"hljs-selector-pseudo\">:hover</span> &#123;<br>        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">500px</span>;<br>        <span class=\"hljs-attribute\">background-color</span>: blue;<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"transitionend（过渡完成事件）\"><a href=\"#transitionend（过渡完成事件）\" class=\"headerlink\" title=\"transitionend（过渡完成事件）\"></a>transitionend（过渡完成事件）</h3><p>transitionend 事件在 CSS <strong>完成过渡后触发</strong>。</p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>在过渡事件的代码中添加如下代码</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-keyword\">const</span> div = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\".box\"</span>);<br>    div.addEventListener(<span class=\"hljs-string\">\"transitionend\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>        alert(<span class=\"hljs-string\">\"过渡已完成！\"</span>);<br>    &#125;)<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"转换（transform）\"><a href=\"#转换（transform）\" class=\"headerlink\" title=\"转换（transform）\"></a>转换（transform）</h2><h3 id=\"缩放：scale\"><a href=\"#缩放：scale\" class=\"headerlink\" title=\"缩放：scale\"></a>缩放：scale</h3><p>参数解释：</p>\n<p> x：表示水平方向的缩放倍数；y：表示垂直方向的缩放倍数。大于1表示放大，小于1表示缩小</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">scale</span>(x, y);<br><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">scale</span>(<span class=\"hljs-number\">0.8</span>, <span class=\"hljs-number\">1.2</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"位移：translate\"><a href=\"#位移：translate\" class=\"headerlink\" title=\"位移：translate\"></a>位移：translate</h3><p>参数为百分比，相对于自身移动。正值为向右和向下，只写一个值代表水平移动</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">translate</span>(水平位移, 垂直位移);<br><span class=\"hljs-built_in\">transform</span>: <span class=\"hljs-built_in\">translate</span>(-<span class=\"hljs-number\">30</span><span class=\"hljs-symbol\">%</span>, <span class=\"hljs-number\">30</span><span class=\"hljs-symbol\">%</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"旋转：rotate\"><a href=\"#旋转：rotate\" class=\"headerlink\" title=\"旋转：rotate\"></a>旋转：rotate</h3><p>正值代表顺时针。</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">transform</span>: rotate(角度);<br><span class=\"hljs-attribute\">transform</span>: rotate(<span class=\"hljs-number\">45deg</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"旋转的坐标原点\"><a href=\"#旋转的坐标原点\" class=\"headerlink\" title=\"旋转的坐标原点\"></a>旋转的坐标原点</h4><p>参数可为百分比、长度以及定位位置的词（如left，center等）</p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">transform-origin: <span class=\"hljs-symbol\">x</span>-axis <span class=\"hljs-symbol\">y</span>-axis z-axis;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3D转换\"><a href=\"#3D转换\" class=\"headerlink\" title=\"3D转换\"></a>3D转换</h3><h3 id=\"使用rotateX、rotateY、rotateZ进行旋转\"><a href=\"#使用rotateX、rotateY、rotateZ进行旋转\" class=\"headerlink\" title=\"使用rotateX、rotateY、rotateZ进行旋转\"></a>使用rotateX、rotateY、rotateZ进行旋转</h3><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">transform</span>: rotateX(<span class=\"hljs-number\">360deg</span>);<br></code></pre></td></tr></table></figure>\n\n"},{"title":"CSS定位与浮动","date":"2020-08-04T08:07:30.000Z","fileName":"css-float-position","_content":"\n传统布局方式：\n\n> display + position + float\n\n## Web标准文档流\n\n### 行内元素与块级元素\n\n#### 行内元素（p、span、a、b、i、u、em等）\n\n- 与其他行内元素并排；\n- 不能设置宽、高。默认的宽度，就是文字的宽度。\n\n#### 块级元素（div等）\n\n- 霸占一行，不能与其他任何元素并列；\n- 能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。\n\n#### 块级元素转行内元素\n\n```\ndisplay: inline;\n```\n\n#### 行内元素转块级元素\n\n```\ndisplay: block;\n```\n\n### 标准文档流\n\nWeb界面可以视为一个流，从上往下，主要有以下特性。\n\n#### 特性\n\n**1、空白折叠**\n\n无论多少个空格、换行、tab，都会折叠为一个空格。\n\n**2、同行的元素底边对齐**\n\n**3、一行空间不够，自动换行**\n\n#### 使元素脱离标准文档流的方法\n\n- 浮动\n- 绝对定位\n- 固定定位\n\n\n\n## 浮动\n\n```\nfloat: left;\n```\n\n### 性质\n\n1、浮动元素脱标\n\n2、浮动元素相互贴靠（改变窗口大小即可看到，窗口够大，就会自动贴靠）\n\n3、文字会自动包围浮动元素\n\n### 清除浮动\n\n避免如下情况导致的布局问题，应当进行浮动清除\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E6%B5%AE%E5%8A%A8%E5%87%BA%E9%94%99.png\" style=\"zoom: 67%;\" />\n\n#### 1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\n\n缺点：不能适应页面的快速变化\n\n```\n<div>     //设置height\n\t<p></p>\n</div>\n\n<div>    //设置height\n\t<p></p>\n</div>\n```\n\n#### 2、clear: both; （即不允许左侧和右侧有浮动对象）\n\n缺点：margin失效，两个div之间没有间隙\n\n```\n<div>\n\t<p></p>\n</div>\n\n<div>   //clear:both;\n\t<p></p>\n</div>\n```\n\n#### 3、在两个浮动元素之间插入一个div\n\n#### 4、overflow: hidden;\n\n推荐使用，在父元素上添加该元素。\n\n\n\n## 定位\n\n### 相对定位\n\n即相对于元素自己**原来的位置**，进行位置调整。\n\n相对定位**不脱标**，即相对定位的真实位置还在元素的原始位置，只不过影子出去了，可以到处飘。\n\n#### 使用方法\n\n```\nposition: relative;\n```\n\n- left：盒子右移\n\n- right：盒子左移\n\n- top：盒子下移\n\n- bottom：盒子上移\n\n负数表示相反的方向\n\n#### 用处\n\n1、微调元素\n\n2、作为绝对定位的参考，子绝父相\n\n#### 示例\n\nHTML元素\n\n```\n\t<div class=\"div1\">原始状态</div>\n    <div class=\"div2\">绝对定位left40px,top40px</div>\n    <div class=\"div3\">原始状态</div>\n```\n\nCSS样式\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    background-color: red;\n}\n.div2{\n    position: relative;\n    left: 40px;\n    top: 40px;\n}\n.div3{\n    background-color: aqua;\n}\n```\n\n表现：\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png\" style=\"zoom: 67%;\" />\n\n\n\n### 绝对定位\n\n定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。\n\n```\n\tposition: absolute;  /*绝对定位*/\n\tleft: 10px;  /*横坐标*/\n\ttop/bottom: 20px;  /*纵坐标*/\n```\n\n#### 脱标特性\n\n即所有的标准文档流的性质，绝对定位之后都不遵守了，标签也不区分所谓的行内元素、块级元素了\n\n#### 参考点\n\n（1）如果用**top描述**，那么参考点就是**页面的左上角**，而不是浏览器的左上角\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D1.png\" style=\"zoom:75%;\" />\n\n（2）如果用**bottom描述**，那么参考点就是**浏览器首屏窗口尺寸**（好好理解“首屏”二字），对应的页面的左下角\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D2.png\" style=\"zoom:75%;\" />\n\n（3）一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D3.png\" style=\"zoom:75%;\" />\n\n子绝父相：使得整体不脱离文档流\n\n同时，**绝对定位是从父元素的border内侧为参考点，而不是以内容**\n\n\n\n### 固定定位\n\n相对浏览器窗口进行定位。**无论页面如何滚动，这个盒子显示的位置不变**。\n\n#### 用途\n\n1、网页右下角的“返回到顶部”\n\n2、顶部导航栏（假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top）\n\n\n\n### z-index属性\n\n表示谁压着谁，数值大的压盖住数值小的。\n\n1、默认的z-index值是0\n\n2、定位了的元素，永远能够压住没有定位的元素\n\n3、从父现象：父亲怂了，儿子再牛逼也没用\n\n\n\n\n\n\n\n","source":"_posts/编程相关/CSS/CSS定位与浮动.md","raw":"---\ntitle: CSS定位与浮动\ndate: 2020-08-04 16:07:30\ntags:\n\t- 前端样式\ncategories:\n\t- 编程相关\n\t- CSS\nfileName: css-float-position\n---\n\n传统布局方式：\n\n> display + position + float\n\n## Web标准文档流\n\n### 行内元素与块级元素\n\n#### 行内元素（p、span、a、b、i、u、em等）\n\n- 与其他行内元素并排；\n- 不能设置宽、高。默认的宽度，就是文字的宽度。\n\n#### 块级元素（div等）\n\n- 霸占一行，不能与其他任何元素并列；\n- 能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。\n\n#### 块级元素转行内元素\n\n```\ndisplay: inline;\n```\n\n#### 行内元素转块级元素\n\n```\ndisplay: block;\n```\n\n### 标准文档流\n\nWeb界面可以视为一个流，从上往下，主要有以下特性。\n\n#### 特性\n\n**1、空白折叠**\n\n无论多少个空格、换行、tab，都会折叠为一个空格。\n\n**2、同行的元素底边对齐**\n\n**3、一行空间不够，自动换行**\n\n#### 使元素脱离标准文档流的方法\n\n- 浮动\n- 绝对定位\n- 固定定位\n\n\n\n## 浮动\n\n```\nfloat: left;\n```\n\n### 性质\n\n1、浮动元素脱标\n\n2、浮动元素相互贴靠（改变窗口大小即可看到，窗口够大，就会自动贴靠）\n\n3、文字会自动包围浮动元素\n\n### 清除浮动\n\n避免如下情况导致的布局问题，应当进行浮动清除\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E6%B5%AE%E5%8A%A8%E5%87%BA%E9%94%99.png\" style=\"zoom: 67%;\" />\n\n#### 1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\n\n缺点：不能适应页面的快速变化\n\n```\n<div>     //设置height\n\t<p></p>\n</div>\n\n<div>    //设置height\n\t<p></p>\n</div>\n```\n\n#### 2、clear: both; （即不允许左侧和右侧有浮动对象）\n\n缺点：margin失效，两个div之间没有间隙\n\n```\n<div>\n\t<p></p>\n</div>\n\n<div>   //clear:both;\n\t<p></p>\n</div>\n```\n\n#### 3、在两个浮动元素之间插入一个div\n\n#### 4、overflow: hidden;\n\n推荐使用，在父元素上添加该元素。\n\n\n\n## 定位\n\n### 相对定位\n\n即相对于元素自己**原来的位置**，进行位置调整。\n\n相对定位**不脱标**，即相对定位的真实位置还在元素的原始位置，只不过影子出去了，可以到处飘。\n\n#### 使用方法\n\n```\nposition: relative;\n```\n\n- left：盒子右移\n\n- right：盒子左移\n\n- top：盒子下移\n\n- bottom：盒子上移\n\n负数表示相反的方向\n\n#### 用处\n\n1、微调元素\n\n2、作为绝对定位的参考，子绝父相\n\n#### 示例\n\nHTML元素\n\n```\n\t<div class=\"div1\">原始状态</div>\n    <div class=\"div2\">绝对定位left40px,top40px</div>\n    <div class=\"div3\">原始状态</div>\n```\n\nCSS样式\n\n```css\ndiv {\n    width: 200px;\n    height: 200px;\n    background-color: red;\n}\n.div2{\n    position: relative;\n    left: 40px;\n    top: 40px;\n}\n.div3{\n    background-color: aqua;\n}\n```\n\n表现：\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png\" style=\"zoom: 67%;\" />\n\n\n\n### 绝对定位\n\n定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。\n\n```\n\tposition: absolute;  /*绝对定位*/\n\tleft: 10px;  /*横坐标*/\n\ttop/bottom: 20px;  /*纵坐标*/\n```\n\n#### 脱标特性\n\n即所有的标准文档流的性质，绝对定位之后都不遵守了，标签也不区分所谓的行内元素、块级元素了\n\n#### 参考点\n\n（1）如果用**top描述**，那么参考点就是**页面的左上角**，而不是浏览器的左上角\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D1.png\" style=\"zoom:75%;\" />\n\n（2）如果用**bottom描述**，那么参考点就是**浏览器首屏窗口尺寸**（好好理解“首屏”二字），对应的页面的左下角\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D2.png\" style=\"zoom:75%;\" />\n\n（3）一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。\n\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D3.png\" style=\"zoom:75%;\" />\n\n子绝父相：使得整体不脱离文档流\n\n同时，**绝对定位是从父元素的border内侧为参考点，而不是以内容**\n\n\n\n### 固定定位\n\n相对浏览器窗口进行定位。**无论页面如何滚动，这个盒子显示的位置不变**。\n\n#### 用途\n\n1、网页右下角的“返回到顶部”\n\n2、顶部导航栏（假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top）\n\n\n\n### z-index属性\n\n表示谁压着谁，数值大的压盖住数值小的。\n\n1、默认的z-index值是0\n\n2、定位了的元素，永远能够压住没有定位的元素\n\n3、从父现象：父亲怂了，儿子再牛逼也没用\n\n\n\n\n\n\n\n","slug":"编程相关/CSS/CSS定位与浮动","published":1,"updated":"2021-01-11T04:24:19.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobr005rrwjsbc086fhi","content":"<p>传统布局方式：</p>\n<blockquote>\n<p>display + position + float</p>\n</blockquote>\n<h2 id=\"Web标准文档流\"><a href=\"#Web标准文档流\" class=\"headerlink\" title=\"Web标准文档流\"></a>Web标准文档流</h2><h3 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a>行内元素与块级元素</h3><h4 id=\"行内元素（p、span、a、b、i、u、em等）\"><a href=\"#行内元素（p、span、a、b、i、u、em等）\" class=\"headerlink\" title=\"行内元素（p、span、a、b、i、u、em等）\"></a>行内元素（p、span、a、b、i、u、em等）</h4><ul>\n<li>与其他行内元素并排；</li>\n<li>不能设置宽、高。默认的宽度，就是文字的宽度。</li>\n</ul>\n<h4 id=\"块级元素（div等）\"><a href=\"#块级元素（div等）\" class=\"headerlink\" title=\"块级元素（div等）\"></a>块级元素（div等）</h4><ul>\n<li>霸占一行，不能与其他任何元素并列；</li>\n<li>能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。</li>\n</ul>\n<h4 id=\"块级元素转行内元素\"><a href=\"#块级元素转行内元素\" class=\"headerlink\" title=\"块级元素转行内元素\"></a>块级元素转行内元素</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-built_in\">display</span>: <span class=\"hljs-keyword\">inline</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"行内元素转块级元素\"><a href=\"#行内元素转块级元素\" class=\"headerlink\" title=\"行内元素转块级元素\"></a>行内元素转块级元素</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">display</span>: <span class=\"hljs-built_in\">block</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h3><p>Web界面可以视为一个流，从上往下，主要有以下特性。</p>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p><strong>1、空白折叠</strong></p>\n<p>无论多少个空格、换行、tab，都会折叠为一个空格。</p>\n<p><strong>2、同行的元素底边对齐</strong></p>\n<p><strong>3、一行空间不够，自动换行</strong></p>\n<h4 id=\"使元素脱离标准文档流的方法\"><a href=\"#使元素脱离标准文档流的方法\" class=\"headerlink\" title=\"使元素脱离标准文档流的方法\"></a>使元素脱离标准文档流的方法</h4><ul>\n<li>浮动</li>\n<li>绝对定位</li>\n<li>固定定位</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">float</span>: left;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h3><p>1、浮动元素脱标</p>\n<p>2、浮动元素相互贴靠（改变窗口大小即可看到，窗口够大，就会自动贴靠）</p>\n<p>3、文字会自动包围浮动元素</p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>避免如下情况导致的布局问题，应当进行浮动清除</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E6%B5%AE%E5%8A%A8%E5%87%BA%E9%94%99.png\" style=\"zoom: 67%;\" />\n\n<h4 id=\"1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\"><a href=\"#1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\" class=\"headerlink\" title=\"1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\"></a>1、给浮动元素的祖先设置合适的高度（大于孩子的高度）</h4><p>缺点：不能适应页面的快速变化</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span>     <span class=\"hljs-comment\">//设置height</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br><br><span class=\"hljs-params\">&lt;div&gt;</span>    <span class=\"hljs-comment\">//设置height</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、clear-both-（即不允许左侧和右侧有浮动对象）\"><a href=\"#2、clear-both-（即不允许左侧和右侧有浮动对象）\" class=\"headerlink\" title=\"2、clear: both; （即不允许左侧和右侧有浮动对象）\"></a>2、clear: both; （即不允许左侧和右侧有浮动对象）</h4><p>缺点：margin失效，两个div之间没有间隙</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br><br><span class=\"hljs-params\">&lt;div&gt;</span>   <span class=\"hljs-comment\">//clear:both;</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、在两个浮动元素之间插入一个div\"><a href=\"#3、在两个浮动元素之间插入一个div\" class=\"headerlink\" title=\"3、在两个浮动元素之间插入一个div\"></a>3、在两个浮动元素之间插入一个div</h4><h4 id=\"4、overflow-hidden\"><a href=\"#4、overflow-hidden\" class=\"headerlink\" title=\"4、overflow: hidden;\"></a>4、overflow: hidden;</h4><p>推荐使用，在父元素上添加该元素。</p>\n<h2 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h2><h3 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h3><p>即相对于元素自己<strong>原来的位置</strong>，进行位置调整。</p>\n<p>相对定位<strong>不脱标</strong>，即相对定位的真实位置还在元素的原始位置，只不过影子出去了，可以到处飘。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">position</span>: relative;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>left：盒子右移</p>\n</li>\n<li><p>right：盒子左移</p>\n</li>\n<li><p>top：盒子下移</p>\n</li>\n<li><p>bottom：盒子上移</p>\n</li>\n</ul>\n<p>负数表示相反的方向</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>1、微调元素</p>\n<p>2、作为绝对定位的参考，子绝父相</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>HTML元素</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-symbol\">div1</span>\"&gt;原始状态&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>   &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=\"<span class=\"hljs-symbol\">div2</span>\"&gt;绝对定位<span class=\"hljs-symbol\">left40px,<span class=\"hljs-symbol\">top40px</span></span>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>   &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=\"<span class=\"hljs-symbol\">div3</span>\"&gt;原始状态&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>CSS样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: red;<br>&#125;<br><span class=\"hljs-selector-class\">.div2</span>&#123;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">40px</span>;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">40px</span>;<br>&#125;<br><span class=\"hljs-selector-class\">.div3</span>&#123;<br>    <span class=\"hljs-attribute\">background-color</span>: aqua;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>表现：</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h3><p>定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-attribute\">position</span>: absolute;  <span class=\"hljs-comment\">/*绝对定位*/</span><br><span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">10px</span>;  <span class=\"hljs-comment\">/*横坐标*/</span><br><span class=\"hljs-attribute\">top</span>/bottom: <span class=\"hljs-number\">20px</span>;  <span class=\"hljs-comment\">/*纵坐标*/</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"脱标特性\"><a href=\"#脱标特性\" class=\"headerlink\" title=\"脱标特性\"></a>脱标特性</h4><p>即所有的标准文档流的性质，绝对定位之后都不遵守了，标签也不区分所谓的行内元素、块级元素了</p>\n<h4 id=\"参考点\"><a href=\"#参考点\" class=\"headerlink\" title=\"参考点\"></a>参考点</h4><p>（1）如果用<strong>top描述</strong>，那么参考点就是<strong>页面的左上角</strong>，而不是浏览器的左上角</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D1.png\" style=\"zoom:75%;\" />\n\n<p>（2）如果用<strong>bottom描述</strong>，那么参考点就是<strong>浏览器首屏窗口尺寸</strong>（好好理解“首屏”二字），对应的页面的左下角</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D2.png\" style=\"zoom:75%;\" />\n\n<p>（3）一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D3.png\" style=\"zoom:75%;\" />\n\n<p>子绝父相：使得整体不脱离文档流</p>\n<p>同时，<strong>绝对定位是从父元素的border内侧为参考点，而不是以内容</strong></p>\n<h3 id=\"固定定位\"><a href=\"#固定定位\" class=\"headerlink\" title=\"固定定位\"></a>固定定位</h3><p>相对浏览器窗口进行定位。<strong>无论页面如何滚动，这个盒子显示的位置不变</strong>。</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>1、网页右下角的“返回到顶部”</p>\n<p>2、顶部导航栏（假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top）</p>\n<h3 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h3><p>表示谁压着谁，数值大的压盖住数值小的。</p>\n<p>1、默认的z-index值是0</p>\n<p>2、定位了的元素，永远能够压住没有定位的元素</p>\n<p>3、从父现象：父亲怂了，儿子再牛逼也没用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>传统布局方式：</p>\n<blockquote>\n<p>display + position + float</p>\n</blockquote>\n<h2 id=\"Web标准文档流\"><a href=\"#Web标准文档流\" class=\"headerlink\" title=\"Web标准文档流\"></a>Web标准文档流</h2><h3 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a>行内元素与块级元素</h3><h4 id=\"行内元素（p、span、a、b、i、u、em等）\"><a href=\"#行内元素（p、span、a、b、i、u、em等）\" class=\"headerlink\" title=\"行内元素（p、span、a、b、i、u、em等）\"></a>行内元素（p、span、a、b、i、u、em等）</h4><ul>\n<li>与其他行内元素并排；</li>\n<li>不能设置宽、高。默认的宽度，就是文字的宽度。</li>\n</ul>\n<h4 id=\"块级元素（div等）\"><a href=\"#块级元素（div等）\" class=\"headerlink\" title=\"块级元素（div等）\"></a>块级元素（div等）</h4><ul>\n<li>霸占一行，不能与其他任何元素并列；</li>\n<li>能接受宽、高。如果不设置宽度，那么宽度将默认变为父亲的100%。</li>\n</ul>\n<h4 id=\"块级元素转行内元素\"><a href=\"#块级元素转行内元素\" class=\"headerlink\" title=\"块级元素转行内元素\"></a>块级元素转行内元素</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-built_in\">display</span>: <span class=\"hljs-keyword\">inline</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"行内元素转块级元素\"><a href=\"#行内元素转块级元素\" class=\"headerlink\" title=\"行内元素转块级元素\"></a>行内元素转块级元素</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">display</span>: <span class=\"hljs-built_in\">block</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"标准文档流\"><a href=\"#标准文档流\" class=\"headerlink\" title=\"标准文档流\"></a>标准文档流</h3><p>Web界面可以视为一个流，从上往下，主要有以下特性。</p>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><p><strong>1、空白折叠</strong></p>\n<p>无论多少个空格、换行、tab，都会折叠为一个空格。</p>\n<p><strong>2、同行的元素底边对齐</strong></p>\n<p><strong>3、一行空间不够，自动换行</strong></p>\n<h4 id=\"使元素脱离标准文档流的方法\"><a href=\"#使元素脱离标准文档流的方法\" class=\"headerlink\" title=\"使元素脱离标准文档流的方法\"></a>使元素脱离标准文档流的方法</h4><ul>\n<li>浮动</li>\n<li>绝对定位</li>\n<li>固定定位</li>\n</ul>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">float</span>: left;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h3><p>1、浮动元素脱标</p>\n<p>2、浮动元素相互贴靠（改变窗口大小即可看到，窗口够大，就会自动贴靠）</p>\n<p>3、文字会自动包围浮动元素</p>\n<h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>避免如下情况导致的布局问题，应当进行浮动清除</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E6%B5%AE%E5%8A%A8%E5%87%BA%E9%94%99.png\" style=\"zoom: 67%;\" />\n\n<h4 id=\"1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\"><a href=\"#1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\" class=\"headerlink\" title=\"1、给浮动元素的祖先设置合适的高度（大于孩子的高度）\"></a>1、给浮动元素的祖先设置合适的高度（大于孩子的高度）</h4><p>缺点：不能适应页面的快速变化</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span>     <span class=\"hljs-comment\">//设置height</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br><br><span class=\"hljs-params\">&lt;div&gt;</span>    <span class=\"hljs-comment\">//设置height</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、clear-both-（即不允许左侧和右侧有浮动对象）\"><a href=\"#2、clear-both-（即不允许左侧和右侧有浮动对象）\" class=\"headerlink\" title=\"2、clear: both; （即不允许左侧和右侧有浮动对象）\"></a>2、clear: both; （即不允许左侧和右侧有浮动对象）</h4><p>缺点：margin失效，两个div之间没有间隙</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-params\">&lt;div&gt;</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br><br><span class=\"hljs-params\">&lt;div&gt;</span>   <span class=\"hljs-comment\">//clear:both;</span><br>\t<span class=\"hljs-params\">&lt;p&gt;</span><span class=\"hljs-params\">&lt;/p&gt;</span><br><span class=\"hljs-params\">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、在两个浮动元素之间插入一个div\"><a href=\"#3、在两个浮动元素之间插入一个div\" class=\"headerlink\" title=\"3、在两个浮动元素之间插入一个div\"></a>3、在两个浮动元素之间插入一个div</h4><h4 id=\"4、overflow-hidden\"><a href=\"#4、overflow-hidden\" class=\"headerlink\" title=\"4、overflow: hidden;\"></a>4、overflow: hidden;</h4><p>推荐使用，在父元素上添加该元素。</p>\n<h2 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h2><h3 id=\"相对定位\"><a href=\"#相对定位\" class=\"headerlink\" title=\"相对定位\"></a>相对定位</h3><p>即相对于元素自己<strong>原来的位置</strong>，进行位置调整。</p>\n<p>相对定位<strong>不脱标</strong>，即相对定位的真实位置还在元素的原始位置，只不过影子出去了，可以到处飘。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scss\"><span class=\"hljs-attribute\">position</span>: relative;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>left：盒子右移</p>\n</li>\n<li><p>right：盒子左移</p>\n</li>\n<li><p>top：盒子下移</p>\n</li>\n<li><p>bottom：盒子上移</p>\n</li>\n</ul>\n<p>负数表示相反的方向</p>\n<h4 id=\"用处\"><a href=\"#用处\" class=\"headerlink\" title=\"用处\"></a>用处</h4><p>1、微调元素</p>\n<p>2、作为绝对定位的参考，子绝父相</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>HTML元素</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;div <span class=\"hljs-keyword\">class</span>=\"<span class=\"hljs-symbol\">div1</span>\"&gt;原始状态&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>   &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=\"<span class=\"hljs-symbol\">div2</span>\"&gt;绝对定位<span class=\"hljs-symbol\">left40px,<span class=\"hljs-symbol\">top40px</span></span>&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br>   &lt;<span class=\"hljs-symbol\">div</span> <span class=\"hljs-symbol\">class</span>=\"<span class=\"hljs-symbol\">div3</span>\"&gt;原始状态&lt;/<span class=\"hljs-symbol\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>CSS样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">div</span> &#123;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;<br>    <span class=\"hljs-attribute\">background-color</span>: red;<br>&#125;<br><span class=\"hljs-selector-class\">.div2</span>&#123;<br>    <span class=\"hljs-attribute\">position</span>: relative;<br>    <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">40px</span>;<br>    <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">40px</span>;<br>&#125;<br><span class=\"hljs-selector-class\">.div3</span>&#123;<br>    <span class=\"hljs-attribute\">background-color</span>: aqua;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>表现：</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D.png\" style=\"zoom: 67%;\" />\n\n\n\n<h3 id=\"绝对定位\"><a href=\"#绝对定位\" class=\"headerlink\" title=\"绝对定位\"></a>绝对定位</h3><p>定义横纵坐标。原点在父容器的左上角或左下角。横坐标用left表示，纵坐标用top或者bottom表示。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-attribute\">position</span>: absolute;  <span class=\"hljs-comment\">/*绝对定位*/</span><br><span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">10px</span>;  <span class=\"hljs-comment\">/*横坐标*/</span><br><span class=\"hljs-attribute\">top</span>/bottom: <span class=\"hljs-number\">20px</span>;  <span class=\"hljs-comment\">/*纵坐标*/</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"脱标特性\"><a href=\"#脱标特性\" class=\"headerlink\" title=\"脱标特性\"></a>脱标特性</h4><p>即所有的标准文档流的性质，绝对定位之后都不遵守了，标签也不区分所谓的行内元素、块级元素了</p>\n<h4 id=\"参考点\"><a href=\"#参考点\" class=\"headerlink\" title=\"参考点\"></a>参考点</h4><p>（1）如果用<strong>top描述</strong>，那么参考点就是<strong>页面的左上角</strong>，而不是浏览器的左上角</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D1.png\" style=\"zoom:75%;\" />\n\n<p>（2）如果用<strong>bottom描述</strong>，那么参考点就是<strong>浏览器首屏窗口尺寸</strong>（好好理解“首屏”二字），对应的页面的左下角</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D2.png\" style=\"zoom:75%;\" />\n\n<p>（3）一个绝对定位的元素，如果父辈元素中也出现了已定位（无论是绝对定位、相对定位，还是固定定位）的元素，那么将以父辈这个元素，为参考点。</p>\n<img src=\"http://cdn.ziyedy.top/image/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8/%E5%AE%9A%E4%BD%8D3.png\" style=\"zoom:75%;\" />\n\n<p>子绝父相：使得整体不脱离文档流</p>\n<p>同时，<strong>绝对定位是从父元素的border内侧为参考点，而不是以内容</strong></p>\n<h3 id=\"固定定位\"><a href=\"#固定定位\" class=\"headerlink\" title=\"固定定位\"></a>固定定位</h3><p>相对浏览器窗口进行定位。<strong>无论页面如何滚动，这个盒子显示的位置不变</strong>。</p>\n<h4 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h4><p>1、网页右下角的“返回到顶部”</p>\n<p>2、顶部导航栏（假设顶部导航条的高度是60px，那么，为了防止其他的内容被导航条覆盖，我们要给body标签设置60px的padding-top）</p>\n<h3 id=\"z-index属性\"><a href=\"#z-index属性\" class=\"headerlink\" title=\"z-index属性\"></a>z-index属性</h3><p>表示谁压着谁，数值大的压盖住数值小的。</p>\n<p>1、默认的z-index值是0</p>\n<p>2、定位了的元素，永远能够压住没有定位的元素</p>\n<p>3、从父现象：父亲怂了，儿子再牛逼也没用</p>\n"},{"title":"1.1、JS基本数据类型","date":"2020-06-05T12:18:08.000Z","fileName":"js-basic-datatype","_content":"\n## 字符串：String\n\njs中的字符串使用\" \"或者' '进行包裹（跟python相同）。\n\n```\nstr1 = \"str\";\nstr2 = 'str';\n```\n\n### 不可变性\n\n字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间（与Java中的String类很像）。\n\n如下，看上去str 的值变了，其实'aaaa'仍然保存在内存中，str只是改为指向了'bbbb'。\n\n```\nvar str = 'aaaa';\nstr = 'bbbb';\n```\n\n### 字符串常用操作（长度、拼接）\n\n```\n// 获取长度\nstr.length\n```\n\n拼接字符串使用 “+”即可，很方便。\n\n### 字符串的查找与替换\n\n```\n// 返回子字符串的位置，若没有，返回-1\nstr.indexOf(\"char\")\n\n// 从后向前检索\nstr.lastIndexOf(\"char\")\n\n// 替换字符串，将a替换为b\nstr.replace(a,b)\n```\n\n### 子字符串的截取\n\n```\nstr.slice(start, end) // 截取字符串（end索引不在截取范围之内）\n\nstr.substring(start, end) // 功能与slice一致\n\nstr.substr(start, len) // 从start处截取长为len的字符串\n```\n\n### 字符串分割为数组\n\n```\nstr.split(separate) // 把字符串分割为字符串数组，参数为分隔符\n```\n\n示例\n\n```\na = \"a,b,b,df,s\";\nconsole.log(a);\nb = a.split(',');\nconsole.log(b);\n```\n\n\n\n## 数值型：Number\n\n### 最大值与最小值\n\n```\nmax = Number.MAX_VALUE;\nmin = Number.MIN_VALUE;\n```\n\n### 注意点\n\n1、使用 Number 表示的变量超过了最大值，则会返回Infinity。`typeof Infinity`的返回结果是number。\n\n2、**NaN（Not a Number）**，非数值\n\n```\nconsole.log(\"a\" / 10);\t// NaN\nconsole.log(typeof NaN);\t// number\n```\n\n3、在JS中，**浮点数的运算无法保证较高的精度**\n\n\n\n## 布尔型：Boolean\n\n就是简单的true与false，与数字相加时，**true为1，false为0**\n\n\n\n## Null和Undefined\n\n### Null：空值\n\n专门用来表示空对象，同时`typeof null`会返回object。（**null视为空对象**）\n\n### undefined：未定义\n\n#### 1、变量已声明，但是没有赋值\n\n```\nvar a;\nconsole.log(typeof a); // undefined\n```\n\n#### 2、变量未定义\n\n```\nconsole.log(typeof a);\t// undefined\nconsole.log(a); // 打印结果：Uncaught ReferenceError: a is not defined\n```\n\n#### 3、函数无返回值\n\n如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。\n\n或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 `return undefined`。\n\n```\nfunction foo() {}\nconsole.log(foo()); // 打印结果：undefined\n```\n\n#### 4、调用函数时，未传参\n\n调用函数时，如果没有传参，那么，这个参数的值就是 undefined。\n\n```\nfunction foo(name) {\n    console.log(name);\n}\n\nfoo(); // 调用函数时，未传参。执行函数后的打印结果：undefined\n```\n\n### 两者之间的差别\n\n```\nconsole.log(null == undefined);\t\t// true\nconsole.log(null === undefined);\t// false\n```\n\n**和数字运算时，null相当于0，而undefined相当于NaN**\n\n\n\n## 类型转换\n\n### 其他类型-->String\n\n#### 1、通过字符串拼接隐式转换\n\n```\nvar a = 1;\na = a + '';\nconsole.log(typeof a);\t// string\n```\n\n#### 2、调用toString()方法\n\n```\n变量.toString()\n```\n\n该方法不会影响到原变量，它会将转换的结果返回，同时，null与undefined没有toString方法。\n\n#### 3、使用String()函数强制转换\n\n```\nString(变量)\n```\n\n- 对于 Number 和 Boolean 而言，本质上就是调用 toString()方法。\n\n- 对于 null 和 undefined，它会将 null 直接转换为 \"null\"。将 undefined 直接转换为 \"undefined\"。\n\n### 其他类型-->Number\n\n```\nparseInt(\"str\");\nparseFloat(\"str\");\n```\n\n### typeof总结\n\n| typeof 的代码写法 | 返回结果  |\n| :---------------- | :-------: |\n| typeof 数字       |  number   |\n| typeof 字符串     |  string   |\n| typeof 布尔型     |  boolean  |\n| typeof 对象       |  object   |\n| typeof 方法       | function  |\n| typeof null       |  object   |\n| typeof undefined  | undefined |\n","source":"_posts/编程相关/JavaScript/1.1、JS基本数据类型.md","raw":"---\ntitle: 1.1、JS基本数据类型\ndate: 2020-06-05 20:18:08\ntags:\n\t- 前端\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-basic-datatype\n---\n\n## 字符串：String\n\njs中的字符串使用\" \"或者' '进行包裹（跟python相同）。\n\n```\nstr1 = \"str\";\nstr2 = 'str';\n```\n\n### 不可变性\n\n字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间（与Java中的String类很像）。\n\n如下，看上去str 的值变了，其实'aaaa'仍然保存在内存中，str只是改为指向了'bbbb'。\n\n```\nvar str = 'aaaa';\nstr = 'bbbb';\n```\n\n### 字符串常用操作（长度、拼接）\n\n```\n// 获取长度\nstr.length\n```\n\n拼接字符串使用 “+”即可，很方便。\n\n### 字符串的查找与替换\n\n```\n// 返回子字符串的位置，若没有，返回-1\nstr.indexOf(\"char\")\n\n// 从后向前检索\nstr.lastIndexOf(\"char\")\n\n// 替换字符串，将a替换为b\nstr.replace(a,b)\n```\n\n### 子字符串的截取\n\n```\nstr.slice(start, end) // 截取字符串（end索引不在截取范围之内）\n\nstr.substring(start, end) // 功能与slice一致\n\nstr.substr(start, len) // 从start处截取长为len的字符串\n```\n\n### 字符串分割为数组\n\n```\nstr.split(separate) // 把字符串分割为字符串数组，参数为分隔符\n```\n\n示例\n\n```\na = \"a,b,b,df,s\";\nconsole.log(a);\nb = a.split(',');\nconsole.log(b);\n```\n\n\n\n## 数值型：Number\n\n### 最大值与最小值\n\n```\nmax = Number.MAX_VALUE;\nmin = Number.MIN_VALUE;\n```\n\n### 注意点\n\n1、使用 Number 表示的变量超过了最大值，则会返回Infinity。`typeof Infinity`的返回结果是number。\n\n2、**NaN（Not a Number）**，非数值\n\n```\nconsole.log(\"a\" / 10);\t// NaN\nconsole.log(typeof NaN);\t// number\n```\n\n3、在JS中，**浮点数的运算无法保证较高的精度**\n\n\n\n## 布尔型：Boolean\n\n就是简单的true与false，与数字相加时，**true为1，false为0**\n\n\n\n## Null和Undefined\n\n### Null：空值\n\n专门用来表示空对象，同时`typeof null`会返回object。（**null视为空对象**）\n\n### undefined：未定义\n\n#### 1、变量已声明，但是没有赋值\n\n```\nvar a;\nconsole.log(typeof a); // undefined\n```\n\n#### 2、变量未定义\n\n```\nconsole.log(typeof a);\t// undefined\nconsole.log(a); // 打印结果：Uncaught ReferenceError: a is not defined\n```\n\n#### 3、函数无返回值\n\n如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。\n\n或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 `return undefined`。\n\n```\nfunction foo() {}\nconsole.log(foo()); // 打印结果：undefined\n```\n\n#### 4、调用函数时，未传参\n\n调用函数时，如果没有传参，那么，这个参数的值就是 undefined。\n\n```\nfunction foo(name) {\n    console.log(name);\n}\n\nfoo(); // 调用函数时，未传参。执行函数后的打印结果：undefined\n```\n\n### 两者之间的差别\n\n```\nconsole.log(null == undefined);\t\t// true\nconsole.log(null === undefined);\t// false\n```\n\n**和数字运算时，null相当于0，而undefined相当于NaN**\n\n\n\n## 类型转换\n\n### 其他类型-->String\n\n#### 1、通过字符串拼接隐式转换\n\n```\nvar a = 1;\na = a + '';\nconsole.log(typeof a);\t// string\n```\n\n#### 2、调用toString()方法\n\n```\n变量.toString()\n```\n\n该方法不会影响到原变量，它会将转换的结果返回，同时，null与undefined没有toString方法。\n\n#### 3、使用String()函数强制转换\n\n```\nString(变量)\n```\n\n- 对于 Number 和 Boolean 而言，本质上就是调用 toString()方法。\n\n- 对于 null 和 undefined，它会将 null 直接转换为 \"null\"。将 undefined 直接转换为 \"undefined\"。\n\n### 其他类型-->Number\n\n```\nparseInt(\"str\");\nparseFloat(\"str\");\n```\n\n### typeof总结\n\n| typeof 的代码写法 | 返回结果  |\n| :---------------- | :-------: |\n| typeof 数字       |  number   |\n| typeof 字符串     |  string   |\n| typeof 布尔型     |  boolean  |\n| typeof 对象       |  object   |\n| typeof 方法       | function  |\n| typeof null       |  object   |\n| typeof undefined  | undefined |\n","slug":"编程相关/JavaScript/1.1、JS基本数据类型","published":1,"updated":"2021-01-11T04:27:49.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobs005urwjs2zys3quz","content":"<h2 id=\"字符串：String\"><a href=\"#字符串：String\" class=\"headerlink\" title=\"字符串：String\"></a>字符串：String</h2><p>js中的字符串使用” “或者’ ‘进行包裹（跟python相同）。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">str1</span> = <span class=\"hljs-string\">\"str\"</span><span class=\"hljs-comment\">;</span><br><span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">'str'</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间（与Java中的String类很像）。</p>\n<p>如下，看上去str 的值变了，其实’aaaa’仍然保存在内存中，str只是改为指向了’bbbb’。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">var str</span> = <span class=\"hljs-string\">'aaaa'</span>;<br><span class=\"hljs-attribute\">str</span> = <span class=\"hljs-string\">'bbbb'</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串常用操作（长度、拼接）\"><a href=\"#字符串常用操作（长度、拼接）\" class=\"headerlink\" title=\"字符串常用操作（长度、拼接）\"></a>字符串常用操作（长度、拼接）</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">// 获取长度</span><br><span class=\"hljs-keyword\">str</span>.length<br></code></pre></td></tr></table></figure>\n\n<p>拼接字符串使用 “+”即可，很方便。</p>\n<h3 id=\"字符串的查找与替换\"><a href=\"#字符串的查找与替换\" class=\"headerlink\" title=\"字符串的查找与替换\"></a>字符串的查找与替换</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">// 返回子字符串的位置，若没有，返回-1</span><br><span class=\"hljs-keyword\">str</span>.indexOf(<span class=\"hljs-string\">\"char\"</span>)<br><br><span class=\"hljs-comment\">// 从后向前检索</span><br><span class=\"hljs-keyword\">str</span>.lastIndexOf(<span class=\"hljs-string\">\"char\"</span>)<br><br><span class=\"hljs-comment\">// 替换字符串，将a替换为b</span><br><span class=\"hljs-keyword\">str</span>.replace(a,b)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子字符串的截取\"><a href=\"#子字符串的截取\" class=\"headerlink\" title=\"子字符串的截取\"></a>子字符串的截取</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">str.<span class=\"hljs-keyword\">slice</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>) // 截取字符串（<span class=\"hljs-keyword\">end</span>索引不在截取范围之内）<br><br>str.substring(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>) // 功能与<span class=\"hljs-keyword\">slice</span>一致<br><br>str.substr(<span class=\"hljs-keyword\">start</span>, len) // 从<span class=\"hljs-keyword\">start</span>处截取长为len的字符串<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串分割为数组\"><a href=\"#字符串分割为数组\" class=\"headerlink\" title=\"字符串分割为数组\"></a>字符串分割为数组</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">str</span>.<span class=\"hljs-built_in\">split</span>(separate) <span class=\"hljs-comment\">// 把字符串分割为字符串数组，参数为分隔符</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\">a = <span class=\"hljs-string\">\"a,b,b,df,s\"</span>;<br>console.<span class=\"hljs-built_in\">log</span>(a);<br>b = a.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">','</span>);<br>console.<span class=\"hljs-built_in\">log</span>(b);<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数值型：Number\"><a href=\"#数值型：Number\" class=\"headerlink\" title=\"数值型：Number\"></a>数值型：Number</h2><h3 id=\"最大值与最小值\"><a href=\"#最大值与最小值\" class=\"headerlink\" title=\"最大值与最小值\"></a>最大值与最小值</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">max</span> = Number.MAX_VALUE<span class=\"hljs-comment\">;</span><br><span class=\"hljs-attr\">min</span> = Number.MIN_VALUE<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>1、使用 Number 表示的变量超过了最大值，则会返回Infinity。<code>typeof Infinity</code>的返回结果是number。</p>\n<p>2、<strong>NaN（Not a Number）</strong>，非数值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"a\"</span> / <span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// NaN</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">NaN</span>);\t<span class=\"hljs-comment\">// number</span><br></code></pre></td></tr></table></figure>\n\n<p>3、在JS中，<strong>浮点数的运算无法保证较高的精度</strong></p>\n<h2 id=\"布尔型：Boolean\"><a href=\"#布尔型：Boolean\" class=\"headerlink\" title=\"布尔型：Boolean\"></a>布尔型：Boolean</h2><p>就是简单的true与false，与数字相加时，<strong>true为1，false为0</strong></p>\n<h2 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h2><h3 id=\"Null：空值\"><a href=\"#Null：空值\" class=\"headerlink\" title=\"Null：空值\"></a>Null：空值</h3><p>专门用来表示空对象，同时<code>typeof null</code>会返回object。（<strong>null视为空对象</strong>）</p>\n<h3 id=\"undefined：未定义\"><a href=\"#undefined：未定义\" class=\"headerlink\" title=\"undefined：未定义\"></a>undefined：未定义</h3><h4 id=\"1、变量已声明，但是没有赋值\"><a href=\"#1、变量已声明，但是没有赋值\" class=\"headerlink\" title=\"1、变量已声明，但是没有赋值\"></a>1、变量已声明，但是没有赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> a); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、变量未定义\"><a href=\"#2、变量未定义\" class=\"headerlink\" title=\"2、变量未定义\"></a>2、变量未定义</h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">console.<span class=\"hljs-built_in\">log</span>(typeof <span class=\"hljs-keyword\">a</span>);<span class=\"hljs-comment\">\t// undefined</span><br>console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-keyword\">a</span>);<span class=\"hljs-comment\"> // 打印结果：Uncaught ReferenceError: a is not defined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、函数无返回值\"><a href=\"#3、函数无返回值\" class=\"headerlink\" title=\"3、函数无返回值\"></a>3、函数无返回值</h4><p>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。</p>\n<p>或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 <code>return undefined</code>。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">&#123;&#125;</span><br><span class=\"hljs-title\">console</span>.<span class=\"hljs-title\">log</span><span class=\"hljs-params\">(foo()</span>);</span> <span class=\"hljs-comment\">// 打印结果：undefined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、调用函数时，未传参\"><a href=\"#4、调用函数时，未传参\" class=\"headerlink\" title=\"4、调用函数时，未传参\"></a>4、调用函数时，未传参</h4><p>调用函数时，如果没有传参，那么，这个参数的值就是 undefined。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">name</span>)</span> <span class=\"hljs-comment\">&#123;<br>    console.log(name);<br>&#125;</span><br><br><span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>;</span> <span class=\"hljs-comment\">// 调用函数时，未传参。执行函数后的打印结果：undefined</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"两者之间的差别\"><a href=\"#两者之间的差别\" class=\"headerlink\" title=\"两者之间的差别\"></a>两者之间的差别</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>);\t\t<span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>);\t<span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>和数字运算时，null相当于0，而undefined相当于NaN</strong></p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"其他类型–-gt-String\"><a href=\"#其他类型–-gt-String\" class=\"headerlink\" title=\"其他类型–&gt;String\"></a>其他类型–&gt;String</h3><h4 id=\"1、通过字符串拼接隐式转换\"><a href=\"#1、通过字符串拼接隐式转换\" class=\"headerlink\" title=\"1、通过字符串拼接隐式转换\"></a>1、通过字符串拼接隐式转换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br>a = a + <span class=\"hljs-string\">''</span>;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> a);\t<span class=\"hljs-comment\">// string</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、调用toString-方法\"><a href=\"#2、调用toString-方法\" class=\"headerlink\" title=\"2、调用toString()方法\"></a>2、调用toString()方法</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">变量.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span><br></code></pre></td></tr></table></figure>\n\n<p>该方法不会影响到原变量，它会将转换的结果返回，同时，null与undefined没有toString方法。</p>\n<h4 id=\"3、使用String-函数强制转换\"><a href=\"#3、使用String-函数强制转换\" class=\"headerlink\" title=\"3、使用String()函数强制转换\"></a>3、使用String()函数强制转换</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">String</span><span class=\"hljs-params\">(变量)</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对于 Number 和 Boolean 而言，本质上就是调用 toString()方法。</p>\n</li>\n<li><p>对于 null 和 undefined，它会将 null 直接转换为 “null”。将 undefined 直接转换为 “undefined”。</p>\n</li>\n</ul>\n<h3 id=\"其他类型–-gt-Number\"><a href=\"#其他类型–-gt-Number\" class=\"headerlink\" title=\"其他类型–&gt;Number\"></a>其他类型–&gt;Number</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">parseInt(<span class=\"hljs-string\">\"str\"</span>)<span class=\"hljs-comment\">;</span><br>parseFloat(<span class=\"hljs-string\">\"str\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"typeof总结\"><a href=\"#typeof总结\" class=\"headerlink\" title=\"typeof总结\"></a>typeof总结</h3><table>\n<thead>\n<tr>\n<th align=\"left\">typeof 的代码写法</th>\n<th align=\"center\">返回结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof 数字</td>\n<td align=\"center\">number</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 字符串</td>\n<td align=\"center\">string</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 布尔型</td>\n<td align=\"center\">boolean</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 对象</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 方法</td>\n<td align=\"center\">function</td>\n</tr>\n<tr>\n<td align=\"left\">typeof null</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof undefined</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"字符串：String\"><a href=\"#字符串：String\" class=\"headerlink\" title=\"字符串：String\"></a>字符串：String</h2><p>js中的字符串使用” “或者’ ‘进行包裹（跟python相同）。</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">str1</span> = <span class=\"hljs-string\">\"str\"</span><span class=\"hljs-comment\">;</span><br><span class=\"hljs-attr\">str2</span> = <span class=\"hljs-string\">'str'</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"不可变性\"><a href=\"#不可变性\" class=\"headerlink\" title=\"不可变性\"></a>不可变性</h3><p>字符串里面的值不可被改变。虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间（与Java中的String类很像）。</p>\n<p>如下，看上去str 的值变了，其实’aaaa’仍然保存在内存中，str只是改为指向了’bbbb’。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">var str</span> = <span class=\"hljs-string\">'aaaa'</span>;<br><span class=\"hljs-attribute\">str</span> = <span class=\"hljs-string\">'bbbb'</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串常用操作（长度、拼接）\"><a href=\"#字符串常用操作（长度、拼接）\" class=\"headerlink\" title=\"字符串常用操作（长度、拼接）\"></a>字符串常用操作（长度、拼接）</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">// 获取长度</span><br><span class=\"hljs-keyword\">str</span>.length<br></code></pre></td></tr></table></figure>\n\n<p>拼接字符串使用 “+”即可，很方便。</p>\n<h3 id=\"字符串的查找与替换\"><a href=\"#字符串的查找与替换\" class=\"headerlink\" title=\"字符串的查找与替换\"></a>字符串的查找与替换</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-comment\">// 返回子字符串的位置，若没有，返回-1</span><br><span class=\"hljs-keyword\">str</span>.indexOf(<span class=\"hljs-string\">\"char\"</span>)<br><br><span class=\"hljs-comment\">// 从后向前检索</span><br><span class=\"hljs-keyword\">str</span>.lastIndexOf(<span class=\"hljs-string\">\"char\"</span>)<br><br><span class=\"hljs-comment\">// 替换字符串，将a替换为b</span><br><span class=\"hljs-keyword\">str</span>.replace(a,b)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"子字符串的截取\"><a href=\"#子字符串的截取\" class=\"headerlink\" title=\"子字符串的截取\"></a>子字符串的截取</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">str.<span class=\"hljs-keyword\">slice</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>) // 截取字符串（<span class=\"hljs-keyword\">end</span>索引不在截取范围之内）<br><br>str.substring(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>) // 功能与<span class=\"hljs-keyword\">slice</span>一致<br><br>str.substr(<span class=\"hljs-keyword\">start</span>, len) // 从<span class=\"hljs-keyword\">start</span>处截取长为len的字符串<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符串分割为数组\"><a href=\"#字符串分割为数组\" class=\"headerlink\" title=\"字符串分割为数组\"></a>字符串分割为数组</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">str</span>.<span class=\"hljs-built_in\">split</span>(separate) <span class=\"hljs-comment\">// 把字符串分割为字符串数组，参数为分隔符</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\">a = <span class=\"hljs-string\">\"a,b,b,df,s\"</span>;<br>console.<span class=\"hljs-built_in\">log</span>(a);<br>b = a.<span class=\"hljs-built_in\">split</span>(<span class=\"hljs-string\">','</span>);<br>console.<span class=\"hljs-built_in\">log</span>(b);<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"数值型：Number\"><a href=\"#数值型：Number\" class=\"headerlink\" title=\"数值型：Number\"></a>数值型：Number</h2><h3 id=\"最大值与最小值\"><a href=\"#最大值与最小值\" class=\"headerlink\" title=\"最大值与最小值\"></a>最大值与最小值</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">max</span> = Number.MAX_VALUE<span class=\"hljs-comment\">;</span><br><span class=\"hljs-attr\">min</span> = Number.MIN_VALUE<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h3><p>1、使用 Number 表示的变量超过了最大值，则会返回Infinity。<code>typeof Infinity</code>的返回结果是number。</p>\n<p>2、<strong>NaN（Not a Number）</strong>，非数值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"a\"</span> / <span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// NaN</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">NaN</span>);\t<span class=\"hljs-comment\">// number</span><br></code></pre></td></tr></table></figure>\n\n<p>3、在JS中，<strong>浮点数的运算无法保证较高的精度</strong></p>\n<h2 id=\"布尔型：Boolean\"><a href=\"#布尔型：Boolean\" class=\"headerlink\" title=\"布尔型：Boolean\"></a>布尔型：Boolean</h2><p>就是简单的true与false，与数字相加时，<strong>true为1，false为0</strong></p>\n<h2 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h2><h3 id=\"Null：空值\"><a href=\"#Null：空值\" class=\"headerlink\" title=\"Null：空值\"></a>Null：空值</h3><p>专门用来表示空对象，同时<code>typeof null</code>会返回object。（<strong>null视为空对象</strong>）</p>\n<h3 id=\"undefined：未定义\"><a href=\"#undefined：未定义\" class=\"headerlink\" title=\"undefined：未定义\"></a>undefined：未定义</h3><h4 id=\"1、变量已声明，但是没有赋值\"><a href=\"#1、变量已声明，但是没有赋值\" class=\"headerlink\" title=\"1、变量已声明，但是没有赋值\"></a>1、变量已声明，但是没有赋值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> a); <span class=\"hljs-comment\">// undefined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、变量未定义\"><a href=\"#2、变量未定义\" class=\"headerlink\" title=\"2、变量未定义\"></a>2、变量未定义</h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">console.<span class=\"hljs-built_in\">log</span>(typeof <span class=\"hljs-keyword\">a</span>);<span class=\"hljs-comment\">\t// undefined</span><br>console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-keyword\">a</span>);<span class=\"hljs-comment\"> // 打印结果：Uncaught ReferenceError: a is not defined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"3、函数无返回值\"><a href=\"#3、函数无返回值\" class=\"headerlink\" title=\"3、函数无返回值\"></a>3、函数无返回值</h4><p>如果一个函数没有返回值，那么，这个函数的返回值就是 undefined。</p>\n<p>或者，也可以这样理解：在定义一个函数时，如果末尾没有 return 语句，那么，其实就是 <code>return undefined</code>。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">&#123;&#125;</span><br><span class=\"hljs-title\">console</span>.<span class=\"hljs-title\">log</span><span class=\"hljs-params\">(foo()</span>);</span> <span class=\"hljs-comment\">// 打印结果：undefined</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4、调用函数时，未传参\"><a href=\"#4、调用函数时，未传参\" class=\"headerlink\" title=\"4、调用函数时，未传参\"></a>4、调用函数时，未传参</h4><p>调用函数时，如果没有传参，那么，这个参数的值就是 undefined。</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">name</span>)</span> <span class=\"hljs-comment\">&#123;<br>    console.log(name);<br>&#125;</span><br><br><span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>;</span> <span class=\"hljs-comment\">// 调用函数时，未传参。执行函数后的打印结果：undefined</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"两者之间的差别\"><a href=\"#两者之间的差别\" class=\"headerlink\" title=\"两者之间的差别\"></a>两者之间的差别</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>);\t\t<span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>);\t<span class=\"hljs-regexp\">//</span> <span class=\"hljs-literal\">false</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>和数字运算时，null相当于0，而undefined相当于NaN</strong></p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><h3 id=\"其他类型–-gt-String\"><a href=\"#其他类型–-gt-String\" class=\"headerlink\" title=\"其他类型–&gt;String\"></a>其他类型–&gt;String</h3><h4 id=\"1、通过字符串拼接隐式转换\"><a href=\"#1、通过字符串拼接隐式转换\" class=\"headerlink\" title=\"1、通过字符串拼接隐式转换\"></a>1、通过字符串拼接隐式转换</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;<br>a = a + <span class=\"hljs-string\">''</span>;<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> a);\t<span class=\"hljs-comment\">// string</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2、调用toString-方法\"><a href=\"#2、调用toString-方法\" class=\"headerlink\" title=\"2、调用toString()方法\"></a>2、调用toString()方法</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">变量.<span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">String()</span><br></code></pre></td></tr></table></figure>\n\n<p>该方法不会影响到原变量，它会将转换的结果返回，同时，null与undefined没有toString方法。</p>\n<h4 id=\"3、使用String-函数强制转换\"><a href=\"#3、使用String-函数强制转换\" class=\"headerlink\" title=\"3、使用String()函数强制转换\"></a>3、使用String()函数强制转换</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">String</span><span class=\"hljs-params\">(变量)</span></span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对于 Number 和 Boolean 而言，本质上就是调用 toString()方法。</p>\n</li>\n<li><p>对于 null 和 undefined，它会将 null 直接转换为 “null”。将 undefined 直接转换为 “undefined”。</p>\n</li>\n</ul>\n<h3 id=\"其他类型–-gt-Number\"><a href=\"#其他类型–-gt-Number\" class=\"headerlink\" title=\"其他类型–&gt;Number\"></a>其他类型–&gt;Number</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">parseInt(<span class=\"hljs-string\">\"str\"</span>)<span class=\"hljs-comment\">;</span><br>parseFloat(<span class=\"hljs-string\">\"str\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"typeof总结\"><a href=\"#typeof总结\" class=\"headerlink\" title=\"typeof总结\"></a>typeof总结</h3><table>\n<thead>\n<tr>\n<th align=\"left\">typeof 的代码写法</th>\n<th align=\"center\">返回结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">typeof 数字</td>\n<td align=\"center\">number</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 字符串</td>\n<td align=\"center\">string</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 布尔型</td>\n<td align=\"center\">boolean</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 对象</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof 方法</td>\n<td align=\"center\">function</td>\n</tr>\n<tr>\n<td align=\"left\">typeof null</td>\n<td align=\"center\">object</td>\n</tr>\n<tr>\n<td align=\"left\">typeof undefined</td>\n<td align=\"center\">undefined</td>\n</tr>\n</tbody></table>\n"},{"title":"1.2、JS内置对象使用","date":"2020-07-30T13:44:41.000Z","fileName":"js-buildin-obj","_content":"\n\n\n## 数组\n\n数组（Array）是内置对象（typeof返回值为object）。数组中的元素可以是任意的数据类型，也可以是对象，也可以是函数，也可以是数组\n\n### 创建数组\n\n```\nvar arr = [];\nvar arr = [1, 2];\n\nvar arr = new Array();\t// 创建一个空数组\nvar arr = new Array(2);\t// 创建一个长度为2的数组\nvar arr = new Array(1,2,3)\t// 创建一个经过初始化的数组\n```\n\n### 元素的添加与删除\n\n在最后添加与删除（**push  pop**）\n\n```\n// 向数组后插入一个或多个元素\n新数组长度 = 数组.push(元素);\n\n// 删除数组中最后一个元素\n被删除的元素 = 数组.pop();\n```\n\n在最前添加与删除（**unshift  shift**）\n\n```\n新数组的长度 = 数组.unshift(元素);\n\n被删除的元素 = 数组.shift();\n```\n\n### 数组的合并与拆分\n\n数组的合并（使用cancat函数或使用...语法）\n\n```\n// 连接数组1和作为参数的数组\n新数组 = 数组1.concat(数组2, 数组3 ...);\n```\n\n```\na = [1,2,3]\nb = [3,4,5,...a]\nalert(b)\t// [3,4,5,1,2,3]\n```\n\n\n\n\n\n### 基本操作\n\n```\n// 颠倒数组\narray.reverse()\t\n\n// 对数组进行排序（默认升序）\narray.sort()\n\n// 传入比较函数，变为降序\n// 作为参数的函数返回值大于0，则元素会交换位置\narray.sort(function(a, b) {return b-a})\narray.slice(start, end)\t// 从[start, end)的切片\n```\n\n\n\n转化为字符串，默认无参数则用逗号“,”连接。\n\n```\nstr = array.join()\nstr = array.join(\"\")\t// 无连接符号直接连接\n```\n\n\n\n```\n// 删除从index处开始的零个或多个元素\narray.splice(index, count)\n// 在index后插入值\narray.splice(index, 0, item1.....)\n// 替换\narray.splice(index, count, item1.....)\n```\n\n### 元素的查找\n\n```\n// 查找值为value的索引，没有则返回-1\narray.indexOf(value)\n\n// 找出第一个满足「指定条件返回 true」的元素\nfind(func)\n\n// 找出第一个满足「指定条件返回 true」的元素的 index\nfindIndex(func)\n```\n\n### 遍历数组\n\n```\n\n```\n\n\n\n\n\n## Math\n\nMath 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是**直接使用里面的属性和方法**即可（数学工具类）。\n\n### 主要方法\n\n| 方法              | 描述                                       | 备注              |\n| :---------------- | :----------------------------------------- | :---------------- |\n| Math.PI           | 圆周率                                     | Math对象的属性    |\n| Math.abs()        | **返回绝对值**                             |                   |\n| Math.random()     | 生成0-1之间的**随机浮点数**                | 取值范围是 [0，1) |\n| Math.floor()      | **向下取整**（往小取值）                   |                   |\n| Math.ceil()       | **向上取整**（往大取值）                   |                   |\n| Math.round()      | 四舍五入取整（正数四舍五入，负数五舍六入） |                   |\n| Math.max(x, y, z) | 返回多个数中的最大值                       |                   |\n| Math.min(x, y, z) | 返回多个数中的最小值                       |                   |\n| Math.pow(x,y)     | 乘方：返回 x 的 y 次幂                     |                   |\n| Math.sqrt()       | 开方：对一个数进行开方运算                 |                   |\n\n\n\n\n\n","source":"_posts/编程相关/JavaScript/1.2、JS内置对象使用.md","raw":"---\ntitle: 1.2、JS内置对象使用\ndate: 2020-07-30 21:44:41\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-buildin-obj\n---\n\n\n\n## 数组\n\n数组（Array）是内置对象（typeof返回值为object）。数组中的元素可以是任意的数据类型，也可以是对象，也可以是函数，也可以是数组\n\n### 创建数组\n\n```\nvar arr = [];\nvar arr = [1, 2];\n\nvar arr = new Array();\t// 创建一个空数组\nvar arr = new Array(2);\t// 创建一个长度为2的数组\nvar arr = new Array(1,2,3)\t// 创建一个经过初始化的数组\n```\n\n### 元素的添加与删除\n\n在最后添加与删除（**push  pop**）\n\n```\n// 向数组后插入一个或多个元素\n新数组长度 = 数组.push(元素);\n\n// 删除数组中最后一个元素\n被删除的元素 = 数组.pop();\n```\n\n在最前添加与删除（**unshift  shift**）\n\n```\n新数组的长度 = 数组.unshift(元素);\n\n被删除的元素 = 数组.shift();\n```\n\n### 数组的合并与拆分\n\n数组的合并（使用cancat函数或使用...语法）\n\n```\n// 连接数组1和作为参数的数组\n新数组 = 数组1.concat(数组2, 数组3 ...);\n```\n\n```\na = [1,2,3]\nb = [3,4,5,...a]\nalert(b)\t// [3,4,5,1,2,3]\n```\n\n\n\n\n\n### 基本操作\n\n```\n// 颠倒数组\narray.reverse()\t\n\n// 对数组进行排序（默认升序）\narray.sort()\n\n// 传入比较函数，变为降序\n// 作为参数的函数返回值大于0，则元素会交换位置\narray.sort(function(a, b) {return b-a})\narray.slice(start, end)\t// 从[start, end)的切片\n```\n\n\n\n转化为字符串，默认无参数则用逗号“,”连接。\n\n```\nstr = array.join()\nstr = array.join(\"\")\t// 无连接符号直接连接\n```\n\n\n\n```\n// 删除从index处开始的零个或多个元素\narray.splice(index, count)\n// 在index后插入值\narray.splice(index, 0, item1.....)\n// 替换\narray.splice(index, count, item1.....)\n```\n\n### 元素的查找\n\n```\n// 查找值为value的索引，没有则返回-1\narray.indexOf(value)\n\n// 找出第一个满足「指定条件返回 true」的元素\nfind(func)\n\n// 找出第一个满足「指定条件返回 true」的元素的 index\nfindIndex(func)\n```\n\n### 遍历数组\n\n```\n\n```\n\n\n\n\n\n## Math\n\nMath 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是**直接使用里面的属性和方法**即可（数学工具类）。\n\n### 主要方法\n\n| 方法              | 描述                                       | 备注              |\n| :---------------- | :----------------------------------------- | :---------------- |\n| Math.PI           | 圆周率                                     | Math对象的属性    |\n| Math.abs()        | **返回绝对值**                             |                   |\n| Math.random()     | 生成0-1之间的**随机浮点数**                | 取值范围是 [0，1) |\n| Math.floor()      | **向下取整**（往小取值）                   |                   |\n| Math.ceil()       | **向上取整**（往大取值）                   |                   |\n| Math.round()      | 四舍五入取整（正数四舍五入，负数五舍六入） |                   |\n| Math.max(x, y, z) | 返回多个数中的最大值                       |                   |\n| Math.min(x, y, z) | 返回多个数中的最小值                       |                   |\n| Math.pow(x,y)     | 乘方：返回 x 的 y 次幂                     |                   |\n| Math.sqrt()       | 开方：对一个数进行开方运算                 |                   |\n\n\n\n\n\n","slug":"编程相关/JavaScript/1.2、JS内置对象使用","published":1,"updated":"2021-01-11T04:28:03.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobu005wrwjsa89y8d2l","content":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数组（Array）是内置对象（typeof返回值为object）。数组中的元素可以是任意的数据类型，也可以是对象，也可以是函数，也可以是数组</p>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">var</span> arr = [];<br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];<br><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>();\t<span class=\"hljs-comment\">// 创建一个空数组</span><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>(<span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// 创建一个长度为2的数组</span><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// 创建一个经过初始化的数组</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素的添加与删除\"><a href=\"#元素的添加与删除\" class=\"headerlink\" title=\"元素的添加与删除\"></a>元素的添加与删除</h3><p>在最后添加与删除（<strong>push  pop</strong>）</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\"><span class=\"hljs-comment\">// 向数组后插入一个或多个元素</span><br>新数组长度 = 数组.<span class=\"hljs-keyword\">push</span>(元素);<br><br><span class=\"hljs-comment\">// 删除数组中最后一个元素</span><br>被删除的元素 = 数组.<span class=\"hljs-keyword\">pop</span>();<br></code></pre></td></tr></table></figure>\n\n<p>在最前添加与删除（<strong>unshift  shift</strong>）</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">新数组的长度 = 数组.unshift(元素)<span class=\"hljs-comment\">;</span><br><br>被删除的元素 = 数组.shift()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数组的合并与拆分\"><a href=\"#数组的合并与拆分\" class=\"headerlink\" title=\"数组的合并与拆分\"></a>数组的合并与拆分</h3><p>数组的合并（使用cancat函数或使用…语法）</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 连接数组1和作为参数的数组</span><br>新数组 = 数组<span class=\"hljs-number\">1.</span>concat(数组<span class=\"hljs-number\">2</span>, 数组<span class=\"hljs-number\">3</span> ...);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br>b = [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,...a]<br>alert(b)\t<span class=\"hljs-comment\">// [3,4,5,1,2,3]</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-comment\">// 颠倒数组</span><br><span class=\"hljs-keyword\">array</span>.reverse()\t<br><br><span class=\"hljs-comment\">// 对数组进行排序（默认升序）</span><br><span class=\"hljs-keyword\">array</span>.sort()<br><br><span class=\"hljs-comment\">// 传入比较函数，变为降序</span><br><span class=\"hljs-comment\">// 作为参数的函数返回值大于0，则元素会交换位置</span><br><span class=\"hljs-keyword\">array</span>.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span> <span class=\"hljs-comment\">&#123;return b-a&#125;</span>)<br><span class=\"hljs-title\">array</span>.<span class=\"hljs-title\">slice</span><span class=\"hljs-params\">(start, <span class=\"hljs-keyword\">end</span>)</span>\t<span class=\"hljs-comment\">// 从[start, end)的切片</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>转化为字符串，默认无参数则用逗号“,”连接。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">str = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-keyword\">join</span>()<br>str = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"\"</span>)\t<span class=\"hljs-comment\">// 无连接符号直接连接</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">// 删除从<span class=\"hljs-keyword\">index</span>处开始的零个或多个元素<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">count</span>)<br>// 在<span class=\"hljs-keyword\">index</span>后插入值<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-number\">0</span>, item1.....)<br>// 替换<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">count</span>, item1.....)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素的查找\"><a href=\"#元素的查找\" class=\"headerlink\" title=\"元素的查找\"></a>元素的查找</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">// 查找值为value的索引，没有则返回-1</span><br>array.indexOf(value)<br><br><span class=\"hljs-comment\">// 找出第一个满足「指定条件返回 true」的元素</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">find</span><span class=\"hljs-params\">(func)</span></span><br><br><span class=\"hljs-comment\">// 找出第一个满足「指定条件返回 true」的元素的 index</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">findIndex</span><span class=\"hljs-params\">(func)</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h2><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是<strong>直接使用里面的属性和方法</strong>即可（数学工具类）。</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Math.PI</td>\n<td align=\"left\">圆周率</td>\n<td align=\"left\">Math对象的属性</td>\n</tr>\n<tr>\n<td align=\"left\">Math.abs()</td>\n<td align=\"left\"><strong>返回绝对值</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.random()</td>\n<td align=\"left\">生成0-1之间的<strong>随机浮点数</strong></td>\n<td align=\"left\">取值范围是 [0，1)</td>\n</tr>\n<tr>\n<td align=\"left\">Math.floor()</td>\n<td align=\"left\"><strong>向下取整</strong>（往小取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.ceil()</td>\n<td align=\"left\"><strong>向上取整</strong>（往大取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.round()</td>\n<td align=\"left\">四舍五入取整（正数四舍五入，负数五舍六入）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.max(x, y, z)</td>\n<td align=\"left\">返回多个数中的最大值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.min(x, y, z)</td>\n<td align=\"left\">返回多个数中的最小值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.pow(x,y)</td>\n<td align=\"left\">乘方：返回 x 的 y 次幂</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.sqrt()</td>\n<td align=\"left\">开方：对一个数进行开方运算</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数组（Array）是内置对象（typeof返回值为object）。数组中的元素可以是任意的数据类型，也可以是对象，也可以是函数，也可以是数组</p>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">var</span> arr = [];<br><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>];<br><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>();\t<span class=\"hljs-comment\">// 创建一个空数组</span><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>(<span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// 创建一个长度为2的数组</span><br><span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Array</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)\t<span class=\"hljs-comment\">// 创建一个经过初始化的数组</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素的添加与删除\"><a href=\"#元素的添加与删除\" class=\"headerlink\" title=\"元素的添加与删除\"></a>元素的添加与删除</h3><p>在最后添加与删除（<strong>push  pop</strong>）</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\"><span class=\"hljs-comment\">// 向数组后插入一个或多个元素</span><br>新数组长度 = 数组.<span class=\"hljs-keyword\">push</span>(元素);<br><br><span class=\"hljs-comment\">// 删除数组中最后一个元素</span><br>被删除的元素 = 数组.<span class=\"hljs-keyword\">pop</span>();<br></code></pre></td></tr></table></figure>\n\n<p>在最前添加与删除（<strong>unshift  shift</strong>）</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">新数组的长度 = 数组.unshift(元素)<span class=\"hljs-comment\">;</span><br><br>被删除的元素 = 数组.shift()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"数组的合并与拆分\"><a href=\"#数组的合并与拆分\" class=\"headerlink\" title=\"数组的合并与拆分\"></a>数组的合并与拆分</h3><p>数组的合并（使用cancat函数或使用…语法）</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 连接数组1和作为参数的数组</span><br>新数组 = 数组<span class=\"hljs-number\">1.</span>concat(数组<span class=\"hljs-number\">2</span>, 数组<span class=\"hljs-number\">3</span> ...);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]<br>b = [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,...a]<br>alert(b)\t<span class=\"hljs-comment\">// [3,4,5,1,2,3]</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-comment\">// 颠倒数组</span><br><span class=\"hljs-keyword\">array</span>.reverse()\t<br><br><span class=\"hljs-comment\">// 对数组进行排序（默认升序）</span><br><span class=\"hljs-keyword\">array</span>.sort()<br><br><span class=\"hljs-comment\">// 传入比较函数，变为降序</span><br><span class=\"hljs-comment\">// 作为参数的函数返回值大于0，则元素会交换位置</span><br><span class=\"hljs-keyword\">array</span>.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(a, b)</span> <span class=\"hljs-comment\">&#123;return b-a&#125;</span>)<br><span class=\"hljs-title\">array</span>.<span class=\"hljs-title\">slice</span><span class=\"hljs-params\">(start, <span class=\"hljs-keyword\">end</span>)</span>\t<span class=\"hljs-comment\">// 从[start, end)的切片</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>转化为字符串，默认无参数则用逗号“,”连接。</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">str = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-keyword\">join</span>()<br>str = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"\"</span>)\t<span class=\"hljs-comment\">// 无连接符号直接连接</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\">// 删除从<span class=\"hljs-keyword\">index</span>处开始的零个或多个元素<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">count</span>)<br>// 在<span class=\"hljs-keyword\">index</span>后插入值<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-number\">0</span>, item1.....)<br>// 替换<br><span class=\"hljs-keyword\">array</span>.splice(<span class=\"hljs-keyword\">index</span>, <span class=\"hljs-built_in\">count</span>, item1.....)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元素的查找\"><a href=\"#元素的查找\" class=\"headerlink\" title=\"元素的查找\"></a>元素的查找</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">// 查找值为value的索引，没有则返回-1</span><br>array.indexOf(value)<br><br><span class=\"hljs-comment\">// 找出第一个满足「指定条件返回 true」的元素</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">find</span><span class=\"hljs-params\">(func)</span></span><br><br><span class=\"hljs-comment\">// 找出第一个满足「指定条件返回 true」的元素的 index</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">findIndex</span><span class=\"hljs-params\">(func)</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"遍历数组\"><a href=\"#遍历数组\" class=\"headerlink\" title=\"遍历数组\"></a>遍历数组</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h2><p>Math 和其他的对象不同，它不是一个构造函数，不需要创建对象。所以我们不需要 通过 new 来调用，而是<strong>直接使用里面的属性和方法</strong>即可（数学工具类）。</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Math.PI</td>\n<td align=\"left\">圆周率</td>\n<td align=\"left\">Math对象的属性</td>\n</tr>\n<tr>\n<td align=\"left\">Math.abs()</td>\n<td align=\"left\"><strong>返回绝对值</strong></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.random()</td>\n<td align=\"left\">生成0-1之间的<strong>随机浮点数</strong></td>\n<td align=\"left\">取值范围是 [0，1)</td>\n</tr>\n<tr>\n<td align=\"left\">Math.floor()</td>\n<td align=\"left\"><strong>向下取整</strong>（往小取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.ceil()</td>\n<td align=\"left\"><strong>向上取整</strong>（往大取值）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.round()</td>\n<td align=\"left\">四舍五入取整（正数四舍五入，负数五舍六入）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.max(x, y, z)</td>\n<td align=\"left\">返回多个数中的最大值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.min(x, y, z)</td>\n<td align=\"left\">返回多个数中的最小值</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.pow(x,y)</td>\n<td align=\"left\">乘方：返回 x 的 y 次幂</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Math.sqrt()</td>\n<td align=\"left\">开方：对一个数进行开方运算</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n"},{"title":"1.3、JS中的类与对象","date":"2020-07-30T14:51:57.000Z","fileName":"js-class-object","_content":"\n## 创建自定义对象\n\n### 使用键值对创建\n\n举例如下\n\n```\nvar obj1 = {\n\t// 成员\n\tname: \"ziye\",\n\t// 嵌套的对象\n\tobj2: {\n\t\tname: \"gg\"\n\t}\n\t// 方法\n\tfunc1: function() {\n\t\talert(\"gg\")\n\t}\n}\n```\n\n### 工厂模式\n\n即**使用一个函数将创建好的对象作为返回值**，举例如下\n\n```\nfunction createObj(name) {\n\t// 创建一个对象\n\tvar obj = new Object();\n\t// 向对象中添加属性\n\tobj.name = name;\n\tobj.func = function() {\n\t\talert(this.name);\n\t}\n\t// 将创建的对象返回\n\treturn obj;\n}\n```\n\n\n\n### 构造函数\n\n是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 **new** 一起使用才有意义。是js中从前最通用的构建构造函数的方法，**其中this指的是当前对象的实例**\n\n```\nfunction Obj(name) {\n\tthis.name = name;\n\tthis.func = function() {\n\t\talert(this.name);\n\t};\n}\n\nvar o1 = new Obj(\"xxx\");\n```\n\n## JS原型对象（prototype）\n\n所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。\n\n### 添加属性和方法\n\n```\nObj.prototype.attr = newValue;\nObj.prototype.func = function() {}\n```\n\n","source":"_posts/编程相关/JavaScript/1.3、JS中的类与对象.md","raw":"---\ntitle: 1.3、JS中的类与对象\ndate: 2020-07-30 22:51:57\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-class-object\n---\n\n## 创建自定义对象\n\n### 使用键值对创建\n\n举例如下\n\n```\nvar obj1 = {\n\t// 成员\n\tname: \"ziye\",\n\t// 嵌套的对象\n\tobj2: {\n\t\tname: \"gg\"\n\t}\n\t// 方法\n\tfunc1: function() {\n\t\talert(\"gg\")\n\t}\n}\n```\n\n### 工厂模式\n\n即**使用一个函数将创建好的对象作为返回值**，举例如下\n\n```\nfunction createObj(name) {\n\t// 创建一个对象\n\tvar obj = new Object();\n\t// 向对象中添加属性\n\tobj.name = name;\n\tobj.func = function() {\n\t\talert(this.name);\n\t}\n\t// 将创建的对象返回\n\treturn obj;\n}\n```\n\n\n\n### 构造函数\n\n是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 **new** 一起使用才有意义。是js中从前最通用的构建构造函数的方法，**其中this指的是当前对象的实例**\n\n```\nfunction Obj(name) {\n\tthis.name = name;\n\tthis.func = function() {\n\t\talert(this.name);\n\t};\n}\n\nvar o1 = new Obj(\"xxx\");\n```\n\n## JS原型对象（prototype）\n\n所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。\n\n### 添加属性和方法\n\n```\nObj.prototype.attr = newValue;\nObj.prototype.func = function() {}\n```\n\n","slug":"编程相关/JavaScript/1.3、JS中的类与对象","published":1,"updated":"2021-01-11T04:28:17.286Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobv005zrwjsassmcjr7","content":"<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><h3 id=\"使用键值对创建\"><a href=\"#使用键值对创建\" class=\"headerlink\" title=\"使用键值对创建\"></a>使用键值对创建</h3><p>举例如下</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>\t<span class=\"hljs-comment\">// 成员</span><br>\tname: <span class=\"hljs-string\">\"ziye\"</span>,<br>\t<span class=\"hljs-comment\">// 嵌套的对象</span><br>\tobj2: &#123;<br>\t\tname: <span class=\"hljs-string\">\"gg\"</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 方法</span><br>\tfunc1: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\talert(<span class=\"hljs-string\">\"gg\"</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>即<strong>使用一个函数将创建好的对象作为返回值</strong>，举例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createObj</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>\t<span class=\"hljs-comment\">// 创建一个对象</span><br>\t<span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();<br>\t<span class=\"hljs-comment\">// 向对象中添加属性</span><br>\tobj.name = name;<br>\tobj.func = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t\talert(<span class=\"hljs-keyword\">this</span>.name);<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 将创建的对象返回</span><br>\t<span class=\"hljs-keyword\">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 <strong>new</strong> 一起使用才有意义。是js中从前最通用的构建构造函数的方法，<strong>其中this指的是当前对象的实例</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Obj</span><span class=\"hljs-params\">(name)</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">this</span>.name = name;<br>\t<span class=\"hljs-keyword\">this</span>.func = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\talert(<span class=\"hljs-keyword\">this</span>.name);<br>\t&#125;;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> o1 = <span class=\"hljs-keyword\">new</span> Obj(<span class=\"hljs-string\">\"xxx\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JS原型对象（prototype）\"><a href=\"#JS原型对象（prototype）\" class=\"headerlink\" title=\"JS原型对象（prototype）\"></a>JS原型对象（prototype）</h2><p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。</p>\n<h3 id=\"添加属性和方法\"><a href=\"#添加属性和方法\" class=\"headerlink\" title=\"添加属性和方法\"></a>添加属性和方法</h3><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-type\">Obj</span>.proto<span class=\"hljs-keyword\">type</span>.attr = newValue;<br><span class=\"hljs-type\">Obj</span>.proto<span class=\"hljs-keyword\">type</span>.func = function() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><h3 id=\"使用键值对创建\"><a href=\"#使用键值对创建\" class=\"headerlink\" title=\"使用键值对创建\"></a>使用键值对创建</h3><p>举例如下</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">var</span> obj1 = &#123;<br>\t<span class=\"hljs-comment\">// 成员</span><br>\tname: <span class=\"hljs-string\">\"ziye\"</span>,<br>\t<span class=\"hljs-comment\">// 嵌套的对象</span><br>\tobj2: &#123;<br>\t\tname: <span class=\"hljs-string\">\"gg\"</span><br>\t&#125;<br>\t<span class=\"hljs-comment\">// 方法</span><br>\tfunc1: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\talert(<span class=\"hljs-string\">\"gg\"</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><p>即<strong>使用一个函数将创建好的对象作为返回值</strong>，举例如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createObj</span>(<span class=\"hljs-params\">name</span>) </span>&#123;<br>\t<span class=\"hljs-comment\">// 创建一个对象</span><br>\t<span class=\"hljs-keyword\">var</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Object</span>();<br>\t<span class=\"hljs-comment\">// 向对象中添加属性</span><br>\tobj.name = name;<br>\tobj.func = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>\t\talert(<span class=\"hljs-keyword\">this</span>.name);<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 将创建的对象返回</span><br>\t<span class=\"hljs-keyword\">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>是一种特殊的函数，主要用来创建和初始化对象，也就是为对象的成员变量赋初始值。它与 <strong>new</strong> 一起使用才有意义。是js中从前最通用的构建构造函数的方法，<strong>其中this指的是当前对象的实例</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Obj</span><span class=\"hljs-params\">(name)</span> </span>&#123;<br>\t<span class=\"hljs-keyword\">this</span>.name = name;<br>\t<span class=\"hljs-keyword\">this</span>.func = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\talert(<span class=\"hljs-keyword\">this</span>.name);<br>\t&#125;;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> o1 = <span class=\"hljs-keyword\">new</span> Obj(<span class=\"hljs-string\">\"xxx\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JS原型对象（prototype）\"><a href=\"#JS原型对象（prototype）\" class=\"headerlink\" title=\"JS原型对象（prototype）\"></a>JS原型对象（prototype）</h2><p>所有的 JavaScript 对象都会从一个 prototype（原型对象）中继承属性和方法。</p>\n<h3 id=\"添加属性和方法\"><a href=\"#添加属性和方法\" class=\"headerlink\" title=\"添加属性和方法\"></a>添加属性和方法</h3><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-type\">Obj</span>.proto<span class=\"hljs-keyword\">type</span>.attr = newValue;<br><span class=\"hljs-type\">Obj</span>.proto<span class=\"hljs-keyword\">type</span>.func = function() &#123;&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"1、JS基础","date":"2020-07-29T12:14:04.000Z","fileName":"js-basic-grammer","_content":"\n## 基本概念\n\n### 语言特点\n\n1、解释性语言\n\n2、单线程\n\n3、遵从ECMAScript标准\n\n对换行、缩进、空格不敏感。每一条语句以分号结尾。（分号不是必须加，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源）\n\n\n\n### JavaScript组成\n\nJavaScript基础分为三个部分：\n\n- **ECMAScript**：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。\n\n- **DOM**：文档对象模型（Document object Model），操作**网页上的元素**的API。比如让盒子移动、变色、轮播图等。\n\n- **BOM**：浏览器对象模型（Browser Object Model），操作**浏览器部分功能**的API。比如让浏览器自动滚动。\n\n\n\n### 输入输出\n\nJavaScript中的输入输出主要用于调试\n\n1、弹出警告框：**alert(\"str\")**\n\n2、控制台输出：**console.log(\"str\")**\n\n3、弹出输入框：**var a = prompt(\"str\")**\n\n\n\n## 基本语法\n\n### 变量基本类型\n\nES6前，使用`var`关键字来声明一个变量\n\n**JS中一共有六种数据类型：**\n\n- **基本数据类型（值类型，传值）**：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。\n- **引用数据类型（引用类型，传址）**：Object 对象（除去五种基本数据类型之外，其他的，都称之为 Object类型）。\n\n### 运算符\n\nJS中运算符比较特殊的是`==`与`===`。\n\n其中，`==`这个符号会自动进行隐式转换，将不同的数据类型，转为相同类型进行比较（大部分情况下，都是转换为数字）。而`===`这个符号在进行比较时不会进行类型转换，是绝对等于。\n\n\n\n\n\n### debug方法\n\nJavaScript程序中添加断点，使用debugger。示例如下：\n\n```\n<script>\n    var a = [1,2,3,4,5];\n    for(i=0;i<5;i++){\n        console.log(a[i]);\n        debugger;\n    }\n</script>\n```\n\n刷新Google页面即可进行debug","source":"_posts/编程相关/JavaScript/1、JS基础.md","raw":"---\ntitle: 1、JS基础\ndate: 2020-07-29 20:14:04\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-basic-grammer\n---\n\n## 基本概念\n\n### 语言特点\n\n1、解释性语言\n\n2、单线程\n\n3、遵从ECMAScript标准\n\n对换行、缩进、空格不敏感。每一条语句以分号结尾。（分号不是必须加，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源）\n\n\n\n### JavaScript组成\n\nJavaScript基础分为三个部分：\n\n- **ECMAScript**：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。\n\n- **DOM**：文档对象模型（Document object Model），操作**网页上的元素**的API。比如让盒子移动、变色、轮播图等。\n\n- **BOM**：浏览器对象模型（Browser Object Model），操作**浏览器部分功能**的API。比如让浏览器自动滚动。\n\n\n\n### 输入输出\n\nJavaScript中的输入输出主要用于调试\n\n1、弹出警告框：**alert(\"str\")**\n\n2、控制台输出：**console.log(\"str\")**\n\n3、弹出输入框：**var a = prompt(\"str\")**\n\n\n\n## 基本语法\n\n### 变量基本类型\n\nES6前，使用`var`关键字来声明一个变量\n\n**JS中一共有六种数据类型：**\n\n- **基本数据类型（值类型，传值）**：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。\n- **引用数据类型（引用类型，传址）**：Object 对象（除去五种基本数据类型之外，其他的，都称之为 Object类型）。\n\n### 运算符\n\nJS中运算符比较特殊的是`==`与`===`。\n\n其中，`==`这个符号会自动进行隐式转换，将不同的数据类型，转为相同类型进行比较（大部分情况下，都是转换为数字）。而`===`这个符号在进行比较时不会进行类型转换，是绝对等于。\n\n\n\n\n\n### debug方法\n\nJavaScript程序中添加断点，使用debugger。示例如下：\n\n```\n<script>\n    var a = [1,2,3,4,5];\n    for(i=0;i<5;i++){\n        console.log(a[i]);\n        debugger;\n    }\n</script>\n```\n\n刷新Google页面即可进行debug","slug":"编程相关/JavaScript/1、JS基础","published":1,"updated":"2021-01-11T04:27:36.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mobz0061rwjsdfuyas4g","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"语言特点\"><a href=\"#语言特点\" class=\"headerlink\" title=\"语言特点\"></a>语言特点</h3><p>1、解释性语言</p>\n<p>2、单线程</p>\n<p>3、遵从ECMAScript标准</p>\n<p>对换行、缩进、空格不敏感。每一条语句以分号结尾。（分号不是必须加，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源）</p>\n<h3 id=\"JavaScript组成\"><a href=\"#JavaScript组成\" class=\"headerlink\" title=\"JavaScript组成\"></a>JavaScript组成</h3><p>JavaScript基础分为三个部分：</p>\n<ul>\n<li><p><strong>ECMAScript</strong>：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>\n</li>\n<li><p><strong>DOM</strong>：文档对象模型（Document object Model），操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p>\n</li>\n<li><p><strong>BOM</strong>：浏览器对象模型（Browser Object Model），操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p>\n</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>JavaScript中的输入输出主要用于调试</p>\n<p>1、弹出警告框：<strong>alert(“str”)</strong></p>\n<p>2、控制台输出：<strong>console.log(“str”)</strong></p>\n<p>3、弹出输入框：<strong>var a = prompt(“str”)</strong></p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"变量基本类型\"><a href=\"#变量基本类型\" class=\"headerlink\" title=\"变量基本类型\"></a>变量基本类型</h3><p>ES6前，使用<code>var</code>关键字来声明一个变量</p>\n<p><strong>JS中一共有六种数据类型：</strong></p>\n<ul>\n<li><strong>基本数据类型（值类型，传值）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</li>\n<li><strong>引用数据类型（引用类型，传址）</strong>：Object 对象（除去五种基本数据类型之外，其他的，都称之为 Object类型）。</li>\n</ul>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>JS中运算符比较特殊的是<code>==</code>与<code>===</code>。</p>\n<p>其中，<code>==</code>这个符号会自动进行隐式转换，将不同的数据类型，转为相同类型进行比较（大部分情况下，都是转换为数字）。而<code>===</code>这个符号在进行比较时不会进行类型转换，是绝对等于。</p>\n<h3 id=\"debug方法\"><a href=\"#debug方法\" class=\"headerlink\" title=\"debug方法\"></a>debug方法</h3><p>JavaScript程序中添加断点，使用debugger。示例如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;script&gt;<br>    var a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>        console.log(a[i]);<br>        debugger;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>刷新Google页面即可进行debug</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"语言特点\"><a href=\"#语言特点\" class=\"headerlink\" title=\"语言特点\"></a>语言特点</h3><p>1、解释性语言</p>\n<p>2、单线程</p>\n<p>3、遵从ECMAScript标准</p>\n<p>对换行、缩进、空格不敏感。每一条语句以分号结尾。（分号不是必须加，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源）</p>\n<h3 id=\"JavaScript组成\"><a href=\"#JavaScript组成\" class=\"headerlink\" title=\"JavaScript组成\"></a>JavaScript组成</h3><p>JavaScript基础分为三个部分：</p>\n<ul>\n<li><p><strong>ECMAScript</strong>：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p>\n</li>\n<li><p><strong>DOM</strong>：文档对象模型（Document object Model），操作<strong>网页上的元素</strong>的API。比如让盒子移动、变色、轮播图等。</p>\n</li>\n<li><p><strong>BOM</strong>：浏览器对象模型（Browser Object Model），操作<strong>浏览器部分功能</strong>的API。比如让浏览器自动滚动。</p>\n</li>\n</ul>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>JavaScript中的输入输出主要用于调试</p>\n<p>1、弹出警告框：<strong>alert(“str”)</strong></p>\n<p>2、控制台输出：<strong>console.log(“str”)</strong></p>\n<p>3、弹出输入框：<strong>var a = prompt(“str”)</strong></p>\n<h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><h3 id=\"变量基本类型\"><a href=\"#变量基本类型\" class=\"headerlink\" title=\"变量基本类型\"></a>变量基本类型</h3><p>ES6前，使用<code>var</code>关键字来声明一个变量</p>\n<p><strong>JS中一共有六种数据类型：</strong></p>\n<ul>\n<li><strong>基本数据类型（值类型，传值）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</li>\n<li><strong>引用数据类型（引用类型，传址）</strong>：Object 对象（除去五种基本数据类型之外，其他的，都称之为 Object类型）。</li>\n</ul>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>JS中运算符比较特殊的是<code>==</code>与<code>===</code>。</p>\n<p>其中，<code>==</code>这个符号会自动进行隐式转换，将不同的数据类型，转为相同类型进行比较（大部分情况下，都是转换为数字）。而<code>===</code>这个符号在进行比较时不会进行类型转换，是绝对等于。</p>\n<h3 id=\"debug方法\"><a href=\"#debug方法\" class=\"headerlink\" title=\"debug方法\"></a>debug方法</h3><p>JavaScript程序中添加断点，使用debugger。示例如下：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&lt;script&gt;<br>    var a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)&#123;<br>        console.log(a[i]);<br>        debugger;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n\n<p>刷新Google页面即可进行debug</p>\n"},{"title":"2、DOM节点基本操作","date":"2020-06-21T06:38:46.000Z","fileName":"js-dom-basic-handle","_content":"\n## 基本概念\n\n### 节点\n\n**节点**（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。\n\n### DOM\n\n**DOM**：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。\n\n**解析过程**：HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树。\n\n### 文档的加载\n\n浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行。如果将script标签写到页面的上边，在代码执行时，页面及DOM对象还没有加载，会导致无法获取到DOM对象。\n\nonload 事件会在整个页面加载完成之后才触发。为 window 绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。\n\n```\nwindow.onload = function() {\n}\n```\n\n\n\n\n\n## 获取节点\n\n### 通过元素获取节点\n\n```\n// 获取id为“id1”的元素（id唯一）\nvar id1 = document.getElementById(\"id1\");\n```\n\n### 通过标签名获取节点\n\n```\n// 获取标签名为div的 元素节点数组（标签名不唯一）\nvar div1 = document.getElementsByTagName(\"div\");\n// 获取该数组中第一个元素\ndocument.getElementsByTagName(\"div1\")[0]; \n```\n\n### 通过类名获取节点\n\n```\n// 获取类名为 class1 的元素节点数组\nvar class1 = document.getElementsByClassName(\"class1\");\ndocument.getElementsByClassName(\"class1\")[0];\n```\n\n### querySelector()方法\n\n```\ndocument.querySelector(css选择器);\n\n// 获取文档中有 \"target\" 属性的第一个 <a> 元素\ndocument.querySelector(\"a[target]\");\n\n// 找到符合条件的所有元素\ndocument.querySelectorAll(css选择器);\n```\n\n\n\n\n\n## 遍历节点\n\n遍历操作如下，用红框圈起来的方法功能是一样的，只是在不同版本的浏览器中兼容不同，建议使用红框中第二种方法\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%81%8D%E5%8E%86%E8%8A%82%E7%82%B9.png)\n\n### 获取父节点\n\n```\n节点.parentNode\n```\n\n### 获取兄弟节点\n\n#### 下一个兄弟节点\n\n```\n下一个兄弟节点 = 节点.nextElementSibling || 节点.nextSibling\n```\n\n#### 上一个兄弟节点\n\n```\n上一个兄弟节点 = 节点.previousElementSibling || 节点.previousSibling\n```\n\n#### 任意兄弟节点\n\n```\n节点.parentNode.children[index];\n```\n\n### 获取子节点\n\n#### 第一个/最后一个\n\n```\n第一个子元素节点 = 节点.firstElementChild || 节点.firstChild\n\n最后一个子元素节点 = 节点.lastElementChild || 节点.lastChild\n```\n\n#### 获取所有子节点\n\n```\n子节点数组 = 父节点.childNodes; \n\n子节点数组 = 父节点.children;\n```\n\n\n\n## 操作节点\n\n### 创建节点\n\n```\n新的标签(元素节点) = document.createElement(\"标签名\");\n\n文本节点 = document.createTextNode(文本)\n\n文本片段 = document.createDocumentFragment();\n```\n\n#### 示例\n\n```\n<body>\n    <ul id=\"myList\"></ul>\n    <script>\n        var fragment = document.createDocumentFragment();\n        var ul = document.getElementById(\"myList\");\n        var li = null;\n        for(var i=0; i<3; i++) {\n            li = document.createElement(\"li\");\n            li.appendChild(document.createTextNode(\"Item\" + (i+1)));\n            fragment.appendChild(li);\n        }\n        ul.appendChild(fragment);\n    </script>\n</body>\n```\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9.png)\n\n\n\n\n\n### 插入节点\n\n#### 在最后插入一个子节点\n\n```\n父节点.appendChild(新的子节点);\n```\n\n#### 在参考节点前插入一个新的节点\n\n```\n父节点.insertBefore(新的子节点,作为参考的子节点)\n```\n\n\n\n### 删除节点\n\n```\n父节点.removeChild(子节点);\n```\n\n\n\n## 操作节点属性\n\n操作节点属性都有以下两种方法，但一定不能混用，\n\n### 获取节点的属性值\n\n```\n元素节点.属性名;\n元素节点[属性名];\n\t\n元素节点.getAttribute(\"属性名称\");\n```\n\n### 设置节点属性值\n\n```\n元素节点.属性名 = 新属性值;\n元素节点[属性名] = 新属性值;\n\n元素节点.setAttribute(\"属性名\", \"新的属性值\");\n```\n\n### 删除节点的属性\n\n```\n元素节点.removeAttribute(属性名);\n```\n\n### 类名的增删操作\n\n```\nNode.classList.add(\"class\") // 添加class\n\nNode.classList.remove(\"class\") // 移除class\n\nNode.classList.toggle(\"class\") // 切换class，有则移除，无则添加\n\nNode.classList.contains(\"class\") // 检测是否存在class\n```\n\n\n\n\n\n## DOM的一些常见属性\n\n### nodeType属性\n\n- nodeType == 1  表示的是元素节点（标签） 。记住：在这里，元素就是标签。\n\n- nodeType == 2  表示是属性节点。\n\n- nodeType == 3  是文本节点。\n\n### innerHTML\n\n获取标签本身的html，也可以**通过赋值变相的添加节点**\n\n#### 示例\n\n```\n<body>\n    <div id=\"content\"></div>\n    <script>\n        var content = document.getElementById(\"content\");\n        var str = \"ui * 2 li\"\n                    + \"<ul>\"\n                    + \"<li> Item 1 </li>\"\n                    + \"<li> Item 2 </li>\"\n                    + \"</ul>\";\n        content.innerHTML = str;\n        alert(content.innerHTML);\n    </script>\n</body>\n```\n\n如图可见，div内部已经多出了我们添加的元素\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/innerHTML.png)","source":"_posts/编程相关/JavaScript/2、DOM节点基本操作.md","raw":"---\ntitle: 2、DOM节点基本操作\ndate: 2020-06-21 14:38:46\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-dom-basic-handle\n---\n\n## 基本概念\n\n### 节点\n\n**节点**（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。\n\n### DOM\n\n**DOM**：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。\n\n**解析过程**：HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树。\n\n### 文档的加载\n\n浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行。如果将script标签写到页面的上边，在代码执行时，页面及DOM对象还没有加载，会导致无法获取到DOM对象。\n\nonload 事件会在整个页面加载完成之后才触发。为 window 绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。\n\n```\nwindow.onload = function() {\n}\n```\n\n\n\n\n\n## 获取节点\n\n### 通过元素获取节点\n\n```\n// 获取id为“id1”的元素（id唯一）\nvar id1 = document.getElementById(\"id1\");\n```\n\n### 通过标签名获取节点\n\n```\n// 获取标签名为div的 元素节点数组（标签名不唯一）\nvar div1 = document.getElementsByTagName(\"div\");\n// 获取该数组中第一个元素\ndocument.getElementsByTagName(\"div1\")[0]; \n```\n\n### 通过类名获取节点\n\n```\n// 获取类名为 class1 的元素节点数组\nvar class1 = document.getElementsByClassName(\"class1\");\ndocument.getElementsByClassName(\"class1\")[0];\n```\n\n### querySelector()方法\n\n```\ndocument.querySelector(css选择器);\n\n// 获取文档中有 \"target\" 属性的第一个 <a> 元素\ndocument.querySelector(\"a[target]\");\n\n// 找到符合条件的所有元素\ndocument.querySelectorAll(css选择器);\n```\n\n\n\n\n\n## 遍历节点\n\n遍历操作如下，用红框圈起来的方法功能是一样的，只是在不同版本的浏览器中兼容不同，建议使用红框中第二种方法\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%81%8D%E5%8E%86%E8%8A%82%E7%82%B9.png)\n\n### 获取父节点\n\n```\n节点.parentNode\n```\n\n### 获取兄弟节点\n\n#### 下一个兄弟节点\n\n```\n下一个兄弟节点 = 节点.nextElementSibling || 节点.nextSibling\n```\n\n#### 上一个兄弟节点\n\n```\n上一个兄弟节点 = 节点.previousElementSibling || 节点.previousSibling\n```\n\n#### 任意兄弟节点\n\n```\n节点.parentNode.children[index];\n```\n\n### 获取子节点\n\n#### 第一个/最后一个\n\n```\n第一个子元素节点 = 节点.firstElementChild || 节点.firstChild\n\n最后一个子元素节点 = 节点.lastElementChild || 节点.lastChild\n```\n\n#### 获取所有子节点\n\n```\n子节点数组 = 父节点.childNodes; \n\n子节点数组 = 父节点.children;\n```\n\n\n\n## 操作节点\n\n### 创建节点\n\n```\n新的标签(元素节点) = document.createElement(\"标签名\");\n\n文本节点 = document.createTextNode(文本)\n\n文本片段 = document.createDocumentFragment();\n```\n\n#### 示例\n\n```\n<body>\n    <ul id=\"myList\"></ul>\n    <script>\n        var fragment = document.createDocumentFragment();\n        var ul = document.getElementById(\"myList\");\n        var li = null;\n        for(var i=0; i<3; i++) {\n            li = document.createElement(\"li\");\n            li.appendChild(document.createTextNode(\"Item\" + (i+1)));\n            fragment.appendChild(li);\n        }\n        ul.appendChild(fragment);\n    </script>\n</body>\n```\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9.png)\n\n\n\n\n\n### 插入节点\n\n#### 在最后插入一个子节点\n\n```\n父节点.appendChild(新的子节点);\n```\n\n#### 在参考节点前插入一个新的节点\n\n```\n父节点.insertBefore(新的子节点,作为参考的子节点)\n```\n\n\n\n### 删除节点\n\n```\n父节点.removeChild(子节点);\n```\n\n\n\n## 操作节点属性\n\n操作节点属性都有以下两种方法，但一定不能混用，\n\n### 获取节点的属性值\n\n```\n元素节点.属性名;\n元素节点[属性名];\n\t\n元素节点.getAttribute(\"属性名称\");\n```\n\n### 设置节点属性值\n\n```\n元素节点.属性名 = 新属性值;\n元素节点[属性名] = 新属性值;\n\n元素节点.setAttribute(\"属性名\", \"新的属性值\");\n```\n\n### 删除节点的属性\n\n```\n元素节点.removeAttribute(属性名);\n```\n\n### 类名的增删操作\n\n```\nNode.classList.add(\"class\") // 添加class\n\nNode.classList.remove(\"class\") // 移除class\n\nNode.classList.toggle(\"class\") // 切换class，有则移除，无则添加\n\nNode.classList.contains(\"class\") // 检测是否存在class\n```\n\n\n\n\n\n## DOM的一些常见属性\n\n### nodeType属性\n\n- nodeType == 1  表示的是元素节点（标签） 。记住：在这里，元素就是标签。\n\n- nodeType == 2  表示是属性节点。\n\n- nodeType == 3  是文本节点。\n\n### innerHTML\n\n获取标签本身的html，也可以**通过赋值变相的添加节点**\n\n#### 示例\n\n```\n<body>\n    <div id=\"content\"></div>\n    <script>\n        var content = document.getElementById(\"content\");\n        var str = \"ui * 2 li\"\n                    + \"<ul>\"\n                    + \"<li> Item 1 </li>\"\n                    + \"<li> Item 2 </li>\"\n                    + \"</ul>\";\n        content.innerHTML = str;\n        alert(content.innerHTML);\n    </script>\n</body>\n```\n\n如图可见，div内部已经多出了我们添加的元素\n\n![](http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/innerHTML.png)","slug":"编程相关/JavaScript/2、DOM节点基本操作","published":1,"updated":"2021-01-11T04:28:33.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moc00063rwjsfzr8fvt3","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h3><p><strong>节点</strong>（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p><strong>DOM</strong>：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。</p>\n<p><strong>解析过程</strong>：HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树。</p>\n<h3 id=\"文档的加载\"><a href=\"#文档的加载\" class=\"headerlink\" title=\"文档的加载\"></a>文档的加载</h3><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行。如果将script标签写到页面的上边，在代码执行时，页面及DOM对象还没有加载，会导致无法获取到DOM对象。</p>\n<p>onload 事件会在整个页面加载完成之后才触发。为 window 绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"获取节点\"><a href=\"#获取节点\" class=\"headerlink\" title=\"获取节点\"></a>获取节点</h2><h3 id=\"通过元素获取节点\"><a href=\"#通过元素获取节点\" class=\"headerlink\" title=\"通过元素获取节点\"></a>通过元素获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取id为“id1”的元素（id唯一）</span><br><span class=\"hljs-keyword\">var</span> id1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"id1\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过标签名获取节点\"><a href=\"#通过标签名获取节点\" class=\"headerlink\" title=\"通过标签名获取节点\"></a>通过标签名获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取标签名为div的 元素节点数组（标签名不唯一）</span><br><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>);<br><span class=\"hljs-comment\">// 获取该数组中第一个元素</span><br><span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div1\"</span>)[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名获取节点\"><a href=\"#通过类名获取节点\" class=\"headerlink\" title=\"通过类名获取节点\"></a>通过类名获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取类名为 class1 的元素节点数组</span><br><span class=\"hljs-keyword\">var</span> class1 = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">\"class1\"</span>);<br><span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">\"class1\"</span>)[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"querySelector-方法\"><a href=\"#querySelector-方法\" class=\"headerlink\" title=\"querySelector()方法\"></a>querySelector()方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(css选择器);<br><br><span class=\"hljs-comment\">// 获取文档中有 \"target\" 属性的第一个 &lt;a&gt; 元素</span><br><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">\"a[target]\"</span>);<br><br><span class=\"hljs-comment\">// 找到符合条件的所有元素</span><br><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelectorAll</span>(css选择器);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"遍历节点\"><a href=\"#遍历节点\" class=\"headerlink\" title=\"遍历节点\"></a>遍历节点</h2><p>遍历操作如下，用红框圈起来的方法功能是一样的，只是在不同版本的浏览器中兼容不同，建议使用红框中第二种方法</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%81%8D%E5%8E%86%E8%8A%82%E7%82%B9.png\" alt=\"\"></p>\n<h3 id=\"获取父节点\"><a href=\"#获取父节点\" class=\"headerlink\" title=\"获取父节点\"></a>获取父节点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">节点<span class=\"hljs-selector-class\">.parentNode</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取兄弟节点\"><a href=\"#获取兄弟节点\" class=\"headerlink\" title=\"获取兄弟节点\"></a>获取兄弟节点</h3><h4 id=\"下一个兄弟节点\"><a href=\"#下一个兄弟节点\" class=\"headerlink\" title=\"下一个兄弟节点\"></a>下一个兄弟节点</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">下一个兄弟节点 = 节点<span class=\"hljs-string\">.nextElementSibling</span> || 节点<span class=\"hljs-string\">.nextSibling</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"上一个兄弟节点\"><a href=\"#上一个兄弟节点\" class=\"headerlink\" title=\"上一个兄弟节点\"></a>上一个兄弟节点</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">上一个兄弟节点 = 节点<span class=\"hljs-string\">.previousElementSibling</span> || 节点<span class=\"hljs-string\">.previousSibling</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"任意兄弟节点\"><a href=\"#任意兄弟节点\" class=\"headerlink\" title=\"任意兄弟节点\"></a>任意兄弟节点</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">节点<span class=\"hljs-selector-class\">.parentNode</span><span class=\"hljs-selector-class\">.children</span><span class=\"hljs-selector-attr\">[index]</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取子节点\"><a href=\"#获取子节点\" class=\"headerlink\" title=\"获取子节点\"></a>获取子节点</h3><h4 id=\"第一个-最后一个\"><a href=\"#第一个-最后一个\" class=\"headerlink\" title=\"第一个/最后一个\"></a>第一个/最后一个</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">第一个子元素节点 = 节点<span class=\"hljs-string\">.firstElementChild</span> || 节点<span class=\"hljs-string\">.firstChild</span><br><br>最后一个子元素节点 = 节点<span class=\"hljs-string\">.lastElementChild</span> || 节点<span class=\"hljs-string\">.lastChild</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取所有子节点\"><a href=\"#获取所有子节点\" class=\"headerlink\" title=\"获取所有子节点\"></a>获取所有子节点</h4><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">子节点数组 = 父节点.childNodes<span class=\"hljs-comment\">; </span><br><br>子节点数组 = 父节点.children<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作节点\"><a href=\"#操作节点\" class=\"headerlink\" title=\"操作节点\"></a>操作节点</h2><h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">新的标签(元素节点) = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"标签名\"</span>);<br><br>文本节点 = <span class=\"hljs-built_in\">document</span>.createTextNode(文本)<br><br>文本片段 = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myList\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> fragment = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();<br>        <span class=\"hljs-keyword\">var</span> ul = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"myList\"</span>);<br>        <span class=\"hljs-keyword\">var</span> li = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++) &#123;<br>            li = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>);<br>            li.appendChild(<span class=\"hljs-built_in\">document</span>.createTextNode(<span class=\"hljs-string\">\"Item\"</span> + (i+<span class=\"hljs-number\">1</span>)));<br>            fragment.appendChild(li);<br>        &#125;<br>        ul.appendChild(fragment);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9.png\" alt=\"\"></p>\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><h4 id=\"在最后插入一个子节点\"><a href=\"#在最后插入一个子节点\" class=\"headerlink\" title=\"在最后插入一个子节点\"></a>在最后插入一个子节点</h4><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">父节点.appendChild(新的子节点)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"在参考节点前插入一个新的节点\"><a href=\"#在参考节点前插入一个新的节点\" class=\"headerlink\" title=\"在参考节点前插入一个新的节点\"></a>在参考节点前插入一个新的节点</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">父节点<span class=\"hljs-selector-class\">.insertBefore</span>(新的子节点,作为参考的子节点)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">父节点.removeChild(子节点)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作节点属性\"><a href=\"#操作节点属性\" class=\"headerlink\" title=\"操作节点属性\"></a>操作节点属性</h2><p>操作节点属性都有以下两种方法，但一定不能混用，</p>\n<h3 id=\"获取节点的属性值\"><a href=\"#获取节点的属性值\" class=\"headerlink\" title=\"获取节点的属性值\"></a>获取节点的属性值</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">元素节点.属性名<span class=\"hljs-comment\">;</span><br>元素节点[属性名]<span class=\"hljs-comment\">;</span><br>\t<br>元素节点.getAttribute(<span class=\"hljs-string\">\"属性名称\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置节点属性值\"><a href=\"#设置节点属性值\" class=\"headerlink\" title=\"设置节点属性值\"></a>设置节点属性值</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\">元素节点.属性名 = 新属性值;<br>元素节点[属性名] = 新属性值;<br><br>元素节点.<span class=\"hljs-built_in\">set</span>Attribute(<span class=\"hljs-string\">\"属性名\"</span>, <span class=\"hljs-string\">\"新的属性值\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除节点的属性\"><a href=\"#删除节点的属性\" class=\"headerlink\" title=\"删除节点的属性\"></a>删除节点的属性</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">元素节点.removeAttribute(属性名)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"类名的增删操作\"><a href=\"#类名的增删操作\" class=\"headerlink\" title=\"类名的增删操作\"></a>类名的增删操作</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.add(<span class=\"hljs-string\">\"class\"</span>) // 添加class<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.remove(<span class=\"hljs-string\">\"class\"</span>) // 移除class<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.toggle(<span class=\"hljs-string\">\"class\"</span>) // 切换class，有则移除，无则添加<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.contains(<span class=\"hljs-string\">\"class\"</span>) // 检测是否存在class<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM的一些常见属性\"><a href=\"#DOM的一些常见属性\" class=\"headerlink\" title=\"DOM的一些常见属性\"></a>DOM的一些常见属性</h2><h3 id=\"nodeType属性\"><a href=\"#nodeType属性\" class=\"headerlink\" title=\"nodeType属性\"></a>nodeType属性</h3><ul>\n<li><p>nodeType == 1  表示的是元素节点（标签） 。记住：在这里，元素就是标签。</p>\n</li>\n<li><p>nodeType == 2  表示是属性节点。</p>\n</li>\n<li><p>nodeType == 3  是文本节点。</p>\n</li>\n</ul>\n<h3 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h3><p>获取标签本身的html，也可以<strong>通过赋值变相的添加节点</strong></p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"xml\"><br>    </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"content\"</span>);<br>        <span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">\"ui * 2 li\"</span><br>                    + <span class=\"hljs-string\">\"</span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\"<br>                    + \"</span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> Item 1 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span></span><span class=\"xml\">\"<br>                    + \"</span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> Item 2 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">\"<br>                    + \"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span></span><span class=\"xml\">\";<br>        content.innerHTML = str;<br>        alert(content.innerHTML);<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"xml\"><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>如图可见，div内部已经多出了我们添加的元素</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/innerHTML.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"节点\"><a href=\"#节点\" class=\"headerlink\" title=\"节点\"></a>节点</h3><p><strong>节点</strong>（Node）：构成 HTML 网页的最基本单元。网页中的每一个部分都可以称为是一个节点，比如：html标签、属性、文本、注释、整个文档等都是一个节点。</p>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p><strong>DOM</strong>：Document Object Model，文档对象模型。DOM 为文档提供了结构化表示，并定义了如何通过脚本来访问文档结构。目的其实就是为了能让js操作html元素而制定的一个规范。</p>\n<p><strong>解析过程</strong>：HTML加载完毕，渲染引擎会在内存中把HTML文档，生成一个DOM树。</p>\n<h3 id=\"文档的加载\"><a href=\"#文档的加载\" class=\"headerlink\" title=\"文档的加载\"></a>文档的加载</h3><p>浏览器在加载一个页面时，是按照自上向下的顺序加载的，读取到一行就运行一行。如果将script标签写到页面的上边，在代码执行时，页面及DOM对象还没有加载，会导致无法获取到DOM对象。</p>\n<p>onload 事件会在整个页面加载完成之后才触发。为 window 绑定一个onload事件，该事件对应的响应函数将会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象已经加载完毕了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"获取节点\"><a href=\"#获取节点\" class=\"headerlink\" title=\"获取节点\"></a>获取节点</h2><h3 id=\"通过元素获取节点\"><a href=\"#通过元素获取节点\" class=\"headerlink\" title=\"通过元素获取节点\"></a>通过元素获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取id为“id1”的元素（id唯一）</span><br><span class=\"hljs-keyword\">var</span> id1 = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"id1\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过标签名获取节点\"><a href=\"#通过标签名获取节点\" class=\"headerlink\" title=\"通过标签名获取节点\"></a>通过标签名获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取标签名为div的 元素节点数组（标签名不唯一）</span><br><span class=\"hljs-keyword\">var</span> div1 = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>);<br><span class=\"hljs-comment\">// 获取该数组中第一个元素</span><br><span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div1\"</span>)[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名获取节点\"><a href=\"#通过类名获取节点\" class=\"headerlink\" title=\"通过类名获取节点\"></a>通过类名获取节点</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-comment\">// 获取类名为 class1 的元素节点数组</span><br><span class=\"hljs-keyword\">var</span> class1 = <span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">\"class1\"</span>);<br><span class=\"hljs-built_in\">document</span>.getElementsByClassName(<span class=\"hljs-string\">\"class1\"</span>)[<span class=\"hljs-number\">0</span>];<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"querySelector-方法\"><a href=\"#querySelector-方法\" class=\"headerlink\" title=\"querySelector()方法\"></a>querySelector()方法</h3><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(css选择器);<br><br><span class=\"hljs-comment\">// 获取文档中有 \"target\" 属性的第一个 &lt;a&gt; 元素</span><br><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelector</span>(<span class=\"hljs-string\">\"a[target]\"</span>);<br><br><span class=\"hljs-comment\">// 找到符合条件的所有元素</span><br><span class=\"hljs-built_in\">document</span>.<span class=\"hljs-built_in\">querySelectorAll</span>(css选择器);<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"遍历节点\"><a href=\"#遍历节点\" class=\"headerlink\" title=\"遍历节点\"></a>遍历节点</h2><p>遍历操作如下，用红框圈起来的方法功能是一样的，只是在不同版本的浏览器中兼容不同，建议使用红框中第二种方法</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E9%81%8D%E5%8E%86%E8%8A%82%E7%82%B9.png\" alt=\"\"></p>\n<h3 id=\"获取父节点\"><a href=\"#获取父节点\" class=\"headerlink\" title=\"获取父节点\"></a>获取父节点</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">节点<span class=\"hljs-selector-class\">.parentNode</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取兄弟节点\"><a href=\"#获取兄弟节点\" class=\"headerlink\" title=\"获取兄弟节点\"></a>获取兄弟节点</h3><h4 id=\"下一个兄弟节点\"><a href=\"#下一个兄弟节点\" class=\"headerlink\" title=\"下一个兄弟节点\"></a>下一个兄弟节点</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">下一个兄弟节点 = 节点<span class=\"hljs-string\">.nextElementSibling</span> || 节点<span class=\"hljs-string\">.nextSibling</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"上一个兄弟节点\"><a href=\"#上一个兄弟节点\" class=\"headerlink\" title=\"上一个兄弟节点\"></a>上一个兄弟节点</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">上一个兄弟节点 = 节点<span class=\"hljs-string\">.previousElementSibling</span> || 节点<span class=\"hljs-string\">.previousSibling</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"任意兄弟节点\"><a href=\"#任意兄弟节点\" class=\"headerlink\" title=\"任意兄弟节点\"></a>任意兄弟节点</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">节点<span class=\"hljs-selector-class\">.parentNode</span><span class=\"hljs-selector-class\">.children</span><span class=\"hljs-selector-attr\">[index]</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取子节点\"><a href=\"#获取子节点\" class=\"headerlink\" title=\"获取子节点\"></a>获取子节点</h3><h4 id=\"第一个-最后一个\"><a href=\"#第一个-最后一个\" class=\"headerlink\" title=\"第一个/最后一个\"></a>第一个/最后一个</h4><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\">第一个子元素节点 = 节点<span class=\"hljs-string\">.firstElementChild</span> || 节点<span class=\"hljs-string\">.firstChild</span><br><br>最后一个子元素节点 = 节点<span class=\"hljs-string\">.lastElementChild</span> || 节点<span class=\"hljs-string\">.lastChild</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取所有子节点\"><a href=\"#获取所有子节点\" class=\"headerlink\" title=\"获取所有子节点\"></a>获取所有子节点</h4><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">子节点数组 = 父节点.childNodes<span class=\"hljs-comment\">; </span><br><br>子节点数组 = 父节点.children<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作节点\"><a href=\"#操作节点\" class=\"headerlink\" title=\"操作节点\"></a>操作节点</h2><h3 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\">新的标签(元素节点) = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"标签名\"</span>);<br><br>文本节点 = <span class=\"hljs-built_in\">document</span>.createTextNode(文本)<br><br>文本片段 = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"myList\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> fragment = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();<br>        <span class=\"hljs-keyword\">var</span> ul = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"myList\"</span>);<br>        <span class=\"hljs-keyword\">var</span> li = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">3</span>; i++) &#123;<br>            li = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"li\"</span>);<br>            li.appendChild(<span class=\"hljs-built_in\">document</span>.createTextNode(<span class=\"hljs-string\">\"Item\"</span> + (i+<span class=\"hljs-number\">1</span>)));<br>            fragment.appendChild(li);<br>        &#125;<br>        ul.appendChild(fragment);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/%E5%88%9B%E5%BB%BA%E8%8A%82%E7%82%B9.png\" alt=\"\"></p>\n<h3 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h3><h4 id=\"在最后插入一个子节点\"><a href=\"#在最后插入一个子节点\" class=\"headerlink\" title=\"在最后插入一个子节点\"></a>在最后插入一个子节点</h4><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">父节点.appendChild(新的子节点)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"在参考节点前插入一个新的节点\"><a href=\"#在参考节点前插入一个新的节点\" class=\"headerlink\" title=\"在参考节点前插入一个新的节点\"></a>在参考节点前插入一个新的节点</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">父节点<span class=\"hljs-selector-class\">.insertBefore</span>(新的子节点,作为参考的子节点)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">父节点.removeChild(子节点)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"操作节点属性\"><a href=\"#操作节点属性\" class=\"headerlink\" title=\"操作节点属性\"></a>操作节点属性</h2><p>操作节点属性都有以下两种方法，但一定不能混用，</p>\n<h3 id=\"获取节点的属性值\"><a href=\"#获取节点的属性值\" class=\"headerlink\" title=\"获取节点的属性值\"></a>获取节点的属性值</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">元素节点.属性名<span class=\"hljs-comment\">;</span><br>元素节点[属性名]<span class=\"hljs-comment\">;</span><br>\t<br>元素节点.getAttribute(<span class=\"hljs-string\">\"属性名称\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置节点属性值\"><a href=\"#设置节点属性值\" class=\"headerlink\" title=\"设置节点属性值\"></a>设置节点属性值</h3><figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pf\">元素节点.属性名 = 新属性值;<br>元素节点[属性名] = 新属性值;<br><br>元素节点.<span class=\"hljs-built_in\">set</span>Attribute(<span class=\"hljs-string\">\"属性名\"</span>, <span class=\"hljs-string\">\"新的属性值\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除节点的属性\"><a href=\"#删除节点的属性\" class=\"headerlink\" title=\"删除节点的属性\"></a>删除节点的属性</h3><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">元素节点.removeAttribute(属性名)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"类名的增删操作\"><a href=\"#类名的增删操作\" class=\"headerlink\" title=\"类名的增删操作\"></a>类名的增删操作</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\"><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.add(<span class=\"hljs-string\">\"class\"</span>) // 添加class<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.remove(<span class=\"hljs-string\">\"class\"</span>) // 移除class<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.toggle(<span class=\"hljs-string\">\"class\"</span>) // 切换class，有则移除，无则添加<br><br><span class=\"hljs-keyword\">Node</span>.<span class=\"hljs-title\">classList</span>.contains(<span class=\"hljs-string\">\"class\"</span>) // 检测是否存在class<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM的一些常见属性\"><a href=\"#DOM的一些常见属性\" class=\"headerlink\" title=\"DOM的一些常见属性\"></a>DOM的一些常见属性</h2><h3 id=\"nodeType属性\"><a href=\"#nodeType属性\" class=\"headerlink\" title=\"nodeType属性\"></a>nodeType属性</h3><ul>\n<li><p>nodeType == 1  表示的是元素节点（标签） 。记住：在这里，元素就是标签。</p>\n</li>\n<li><p>nodeType == 2  表示是属性节点。</p>\n</li>\n<li><p>nodeType == 3  是文本节点。</p>\n</li>\n</ul>\n<h3 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h3><p>获取标签本身的html，也可以<strong>通过赋值变相的添加节点</strong></p>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xquery\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"content\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"xml\"><br>    </span><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"content\"</span>);<br>        <span class=\"hljs-keyword\">var</span> str = <span class=\"hljs-string\">\"ui * 2 li\"</span><br>                    + <span class=\"hljs-string\">\"</span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\"<br>                    + \"</span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> Item 1 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span></span><span class=\"xml\">\"<br>                    + \"</span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span> Item 2 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span></span></span></span><span class=\"xml\"><span class=\"handlebars\"><span class=\"xml\">\"<br>                    + \"<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></span></span></span><span class=\"xml\">\";<br>        content.innerHTML = str;<br>        alert(content.innerHTML);<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span><span class=\"xml\"><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>如图可见，div内部已经多出了我们添加的元素</p>\n<p><img src=\"http://cdn.ziyedy.top/image/DOM%E8%8A%82%E7%82%B9%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/innerHTML.png\" alt=\"\"></p>\n"},{"title":"BOM基本内容","date":"2020-06-21T06:38:46.000Z","fileName":"js-bom-basic-handle","_content":"\n## 常见的BOM对象\n\nBOM可以让我们通过JS来操作浏览器。BOM中为我们提供了一些对象，来完成对浏览器相关的操作。\n\n常见的 BOM对象有：\n\n- Window：代表整个浏览器的窗口，同时 window 也是**网页中的全局对象**。\n\n- Navigator：代表当前浏览器的信息，通过该对象可以识别不同的浏览器。\n\n- Location：代表当前浏览器的地址栏信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。\n\n- History：代表浏览器的历史记录，通过该对象可以操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。\n\n- Screen：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息。\n\n备注：这些 BOM 对象都是**作为 window 对象的属性**保存的，可以通过window对象来使用，也可以直接使用。比如说，我可以使用 `window.location.href`，也可以直接使用 `location.href`，二者是等价的。\n\n备注2：不要忘了，之前学习过的`document`也是在`window`中保存的。\n\n\n\n## Navigator\n\nNavigator代表当前浏览器的信息，通过该对象可以识别不同的浏览器。\n\n通常使用`navigator.userAgent`来获取浏览器信息\n\n\n\n## History\n\nHistory对象：可以用来操作浏览器的向前或向后翻页。\n\n### 属性\n\n获取浏览器历史列表中的 url 数量。注意，只是统计当次的数量，如果浏览器关了，数量会重置为1。\n\n```\nhistory.length\n```\n\n### 方法\n\n回退到上一个页面，作用和浏览器的「回退按钮」一样。\n\n```\nhistory.back();\n```\n\n跳转下一个页面，作用和浏览器的「前进按钮」一样。\n\n```\nhistory.forward();\n```\n\n**go方法**\n\n```\n// 向前跳转2个页面\nhistory.go( 2 );\n\n// 向后跳转2个页面\nhistory.go( -2 );\n\n// 刷新当前页面\nhistory.go( 0 );\n```\n\n\n\n## Location \n\nLocation 对象：封装了浏览器地址栏的 URL 信息。\n\n### 属性\n\n获取当前页面的 url 路径\n\n```\nlocation.href\n```\n\n也可以通过设置该属性的方法使页面跳转\n\n```\nlocation.href = 'ziyedy.top';\n```\n\n### 方法\n\n用来跳转到其他的页面，作用和直接修改`location.href`一样。\n\n```\nlocation.assign(str);\n```\n\n用于重新加载当前页面，作用和刷新按钮一样。在方法的参数中传递一个true，则会强制清空缓存刷新页面.\n\n```\nlocation.reload();\nlocation.reload(true);\n```\n\n使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退。\n\n```\nlocation.replace();\n```\n\n\n\n\n\n","source":"_posts/编程相关/JavaScript/3、BOM基本内容.md","raw":"---\ntitle: BOM基本内容\ndate: 2020-06-21 14:38:46\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-bom-basic-handle\n---\n\n## 常见的BOM对象\n\nBOM可以让我们通过JS来操作浏览器。BOM中为我们提供了一些对象，来完成对浏览器相关的操作。\n\n常见的 BOM对象有：\n\n- Window：代表整个浏览器的窗口，同时 window 也是**网页中的全局对象**。\n\n- Navigator：代表当前浏览器的信息，通过该对象可以识别不同的浏览器。\n\n- Location：代表当前浏览器的地址栏信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。\n\n- History：代表浏览器的历史记录，通过该对象可以操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。\n\n- Screen：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息。\n\n备注：这些 BOM 对象都是**作为 window 对象的属性**保存的，可以通过window对象来使用，也可以直接使用。比如说，我可以使用 `window.location.href`，也可以直接使用 `location.href`，二者是等价的。\n\n备注2：不要忘了，之前学习过的`document`也是在`window`中保存的。\n\n\n\n## Navigator\n\nNavigator代表当前浏览器的信息，通过该对象可以识别不同的浏览器。\n\n通常使用`navigator.userAgent`来获取浏览器信息\n\n\n\n## History\n\nHistory对象：可以用来操作浏览器的向前或向后翻页。\n\n### 属性\n\n获取浏览器历史列表中的 url 数量。注意，只是统计当次的数量，如果浏览器关了，数量会重置为1。\n\n```\nhistory.length\n```\n\n### 方法\n\n回退到上一个页面，作用和浏览器的「回退按钮」一样。\n\n```\nhistory.back();\n```\n\n跳转下一个页面，作用和浏览器的「前进按钮」一样。\n\n```\nhistory.forward();\n```\n\n**go方法**\n\n```\n// 向前跳转2个页面\nhistory.go( 2 );\n\n// 向后跳转2个页面\nhistory.go( -2 );\n\n// 刷新当前页面\nhistory.go( 0 );\n```\n\n\n\n## Location \n\nLocation 对象：封装了浏览器地址栏的 URL 信息。\n\n### 属性\n\n获取当前页面的 url 路径\n\n```\nlocation.href\n```\n\n也可以通过设置该属性的方法使页面跳转\n\n```\nlocation.href = 'ziyedy.top';\n```\n\n### 方法\n\n用来跳转到其他的页面，作用和直接修改`location.href`一样。\n\n```\nlocation.assign(str);\n```\n\n用于重新加载当前页面，作用和刷新按钮一样。在方法的参数中传递一个true，则会强制清空缓存刷新页面.\n\n```\nlocation.reload();\nlocation.reload(true);\n```\n\n使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退。\n\n```\nlocation.replace();\n```\n\n\n\n\n\n","slug":"编程相关/JavaScript/3、BOM基本内容","published":1,"updated":"2021-01-11T04:28:58.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moc10066rwjs20si87tg","content":"<h2 id=\"常见的BOM对象\"><a href=\"#常见的BOM对象\" class=\"headerlink\" title=\"常见的BOM对象\"></a>常见的BOM对象</h2><p>BOM可以让我们通过JS来操作浏览器。BOM中为我们提供了一些对象，来完成对浏览器相关的操作。</p>\n<p>常见的 BOM对象有：</p>\n<ul>\n<li><p>Window：代表整个浏览器的窗口，同时 window 也是<strong>网页中的全局对象</strong>。</p>\n</li>\n<li><p>Navigator：代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>\n</li>\n<li><p>Location：代表当前浏览器的地址栏信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。</p>\n</li>\n<li><p>History：代表浏览器的历史记录，通过该对象可以操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。</p>\n</li>\n<li><p>Screen：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息。</p>\n</li>\n</ul>\n<p>备注：这些 BOM 对象都是<strong>作为 window 对象的属性</strong>保存的，可以通过window对象来使用，也可以直接使用。比如说，我可以使用 <code>window.location.href</code>，也可以直接使用 <code>location.href</code>，二者是等价的。</p>\n<p>备注2：不要忘了，之前学习过的<code>document</code>也是在<code>window</code>中保存的。</p>\n<h2 id=\"Navigator\"><a href=\"#Navigator\" class=\"headerlink\" title=\"Navigator\"></a>Navigator</h2><p>Navigator代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>\n<p>通常使用<code>navigator.userAgent</code>来获取浏览器信息</p>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>History对象：可以用来操作浏览器的向前或向后翻页。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>获取浏览器历史列表中的 url 数量。注意，只是统计当次的数量，如果浏览器关了，数量会重置为1。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">history.<span class=\"hljs-built_in\">length</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>回退到上一个页面，作用和浏览器的「回退按钮」一样。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">history.back()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>跳转下一个页面，作用和浏览器的「前进按钮」一样。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">history.forward()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>go方法</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 向前跳转2个页面</span><br>history.go( <span class=\"hljs-number\">2</span> );<br><br><span class=\"hljs-comment\">// 向后跳转2个页面</span><br>history.go( <span class=\"hljs-number\">-2</span> );<br><br><span class=\"hljs-comment\">// 刷新当前页面</span><br>history.go( <span class=\"hljs-number\">0</span> );<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h2><p>Location 对象：封装了浏览器地址栏的 URL 信息。</p>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>获取当前页面的 url 路径</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">location</span><span class=\"hljs-selector-class\">.href</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以通过设置该属性的方法使页面跳转</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">location.href</span> = <span class=\"hljs-string\">'ziyedy.top'</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>用来跳转到其他的页面，作用和直接修改<code>location.href</code>一样。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs openscad\">location.<span class=\"hljs-built_in\">assign</span>(<span class=\"hljs-built_in\">str</span>);<br></code></pre></td></tr></table></figure>\n\n<p>用于重新加载当前页面，作用和刷新按钮一样。在方法的参数中传递一个true，则会强制清空缓存刷新页面.</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs glsl\"><span class=\"hljs-keyword\">location</span>.reload();<br><span class=\"hljs-keyword\">location</span>.reload(<span class=\"hljs-literal\">true</span>);<br></code></pre></td></tr></table></figure>\n\n<p>使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">location</span>.replace();<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常见的BOM对象\"><a href=\"#常见的BOM对象\" class=\"headerlink\" title=\"常见的BOM对象\"></a>常见的BOM对象</h2><p>BOM可以让我们通过JS来操作浏览器。BOM中为我们提供了一些对象，来完成对浏览器相关的操作。</p>\n<p>常见的 BOM对象有：</p>\n<ul>\n<li><p>Window：代表整个浏览器的窗口，同时 window 也是<strong>网页中的全局对象</strong>。</p>\n</li>\n<li><p>Navigator：代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>\n</li>\n<li><p>Location：代表当前浏览器的地址栏信息，通过 Location 可以获取地址栏信息，或者操作浏览器跳转页面。</p>\n</li>\n<li><p>History：代表浏览器的历史记录，通过该对象可以操作浏览器的历史记录。由于隐私原因，该对象不能获取到具体的历史记录，只能操作浏览器向前或向后翻页，而且该操作只在当次访问时有效。</p>\n</li>\n<li><p>Screen：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息。</p>\n</li>\n</ul>\n<p>备注：这些 BOM 对象都是<strong>作为 window 对象的属性</strong>保存的，可以通过window对象来使用，也可以直接使用。比如说，我可以使用 <code>window.location.href</code>，也可以直接使用 <code>location.href</code>，二者是等价的。</p>\n<p>备注2：不要忘了，之前学习过的<code>document</code>也是在<code>window</code>中保存的。</p>\n<h2 id=\"Navigator\"><a href=\"#Navigator\" class=\"headerlink\" title=\"Navigator\"></a>Navigator</h2><p>Navigator代表当前浏览器的信息，通过该对象可以识别不同的浏览器。</p>\n<p>通常使用<code>navigator.userAgent</code>来获取浏览器信息</p>\n<h2 id=\"History\"><a href=\"#History\" class=\"headerlink\" title=\"History\"></a>History</h2><p>History对象：可以用来操作浏览器的向前或向后翻页。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>获取浏览器历史列表中的 url 数量。注意，只是统计当次的数量，如果浏览器关了，数量会重置为1。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">history.<span class=\"hljs-built_in\">length</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>回退到上一个页面，作用和浏览器的「回退按钮」一样。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">history.back()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>跳转下一个页面，作用和浏览器的「前进按钮」一样。</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">history.forward()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>go方法</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-comment\">// 向前跳转2个页面</span><br>history.go( <span class=\"hljs-number\">2</span> );<br><br><span class=\"hljs-comment\">// 向后跳转2个页面</span><br>history.go( <span class=\"hljs-number\">-2</span> );<br><br><span class=\"hljs-comment\">// 刷新当前页面</span><br>history.go( <span class=\"hljs-number\">0</span> );<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Location\"><a href=\"#Location\" class=\"headerlink\" title=\"Location\"></a>Location</h2><p>Location 对象：封装了浏览器地址栏的 URL 信息。</p>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>获取当前页面的 url 路径</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">location</span><span class=\"hljs-selector-class\">.href</span><br></code></pre></td></tr></table></figure>\n\n<p>也可以通过设置该属性的方法使页面跳转</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">location.href</span> = <span class=\"hljs-string\">'ziyedy.top'</span><span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>用来跳转到其他的页面，作用和直接修改<code>location.href</code>一样。</p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs openscad\">location.<span class=\"hljs-built_in\">assign</span>(<span class=\"hljs-built_in\">str</span>);<br></code></pre></td></tr></table></figure>\n\n<p>用于重新加载当前页面，作用和刷新按钮一样。在方法的参数中传递一个true，则会强制清空缓存刷新页面.</p>\n<figure class=\"highlight glsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs glsl\"><span class=\"hljs-keyword\">location</span>.reload();<br><span class=\"hljs-keyword\">location</span>.reload(<span class=\"hljs-literal\">true</span>);<br></code></pre></td></tr></table></figure>\n\n<p>使用一个新的页面替换当前页面，调用完毕也会跳转页面。但不会生成历史记录，不能使用「后退按钮」后退。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">location</span>.replace();<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"2.1、JS事件处理","date":"2020-07-30T14:51:57.000Z","fileName":"js-event-handle","_content":"\n## 事件\n\n事件指的是一些特定的交互瞬间，如点击某个元素等等\n\nJavaScript 是以**事件驱动为核心**的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。\n\n### 事件的基本要素\n\n- 事件源：引发后续事件的html标签。\n\n- 事件：js中已经定义好了（见下图）。\n\n- 事件驱动程序：对样式和html的操作。也就是DOM。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png)\n\n### 事件程序的基本书写\n\n#### 1、获取事件源\n\n详见DOM操作中的相关操作，主要有`document.getElementById()`等方法\n\n#### 2、绑定事件\n\n以onclick事件为例：\n\n**方法1（绑定匿名函数）：**\n\n```\nelement.onclick = function () {\n\n}\n```\n\n**方法2（addEventListener）：**\n\n```\nelement.addEventListener('click', function () {\n\n}, false);\n```\n\n- 参数1：事件名的字符串(注意，没有on)\n\n- 参数2：回调函数：当事件触发时，该函数会被执行\n\n- 参数3：**true表示捕获阶段触发，false表示冒泡阶段触发（默认）**。如果不写，则默认为false。【重要】\n\n**方法3（行内绑定）：**\n\n```\n<!--行内绑定-->\n<div id=\"box1\" onclick=\"fn()\"></div>\n\n<script type=\"text/javascript\">\n    function fn() {\n        alert(\"我是弹出的内容\");\n    }\n</script>\n```\n\n\n\n\n\n## 事件对象\n\n当事件的响应函数被触发时，会产生一个事件对象`event`。浏览器每次都会将这个事件`event`作为实参传进之前的响应函数。\n\n这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png)\n\n### 获取event对象\n\n除去以上直接使用event外，标准兼容写法如下\n\n```\n<script>\n    //点击页面的任何部分\n    document.onclick = function (event) {\n        event = event || window.event; //兼容性写法\n    }\n</script>\n```\n\n\n\n### event属性\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png)\n\n除此之外，还有以下等信息：\n\n```\nkeyCode\t// 返回响应的键盘信息\n```\n\n\n\n\n\n## DOM事件流\n\n事件传播的三个阶段是：事件捕获、事件冒泡和目标。\n\n- 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。\n- 事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。\n- 事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png)\n\n\n\n### 捕获与冒泡实验\n\naddEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行\n\n```\n<body>\n    <div><p>click here</p></div>\n    <script>\n        var div = document.getElementsByTagName(\"div\")[0];\n        var p = document.getElementsByTagName(\"p\")[0];\n        div.addEventListener(\"click\", function() {\n            console.log(\"div\");\n        }, true);\n        p.addEventListener(\"click\", function() {\n            console.log(\"p\");\n        }, true);\n    </script>\n</body>\n```\n\n**实验结果**\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png)","source":"_posts/编程相关/JavaScript/2.1、JS事件处理.md","raw":"---\ntitle: 2.1、JS事件处理\ndate: 2020-07-30 22:51:57\ntags:\n\t- JavaScript\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: js-event-handle\n---\n\n## 事件\n\n事件指的是一些特定的交互瞬间，如点击某个元素等等\n\nJavaScript 是以**事件驱动为核心**的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。\n\n### 事件的基本要素\n\n- 事件源：引发后续事件的html标签。\n\n- 事件：js中已经定义好了（见下图）。\n\n- 事件驱动程序：对样式和html的操作。也就是DOM。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png)\n\n### 事件程序的基本书写\n\n#### 1、获取事件源\n\n详见DOM操作中的相关操作，主要有`document.getElementById()`等方法\n\n#### 2、绑定事件\n\n以onclick事件为例：\n\n**方法1（绑定匿名函数）：**\n\n```\nelement.onclick = function () {\n\n}\n```\n\n**方法2（addEventListener）：**\n\n```\nelement.addEventListener('click', function () {\n\n}, false);\n```\n\n- 参数1：事件名的字符串(注意，没有on)\n\n- 参数2：回调函数：当事件触发时，该函数会被执行\n\n- 参数3：**true表示捕获阶段触发，false表示冒泡阶段触发（默认）**。如果不写，则默认为false。【重要】\n\n**方法3（行内绑定）：**\n\n```\n<!--行内绑定-->\n<div id=\"box1\" onclick=\"fn()\"></div>\n\n<script type=\"text/javascript\">\n    function fn() {\n        alert(\"我是弹出的内容\");\n    }\n</script>\n```\n\n\n\n\n\n## 事件对象\n\n当事件的响应函数被触发时，会产生一个事件对象`event`。浏览器每次都会将这个事件`event`作为实参传进之前的响应函数。\n\n这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png)\n\n### 获取event对象\n\n除去以上直接使用event外，标准兼容写法如下\n\n```\n<script>\n    //点击页面的任何部分\n    document.onclick = function (event) {\n        event = event || window.event; //兼容性写法\n    }\n</script>\n```\n\n\n\n### event属性\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png)\n\n除此之外，还有以下等信息：\n\n```\nkeyCode\t// 返回响应的键盘信息\n```\n\n\n\n\n\n## DOM事件流\n\n事件传播的三个阶段是：事件捕获、事件冒泡和目标。\n\n- 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。\n- 事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。\n- 事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png)\n\n\n\n### 捕获与冒泡实验\n\naddEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行\n\n```\n<body>\n    <div><p>click here</p></div>\n    <script>\n        var div = document.getElementsByTagName(\"div\")[0];\n        var p = document.getElementsByTagName(\"p\")[0];\n        div.addEventListener(\"click\", function() {\n            console.log(\"div\");\n        }, true);\n        p.addEventListener(\"click\", function() {\n            console.log(\"p\");\n        }, true);\n    </script>\n</body>\n```\n\n**实验结果**\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png)","slug":"编程相关/JavaScript/2.1、JS事件处理","published":1,"updated":"2021-01-11T04:28:47.020Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moc30068rwjsef8na2ud","content":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>事件指的是一些特定的交互瞬间，如点击某个元素等等</p>\n<p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p>\n<h3 id=\"事件的基本要素\"><a href=\"#事件的基本要素\" class=\"headerlink\" title=\"事件的基本要素\"></a>事件的基本要素</h3><ul>\n<li><p>事件源：引发后续事件的html标签。</p>\n</li>\n<li><p>事件：js中已经定义好了（见下图）。</p>\n</li>\n<li><p>事件驱动程序：对样式和html的操作。也就是DOM。</p>\n</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"事件程序的基本书写\"><a href=\"#事件程序的基本书写\" class=\"headerlink\" title=\"事件程序的基本书写\"></a>事件程序的基本书写</h3><h4 id=\"1、获取事件源\"><a href=\"#1、获取事件源\" class=\"headerlink\" title=\"1、获取事件源\"></a>1、获取事件源</h4><p>详见DOM操作中的相关操作，主要有<code>document.getElementById()</code>等方法</p>\n<h4 id=\"2、绑定事件\"><a href=\"#2、绑定事件\" class=\"headerlink\" title=\"2、绑定事件\"></a>2、绑定事件</h4><p>以onclick事件为例：</p>\n<p><strong>方法1（绑定匿名函数）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法2（addEventListener）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数1：事件名的字符串(注意，没有on)</p>\n</li>\n<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>\n</li>\n<li><p>参数3：<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong>。如果不写，则默认为false。【重要】</p>\n</li>\n</ul>\n<p><strong>方法3（行内绑定）：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--行内绑定--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"fn()\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        alert(<span class=\"hljs-string\">\"我是弹出的内容\"</span>);<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。</p>\n<p>这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png\" alt=\"\"></p>\n<h3 id=\"获取event对象\"><a href=\"#获取event对象\" class=\"headerlink\" title=\"获取event对象\"></a>获取event对象</h3><p>除去以上直接使用event外，标准兼容写法如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-comment\">//点击页面的任何部分</span><br>    <span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>        event = event || <span class=\"hljs-built_in\">window</span>.event; <span class=\"hljs-comment\">//兼容性写法</span><br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"event属性\"><a href=\"#event属性\" class=\"headerlink\" title=\"event属性\"></a>event属性</h3><p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png\" alt=\"\"></p>\n<p>除此之外，还有以下等信息：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">keyCode</span>\t<span class=\"hljs-comment\">// 返回响应的键盘信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件传播的三个阶段是：事件捕获、事件冒泡和目标。</p>\n<ul>\n<li>事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。</li>\n<li>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</li>\n<li>事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png\" alt=\"\"></p>\n<h3 id=\"捕获与冒泡实验\"><a href=\"#捕获与冒泡实验\" class=\"headerlink\" title=\"捕获与冒泡实验\"></a>捕获与冒泡实验</h3><p>addEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>];<br>        div.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"div\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>        p.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"p\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实验结果</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>事件指的是一些特定的交互瞬间，如点击某个元素等等</p>\n<p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p>\n<h3 id=\"事件的基本要素\"><a href=\"#事件的基本要素\" class=\"headerlink\" title=\"事件的基本要素\"></a>事件的基本要素</h3><ul>\n<li><p>事件源：引发后续事件的html标签。</p>\n</li>\n<li><p>事件：js中已经定义好了（见下图）。</p>\n</li>\n<li><p>事件驱动程序：对样式和html的操作。也就是DOM。</p>\n</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"事件程序的基本书写\"><a href=\"#事件程序的基本书写\" class=\"headerlink\" title=\"事件程序的基本书写\"></a>事件程序的基本书写</h3><h4 id=\"1、获取事件源\"><a href=\"#1、获取事件源\" class=\"headerlink\" title=\"1、获取事件源\"></a>1、获取事件源</h4><p>详见DOM操作中的相关操作，主要有<code>document.getElementById()</code>等方法</p>\n<h4 id=\"2、绑定事件\"><a href=\"#2、绑定事件\" class=\"headerlink\" title=\"2、绑定事件\"></a>2、绑定事件</h4><p>以onclick事件为例：</p>\n<p><strong>方法1（绑定匿名函数）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法2（addEventListener）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数1：事件名的字符串(注意，没有on)</p>\n</li>\n<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>\n</li>\n<li><p>参数3：<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong>。如果不写，则默认为false。【重要】</p>\n</li>\n</ul>\n<p><strong>方法3（行内绑定）：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--行内绑定--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"fn()\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        alert(<span class=\"hljs-string\">\"我是弹出的内容\"</span>);<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。</p>\n<p>这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png\" alt=\"\"></p>\n<h3 id=\"获取event对象\"><a href=\"#获取event对象\" class=\"headerlink\" title=\"获取event对象\"></a>获取event对象</h3><p>除去以上直接使用event外，标准兼容写法如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-comment\">//点击页面的任何部分</span><br>    <span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>        event = event || <span class=\"hljs-built_in\">window</span>.event; <span class=\"hljs-comment\">//兼容性写法</span><br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"event属性\"><a href=\"#event属性\" class=\"headerlink\" title=\"event属性\"></a>event属性</h3><p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png\" alt=\"\"></p>\n<p>除此之外，还有以下等信息：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">keyCode</span>\t<span class=\"hljs-comment\">// 返回响应的键盘信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件传播的三个阶段是：事件捕获、事件冒泡和目标。</p>\n<ul>\n<li>事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。</li>\n<li>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</li>\n<li>事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png\" alt=\"\"></p>\n<h3 id=\"捕获与冒泡实验\"><a href=\"#捕获与冒泡实验\" class=\"headerlink\" title=\"捕获与冒泡实验\"></a>捕获与冒泡实验</h3><p>addEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>];<br>        div.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"div\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>        p.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"p\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实验结果</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n"},{"title":"2.1、JS事件处理","date":"2020-08-15T14:51:57.000Z","fileName":"event-obj","_content":"\n## 事件\n\n事件指的是一些特定的交互瞬间，如点击某个元素等等\n\nJavaScript 是以**事件驱动为核心**的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。\n\n### 事件的基本要素\n\n- 事件源：引发后续事件的html标签。\n\n- 事件：js中已经定义好了（见下图）。\n\n- 事件驱动程序：对样式和html的操作。也就是DOM。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png)\n\n### 事件程序的基本书写\n\n#### 1、获取事件源\n\n详见DOM操作中的相关操作，主要有`document.getElementById()`等方法\n\n#### 2、绑定事件\n\n以onclick事件为例：\n\n**方法1（绑定匿名函数）：**\n\n```\nelement.onclick = function () {\n\n}\n```\n\n**方法2（addEventListener）：**\n\n```\nelement.addEventListener('click', function () {\n\n}, false);\n```\n\n- 参数1：事件名的字符串(注意，没有on)\n\n- 参数2：回调函数：当事件触发时，该函数会被执行\n\n- 参数3：**true表示捕获阶段触发，false表示冒泡阶段触发（默认）**。如果不写，则默认为false。【重要】\n\n**方法3（行内绑定）：**\n\n```\n<!--行内绑定-->\n<div id=\"box1\" onclick=\"fn()\"></div>\n\n<script type=\"text/javascript\">\n    function fn() {\n        alert(\"我是弹出的内容\");\n    }\n</script>\n```\n\n\n\n\n\n## 事件对象\n\n当事件的响应函数被触发时，会产生一个事件对象`event`。浏览器每次都会将这个事件`event`作为实参传进之前的响应函数。\n\n这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png)\n\n### 获取event对象\n\n除去以上直接使用event外，标准兼容写法如下\n\n```\n<script>\n    //点击页面的任何部分\n    document.onclick = function (event) {\n        event = event || window.event; //兼容性写法\n    }\n</script>\n```\n\n\n\n### event属性\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png)\n\n除此之外，还有以下等信息：\n\n```\nkeyCode\t// 返回响应的键盘信息\n```\n\n\n\n\n\n## DOM事件流\n\n事件传播的三个阶段是：事件捕获、事件冒泡和目标。\n\n- 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。\n- 事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。\n- 事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png)\n\n\n\n### 捕获与冒泡实验\n\naddEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行\n\n```\n<body>\n    <div><p>click here</p></div>\n    <script>\n        var div = document.getElementsByTagName(\"div\")[0];\n        var p = document.getElementsByTagName(\"p\")[0];\n        div.addEventListener(\"click\", function() {\n            console.log(\"div\");\n        }, true);\n        p.addEventListener(\"click\", function() {\n            console.log(\"p\");\n        }, true);\n    </script>\n</body>\n```\n\n**实验结果**\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png)","source":"_posts/编程相关/JavaScript/event对象详解.md","raw":"---\ntitle: 2.1、JS事件处理\ndate: 2020-08-15 22:51:57\ntags:\n\t- 前端\ncategories:\n\t- 编程相关\n\t- JavaScript\nfileName: event-obj\n---\n\n## 事件\n\n事件指的是一些特定的交互瞬间，如点击某个元素等等\n\nJavaScript 是以**事件驱动为核心**的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。\n\n### 事件的基本要素\n\n- 事件源：引发后续事件的html标签。\n\n- 事件：js中已经定义好了（见下图）。\n\n- 事件驱动程序：对样式和html的操作。也就是DOM。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png)\n\n### 事件程序的基本书写\n\n#### 1、获取事件源\n\n详见DOM操作中的相关操作，主要有`document.getElementById()`等方法\n\n#### 2、绑定事件\n\n以onclick事件为例：\n\n**方法1（绑定匿名函数）：**\n\n```\nelement.onclick = function () {\n\n}\n```\n\n**方法2（addEventListener）：**\n\n```\nelement.addEventListener('click', function () {\n\n}, false);\n```\n\n- 参数1：事件名的字符串(注意，没有on)\n\n- 参数2：回调函数：当事件触发时，该函数会被执行\n\n- 参数3：**true表示捕获阶段触发，false表示冒泡阶段触发（默认）**。如果不写，则默认为false。【重要】\n\n**方法3（行内绑定）：**\n\n```\n<!--行内绑定-->\n<div id=\"box1\" onclick=\"fn()\"></div>\n\n<script type=\"text/javascript\">\n    function fn() {\n        alert(\"我是弹出的内容\");\n    }\n</script>\n```\n\n\n\n\n\n## 事件对象\n\n当事件的响应函数被触发时，会产生一个事件对象`event`。浏览器每次都会将这个事件`event`作为实参传进之前的响应函数。\n\n这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png)\n\n### 获取event对象\n\n除去以上直接使用event外，标准兼容写法如下\n\n```\n<script>\n    //点击页面的任何部分\n    document.onclick = function (event) {\n        event = event || window.event; //兼容性写法\n    }\n</script>\n```\n\n\n\n### event属性\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png)\n\n除此之外，还有以下等信息：\n\n```\nkeyCode\t// 返回响应的键盘信息\n```\n\n\n\n\n\n## DOM事件流\n\n事件传播的三个阶段是：事件捕获、事件冒泡和目标。\n\n- 事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。\n- 事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。\n- 事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png)\n\n\n\n### 捕获与冒泡实验\n\naddEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行\n\n```\n<body>\n    <div><p>click here</p></div>\n    <script>\n        var div = document.getElementsByTagName(\"div\")[0];\n        var p = document.getElementsByTagName(\"p\")[0];\n        div.addEventListener(\"click\", function() {\n            console.log(\"div\");\n        }, true);\n        p.addEventListener(\"click\", function() {\n            console.log(\"p\");\n        }, true);\n    </script>\n</body>\n```\n\n**实验结果**\n\n![](http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png)","slug":"编程相关/JavaScript/event对象详解","published":1,"updated":"2021-01-11T04:29:06.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moc4006brwjs9jjrf0l6","content":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>事件指的是一些特定的交互瞬间，如点击某个元素等等</p>\n<p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p>\n<h3 id=\"事件的基本要素\"><a href=\"#事件的基本要素\" class=\"headerlink\" title=\"事件的基本要素\"></a>事件的基本要素</h3><ul>\n<li><p>事件源：引发后续事件的html标签。</p>\n</li>\n<li><p>事件：js中已经定义好了（见下图）。</p>\n</li>\n<li><p>事件驱动程序：对样式和html的操作。也就是DOM。</p>\n</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"事件程序的基本书写\"><a href=\"#事件程序的基本书写\" class=\"headerlink\" title=\"事件程序的基本书写\"></a>事件程序的基本书写</h3><h4 id=\"1、获取事件源\"><a href=\"#1、获取事件源\" class=\"headerlink\" title=\"1、获取事件源\"></a>1、获取事件源</h4><p>详见DOM操作中的相关操作，主要有<code>document.getElementById()</code>等方法</p>\n<h4 id=\"2、绑定事件\"><a href=\"#2、绑定事件\" class=\"headerlink\" title=\"2、绑定事件\"></a>2、绑定事件</h4><p>以onclick事件为例：</p>\n<p><strong>方法1（绑定匿名函数）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法2（addEventListener）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数1：事件名的字符串(注意，没有on)</p>\n</li>\n<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>\n</li>\n<li><p>参数3：<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong>。如果不写，则默认为false。【重要】</p>\n</li>\n</ul>\n<p><strong>方法3（行内绑定）：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--行内绑定--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"fn()\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        alert(<span class=\"hljs-string\">\"我是弹出的内容\"</span>);<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。</p>\n<p>这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png\" alt=\"\"></p>\n<h3 id=\"获取event对象\"><a href=\"#获取event对象\" class=\"headerlink\" title=\"获取event对象\"></a>获取event对象</h3><p>除去以上直接使用event外，标准兼容写法如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-comment\">//点击页面的任何部分</span><br>    <span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>        event = event || <span class=\"hljs-built_in\">window</span>.event; <span class=\"hljs-comment\">//兼容性写法</span><br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"event属性\"><a href=\"#event属性\" class=\"headerlink\" title=\"event属性\"></a>event属性</h3><p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png\" alt=\"\"></p>\n<p>除此之外，还有以下等信息：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">keyCode</span>\t<span class=\"hljs-comment\">// 返回响应的键盘信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件传播的三个阶段是：事件捕获、事件冒泡和目标。</p>\n<ul>\n<li>事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。</li>\n<li>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</li>\n<li>事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png\" alt=\"\"></p>\n<h3 id=\"捕获与冒泡实验\"><a href=\"#捕获与冒泡实验\" class=\"headerlink\" title=\"捕获与冒泡实验\"></a>捕获与冒泡实验</h3><p>addEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>];<br>        div.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"div\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>        p.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"p\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实验结果</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><p>事件指的是一些特定的交互瞬间，如点击某个元素等等</p>\n<p>JavaScript 是以<strong>事件驱动为核心</strong>的一门语言。JavaScript 与 HTML 之间的交互是通过事件实现的。</p>\n<h3 id=\"事件的基本要素\"><a href=\"#事件的基本要素\" class=\"headerlink\" title=\"事件的基本要素\"></a>事件的基本要素</h3><ul>\n<li><p>事件源：引发后续事件的html标签。</p>\n</li>\n<li><p>事件：js中已经定义好了（见下图）。</p>\n</li>\n<li><p>事件驱动程序：对样式和html的操作。也就是DOM。</p>\n</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/js%E4%BA%8B%E4%BB%B6.png\" alt=\"\"></p>\n<h3 id=\"事件程序的基本书写\"><a href=\"#事件程序的基本书写\" class=\"headerlink\" title=\"事件程序的基本书写\"></a>事件程序的基本书写</h3><h4 id=\"1、获取事件源\"><a href=\"#1、获取事件源\" class=\"headerlink\" title=\"1、获取事件源\"></a>1、获取事件源</h4><p>详见DOM操作中的相关操作，主要有<code>document.getElementById()</code>等方法</p>\n<h4 id=\"2、绑定事件\"><a href=\"#2、绑定事件\" class=\"headerlink\" title=\"2、绑定事件\"></a>2、绑定事件</h4><p>以onclick事件为例：</p>\n<p><strong>方法1（绑定匿名函数）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>方法2（addEventListener）：</strong></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\">element.addEventListener(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>&#123;<br><br>&#125;, <span class=\"hljs-literal\">false</span>);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>参数1：事件名的字符串(注意，没有on)</p>\n</li>\n<li><p>参数2：回调函数：当事件触发时，该函数会被执行</p>\n</li>\n<li><p>参数3：<strong>true表示捕获阶段触发，false表示冒泡阶段触发（默认）</strong>。如果不写，则默认为false。【重要】</p>\n</li>\n</ul>\n<p><strong>方法3（行内绑定）：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--行内绑定--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"box1\"</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">\"fn()\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\"><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        alert(<span class=\"hljs-string\">\"我是弹出的内容\"</span>);<br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>当事件的响应函数被触发时，会产生一个事件对象<code>event</code>。浏览器每次都会将这个事件<code>event</code>作为实参传进之前的响应函数。</p>\n<p>这个对象中包含了与当前事件相关的一切信息。比如鼠标的坐标、键盘的哪个按键被按下、鼠标滚轮滚动的方向等。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E4%BF%A1%E6%81%AF.png\" alt=\"\"></p>\n<h3 id=\"获取event对象\"><a href=\"#获取event对象\" class=\"headerlink\" title=\"获取event对象\"></a>获取event对象</h3><p>除去以上直接使用event外，标准兼容写法如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>    <span class=\"hljs-comment\">//点击页面的任何部分</span><br>    <span class=\"hljs-built_in\">document</span>.onclick = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event</span>) </span>&#123;<br>        event = event || <span class=\"hljs-built_in\">window</span>.event; <span class=\"hljs-comment\">//兼容性写法</span><br>    &#125;<br></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"event属性\"><a href=\"#event属性\" class=\"headerlink\" title=\"event属性\"></a>event属性</h3><p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/event%E5%B1%9E%E6%80%A7.png\" alt=\"\"></p>\n<p>除此之外，还有以下等信息：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-built_in\">keyCode</span>\t<span class=\"hljs-comment\">// 返回响应的键盘信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件传播的三个阶段是：事件捕获、事件冒泡和目标。</p>\n<ul>\n<li>事件捕获阶段：事件从祖先元素往子元素查找（DOM树结构），直到捕获到事件目标 target。在这个过程中，默认情况下，事件相应的监听函数是不会被触发的。</li>\n<li>事件目标：当到达目标元素之后，执行目标元素该事件相应的处理函数。如果没有绑定监听函数，那就不执行。</li>\n<li>事件冒泡阶段：事件从事件目标 target 开始，从子元素往冒泡祖先元素冒泡，直到页面的最上一级标签。</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E6%8D%95%E8%8E%B7%E4%B8%8E%E5%86%92%E6%B3%A1.png\" alt=\"\"></p>\n<h3 id=\"捕获与冒泡实验\"><a href=\"#捕获与冒泡实验\" class=\"headerlink\" title=\"捕获与冒泡实验\"></a>捕获与冒泡实验</h3><p>addEventListener函数最后一个参数为true代表事件在捕获阶段执行，为false代表在冒泡阶段进行</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"><br>        <span class=\"hljs-keyword\">var</span> div = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"div\"</span>)[<span class=\"hljs-number\">0</span>];<br>        <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>];<br>        div.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"div\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>        p.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"p\"</span>);<br>        &#125;, <span class=\"hljs-literal\">true</span>);<br>    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>实验结果</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/image/JS%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/%E5%86%92%E6%B3%A1%E5%AE%9E%E9%AA%8C%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n"},{"title":"Python实现深度图转点云","date":"2020-10-04T02:44:17.000Z","fileName":"python-depth-points","_content":"\n## 理论基础\n\n深度图转点云本质上我认为就算利用深度信息**将图像从像素坐标系转化到相机坐标系的过程**（很多资料说是转到世界坐标系，但我认为这是一个如何定义世界坐标系的问题）\n\n![](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E5%9D%90%E6%A0%87%E7%B3%BB.jpg)\n\n忽略推导过程，其实可以归纳为从图像点`[u, v]`到相机坐标点`[x_c, y_c, z_c]`的过程，具体公式如下（其中depth(u, v)表示深度图(u, v)位置的像素值）\n$$\nx_c = z_c (u - u_0) / f_x \\\\\ny_c = z_c (v - v_0) / f_y \\\\\nz_c = depth(u, v)\n$$\n\n\n\n## Python实现\n\n### 深度图\n\n![深度图](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E6%B7%B1%E5%BA%A6%E5%9B%BE.png)\n\n### 转换代码\n\n```\ndef depth2pc(depth_img):\n    \"\"\"\n    深度图转点云数据\n    图像坐标系 -> 世界坐标系 \n    :param depth_img: 深度图\n    :return: 点云数据 N*3\n    \"\"\"\n    \n    # 相机内参\n    cam_fx = 1120.12\n    cam_fy = 1120.12\n    cam_cx = 640.5\n    cam_cy = 360.5\n    factor = 1\n\n\t# 逐点处理，此过程可以使用numpy优化\n    m, n = depth_img.shape\n    point_cloud = []\n    for v in range(m):\n        for u in range(n):\n            if depth_img[v, u] == 0:\n                continue\n            depth = depth_img[v, u]\n            p_z = depth / factor\n            p_x = (u - cam_cx) * p_z / cam_fx\n            p_y = (v - cam_cy) * p_z / cam_fy\n            point_cloud.append([p_x, p_y, p_z])\n\n    point_cloud = np.array(point_cloud)\n\n    return point_cloud\n```\n\n### 转换后的点云\n\n*略去了将桌面等背景略去的相关代码*，转换后的点云数据如下\n\n![](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE.png)\n\n### 参考\n\n由于本人是初次接触点云相关数据，而任务又有时间要求，所以没有使用较为主流的C++下的pcl库，未来两个月打算学习以下点云相关的操作与理论，届时再进行更新\n\nhttps://blog.csdn.net/weixin_30284355/article/details/98320637","source":"_posts/编程相关/Python/Python实现深度图转点云.md","raw":"---\ntitle: Python实现深度图转点云\ndate: 2020-10-04 10:44:17\ntags:\n\t- 3D视觉\n\t- 点云\ncategories:\n\t- 编程相关\n\t- Python\nfileName: python-depth-points\n---\n\n## 理论基础\n\n深度图转点云本质上我认为就算利用深度信息**将图像从像素坐标系转化到相机坐标系的过程**（很多资料说是转到世界坐标系，但我认为这是一个如何定义世界坐标系的问题）\n\n![](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E5%9D%90%E6%A0%87%E7%B3%BB.jpg)\n\n忽略推导过程，其实可以归纳为从图像点`[u, v]`到相机坐标点`[x_c, y_c, z_c]`的过程，具体公式如下（其中depth(u, v)表示深度图(u, v)位置的像素值）\n$$\nx_c = z_c (u - u_0) / f_x \\\\\ny_c = z_c (v - v_0) / f_y \\\\\nz_c = depth(u, v)\n$$\n\n\n\n## Python实现\n\n### 深度图\n\n![深度图](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E6%B7%B1%E5%BA%A6%E5%9B%BE.png)\n\n### 转换代码\n\n```\ndef depth2pc(depth_img):\n    \"\"\"\n    深度图转点云数据\n    图像坐标系 -> 世界坐标系 \n    :param depth_img: 深度图\n    :return: 点云数据 N*3\n    \"\"\"\n    \n    # 相机内参\n    cam_fx = 1120.12\n    cam_fy = 1120.12\n    cam_cx = 640.5\n    cam_cy = 360.5\n    factor = 1\n\n\t# 逐点处理，此过程可以使用numpy优化\n    m, n = depth_img.shape\n    point_cloud = []\n    for v in range(m):\n        for u in range(n):\n            if depth_img[v, u] == 0:\n                continue\n            depth = depth_img[v, u]\n            p_z = depth / factor\n            p_x = (u - cam_cx) * p_z / cam_fx\n            p_y = (v - cam_cy) * p_z / cam_fy\n            point_cloud.append([p_x, p_y, p_z])\n\n    point_cloud = np.array(point_cloud)\n\n    return point_cloud\n```\n\n### 转换后的点云\n\n*略去了将桌面等背景略去的相关代码*，转换后的点云数据如下\n\n![](http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE.png)\n\n### 参考\n\n由于本人是初次接触点云相关数据，而任务又有时间要求，所以没有使用较为主流的C++下的pcl库，未来两个月打算学习以下点云相关的操作与理论，届时再进行更新\n\nhttps://blog.csdn.net/weixin_30284355/article/details/98320637","slug":"编程相关/Python/Python实现深度图转点云","published":1,"updated":"2021-01-11T05:05:20.105Z","_id":"ckjs3moc6006grwjsdg223m4x","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h2><p>深度图转点云本质上我认为就算利用深度信息<strong>将图像从像素坐标系转化到相机坐标系的过程</strong>（很多资料说是转到世界坐标系，但我认为这是一个如何定义世界坐标系的问题）</p>\n<p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E5%9D%90%E6%A0%87%E7%B3%BB.jpg\" alt=\"\"></p>\n<p>忽略推导过程，其实可以归纳为从图像点<code>[u, v]</code>到相机坐标点<code>[x_c, y_c, z_c]</code>的过程，具体公式如下（其中depth(u, v)表示深度图(u, v)位置的像素值）<br>$$<br>x_c = z_c (u - u_0) / f_x \\<br>y_c = z_c (v - v_0) / f_y \\<br>z_c = depth(u, v)<br>$$</p>\n<h2 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h2><h3 id=\"深度图\"><a href=\"#深度图\" class=\"headerlink\" title=\"深度图\"></a>深度图</h3><p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E6%B7%B1%E5%BA%A6%E5%9B%BE.png\" alt=\"深度图\"></p>\n<h3 id=\"转换代码\"><a href=\"#转换代码\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">def depth2pc(depth_img):<br>    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"<br>    深度图转点云数据<br>    图像坐标系 -&gt; 世界坐标系 <br>    :param depth_img: 深度图<br>    :return: 点云数据 N*3<br>    \"</span><span class=\"hljs-string\">\"\"</span><br>    <br>    <span class=\"hljs-comment\"># 相机内参</span><br>    <span class=\"hljs-attr\">cam_fx</span> = <span class=\"hljs-number\">1120.12</span><br>    <span class=\"hljs-attr\">cam_fy</span> = <span class=\"hljs-number\">1120.12</span><br>    <span class=\"hljs-attr\">cam_cx</span> = <span class=\"hljs-number\">640.5</span><br>    <span class=\"hljs-attr\">cam_cy</span> = <span class=\"hljs-number\">360.5</span><br>    <span class=\"hljs-attr\">factor</span> = <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-comment\"># 逐点处理，此过程可以使用numpy优化</span><br>    m, <span class=\"hljs-attr\">n</span> = depth_img.shape<br>    <span class=\"hljs-attr\">point_cloud</span> = []<br>    for v <span class=\"hljs-keyword\">in</span> range(m):<br>        for u <span class=\"hljs-keyword\">in</span> range(n):<br>            <span class=\"hljs-keyword\">if</span> depth_img[v, u] == <span class=\"hljs-number\">0</span>:<br>                continue<br>            <span class=\"hljs-attr\">depth</span> = depth_img[v, u]<br>            <span class=\"hljs-attr\">p_z</span> = depth / factor<br>            <span class=\"hljs-attr\">p_x</span> = (u - cam_cx) * p_z / cam_fx<br>            <span class=\"hljs-attr\">p_y</span> = (v - cam_cy) * p_z / cam_fy<br>            point_cloud.append([p_x, p_y, p_z])<br><br>    <span class=\"hljs-attr\">point_cloud</span> = np.array(point_cloud)<br><br>    return point_cloud<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"转换后的点云\"><a href=\"#转换后的点云\" class=\"headerlink\" title=\"转换后的点云\"></a>转换后的点云</h3><p><em>略去了将桌面等背景略去的相关代码</em>，转换后的点云数据如下</p>\n<p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE.png\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>由于本人是初次接触点云相关数据，而任务又有时间要求，所以没有使用较为主流的C++下的pcl库，未来两个月打算学习以下点云相关的操作与理论，届时再进行更新</p>\n<p><a href=\"https://blog.csdn.net/weixin_30284355/article/details/98320637\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_30284355/article/details/98320637</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"理论基础\"><a href=\"#理论基础\" class=\"headerlink\" title=\"理论基础\"></a>理论基础</h2><p>深度图转点云本质上我认为就算利用深度信息<strong>将图像从像素坐标系转化到相机坐标系的过程</strong>（很多资料说是转到世界坐标系，但我认为这是一个如何定义世界坐标系的问题）</p>\n<p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E5%9D%90%E6%A0%87%E7%B3%BB.jpg\" alt=\"\"></p>\n<p>忽略推导过程，其实可以归纳为从图像点<code>[u, v]</code>到相机坐标点<code>[x_c, y_c, z_c]</code>的过程，具体公式如下（其中depth(u, v)表示深度图(u, v)位置的像素值）<br>$$<br>x_c = z_c (u - u_0) / f_x \\<br>y_c = z_c (v - v_0) / f_y \\<br>z_c = depth(u, v)<br>$$</p>\n<h2 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h2><h3 id=\"深度图\"><a href=\"#深度图\" class=\"headerlink\" title=\"深度图\"></a>深度图</h3><p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E6%B7%B1%E5%BA%A6%E5%9B%BE.png\" alt=\"深度图\"></p>\n<h3 id=\"转换代码\"><a href=\"#转换代码\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h3><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\">def depth2pc(depth_img):<br>    <span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"<br>    深度图转点云数据<br>    图像坐标系 -&gt; 世界坐标系 <br>    :param depth_img: 深度图<br>    :return: 点云数据 N*3<br>    \"</span><span class=\"hljs-string\">\"\"</span><br>    <br>    <span class=\"hljs-comment\"># 相机内参</span><br>    <span class=\"hljs-attr\">cam_fx</span> = <span class=\"hljs-number\">1120.12</span><br>    <span class=\"hljs-attr\">cam_fy</span> = <span class=\"hljs-number\">1120.12</span><br>    <span class=\"hljs-attr\">cam_cx</span> = <span class=\"hljs-number\">640.5</span><br>    <span class=\"hljs-attr\">cam_cy</span> = <span class=\"hljs-number\">360.5</span><br>    <span class=\"hljs-attr\">factor</span> = <span class=\"hljs-number\">1</span><br><br>\t<span class=\"hljs-comment\"># 逐点处理，此过程可以使用numpy优化</span><br>    m, <span class=\"hljs-attr\">n</span> = depth_img.shape<br>    <span class=\"hljs-attr\">point_cloud</span> = []<br>    for v <span class=\"hljs-keyword\">in</span> range(m):<br>        for u <span class=\"hljs-keyword\">in</span> range(n):<br>            <span class=\"hljs-keyword\">if</span> depth_img[v, u] == <span class=\"hljs-number\">0</span>:<br>                continue<br>            <span class=\"hljs-attr\">depth</span> = depth_img[v, u]<br>            <span class=\"hljs-attr\">p_z</span> = depth / factor<br>            <span class=\"hljs-attr\">p_x</span> = (u - cam_cx) * p_z / cam_fx<br>            <span class=\"hljs-attr\">p_y</span> = (v - cam_cy) * p_z / cam_fy<br>            point_cloud.append([p_x, p_y, p_z])<br><br>    <span class=\"hljs-attr\">point_cloud</span> = np.array(point_cloud)<br><br>    return point_cloud<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"转换后的点云\"><a href=\"#转换后的点云\" class=\"headerlink\" title=\"转换后的点云\"></a>转换后的点云</h3><p><em>略去了将桌面等背景略去的相关代码</em>，转换后的点云数据如下</p>\n<p><img src=\"http://cdn.ziyedy.top/Python%E5%AE%9E%E7%8E%B0%E6%B7%B1%E5%BA%A6%E5%9B%BE%E8%BD%AC%E7%82%B9%E4%BA%91/%E7%82%B9%E4%BA%91%E6%95%B0%E6%8D%AE.png\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>由于本人是初次接触点云相关数据，而任务又有时间要求，所以没有使用较为主流的C++下的pcl库，未来两个月打算学习以下点云相关的操作与理论，届时再进行更新</p>\n<p><a href=\"https://blog.csdn.net/weixin_30284355/article/details/98320637\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_30284355/article/details/98320637</a></p>\n"},{"title":"pygame基础","date":"2020-05-15T08:11:20.000Z","fileName":"pygame-basic-knowledge","_content":"\n官方文档：https://www.pygame.org/docs/\n\n### 基本流程\n\n1. 引入相关的包\n2. 初始化，pygame.init()\n3. 得到屏幕对象，`screen = pygame.display.set_mode((320, 240))`\n4. 游戏主循环\n   * 处理游戏事件\n   * 更新游戏状态\n   * 屏幕重新绘制\n\n基本代码框架\n\n```\nimport pygame\n# 初始化\npygame.init()\n# 获取屏幕对象\nscreen = pygame.display.set_mode((width, height))\n# 游戏主循环\nwhile True:\n\t# 处理游戏事件\n\tfor event in pygame.event.get():\n\t\tpass\n\t# 更新游戏状态（游戏逻辑）\n\t\n\t# 重新绘制屏幕\n```\n\n\n\n### 绘制图片\n\n基本流程如下\n\n```\n# 加载图片\nball = pygame.image.load('assets/images/background.png')\n\n# 图片绘制\n    screen.blit(ball, ball.get_rect)\n    pygame.display.flip()\n```\n\n其中`get_rect`返回值为（left, top, width, height）。前者为图片显示的左上角坐标，后者为图片的长与宽。\n\n绘制其他模块自带的图形\n\n```\nred = pygame.Color(255, 0, 0)\n# 画线\npygame.draw.line(screen, red, (10,10), (200, 200),10)\n# 画矩形\npygame.draw.rect(screen,red,(10,20,200,300),10)\n# 画圆\npygame.draw.circle(screen, red, (100, 100),50,5)\n```\n\n\n\n### 绘制文字\n\n可以使用系统默认的字体进行加载，也可以在项目中使用ttf文件作为资源进行加载。\n\n```\n# 加载字体（使用系统默认字体进行加载）\nred = pygame.Color(255, 0, 0)\nfonts = pygame.font.SysFont('宋体', 40)\ntext = fonts.render('Scores:', True, red)\n\n# 写于游戏主循环\nscreen.blit(text, (20, 20))\npygame.display.flip()\n```\n\n加载项目中所带的ttf文件\n\n```\nfonts = pygame.font.Font('*.ttf', 40)\n```\n\n\n\n### 游戏音效\n\n```\n# 加载音乐\nbgm = pygame.mixer_music.load('assets/sounds/game_bg_music.mp3')\n# 循环播放\npygame.mixer_music.play(-1)\n```\n\n设置音量大小\n\n```\npygame.mixer_music.set_volume(0.1) 输入值为（0，1）\n```\n\n\n\n### 动画切换\n\n两张图片的切换（pygame貌似不支持使用gif之类的动图）\n\n思路：通过设置帧率进行切换，`pygame.time.Clock`\n\n```\nimport sys, pygame\n# 初始化\npygame.init()\n# 屏幕对象\nscreen = pygame.display.set_mode((320, 800))\n\nimage1 = pygame.image.load('assets/images/hero1.png')\nimage2 = pygame.image.load('assets/images/hero2.png')\ncount = 0\nclock = pygame.time.Clock()\n\n# 游戏主循环\nwhile True:\n\n    count += 1\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    screen.fill(pygame.Color(255, 255, 255))\n    # 每秒60次\n    clock.tick(60)\n    if count % 5 == 0:\n        screen.blit(image1, (20, 20))\n    else:\n        screen.blit(image2, (20, 20))\n\n    pygame.display.update()\n```\n\n\n\n### 精灵及精灵组\n\n**精灵**：可以理解为需要操纵的图片（飞机大战中的飞机），一种可以在屏幕上移动的图形对象，并且可以和其他图形对象交互。可以使用pygame绘制，也可以是资源图片。\n\n**精灵组**：是一个容器，用于管理组内精灵的绘制与更新，精灵加入精灵组，精灵组会自动调用每一个精灵的方法。\n\n基本使用方法就是，对自己的精灵类继承自`pygame.sprite.Sprite`，然后填补update之类的方法即可。\n\n**碰撞检测**：检测两个精灵有没有重叠的部分\n\n```\n# 输入两个精灵，输出为布尔值\nres = pygame.sprite.collide_rect(sprite1, sprite2)\n# 指定碰撞精度\nres = pygame.sprite.collide_rect_ratio(0.5)(sprite1, sprite2)\n```\n","source":"_posts/编程相关/Python/pygame基础.md","raw":"---\ntitle: pygame基础\ndate: 2020-05-15 16:11:20\ntags:\n\t- Pygame\ncategories:\n\t- 编程相关\n\t- Python\nfileName: pygame-basic-knowledge\n---\n\n官方文档：https://www.pygame.org/docs/\n\n### 基本流程\n\n1. 引入相关的包\n2. 初始化，pygame.init()\n3. 得到屏幕对象，`screen = pygame.display.set_mode((320, 240))`\n4. 游戏主循环\n   * 处理游戏事件\n   * 更新游戏状态\n   * 屏幕重新绘制\n\n基本代码框架\n\n```\nimport pygame\n# 初始化\npygame.init()\n# 获取屏幕对象\nscreen = pygame.display.set_mode((width, height))\n# 游戏主循环\nwhile True:\n\t# 处理游戏事件\n\tfor event in pygame.event.get():\n\t\tpass\n\t# 更新游戏状态（游戏逻辑）\n\t\n\t# 重新绘制屏幕\n```\n\n\n\n### 绘制图片\n\n基本流程如下\n\n```\n# 加载图片\nball = pygame.image.load('assets/images/background.png')\n\n# 图片绘制\n    screen.blit(ball, ball.get_rect)\n    pygame.display.flip()\n```\n\n其中`get_rect`返回值为（left, top, width, height）。前者为图片显示的左上角坐标，后者为图片的长与宽。\n\n绘制其他模块自带的图形\n\n```\nred = pygame.Color(255, 0, 0)\n# 画线\npygame.draw.line(screen, red, (10,10), (200, 200),10)\n# 画矩形\npygame.draw.rect(screen,red,(10,20,200,300),10)\n# 画圆\npygame.draw.circle(screen, red, (100, 100),50,5)\n```\n\n\n\n### 绘制文字\n\n可以使用系统默认的字体进行加载，也可以在项目中使用ttf文件作为资源进行加载。\n\n```\n# 加载字体（使用系统默认字体进行加载）\nred = pygame.Color(255, 0, 0)\nfonts = pygame.font.SysFont('宋体', 40)\ntext = fonts.render('Scores:', True, red)\n\n# 写于游戏主循环\nscreen.blit(text, (20, 20))\npygame.display.flip()\n```\n\n加载项目中所带的ttf文件\n\n```\nfonts = pygame.font.Font('*.ttf', 40)\n```\n\n\n\n### 游戏音效\n\n```\n# 加载音乐\nbgm = pygame.mixer_music.load('assets/sounds/game_bg_music.mp3')\n# 循环播放\npygame.mixer_music.play(-1)\n```\n\n设置音量大小\n\n```\npygame.mixer_music.set_volume(0.1) 输入值为（0，1）\n```\n\n\n\n### 动画切换\n\n两张图片的切换（pygame貌似不支持使用gif之类的动图）\n\n思路：通过设置帧率进行切换，`pygame.time.Clock`\n\n```\nimport sys, pygame\n# 初始化\npygame.init()\n# 屏幕对象\nscreen = pygame.display.set_mode((320, 800))\n\nimage1 = pygame.image.load('assets/images/hero1.png')\nimage2 = pygame.image.load('assets/images/hero2.png')\ncount = 0\nclock = pygame.time.Clock()\n\n# 游戏主循环\nwhile True:\n\n    count += 1\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    screen.fill(pygame.Color(255, 255, 255))\n    # 每秒60次\n    clock.tick(60)\n    if count % 5 == 0:\n        screen.blit(image1, (20, 20))\n    else:\n        screen.blit(image2, (20, 20))\n\n    pygame.display.update()\n```\n\n\n\n### 精灵及精灵组\n\n**精灵**：可以理解为需要操纵的图片（飞机大战中的飞机），一种可以在屏幕上移动的图形对象，并且可以和其他图形对象交互。可以使用pygame绘制，也可以是资源图片。\n\n**精灵组**：是一个容器，用于管理组内精灵的绘制与更新，精灵加入精灵组，精灵组会自动调用每一个精灵的方法。\n\n基本使用方法就是，对自己的精灵类继承自`pygame.sprite.Sprite`，然后填补update之类的方法即可。\n\n**碰撞检测**：检测两个精灵有没有重叠的部分\n\n```\n# 输入两个精灵，输出为布尔值\nres = pygame.sprite.collide_rect(sprite1, sprite2)\n# 指定碰撞精度\nres = pygame.sprite.collide_rect_ratio(0.5)(sprite1, sprite2)\n```\n","slug":"编程相关/Python/pygame基础","published":1,"updated":"2021-01-11T05:03:23.072Z","_id":"ckjs3moc7006irwjse91vfvs9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>官方文档：<a href=\"https://www.pygame.org/docs/\" target=\"_blank\" rel=\"noopener\">https://www.pygame.org/docs/</a></p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><ol>\n<li>引入相关的包</li>\n<li>初始化，pygame.init()</li>\n<li>得到屏幕对象，<code>screen = pygame.display.set_mode((320, 240))</code></li>\n<li>游戏主循环<ul>\n<li>处理游戏事件</li>\n<li>更新游戏状态</li>\n<li>屏幕重新绘制</li>\n</ul>\n</li>\n</ol>\n<p>基本代码框架</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import pygame<br><span class=\"hljs-comment\"># 初始化</span><br>pygame.init()<br><span class=\"hljs-comment\"># 获取屏幕对象</span><span class=\"hljs-built_in\"><br>screen </span>= pygame.display.set_mode((width, height))<br><span class=\"hljs-comment\"># 游戏主循环</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t# 处理游戏事件<br>\t<span class=\"hljs-keyword\">for</span> event <span class=\"hljs-keyword\">in</span> pygame.event.<span class=\"hljs-builtin-name\">get</span>():<br>\t\tpass<br>\t# 更新游戏状态（游戏逻辑）<br>\t<br>\t# 重新绘制屏幕<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绘制图片\"><a href=\"#绘制图片\" class=\"headerlink\" title=\"绘制图片\"></a>绘制图片</h3><p>基本流程如下</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-comment\"># 加载图片</span><br><span class=\"hljs-keyword\">ball </span>= pygame.image.load(<span class=\"hljs-string\">'assets/images/background.png'</span>)<br><br><span class=\"hljs-comment\"># 图片绘制</span><br>    <span class=\"hljs-keyword\">screen.blit(ball, </span><span class=\"hljs-keyword\">ball.get_rect)<br></span>    pygame.<span class=\"hljs-keyword\">display.flip()</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>get_rect</code>返回值为（left, top, width, height）。前者为图片显示的左上角坐标，后者为图片的长与宽。</p>\n<p>绘制其他模块自带的图形</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">red = pygame.Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br># 画线<br>pygame.draw.line(screen, red, (<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>), (<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>),<span class=\"hljs-number\">10</span>)<br># 画矩形<br>pygame.draw.rect(screen,red,(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">300</span>),<span class=\"hljs-number\">10</span>)<br># 画圆<br>pygame.draw.circle(screen, red, (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>),<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绘制文字\"><a href=\"#绘制文字\" class=\"headerlink\" title=\"绘制文字\"></a>绘制文字</h3><p>可以使用系统默认的字体进行加载，也可以在项目中使用ttf文件作为资源进行加载。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 加载字体（使用系统默认字体进行加载）</span><br><span class=\"hljs-string\">red</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">pygame.Color(255,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">fonts</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">pygame.font.SysFont('宋体',</span> <span class=\"hljs-number\">40</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">text</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fonts.render('Scores:',</span> <span class=\"hljs-literal\">True</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">red)</span><br><br><span class=\"hljs-comment\"># 写于游戏主循环</span><br><span class=\"hljs-string\">screen.blit(text,</span> <span class=\"hljs-string\">(20,</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">))</span><br><span class=\"hljs-string\">pygame.display.flip()</span><br></code></pre></td></tr></table></figure>\n\n<p>加载项目中所带的ttf文件</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">fonts</span> = pygame.font.Font(<span class=\"hljs-string\">'*.ttf'</span>, <span class=\"hljs-number\">40</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"游戏音效\"><a href=\"#游戏音效\" class=\"headerlink\" title=\"游戏音效\"></a>游戏音效</h3><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 加载音乐</span><br>bgm = pygame.mixer_music.load(<span class=\"hljs-string\">'assets/sounds/game_bg_music.mp3'</span>)<br><span class=\"hljs-meta\"># 循环播放</span><br>pygame.mixer_music.play(<span class=\"hljs-number\">-1</span>)<br></code></pre></td></tr></table></figure>\n\n<p>设置音量大小</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">pygame.mixer_music.set_volume(<span class=\"hljs-number\">0.1</span>) 输入值为（<span class=\"hljs-number\">0</span>，<span class=\"hljs-number\">1</span>）<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动画切换\"><a href=\"#动画切换\" class=\"headerlink\" title=\"动画切换\"></a>动画切换</h3><p>两张图片的切换（pygame貌似不支持使用gif之类的动图）</p>\n<p>思路：通过设置帧率进行切换，<code>pygame.time.Clock</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import sys, pygame<br><span class=\"hljs-comment\"># 初始化</span><br>pygame.init()<br><span class=\"hljs-comment\"># 屏幕对象</span><span class=\"hljs-built_in\"><br>screen </span>= pygame.display.set_mode((320, 800))<br><br>image1 = pygame.image.load(<span class=\"hljs-string\">'assets/images/hero1.png'</span>)<br>image2 = pygame.image.load(<span class=\"hljs-string\">'assets/images/hero2.png'</span>)<br>count = 0<span class=\"hljs-built_in\"><br>clock </span>= pygame.time.Clock()<br><br><span class=\"hljs-comment\"># 游戏主循环</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br><br>    count += 1<br>    <span class=\"hljs-keyword\">for</span> event <span class=\"hljs-keyword\">in</span> pygame.event.<span class=\"hljs-builtin-name\">get</span>():<br>        <span class=\"hljs-keyword\">if</span> event.type == pygame.QUIT:<br>            pygame.quit()<br>            sys.exit()<br>    screen.fill(pygame.Color(255, 255, 255))<br>    # 每秒60次<br>    clock.tick(60)<br>    <span class=\"hljs-keyword\">if</span> count % 5 == 0:<br>        screen.blit(image1, (20, 20))<br>    <span class=\"hljs-keyword\">else</span>:<br>        screen.blit(image2, (20, 20))<br><br>    pygame.display.update()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"精灵及精灵组\"><a href=\"#精灵及精灵组\" class=\"headerlink\" title=\"精灵及精灵组\"></a>精灵及精灵组</h3><p><strong>精灵</strong>：可以理解为需要操纵的图片（飞机大战中的飞机），一种可以在屏幕上移动的图形对象，并且可以和其他图形对象交互。可以使用pygame绘制，也可以是资源图片。</p>\n<p><strong>精灵组</strong>：是一个容器，用于管理组内精灵的绘制与更新，精灵加入精灵组，精灵组会自动调用每一个精灵的方法。</p>\n<p>基本使用方法就是，对自己的精灵类继承自<code>pygame.sprite.Sprite</code>，然后填补update之类的方法即可。</p>\n<p><strong>碰撞检测</strong>：检测两个精灵有没有重叠的部分</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 输入两个精灵，输出为布尔值</span><br><span class=\"hljs-attr\">res</span> = pygame.sprite.collide_rect(sprite1, sprite2)<br><span class=\"hljs-comment\"># 指定碰撞精度</span><br><span class=\"hljs-attr\">res</span> = pygame.sprite.collide_rect_ratio(<span class=\"hljs-number\">0.5</span>)(sprite1, sprite2)<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>官方文档：<a href=\"https://www.pygame.org/docs/\" target=\"_blank\" rel=\"noopener\">https://www.pygame.org/docs/</a></p>\n<h3 id=\"基本流程\"><a href=\"#基本流程\" class=\"headerlink\" title=\"基本流程\"></a>基本流程</h3><ol>\n<li>引入相关的包</li>\n<li>初始化，pygame.init()</li>\n<li>得到屏幕对象，<code>screen = pygame.display.set_mode((320, 240))</code></li>\n<li>游戏主循环<ul>\n<li>处理游戏事件</li>\n<li>更新游戏状态</li>\n<li>屏幕重新绘制</li>\n</ul>\n</li>\n</ol>\n<p>基本代码框架</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import pygame<br><span class=\"hljs-comment\"># 初始化</span><br>pygame.init()<br><span class=\"hljs-comment\"># 获取屏幕对象</span><span class=\"hljs-built_in\"><br>screen </span>= pygame.display.set_mode((width, height))<br><span class=\"hljs-comment\"># 游戏主循环</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>\t# 处理游戏事件<br>\t<span class=\"hljs-keyword\">for</span> event <span class=\"hljs-keyword\">in</span> pygame.event.<span class=\"hljs-builtin-name\">get</span>():<br>\t\tpass<br>\t# 更新游戏状态（游戏逻辑）<br>\t<br>\t# 重新绘制屏幕<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绘制图片\"><a href=\"#绘制图片\" class=\"headerlink\" title=\"绘制图片\"></a>绘制图片</h3><p>基本流程如下</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-comment\"># 加载图片</span><br><span class=\"hljs-keyword\">ball </span>= pygame.image.load(<span class=\"hljs-string\">'assets/images/background.png'</span>)<br><br><span class=\"hljs-comment\"># 图片绘制</span><br>    <span class=\"hljs-keyword\">screen.blit(ball, </span><span class=\"hljs-keyword\">ball.get_rect)<br></span>    pygame.<span class=\"hljs-keyword\">display.flip()</span><br></code></pre></td></tr></table></figure>\n\n<p>其中<code>get_rect</code>返回值为（left, top, width, height）。前者为图片显示的左上角坐标，后者为图片的长与宽。</p>\n<p>绘制其他模块自带的图形</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">red = pygame.Color(<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)<br># 画线<br>pygame.draw.line(screen, red, (<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>), (<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>),<span class=\"hljs-number\">10</span>)<br># 画矩形<br>pygame.draw.rect(screen,red,(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">200</span>,<span class=\"hljs-number\">300</span>),<span class=\"hljs-number\">10</span>)<br># 画圆<br>pygame.draw.circle(screen, red, (<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>),<span class=\"hljs-number\">50</span>,<span class=\"hljs-number\">5</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"绘制文字\"><a href=\"#绘制文字\" class=\"headerlink\" title=\"绘制文字\"></a>绘制文字</h3><p>可以使用系统默认的字体进行加载，也可以在项目中使用ttf文件作为资源进行加载。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># 加载字体（使用系统默认字体进行加载）</span><br><span class=\"hljs-string\">red</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">pygame.Color(255,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">fonts</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">pygame.font.SysFont('宋体',</span> <span class=\"hljs-number\">40</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">text</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fonts.render('Scores:',</span> <span class=\"hljs-literal\">True</span><span class=\"hljs-string\">,</span> <span class=\"hljs-string\">red)</span><br><br><span class=\"hljs-comment\"># 写于游戏主循环</span><br><span class=\"hljs-string\">screen.blit(text,</span> <span class=\"hljs-string\">(20,</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">))</span><br><span class=\"hljs-string\">pygame.display.flip()</span><br></code></pre></td></tr></table></figure>\n\n<p>加载项目中所带的ttf文件</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">fonts</span> = pygame.font.Font(<span class=\"hljs-string\">'*.ttf'</span>, <span class=\"hljs-number\">40</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"游戏音效\"><a href=\"#游戏音效\" class=\"headerlink\" title=\"游戏音效\"></a>游戏音效</h3><figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 加载音乐</span><br>bgm = pygame.mixer_music.load(<span class=\"hljs-string\">'assets/sounds/game_bg_music.mp3'</span>)<br><span class=\"hljs-meta\"># 循环播放</span><br>pygame.mixer_music.play(<span class=\"hljs-number\">-1</span>)<br></code></pre></td></tr></table></figure>\n\n<p>设置音量大小</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">pygame.mixer_music.set_volume(<span class=\"hljs-number\">0.1</span>) 输入值为（<span class=\"hljs-number\">0</span>，<span class=\"hljs-number\">1</span>）<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"动画切换\"><a href=\"#动画切换\" class=\"headerlink\" title=\"动画切换\"></a>动画切换</h3><p>两张图片的切换（pygame貌似不支持使用gif之类的动图）</p>\n<p>思路：通过设置帧率进行切换，<code>pygame.time.Clock</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import sys, pygame<br><span class=\"hljs-comment\"># 初始化</span><br>pygame.init()<br><span class=\"hljs-comment\"># 屏幕对象</span><span class=\"hljs-built_in\"><br>screen </span>= pygame.display.set_mode((320, 800))<br><br>image1 = pygame.image.load(<span class=\"hljs-string\">'assets/images/hero1.png'</span>)<br>image2 = pygame.image.load(<span class=\"hljs-string\">'assets/images/hero2.png'</span>)<br>count = 0<span class=\"hljs-built_in\"><br>clock </span>= pygame.time.Clock()<br><br><span class=\"hljs-comment\"># 游戏主循环</span><br><span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br><br>    count += 1<br>    <span class=\"hljs-keyword\">for</span> event <span class=\"hljs-keyword\">in</span> pygame.event.<span class=\"hljs-builtin-name\">get</span>():<br>        <span class=\"hljs-keyword\">if</span> event.type == pygame.QUIT:<br>            pygame.quit()<br>            sys.exit()<br>    screen.fill(pygame.Color(255, 255, 255))<br>    # 每秒60次<br>    clock.tick(60)<br>    <span class=\"hljs-keyword\">if</span> count % 5 == 0:<br>        screen.blit(image1, (20, 20))<br>    <span class=\"hljs-keyword\">else</span>:<br>        screen.blit(image2, (20, 20))<br><br>    pygame.display.update()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"精灵及精灵组\"><a href=\"#精灵及精灵组\" class=\"headerlink\" title=\"精灵及精灵组\"></a>精灵及精灵组</h3><p><strong>精灵</strong>：可以理解为需要操纵的图片（飞机大战中的飞机），一种可以在屏幕上移动的图形对象，并且可以和其他图形对象交互。可以使用pygame绘制，也可以是资源图片。</p>\n<p><strong>精灵组</strong>：是一个容器，用于管理组内精灵的绘制与更新，精灵加入精灵组，精灵组会自动调用每一个精灵的方法。</p>\n<p>基本使用方法就是，对自己的精灵类继承自<code>pygame.sprite.Sprite</code>，然后填补update之类的方法即可。</p>\n<p><strong>碰撞检测</strong>：检测两个精灵有没有重叠的部分</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-comment\"># 输入两个精灵，输出为布尔值</span><br><span class=\"hljs-attr\">res</span> = pygame.sprite.collide_rect(sprite1, sprite2)<br><span class=\"hljs-comment\"># 指定碰撞精度</span><br><span class=\"hljs-attr\">res</span> = pygame.sprite.collide_rect_ratio(<span class=\"hljs-number\">0.5</span>)(sprite1, sprite2)<br></code></pre></td></tr></table></figure>\n"},{"title":"Python操作MySQL数据库","date":"2020-06-15T07:37:28.000Z","fileName":"python-mysql-handle","_content":"\n**使用`mysql.connector`模块实现MySQL与Python的交互**\n\n### 创建连接\n\n代码示例如下\n\n```\nimport mysql.connector\n\nconfig = {\n    \"host\": \"localhost\",\n    \"port\": \"3306\",\n    \"user\": \"root\",\n    \"password\": \"password\",\n    \"database\": \"demo\"\n}\n\ncon = mysql.connector.connect(**config)\n\ncon.close()\n```\n\n\n\n\n\n### 游标（Cursor）\n\n`mysql.connector`中使用游标来执行SQL语句，并且查询结果也会保存在游标中\n\n#### 执行SQL语句\n\n```\ncurser = con.cursor()\ncurser.execute()\n```\n\n示例\n\n```\ncurser = con.cursor()\nsql = \"SELECT ename FROM t_emp;\"\ncurser.execute(sql)\nfor one in curser:\n    print(one[0])\n```\n\n\n\n事务控制\n\n```\ncon.start_transaction()\ncon.commit()\ncon.rollback()\n```\n\n异常处理\n\n```\ntry:\n    con = mysql.connector.connect(**config)\n    con.start_transaction()\n    con.commit()\nexcept Exception as e:\n    con.rollback()\nfinally:\n    if \"con\" in dir():\n        con.close()\n```\n\n\n\n数据库连接池\n\n```\npool = mysql.connector.pooling.MySQLConnectionPool(\n    **config,\n    pool_size=10\n)\ncon = pool.get_connection()\n```\n\n\n\n### SQL注入攻击\n\n","source":"_posts/编程相关/Python/Python操作MySQL数据库.md","raw":"---\ntitle: Python操作MySQL数据库\ndate: 2020-06-15 15:37:28\ntags:\n\t- Python\n\t- 数据库\ncategories:\n\t- 编程相关\n\t- Python\nfileName: python-mysql-handle\n---\n\n**使用`mysql.connector`模块实现MySQL与Python的交互**\n\n### 创建连接\n\n代码示例如下\n\n```\nimport mysql.connector\n\nconfig = {\n    \"host\": \"localhost\",\n    \"port\": \"3306\",\n    \"user\": \"root\",\n    \"password\": \"password\",\n    \"database\": \"demo\"\n}\n\ncon = mysql.connector.connect(**config)\n\ncon.close()\n```\n\n\n\n\n\n### 游标（Cursor）\n\n`mysql.connector`中使用游标来执行SQL语句，并且查询结果也会保存在游标中\n\n#### 执行SQL语句\n\n```\ncurser = con.cursor()\ncurser.execute()\n```\n\n示例\n\n```\ncurser = con.cursor()\nsql = \"SELECT ename FROM t_emp;\"\ncurser.execute(sql)\nfor one in curser:\n    print(one[0])\n```\n\n\n\n事务控制\n\n```\ncon.start_transaction()\ncon.commit()\ncon.rollback()\n```\n\n异常处理\n\n```\ntry:\n    con = mysql.connector.connect(**config)\n    con.start_transaction()\n    con.commit()\nexcept Exception as e:\n    con.rollback()\nfinally:\n    if \"con\" in dir():\n        con.close()\n```\n\n\n\n数据库连接池\n\n```\npool = mysql.connector.pooling.MySQLConnectionPool(\n    **config,\n    pool_size=10\n)\ncon = pool.get_connection()\n```\n\n\n\n### SQL注入攻击\n\n","slug":"编程相关/Python/Python操作MySQL数据库","published":1,"updated":"2021-01-11T05:04:21.055Z","_id":"ckjs3moc8006lrwjs554da0o2","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>使用<code>mysql.connector</code>模块实现MySQL与Python的交互</strong></p>\n<h3 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h3><p>代码示例如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import mysql.connector<br><span class=\"hljs-built_in\"><br>config </span>= &#123;<br>    <span class=\"hljs-string\">\"host\"</span>: <span class=\"hljs-string\">\"localhost\"</span>,<br>    <span class=\"hljs-string\">\"port\"</span>: <span class=\"hljs-string\">\"3306\"</span>,<br>    <span class=\"hljs-string\">\"user\"</span>: <span class=\"hljs-string\">\"root\"</span>,<br>    <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"password\"</span>,<br>    <span class=\"hljs-string\">\"database\"</span>: <span class=\"hljs-string\">\"demo\"</span><br>&#125;<br><br>con = mysql.connector.connect(*<span class=\"hljs-number\">*c</span>onfig)<br><br>con.close()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"游标（Cursor）\"><a href=\"#游标（Cursor）\" class=\"headerlink\" title=\"游标（Cursor）\"></a>游标（Cursor）</h3><p><code>mysql.connector</code>中使用游标来执行SQL语句，并且查询结果也会保存在游标中</p>\n<h4 id=\"执行SQL语句\"><a href=\"#执行SQL语句\" class=\"headerlink\" title=\"执行SQL语句\"></a>执行SQL语句</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">curser = <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-built_in\">cursor</span>()<br>curser.<span class=\"hljs-keyword\">execute</span>()<br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">curser = <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-built_in\">cursor</span>()<br>sql = <span class=\"hljs-string\">\"SELECT ename FROM t_emp;\"</span><br>curser.<span class=\"hljs-keyword\">execute</span>(sql)<br><span class=\"hljs-keyword\">for</span> one in curser:<br>    <span class=\"hljs-keyword\">print</span>(one[<span class=\"hljs-number\">0</span>])<br></code></pre></td></tr></table></figure>\n\n\n\n<p>事务控制</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.start_transaction</span>()<br><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.commit</span>()<br><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.rollback</span>()<br></code></pre></td></tr></table></figure>\n\n<p>异常处理</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-keyword\">con</span> = mysql.connector.connect(**config)<br>    <span class=\"hljs-keyword\">con</span>.start_transaction()<br>    <span class=\"hljs-keyword\">con</span>.commit()<br>except Exception <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">e</span>:<br>    <span class=\"hljs-keyword\">con</span>.rollback()<br><span class=\"hljs-keyword\">finally</span>:<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"con\"</span> in dir():<br>        <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-keyword\">close</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>数据库连接池</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-attr\">pool</span> = mysql.connector.pooling.MySQLConnectionPool(<br>    **config,<br>    <span class=\"hljs-attr\">pool_size=10</span><br>)<br><span class=\"hljs-attr\">con</span> = pool.get_connection()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL注入攻击\"><a href=\"#SQL注入攻击\" class=\"headerlink\" title=\"SQL注入攻击\"></a>SQL注入攻击</h3>","site":{"data":{}},"excerpt":"","more":"<p><strong>使用<code>mysql.connector</code>模块实现MySQL与Python的交互</strong></p>\n<h3 id=\"创建连接\"><a href=\"#创建连接\" class=\"headerlink\" title=\"创建连接\"></a>创建连接</h3><p>代码示例如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import mysql.connector<br><span class=\"hljs-built_in\"><br>config </span>= &#123;<br>    <span class=\"hljs-string\">\"host\"</span>: <span class=\"hljs-string\">\"localhost\"</span>,<br>    <span class=\"hljs-string\">\"port\"</span>: <span class=\"hljs-string\">\"3306\"</span>,<br>    <span class=\"hljs-string\">\"user\"</span>: <span class=\"hljs-string\">\"root\"</span>,<br>    <span class=\"hljs-string\">\"password\"</span>: <span class=\"hljs-string\">\"password\"</span>,<br>    <span class=\"hljs-string\">\"database\"</span>: <span class=\"hljs-string\">\"demo\"</span><br>&#125;<br><br>con = mysql.connector.connect(*<span class=\"hljs-number\">*c</span>onfig)<br><br>con.close()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"游标（Cursor）\"><a href=\"#游标（Cursor）\" class=\"headerlink\" title=\"游标（Cursor）\"></a>游标（Cursor）</h3><p><code>mysql.connector</code>中使用游标来执行SQL语句，并且查询结果也会保存在游标中</p>\n<h4 id=\"执行SQL语句\"><a href=\"#执行SQL语句\" class=\"headerlink\" title=\"执行SQL语句\"></a>执行SQL语句</h4><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">curser = <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-built_in\">cursor</span>()<br>curser.<span class=\"hljs-keyword\">execute</span>()<br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">curser = <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-built_in\">cursor</span>()<br>sql = <span class=\"hljs-string\">\"SELECT ename FROM t_emp;\"</span><br>curser.<span class=\"hljs-keyword\">execute</span>(sql)<br><span class=\"hljs-keyword\">for</span> one in curser:<br>    <span class=\"hljs-keyword\">print</span>(one[<span class=\"hljs-number\">0</span>])<br></code></pre></td></tr></table></figure>\n\n\n\n<p>事务控制</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.start_transaction</span>()<br><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.commit</span>()<br><span class=\"hljs-selector-tag\">con</span><span class=\"hljs-selector-class\">.rollback</span>()<br></code></pre></td></tr></table></figure>\n\n<p>异常处理</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">try</span>:<br>    <span class=\"hljs-keyword\">con</span> = mysql.connector.connect(**config)<br>    <span class=\"hljs-keyword\">con</span>.start_transaction()<br>    <span class=\"hljs-keyword\">con</span>.commit()<br>except Exception <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">e</span>:<br>    <span class=\"hljs-keyword\">con</span>.rollback()<br><span class=\"hljs-keyword\">finally</span>:<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-string\">\"con\"</span> in dir():<br>        <span class=\"hljs-keyword\">con</span>.<span class=\"hljs-keyword\">close</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<p>数据库连接池</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nix\"><span class=\"hljs-attr\">pool</span> = mysql.connector.pooling.MySQLConnectionPool(<br>    **config,<br>    <span class=\"hljs-attr\">pool_size=10</span><br>)<br><span class=\"hljs-attr\">con</span> = pool.get_connection()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL注入攻击\"><a href=\"#SQL注入攻击\" class=\"headerlink\" title=\"SQL注入攻击\"></a>SQL注入攻击</h3>"},{"title":"使用plyfile库对.ply文件进行读写操作","date":"2020-10-04T03:04:48.000Z","fileName":"plyfile","_content":"\n### 安装plyfile库\n\n直接使用pip命令即可\n\n```\npip install plyfile\n```\n\n### 进行*.ply文件读取\n\n读取ply文件返回的是numpy数组，读取的方法也比较简单\n\n```\n# 读入ply文件\nplydata = PlyData.read('tet.ply')\n\n# 读取所有x坐标\nplydata.elements[0].data['x']\nplydata['vertex'].data['x']\nplydata['vertex']['x']\n\n# 读取第一个点的3d坐标\nplydata.elements[0].data[0]\nplydata['vertex'][0]\n```\n\n#### 读取函数\n\n```\nfrom plyfile import PlyData, PlyElement\ndef read_ply(filename):\n    \"\"\" 读取坐标，返回值为 n * 3 \"\"\"\n    plydata = PlyData.read(filename)\n    pc = plydata['vertex'].data\n    pc_array = np.array([[x, y, z] for x,y,z in pc])\n    return pc_array\n```\n\n### 进行*.ply文件写入\n\n```\nfrom plyfile import PlyData, PlyElement\ndef write_ply(save_path, points, text=True):\n    \"\"\"\n    输入点云数据，并写入一个*.ply文件\n    :param save_path: 文件路径 + *.ply\n    :param points:\n    :param text:\n    :return: \n    \"\"\"\n    points = [(points[i, 0], points[i, 1], points[i, 2]) for i in range(points.shape[0])]\n    vertex = np.array(points, dtype=[('x', 'f4'), ('y', 'f4'), ('z', 'f4')])\n    el = PlyElement.describe(vertex, 'vertex', comments=['vertices'])\n    PlyData([el], text=text).write(save_path)\n```\n\n\n\n### 参考\n\n> 以上主要就是利用plyfile库进行点数据的读取，关于面数据之类的其实与点数据差别不大，重点在于对ply文件格式的认识\n\nhttps://blog.csdn.net/phy12321/article/details/107373073\n\nhttps://pypi.org/project/plyfile/","source":"_posts/编程相关/Python/使用plyfile库对-ply文件进行读写操作.md","raw":"---\ntitle: 使用plyfile库对.ply文件进行读写操作\ndate: 2020-10-04 11:04:48\ntags:\n\t- 3D视觉\n\t- 点云\ncategories:\n\t- 编程相关\n\t- Python\nfileName: plyfile\n---\n\n### 安装plyfile库\n\n直接使用pip命令即可\n\n```\npip install plyfile\n```\n\n### 进行*.ply文件读取\n\n读取ply文件返回的是numpy数组，读取的方法也比较简单\n\n```\n# 读入ply文件\nplydata = PlyData.read('tet.ply')\n\n# 读取所有x坐标\nplydata.elements[0].data['x']\nplydata['vertex'].data['x']\nplydata['vertex']['x']\n\n# 读取第一个点的3d坐标\nplydata.elements[0].data[0]\nplydata['vertex'][0]\n```\n\n#### 读取函数\n\n```\nfrom plyfile import PlyData, PlyElement\ndef read_ply(filename):\n    \"\"\" 读取坐标，返回值为 n * 3 \"\"\"\n    plydata = PlyData.read(filename)\n    pc = plydata['vertex'].data\n    pc_array = np.array([[x, y, z] for x,y,z in pc])\n    return pc_array\n```\n\n### 进行*.ply文件写入\n\n```\nfrom plyfile import PlyData, PlyElement\ndef write_ply(save_path, points, text=True):\n    \"\"\"\n    输入点云数据，并写入一个*.ply文件\n    :param save_path: 文件路径 + *.ply\n    :param points:\n    :param text:\n    :return: \n    \"\"\"\n    points = [(points[i, 0], points[i, 1], points[i, 2]) for i in range(points.shape[0])]\n    vertex = np.array(points, dtype=[('x', 'f4'), ('y', 'f4'), ('z', 'f4')])\n    el = PlyElement.describe(vertex, 'vertex', comments=['vertices'])\n    PlyData([el], text=text).write(save_path)\n```\n\n\n\n### 参考\n\n> 以上主要就是利用plyfile库进行点数据的读取，关于面数据之类的其实与点数据差别不大，重点在于对ply文件格式的认识\n\nhttps://blog.csdn.net/phy12321/article/details/107373073\n\nhttps://pypi.org/project/plyfile/","slug":"编程相关/Python/使用plyfile库对-ply文件进行读写操作","published":1,"updated":"2021-01-11T05:05:10.583Z","_id":"ckjs3moc9006nrwjsfmmbbnoo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"安装plyfile库\"><a href=\"#安装plyfile库\" class=\"headerlink\" title=\"安装plyfile库\"></a>安装plyfile库</h3><p>直接使用pip命令即可</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">pip <span class=\"hljs-keyword\">install</span> plyfile<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行-ply文件读取\"><a href=\"#进行-ply文件读取\" class=\"headerlink\" title=\"进行*.ply文件读取\"></a>进行*.ply文件读取</h3><p>读取ply文件返回的是numpy数组，读取的方法也比较简单</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-section\"># 读入ply文件</span><br>plydata = PlyData.read('tet.ply')<br><br><span class=\"hljs-section\"># 读取所有x坐标</span><br>plydata.elements[0].data['x']<br>plydata['vertex'].data['x']<br>plydata[<span class=\"hljs-string\">'vertex'</span>][<span class=\"hljs-symbol\">'x'</span>]<br><br><span class=\"hljs-section\"># 读取第一个点的3d坐标</span><br>plydata.elements[0].data[0]<br>plydata[<span class=\"hljs-string\">'vertex'</span>][<span class=\"hljs-symbol\">0</span>]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"读取函数\"><a href=\"#读取函数\" class=\"headerlink\" title=\"读取函数\"></a>读取函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> plyfile <span class=\"hljs-keyword\">import</span> PlyData, PlyElement<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_ply</span><span class=\"hljs-params\">(filename)</span>:</span><br>    <span class=\"hljs-string\">\"\"\" 读取坐标，返回值为 n * 3 \"\"\"</span><br>    plydata = PlyData.read(filename)<br>    pc = plydata[<span class=\"hljs-string\">'vertex'</span>].data<br>    pc_array = np.array([[x, y, z] <span class=\"hljs-keyword\">for</span> x,y,z <span class=\"hljs-keyword\">in</span> pc])<br>    <span class=\"hljs-keyword\">return</span> pc_array<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行-ply文件写入\"><a href=\"#进行-ply文件写入\" class=\"headerlink\" title=\"进行*.ply文件写入\"></a>进行*.ply文件写入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> plyfile <span class=\"hljs-keyword\">import</span> PlyData, PlyElement<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">write_ply</span><span class=\"hljs-params\">(save_path, points, text=True)</span>:</span><br>    <span class=\"hljs-string\">\"\"\"<br>    输入点云数据，并写入一个*.ply文件<br>    :param save_path: 文件路径 + *.ply<br>    :param points:<br>    :param text:<br>    :return: <br>    \"\"\"</span><br>    points = [(points[i, <span class=\"hljs-number\">0</span>], points[i, <span class=\"hljs-number\">1</span>], points[i, <span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(points.shape[<span class=\"hljs-number\">0</span>])]<br>    vertex = np.array(points, dtype=[(<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'f4'</span>), (<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'f4'</span>), (<span class=\"hljs-string\">'z'</span>, <span class=\"hljs-string\">'f4'</span>)])<br>    el = PlyElement.describe(vertex, <span class=\"hljs-string\">'vertex'</span>, comments=[<span class=\"hljs-string\">'vertices'</span>])<br>    PlyData([el], text=text).write(save_path)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>以上主要就是利用plyfile库进行点数据的读取，关于面数据之类的其实与点数据差别不大，重点在于对ply文件格式的认识</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/phy12321/article/details/107373073\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/phy12321/article/details/107373073</a></p>\n<p><a href=\"https://pypi.org/project/plyfile/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/plyfile/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装plyfile库\"><a href=\"#安装plyfile库\" class=\"headerlink\" title=\"安装plyfile库\"></a>安装plyfile库</h3><p>直接使用pip命令即可</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">pip <span class=\"hljs-keyword\">install</span> plyfile<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行-ply文件读取\"><a href=\"#进行-ply文件读取\" class=\"headerlink\" title=\"进行*.ply文件读取\"></a>进行*.ply文件读取</h3><p>读取ply文件返回的是numpy数组，读取的方法也比较简单</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-section\"># 读入ply文件</span><br>plydata = PlyData.read('tet.ply')<br><br><span class=\"hljs-section\"># 读取所有x坐标</span><br>plydata.elements[0].data['x']<br>plydata['vertex'].data['x']<br>plydata[<span class=\"hljs-string\">'vertex'</span>][<span class=\"hljs-symbol\">'x'</span>]<br><br><span class=\"hljs-section\"># 读取第一个点的3d坐标</span><br>plydata.elements[0].data[0]<br>plydata[<span class=\"hljs-string\">'vertex'</span>][<span class=\"hljs-symbol\">0</span>]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"读取函数\"><a href=\"#读取函数\" class=\"headerlink\" title=\"读取函数\"></a>读取函数</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> plyfile <span class=\"hljs-keyword\">import</span> PlyData, PlyElement<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_ply</span><span class=\"hljs-params\">(filename)</span>:</span><br>    <span class=\"hljs-string\">\"\"\" 读取坐标，返回值为 n * 3 \"\"\"</span><br>    plydata = PlyData.read(filename)<br>    pc = plydata[<span class=\"hljs-string\">'vertex'</span>].data<br>    pc_array = np.array([[x, y, z] <span class=\"hljs-keyword\">for</span> x,y,z <span class=\"hljs-keyword\">in</span> pc])<br>    <span class=\"hljs-keyword\">return</span> pc_array<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"进行-ply文件写入\"><a href=\"#进行-ply文件写入\" class=\"headerlink\" title=\"进行*.ply文件写入\"></a>进行*.ply文件写入</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> plyfile <span class=\"hljs-keyword\">import</span> PlyData, PlyElement<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">write_ply</span><span class=\"hljs-params\">(save_path, points, text=True)</span>:</span><br>    <span class=\"hljs-string\">\"\"\"<br>    输入点云数据，并写入一个*.ply文件<br>    :param save_path: 文件路径 + *.ply<br>    :param points:<br>    :param text:<br>    :return: <br>    \"\"\"</span><br>    points = [(points[i, <span class=\"hljs-number\">0</span>], points[i, <span class=\"hljs-number\">1</span>], points[i, <span class=\"hljs-number\">2</span>]) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(points.shape[<span class=\"hljs-number\">0</span>])]<br>    vertex = np.array(points, dtype=[(<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-string\">'f4'</span>), (<span class=\"hljs-string\">'y'</span>, <span class=\"hljs-string\">'f4'</span>), (<span class=\"hljs-string\">'z'</span>, <span class=\"hljs-string\">'f4'</span>)])<br>    el = PlyElement.describe(vertex, <span class=\"hljs-string\">'vertex'</span>, comments=[<span class=\"hljs-string\">'vertices'</span>])<br>    PlyData([el], text=text).write(save_path)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>以上主要就是利用plyfile库进行点数据的读取，关于面数据之类的其实与点数据差别不大，重点在于对ply文件格式的认识</p>\n</blockquote>\n<p><a href=\"https://blog.csdn.net/phy12321/article/details/107373073\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/phy12321/article/details/107373073</a></p>\n<p><a href=\"https://pypi.org/project/plyfile/\" target=\"_blank\" rel=\"noopener\">https://pypi.org/project/plyfile/</a></p>\n"},{"title":"SQL的一些机制","date":"2020-06-12T02:39:37.000Z","fileName":"mysql3","_content":"\n123\n\n事务机制\n\n事务是一个或多个SQL语句组成的整体，要么全部执行成功，要么全部执行失败\n\n```\nSTART TRANSACTION\nSQL语句\n[COMMIT | ROLLBACK]\n```\n\n\n\n\n\n导出SQL文件\n\n```\n\n```\n\n\n\n导出\n\n\n\nSQL注入攻击：\n\n\n\nSQL预编译机制\n\n\n\n\n\n\n\n\n\n数据加密\n\n对称加密（DES加密、AES加密）\n\n\n\nAES加密函数：`AES_ENCRYPT(原始数据，密钥字符串)`\n\nAES解密函数：`AES_DECRYPT(加密结果，密钥字符串)`\n\n\n\n非对称加密（RSA加密、DSA加密、ECC加密）\n\n\n\n\n\n数据库连接池（Connection Pool）：预先创建一些数据库连接，然后缓存起来，避免了程序语言反复创建和销毁连接的昂贵代价\n\n","source":"_posts/编程相关/SQL/SQL的一些机制.md","raw":"---\ntitle: SQL的一些机制\ndate: 2020-06-12 10:39:37\ntags:\n\t- 数据库\n\t- SQL\ncategories:\n\t- 编程相关\n\t- SQL\nfileName: mysql3\n---\n\n123\n\n事务机制\n\n事务是一个或多个SQL语句组成的整体，要么全部执行成功，要么全部执行失败\n\n```\nSTART TRANSACTION\nSQL语句\n[COMMIT | ROLLBACK]\n```\n\n\n\n\n\n导出SQL文件\n\n```\n\n```\n\n\n\n导出\n\n\n\nSQL注入攻击：\n\n\n\nSQL预编译机制\n\n\n\n\n\n\n\n\n\n数据加密\n\n对称加密（DES加密、AES加密）\n\n\n\nAES加密函数：`AES_ENCRYPT(原始数据，密钥字符串)`\n\nAES解密函数：`AES_DECRYPT(加密结果，密钥字符串)`\n\n\n\n非对称加密（RSA加密、DSA加密、ECC加密）\n\n\n\n\n\n数据库连接池（Connection Pool）：预先创建一些数据库连接，然后缓存起来，避免了程序语言反复创建和销毁连接的昂贵代价\n\n","slug":"编程相关/SQL/SQL的一些机制","published":1,"updated":"2021-01-11T04:53:56.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moca006qrwjs92o389na","content":"<p>123</p>\n<p>事务机制</p>\n<p>事务是一个或多个SQL语句组成的整体，要么全部执行成功，要么全部执行失败</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">START</span> <span class=\"hljs-keyword\">TRANSACTION</span><br><span class=\"hljs-keyword\">SQL</span>语句<br>[<span class=\"hljs-keyword\">COMMIT</span> | <span class=\"hljs-keyword\">ROLLBACK</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>导出SQL文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>导出</p>\n<p>SQL注入攻击：</p>\n<p>SQL预编译机制</p>\n<p>数据加密</p>\n<p>对称加密（DES加密、AES加密）</p>\n<p>AES加密函数：<code>AES_ENCRYPT(原始数据，密钥字符串)</code></p>\n<p>AES解密函数：<code>AES_DECRYPT(加密结果，密钥字符串)</code></p>\n<p>非对称加密（RSA加密、DSA加密、ECC加密）</p>\n<p>数据库连接池（Connection Pool）：预先创建一些数据库连接，然后缓存起来，避免了程序语言反复创建和销毁连接的昂贵代价</p>\n","site":{"data":{}},"excerpt":"","more":"<p>123</p>\n<p>事务机制</p>\n<p>事务是一个或多个SQL语句组成的整体，要么全部执行成功，要么全部执行失败</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">START</span> <span class=\"hljs-keyword\">TRANSACTION</span><br><span class=\"hljs-keyword\">SQL</span>语句<br>[<span class=\"hljs-keyword\">COMMIT</span> | <span class=\"hljs-keyword\">ROLLBACK</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>导出SQL文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n<p>导出</p>\n<p>SQL注入攻击：</p>\n<p>SQL预编译机制</p>\n<p>数据加密</p>\n<p>对称加密（DES加密、AES加密）</p>\n<p>AES加密函数：<code>AES_ENCRYPT(原始数据，密钥字符串)</code></p>\n<p>AES解密函数：<code>AES_DECRYPT(加密结果，密钥字符串)</code></p>\n<p>非对称加密（RSA加密、DSA加密、ECC加密）</p>\n<p>数据库连接池（Connection Pool）：预先创建一些数据库连接，然后缓存起来，避免了程序语言反复创建和销毁连接的昂贵代价</p>\n"},{"title":"SQL的增删改等语句","date":"2020-06-07T01:44:15.000Z","fileName":"mysql1","_content":"\n\n\n逻辑库\n\n```\nCREATE DATABASE; 逻辑库名称\nSHOW DATABASES;\nDROP DATABASE 逻辑库名称;\nUSE 逻辑库名称;\n```\n\n数据表\n\n```\nCREATE TABLE 数据表(\n\t\t\t列名 数据类型 [约束] [COMMENT 注释],\n\t\t\t列名 数据类型 [约束] [COMMENT 注释],\n\t\t\t)[COMMENT 注释];\n```\n\n```\nSHOW 表名;\nDESC 表名; // 查看表的情况\nSHOW CREATE TABLE 表名;\t// 查看创建该表时的SQL语句\nDROP TABLEE 表名;\t// 删除数据表\n```\n\n\n\n添加字段\n\n```\nALTER TABLE 表名\nADD 列名 数据类型 [约束] [COMMENT 注释],\n...\nADD 列名 数据类型 [约束] [COMMENT 注释];\n```\n\n修改字段数据类型等信息\n\n```\nALTER TABLE 表名\nMODIFY 列名 数据类型 [约束] [COMMENT 注释],\n...\nMODIFY 列名 数据类型 [约束] [COMMENT 注释];\n```\n\n修改字段名称\n\n```\nALTER TABLE 表名\nCHANGE 列名 新列名 数据类型 [约束] [COMMENT 注释],\n...\nCHANGE 列名 新列名 数据类型 [约束] [COMMENT 注释];\n```\n\n删除字段\n\n```\nALTER TABLE 表名\nDROP 字段名称,\n...\nDROP 字段名称;\n```\n\n\n\n添加索引\n\n```\nCREATE TABLE *(\n\t\tINDEX 索引名称 (字段名称),\n\t\t);\n```\n\n添加、显示、删除索引\n\n```\nCREATE INDEX 索引名称 ON 表名(字段);\nALTER TABLE 表名 ADD INDEX [索引名](字段);\n\nSHOW INDEX FROM 表名;\nDROP INDEX 索引名称 ON 表名;\n```\n\n\n\n\n\n向数据表中写入记录\n\n```\nINSERT INTO 表名(字段1,字段2......)\nVALUES(值1,值2......);\n```\n\n\n\n```\n// 当插入数据有问题时直接忽略\nNSERT IGNORE INTO\n```\n\n\n\n修改表的记录\n\n```\nUPDATE [IGNORE] 表名\nSET 字段1=值1, 字段2=值2 ......\nWHERE\nORDER BY\nLIMIT\n```\n\n\n\n删除数据\n\n```\nDELETE [IGNORE] FROM 表名\n[WHERE]\n[ORDER BY]\n[LIMIT]\n```\n\n\n\n","source":"_posts/编程相关/SQL/SQL的增删改等语句.md","raw":"---\ntitle: SQL的增删改等语句\ndate: 2020-06-07 09:44:15\ntags:\n\t- 数据库\n\t- SQL\ncategories:\n\t- 编程相关\n\t- SQL\nfileName: mysql1\n---\n\n\n\n逻辑库\n\n```\nCREATE DATABASE; 逻辑库名称\nSHOW DATABASES;\nDROP DATABASE 逻辑库名称;\nUSE 逻辑库名称;\n```\n\n数据表\n\n```\nCREATE TABLE 数据表(\n\t\t\t列名 数据类型 [约束] [COMMENT 注释],\n\t\t\t列名 数据类型 [约束] [COMMENT 注释],\n\t\t\t)[COMMENT 注释];\n```\n\n```\nSHOW 表名;\nDESC 表名; // 查看表的情况\nSHOW CREATE TABLE 表名;\t// 查看创建该表时的SQL语句\nDROP TABLEE 表名;\t// 删除数据表\n```\n\n\n\n添加字段\n\n```\nALTER TABLE 表名\nADD 列名 数据类型 [约束] [COMMENT 注释],\n...\nADD 列名 数据类型 [约束] [COMMENT 注释];\n```\n\n修改字段数据类型等信息\n\n```\nALTER TABLE 表名\nMODIFY 列名 数据类型 [约束] [COMMENT 注释],\n...\nMODIFY 列名 数据类型 [约束] [COMMENT 注释];\n```\n\n修改字段名称\n\n```\nALTER TABLE 表名\nCHANGE 列名 新列名 数据类型 [约束] [COMMENT 注释],\n...\nCHANGE 列名 新列名 数据类型 [约束] [COMMENT 注释];\n```\n\n删除字段\n\n```\nALTER TABLE 表名\nDROP 字段名称,\n...\nDROP 字段名称;\n```\n\n\n\n添加索引\n\n```\nCREATE TABLE *(\n\t\tINDEX 索引名称 (字段名称),\n\t\t);\n```\n\n添加、显示、删除索引\n\n```\nCREATE INDEX 索引名称 ON 表名(字段);\nALTER TABLE 表名 ADD INDEX [索引名](字段);\n\nSHOW INDEX FROM 表名;\nDROP INDEX 索引名称 ON 表名;\n```\n\n\n\n\n\n向数据表中写入记录\n\n```\nINSERT INTO 表名(字段1,字段2......)\nVALUES(值1,值2......);\n```\n\n\n\n```\n// 当插入数据有问题时直接忽略\nNSERT IGNORE INTO\n```\n\n\n\n修改表的记录\n\n```\nUPDATE [IGNORE] 表名\nSET 字段1=值1, 字段2=值2 ......\nWHERE\nORDER BY\nLIMIT\n```\n\n\n\n删除数据\n\n```\nDELETE [IGNORE] FROM 表名\n[WHERE]\n[ORDER BY]\n[LIMIT]\n```\n\n\n\n","slug":"编程相关/SQL/SQL的增删改等语句","published":1,"updated":"2021-01-11T04:54:10.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mocb006srwjsf24qancg","content":"<p>逻辑库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span>; 逻辑库名称<br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">DATABASES</span>;<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">DATABASE</span> 逻辑库名称;<br><span class=\"hljs-keyword\">USE</span> 逻辑库名称;<br></code></pre></td></tr></table></figure>\n\n<p>数据表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 数据表(<br>\t\t\t列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>\t\t\t列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>\t\t\t)[<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> 表名;<br>DESC 表名; // 查看表的情况<br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 表名;\t// 查看创建该表时的SQL语句<br><span class=\"hljs-keyword\">DROP</span> TABLEE 表名;\t// 删除数据表<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">ADD</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">ADD</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>修改字段数据类型等信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">MODIFY</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">MODIFY</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>修改字段名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">CHANGE</span> 列名 新列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">CHANGE</span> 列名 新列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>删除字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">DROP</span> 字段名称,<br>...<br><span class=\"hljs-keyword\">DROP</span> 字段名称;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> *(<br>\t\t<span class=\"hljs-keyword\">INDEX</span> 索引名称 (字段名称),<br>\t\t);<br></code></pre></td></tr></table></figure>\n\n<p>添加、显示、删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> 索引名称 <span class=\"hljs-keyword\">ON</span> 表名(字段);<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名 <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">INDEX</span> [索引名](字段);<br><br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-keyword\">FROM</span> 表名;<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">INDEX</span> 索引名称 <span class=\"hljs-keyword\">ON</span> 表名;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>向数据表中写入记录</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">INSERT INTO 表名(字段1,字段2<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>)<br>VALUES(值1,值2<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 当插入数据有问题时直接忽略</span><br>NSERT IGNORE <span class=\"hljs-keyword\">INTO</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>修改表的记录</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">UPDATE [IGNORE] 表名<br><span class=\"hljs-builtin-name\">SET</span> 字段<span class=\"hljs-attribute\">1</span>=值1, 字段<span class=\"hljs-attribute\">2</span>=值2 <span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>WHERE<br>ORDER BY<br>LIMIT<br></code></pre></td></tr></table></figure>\n\n\n\n<p>删除数据</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">DELETE</span> [<span class=\"hljs-keyword\">IGNORE</span>] <span class=\"hljs-keyword\">FROM</span> 表名<br>[<span class=\"hljs-keyword\">WHERE</span>]<br>[<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span>]<br>[<span class=\"hljs-keyword\">LIMIT</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>逻辑库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">DATABASE</span>; 逻辑库名称<br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">DATABASES</span>;<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">DATABASE</span> 逻辑库名称;<br><span class=\"hljs-keyword\">USE</span> 逻辑库名称;<br></code></pre></td></tr></table></figure>\n\n<p>数据表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 数据表(<br>\t\t\t列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>\t\t\t列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>\t\t\t)[<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> 表名;<br>DESC 表名; // 查看表的情况<br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> 表名;\t// 查看创建该表时的SQL语句<br><span class=\"hljs-keyword\">DROP</span> TABLEE 表名;\t// 删除数据表<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">ADD</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">ADD</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>修改字段数据类型等信息</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">MODIFY</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">MODIFY</span> 列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>修改字段名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">CHANGE</span> 列名 新列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释],<br>...<br><span class=\"hljs-keyword\">CHANGE</span> 列名 新列名 数据类型 [约束] [<span class=\"hljs-keyword\">COMMENT</span> 注释];<br></code></pre></td></tr></table></figure>\n\n<p>删除字段</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名<br><span class=\"hljs-keyword\">DROP</span> 字段名称,<br>...<br><span class=\"hljs-keyword\">DROP</span> 字段名称;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>添加索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> *(<br>\t\t<span class=\"hljs-keyword\">INDEX</span> 索引名称 (字段名称),<br>\t\t);<br></code></pre></td></tr></table></figure>\n\n<p>添加、显示、删除索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">INDEX</span> 索引名称 <span class=\"hljs-keyword\">ON</span> 表名(字段);<br><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">TABLE</span> 表名 <span class=\"hljs-keyword\">ADD</span> <span class=\"hljs-keyword\">INDEX</span> [索引名](字段);<br><br><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">INDEX</span> <span class=\"hljs-keyword\">FROM</span> 表名;<br><span class=\"hljs-keyword\">DROP</span> <span class=\"hljs-keyword\">INDEX</span> 索引名称 <span class=\"hljs-keyword\">ON</span> 表名;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>向数据表中写入记录</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">INSERT INTO 表名(字段1,字段2<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>)<br>VALUES(值1,值2<span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span>);<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-comment\">// 当插入数据有问题时直接忽略</span><br>NSERT IGNORE <span class=\"hljs-keyword\">INTO</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>修改表的记录</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">UPDATE [IGNORE] 表名<br><span class=\"hljs-builtin-name\">SET</span> 字段<span class=\"hljs-attribute\">1</span>=值1, 字段<span class=\"hljs-attribute\">2</span>=值2 <span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><span class=\"hljs-built_in\">..</span><br>WHERE<br>ORDER BY<br>LIMIT<br></code></pre></td></tr></table></figure>\n\n\n\n<p>删除数据</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">DELETE</span> [<span class=\"hljs-keyword\">IGNORE</span>] <span class=\"hljs-keyword\">FROM</span> 表名<br>[<span class=\"hljs-keyword\">WHERE</span>]<br>[<span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span>]<br>[<span class=\"hljs-keyword\">LIMIT</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Hexo实现多台机器同时编写博客","date":"2020-03-13T03:05:41.000Z","fileName":"hexo3","_content":"\n正常情况下，只在一台电脑上使用hexo编写部署博客非常方便，但多台电脑进行部署就需要云盘等媒介进行md文件的传输了。我的电脑是双系统，因此如果要部署的话还得重启，比较麻烦，因此干脆实现一个博客多设备管理，方便快捷。\n\n实现多设备的博客管理关键就是要实现本地hexo源文件的多台设备传输与修改，首先想到的当然是使用git了。本地的`_config.yml`文件中默认使用`hexo d`进行部署是部署在GitHub相应项目（也就是以用户名命名的博客项目）的`master`分支上的，因此，只需要在同一项目上新建一个存储源文件的分支即可解决问题。\n\n### 创建分支\n\n在已经作为博客本地文件的地方打开终端输入以下命令\n\n```\ngit branch <hexo>\t//hexo处为你想建立的分支的名字\n```\n\n之后在github中博客仓库的`->Settings->Branches->Default branch`下将默认分支改为新建的分支，并保存更新。\n\n### 分支连接本地文件\n\n1. 最简单且有效的方法就是将新建的`hexo`分支`git clone`到本地文件夹内，输入`git branch`即可看到当前分支为`hexo`。\n\n2. 再将之前新建的博客文件复制到以上文件夹中，注意将`themes`文件中隐藏的`.git`文件等与git有关的文件删除，否则主题文件会默认为是整个项目的一个子模块而不被上传到你的GitHub。\n3. 将之前部署生成的`.deploy_git`文件删除，否则由于之前删去了部分原来的git信息部署时有可能会发生错误。\n4. 输入如下命令你的博客的源码分支hexo就建立好了。\n\n```\ngit add .\ngit commit -m \"first push\"\ngit push origin hexo\n```\n\n5. 想在另一台电脑上写博客时。只要确保该电脑安装了hexo所需要的各种环境（再在GitHub上加入ssh密匙），只需要在本地建立一个文件夹将博客源文件`clone`下来即可。而每次更新上传后，在另一台计算机上只需每次使用`git pull`更新一下源文件即可十分方便。\n\n### 其他问题\n\n多机同时管理博客其实就是在一个github仓库的`master`分支存储网页静态文件，在`hexo`分支存储博客源文件。由于hexo进行部署时默认是在`master`分支上部署（`_config.yml`文件中可见），因此部署博客时还是输入以下代码即可\n\n```\nhexo g\nhexo d\n```\n\n同时应该注意的是，这样做会使得源文件开源，不想开源的话可以在github仓库中设置该仓库为private。这样该仓库就不可见但gitpage的功能也使用不了了，所以要怎样做仁者见仁智者见智吧。","source":"_posts/问题解决/Hexo/Hexo实现多台机器同时编写博客.md","raw":"---\ntitle: Hexo实现多台机器同时编写博客\ndate: 2020-03-13 11:05:41\ntags:\n\t- Hexo\n\t- 博客搭建\ncategories:\n\t- 问题解决\n\t- Hexo\nfileName: hexo3\n---\n\n正常情况下，只在一台电脑上使用hexo编写部署博客非常方便，但多台电脑进行部署就需要云盘等媒介进行md文件的传输了。我的电脑是双系统，因此如果要部署的话还得重启，比较麻烦，因此干脆实现一个博客多设备管理，方便快捷。\n\n实现多设备的博客管理关键就是要实现本地hexo源文件的多台设备传输与修改，首先想到的当然是使用git了。本地的`_config.yml`文件中默认使用`hexo d`进行部署是部署在GitHub相应项目（也就是以用户名命名的博客项目）的`master`分支上的，因此，只需要在同一项目上新建一个存储源文件的分支即可解决问题。\n\n### 创建分支\n\n在已经作为博客本地文件的地方打开终端输入以下命令\n\n```\ngit branch <hexo>\t//hexo处为你想建立的分支的名字\n```\n\n之后在github中博客仓库的`->Settings->Branches->Default branch`下将默认分支改为新建的分支，并保存更新。\n\n### 分支连接本地文件\n\n1. 最简单且有效的方法就是将新建的`hexo`分支`git clone`到本地文件夹内，输入`git branch`即可看到当前分支为`hexo`。\n\n2. 再将之前新建的博客文件复制到以上文件夹中，注意将`themes`文件中隐藏的`.git`文件等与git有关的文件删除，否则主题文件会默认为是整个项目的一个子模块而不被上传到你的GitHub。\n3. 将之前部署生成的`.deploy_git`文件删除，否则由于之前删去了部分原来的git信息部署时有可能会发生错误。\n4. 输入如下命令你的博客的源码分支hexo就建立好了。\n\n```\ngit add .\ngit commit -m \"first push\"\ngit push origin hexo\n```\n\n5. 想在另一台电脑上写博客时。只要确保该电脑安装了hexo所需要的各种环境（再在GitHub上加入ssh密匙），只需要在本地建立一个文件夹将博客源文件`clone`下来即可。而每次更新上传后，在另一台计算机上只需每次使用`git pull`更新一下源文件即可十分方便。\n\n### 其他问题\n\n多机同时管理博客其实就是在一个github仓库的`master`分支存储网页静态文件，在`hexo`分支存储博客源文件。由于hexo进行部署时默认是在`master`分支上部署（`_config.yml`文件中可见），因此部署博客时还是输入以下代码即可\n\n```\nhexo g\nhexo d\n```\n\n同时应该注意的是，这样做会使得源文件开源，不想开源的话可以在github仓库中设置该仓库为private。这样该仓库就不可见但gitpage的功能也使用不了了，所以要怎样做仁者见仁智者见智吧。","slug":"问题解决/Hexo/Hexo实现多台机器同时编写博客","published":1,"updated":"2021-01-11T04:56:05.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3mocc006xrwjscvom5sgp","content":"<p>正常情况下，只在一台电脑上使用hexo编写部署博客非常方便，但多台电脑进行部署就需要云盘等媒介进行md文件的传输了。我的电脑是双系统，因此如果要部署的话还得重启，比较麻烦，因此干脆实现一个博客多设备管理，方便快捷。</p>\n<p>实现多设备的博客管理关键就是要实现本地hexo源文件的多台设备传输与修改，首先想到的当然是使用git了。本地的<code>_config.yml</code>文件中默认使用<code>hexo d</code>进行部署是部署在GitHub相应项目（也就是以用户名命名的博客项目）的<code>master</code>分支上的，因此，只需要在同一项目上新建一个存储源文件的分支即可解决问题。</p>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p>在已经作为博客本地文件的地方打开终端输入以下命令</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">git branch <span class=\"hljs-params\">&lt;hexo&gt;</span>\t<span class=\"hljs-comment\">//hexo处为你想建立的分支的名字</span><br></code></pre></td></tr></table></figure>\n\n<p>之后在github中博客仓库的<code>-&gt;Settings-&gt;Branches-&gt;Default branch</code>下将默认分支改为新建的分支，并保存更新。</p>\n<h3 id=\"分支连接本地文件\"><a href=\"#分支连接本地文件\" class=\"headerlink\" title=\"分支连接本地文件\"></a>分支连接本地文件</h3><ol>\n<li><p>最简单且有效的方法就是将新建的<code>hexo</code>分支<code>git clone</code>到本地文件夹内，输入<code>git branch</code>即可看到当前分支为<code>hexo</code>。</p>\n</li>\n<li><p>再将之前新建的博客文件复制到以上文件夹中，注意将<code>themes</code>文件中隐藏的<code>.git</code>文件等与git有关的文件删除，否则主题文件会默认为是整个项目的一个子模块而不被上传到你的GitHub。</p>\n</li>\n<li><p>将之前部署生成的<code>.deploy_git</code>文件删除，否则由于之前删去了部分原来的git信息部署时有可能会发生错误。</p>\n</li>\n<li><p>输入如下命令你的博客的源码分支hexo就建立好了。</p>\n</li>\n</ol>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add </span>.<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">\"first push\"</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push </span>origin hexo<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>想在另一台电脑上写博客时。只要确保该电脑安装了hexo所需要的各种环境（再在GitHub上加入ssh密匙），只需要在本地建立一个文件夹将博客源文件<code>clone</code>下来即可。而每次更新上传后，在另一台计算机上只需每次使用<code>git pull</code>更新一下源文件即可十分方便。</li>\n</ol>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><p>多机同时管理博客其实就是在一个github仓库的<code>master</code>分支存储网页静态文件，在<code>hexo</code>分支存储博客源文件。由于hexo进行部署时默认是在<code>master</code>分支上部署（<code>_config.yml</code>文件中可见），因此部署博客时还是输入以下代码即可</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">g</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n\n<p>同时应该注意的是，这样做会使得源文件开源，不想开源的话可以在github仓库中设置该仓库为private。这样该仓库就不可见但gitpage的功能也使用不了了，所以要怎样做仁者见仁智者见智吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>正常情况下，只在一台电脑上使用hexo编写部署博客非常方便，但多台电脑进行部署就需要云盘等媒介进行md文件的传输了。我的电脑是双系统，因此如果要部署的话还得重启，比较麻烦，因此干脆实现一个博客多设备管理，方便快捷。</p>\n<p>实现多设备的博客管理关键就是要实现本地hexo源文件的多台设备传输与修改，首先想到的当然是使用git了。本地的<code>_config.yml</code>文件中默认使用<code>hexo d</code>进行部署是部署在GitHub相应项目（也就是以用户名命名的博客项目）的<code>master</code>分支上的，因此，只需要在同一项目上新建一个存储源文件的分支即可解决问题。</p>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><p>在已经作为博客本地文件的地方打开终端输入以下命令</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\">git branch <span class=\"hljs-params\">&lt;hexo&gt;</span>\t<span class=\"hljs-comment\">//hexo处为你想建立的分支的名字</span><br></code></pre></td></tr></table></figure>\n\n<p>之后在github中博客仓库的<code>-&gt;Settings-&gt;Branches-&gt;Default branch</code>下将默认分支改为新建的分支，并保存更新。</p>\n<h3 id=\"分支连接本地文件\"><a href=\"#分支连接本地文件\" class=\"headerlink\" title=\"分支连接本地文件\"></a>分支连接本地文件</h3><ol>\n<li><p>最简单且有效的方法就是将新建的<code>hexo</code>分支<code>git clone</code>到本地文件夹内，输入<code>git branch</code>即可看到当前分支为<code>hexo</code>。</p>\n</li>\n<li><p>再将之前新建的博客文件复制到以上文件夹中，注意将<code>themes</code>文件中隐藏的<code>.git</code>文件等与git有关的文件删除，否则主题文件会默认为是整个项目的一个子模块而不被上传到你的GitHub。</p>\n</li>\n<li><p>将之前部署生成的<code>.deploy_git</code>文件删除，否则由于之前删去了部分原来的git信息部署时有可能会发生错误。</p>\n</li>\n<li><p>输入如下命令你的博客的源码分支hexo就建立好了。</p>\n</li>\n</ol>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add </span>.<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">\"first push\"</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push </span>origin hexo<br></code></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>想在另一台电脑上写博客时。只要确保该电脑安装了hexo所需要的各种环境（再在GitHub上加入ssh密匙），只需要在本地建立一个文件夹将博客源文件<code>clone</code>下来即可。而每次更新上传后，在另一台计算机上只需每次使用<code>git pull</code>更新一下源文件即可十分方便。</li>\n</ol>\n<h3 id=\"其他问题\"><a href=\"#其他问题\" class=\"headerlink\" title=\"其他问题\"></a>其他问题</h3><p>多机同时管理博客其实就是在一个github仓库的<code>master</code>分支存储网页静态文件，在<code>hexo</code>分支存储博客源文件。由于hexo进行部署时默认是在<code>master</code>分支上部署（<code>_config.yml</code>文件中可见），因此部署博客时还是输入以下代码即可</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">g</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n\n<p>同时应该注意的是，这样做会使得源文件开源，不想开源的话可以在github仓库中设置该仓库为private。这样该仓库就不可见但gitpage的功能也使用不了了，所以要怎样做仁者见仁智者见智吧。</p>\n"},{"title":"Hexo博客部署到腾讯云服务器全流程","date":"2020-03-12T18:48:15.000Z","fileName":"hexo2","_content":"\nHexo署到Githubpage上在国内访问速度很慢，正好前段时间买了一个腾讯云服务器，就干脆把hexo生成的博客文件直接放到云上跑算了，本文记录将hexo同时部署到GitHub与腾讯云服务器的过程。参考博客https://blog.csdn.net/StaunchKai/article/details/82878928\n\n## 部署环境\n\n* 本地环境\n  * Ubuntu 18.04（64bit）\n  * 所需环境：git，Node.js，hexo\n* 服务器环境\n  * 腾讯云（CentOS 7.6 64bit）\n  * 所需环境：git，Nginx\n\n## 服务器配置\n\n### 安装git\n\n安装依赖包：\n\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n```\n\n卸载旧版本git（如果服务器自带git太旧的话）\n\n```\ncd /usr/local/src   // 选择文件保存位置\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz   // 下载链接\ntar -zxvf git-2.19.0.tar.gz   // 解压\n```\n\n具体的版本选择可在https://mirrors.edge.kernel.org/pub/software/scm/git/ 查看。\n\n编译安装\n\n```\ncd git-2.19.0   // 进入文件夹\nmake prefix=/usr/local/git all  // 编译源码\nmake prefix=/usr/local/git install  // 安装至 /usr/local/git 路径\n```\n\n之后正常的话`git --version`就可以看到git的版本了，如果在终端输入git没反应，则应该将git的安装位置加入环境变量中。\n\n### 创建git用户\n\n```\nadduser git\npasswd git\nchmod 740 /etc/sudoers\nvim /etc/sudoers\n```\n\n找到以下内容\n\n```\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\n```\n\n在root的下面添加一行\n\n```\ngit ALL=(ALL) ALL\n```\n\n保存退出后将权限改回来\n\n```\nchmod 400 /etc/sudoers\n```\n\n### 密匙配置\n\n与将本地博客文件连接至GitHub一样，将本地的`id_rsa.pub`复制好，在服务器创建.ssh下的文件，粘贴进去。\n\n```\nsu git\nmkdir ~/.ssh\nvim ~/.ssh/authorized_keys\n```\n\n修改权限\n\n```\ncd ~\nchmod 600 .ssh/authorzied_keys\nchmod 700 .ssh\n```\n\n### 测试连接\n\n在本地终端输入\n\n```\nssh -v git@SERVER\n```\n\nSERVER为你的服务器的公网地址，在控制台可以找到，如果成功连接说明服务器git配置成功。\n\n### 创建网站根目录\n\n网站根目录就是之后存放博客静态文件与资源的位置，你可以自己挑选位置创建你的根目录，之后再赋予权限。\n\n```\nsu root\nmkdir /home/myblog    # 此目录为网站的根目录\nchown git:git -R /home/myblog\n```\n\n### 安装Nginx\n\n```\nyum install -y nginx    // 安装\nsystemctl start nginx.service     // 启动服务\n```\n\n此时访问**公网ip/80**应该就能看到nginx的初始界面。\n\n### 配置Nginx\n\n使用`nginx -t`查看配置文件位置，一般为`/etc/nginx/nginx.conf`\n\n打开nginx.conf文件，修改配置文件如下\n\n```\nserver {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  www.ziyedy.top;    # 修改为自己的域名\n    root         /home/myblog;    # 修改为网站的根目录\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    \tindex index.html\t# 设置自己的index网页\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\n```\n\n之后可以使用`nginx -t`检查配置文件中是否有语法错误，之后重启服务即可。\n\n## hexo自动部署\n\n### 建立git裸库\n\n在与文件同一根目录下建立裸库\n\n```\nsu root\ngit init --bare blog.git\n```\n\n这时，`git` 用户的 `~` 目录下就存在一个 `blog.git` 文件夹，可使用 `ls` 命令查看。再修改 `blog.git` 的权限。\n\n```\nchown git:git -R blog.git\n```\n\n### 使用git-hooks同步网站根目录\n\n在这使用的是 `post-receive` 这个钩子，当 `git` 有收发的时候就会调用这个钩子。 在 `blog.git` 裸库的 hooks 文件夹中，新建 `post-receive` 文件。\n\n```\nvim blog.git/hooks/post-receive\n```\n\n填入以下内容，注意myblog应该填入自己的根目录文件名\n\n```\n#!/bin/sh\ngit --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f\n```\n\n保存后，赋予该文件可执行权限\n\n```\nchmod +x /home/git/blog.git/hooks/post-receive\n```\n\n### 本地配置\n\n与部署到GitHub相同，在本地博客文件根目录下的`_config.yml` 文件中修改`deploy`设置如下。SERVER为服务器的公网ip，如果不想部署到GitHub了将`github`一行删去即可。\n\n```\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:xxxx/xxxx.github.io.git\n    git1: git@SERVER:/home/git/blog.git \n  branch: master\n```\n\n之后正常配置\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n这是输入你的公网ip即可进入你的博客，要实现域名访问，在你的域名内解析你的公网ip即可。","source":"_posts/问题解决/Hexo/Hexo博客部署到腾讯云服务器全流程.md","raw":"---\ntitle: Hexo博客部署到腾讯云服务器全流程\ndate: 2020-03-13 02:48:15\ntags:\n\t- Hexo\n\t- 博客搭建\ncategories:\n\t- 问题解决\n\t- Hexo\nfileName: hexo2\n---\n\nHexo署到Githubpage上在国内访问速度很慢，正好前段时间买了一个腾讯云服务器，就干脆把hexo生成的博客文件直接放到云上跑算了，本文记录将hexo同时部署到GitHub与腾讯云服务器的过程。参考博客https://blog.csdn.net/StaunchKai/article/details/82878928\n\n## 部署环境\n\n* 本地环境\n  * Ubuntu 18.04（64bit）\n  * 所需环境：git，Node.js，hexo\n* 服务器环境\n  * 腾讯云（CentOS 7.6 64bit）\n  * 所需环境：git，Nginx\n\n## 服务器配置\n\n### 安装git\n\n安装依赖包：\n\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\nyum install  gcc perl-ExtUtils-MakeMaker\n```\n\n卸载旧版本git（如果服务器自带git太旧的话）\n\n```\ncd /usr/local/src   // 选择文件保存位置\nwget https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz   // 下载链接\ntar -zxvf git-2.19.0.tar.gz   // 解压\n```\n\n具体的版本选择可在https://mirrors.edge.kernel.org/pub/software/scm/git/ 查看。\n\n编译安装\n\n```\ncd git-2.19.0   // 进入文件夹\nmake prefix=/usr/local/git all  // 编译源码\nmake prefix=/usr/local/git install  // 安装至 /usr/local/git 路径\n```\n\n之后正常的话`git --version`就可以看到git的版本了，如果在终端输入git没反应，则应该将git的安装位置加入环境变量中。\n\n### 创建git用户\n\n```\nadduser git\npasswd git\nchmod 740 /etc/sudoers\nvim /etc/sudoers\n```\n\n找到以下内容\n\n```\n## Allow root to run any commands anywhere\nroot    ALL=(ALL)       ALL\n```\n\n在root的下面添加一行\n\n```\ngit ALL=(ALL) ALL\n```\n\n保存退出后将权限改回来\n\n```\nchmod 400 /etc/sudoers\n```\n\n### 密匙配置\n\n与将本地博客文件连接至GitHub一样，将本地的`id_rsa.pub`复制好，在服务器创建.ssh下的文件，粘贴进去。\n\n```\nsu git\nmkdir ~/.ssh\nvim ~/.ssh/authorized_keys\n```\n\n修改权限\n\n```\ncd ~\nchmod 600 .ssh/authorzied_keys\nchmod 700 .ssh\n```\n\n### 测试连接\n\n在本地终端输入\n\n```\nssh -v git@SERVER\n```\n\nSERVER为你的服务器的公网地址，在控制台可以找到，如果成功连接说明服务器git配置成功。\n\n### 创建网站根目录\n\n网站根目录就是之后存放博客静态文件与资源的位置，你可以自己挑选位置创建你的根目录，之后再赋予权限。\n\n```\nsu root\nmkdir /home/myblog    # 此目录为网站的根目录\nchown git:git -R /home/myblog\n```\n\n### 安装Nginx\n\n```\nyum install -y nginx    // 安装\nsystemctl start nginx.service     // 启动服务\n```\n\n此时访问**公网ip/80**应该就能看到nginx的初始界面。\n\n### 配置Nginx\n\n使用`nginx -t`查看配置文件位置，一般为`/etc/nginx/nginx.conf`\n\n打开nginx.conf文件，修改配置文件如下\n\n```\nserver {\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    server_name  www.ziyedy.top;    # 修改为自己的域名\n    root         /home/myblog;    # 修改为网站的根目录\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;\n\n    location / {\n    \tindex index.html\t# 设置自己的index网页\n    }\n\n    error_page 404 /404.html;\n        location = /40x.html {\n    }\n\n    error_page 500 502 503 504 /50x.html;\n        location = /50x.html {\n    }\n}\n\n```\n\n之后可以使用`nginx -t`检查配置文件中是否有语法错误，之后重启服务即可。\n\n## hexo自动部署\n\n### 建立git裸库\n\n在与文件同一根目录下建立裸库\n\n```\nsu root\ngit init --bare blog.git\n```\n\n这时，`git` 用户的 `~` 目录下就存在一个 `blog.git` 文件夹，可使用 `ls` 命令查看。再修改 `blog.git` 的权限。\n\n```\nchown git:git -R blog.git\n```\n\n### 使用git-hooks同步网站根目录\n\n在这使用的是 `post-receive` 这个钩子，当 `git` 有收发的时候就会调用这个钩子。 在 `blog.git` 裸库的 hooks 文件夹中，新建 `post-receive` 文件。\n\n```\nvim blog.git/hooks/post-receive\n```\n\n填入以下内容，注意myblog应该填入自己的根目录文件名\n\n```\n#!/bin/sh\ngit --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f\n```\n\n保存后，赋予该文件可执行权限\n\n```\nchmod +x /home/git/blog.git/hooks/post-receive\n```\n\n### 本地配置\n\n与部署到GitHub相同，在本地博客文件根目录下的`_config.yml` 文件中修改`deploy`设置如下。SERVER为服务器的公网ip，如果不想部署到GitHub了将`github`一行删去即可。\n\n```\ndeploy:\n  type: git\n  repo:\n    github: git@github.com:xxxx/xxxx.github.io.git\n    git1: git@SERVER:/home/git/blog.git \n  branch: master\n```\n\n之后正常配置\n\n```\nhexo clean\nhexo g\nhexo d\n```\n\n这是输入你的公网ip即可进入你的博客，要实现域名访问，在你的域名内解析你的公网ip即可。","slug":"问题解决/Hexo/Hexo博客部署到腾讯云服务器全流程","published":1,"updated":"2021-01-11T04:55:21.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3modw00e8rwjsaot52hc5","content":"<p>Hexo署到Githubpage上在国内访问速度很慢，正好前段时间买了一个腾讯云服务器，就干脆把hexo生成的博客文件直接放到云上跑算了，本文记录将hexo同时部署到GitHub与腾讯云服务器的过程。参考博客<a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/StaunchKai/article/details/82878928</a></p>\n<h2 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h2><ul>\n<li>本地环境<ul>\n<li>Ubuntu 18.04（64bit）</li>\n<li>所需环境：git，Node.js，hexo</li>\n</ul>\n</li>\n<li>服务器环境<ul>\n<li>腾讯云（CentOS 7.6 64bit）</li>\n<li>所需环境：git，Nginx</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>安装依赖包：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">yum <span class=\"hljs-keyword\">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum <span class=\"hljs-keyword\">install</span>  gcc perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure>\n\n<p>卸载旧版本git（如果服务器自带git太旧的话）</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">/usr/local/src</span>   <span class=\"hljs-string\">//</span> 选择文件保存位置<br>wget https:<span class=\"hljs-string\">//mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz</span>   <span class=\"hljs-string\">//</span> 下载链接<br>tar -zxvf git-2.19.0.tar.gz   <span class=\"hljs-string\">//</span> 解压<br></code></pre></td></tr></table></figure>\n\n<p>具体的版本选择可在<a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"noopener\">https://mirrors.edge.kernel.org/pub/software/scm/git/</a> 查看。</p>\n<p>编译安装</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">cd git<span class=\"hljs-number\">-2.19</span><span class=\"hljs-number\">.0</span>   <span class=\"hljs-comment\">// 进入文件夹</span><br><span class=\"hljs-built_in\">make</span> prefix=/usr/<span class=\"hljs-keyword\">local</span>/git all  <span class=\"hljs-comment\">// 编译源码</span><br><span class=\"hljs-built_in\">make</span> prefix=/usr/<span class=\"hljs-keyword\">local</span>/git install  <span class=\"hljs-comment\">// 安装至 /usr/local/git 路径</span><br></code></pre></td></tr></table></figure>\n\n<p>之后正常的话<code>git --version</code>就可以看到git的版本了，如果在终端输入git没反应，则应该将git的安装位置加入环境变量中。</p>\n<h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">adduser</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">passwd</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">chmod</span> <span class=\"hljs-string\">740 /etc/sudoers</span><br><span class=\"hljs-attr\">vim</span> <span class=\"hljs-string\">/etc/sudoers</span><br></code></pre></td></tr></table></figure>\n\n<p>找到以下内容</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">## Allow root <span class=\"hljs-keyword\">to</span> run <span class=\"hljs-keyword\">any</span> commands anywhere<br>root    <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)       <span class=\"hljs-keyword\">ALL</span><br></code></pre></td></tr></table></figure>\n\n<p>在root的下面添加一行</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">git <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>) <span class=\"hljs-keyword\">ALL</span><br></code></pre></td></tr></table></figure>\n\n<p>保存退出后将权限改回来</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">chmod <span class=\"hljs-number\">400</span> /etc/sudoers<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"密匙配置\"><a href=\"#密匙配置\" class=\"headerlink\" title=\"密匙配置\"></a>密匙配置</h3><p>与将本地博客文件连接至GitHub一样，将本地的<code>id_rsa.pub</code>复制好，在服务器创建.ssh下的文件，粘贴进去。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">su</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">mkdir</span> <span class=\"hljs-string\">~/.ssh</span><br><span class=\"hljs-attr\">vim</span> <span class=\"hljs-string\">~/.ssh/authorized_keys</span><br></code></pre></td></tr></table></figure>\n\n<p>修改权限</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> ~<br>chmod 600 <span class=\"hljs-string\">.ssh/authorzied_keys</span><br>chmod 700 <span class=\"hljs-string\">.ssh</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>在本地终端输入</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -v git<span class=\"hljs-variable\">@SERVER</span><br></code></pre></td></tr></table></figure>\n\n<p>SERVER为你的服务器的公网地址，在控制台可以找到，如果成功连接说明服务器git配置成功。</p>\n<h3 id=\"创建网站根目录\"><a href=\"#创建网站根目录\" class=\"headerlink\" title=\"创建网站根目录\"></a>创建网站根目录</h3><p>网站根目录就是之后存放博客静态文件与资源的位置，你可以自己挑选位置创建你的根目录，之后再赋予权限。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">su root<br><span class=\"hljs-built_in\">mkdir</span> /<span class=\"hljs-built_in\">home</span>/myblog    # 此目录为网站的根目录<br>chown git:git -R /<span class=\"hljs-built_in\">home</span>/myblog<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">yum install -<span class=\"hljs-symbol\">y</span> nginx    <span class=\"hljs-comment\">// 安装</span><br>systemctl start nginx.service     <span class=\"hljs-comment\">// 启动服务</span><br></code></pre></td></tr></table></figure>\n\n<p>此时访问<strong>公网ip/80</strong>应该就能看到nginx的初始界面。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>使用<code>nginx -t</code>查看配置文件位置，一般为<code>/etc/nginx/nginx.conf</code></p>\n<p>打开nginx.conf文件，修改配置文件如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-attribute\">listen</span>       [::]:<span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-attribute\">server_name</span>  www.ziyedy.top;    <span class=\"hljs-comment\"># 修改为自己的域名</span><br>    <span class=\"hljs-attribute\">root</span>         /home/myblog;    <span class=\"hljs-comment\"># 修改为网站的根目录</span><br><br>    <span class=\"hljs-comment\"># Load configuration files for the default server block.</span><br>    <span class=\"hljs-attribute\">include</span> /etc/nginx/default.d/<span class=\"hljs-regexp\">*.conf</span>;<br><br>    <span class=\"hljs-attribute\">location</span> / &#123;<br>    \t<span class=\"hljs-attribute\">index</span> index.html\t<span class=\"hljs-comment\"># 设置自己的index网页</span><br>    &#125;<br><br>    error_page <span class=\"hljs-number\">404</span> /<span class=\"hljs-number\">404</span>.html;<br>        <span class=\"hljs-attribute\">location</span> = /40x.html &#123;<br>    &#125;<br><br>    <span class=\"hljs-attribute\">error_page</span> <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span> /50x.html;<br>        <span class=\"hljs-attribute\">location</span> = /50x.html &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>之后可以使用<code>nginx -t</code>检查配置文件中是否有语法错误，之后重启服务即可。</p>\n<h2 id=\"hexo自动部署\"><a href=\"#hexo自动部署\" class=\"headerlink\" title=\"hexo自动部署\"></a>hexo自动部署</h2><h3 id=\"建立git裸库\"><a href=\"#建立git裸库\" class=\"headerlink\" title=\"建立git裸库\"></a>建立git裸库</h3><p>在与文件同一根目录下建立裸库</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">su</span> <span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">init --bare blog.git</span><br></code></pre></td></tr></table></figure>\n\n<p>这时，<code>git</code> 用户的 <code>~</code> 目录下就存在一个 <code>blog.git</code> 文件夹，可使用 <code>ls</code> 命令查看。再修改 <code>blog.git</code> 的权限。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-tag\">git</span><span class=\"hljs-selector-pseudo\">:git</span> <span class=\"hljs-selector-tag\">-R</span> <span class=\"hljs-selector-tag\">blog</span><span class=\"hljs-selector-class\">.git</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用git-hooks同步网站根目录\"><a href=\"#使用git-hooks同步网站根目录\" class=\"headerlink\" title=\"使用git-hooks同步网站根目录\"></a>使用git-hooks同步网站根目录</h3><p>在这使用的是 <code>post-receive</code> 这个钩子，当 <code>git</code> 有收发的时候就会调用这个钩子。 在 <code>blog.git</code> 裸库的 hooks 文件夹中，新建 <code>post-receive</code> 文件。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vim blog.git<span class=\"hljs-regexp\">/hooks/</span>post-receive<br></code></pre></td></tr></table></figure>\n\n<p>填入以下内容，注意myblog应该填入自己的根目录文件名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n\n<p>保存后，赋予该文件可执行权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">chmod +x <span class=\"hljs-regexp\">/home/gi</span>t<span class=\"hljs-regexp\">/blog.git/</span>hooks<span class=\"hljs-regexp\">/post-receive</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>与部署到GitHub相同，在本地博客文件根目录下的<code>_config.yml</code> 文件中修改<code>deploy</code>设置如下。SERVER为服务器的公网ip，如果不想部署到GitHub了将<code>github</code>一行删去即可。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">deploy</span>:<br>  <span class=\"hljs-attribute\">type</span>: git<br>  <span class=\"hljs-attribute\">repo</span>:<br>    <span class=\"hljs-attribute\">github</span>: git<span class=\"hljs-variable\">@github</span>.<span class=\"hljs-attribute\">com</span>:xxxx/xxxx.github.io.git<br>    <span class=\"hljs-attribute\">git1</span>: git<span class=\"hljs-variable\">@SERVER</span>:/home/git/blog.git <br>  <span class=\"hljs-attribute\">branch</span>: master<br></code></pre></td></tr></table></figure>\n\n<p>之后正常配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">clean</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">g</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n\n<p>这是输入你的公网ip即可进入你的博客，要实现域名访问，在你的域名内解析你的公网ip即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo署到Githubpage上在国内访问速度很慢，正好前段时间买了一个腾讯云服务器，就干脆把hexo生成的博客文件直接放到云上跑算了，本文记录将hexo同时部署到GitHub与腾讯云服务器的过程。参考博客<a href=\"https://blog.csdn.net/StaunchKai/article/details/82878928\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/StaunchKai/article/details/82878928</a></p>\n<h2 id=\"部署环境\"><a href=\"#部署环境\" class=\"headerlink\" title=\"部署环境\"></a>部署环境</h2><ul>\n<li>本地环境<ul>\n<li>Ubuntu 18.04（64bit）</li>\n<li>所需环境：git，Node.js，hexo</li>\n</ul>\n</li>\n<li>服务器环境<ul>\n<li>腾讯云（CentOS 7.6 64bit）</li>\n<li>所需环境：git，Nginx</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><p>安装依赖包：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">yum <span class=\"hljs-keyword\">install</span> curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum <span class=\"hljs-keyword\">install</span>  gcc perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure>\n\n<p>卸载旧版本git（如果服务器自带git太旧的话）</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">/usr/local/src</span>   <span class=\"hljs-string\">//</span> 选择文件保存位置<br>wget https:<span class=\"hljs-string\">//mirrors.edge.kernel.org/pub/software/scm/git/git-2.19.0.tar.gz</span>   <span class=\"hljs-string\">//</span> 下载链接<br>tar -zxvf git-2.19.0.tar.gz   <span class=\"hljs-string\">//</span> 解压<br></code></pre></td></tr></table></figure>\n\n<p>具体的版本选择可在<a href=\"https://mirrors.edge.kernel.org/pub/software/scm/git/\" target=\"_blank\" rel=\"noopener\">https://mirrors.edge.kernel.org/pub/software/scm/git/</a> 查看。</p>\n<p>编译安装</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gauss\">cd git<span class=\"hljs-number\">-2.19</span><span class=\"hljs-number\">.0</span>   <span class=\"hljs-comment\">// 进入文件夹</span><br><span class=\"hljs-built_in\">make</span> prefix=/usr/<span class=\"hljs-keyword\">local</span>/git all  <span class=\"hljs-comment\">// 编译源码</span><br><span class=\"hljs-built_in\">make</span> prefix=/usr/<span class=\"hljs-keyword\">local</span>/git install  <span class=\"hljs-comment\">// 安装至 /usr/local/git 路径</span><br></code></pre></td></tr></table></figure>\n\n<p>之后正常的话<code>git --version</code>就可以看到git的版本了，如果在终端输入git没反应，则应该将git的安装位置加入环境变量中。</p>\n<h3 id=\"创建git用户\"><a href=\"#创建git用户\" class=\"headerlink\" title=\"创建git用户\"></a>创建git用户</h3><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">adduser</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">passwd</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">chmod</span> <span class=\"hljs-string\">740 /etc/sudoers</span><br><span class=\"hljs-attr\">vim</span> <span class=\"hljs-string\">/etc/sudoers</span><br></code></pre></td></tr></table></figure>\n\n<p>找到以下内容</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">## Allow root <span class=\"hljs-keyword\">to</span> run <span class=\"hljs-keyword\">any</span> commands anywhere<br>root    <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>)       <span class=\"hljs-keyword\">ALL</span><br></code></pre></td></tr></table></figure>\n\n<p>在root的下面添加一行</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">git <span class=\"hljs-keyword\">ALL</span>=(<span class=\"hljs-keyword\">ALL</span>) <span class=\"hljs-keyword\">ALL</span><br></code></pre></td></tr></table></figure>\n\n<p>保存退出后将权限改回来</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">chmod <span class=\"hljs-number\">400</span> /etc/sudoers<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"密匙配置\"><a href=\"#密匙配置\" class=\"headerlink\" title=\"密匙配置\"></a>密匙配置</h3><p>与将本地博客文件连接至GitHub一样，将本地的<code>id_rsa.pub</code>复制好，在服务器创建.ssh下的文件，粘贴进去。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">su</span> <span class=\"hljs-string\">git</span><br><span class=\"hljs-attr\">mkdir</span> <span class=\"hljs-string\">~/.ssh</span><br><span class=\"hljs-attr\">vim</span> <span class=\"hljs-string\">~/.ssh/authorized_keys</span><br></code></pre></td></tr></table></figure>\n\n<p>修改权限</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-keyword\">cd</span> ~<br>chmod 600 <span class=\"hljs-string\">.ssh/authorzied_keys</span><br>chmod 700 <span class=\"hljs-string\">.ssh</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>在本地终端输入</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">ssh</span> -v git<span class=\"hljs-variable\">@SERVER</span><br></code></pre></td></tr></table></figure>\n\n<p>SERVER为你的服务器的公网地址，在控制台可以找到，如果成功连接说明服务器git配置成功。</p>\n<h3 id=\"创建网站根目录\"><a href=\"#创建网站根目录\" class=\"headerlink\" title=\"创建网站根目录\"></a>创建网站根目录</h3><p>网站根目录就是之后存放博客静态文件与资源的位置，你可以自己挑选位置创建你的根目录，之后再赋予权限。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">su root<br><span class=\"hljs-built_in\">mkdir</span> /<span class=\"hljs-built_in\">home</span>/myblog    # 此目录为网站的根目录<br>chown git:git -R /<span class=\"hljs-built_in\">home</span>/myblog<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">yum install -<span class=\"hljs-symbol\">y</span> nginx    <span class=\"hljs-comment\">// 安装</span><br>systemctl start nginx.service     <span class=\"hljs-comment\">// 启动服务</span><br></code></pre></td></tr></table></figure>\n\n<p>此时访问<strong>公网ip/80</strong>应该就能看到nginx的初始界面。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>使用<code>nginx -t</code>查看配置文件位置，一般为<code>/etc/nginx/nginx.conf</code></p>\n<p>打开nginx.conf文件，修改配置文件如下</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>       <span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-attribute\">listen</span>       [::]:<span class=\"hljs-number\">80</span> default_server;<br>    <span class=\"hljs-attribute\">server_name</span>  www.ziyedy.top;    <span class=\"hljs-comment\"># 修改为自己的域名</span><br>    <span class=\"hljs-attribute\">root</span>         /home/myblog;    <span class=\"hljs-comment\"># 修改为网站的根目录</span><br><br>    <span class=\"hljs-comment\"># Load configuration files for the default server block.</span><br>    <span class=\"hljs-attribute\">include</span> /etc/nginx/default.d/<span class=\"hljs-regexp\">*.conf</span>;<br><br>    <span class=\"hljs-attribute\">location</span> / &#123;<br>    \t<span class=\"hljs-attribute\">index</span> index.html\t<span class=\"hljs-comment\"># 设置自己的index网页</span><br>    &#125;<br><br>    error_page <span class=\"hljs-number\">404</span> /<span class=\"hljs-number\">404</span>.html;<br>        <span class=\"hljs-attribute\">location</span> = /40x.html &#123;<br>    &#125;<br><br>    <span class=\"hljs-attribute\">error_page</span> <span class=\"hljs-number\">500</span> <span class=\"hljs-number\">502</span> <span class=\"hljs-number\">503</span> <span class=\"hljs-number\">504</span> /50x.html;<br>        <span class=\"hljs-attribute\">location</span> = /50x.html &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>之后可以使用<code>nginx -t</code>检查配置文件中是否有语法错误，之后重启服务即可。</p>\n<h2 id=\"hexo自动部署\"><a href=\"#hexo自动部署\" class=\"headerlink\" title=\"hexo自动部署\"></a>hexo自动部署</h2><h3 id=\"建立git裸库\"><a href=\"#建立git裸库\" class=\"headerlink\" title=\"建立git裸库\"></a>建立git裸库</h3><p>在与文件同一根目录下建立裸库</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">su</span> <span class=\"hljs-string\">root</span><br><span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">init --bare blog.git</span><br></code></pre></td></tr></table></figure>\n\n<p>这时，<code>git</code> 用户的 <code>~</code> 目录下就存在一个 <code>blog.git</code> 文件夹，可使用 <code>ls</code> 命令查看。再修改 <code>blog.git</code> 的权限。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">chown</span> <span class=\"hljs-selector-tag\">git</span><span class=\"hljs-selector-pseudo\">:git</span> <span class=\"hljs-selector-tag\">-R</span> <span class=\"hljs-selector-tag\">blog</span><span class=\"hljs-selector-class\">.git</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用git-hooks同步网站根目录\"><a href=\"#使用git-hooks同步网站根目录\" class=\"headerlink\" title=\"使用git-hooks同步网站根目录\"></a>使用git-hooks同步网站根目录</h3><p>在这使用的是 <code>post-receive</code> 这个钩子，当 <code>git</code> 有收发的时候就会调用这个钩子。 在 <code>blog.git</code> 裸库的 hooks 文件夹中，新建 <code>post-receive</code> 文件。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">vim blog.git<span class=\"hljs-regexp\">/hooks/</span>post-receive<br></code></pre></td></tr></table></figure>\n\n<p>填入以下内容，注意myblog应该填入自己的根目录文件名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br>git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f<br></code></pre></td></tr></table></figure>\n\n<p>保存后，赋予该文件可执行权限</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">chmod +x <span class=\"hljs-regexp\">/home/gi</span>t<span class=\"hljs-regexp\">/blog.git/</span>hooks<span class=\"hljs-regexp\">/post-receive</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"本地配置\"><a href=\"#本地配置\" class=\"headerlink\" title=\"本地配置\"></a>本地配置</h3><p>与部署到GitHub相同，在本地博客文件根目录下的<code>_config.yml</code> 文件中修改<code>deploy</code>设置如下。SERVER为服务器的公网ip，如果不想部署到GitHub了将<code>github</code>一行删去即可。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-attribute\">deploy</span>:<br>  <span class=\"hljs-attribute\">type</span>: git<br>  <span class=\"hljs-attribute\">repo</span>:<br>    <span class=\"hljs-attribute\">github</span>: git<span class=\"hljs-variable\">@github</span>.<span class=\"hljs-attribute\">com</span>:xxxx/xxxx.github.io.git<br>    <span class=\"hljs-attribute\">git1</span>: git<span class=\"hljs-variable\">@SERVER</span>:/home/git/blog.git <br>  <span class=\"hljs-attribute\">branch</span>: master<br></code></pre></td></tr></table></figure>\n\n<p>之后正常配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">clean</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">g</span><br><span class=\"hljs-attr\">hexo</span> <span class=\"hljs-string\">d</span><br></code></pre></td></tr></table></figure>\n\n<p>这是输入你的公网ip即可进入你的博客，要实现域名访问，在你的域名内解析你的公网ip即可。</p>\n"},{"title":"Anaconda+PyCharm配置PyQt5全过程","date":"2020-04-09T14:44:55.000Z","fileName":"pyqt5-env-ide-build","_content":"\n\n\n前段时间写了一个手写电话号码识别的小程序，GUI用的是Python自带的Tkinter，但这种GUI太简陋可视化效果不佳，因此打算使用别的更加强大的GUI重构一下，目光就瞄准了pyqt，因为用C++时接触过，知道这是个好用的GUI吧。\n\n## Anaconda下安装\n\n在Anaconda在GitHub上的issue下知道由于兼容Python2的原因没法用conda安装最新版PyQt5包，所以得使用pip命令进行安装。\n\n在Anaconda自带的prompt下输入以下命令即可完成安装。\n\n```\npip3 install PyQt5\n```\n\n但速度通常很慢，因此建议改为清华的镜像进行安装。\n\n```\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5\n```\n\n之后在命令行窗口输入`import PyQt5`，不报错，说明安装成功。\n\n## Pycharm下配置相关环境\n\n用过Qt的应该都知道Qt有QtDesigner这种优秀的可视化设计工具，可以简化编码，所以如果使用PyCharm作为IDE编写Python的话需要将QtDesigner作为拓展程序进行配置（这样可以在IDE中直接进行调用了，会很方便）。除此之外，还需要配置将QtDesigner生成的.ui文件转化为.py文件。\n\n### 配置QtDesigner\n\n在PyCharm中的`File->Settings`下，进行如下操作，即可配置完成QDesigner。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/1.png)\n\n### 配置PyUIC\n\n使用QDesigner生成的文件格式为.ui的格式，要将其转化为.py格式安装的pyqt包中也已经写好的相应的程序。在上图中的相同界面中输入以下信息。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/2.png)\n\nprogram中输入pyuic5.exe的路径。\n\n在参数栏中输入如下命令：(该命令就是将.ui转化为.py文件)\n\n```\n$FileName$ -o $FileNameWithoutExtension$.py\n```\n\n该步骤中也有直接输入pyuic.py文件的，但我试验了以下没有成功，所以使用.exe文件还是最靠谱的（Windows下）。\n\n## 使用实验\n\n在菜单栏“工具”中找到拓展工具，选择QDesigner即可。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/3.png)\n\n\n\n打开设计工具之后，即可创建相应的ui界面如下：\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/4.png)\n\n这时候可以看到PyCharm界面中多了一个.ui文件，在该文件上右击，选择拓展工具中的PyUIC即可完成.ui到.py的转换。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/5.png)\n\n此时可以发现多了一个同名的.py文件，打开文件里面包含的就是之前设计好的界面的python代码了，加入以下主函数运行：\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    MainWindow = QMainWindow()\n    ui = Ui_MainWindow()\n    ui.setupUi(MainWindow)\n    MainWindow.show()\n    sys.exit(app.exec_())\n```\n\n即可得到如下结果：\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/6.png)\n\nOK，那使用PyQt5构建python的GUI程序的流程总算整通了。\n\n#### 参考\n\nhttps://www.jianshu.com/p/094928ac0b73\n\n","source":"_posts/编程相关/Python/PyQt5/Anaconda+PyCharm配置PyQt5全过程.md","raw":"---\ntitle: Anaconda+PyCharm配置PyQt5全过程\ndate: 2020-04-09 22:44:55\ntags:\n\t- Python\n\t- GUI\ncategories:\n\t- 编程相关\n\t- Python\n\t- PyQt5\nfileName: pyqt5-env-ide-build\n---\n\n\n\n前段时间写了一个手写电话号码识别的小程序，GUI用的是Python自带的Tkinter，但这种GUI太简陋可视化效果不佳，因此打算使用别的更加强大的GUI重构一下，目光就瞄准了pyqt，因为用C++时接触过，知道这是个好用的GUI吧。\n\n## Anaconda下安装\n\n在Anaconda在GitHub上的issue下知道由于兼容Python2的原因没法用conda安装最新版PyQt5包，所以得使用pip命令进行安装。\n\n在Anaconda自带的prompt下输入以下命令即可完成安装。\n\n```\npip3 install PyQt5\n```\n\n但速度通常很慢，因此建议改为清华的镜像进行安装。\n\n```\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple PyQt5\n```\n\n之后在命令行窗口输入`import PyQt5`，不报错，说明安装成功。\n\n## Pycharm下配置相关环境\n\n用过Qt的应该都知道Qt有QtDesigner这种优秀的可视化设计工具，可以简化编码，所以如果使用PyCharm作为IDE编写Python的话需要将QtDesigner作为拓展程序进行配置（这样可以在IDE中直接进行调用了，会很方便）。除此之外，还需要配置将QtDesigner生成的.ui文件转化为.py文件。\n\n### 配置QtDesigner\n\n在PyCharm中的`File->Settings`下，进行如下操作，即可配置完成QDesigner。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/1.png)\n\n### 配置PyUIC\n\n使用QDesigner生成的文件格式为.ui的格式，要将其转化为.py格式安装的pyqt包中也已经写好的相应的程序。在上图中的相同界面中输入以下信息。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/2.png)\n\nprogram中输入pyuic5.exe的路径。\n\n在参数栏中输入如下命令：(该命令就是将.ui转化为.py文件)\n\n```\n$FileName$ -o $FileNameWithoutExtension$.py\n```\n\n该步骤中也有直接输入pyuic.py文件的，但我试验了以下没有成功，所以使用.exe文件还是最靠谱的（Windows下）。\n\n## 使用实验\n\n在菜单栏“工具”中找到拓展工具，选择QDesigner即可。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/3.png)\n\n\n\n打开设计工具之后，即可创建相应的ui界面如下：\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/4.png)\n\n这时候可以看到PyCharm界面中多了一个.ui文件，在该文件上右击，选择拓展工具中的PyUIC即可完成.ui到.py的转换。\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/5.png)\n\n此时可以发现多了一个同名的.py文件，打开文件里面包含的就是之前设计好的界面的python代码了，加入以下主函数运行：\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    MainWindow = QMainWindow()\n    ui = Ui_MainWindow()\n    ui.setupUi(MainWindow)\n    MainWindow.show()\n    sys.exit(app.exec_())\n```\n\n即可得到如下结果：\n\n![](http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/6.png)\n\nOK，那使用PyQt5构建python的GUI程序的流程总算整通了。\n\n#### 参考\n\nhttps://www.jianshu.com/p/094928ac0b73\n\n","slug":"编程相关/Python/PyQt5/Anaconda+PyCharm配置PyQt5全过程","published":1,"updated":"2021-01-11T04:31:27.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moec00f3rwjscom3hjcg","content":"<p>前段时间写了一个手写电话号码识别的小程序，GUI用的是Python自带的Tkinter，但这种GUI太简陋可视化效果不佳，因此打算使用别的更加强大的GUI重构一下，目光就瞄准了pyqt，因为用C++时接触过，知道这是个好用的GUI吧。</p>\n<h2 id=\"Anaconda下安装\"><a href=\"#Anaconda下安装\" class=\"headerlink\" title=\"Anaconda下安装\"></a>Anaconda下安装</h2><p>在Anaconda在GitHub上的issue下知道由于兼容Python2的原因没法用conda安装最新版PyQt5包，所以得使用pip命令进行安装。</p>\n<p>在Anaconda自带的prompt下输入以下命令即可完成安装。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">pip3 <span class=\"hljs-keyword\">install</span> PyQt5<br></code></pre></td></tr></table></figure>\n\n<p>但速度通常很慢，因此建议改为清华的镜像进行安装。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs groovy\">pip install -i <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pypi.tuna.tsinghua.edu.cn/simple PyQt5</span><br></code></pre></td></tr></table></figure>\n\n<p>之后在命令行窗口输入<code>import PyQt5</code>，不报错，说明安装成功。</p>\n<h2 id=\"Pycharm下配置相关环境\"><a href=\"#Pycharm下配置相关环境\" class=\"headerlink\" title=\"Pycharm下配置相关环境\"></a>Pycharm下配置相关环境</h2><p>用过Qt的应该都知道Qt有QtDesigner这种优秀的可视化设计工具，可以简化编码，所以如果使用PyCharm作为IDE编写Python的话需要将QtDesigner作为拓展程序进行配置（这样可以在IDE中直接进行调用了，会很方便）。除此之外，还需要配置将QtDesigner生成的.ui文件转化为.py文件。</p>\n<h3 id=\"配置QtDesigner\"><a href=\"#配置QtDesigner\" class=\"headerlink\" title=\"配置QtDesigner\"></a>配置QtDesigner</h3><p>在PyCharm中的<code>File-&gt;Settings</code>下，进行如下操作，即可配置完成QDesigner。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/1.png\" alt=\"\"></p>\n<h3 id=\"配置PyUIC\"><a href=\"#配置PyUIC\" class=\"headerlink\" title=\"配置PyUIC\"></a>配置PyUIC</h3><p>使用QDesigner生成的文件格式为.ui的格式，要将其转化为.py格式安装的pyqt包中也已经写好的相应的程序。在上图中的相同界面中输入以下信息。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/2.png\" alt=\"\"></p>\n<p>program中输入pyuic5.exe的路径。</p>\n<p>在参数栏中输入如下命令：(该命令就是将.ui转化为.py文件)</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$FileName</span><span class=\"hljs-variable\">$ </span>-o <span class=\"hljs-variable\">$FileNameWithoutExtension</span><span class=\"hljs-variable\">$.</span>py<br></code></pre></td></tr></table></figure>\n\n<p>该步骤中也有直接输入pyuic.py文件的，但我试验了以下没有成功，所以使用.exe文件还是最靠谱的（Windows下）。</p>\n<h2 id=\"使用实验\"><a href=\"#使用实验\" class=\"headerlink\" title=\"使用实验\"></a>使用实验</h2><p>在菜单栏“工具”中找到拓展工具，选择QDesigner即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/3.png\" alt=\"\"></p>\n<p>打开设计工具之后，即可创建相应的ui界面如下：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/4.png\" alt=\"\"></p>\n<p>这时候可以看到PyCharm界面中多了一个.ui文件，在该文件上右击，选择拓展工具中的PyUIC即可完成.ui到.py的转换。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/5.png\" alt=\"\"></p>\n<p>此时可以发现多了一个同名的.py文件，打开文件里面包含的就是之前设计好的界面的python代码了，加入以下主函数运行：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">import sys<br>from PyQt5.QtWidgets import QApplication, QMainWindow<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    app = QApplication(sys.argv)<br>    MainWindow = QMainWindow()<br>    ui = Ui_MainWindow()<br>    ui.setupUi(MainWindow)<br>    MainWindow.show()<br>    sys.<span class=\"hljs-keyword\">exit</span>(app.exec_())<br></code></pre></td></tr></table></figure>\n\n<p>即可得到如下结果：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/6.png\" alt=\"\"></p>\n<p>OK，那使用PyQt5构建python的GUI程序的流程总算整通了。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.jianshu.com/p/094928ac0b73\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/094928ac0b73</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前段时间写了一个手写电话号码识别的小程序，GUI用的是Python自带的Tkinter，但这种GUI太简陋可视化效果不佳，因此打算使用别的更加强大的GUI重构一下，目光就瞄准了pyqt，因为用C++时接触过，知道这是个好用的GUI吧。</p>\n<h2 id=\"Anaconda下安装\"><a href=\"#Anaconda下安装\" class=\"headerlink\" title=\"Anaconda下安装\"></a>Anaconda下安装</h2><p>在Anaconda在GitHub上的issue下知道由于兼容Python2的原因没法用conda安装最新版PyQt5包，所以得使用pip命令进行安装。</p>\n<p>在Anaconda自带的prompt下输入以下命令即可完成安装。</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">pip3 <span class=\"hljs-keyword\">install</span> PyQt5<br></code></pre></td></tr></table></figure>\n\n<p>但速度通常很慢，因此建议改为清华的镜像进行安装。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs groovy\">pip install -i <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//pypi.tuna.tsinghua.edu.cn/simple PyQt5</span><br></code></pre></td></tr></table></figure>\n\n<p>之后在命令行窗口输入<code>import PyQt5</code>，不报错，说明安装成功。</p>\n<h2 id=\"Pycharm下配置相关环境\"><a href=\"#Pycharm下配置相关环境\" class=\"headerlink\" title=\"Pycharm下配置相关环境\"></a>Pycharm下配置相关环境</h2><p>用过Qt的应该都知道Qt有QtDesigner这种优秀的可视化设计工具，可以简化编码，所以如果使用PyCharm作为IDE编写Python的话需要将QtDesigner作为拓展程序进行配置（这样可以在IDE中直接进行调用了，会很方便）。除此之外，还需要配置将QtDesigner生成的.ui文件转化为.py文件。</p>\n<h3 id=\"配置QtDesigner\"><a href=\"#配置QtDesigner\" class=\"headerlink\" title=\"配置QtDesigner\"></a>配置QtDesigner</h3><p>在PyCharm中的<code>File-&gt;Settings</code>下，进行如下操作，即可配置完成QDesigner。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/1.png\" alt=\"\"></p>\n<h3 id=\"配置PyUIC\"><a href=\"#配置PyUIC\" class=\"headerlink\" title=\"配置PyUIC\"></a>配置PyUIC</h3><p>使用QDesigner生成的文件格式为.ui的格式，要将其转化为.py格式安装的pyqt包中也已经写好的相应的程序。在上图中的相同界面中输入以下信息。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/2.png\" alt=\"\"></p>\n<p>program中输入pyuic5.exe的路径。</p>\n<p>在参数栏中输入如下命令：(该命令就是将.ui转化为.py文件)</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$FileName</span><span class=\"hljs-variable\">$ </span>-o <span class=\"hljs-variable\">$FileNameWithoutExtension</span><span class=\"hljs-variable\">$.</span>py<br></code></pre></td></tr></table></figure>\n\n<p>该步骤中也有直接输入pyuic.py文件的，但我试验了以下没有成功，所以使用.exe文件还是最靠谱的（Windows下）。</p>\n<h2 id=\"使用实验\"><a href=\"#使用实验\" class=\"headerlink\" title=\"使用实验\"></a>使用实验</h2><p>在菜单栏“工具”中找到拓展工具，选择QDesigner即可。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/3.png\" alt=\"\"></p>\n<p>打开设计工具之后，即可创建相应的ui界面如下：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/4.png\" alt=\"\"></p>\n<p>这时候可以看到PyCharm界面中多了一个.ui文件，在该文件上右击，选择拓展工具中的PyUIC即可完成.ui到.py的转换。</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/5.png\" alt=\"\"></p>\n<p>此时可以发现多了一个同名的.py文件，打开文件里面包含的就是之前设计好的界面的python代码了，加入以下主函数运行：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">import sys<br>from PyQt5.QtWidgets import QApplication, QMainWindow<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    app = QApplication(sys.argv)<br>    MainWindow = QMainWindow()<br>    ui = Ui_MainWindow()<br>    ui.setupUi(MainWindow)<br>    MainWindow.show()<br>    sys.<span class=\"hljs-keyword\">exit</span>(app.exec_())<br></code></pre></td></tr></table></figure>\n\n<p>即可得到如下结果：</p>\n<p><img src=\"http://cdn.ziyedy.top/image/Python/GUI/Anaconda%2BPyCharm%E9%85%8D%E7%BD%AEPyQt5%E5%85%A8%E8%BF%87%E7%A8%8B/6.png\" alt=\"\"></p>\n<p>OK，那使用PyQt5构建python的GUI程序的流程总算整通了。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.jianshu.com/p/094928ac0b73\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/094928ac0b73</a></p>\n"},{"title":"PyQt5基本组件","date":"2020-08-10T08:18:07.000Z","fileName":"pyqt5-basic-widget","_content":"\n\n\n### 构建一般程序\n\n#### 导入\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n```\n\n#### 创建一个QApplication对象\n\n每一个PyQt5程序都需要有一个QApplication对象。\n\n```\napp = QApplication(sys.argv)\n```\n\n\n\n#### 创建一个QWidget对象\n\n不为控件指定一个父对象，那么该控件就会被当作窗口处理\n\n```\nwindow = QWidget()\nwindow.show()\n```\n\n#### 进入主循环\n\n进入程序主循环，事件处理从本行代码开始。主循环接收事件消息并将其分发给程序的各个控件。\n\n使用`sys.exit()`方法退出可以确保程序完整的结束，若程序运行成功，`exec_()`的返回值为0，否则为非0。（与底层使用C++有关）\n\n```\nsys.exit(app.exec_())\n```\n\n\n\n\n\n\n\n## 布局管理\n\n### 绝对布局\n\n\n\n\n\n### 布局管理器\n\n选中需要布局的几个元素，右键在“布局”中即可选择相应布局\n\n使用布局管理器后，属性编辑器中geometry属性变为了灰色不可用，说明这些标签的位置大小已经由布局管理器接管了。\n\n\n\n\n\n## 信号与槽\n\n创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（信号发射时，连接的槽函数会自动执行）\n\nQObject.signal.connect()\n\n\n\n## 窗口\n\n### QMainWindow\n\nQMainWindow、QWidget、QDialog三个类都可以创建窗口。其中主窗口包含菜单栏等等，主窗口继承自（QWidget）\n\n\n\n\n\n将按钮button的clicked信号与closeWin槽函数关联起来\n\n```\nself.button = QPushButton('关闭')\nself.button.clicked.connect(self.closeWin)\n```\n\n\n\n### QWidget\n\n基础窗口控件QWidget类是所有用户界面对象的基类，所有窗口和控件都直接或间接继承自QWidget\n\n\n\n### QLabel\n\n\n\n\n\n## 按钮\n\n按钮的基类是QAbstractButton，提供了按钮的通用性功能\n\n\n\n## 对话框\n\n对话框的基类是QDialog，主要子类有QMessageBox、QFileDialog、QFontDialog、QInputDialog\n\n### QMessageBox\n\n弹出提示信息，各参数如下\n\n```\nQMessageBox.information(QWidget, title, text, buttons, defaultButton)\nQMessageBox.warning()\nQMessageBox.question()\nQMessageBox.critical()\nQMessageBox.about()\n```\n\n示例\n\n```\nQMessageBox.information(self, \"标题\", \"关于对话框\", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)\n```\n\n\n\n### QInputDialog\n\n该标准对话框可以收集控件输入的信息\n\n```\nself.btn2 = QPushButton(\"获得字符串\")\nself.btn2.clicked.connect(self.getIext)\nself.le2 = QLineEdit()\n```\n\n\n\n\n\n```\ndef getIext(self):\t\n\ttext, ok = QInputDialog.getText(self, 'Text Input Dialog', '输入姓名:')\n\tif ok:\n\t\tself.le2.setText(str(text)) \n```\n\n\n\n### QFileDialog\n\nQFileDialog是用于打开和保存文件的标准对话框\n\n主要方法如下\n\n```\nQFileDialog.getOpenFileName(父组件, 标题, 默认打开目录, 文件拓展名过滤器)\n```\n\n示例\n\n```\nf = QFileDialog.getOpenFileName()\nprint(f)\n########################\n('C:/Users/lenovo/Desktop/pyqt/t1.ui', 'All Files (*)')\n```\n\n\n\n## 绘图\n\n主要可以通过QPainter、QPen与QBrush等三个类进行绘图\n\n### QPainter\n\n绘制方法在QPainter对象的begin()和end()之间。\n\n\n\n\n\n## 多线程\n\nGUI中部分程序十分耗时可能会造成卡顿，这时候就需要使用多线程技术。PyQt中主要涉及三个内容，一个是使用计时器模块QTimer；一种是使用多线程模块QThread，还有使用事件处理的功能\n\n### QTimer\n\n\n\n### QThread\n\nPyQt线程使用非常简单，建立一个自定义的类（继承自QThread），并实现其run()方法\n\n\n\n\n\n## 网页交互\n\nPyQt5使用PyQt5.QtWebEngineWidgets中的QWebEngineView控件来展示HTML页面\n\n### 方法\n\n\n\n\n\n### 示例\n\n```\nclass MainWindow(QMainWindow):\n\ndef __init__(self):\n    super(QMainWindow, self).__init__()\n    self.setWindowTitle('打开外部网页例子')\n    self.setGeometry(5, 30, 1355, 730)\n    self.browser = QWebEngineView()\n    # 加载外部页面\n    self.browser.load(QUrl('http://ziyedy.top'))\n    self.setCentralWidget(self.browser)\n```\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程相关/Python/PyQt5/PyQt5基本组件.md","raw":"---\ntitle: PyQt5基本组件\ndate: 2020-08-10 16:18:07\ntags:\n\t- Python\n\t- GUI\ncategories:\n\t- 编程相关\n\t- Python\n\t- PyQt5\nfileName: pyqt5-basic-widget\n---\n\n\n\n### 构建一般程序\n\n#### 导入\n\n```\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget\n```\n\n#### 创建一个QApplication对象\n\n每一个PyQt5程序都需要有一个QApplication对象。\n\n```\napp = QApplication(sys.argv)\n```\n\n\n\n#### 创建一个QWidget对象\n\n不为控件指定一个父对象，那么该控件就会被当作窗口处理\n\n```\nwindow = QWidget()\nwindow.show()\n```\n\n#### 进入主循环\n\n进入程序主循环，事件处理从本行代码开始。主循环接收事件消息并将其分发给程序的各个控件。\n\n使用`sys.exit()`方法退出可以确保程序完整的结束，若程序运行成功，`exec_()`的返回值为0，否则为非0。（与底层使用C++有关）\n\n```\nsys.exit(app.exec_())\n```\n\n\n\n\n\n\n\n## 布局管理\n\n### 绝对布局\n\n\n\n\n\n### 布局管理器\n\n选中需要布局的几个元素，右键在“布局”中即可选择相应布局\n\n使用布局管理器后，属性编辑器中geometry属性变为了灰色不可用，说明这些标签的位置大小已经由布局管理器接管了。\n\n\n\n\n\n## 信号与槽\n\n创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（信号发射时，连接的槽函数会自动执行）\n\nQObject.signal.connect()\n\n\n\n## 窗口\n\n### QMainWindow\n\nQMainWindow、QWidget、QDialog三个类都可以创建窗口。其中主窗口包含菜单栏等等，主窗口继承自（QWidget）\n\n\n\n\n\n将按钮button的clicked信号与closeWin槽函数关联起来\n\n```\nself.button = QPushButton('关闭')\nself.button.clicked.connect(self.closeWin)\n```\n\n\n\n### QWidget\n\n基础窗口控件QWidget类是所有用户界面对象的基类，所有窗口和控件都直接或间接继承自QWidget\n\n\n\n### QLabel\n\n\n\n\n\n## 按钮\n\n按钮的基类是QAbstractButton，提供了按钮的通用性功能\n\n\n\n## 对话框\n\n对话框的基类是QDialog，主要子类有QMessageBox、QFileDialog、QFontDialog、QInputDialog\n\n### QMessageBox\n\n弹出提示信息，各参数如下\n\n```\nQMessageBox.information(QWidget, title, text, buttons, defaultButton)\nQMessageBox.warning()\nQMessageBox.question()\nQMessageBox.critical()\nQMessageBox.about()\n```\n\n示例\n\n```\nQMessageBox.information(self, \"标题\", \"关于对话框\", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)\n```\n\n\n\n### QInputDialog\n\n该标准对话框可以收集控件输入的信息\n\n```\nself.btn2 = QPushButton(\"获得字符串\")\nself.btn2.clicked.connect(self.getIext)\nself.le2 = QLineEdit()\n```\n\n\n\n\n\n```\ndef getIext(self):\t\n\ttext, ok = QInputDialog.getText(self, 'Text Input Dialog', '输入姓名:')\n\tif ok:\n\t\tself.le2.setText(str(text)) \n```\n\n\n\n### QFileDialog\n\nQFileDialog是用于打开和保存文件的标准对话框\n\n主要方法如下\n\n```\nQFileDialog.getOpenFileName(父组件, 标题, 默认打开目录, 文件拓展名过滤器)\n```\n\n示例\n\n```\nf = QFileDialog.getOpenFileName()\nprint(f)\n########################\n('C:/Users/lenovo/Desktop/pyqt/t1.ui', 'All Files (*)')\n```\n\n\n\n## 绘图\n\n主要可以通过QPainter、QPen与QBrush等三个类进行绘图\n\n### QPainter\n\n绘制方法在QPainter对象的begin()和end()之间。\n\n\n\n\n\n## 多线程\n\nGUI中部分程序十分耗时可能会造成卡顿，这时候就需要使用多线程技术。PyQt中主要涉及三个内容，一个是使用计时器模块QTimer；一种是使用多线程模块QThread，还有使用事件处理的功能\n\n### QTimer\n\n\n\n### QThread\n\nPyQt线程使用非常简单，建立一个自定义的类（继承自QThread），并实现其run()方法\n\n\n\n\n\n## 网页交互\n\nPyQt5使用PyQt5.QtWebEngineWidgets中的QWebEngineView控件来展示HTML页面\n\n### 方法\n\n\n\n\n\n### 示例\n\n```\nclass MainWindow(QMainWindow):\n\ndef __init__(self):\n    super(QMainWindow, self).__init__()\n    self.setWindowTitle('打开外部网页例子')\n    self.setGeometry(5, 30, 1355, 730)\n    self.browser = QWebEngineView()\n    # 加载外部页面\n    self.browser.load(QUrl('http://ziyedy.top'))\n    self.setCentralWidget(self.browser)\n```\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程相关/Python/PyQt5/PyQt5基本组件","published":1,"updated":"2021-01-11T04:31:48.399Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moed00f5rwjs7i1y0ld3","content":"<h3 id=\"构建一般程序\"><a href=\"#构建一般程序\" class=\"headerlink\" title=\"构建一般程序\"></a>构建一般程序</h3><h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-keyword\">import</span> sys<br><span class=\"hljs-title\">from</span> <span class=\"hljs-type\">PyQt5</span>.<span class=\"hljs-type\">QtWidgets</span> <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个QApplication对象\"><a href=\"#创建一个QApplication对象\" class=\"headerlink\" title=\"创建一个QApplication对象\"></a>创建一个QApplication对象</h4><p>每一个PyQt5程序都需要有一个QApplication对象。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">app = <span class=\"hljs-constructor\">QApplication(<span class=\"hljs-params\">sys</span>.<span class=\"hljs-params\">argv</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建一个QWidget对象\"><a href=\"#创建一个QWidget对象\" class=\"headerlink\" title=\"创建一个QWidget对象\"></a>创建一个QWidget对象</h4><p>不为控件指定一个父对象，那么该控件就会被当作窗口处理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">window</span> = QWidget()<br><span class=\"hljs-built_in\">window</span>.<span class=\"hljs-keyword\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"进入主循环\"><a href=\"#进入主循环\" class=\"headerlink\" title=\"进入主循环\"></a>进入主循环</h4><p>进入程序主循环，事件处理从本行代码开始。主循环接收事件消息并将其分发给程序的各个控件。</p>\n<p>使用<code>sys.exit()</code>方法退出可以确保程序完整的结束，若程序运行成功，<code>exec_()</code>的返回值为0，否则为非0。（与底层使用C++有关）</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sys.<span class=\"hljs-keyword\">exit</span>(app.exec_())<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"布局管理\"><a href=\"#布局管理\" class=\"headerlink\" title=\"布局管理\"></a>布局管理</h2><h3 id=\"绝对布局\"><a href=\"#绝对布局\" class=\"headerlink\" title=\"绝对布局\"></a>绝对布局</h3><h3 id=\"布局管理器\"><a href=\"#布局管理器\" class=\"headerlink\" title=\"布局管理器\"></a>布局管理器</h3><p>选中需要布局的几个元素，右键在“布局”中即可选择相应布局</p>\n<p>使用布局管理器后，属性编辑器中geometry属性变为了灰色不可用，说明这些标签的位置大小已经由布局管理器接管了。</p>\n<h2 id=\"信号与槽\"><a href=\"#信号与槽\" class=\"headerlink\" title=\"信号与槽\"></a>信号与槽</h2><p>创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（信号发射时，连接的槽函数会自动执行）</p>\n<p>QObject.signal.connect()</p>\n<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><h3 id=\"QMainWindow\"><a href=\"#QMainWindow\" class=\"headerlink\" title=\"QMainWindow\"></a>QMainWindow</h3><p>QMainWindow、QWidget、QDialog三个类都可以创建窗口。其中主窗口包含菜单栏等等，主窗口继承自（QWidget）</p>\n<p>将按钮button的clicked信号与closeWin槽函数关联起来</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">self</span>.button = QPushButton(<span class=\"hljs-string\">'关闭'</span>)<br><span class=\"hljs-keyword\">self</span>.button.clicked.connect(<span class=\"hljs-keyword\">self</span>.closeWin)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QWidget\"><a href=\"#QWidget\" class=\"headerlink\" title=\"QWidget\"></a>QWidget</h3><p>基础窗口控件QWidget类是所有用户界面对象的基类，所有窗口和控件都直接或间接继承自QWidget</p>\n<h3 id=\"QLabel\"><a href=\"#QLabel\" class=\"headerlink\" title=\"QLabel\"></a>QLabel</h3><h2 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h2><p>按钮的基类是QAbstractButton，提供了按钮的通用性功能</p>\n<h2 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h2><p>对话框的基类是QDialog，主要子类有QMessageBox、QFileDialog、QFontDialog、QInputDialog</p>\n<h3 id=\"QMessageBox\"><a href=\"#QMessageBox\" class=\"headerlink\" title=\"QMessageBox\"></a>QMessageBox</h3><p>弹出提示信息，各参数如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>information(QWidget, title, text, buttons, defaultButton)<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>warning<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>question<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>critical<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>about<span class=\"hljs-literal\">()</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">QMessageBox.information(self, <span class=\"hljs-string\">\"标题\"</span>, <span class=\"hljs-string\">\"关于对话框\"</span>, QMessageBox.<span class=\"hljs-keyword\">Yes</span> | QMessageBox.<span class=\"hljs-keyword\">No</span>, QMessageBox.<span class=\"hljs-keyword\">Yes</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QInputDialog\"><a href=\"#QInputDialog\" class=\"headerlink\" title=\"QInputDialog\"></a>QInputDialog</h3><p>该标准对话框可以收集控件输入的信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">self</span>.btn2 = QPushButton(<span class=\"hljs-string\">\"获得字符串\"</span>)<br><span class=\"hljs-keyword\">self</span>.btn2.clicked.connect(<span class=\"hljs-keyword\">self</span>.getIext)<br><span class=\"hljs-keyword\">self</span>.le2 = QLineEdit()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">def get<span class=\"hljs-constructor\">Iext(<span class=\"hljs-params\">self</span>)</span>:\t<br>\ttext, ok = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QInputDialog</span>.</span></span>get<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">self</span>, 'Text Input Dialog', '输入姓名:')</span><br>\t<span class=\"hljs-keyword\">if</span> ok:<br>\t\tself.le2.set<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">str</span>(<span class=\"hljs-params\">text</span>)</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QFileDialog\"><a href=\"#QFileDialog\" class=\"headerlink\" title=\"QFileDialog\"></a>QFileDialog</h3><p>QFileDialog是用于打开和保存文件的标准对话框</p>\n<p>主要方法如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QFileDialog</span>.</span></span>get<span class=\"hljs-constructor\">OpenFileName(父组件, 标题, 默认打开目录, 文件拓展名过滤器)</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">f = QFileDialog.getOpenFileName()<br>print(f)<br>########################<br>(<span class=\"hljs-string\">'C:/Users/lenovo/Desktop/pyqt/t1.ui'</span>, <span class=\"hljs-string\">'All Files (*)'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h2><p>主要可以通过QPainter、QPen与QBrush等三个类进行绘图</p>\n<h3 id=\"QPainter\"><a href=\"#QPainter\" class=\"headerlink\" title=\"QPainter\"></a>QPainter</h3><p>绘制方法在QPainter对象的begin()和end()之间。</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>GUI中部分程序十分耗时可能会造成卡顿，这时候就需要使用多线程技术。PyQt中主要涉及三个内容，一个是使用计时器模块QTimer；一种是使用多线程模块QThread，还有使用事件处理的功能</p>\n<h3 id=\"QTimer\"><a href=\"#QTimer\" class=\"headerlink\" title=\"QTimer\"></a>QTimer</h3><h3 id=\"QThread\"><a href=\"#QThread\" class=\"headerlink\" title=\"QThread\"></a>QThread</h3><p>PyQt线程使用非常简单，建立一个自定义的类（继承自QThread），并实现其run()方法</p>\n<h2 id=\"网页交互\"><a href=\"#网页交互\" class=\"headerlink\" title=\"网页交互\"></a>网页交互</h2><p>PyQt5使用PyQt5.QtWebEngineWidgets中的QWebEngineView控件来展示HTML页面</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainWindow</span>(<span class=\"hljs-title\">QMainWindow</span>):</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>    <span class=\"hljs-keyword\">super</span>(QMainWindow, <span class=\"hljs-keyword\">self</span>).__init_<span class=\"hljs-number\">_</span>()<br>    <span class=\"hljs-keyword\">self</span>.setWindowTitle(<span class=\"hljs-string\">'打开外部网页例子'</span>)<br>    <span class=\"hljs-keyword\">self</span>.setGeometry(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">1355</span>, <span class=\"hljs-number\">730</span>)<br>    <span class=\"hljs-keyword\">self</span>.browser = QWebEngineView()<br>    <span class=\"hljs-comment\"># 加载外部页面</span><br>    <span class=\"hljs-keyword\">self</span>.browser.load(QUrl(<span class=\"hljs-string\">'http://ziyedy.top'</span>))<br>    <span class=\"hljs-keyword\">self</span>.setCentralWidget(<span class=\"hljs-keyword\">self</span>.browser)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"构建一般程序\"><a href=\"#构建一般程序\" class=\"headerlink\" title=\"构建一般程序\"></a>构建一般程序</h3><h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-keyword\">import</span> sys<br><span class=\"hljs-title\">from</span> <span class=\"hljs-type\">PyQt5</span>.<span class=\"hljs-type\">QtWidgets</span> <span class=\"hljs-keyword\">import</span> QApplication, QWidget<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建一个QApplication对象\"><a href=\"#创建一个QApplication对象\" class=\"headerlink\" title=\"创建一个QApplication对象\"></a>创建一个QApplication对象</h4><p>每一个PyQt5程序都需要有一个QApplication对象。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">app = <span class=\"hljs-constructor\">QApplication(<span class=\"hljs-params\">sys</span>.<span class=\"hljs-params\">argv</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"创建一个QWidget对象\"><a href=\"#创建一个QWidget对象\" class=\"headerlink\" title=\"创建一个QWidget对象\"></a>创建一个QWidget对象</h4><p>不为控件指定一个父对象，那么该控件就会被当作窗口处理</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">window</span> = QWidget()<br><span class=\"hljs-built_in\">window</span>.<span class=\"hljs-keyword\">show</span>()<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"进入主循环\"><a href=\"#进入主循环\" class=\"headerlink\" title=\"进入主循环\"></a>进入主循环</h4><p>进入程序主循环，事件处理从本行代码开始。主循环接收事件消息并将其分发给程序的各个控件。</p>\n<p>使用<code>sys.exit()</code>方法退出可以确保程序完整的结束，若程序运行成功，<code>exec_()</code>的返回值为0，否则为非0。（与底层使用C++有关）</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sys.<span class=\"hljs-keyword\">exit</span>(app.exec_())<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"布局管理\"><a href=\"#布局管理\" class=\"headerlink\" title=\"布局管理\"></a>布局管理</h2><h3 id=\"绝对布局\"><a href=\"#绝对布局\" class=\"headerlink\" title=\"绝对布局\"></a>绝对布局</h3><h3 id=\"布局管理器\"><a href=\"#布局管理器\" class=\"headerlink\" title=\"布局管理器\"></a>布局管理器</h3><p>选中需要布局的几个元素，右键在“布局”中即可选择相应布局</p>\n<p>使用布局管理器后，属性编辑器中geometry属性变为了灰色不可用，说明这些标签的位置大小已经由布局管理器接管了。</p>\n<h2 id=\"信号与槽\"><a href=\"#信号与槽\" class=\"headerlink\" title=\"信号与槽\"></a>信号与槽</h2><p>创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（信号发射时，连接的槽函数会自动执行）</p>\n<p>QObject.signal.connect()</p>\n<h2 id=\"窗口\"><a href=\"#窗口\" class=\"headerlink\" title=\"窗口\"></a>窗口</h2><h3 id=\"QMainWindow\"><a href=\"#QMainWindow\" class=\"headerlink\" title=\"QMainWindow\"></a>QMainWindow</h3><p>QMainWindow、QWidget、QDialog三个类都可以创建窗口。其中主窗口包含菜单栏等等，主窗口继承自（QWidget）</p>\n<p>将按钮button的clicked信号与closeWin槽函数关联起来</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">self</span>.button = QPushButton(<span class=\"hljs-string\">'关闭'</span>)<br><span class=\"hljs-keyword\">self</span>.button.clicked.connect(<span class=\"hljs-keyword\">self</span>.closeWin)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QWidget\"><a href=\"#QWidget\" class=\"headerlink\" title=\"QWidget\"></a>QWidget</h3><p>基础窗口控件QWidget类是所有用户界面对象的基类，所有窗口和控件都直接或间接继承自QWidget</p>\n<h3 id=\"QLabel\"><a href=\"#QLabel\" class=\"headerlink\" title=\"QLabel\"></a>QLabel</h3><h2 id=\"按钮\"><a href=\"#按钮\" class=\"headerlink\" title=\"按钮\"></a>按钮</h2><p>按钮的基类是QAbstractButton，提供了按钮的通用性功能</p>\n<h2 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h2><p>对话框的基类是QDialog，主要子类有QMessageBox、QFileDialog、QFontDialog、QInputDialog</p>\n<h3 id=\"QMessageBox\"><a href=\"#QMessageBox\" class=\"headerlink\" title=\"QMessageBox\"></a>QMessageBox</h3><p>弹出提示信息，各参数如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>information(QWidget, title, text, buttons, defaultButton)<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>warning<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>question<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>critical<span class=\"hljs-literal\">()</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QMessageBox</span>.</span></span>about<span class=\"hljs-literal\">()</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\">QMessageBox.information(self, <span class=\"hljs-string\">\"标题\"</span>, <span class=\"hljs-string\">\"关于对话框\"</span>, QMessageBox.<span class=\"hljs-keyword\">Yes</span> | QMessageBox.<span class=\"hljs-keyword\">No</span>, QMessageBox.<span class=\"hljs-keyword\">Yes</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QInputDialog\"><a href=\"#QInputDialog\" class=\"headerlink\" title=\"QInputDialog\"></a>QInputDialog</h3><p>该标准对话框可以收集控件输入的信息</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-keyword\">self</span>.btn2 = QPushButton(<span class=\"hljs-string\">\"获得字符串\"</span>)<br><span class=\"hljs-keyword\">self</span>.btn2.clicked.connect(<span class=\"hljs-keyword\">self</span>.getIext)<br><span class=\"hljs-keyword\">self</span>.le2 = QLineEdit()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">def get<span class=\"hljs-constructor\">Iext(<span class=\"hljs-params\">self</span>)</span>:\t<br>\ttext, ok = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QInputDialog</span>.</span></span>get<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">self</span>, 'Text Input Dialog', '输入姓名:')</span><br>\t<span class=\"hljs-keyword\">if</span> ok:<br>\t\tself.le2.set<span class=\"hljs-constructor\">Text(<span class=\"hljs-params\">str</span>(<span class=\"hljs-params\">text</span>)</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"QFileDialog\"><a href=\"#QFileDialog\" class=\"headerlink\" title=\"QFileDialog\"></a>QFileDialog</h3><p>QFileDialog是用于打开和保存文件的标准对话框</p>\n<p>主要方法如下</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">QFileDialog</span>.</span></span>get<span class=\"hljs-constructor\">OpenFileName(父组件, 标题, 默认打开目录, 文件拓展名过滤器)</span><br></code></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">f = QFileDialog.getOpenFileName()<br>print(f)<br>########################<br>(<span class=\"hljs-string\">'C:/Users/lenovo/Desktop/pyqt/t1.ui'</span>, <span class=\"hljs-string\">'All Files (*)'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"绘图\"><a href=\"#绘图\" class=\"headerlink\" title=\"绘图\"></a>绘图</h2><p>主要可以通过QPainter、QPen与QBrush等三个类进行绘图</p>\n<h3 id=\"QPainter\"><a href=\"#QPainter\" class=\"headerlink\" title=\"QPainter\"></a>QPainter</h3><p>绘制方法在QPainter对象的begin()和end()之间。</p>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><p>GUI中部分程序十分耗时可能会造成卡顿，这时候就需要使用多线程技术。PyQt中主要涉及三个内容，一个是使用计时器模块QTimer；一种是使用多线程模块QThread，还有使用事件处理的功能</p>\n<h3 id=\"QTimer\"><a href=\"#QTimer\" class=\"headerlink\" title=\"QTimer\"></a>QTimer</h3><h3 id=\"QThread\"><a href=\"#QThread\" class=\"headerlink\" title=\"QThread\"></a>QThread</h3><p>PyQt线程使用非常简单，建立一个自定义的类（继承自QThread），并实现其run()方法</p>\n<h2 id=\"网页交互\"><a href=\"#网页交互\" class=\"headerlink\" title=\"网页交互\"></a>网页交互</h2><p>PyQt5使用PyQt5.QtWebEngineWidgets中的QWebEngineView控件来展示HTML页面</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainWindow</span>(<span class=\"hljs-title\">QMainWindow</span>):</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>    <span class=\"hljs-keyword\">super</span>(QMainWindow, <span class=\"hljs-keyword\">self</span>).__init_<span class=\"hljs-number\">_</span>()<br>    <span class=\"hljs-keyword\">self</span>.setWindowTitle(<span class=\"hljs-string\">'打开外部网页例子'</span>)<br>    <span class=\"hljs-keyword\">self</span>.setGeometry(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">1355</span>, <span class=\"hljs-number\">730</span>)<br>    <span class=\"hljs-keyword\">self</span>.browser = QWebEngineView()<br>    <span class=\"hljs-comment\"># 加载外部页面</span><br>    <span class=\"hljs-keyword\">self</span>.browser.load(QUrl(<span class=\"hljs-string\">'http://ziyedy.top'</span>))<br>    <span class=\"hljs-keyword\">self</span>.setCentralWidget(<span class=\"hljs-keyword\">self</span>.browser)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"信号与槽","date":"2020-08-12T08:18:07.000Z","fileName":"pyqt5-signals-and-slots","_content":"\n## 信号与槽\n\n创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（**信号发射时，连接的槽函数会自动执行**）\n\nQObject.signal.connect()\n\n\n","source":"_posts/编程相关/Python/PyQt5/信号与槽.md","raw":"---\ntitle: 信号与槽\ndate: 2020-08-12 16:18:07\ntags:\n\t- Python\n\t- GUI\ncategories:\n\t- 编程相关\n\t- Python\n\t- PyQt5\nfileName: pyqt5-signals-and-slots\n---\n\n## 信号与槽\n\n创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（**信号发射时，连接的槽函数会自动执行**）\n\nQObject.signal.connect()\n\n\n","slug":"编程相关/Python/PyQt5/信号与槽","published":1,"updated":"2021-01-11T04:32:26.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moee00farwjs28r0cs9c","content":"<h2 id=\"信号与槽\"><a href=\"#信号与槽\" class=\"headerlink\" title=\"信号与槽\"></a>信号与槽</h2><p>创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（<strong>信号发射时，连接的槽函数会自动执行</strong>）</p>\n<p>QObject.signal.connect()</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"信号与槽\"><a href=\"#信号与槽\" class=\"headerlink\" title=\"信号与槽\"></a>信号与槽</h2><p>创建事件循环后，通过建立信号与槽的连接就可以实现对象之间的通信（<strong>信号发射时，连接的槽函数会自动执行</strong>）</p>\n<p>QObject.signal.connect()</p>\n"},{"title":"Python函数相关内容","date":"2020-05-08T07:20:53.000Z","fileName":"python2","_content":"\n### Python函数的基本特性\n\n#### Python函数为对象\n\nPython中的函数都是对象，这也使得其具备了一些对象的通用特性。\n\n* 可作为**值传递**，赋值给另一个对象；\n\n* 可以作为元素添加到集合对象中；\n\n* 可以作为参数传递给其他函数；\n\n* 可以作为函数的返回值。\n\n1、函数赋值给变量，通过变量可以调用。且传递方法为**值传递**，这也就意味着即使删除函数f1，temp仍然能够正常运行。\n\n```\ndef f1(str):\n  return len(str)\ntemp=f1\t# 函数赋值给对象\ndel f1\t# 删除函数\nprint temp('hello')\t# 仍然正常调用\n```\n\n2、作为元素添加进入容器。\n\n```\ndef f2(str1,str2):\n   return str1+str2\na=[]\na.append(f1)\na.append(f2)\nprint a[0]('hello')\nprint a[1]('hello','world')\n```\n\n3、作为函数参数\n\n```\ndef func(f,str):\n  return f(str)\nprint func(f1,'hello')\n```\n\n4、作为函数返回值\n\n```\ndef mutiply(x,y):\n  reutrn x*y\ndef sub(x,y):return x-y\ndef func2(i):if i==1: return mutiplyelse:return sub\ntemp=func2(2)\nprint temp(2,4)\n```\n\n**Python函数是最高级别的对象，而不仅仅为一小段代码**。一个函数是一个被其自己定义和执行的对象，参数是一种“成员数据”，所以它们的状态和其他对象一样，会随着每一次调用而改变。\n\n#### 嵌套与闭包\n\n1、函数的嵌套\n\n```\ndef fun1():\n    def fun2():\n        def fun3():\n            print(\"Hello world!\")\n        return fun3\n    return fun2\nfun1()()()\n##########################################\nHello world!\n```\n\n2、函数的闭包\n\n**闭包函数就是函数可以读取到与自己不是一个作用域的局部变量**\n\n1. 必须有一个内嵌函数\n2. 内嵌函数必须引用外部函数中的变量\n3. 外部函数的返回值必须是内嵌函数\n\n```\ndef fun1(x):\n    def fun2(y):\n        print(x+y)\n    return fun2\nfun1(2)(3)\n#############################\n5\n```\n\n**装饰器，匿名函数，map函数等都是函数的变体，都是通过这些基本特性来实现的**\n\n**装饰器**：使用函数的嵌套，外层函数传进来的参数为一个函数对象，里层函数对传进来的函数进行加工处理后再返回处理的函数\n\n\n\n### 函数的一些传参方法\n\n#### 关键字传参\n\n可以增强代码可读性，每次传参都需要指定形参名，以下就是关键字传参。\n\n```\ndef func(a,b):\n\tpass\nfunc(a=1,b=2)\n```\n\n\n\n**Tip：** * 代表之后所有参数传参时必须使用关键字传参（混合形式传参）\n\n```\ndef func(p1,*,p2,p3):\n    print(p2+p3)\nfunc(1,p2=2,p3=3)\n\n# 输出\n5\n```\n\n以下代码中p2、p3不使用关键字传参即会报错。\n\n```\ndef func(p1,*,p2,p3):\n    print(p2+p3)\nfunc(1,2,3)\n\n# 输出（报错）\nTypeError                                 Traceback (most recent call last)\n<ipython-input-17-83e9b0e5315e> in <module>\n      1 def func(p1,*,p2,p3):\n      2     print(p2+p3)\n----> 3 func(1,2,3)\n\nTypeError: func() takes 1 positional argument but 3 were given\n```\n\n#### 列表传参\n\n将列表传入函数，只要在列表名前面加上*即可传入\n\n```\ndef func(a, b):\n    print(a+b)\nl = [1, 2]\nfunc(*l)\n\n# 输出\n3\n```\n\n#### 字典传参\n\n将字典你传入函数，只需要在字典名前面加上**即可，这种方法可以先将参数写为json格式之后进行传入。\n\n```\ndef func(a,b,c):\n    print(a+b+c)\nparam = {\"a\":1,\"b\":2,\"c\":3}\nfunc(**param)\n\n# 输出\n6\n```\n\n#### 默认参数\n\n很好理解，在定义函数时指定该参数的值即可。\n\n```\n# 参数a默认为1\ndef func(a=1):\n\tpass\n```\n\n### 可变参数（重要特性）\n\n在定义函数时，不限定参数的个数，而使用*args和**kwargs表示。*args为元组，**kwargs为字典。\n\n*args将参数打包为tuple给函数体使用，实例如下：\n\n```\ndef func(a, *args):\n    print(a)\n    print(type(a))\n    print(args)\n    print(type(args))\nfunc('gg', 1, 2, 'gg3')\n\n######################################\ngg\n<class 'str'>\n(1, 2, 'gg3')\n<class 'tuple'>\n```\n\n**kwargs将参数打包为dict给函数使用，调用时实参为key=value的形式。\n\n```\ndef func(a, **kwargs):\n    print(a)\n    print(type(a))\n    print(kwargs)\n    print(type(kwargs))\nfunc('gg', b=1, c=1)\n\n############################################\ngg\n<class 'str'>\n{'b': 1, 'c': 1}\n<class 'dict'>\n```\n\n#### 参数组合\n\n当多种参数组合使用时，参数定义顺序为必选参数、默认参数、可变参数。\n\n\n\n### 高阶函数\n\n可以简单理解为调用函数的函数。\n\n#### `lambda`表达式\n\nlambda是python中的一种表达式，创建内嵌的简单**匿名函数**。可以避免取函数名\n\n```\nf = lambda i:i**2\nf(2)\n# 4\n```\n\n\n\n#### filter函数\n\nfilter(func, seq) \t返回seq中所有满足func结果为真的对象，可以简单理解为一个过滤器。\n\n```\n# 找到所有奇数\nl = range(10)\na = filter(lambda n: n%2!=0, l)\nprint(list(a))\n# [1, 3, 5, 7, 9]\n```\n\n\n\n#### map函数\n\nmap (func, seq) 返回对seq执行func后的值，可以简单理解为一个映射。\n\n```\n# 找到数的所有平方\nl = range(5)\na = map(lambda n: n**2, l)\nprint(list(a))\n# [0, 1, 4, 9, 16]\n```","source":"_posts/编程相关/Python/Python基础/2、Python函数相关内容.md","raw":"---\ntitle: Python函数相关内容\ndate: 2020-05-08 15:20:53\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python2\n---\n\n### Python函数的基本特性\n\n#### Python函数为对象\n\nPython中的函数都是对象，这也使得其具备了一些对象的通用特性。\n\n* 可作为**值传递**，赋值给另一个对象；\n\n* 可以作为元素添加到集合对象中；\n\n* 可以作为参数传递给其他函数；\n\n* 可以作为函数的返回值。\n\n1、函数赋值给变量，通过变量可以调用。且传递方法为**值传递**，这也就意味着即使删除函数f1，temp仍然能够正常运行。\n\n```\ndef f1(str):\n  return len(str)\ntemp=f1\t# 函数赋值给对象\ndel f1\t# 删除函数\nprint temp('hello')\t# 仍然正常调用\n```\n\n2、作为元素添加进入容器。\n\n```\ndef f2(str1,str2):\n   return str1+str2\na=[]\na.append(f1)\na.append(f2)\nprint a[0]('hello')\nprint a[1]('hello','world')\n```\n\n3、作为函数参数\n\n```\ndef func(f,str):\n  return f(str)\nprint func(f1,'hello')\n```\n\n4、作为函数返回值\n\n```\ndef mutiply(x,y):\n  reutrn x*y\ndef sub(x,y):return x-y\ndef func2(i):if i==1: return mutiplyelse:return sub\ntemp=func2(2)\nprint temp(2,4)\n```\n\n**Python函数是最高级别的对象，而不仅仅为一小段代码**。一个函数是一个被其自己定义和执行的对象，参数是一种“成员数据”，所以它们的状态和其他对象一样，会随着每一次调用而改变。\n\n#### 嵌套与闭包\n\n1、函数的嵌套\n\n```\ndef fun1():\n    def fun2():\n        def fun3():\n            print(\"Hello world!\")\n        return fun3\n    return fun2\nfun1()()()\n##########################################\nHello world!\n```\n\n2、函数的闭包\n\n**闭包函数就是函数可以读取到与自己不是一个作用域的局部变量**\n\n1. 必须有一个内嵌函数\n2. 内嵌函数必须引用外部函数中的变量\n3. 外部函数的返回值必须是内嵌函数\n\n```\ndef fun1(x):\n    def fun2(y):\n        print(x+y)\n    return fun2\nfun1(2)(3)\n#############################\n5\n```\n\n**装饰器，匿名函数，map函数等都是函数的变体，都是通过这些基本特性来实现的**\n\n**装饰器**：使用函数的嵌套，外层函数传进来的参数为一个函数对象，里层函数对传进来的函数进行加工处理后再返回处理的函数\n\n\n\n### 函数的一些传参方法\n\n#### 关键字传参\n\n可以增强代码可读性，每次传参都需要指定形参名，以下就是关键字传参。\n\n```\ndef func(a,b):\n\tpass\nfunc(a=1,b=2)\n```\n\n\n\n**Tip：** * 代表之后所有参数传参时必须使用关键字传参（混合形式传参）\n\n```\ndef func(p1,*,p2,p3):\n    print(p2+p3)\nfunc(1,p2=2,p3=3)\n\n# 输出\n5\n```\n\n以下代码中p2、p3不使用关键字传参即会报错。\n\n```\ndef func(p1,*,p2,p3):\n    print(p2+p3)\nfunc(1,2,3)\n\n# 输出（报错）\nTypeError                                 Traceback (most recent call last)\n<ipython-input-17-83e9b0e5315e> in <module>\n      1 def func(p1,*,p2,p3):\n      2     print(p2+p3)\n----> 3 func(1,2,3)\n\nTypeError: func() takes 1 positional argument but 3 were given\n```\n\n#### 列表传参\n\n将列表传入函数，只要在列表名前面加上*即可传入\n\n```\ndef func(a, b):\n    print(a+b)\nl = [1, 2]\nfunc(*l)\n\n# 输出\n3\n```\n\n#### 字典传参\n\n将字典你传入函数，只需要在字典名前面加上**即可，这种方法可以先将参数写为json格式之后进行传入。\n\n```\ndef func(a,b,c):\n    print(a+b+c)\nparam = {\"a\":1,\"b\":2,\"c\":3}\nfunc(**param)\n\n# 输出\n6\n```\n\n#### 默认参数\n\n很好理解，在定义函数时指定该参数的值即可。\n\n```\n# 参数a默认为1\ndef func(a=1):\n\tpass\n```\n\n### 可变参数（重要特性）\n\n在定义函数时，不限定参数的个数，而使用*args和**kwargs表示。*args为元组，**kwargs为字典。\n\n*args将参数打包为tuple给函数体使用，实例如下：\n\n```\ndef func(a, *args):\n    print(a)\n    print(type(a))\n    print(args)\n    print(type(args))\nfunc('gg', 1, 2, 'gg3')\n\n######################################\ngg\n<class 'str'>\n(1, 2, 'gg3')\n<class 'tuple'>\n```\n\n**kwargs将参数打包为dict给函数使用，调用时实参为key=value的形式。\n\n```\ndef func(a, **kwargs):\n    print(a)\n    print(type(a))\n    print(kwargs)\n    print(type(kwargs))\nfunc('gg', b=1, c=1)\n\n############################################\ngg\n<class 'str'>\n{'b': 1, 'c': 1}\n<class 'dict'>\n```\n\n#### 参数组合\n\n当多种参数组合使用时，参数定义顺序为必选参数、默认参数、可变参数。\n\n\n\n### 高阶函数\n\n可以简单理解为调用函数的函数。\n\n#### `lambda`表达式\n\nlambda是python中的一种表达式，创建内嵌的简单**匿名函数**。可以避免取函数名\n\n```\nf = lambda i:i**2\nf(2)\n# 4\n```\n\n\n\n#### filter函数\n\nfilter(func, seq) \t返回seq中所有满足func结果为真的对象，可以简单理解为一个过滤器。\n\n```\n# 找到所有奇数\nl = range(10)\na = filter(lambda n: n%2!=0, l)\nprint(list(a))\n# [1, 3, 5, 7, 9]\n```\n\n\n\n#### map函数\n\nmap (func, seq) 返回对seq执行func后的值，可以简单理解为一个映射。\n\n```\n# 找到数的所有平方\nl = range(5)\na = map(lambda n: n**2, l)\nprint(list(a))\n# [0, 1, 4, 9, 16]\n```","slug":"编程相关/Python/Python基础/2、Python函数相关内容","published":1,"updated":"2021-01-11T04:34:16.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moef00fdrwjsffyj4w8x","content":"<h3 id=\"Python函数的基本特性\"><a href=\"#Python函数的基本特性\" class=\"headerlink\" title=\"Python函数的基本特性\"></a>Python函数的基本特性</h3><h4 id=\"Python函数为对象\"><a href=\"#Python函数为对象\" class=\"headerlink\" title=\"Python函数为对象\"></a>Python函数为对象</h4><p>Python中的函数都是对象，这也使得其具备了一些对象的通用特性。</p>\n<ul>\n<li><p>可作为<strong>值传递</strong>，赋值给另一个对象；</p>\n</li>\n<li><p>可以作为元素添加到集合对象中；</p>\n</li>\n<li><p>可以作为参数传递给其他函数；</p>\n</li>\n<li><p>可以作为函数的返回值。</p>\n</li>\n</ul>\n<p>1、函数赋值给变量，通过变量可以调用。且传递方法为<strong>值传递</strong>，这也就意味着即使删除函数f1，temp仍然能够正常运行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">(str)</span>:</span><br>  <span class=\"hljs-keyword\">return</span> len(str)<br>temp=f1\t<span class=\"hljs-comment\"># 函数赋值给对象</span><br><span class=\"hljs-keyword\">del</span> f1\t<span class=\"hljs-comment\"># 删除函数</span><br><span class=\"hljs-keyword\">print</span> temp(<span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\"># 仍然正常调用</span><br></code></pre></td></tr></table></figure>\n\n<p>2、作为元素添加进入容器。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">def f2(str1,str2):<br>   return str1+str2<br>a=[]<br>a.append(f1)<br>a.append(f2)<br>print a[<span class=\"hljs-string\">0</span>](<span class=\"hljs-link\">'hello'</span>)<br>print a[<span class=\"hljs-string\">1</span>](<span class=\"hljs-link\">'hello','world'</span>)<br></code></pre></td></tr></table></figure>\n\n<p>3、作为函数参数</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f,str)</span>:</span><br>  <span class=\"hljs-keyword\">return</span> f(str)<br>print <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f1,<span class=\"hljs-string\">'hello'</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n<p>4、作为函数返回值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mutiply</span><span class=\"hljs-params\">(x,y)</span></span>:<br>  reutrn x*y<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(x,y)</span></span><span class=\"hljs-symbol\">:return</span> x-y<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(i)</span></span><span class=\"hljs-symbol\">:if</span> i==<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-symbol\">mutiplyelse:</span><span class=\"hljs-keyword\">return</span> sub<br>temp=func2(<span class=\"hljs-number\">2</span>)<br>print temp(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Python函数是最高级别的对象，而不仅仅为一小段代码</strong>。一个函数是一个被其自己定义和执行的对象，参数是一种“成员数据”，所以它们的状态和其他对象一样，会随着每一次调用而改变。</p>\n<h4 id=\"嵌套与闭包\"><a href=\"#嵌套与闭包\" class=\"headerlink\" title=\"嵌套与闭包\"></a>嵌套与闭包</h4><p>1、函数的嵌套</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def fun1():<br>    def fun2():<br>        def fun3():<br>            print(<span class=\"hljs-string\">\"Hello world!\"</span>)<br>        return fun3<br>    return fun2<br>fun1()()()<br>##########################################<br>Hello world!<br></code></pre></td></tr></table></figure>\n\n<p>2、函数的闭包</p>\n<p><strong>闭包函数就是函数可以读取到与自己不是一个作用域的局部变量</strong></p>\n<ol>\n<li>必须有一个内嵌函数</li>\n<li>内嵌函数必须引用外部函数中的变量</li>\n<li>外部函数的返回值必须是内嵌函数</li>\n</ol>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def fun1(x):<br>    def fun2(y):<br>        print(x+y)<br>    return fun2<br>fun1(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)<br>#############################<br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>装饰器，匿名函数，map函数等都是函数的变体，都是通过这些基本特性来实现的</strong></p>\n<p><strong>装饰器</strong>：使用函数的嵌套，外层函数传进来的参数为一个函数对象，里层函数对传进来的函数进行加工处理后再返回处理的函数</p>\n<h3 id=\"函数的一些传参方法\"><a href=\"#函数的一些传参方法\" class=\"headerlink\" title=\"函数的一些传参方法\"></a>函数的一些传参方法</h3><h4 id=\"关键字传参\"><a href=\"#关键字传参\" class=\"headerlink\" title=\"关键字传参\"></a>关键字传参</h4><p>可以增强代码可读性，每次传参都需要指定形参名，以下就是关键字传参。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a,b)</span>:</span><br>\tpass<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a=<span class=\"hljs-number\">1</span>,b=<span class=\"hljs-number\">2</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Tip：</strong> * 代表之后所有参数传参时必须使用关键字传参（混合形式传参）</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">def</span> func(<span class=\"hljs-built_in\">p1</span>,*,<span class=\"hljs-built_in\">p2</span>,<span class=\"hljs-built_in\">p3</span>):<br>    print(<span class=\"hljs-built_in\">p2</span>+<span class=\"hljs-built_in\">p3</span>)<br><span class=\"hljs-symbol\">func</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">p2</span><span class=\"hljs-number\">=2</span>,<span class=\"hljs-built_in\">p3</span><span class=\"hljs-number\">=3</span>)<br><br># 输出<br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<p>以下代码中p2、p3不使用关键字传参即会报错。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(p1,*,p2,p3)</span>:</span><br>    print(p2+p3)<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)</span></span><br><br><span class=\"hljs-meta\"># 输出（报错）</span><br>TypeError                                 Traceback (most recent <span class=\"hljs-built_in\">call</span> last)<br>&lt;ipython-input<span class=\"hljs-number\">-17</span><span class=\"hljs-number\">-83e9</span>b0e5315e&gt; <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>      <span class=\"hljs-number\">1</span> def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(p1,*,p2,p3)</span>:</span><br>      <span class=\"hljs-number\">2</span>     print(p2+p3)<br>----&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)</span></span><br><br>TypeError: <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">takes</span> 1 <span class=\"hljs-title\">positional</span> <span class=\"hljs-title\">argument</span> <span class=\"hljs-title\">but</span> 3 <span class=\"hljs-title\">were</span> <span class=\"hljs-title\">given</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"列表传参\"><a href=\"#列表传参\" class=\"headerlink\" title=\"列表传参\"></a>列表传参</h4><p>将列表传入函数，只要在列表名前面加上*即可传入</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a, b)</span>:</span><br>    print(a+b)<br>l = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(*l)</span></span><br><br><span class=\"hljs-meta\"># 输出</span><br><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"字典传参\"><a href=\"#字典传参\" class=\"headerlink\" title=\"字典传参\"></a>字典传参</h4><p>将字典你传入函数，只需要在字典名前面加上**即可，这种方法可以先将参数写为json格式之后进行传入。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a,b,<span class=\"hljs-built_in\">c</span>)</span></span>:<br>    <span class=\"hljs-built_in\">print</span>(a+b+<span class=\"hljs-built_in\">c</span>)<br>param = &#123;<span class=\"hljs-string\">\"a\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"b\"</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"c\"</span>:<span class=\"hljs-number\">3</span>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(**param)</span></span><br><br># 输出<br><span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><p>很好理解，在定义函数时指定该参数的值即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 参数a默认为1</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(a=<span class=\"hljs-number\">1</span>)</span>:</span><br>\t<span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数（重要特性）\"><a href=\"#可变参数（重要特性）\" class=\"headerlink\" title=\"可变参数（重要特性）\"></a>可变参数（重要特性）</h3><p>在定义函数时，不限定参数的个数，而使用<em>args和*</em>kwargs表示。<em>args为元组，*</em>kwargs为字典。</p>\n<p>*args将参数打包为tuple给函数体使用，实例如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def func(a, *args):<br>    print(a)<br>    print(type(a))<br>    print(args)<br>    print(type(args))<br>func(<span class=\"hljs-string\">'gg'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'gg3'</span>)<br><br>######################################<br>gg<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>&gt;<br>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'gg3'</span>)<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'tuple'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>**kwargs将参数打包为dict给函数使用，调用时实参为key=value的形式。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def func(a, **kwargs):<br>    print(a)<br>    print(type(a))<br>    print(kwargs)<br>    print(type(kwargs))<br>func(<span class=\"hljs-string\">'gg'</span>, b=<span class=\"hljs-number\">1</span>, c=<span class=\"hljs-number\">1</span>)<br><br>############################################<br>gg<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>&gt;<br>&#123;<span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-number\">1</span>&#125;<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'dict'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数组合\"><a href=\"#参数组合\" class=\"headerlink\" title=\"参数组合\"></a>参数组合</h4><p>当多种参数组合使用时，参数定义顺序为必选参数、默认参数、可变参数。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>可以简单理解为调用函数的函数。</p>\n<h4 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a><code>lambda</code>表达式</h4><p>lambda是python中的一种表达式，创建内嵌的简单<strong>匿名函数</strong>。可以避免取函数名</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">f = lambda i:i**<span class=\"hljs-number\">2</span><br>f(<span class=\"hljs-number\">2</span>)<br># <span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"filter函数\"><a href=\"#filter函数\" class=\"headerlink\" title=\"filter函数\"></a>filter函数</h4><p>filter(func, seq)     返回seq中所有满足func结果为真的对象，可以简单理解为一个过滤器。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 找到所有奇数<br>l = range(<span class=\"hljs-number\">10</span>)<br>a = filter(lambda n: n%<span class=\"hljs-number\">2</span>!=<span class=\"hljs-number\">0</span>, l)<br>print(list(a))<br># [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"map函数\"><a href=\"#map函数\" class=\"headerlink\" title=\"map函数\"></a>map函数</h4><p>map (func, seq) 返回对seq执行func后的值，可以简单理解为一个映射。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 找到数的所有平方<br>l = range(<span class=\"hljs-number\">5</span>)<br>a = map(lambda n: n**<span class=\"hljs-number\">2</span>, l)<br>print(list(a))<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>]<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python函数的基本特性\"><a href=\"#Python函数的基本特性\" class=\"headerlink\" title=\"Python函数的基本特性\"></a>Python函数的基本特性</h3><h4 id=\"Python函数为对象\"><a href=\"#Python函数为对象\" class=\"headerlink\" title=\"Python函数为对象\"></a>Python函数为对象</h4><p>Python中的函数都是对象，这也使得其具备了一些对象的通用特性。</p>\n<ul>\n<li><p>可作为<strong>值传递</strong>，赋值给另一个对象；</p>\n</li>\n<li><p>可以作为元素添加到集合对象中；</p>\n</li>\n<li><p>可以作为参数传递给其他函数；</p>\n</li>\n<li><p>可以作为函数的返回值。</p>\n</li>\n</ul>\n<p>1、函数赋值给变量，通过变量可以调用。且传递方法为<strong>值传递</strong>，这也就意味着即使删除函数f1，temp仍然能够正常运行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f1</span><span class=\"hljs-params\">(str)</span>:</span><br>  <span class=\"hljs-keyword\">return</span> len(str)<br>temp=f1\t<span class=\"hljs-comment\"># 函数赋值给对象</span><br><span class=\"hljs-keyword\">del</span> f1\t<span class=\"hljs-comment\"># 删除函数</span><br><span class=\"hljs-keyword\">print</span> temp(<span class=\"hljs-string\">'hello'</span>)\t<span class=\"hljs-comment\"># 仍然正常调用</span><br></code></pre></td></tr></table></figure>\n\n<p>2、作为元素添加进入容器。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">def f2(str1,str2):<br>   return str1+str2<br>a=[]<br>a.append(f1)<br>a.append(f2)<br>print a[<span class=\"hljs-string\">0</span>](<span class=\"hljs-link\">'hello'</span>)<br>print a[<span class=\"hljs-string\">1</span>](<span class=\"hljs-link\">'hello','world'</span>)<br></code></pre></td></tr></table></figure>\n\n<p>3、作为函数参数</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f,str)</span>:</span><br>  <span class=\"hljs-keyword\">return</span> f(str)<br>print <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(f1,<span class=\"hljs-string\">'hello'</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n<p>4、作为函数返回值</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mutiply</span><span class=\"hljs-params\">(x,y)</span></span>:<br>  reutrn x*y<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">sub</span><span class=\"hljs-params\">(x,y)</span></span><span class=\"hljs-symbol\">:return</span> x-y<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">(i)</span></span><span class=\"hljs-symbol\">:if</span> i==<span class=\"hljs-number\">1</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-symbol\">mutiplyelse:</span><span class=\"hljs-keyword\">return</span> sub<br>temp=func2(<span class=\"hljs-number\">2</span>)<br>print temp(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>Python函数是最高级别的对象，而不仅仅为一小段代码</strong>。一个函数是一个被其自己定义和执行的对象，参数是一种“成员数据”，所以它们的状态和其他对象一样，会随着每一次调用而改变。</p>\n<h4 id=\"嵌套与闭包\"><a href=\"#嵌套与闭包\" class=\"headerlink\" title=\"嵌套与闭包\"></a>嵌套与闭包</h4><p>1、函数的嵌套</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def fun1():<br>    def fun2():<br>        def fun3():<br>            print(<span class=\"hljs-string\">\"Hello world!\"</span>)<br>        return fun3<br>    return fun2<br>fun1()()()<br>##########################################<br>Hello world!<br></code></pre></td></tr></table></figure>\n\n<p>2、函数的闭包</p>\n<p><strong>闭包函数就是函数可以读取到与自己不是一个作用域的局部变量</strong></p>\n<ol>\n<li>必须有一个内嵌函数</li>\n<li>内嵌函数必须引用外部函数中的变量</li>\n<li>外部函数的返回值必须是内嵌函数</li>\n</ol>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def fun1(x):<br>    def fun2(y):<br>        print(x+y)<br>    return fun2<br>fun1(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)<br>#############################<br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>装饰器，匿名函数，map函数等都是函数的变体，都是通过这些基本特性来实现的</strong></p>\n<p><strong>装饰器</strong>：使用函数的嵌套，外层函数传进来的参数为一个函数对象，里层函数对传进来的函数进行加工处理后再返回处理的函数</p>\n<h3 id=\"函数的一些传参方法\"><a href=\"#函数的一些传参方法\" class=\"headerlink\" title=\"函数的一些传参方法\"></a>函数的一些传参方法</h3><h4 id=\"关键字传参\"><a href=\"#关键字传参\" class=\"headerlink\" title=\"关键字传参\"></a>关键字传参</h4><p>可以增强代码可读性，每次传参都需要指定形参名，以下就是关键字传参。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a,b)</span>:</span><br>\tpass<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a=<span class=\"hljs-number\">1</span>,b=<span class=\"hljs-number\">2</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>Tip：</strong> * 代表之后所有参数传参时必须使用关键字传参（混合形式传参）</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">def</span> func(<span class=\"hljs-built_in\">p1</span>,*,<span class=\"hljs-built_in\">p2</span>,<span class=\"hljs-built_in\">p3</span>):<br>    print(<span class=\"hljs-built_in\">p2</span>+<span class=\"hljs-built_in\">p3</span>)<br><span class=\"hljs-symbol\">func</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-built_in\">p2</span><span class=\"hljs-number\">=2</span>,<span class=\"hljs-built_in\">p3</span><span class=\"hljs-number\">=3</span>)<br><br># 输出<br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<p>以下代码中p2、p3不使用关键字传参即会报错。</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(p1,*,p2,p3)</span>:</span><br>    print(p2+p3)<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)</span></span><br><br><span class=\"hljs-meta\"># 输出（报错）</span><br>TypeError                                 Traceback (most recent <span class=\"hljs-built_in\">call</span> last)<br>&lt;ipython-input<span class=\"hljs-number\">-17</span><span class=\"hljs-number\">-83e9</span>b0e5315e&gt; <span class=\"hljs-keyword\">in</span> &lt;module&gt;<br>      <span class=\"hljs-number\">1</span> def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(p1,*,p2,p3)</span>:</span><br>      <span class=\"hljs-number\">2</span>     print(p2+p3)<br>----&gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>)</span></span><br><br>TypeError: <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">takes</span> 1 <span class=\"hljs-title\">positional</span> <span class=\"hljs-title\">argument</span> <span class=\"hljs-title\">but</span> 3 <span class=\"hljs-title\">were</span> <span class=\"hljs-title\">given</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"列表传参\"><a href=\"#列表传参\" class=\"headerlink\" title=\"列表传参\"></a>列表传参</h4><p>将列表传入函数，只要在列表名前面加上*即可传入</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs autoit\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a, b)</span>:</span><br>    print(a+b)<br>l = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(*l)</span></span><br><br><span class=\"hljs-meta\"># 输出</span><br><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"字典传参\"><a href=\"#字典传参\" class=\"headerlink\" title=\"字典传参\"></a>字典传参</h4><p>将字典你传入函数，只需要在字典名前面加上**即可，这种方法可以先将参数写为json格式之后进行传入。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs swift\">def <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(a,b,<span class=\"hljs-built_in\">c</span>)</span></span>:<br>    <span class=\"hljs-built_in\">print</span>(a+b+<span class=\"hljs-built_in\">c</span>)<br>param = &#123;<span class=\"hljs-string\">\"a\"</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">\"b\"</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">\"c\"</span>:<span class=\"hljs-number\">3</span>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(**param)</span></span><br><br># 输出<br><span class=\"hljs-number\">6</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h4><p>很好理解，在定义函数时指定该参数的值即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 参数a默认为1</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(a=<span class=\"hljs-number\">1</span>)</span>:</span><br>\t<span class=\"hljs-keyword\">pass</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数（重要特性）\"><a href=\"#可变参数（重要特性）\" class=\"headerlink\" title=\"可变参数（重要特性）\"></a>可变参数（重要特性）</h3><p>在定义函数时，不限定参数的个数，而使用<em>args和*</em>kwargs表示。<em>args为元组，*</em>kwargs为字典。</p>\n<p>*args将参数打包为tuple给函数体使用，实例如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def func(a, *args):<br>    print(a)<br>    print(type(a))<br>    print(args)<br>    print(type(args))<br>func(<span class=\"hljs-string\">'gg'</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'gg3'</span>)<br><br>######################################<br>gg<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>&gt;<br>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'gg3'</span>)<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'tuple'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>**kwargs将参数打包为dict给函数使用，调用时实参为key=value的形式。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def func(a, **kwargs):<br>    print(a)<br>    print(type(a))<br>    print(kwargs)<br>    print(type(kwargs))<br>func(<span class=\"hljs-string\">'gg'</span>, b=<span class=\"hljs-number\">1</span>, c=<span class=\"hljs-number\">1</span>)<br><br>############################################<br>gg<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'str'</span>&gt;<br>&#123;<span class=\"hljs-string\">'b'</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'c'</span>: <span class=\"hljs-number\">1</span>&#125;<br>&lt;<span class=\"hljs-keyword\">class</span> <span class=\"hljs-string\">'dict'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"参数组合\"><a href=\"#参数组合\" class=\"headerlink\" title=\"参数组合\"></a>参数组合</h4><p>当多种参数组合使用时，参数定义顺序为必选参数、默认参数、可变参数。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><p>可以简单理解为调用函数的函数。</p>\n<h4 id=\"lambda表达式\"><a href=\"#lambda表达式\" class=\"headerlink\" title=\"lambda表达式\"></a><code>lambda</code>表达式</h4><p>lambda是python中的一种表达式，创建内嵌的简单<strong>匿名函数</strong>。可以避免取函数名</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">f = lambda i:i**<span class=\"hljs-number\">2</span><br>f(<span class=\"hljs-number\">2</span>)<br># <span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"filter函数\"><a href=\"#filter函数\" class=\"headerlink\" title=\"filter函数\"></a>filter函数</h4><p>filter(func, seq)     返回seq中所有满足func结果为真的对象，可以简单理解为一个过滤器。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 找到所有奇数<br>l = range(<span class=\"hljs-number\">10</span>)<br>a = filter(lambda n: n%<span class=\"hljs-number\">2</span>!=<span class=\"hljs-number\">0</span>, l)<br>print(list(a))<br># [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"map函数\"><a href=\"#map函数\" class=\"headerlink\" title=\"map函数\"></a>map函数</h4><p>map (func, seq) 返回对seq执行func后的值，可以简单理解为一个映射。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 找到数的所有平方<br>l = range(<span class=\"hljs-number\">5</span>)<br>a = map(lambda n: n**<span class=\"hljs-number\">2</span>, l)<br>print(list(a))<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>]<br></code></pre></td></tr></table></figure>"},{"title":"Python基本数据类型","date":"2020-05-08T04:46:26.000Z","fileName":"python1","_content":"\n### 字符串\n\n1、 单双引号的应用，即字符串中包含单引号时可以使用双引号进行包含，包含双引号时使用单引号进行包含，如下：\n```\n\"a's hhh\"\n'a\"s hhh'\n```\n\n2、 字符串的一些基本操作（拼接、搜索、替换），其中**替换操作必须要将str赋给一个新的变量**\n```\nstr = str1 + str2\t# 拼接字符串（直接使用 + 进行操作）\nlen(str) # 获取长度\nstr.find(string) # 返回搜索到的第一个index，没搜索到则返回-1\nstr = str.replace('A', 'B') # A替换B\n```\n\n3、 格式化字符串（使用.format语句），使用{}占位符进行\n```\n\"{} {} gg\".format(\"huangkai\",\"is\")\n# huangkai is gg\n\n# 带索引的格式化字符串\n\"{1} {0} gg\".format(\"huangkai\",\"is\")\nis huangkai gg\n\n# f形式的格式化字符串\nstr1 = 'Curry'\nstr2 = 'James'\ncombi = f'{str1} and {str2}, NBA stars'\n\n# 使用别名\nstr3 = “gg {s1}， {s2}”。format(s1=str1, s2 str2)\n```\n\n### 列表（list）\n\n列表在内存中按照顺序存储\n\n1、 列表反转与排序\n\n```\nlist.reverse()\t# 列表反转\nlist.sort() # 升序排列\nlist.sort(reverse=True) # 降序排列\n```\n\n2、 列表常用操作\n\n```\nlist.append(new_element) # 在列表末尾添加元素\nlist.insert(index, new_element) # 在指定的index处加入一个元素，其后元素全部后移\nlist.remove(element) # 删除值为element的元素\nlist.pop(index) # 删除索引值为index的元素，无index则删除最后一个元素\nlist.clear() # 清空列表\n```\n\n4、 列表其他操作（区别于append）\n\n```\nlist.extend([e1, e2]) # 将列表追加进list（区别于append）\n```\n\n5、 **列表的复制**，想将一个列表赋值给另一个列表必须要使用.copy方法，否则修改其中一个表另一个也会变，如下：\n```\nl1 = [1,2,3,4]\nl2 = l1\nprint(id(l1))\nprint(id(l2))\n```\n运行结果可以发现l1与l2指向了同一块内存，因此改变l1，l2也会相应改变。而copy()方法会重新创建一个空列表再将原列表的元素放进去。\n```\nl2 = list.copy()\n```\n\n6、列表元素直接的对应操作，以相加为例，使用列表生成器如下。其中zip函数为将a、b两个列表中的元素一一组合。\n\n```\na = [1,2,3,4]\nb = [1,2,3,4]\nc = [i+j for i, j in zip(a,b)]\n########################################\n[2, 4, 6, 8]\n```\n\n\n\n### 字典（dict）\n\n键值对（key-value），可修改。Python中的散列值函数`hash(data)`，字典存储根据其哈希值存储。\n\n1、 创建\n```\ndic = dict.fromkeys(['school number', 'bala1', 'bala2'])\nprint(dic)\n\n# 输出\n{'school number': None, 'bala1': None, 'bala2': None}\n```\n\n2、 取值\n```\n# 直接使用key获取value\ndic[key]\n# 使用get方法（可以为不存在的key赋默认值）\ndic.get(key)\n```\n\n3、 遍历字典\n```\n# 方案1\nfor key in dic:\n\tv = dic[key]\n\t\n# 方案2（返回每一个键值对）\nfor key,value in dic.items():\n\t\n```\n\n4、 字典常用操作\n```\ndic.update(k1 = new_value1, k2 = new_value2) # 对多个键值进行更新或新增\ndic,pop(key) # 删除键值为key\ndic.popitem() # 删除最后一个键值对，并返回该键值对的tuple\ndic.clear() # 清空字典\ndic.setdefault('key', 'value') # 设置默认值（如果没有该键值的话）\n\n# 修改字典时下面三个值都会变\ndic.keys()\t# 返回所有键\ndic.values() # 返回所有值\ndic.items() # 返回所有键值对\n\n# 格式化字符串，使用format_map\ndic = {'name':'Curry','gg':'no'}\ns = \"姓名:{name},瞎写:{gg}\".format_map(dic)\nprint(s)\n# 输出\n姓名:Curry,瞎写:no\n```\n\n### 元组（tuple）\n\n创建后不允许修改，当列表等可变对象为元组元素时，可以修改该元素的值。\n\n\n### 集合（Set）\n\n元素是无序的、可变的、元素不能重复，在内存中是分散保存的（存储方式与字典相似），缺点，浪费内存空间\n\n1、 初始化\n```\n# 空集合的创建\n# 不能使用s = {}，这样默认创建的是字典\nset1 = set()\n```\n2、 集合的常用运算\n```\nset1 = {1,2,3,4,5}\nset2 = {4,5,6,7,8}\n\n# 交集运算\nset3 = set1.intersection(set2)\t# 产生新集合\n# intersection_update为更新原有集合\nprint(set3)\n# 输出\n{4, 5}\n\n# 并集运算\nset3 = set1.union(set2)\nprint(set3)\n# 输出\n{1, 2, 3, 4, 5, 6, 7, 8}\n\n# 差集运算\nset3 = set1.difference(set2) # 得到set1中有，set2中没有的元素 \nprint(set3)\n# 输出\n{1, 2, 3}\n\n# 双向差集\nset3 = set1.symmetric_difference(set2)\nprint(set3)\n# 输出\n{1, 2, 3, 6, 7, 8}\n```\n\n3、 集合间的关系操作\n```\n# 判断两个集合的元素是否完全相同\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2,1}\nprint(s1 == s2)\n# 输出\nTrue\n```\n\n```\n# 子集判断\n# 父集判断，同理。 .issuperset()\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2}\nprint(s2.issubset(s1))\n# 输出\nTrue\n```\n\n```\n# 判断两个集合是否存在重复元素\n# 返回False代表存在重复元素\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2}\nprint(s1.isdisjoint(s2))\n# 输出\nFalse\n```\n\n```\n# 新增数据\nset.add(element) # 一次添加一个元素\nset.update(列表或元组) # 一次添加多个元素\n# 删除元素\nset.remove(element) # 删除不存在的元素会报错\nset.discard(element) # 删除不存在的元素会直接忽略\n```\n\n### 常用的转换函数\n\n```\nlist() # 转换为列表\ntuple() # 转换为元组\njoin(), str() # 转换为字符串\n```\n\n### 生成器\n\n1、 **列表生成器**，常用形式如下\n\n[数据 循环语句 循环或判断语句]\n\n```\nl = [i**2 for i in range(10)]\n# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nl = [i**2 for i in range(10) if i%2 ==0]\n# [0, 4, 16, 36, 64]\n```\n\n2、 字典生成器\n\n```\nlist1 = ['A', 'B', 'C']\ndic = {i:list1[i] for i in range(len(list1))}\n# {0: 'A', 1: 'B', 2: 'C'}\n```\n\n3、 集合生成器（跟列表生成式类似）\n```\nset1 = {i for i in range(10)}\n```","source":"_posts/编程相关/Python/Python基础/1、Python基本数据类型.md","raw":"---\ntitle: Python基本数据类型\ndate: 2020-05-08 12:46:26\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python1\n---\n\n### 字符串\n\n1、 单双引号的应用，即字符串中包含单引号时可以使用双引号进行包含，包含双引号时使用单引号进行包含，如下：\n```\n\"a's hhh\"\n'a\"s hhh'\n```\n\n2、 字符串的一些基本操作（拼接、搜索、替换），其中**替换操作必须要将str赋给一个新的变量**\n```\nstr = str1 + str2\t# 拼接字符串（直接使用 + 进行操作）\nlen(str) # 获取长度\nstr.find(string) # 返回搜索到的第一个index，没搜索到则返回-1\nstr = str.replace('A', 'B') # A替换B\n```\n\n3、 格式化字符串（使用.format语句），使用{}占位符进行\n```\n\"{} {} gg\".format(\"huangkai\",\"is\")\n# huangkai is gg\n\n# 带索引的格式化字符串\n\"{1} {0} gg\".format(\"huangkai\",\"is\")\nis huangkai gg\n\n# f形式的格式化字符串\nstr1 = 'Curry'\nstr2 = 'James'\ncombi = f'{str1} and {str2}, NBA stars'\n\n# 使用别名\nstr3 = “gg {s1}， {s2}”。format(s1=str1, s2 str2)\n```\n\n### 列表（list）\n\n列表在内存中按照顺序存储\n\n1、 列表反转与排序\n\n```\nlist.reverse()\t# 列表反转\nlist.sort() # 升序排列\nlist.sort(reverse=True) # 降序排列\n```\n\n2、 列表常用操作\n\n```\nlist.append(new_element) # 在列表末尾添加元素\nlist.insert(index, new_element) # 在指定的index处加入一个元素，其后元素全部后移\nlist.remove(element) # 删除值为element的元素\nlist.pop(index) # 删除索引值为index的元素，无index则删除最后一个元素\nlist.clear() # 清空列表\n```\n\n4、 列表其他操作（区别于append）\n\n```\nlist.extend([e1, e2]) # 将列表追加进list（区别于append）\n```\n\n5、 **列表的复制**，想将一个列表赋值给另一个列表必须要使用.copy方法，否则修改其中一个表另一个也会变，如下：\n```\nl1 = [1,2,3,4]\nl2 = l1\nprint(id(l1))\nprint(id(l2))\n```\n运行结果可以发现l1与l2指向了同一块内存，因此改变l1，l2也会相应改变。而copy()方法会重新创建一个空列表再将原列表的元素放进去。\n```\nl2 = list.copy()\n```\n\n6、列表元素直接的对应操作，以相加为例，使用列表生成器如下。其中zip函数为将a、b两个列表中的元素一一组合。\n\n```\na = [1,2,3,4]\nb = [1,2,3,4]\nc = [i+j for i, j in zip(a,b)]\n########################################\n[2, 4, 6, 8]\n```\n\n\n\n### 字典（dict）\n\n键值对（key-value），可修改。Python中的散列值函数`hash(data)`，字典存储根据其哈希值存储。\n\n1、 创建\n```\ndic = dict.fromkeys(['school number', 'bala1', 'bala2'])\nprint(dic)\n\n# 输出\n{'school number': None, 'bala1': None, 'bala2': None}\n```\n\n2、 取值\n```\n# 直接使用key获取value\ndic[key]\n# 使用get方法（可以为不存在的key赋默认值）\ndic.get(key)\n```\n\n3、 遍历字典\n```\n# 方案1\nfor key in dic:\n\tv = dic[key]\n\t\n# 方案2（返回每一个键值对）\nfor key,value in dic.items():\n\t\n```\n\n4、 字典常用操作\n```\ndic.update(k1 = new_value1, k2 = new_value2) # 对多个键值进行更新或新增\ndic,pop(key) # 删除键值为key\ndic.popitem() # 删除最后一个键值对，并返回该键值对的tuple\ndic.clear() # 清空字典\ndic.setdefault('key', 'value') # 设置默认值（如果没有该键值的话）\n\n# 修改字典时下面三个值都会变\ndic.keys()\t# 返回所有键\ndic.values() # 返回所有值\ndic.items() # 返回所有键值对\n\n# 格式化字符串，使用format_map\ndic = {'name':'Curry','gg':'no'}\ns = \"姓名:{name},瞎写:{gg}\".format_map(dic)\nprint(s)\n# 输出\n姓名:Curry,瞎写:no\n```\n\n### 元组（tuple）\n\n创建后不允许修改，当列表等可变对象为元组元素时，可以修改该元素的值。\n\n\n### 集合（Set）\n\n元素是无序的、可变的、元素不能重复，在内存中是分散保存的（存储方式与字典相似），缺点，浪费内存空间\n\n1、 初始化\n```\n# 空集合的创建\n# 不能使用s = {}，这样默认创建的是字典\nset1 = set()\n```\n2、 集合的常用运算\n```\nset1 = {1,2,3,4,5}\nset2 = {4,5,6,7,8}\n\n# 交集运算\nset3 = set1.intersection(set2)\t# 产生新集合\n# intersection_update为更新原有集合\nprint(set3)\n# 输出\n{4, 5}\n\n# 并集运算\nset3 = set1.union(set2)\nprint(set3)\n# 输出\n{1, 2, 3, 4, 5, 6, 7, 8}\n\n# 差集运算\nset3 = set1.difference(set2) # 得到set1中有，set2中没有的元素 \nprint(set3)\n# 输出\n{1, 2, 3}\n\n# 双向差集\nset3 = set1.symmetric_difference(set2)\nprint(set3)\n# 输出\n{1, 2, 3, 6, 7, 8}\n```\n\n3、 集合间的关系操作\n```\n# 判断两个集合的元素是否完全相同\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2,1}\nprint(s1 == s2)\n# 输出\nTrue\n```\n\n```\n# 子集判断\n# 父集判断，同理。 .issuperset()\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2}\nprint(s2.issubset(s1))\n# 输出\nTrue\n```\n\n```\n# 判断两个集合是否存在重复元素\n# 返回False代表存在重复元素\ns1 = {1,2,3,4,5}\ns2 = {5,4,3,2}\nprint(s1.isdisjoint(s2))\n# 输出\nFalse\n```\n\n```\n# 新增数据\nset.add(element) # 一次添加一个元素\nset.update(列表或元组) # 一次添加多个元素\n# 删除元素\nset.remove(element) # 删除不存在的元素会报错\nset.discard(element) # 删除不存在的元素会直接忽略\n```\n\n### 常用的转换函数\n\n```\nlist() # 转换为列表\ntuple() # 转换为元组\njoin(), str() # 转换为字符串\n```\n\n### 生成器\n\n1、 **列表生成器**，常用形式如下\n\n[数据 循环语句 循环或判断语句]\n\n```\nl = [i**2 for i in range(10)]\n# [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nl = [i**2 for i in range(10) if i%2 ==0]\n# [0, 4, 16, 36, 64]\n```\n\n2、 字典生成器\n\n```\nlist1 = ['A', 'B', 'C']\ndic = {i:list1[i] for i in range(len(list1))}\n# {0: 'A', 1: 'B', 2: 'C'}\n```\n\n3、 集合生成器（跟列表生成式类似）\n```\nset1 = {i for i in range(10)}\n```","slug":"编程相关/Python/Python基础/1、Python基本数据类型","published":1,"updated":"2021-01-11T04:32:46.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moeh00fhrwjs08v367de","content":"<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>1、 单双引号的应用，即字符串中包含单引号时可以使用双引号进行包含，包含双引号时使用单引号进行包含，如下：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scilab\"><span class=\"hljs-string\">\"a'</span>s hhh<span class=\"hljs-string\">\"<br>'</span>a<span class=\"hljs-string\">\"s hhh'</span><br></code></pre></td></tr></table></figure>\n\n<p>2、 字符串的一些基本操作（拼接、搜索、替换），其中<strong>替换操作必须要将str赋给一个新的变量</strong></p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">str</span> = str1 + str2\t<span class=\"hljs-meta\"># 拼接字符串（直接使用 + 进行操作）</span><br>len(<span class=\"hljs-keyword\">str</span>) <span class=\"hljs-meta\"># 获取长度</span><br><span class=\"hljs-keyword\">str</span>.find(string) <span class=\"hljs-meta\"># 返回搜索到的第一个index，没搜索到则返回-1</span><br><span class=\"hljs-keyword\">str</span> = <span class=\"hljs-keyword\">str</span>.replace(<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>) <span class=\"hljs-meta\"># A替换B</span><br></code></pre></td></tr></table></figure>\n\n<p>3、 格式化字符串（使用.format语句），使用{}占位符进行</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-string\">\"&#123;&#125; &#123;&#125; gg\"</span>.format(<span class=\"hljs-string\">\"huangkai\"</span>,<span class=\"hljs-string\">\"is\"</span>)<br><span class=\"hljs-meta\"># huangkai is gg</span><br><br><span class=\"hljs-meta\"># 带索引的格式化字符串</span><br><span class=\"hljs-string\">\"&#123;1&#125; &#123;0&#125; gg\"</span>.format(<span class=\"hljs-string\">\"huangkai\"</span>,<span class=\"hljs-string\">\"is\"</span>)<br>is huangkai gg<br><br><span class=\"hljs-meta\"># f形式的格式化字符串</span><br>str1 = <span class=\"hljs-string\">'Curry'</span><br>str2 = <span class=\"hljs-string\">'James'</span><br>combi = f<span class=\"hljs-string\">'&#123;str1&#125; and &#123;str2&#125;, NBA stars'</span><br><br><span class=\"hljs-meta\"># 使用别名</span><br>str3 = “gg &#123;s1&#125;， &#123;s2&#125;”。format(s1=str1, s2 str2)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列表（list）\"><a href=\"#列表（list）\" class=\"headerlink\" title=\"列表（list）\"></a>列表（list）</h3><p>列表在内存中按照顺序存储</p>\n<p>1、 列表反转与排序</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">reverse</span>()\t<span class=\"hljs-comment\"># 列表反转</span><br><span class=\"hljs-built_in\">list</span>.sort() <span class=\"hljs-comment\"># 升序排列</span><br><span class=\"hljs-built_in\">list</span>.sort(<span class=\"hljs-built_in\">reverse</span>=True) <span class=\"hljs-comment\"># 降序排列</span><br></code></pre></td></tr></table></figure>\n\n<p>2、 列表常用操作</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">append</span>(new_element) # 在列表末尾添加元素<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">insert</span>(<span class=\"hljs-built_in\">index</span>, new_element) # 在指定的<span class=\"hljs-built_in\">index</span>处加入一个元素，其后元素全部后移<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-built_in\">remove</span>(element) # 删除值为element的元素<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">pop</span>(<span class=\"hljs-built_in\">index</span>) # 删除索引值为<span class=\"hljs-built_in\">index</span>的元素，无<span class=\"hljs-built_in\">index</span>则删除最后一个元素<br><span class=\"hljs-keyword\">list</span>.clear() # 清空列表<br></code></pre></td></tr></table></figure>\n\n<p>4、 列表其他操作（区别于append）</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-built_in\">extend</span>([e1, e2]) # 将列表追加进<span class=\"hljs-keyword\">list</span>（区别于<span class=\"hljs-keyword\">append</span>）<br></code></pre></td></tr></table></figure>\n\n<p>5、 <strong>列表的复制</strong>，想将一个列表赋值给另一个列表必须要使用.copy方法，否则修改其中一个表另一个也会变，如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">l1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>l2 = l1<br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(id(l1)</span></span>)<br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(id(l2)</span></span>)<br></code></pre></td></tr></table></figure>\n<p>运行结果可以发现l1与l2指向了同一块内存，因此改变l1，l2也会相应改变。而copy()方法会重新创建一个空列表再将原列表的元素放进去。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">l2 = <span class=\"hljs-built_in\">list</span>.<span class=\"hljs-keyword\">copy</span>()<br></code></pre></td></tr></table></figure>\n\n<p>6、列表元素直接的对应操作，以相加为例，使用列表生成器如下。其中zip函数为将a、b两个列表中的元素一一组合。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>b = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>c = [i+j for i, j <span class=\"hljs-keyword\">in</span> zip(a,b)]<br>########################################<br>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"字典（dict）\"><a href=\"#字典（dict）\" class=\"headerlink\" title=\"字典（dict）\"></a>字典（dict）</h3><p>键值对（key-value），可修改。Python中的散列值函数<code>hash(data)</code>，字典存储根据其哈希值存储。</p>\n<p>1、 创建</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">dic = dict.fromkeys([<span class=\"hljs-string\">'school number'</span>, <span class=\"hljs-string\">'bala1'</span>, <span class=\"hljs-string\">'bala2'</span>])<br>print(dic)<br><br><span class=\"hljs-comment\"># 输出</span><br>&#123;<span class=\"hljs-string\">'school number'</span>: <span class=\"hljs-literal\">None</span>, <span class=\"hljs-string\">'bala1'</span>: <span class=\"hljs-literal\">None</span>, <span class=\"hljs-string\">'bala2'</span>: <span class=\"hljs-literal\">None</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、 取值</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\"># 直接使用<span class=\"hljs-built_in\">key</span>获取<span class=\"hljs-built_in\">value</span><br>dic[<span class=\"hljs-built_in\">key</span>]<br># 使用<span class=\"hljs-built_in\">get</span>方法（可以为不存在的<span class=\"hljs-built_in\">key</span>赋默认值）<br>dic.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-built_in\">key</span>)<br></code></pre></td></tr></table></figure>\n\n<p>3、 遍历字典</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># 方案1</span><br><span class=\"hljs-attr\">for</span> <span class=\"hljs-string\">key in dic:</span><br>\t<span class=\"hljs-attr\">v</span> = <span class=\"hljs-string\">dic[key]</span><br><span class=\"hljs-comment\">\t<br># 方案2（返回每一个键值对）</span><br><span class=\"hljs-attr\">for</span> <span class=\"hljs-string\">key,value in dic.items():</span><br></code></pre></td></tr></table></figure>\n\n<p>4、 字典常用操作</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">dic.update(k1 </span>= new_value1, k2 = new_value2) <span class=\"hljs-comment\"># 对多个键值进行更新或新增</span><br><span class=\"hljs-keyword\">dic,pop(key) </span><span class=\"hljs-comment\"># 删除键值为key</span><br><span class=\"hljs-keyword\">dic.popitem() </span><span class=\"hljs-comment\"># 删除最后一个键值对，并返回该键值对的tuple</span><br><span class=\"hljs-keyword\">dic.clear() </span><span class=\"hljs-comment\"># 清空字典</span><br><span class=\"hljs-keyword\">dic.setdefault('key', </span><span class=\"hljs-string\">'value'</span>) <span class=\"hljs-comment\"># 设置默认值（如果没有该键值的话）</span><br><br><span class=\"hljs-comment\"># 修改字典时下面三个值都会变</span><br><span class=\"hljs-keyword\">dic.keys()\t</span><span class=\"hljs-comment\"># 返回所有键</span><br><span class=\"hljs-keyword\">dic.values() </span><span class=\"hljs-comment\"># 返回所有值</span><br><span class=\"hljs-keyword\">dic.items() </span><span class=\"hljs-comment\"># 返回所有键值对</span><br><br><span class=\"hljs-comment\"># 格式化字符串，使用format_map</span><br><span class=\"hljs-keyword\">dic </span>= &#123;<span class=\"hljs-string\">'name'</span>:<span class=\"hljs-string\">'Curry'</span>,<span class=\"hljs-string\">'gg'</span>:<span class=\"hljs-string\">'no'</span>&#125;<br>s = <span class=\"hljs-string\">\"姓名:&#123;name&#125;,瞎写:&#123;gg&#125;\"</span>.format_map(<span class=\"hljs-keyword\">dic)<br></span>print(s)<br><span class=\"hljs-comment\"># 输出</span><br>姓名:Curry,瞎写:no<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元组（tuple）\"><a href=\"#元组（tuple）\" class=\"headerlink\" title=\"元组（tuple）\"></a>元组（tuple）</h3><p>创建后不允许修改，当列表等可变对象为元组元素时，可以修改该元素的值。</p>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><p>元素是无序的、可变的、元素不能重复，在内存中是分散保存的（存储方式与字典相似），缺点，浪费内存空间</p>\n<p>1、 初始化</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 空集合的创建</span><br><span class=\"hljs-meta\"># 不能使用s = &#123;&#125;，这样默认创建的是字典</span><br>set1 = <span class=\"hljs-keyword\">set</span>()<br></code></pre></td></tr></table></figure>\n<p>2、 集合的常用运算</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">set1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>set2 = &#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>&#125;<br><br># 交集运算<br>set3 = set1.<span class=\"hljs-built_in\">int</span>ersection(set2)\t# 产生新集合<br># <span class=\"hljs-built_in\">int</span>ersection_update为更新原有集合<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;<br><br># 并集运算<br>set3 = set1.union(set2)<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;<br><br># 差集运算<br>set3 = set1.difference(set2) # 得到set1中有，set2中没有的元素 <br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;<br><br># 双向差集<br>set3 = set1.symmetric_difference(set2)<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、 集合间的关系操作</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 判断两个集合的元素是否完全相同<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>&#125;<br>print(s1 == s2)<br># 输出<br>True<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 子集判断<br># 父集判断，同理。 .issuperset()<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>&#125;<br>print(s2.issubset(s1))<br># 输出<br>True<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 判断两个集合是否存在重复元素<br># 返回False代表存在重复元素<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>&#125;<br>print(s1.isdisjoint(s2))<br># 输出<br>False<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\"><span class=\"hljs-comment\"># 新增数据</span><br><span class=\"hljs-built_in\">set</span>.<span class=\"hljs-built_in\">add</span>(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 一次添加一个元素</span><br><span class=\"hljs-built_in\">set</span>.update(列表或元组) <span class=\"hljs-comment\"># 一次添加多个元素</span><br><span class=\"hljs-comment\"># 删除元素</span><br><span class=\"hljs-built_in\">set</span>.remove(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 删除不存在的元素会报错</span><br><span class=\"hljs-built_in\">set</span>.discard(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 删除不存在的元素会直接忽略</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用的转换函数\"><a href=\"#常用的转换函数\" class=\"headerlink\" title=\"常用的转换函数\"></a>常用的转换函数</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-built_in\">list</span>() <span class=\"hljs-comment\"># 转换为列表</span><br>tuple() <span class=\"hljs-comment\"># 转换为元组</span><br>join(), str() <span class=\"hljs-comment\"># 转换为字符串</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>1、 <strong>列表生成器</strong>，常用形式如下</p>\n<p>[数据 循环语句 循环或判断语句]</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">l = [i**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)]<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">81</span>]<br><br>l = [i**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">if</span> i%<span class=\"hljs-number\">2</span> ==<span class=\"hljs-number\">0</span>]<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">64</span>]<br></code></pre></td></tr></table></figure>\n\n<p>2、 字典生成器</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">list1</span> = [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>]<br><span class=\"hljs-attr\">dic</span> = &#123;i:list1[i] for i in range(len(list1))&#125;<br><span class=\"hljs-comment\"># &#123;0: 'A', 1: 'B', 2: 'C'&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>3、 集合生成器（跟列表生成式类似）</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">set1</span> = &#123;i for i in range(<span class=\"hljs-number\">10</span>)&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>1、 单双引号的应用，即字符串中包含单引号时可以使用双引号进行包含，包含双引号时使用单引号进行包含，如下：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scilab\"><span class=\"hljs-string\">\"a'</span>s hhh<span class=\"hljs-string\">\"<br>'</span>a<span class=\"hljs-string\">\"s hhh'</span><br></code></pre></td></tr></table></figure>\n\n<p>2、 字符串的一些基本操作（拼接、搜索、替换），其中<strong>替换操作必须要将str赋给一个新的变量</strong></p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">str</span> = str1 + str2\t<span class=\"hljs-meta\"># 拼接字符串（直接使用 + 进行操作）</span><br>len(<span class=\"hljs-keyword\">str</span>) <span class=\"hljs-meta\"># 获取长度</span><br><span class=\"hljs-keyword\">str</span>.find(string) <span class=\"hljs-meta\"># 返回搜索到的第一个index，没搜索到则返回-1</span><br><span class=\"hljs-keyword\">str</span> = <span class=\"hljs-keyword\">str</span>.replace(<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>) <span class=\"hljs-meta\"># A替换B</span><br></code></pre></td></tr></table></figure>\n\n<p>3、 格式化字符串（使用.format语句），使用{}占位符进行</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-string\">\"&#123;&#125; &#123;&#125; gg\"</span>.format(<span class=\"hljs-string\">\"huangkai\"</span>,<span class=\"hljs-string\">\"is\"</span>)<br><span class=\"hljs-meta\"># huangkai is gg</span><br><br><span class=\"hljs-meta\"># 带索引的格式化字符串</span><br><span class=\"hljs-string\">\"&#123;1&#125; &#123;0&#125; gg\"</span>.format(<span class=\"hljs-string\">\"huangkai\"</span>,<span class=\"hljs-string\">\"is\"</span>)<br>is huangkai gg<br><br><span class=\"hljs-meta\"># f形式的格式化字符串</span><br>str1 = <span class=\"hljs-string\">'Curry'</span><br>str2 = <span class=\"hljs-string\">'James'</span><br>combi = f<span class=\"hljs-string\">'&#123;str1&#125; and &#123;str2&#125;, NBA stars'</span><br><br><span class=\"hljs-meta\"># 使用别名</span><br>str3 = “gg &#123;s1&#125;， &#123;s2&#125;”。format(s1=str1, s2 str2)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列表（list）\"><a href=\"#列表（list）\" class=\"headerlink\" title=\"列表（list）\"></a>列表（list）</h3><p>列表在内存中按照顺序存储</p>\n<p>1、 列表反转与排序</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">reverse</span>()\t<span class=\"hljs-comment\"># 列表反转</span><br><span class=\"hljs-built_in\">list</span>.sort() <span class=\"hljs-comment\"># 升序排列</span><br><span class=\"hljs-built_in\">list</span>.sort(<span class=\"hljs-built_in\">reverse</span>=True) <span class=\"hljs-comment\"># 降序排列</span><br></code></pre></td></tr></table></figure>\n\n<p>2、 列表常用操作</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">append</span>(new_element) # 在列表末尾添加元素<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">insert</span>(<span class=\"hljs-built_in\">index</span>, new_element) # 在指定的<span class=\"hljs-built_in\">index</span>处加入一个元素，其后元素全部后移<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-built_in\">remove</span>(element) # 删除值为element的元素<br><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-keyword\">pop</span>(<span class=\"hljs-built_in\">index</span>) # 删除索引值为<span class=\"hljs-built_in\">index</span>的元素，无<span class=\"hljs-built_in\">index</span>则删除最后一个元素<br><span class=\"hljs-keyword\">list</span>.clear() # 清空列表<br></code></pre></td></tr></table></figure>\n\n<p>4、 列表其他操作（区别于append）</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\"><span class=\"hljs-keyword\">list</span>.<span class=\"hljs-built_in\">extend</span>([e1, e2]) # 将列表追加进<span class=\"hljs-keyword\">list</span>（区别于<span class=\"hljs-keyword\">append</span>）<br></code></pre></td></tr></table></figure>\n\n<p>5、 <strong>列表的复制</strong>，想将一个列表赋值给另一个列表必须要使用.copy方法，否则修改其中一个表另一个也会变，如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">l1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>l2 = l1<br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(id(l1)</span></span>)<br><span class=\"hljs-function\"><span class=\"hljs-title\">print</span><span class=\"hljs-params\">(id(l2)</span></span>)<br></code></pre></td></tr></table></figure>\n<p>运行结果可以发现l1与l2指向了同一块内存，因此改变l1，l2也会相应改变。而copy()方法会重新创建一个空列表再将原列表的元素放进去。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">l2 = <span class=\"hljs-built_in\">list</span>.<span class=\"hljs-keyword\">copy</span>()<br></code></pre></td></tr></table></figure>\n\n<p>6、列表元素直接的对应操作，以相加为例，使用列表生成器如下。其中zip函数为将a、b两个列表中的元素一一组合。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">a = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>b = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]<br>c = [i+j for i, j <span class=\"hljs-keyword\">in</span> zip(a,b)]<br>########################################<br>[<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">8</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"字典（dict）\"><a href=\"#字典（dict）\" class=\"headerlink\" title=\"字典（dict）\"></a>字典（dict）</h3><p>键值对（key-value），可修改。Python中的散列值函数<code>hash(data)</code>，字典存储根据其哈希值存储。</p>\n<p>1、 创建</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">dic = dict.fromkeys([<span class=\"hljs-string\">'school number'</span>, <span class=\"hljs-string\">'bala1'</span>, <span class=\"hljs-string\">'bala2'</span>])<br>print(dic)<br><br><span class=\"hljs-comment\"># 输出</span><br>&#123;<span class=\"hljs-string\">'school number'</span>: <span class=\"hljs-literal\">None</span>, <span class=\"hljs-string\">'bala1'</span>: <span class=\"hljs-literal\">None</span>, <span class=\"hljs-string\">'bala2'</span>: <span class=\"hljs-literal\">None</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、 取值</p>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\"># 直接使用<span class=\"hljs-built_in\">key</span>获取<span class=\"hljs-built_in\">value</span><br>dic[<span class=\"hljs-built_in\">key</span>]<br># 使用<span class=\"hljs-built_in\">get</span>方法（可以为不存在的<span class=\"hljs-built_in\">key</span>赋默认值）<br>dic.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-built_in\">key</span>)<br></code></pre></td></tr></table></figure>\n\n<p>3、 遍历字典</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\"># 方案1</span><br><span class=\"hljs-attr\">for</span> <span class=\"hljs-string\">key in dic:</span><br>\t<span class=\"hljs-attr\">v</span> = <span class=\"hljs-string\">dic[key]</span><br><span class=\"hljs-comment\">\t<br># 方案2（返回每一个键值对）</span><br><span class=\"hljs-attr\">for</span> <span class=\"hljs-string\">key,value in dic.items():</span><br></code></pre></td></tr></table></figure>\n\n<p>4、 字典常用操作</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">dic.update(k1 </span>= new_value1, k2 = new_value2) <span class=\"hljs-comment\"># 对多个键值进行更新或新增</span><br><span class=\"hljs-keyword\">dic,pop(key) </span><span class=\"hljs-comment\"># 删除键值为key</span><br><span class=\"hljs-keyword\">dic.popitem() </span><span class=\"hljs-comment\"># 删除最后一个键值对，并返回该键值对的tuple</span><br><span class=\"hljs-keyword\">dic.clear() </span><span class=\"hljs-comment\"># 清空字典</span><br><span class=\"hljs-keyword\">dic.setdefault('key', </span><span class=\"hljs-string\">'value'</span>) <span class=\"hljs-comment\"># 设置默认值（如果没有该键值的话）</span><br><br><span class=\"hljs-comment\"># 修改字典时下面三个值都会变</span><br><span class=\"hljs-keyword\">dic.keys()\t</span><span class=\"hljs-comment\"># 返回所有键</span><br><span class=\"hljs-keyword\">dic.values() </span><span class=\"hljs-comment\"># 返回所有值</span><br><span class=\"hljs-keyword\">dic.items() </span><span class=\"hljs-comment\"># 返回所有键值对</span><br><br><span class=\"hljs-comment\"># 格式化字符串，使用format_map</span><br><span class=\"hljs-keyword\">dic </span>= &#123;<span class=\"hljs-string\">'name'</span>:<span class=\"hljs-string\">'Curry'</span>,<span class=\"hljs-string\">'gg'</span>:<span class=\"hljs-string\">'no'</span>&#125;<br>s = <span class=\"hljs-string\">\"姓名:&#123;name&#125;,瞎写:&#123;gg&#125;\"</span>.format_map(<span class=\"hljs-keyword\">dic)<br></span>print(s)<br><span class=\"hljs-comment\"># 输出</span><br>姓名:Curry,瞎写:no<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元组（tuple）\"><a href=\"#元组（tuple）\" class=\"headerlink\" title=\"元组（tuple）\"></a>元组（tuple）</h3><p>创建后不允许修改，当列表等可变对象为元组元素时，可以修改该元素的值。</p>\n<h3 id=\"集合（Set）\"><a href=\"#集合（Set）\" class=\"headerlink\" title=\"集合（Set）\"></a>集合（Set）</h3><p>元素是无序的、可变的、元素不能重复，在内存中是分散保存的（存储方式与字典相似），缺点，浪费内存空间</p>\n<p>1、 初始化</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 空集合的创建</span><br><span class=\"hljs-meta\"># 不能使用s = &#123;&#125;，这样默认创建的是字典</span><br>set1 = <span class=\"hljs-keyword\">set</span>()<br></code></pre></td></tr></table></figure>\n<p>2、 集合的常用运算</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">set1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>set2 = &#123;<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>&#125;<br><br># 交集运算<br>set3 = set1.<span class=\"hljs-built_in\">int</span>ersection(set2)\t# 产生新集合<br># <span class=\"hljs-built_in\">int</span>ersection_update为更新原有集合<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;<br><br># 并集运算<br>set3 = set1.union(set2)<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;<br><br># 差集运算<br>set3 = set1.difference(set2) # 得到set1中有，set2中没有的元素 <br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>&#125;<br><br># 双向差集<br>set3 = set1.symmetric_difference(set2)<br>print(set3)<br># 输出<br>&#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>3、 集合间的关系操作</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 判断两个集合的元素是否完全相同<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>&#125;<br>print(s1 == s2)<br># 输出<br>True<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 子集判断<br># 父集判断，同理。 .issuperset()<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>&#125;<br>print(s2.issubset(s1))<br># 输出<br>True<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 判断两个集合是否存在重复元素<br># 返回False代表存在重复元素<br>s1 = &#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;<br>s2 = &#123;<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>&#125;<br>print(s1.isdisjoint(s2))<br># 输出<br>False<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\"><span class=\"hljs-comment\"># 新增数据</span><br><span class=\"hljs-built_in\">set</span>.<span class=\"hljs-built_in\">add</span>(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 一次添加一个元素</span><br><span class=\"hljs-built_in\">set</span>.update(列表或元组) <span class=\"hljs-comment\"># 一次添加多个元素</span><br><span class=\"hljs-comment\"># 删除元素</span><br><span class=\"hljs-built_in\">set</span>.remove(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 删除不存在的元素会报错</span><br><span class=\"hljs-built_in\">set</span>.discard(<span class=\"hljs-keyword\">element</span>) <span class=\"hljs-comment\"># 删除不存在的元素会直接忽略</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用的转换函数\"><a href=\"#常用的转换函数\" class=\"headerlink\" title=\"常用的转换函数\"></a>常用的转换函数</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-built_in\">list</span>() <span class=\"hljs-comment\"># 转换为列表</span><br>tuple() <span class=\"hljs-comment\"># 转换为元组</span><br>join(), str() <span class=\"hljs-comment\"># 转换为字符串</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>1、 <strong>列表生成器</strong>，常用形式如下</p>\n<p>[数据 循环语句 循环或判断语句]</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">l = [i**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>)]<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">49</span>, <span class=\"hljs-number\">64</span>, <span class=\"hljs-number\">81</span>]<br><br>l = [i**<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>) <span class=\"hljs-keyword\">if</span> i%<span class=\"hljs-number\">2</span> ==<span class=\"hljs-number\">0</span>]<br># [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">36</span>, <span class=\"hljs-number\">64</span>]<br></code></pre></td></tr></table></figure>\n\n<p>2、 字典生成器</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">list1</span> = [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>]<br><span class=\"hljs-attr\">dic</span> = &#123;i:list1[i] for i in range(len(list1))&#125;<br><span class=\"hljs-comment\"># &#123;0: 'A', 1: 'B', 2: 'C'&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p>3、 集合生成器（跟列表生成式类似）</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">set1</span> = &#123;i for i in range(<span class=\"hljs-number\">10</span>)&#125;<br></code></pre></td></tr></table></figure>"},{"title":"Python模块与文件读写","date":"2020-05-10T13:03:43.000Z","fileName":"python4","_content":"\n## 模块与包\n\n### 导入模块时Python的操作\n\n当程序导入一个模块时，Python解析器对模块位置的搜索顺序为：\n\n1. 当前目录\n2. 若当前目录搜索不到，Python则搜索在shell变量PYTHONPATH下的每个目录。\n3. 若都找不到，Python会察看默认路径。UNIX下，默认路径一为/usr/local/lib/python/。\n\n模块搜索路径存储在 system 模块的**sys.path** 变量中。变量里包含当前目录、PYTHONPATH和由安装过程决定的默认目录。\n\n\n\n### 模块常用函数\n\n1、**dir()——列出对象的所有属性和方法**。dir() 函数返回一个排好序的字符串列表，内容是一个模块里定义过的名字。返回的列表容纳了在一个模块里定义的所有**模块**，**变量**和**函数**。\n\n2、**help()——查看类、方法的帮助信息**\n\n3、**\\__name__ ——模块的名称**\n\n4、\\__file__ ——文件全路径\n\n\n\n## 文件读写\n\n### open函数及其他基本操作\n\nPython使用**open()**打开文件，并返回文件的一个句柄。具体的参数为**文件句柄 = open('文件路径',打开模式, 编码方式)**。其中编码方式encoding如果没有指定，将采用系统自带的编码方式。\n\n```\nf = open('aa.txt')\nprint(f)\nf.close()\n####################################################\n<_io.TextIOWrapper name='aa.txt' mode='r' encoding='cp936'>\n```\n\n由以上输出可以看到，没指定打开模式时文件默认为只读模式（r），这时使用写入操作就会出错，常用的文件打开方式主要有以下几个。\n\n1、**r**，只读的方式打开（文件必须存在，若文件不存在会抛出异常）。文件以什么编码写就以什么编码打开。\n\n2、**w**，只写模式（文件不可读，若文件不存在，则创建一个新的文件，如果文件存在，则会清空里面的内容）\n\n3、**a**，只追加写的模式 （文件不可读，不存在则创建新的文件，文件存在的话，可在后面追加内容）\n\n4、**b**，对于非文本的文件，使用b的模式。'b'表示以字节的方式进行操作 如：rb,wb,ab 分别对应以上内容，如果以b的方式打开，读取到的内容是字节类型\n\n```\n# aa.txt文件中为一行字符串“hello world!”\nf = open('aa.txt', mode='rb')\nprint(f.read())\nf.close()\n####################################\nb'hello world!'\n```\n\n5、**’+‘模式**，r+: 读写模式  w+:写读模式  a+：写读模式。在 **r+** 模式下，应该先读，后写，如果先写，后读，同样的道理，光标移动到了文件末尾，将读取不到内容。\n\n同时使用**open**打开了一个文件操作完成后必须进行关闭，关闭文件使用**close()**。由于文件操作的这一性质，可以使用**with**关键字进行操作，如下：\n\n**with 上下文管理器（到达语句末尾，将自动关闭文件）**\n\n```\nwith open(\"*.txt\") as f\n\tpass\n```\n\n\n\n### 与文件读写相关的一些功能函数\n\n1、读取文件的操作\n\n```\n# 读取文件，可以输入读取几个字符\nread()\n# 读取一行数据，也可以读取参数\nreadline()\n# 读取所有行，并返回列表，之后可以通过对列表进行遍历得到数据\nreadlines()\n```\n\n2、写入文件的操作\n\n```\n# 向文件中写入内容\nwrite()\n# 输入一个列表，将列表内容分别写入\nwirtelines([])\n```\n\n3、其他操作（文件定位操作）\n\n**tell()**方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。\n\n**seek(offset [,from])**方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。","source":"_posts/编程相关/Python/Python基础/4、Python模块与文件读写.md","raw":"---\ntitle: Python模块与文件读写\ndate: 2020-05-10 21:03:43\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python4\n---\n\n## 模块与包\n\n### 导入模块时Python的操作\n\n当程序导入一个模块时，Python解析器对模块位置的搜索顺序为：\n\n1. 当前目录\n2. 若当前目录搜索不到，Python则搜索在shell变量PYTHONPATH下的每个目录。\n3. 若都找不到，Python会察看默认路径。UNIX下，默认路径一为/usr/local/lib/python/。\n\n模块搜索路径存储在 system 模块的**sys.path** 变量中。变量里包含当前目录、PYTHONPATH和由安装过程决定的默认目录。\n\n\n\n### 模块常用函数\n\n1、**dir()——列出对象的所有属性和方法**。dir() 函数返回一个排好序的字符串列表，内容是一个模块里定义过的名字。返回的列表容纳了在一个模块里定义的所有**模块**，**变量**和**函数**。\n\n2、**help()——查看类、方法的帮助信息**\n\n3、**\\__name__ ——模块的名称**\n\n4、\\__file__ ——文件全路径\n\n\n\n## 文件读写\n\n### open函数及其他基本操作\n\nPython使用**open()**打开文件，并返回文件的一个句柄。具体的参数为**文件句柄 = open('文件路径',打开模式, 编码方式)**。其中编码方式encoding如果没有指定，将采用系统自带的编码方式。\n\n```\nf = open('aa.txt')\nprint(f)\nf.close()\n####################################################\n<_io.TextIOWrapper name='aa.txt' mode='r' encoding='cp936'>\n```\n\n由以上输出可以看到，没指定打开模式时文件默认为只读模式（r），这时使用写入操作就会出错，常用的文件打开方式主要有以下几个。\n\n1、**r**，只读的方式打开（文件必须存在，若文件不存在会抛出异常）。文件以什么编码写就以什么编码打开。\n\n2、**w**，只写模式（文件不可读，若文件不存在，则创建一个新的文件，如果文件存在，则会清空里面的内容）\n\n3、**a**，只追加写的模式 （文件不可读，不存在则创建新的文件，文件存在的话，可在后面追加内容）\n\n4、**b**，对于非文本的文件，使用b的模式。'b'表示以字节的方式进行操作 如：rb,wb,ab 分别对应以上内容，如果以b的方式打开，读取到的内容是字节类型\n\n```\n# aa.txt文件中为一行字符串“hello world!”\nf = open('aa.txt', mode='rb')\nprint(f.read())\nf.close()\n####################################\nb'hello world!'\n```\n\n5、**’+‘模式**，r+: 读写模式  w+:写读模式  a+：写读模式。在 **r+** 模式下，应该先读，后写，如果先写，后读，同样的道理，光标移动到了文件末尾，将读取不到内容。\n\n同时使用**open**打开了一个文件操作完成后必须进行关闭，关闭文件使用**close()**。由于文件操作的这一性质，可以使用**with**关键字进行操作，如下：\n\n**with 上下文管理器（到达语句末尾，将自动关闭文件）**\n\n```\nwith open(\"*.txt\") as f\n\tpass\n```\n\n\n\n### 与文件读写相关的一些功能函数\n\n1、读取文件的操作\n\n```\n# 读取文件，可以输入读取几个字符\nread()\n# 读取一行数据，也可以读取参数\nreadline()\n# 读取所有行，并返回列表，之后可以通过对列表进行遍历得到数据\nreadlines()\n```\n\n2、写入文件的操作\n\n```\n# 向文件中写入内容\nwrite()\n# 输入一个列表，将列表内容分别写入\nwirtelines([])\n```\n\n3、其他操作（文件定位操作）\n\n**tell()**方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。\n\n**seek(offset [,from])**方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。","slug":"编程相关/Python/Python基础/4、Python模块与文件读写","published":1,"updated":"2021-01-11T04:33:58.996Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moei00flrwjsarvq28cx","content":"<h2 id=\"模块与包\"><a href=\"#模块与包\" class=\"headerlink\" title=\"模块与包\"></a>模块与包</h2><h3 id=\"导入模块时Python的操作\"><a href=\"#导入模块时Python的操作\" class=\"headerlink\" title=\"导入模块时Python的操作\"></a>导入模块时Python的操作</h3><p>当程序导入一个模块时，Python解析器对模块位置的搜索顺序为：</p>\n<ol>\n<li>当前目录</li>\n<li>若当前目录搜索不到，Python则搜索在shell变量PYTHONPATH下的每个目录。</li>\n<li>若都找不到，Python会察看默认路径。UNIX下，默认路径一为/usr/local/lib/python/。</li>\n</ol>\n<p>模块搜索路径存储在 system 模块的<strong>sys.path</strong> 变量中。变量里包含当前目录、PYTHONPATH和由安装过程决定的默认目录。</p>\n<h3 id=\"模块常用函数\"><a href=\"#模块常用函数\" class=\"headerlink\" title=\"模块常用函数\"></a>模块常用函数</h3><p>1、<strong>dir()——列出对象的所有属性和方法</strong>。dir() 函数返回一个排好序的字符串列表，内容是一个模块里定义过的名字。返回的列表容纳了在一个模块里定义的所有<strong>模块</strong>，<strong>变量</strong>和<strong>函数</strong>。</p>\n<p>2、<strong>help()——查看类、方法的帮助信息</strong></p>\n<p>3、<strong>_<em>name_</em> ——模块的名称</strong></p>\n<p>4、_<em>file_</em> ——文件全路径</p>\n<h2 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h2><h3 id=\"open函数及其他基本操作\"><a href=\"#open函数及其他基本操作\" class=\"headerlink\" title=\"open函数及其他基本操作\"></a>open函数及其他基本操作</h3><p>Python使用<strong>open()</strong>打开文件，并返回文件的一个句柄。具体的参数为<strong>文件句柄 = open(‘文件路径’,打开模式, 编码方式)</strong>。其中编码方式encoding如果没有指定，将采用系统自带的编码方式。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">f = open(<span class=\"hljs-string\">'aa.txt'</span>)<br>print(f)<br>f.close()<br>####################################################<br>&lt;_io.TextIOWrapper name=<span class=\"hljs-string\">'aa.txt'</span> mode=<span class=\"hljs-string\">'r'</span> encoding=<span class=\"hljs-string\">'cp936'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>由以上输出可以看到，没指定打开模式时文件默认为只读模式（r），这时使用写入操作就会出错，常用的文件打开方式主要有以下几个。</p>\n<p>1、<strong>r</strong>，只读的方式打开（文件必须存在，若文件不存在会抛出异常）。文件以什么编码写就以什么编码打开。</p>\n<p>2、<strong>w</strong>，只写模式（文件不可读，若文件不存在，则创建一个新的文件，如果文件存在，则会清空里面的内容）</p>\n<p>3、<strong>a</strong>，只追加写的模式 （文件不可读，不存在则创建新的文件，文件存在的话，可在后面追加内容）</p>\n<p>4、<strong>b</strong>，对于非文本的文件，使用b的模式。’b’表示以字节的方式进行操作 如：rb,wb,ab 分别对应以上内容，如果以b的方式打开，读取到的内容是字节类型</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># aa.txt文件中为一行字符串“hello world!”<br>f = open(<span class=\"hljs-string\">'aa.txt'</span>, mode=<span class=\"hljs-string\">'rb'</span>)<br>print(f.read())<br>f.close()<br>####################################<br>b<span class=\"hljs-string\">'hello world!'</span><br></code></pre></td></tr></table></figure>\n\n<p>5、<strong>’+‘模式</strong>，r+: 读写模式  w+:写读模式  a+：写读模式。在 <strong>r+</strong> 模式下，应该先读，后写，如果先写，后读，同样的道理，光标移动到了文件末尾，将读取不到内容。</p>\n<p>同时使用<strong>open</strong>打开了一个文件操作完成后必须进行关闭，关闭文件使用<strong>close()</strong>。由于文件操作的这一性质，可以使用<strong>with</strong>关键字进行操作，如下：</p>\n<p><strong>with 上下文管理器（到达语句末尾，将自动关闭文件）</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">\"*.txt\"</span>) <span class=\"hljs-keyword\">as</span> f<br>\tpass<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"与文件读写相关的一些功能函数\"><a href=\"#与文件读写相关的一些功能函数\" class=\"headerlink\" title=\"与文件读写相关的一些功能函数\"></a>与文件读写相关的一些功能函数</h3><p>1、读取文件的操作</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 读取文件，可以输入读取几个字符</span><br>read()<br><span class=\"hljs-meta\"># 读取一行数据，也可以读取参数</span><br>readline()<br><span class=\"hljs-meta\"># 读取所有行，并返回列表，之后可以通过对列表进行遍历得到数据</span><br>readlines()<br></code></pre></td></tr></table></figure>\n\n<p>2、写入文件的操作</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 向文件中写入内容</span><br>write()<br><span class=\"hljs-meta\"># 输入一个列表，将列表内容分别写入</span><br>wirtelines([])<br></code></pre></td></tr></table></figure>\n\n<p>3、其他操作（文件定位操作）</p>\n<p><strong>tell()</strong>方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。</p>\n<p><strong>seek(offset [,from])</strong>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模块与包\"><a href=\"#模块与包\" class=\"headerlink\" title=\"模块与包\"></a>模块与包</h2><h3 id=\"导入模块时Python的操作\"><a href=\"#导入模块时Python的操作\" class=\"headerlink\" title=\"导入模块时Python的操作\"></a>导入模块时Python的操作</h3><p>当程序导入一个模块时，Python解析器对模块位置的搜索顺序为：</p>\n<ol>\n<li>当前目录</li>\n<li>若当前目录搜索不到，Python则搜索在shell变量PYTHONPATH下的每个目录。</li>\n<li>若都找不到，Python会察看默认路径。UNIX下，默认路径一为/usr/local/lib/python/。</li>\n</ol>\n<p>模块搜索路径存储在 system 模块的<strong>sys.path</strong> 变量中。变量里包含当前目录、PYTHONPATH和由安装过程决定的默认目录。</p>\n<h3 id=\"模块常用函数\"><a href=\"#模块常用函数\" class=\"headerlink\" title=\"模块常用函数\"></a>模块常用函数</h3><p>1、<strong>dir()——列出对象的所有属性和方法</strong>。dir() 函数返回一个排好序的字符串列表，内容是一个模块里定义过的名字。返回的列表容纳了在一个模块里定义的所有<strong>模块</strong>，<strong>变量</strong>和<strong>函数</strong>。</p>\n<p>2、<strong>help()——查看类、方法的帮助信息</strong></p>\n<p>3、<strong>_<em>name_</em> ——模块的名称</strong></p>\n<p>4、_<em>file_</em> ——文件全路径</p>\n<h2 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h2><h3 id=\"open函数及其他基本操作\"><a href=\"#open函数及其他基本操作\" class=\"headerlink\" title=\"open函数及其他基本操作\"></a>open函数及其他基本操作</h3><p>Python使用<strong>open()</strong>打开文件，并返回文件的一个句柄。具体的参数为<strong>文件句柄 = open(‘文件路径’,打开模式, 编码方式)</strong>。其中编码方式encoding如果没有指定，将采用系统自带的编码方式。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">f = open(<span class=\"hljs-string\">'aa.txt'</span>)<br>print(f)<br>f.close()<br>####################################################<br>&lt;_io.TextIOWrapper name=<span class=\"hljs-string\">'aa.txt'</span> mode=<span class=\"hljs-string\">'r'</span> encoding=<span class=\"hljs-string\">'cp936'</span>&gt;<br></code></pre></td></tr></table></figure>\n\n<p>由以上输出可以看到，没指定打开模式时文件默认为只读模式（r），这时使用写入操作就会出错，常用的文件打开方式主要有以下几个。</p>\n<p>1、<strong>r</strong>，只读的方式打开（文件必须存在，若文件不存在会抛出异常）。文件以什么编码写就以什么编码打开。</p>\n<p>2、<strong>w</strong>，只写模式（文件不可读，若文件不存在，则创建一个新的文件，如果文件存在，则会清空里面的内容）</p>\n<p>3、<strong>a</strong>，只追加写的模式 （文件不可读，不存在则创建新的文件，文件存在的话，可在后面追加内容）</p>\n<p>4、<strong>b</strong>，对于非文本的文件，使用b的模式。’b’表示以字节的方式进行操作 如：rb,wb,ab 分别对应以上内容，如果以b的方式打开，读取到的内容是字节类型</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># aa.txt文件中为一行字符串“hello world!”<br>f = open(<span class=\"hljs-string\">'aa.txt'</span>, mode=<span class=\"hljs-string\">'rb'</span>)<br>print(f.read())<br>f.close()<br>####################################<br>b<span class=\"hljs-string\">'hello world!'</span><br></code></pre></td></tr></table></figure>\n\n<p>5、<strong>’+‘模式</strong>，r+: 读写模式  w+:写读模式  a+：写读模式。在 <strong>r+</strong> 模式下，应该先读，后写，如果先写，后读，同样的道理，光标移动到了文件末尾，将读取不到内容。</p>\n<p>同时使用<strong>open</strong>打开了一个文件操作完成后必须进行关闭，关闭文件使用<strong>close()</strong>。由于文件操作的这一性质，可以使用<strong>with</strong>关键字进行操作，如下：</p>\n<p><strong>with 上下文管理器（到达语句末尾，将自动关闭文件）</strong></p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fsharp\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-keyword\">open</span>(<span class=\"hljs-string\">\"*.txt\"</span>) <span class=\"hljs-keyword\">as</span> f<br>\tpass<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"与文件读写相关的一些功能函数\"><a href=\"#与文件读写相关的一些功能函数\" class=\"headerlink\" title=\"与文件读写相关的一些功能函数\"></a>与文件读写相关的一些功能函数</h3><p>1、读取文件的操作</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 读取文件，可以输入读取几个字符</span><br>read()<br><span class=\"hljs-meta\"># 读取一行数据，也可以读取参数</span><br>readline()<br><span class=\"hljs-meta\"># 读取所有行，并返回列表，之后可以通过对列表进行遍历得到数据</span><br>readlines()<br></code></pre></td></tr></table></figure>\n\n<p>2、写入文件的操作</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 向文件中写入内容</span><br>write()<br><span class=\"hljs-meta\"># 输入一个列表，将列表内容分别写入</span><br>wirtelines([])<br></code></pre></td></tr></table></figure>\n\n<p>3、其他操作（文件定位操作）</p>\n<p><strong>tell()</strong>方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。</p>\n<p><strong>seek(offset [,from])</strong>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。</p>\n"},{"title":"Python装饰器、迭代器、生成器","date":"2020-05-13T06:25:10.000Z","fileName":"python5","_content":"\n### 装饰器\n\n用于拓展原来函数功能的一种函数，返回函数的函数，在不更改原函数代码的前提下给函数增加新的功能（易于代码重用）\n\n```\n# 装饰器的常用写法\n# 输入函数，在函数内部定义返回函数\ndef decoratre(func):\n    def wrapper():\n        print('start')\n        func()\n        print(('end'))\n    return wrapper\n\n@decoratre\ndef func():\n    print(\"原函数执行\")\n\n\nif __name__ == '__main__':\n    func()\n    \n##########################################\nstart\n原函数执行\nend\n```\n\n\n\n### 带参数的装饰器\n\n#### 装饰器参数的传入\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\n\nif __name__ == '__main__':\n    func()\n    \n#########################################\nfunc:start\n原函数执行\nfunc:end\n```\n\n\n\n#### 函数参数的传入\n\n使用`*args, **kwargs`\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper(*args, **kwargs):\n            print('{}:start'.format(name))\n            res = func(*args, **kwargs)\n            print(res)\n            print('{}:end'.format(name))\n            return res\n        return wrapper\n    return decoratre\n    \n@gg('sum')\ndef sum(a, b):\n    return a+b\n    \nif __name__ == '__main__':\n    sum(1, 2)\n    \n#############################################    \nsum:start\n3\nsum:end\n```\n\n\n\n\n\n\n\n装饰器对函数进行封装时改变了原函数的名称与说明文档等信息，如下：\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\nif __name__ == '__main__':\n    print(func.__name__)\n    \n###################################################\nwrapper\n```\n\n\n\n为解决这个问题，可使用`@wraps(func)`方法，具体如下。\n\n```\nfrom functools import wraps\n\ndef gg(name):\n    def decoratre(func):\n        @wraps(func)\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\nif __name__ == '__main__':\n    print(func.__name__)\n    \n####################################################\nfunc\n```\n\n\n\n### 类的装饰器\n\n对一些类都需要添加一些共有的方法，可以用类的装饰器实现\n\n基本使用方法如下：\n\n```\ndef decorate(cls):\n    cls.func = lambda self: print(\"新方法\")\n    return cls\n\n@decorate\nclass Pig():\n    pass\n\nif __name__ == '__main__':\n    pig = Pig()\n    pig.func()\n    \n##########################################\n新方法\n```\n\n\n\n### 迭代器\n\n迭代器是一个可以**记住遍历的位置的对象**。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。字符串，列表或元组对象都可用于创建迭代器。同时，迭代器有两个基本的方法：**iter()** 和 **next()**。\n\n\n\n把一个类作为一个迭代器使用需要在类中实现两个方法`__iter__`和`__next__`。`__iter__()`方法返回一个特殊的迭代器对象。`__next__()` 方法会返回下一个迭代器对象。\n\n以下代码实现了一个计算平方的迭代器。\n\n```\nclass Square():\n    value = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.value += 1\n        return self.value ** 2\n\nif __name__ == '__main__':\n    test = Square()\n    print(test.__next__())\n    print(test.__next__())\n    print(next(test))\n```\n\n\n\n### 生成器\n\n在 Python 中，使用了` yield` 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到` yield` 时函数会暂停并保存当前所有的运行信息，返回 `yield `的值, 并在下一次执行` next() `方法时从当前位置继续运行。\n\n```\ndef square():\n    for i in range(5):\n        yield i ** 2\n```\n","source":"_posts/编程相关/Python/Python基础/5、Python装饰器、迭代器、生成器.md","raw":"---\ntitle: Python装饰器、迭代器、生成器\ndate: 2020-05-13 14:25:10\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python5\n---\n\n### 装饰器\n\n用于拓展原来函数功能的一种函数，返回函数的函数，在不更改原函数代码的前提下给函数增加新的功能（易于代码重用）\n\n```\n# 装饰器的常用写法\n# 输入函数，在函数内部定义返回函数\ndef decoratre(func):\n    def wrapper():\n        print('start')\n        func()\n        print(('end'))\n    return wrapper\n\n@decoratre\ndef func():\n    print(\"原函数执行\")\n\n\nif __name__ == '__main__':\n    func()\n    \n##########################################\nstart\n原函数执行\nend\n```\n\n\n\n### 带参数的装饰器\n\n#### 装饰器参数的传入\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\n\nif __name__ == '__main__':\n    func()\n    \n#########################################\nfunc:start\n原函数执行\nfunc:end\n```\n\n\n\n#### 函数参数的传入\n\n使用`*args, **kwargs`\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper(*args, **kwargs):\n            print('{}:start'.format(name))\n            res = func(*args, **kwargs)\n            print(res)\n            print('{}:end'.format(name))\n            return res\n        return wrapper\n    return decoratre\n    \n@gg('sum')\ndef sum(a, b):\n    return a+b\n    \nif __name__ == '__main__':\n    sum(1, 2)\n    \n#############################################    \nsum:start\n3\nsum:end\n```\n\n\n\n\n\n\n\n装饰器对函数进行封装时改变了原函数的名称与说明文档等信息，如下：\n\n```\ndef gg(name):\n    def decoratre(func):\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\nif __name__ == '__main__':\n    print(func.__name__)\n    \n###################################################\nwrapper\n```\n\n\n\n为解决这个问题，可使用`@wraps(func)`方法，具体如下。\n\n```\nfrom functools import wraps\n\ndef gg(name):\n    def decoratre(func):\n        @wraps(func)\n        def wrapper():\n            print('{}:start'.format(name))\n            func()\n            print('{}:end'.format(name))\n        return wrapper\n    return decoratre\n\n@gg('func')\ndef func():\n    print(\"原函数执行\")\n\nif __name__ == '__main__':\n    print(func.__name__)\n    \n####################################################\nfunc\n```\n\n\n\n### 类的装饰器\n\n对一些类都需要添加一些共有的方法，可以用类的装饰器实现\n\n基本使用方法如下：\n\n```\ndef decorate(cls):\n    cls.func = lambda self: print(\"新方法\")\n    return cls\n\n@decorate\nclass Pig():\n    pass\n\nif __name__ == '__main__':\n    pig = Pig()\n    pig.func()\n    \n##########################################\n新方法\n```\n\n\n\n### 迭代器\n\n迭代器是一个可以**记住遍历的位置的对象**。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。字符串，列表或元组对象都可用于创建迭代器。同时，迭代器有两个基本的方法：**iter()** 和 **next()**。\n\n\n\n把一个类作为一个迭代器使用需要在类中实现两个方法`__iter__`和`__next__`。`__iter__()`方法返回一个特殊的迭代器对象。`__next__()` 方法会返回下一个迭代器对象。\n\n以下代码实现了一个计算平方的迭代器。\n\n```\nclass Square():\n    value = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        self.value += 1\n        return self.value ** 2\n\nif __name__ == '__main__':\n    test = Square()\n    print(test.__next__())\n    print(test.__next__())\n    print(next(test))\n```\n\n\n\n### 生成器\n\n在 Python 中，使用了` yield` 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到` yield` 时函数会暂停并保存当前所有的运行信息，返回 `yield `的值, 并在下一次执行` next() `方法时从当前位置继续运行。\n\n```\ndef square():\n    for i in range(5):\n        yield i ** 2\n```\n","slug":"编程相关/Python/Python基础/5、Python装饰器、迭代器、生成器","published":1,"updated":"2021-01-11T04:33:49.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moej00fprwjs5o53he0j","content":"<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>用于拓展原来函数功能的一种函数，返回函数的函数，在不更改原函数代码的前提下给函数增加新的功能（易于代码重用）</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 装饰器的常用写法<br># 输入函数，在函数内部定义返回函数<br>def decoratre(func):<br>    def wrapper():<br>        print(<span class=\"hljs-string\">'start'</span>)<br>        func()<br>        print((<span class=\"hljs-string\">'end'</span>))<br>    return wrapper<br><br>@decoratre<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    func()<br>    <br>##########################################<br>start<br>原函数执行<br>end<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h3><h4 id=\"装饰器参数的传入\"><a href=\"#装饰器参数的传入\" class=\"headerlink\" title=\"装饰器参数的传入\"></a>装饰器参数的传入</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    func()<br>    <br>#########################################<br>func:start<br>原函数执行<br>func:end<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数参数的传入\"><a href=\"#函数参数的传入\" class=\"headerlink\" title=\"函数参数的传入\"></a>函数参数的传入</h4><p>使用<code>*args, **kwargs</code></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper(*args, **kwargs):<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            res = func(*args, **kwargs)<br>            print(res)<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>            return res<br>        return wrapper<br>    return decoratre<br>    <br>@gg(<span class=\"hljs-string\">'sum'</span>)<br>def sum(a, b):<br>    return a+b<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>    <br>#############################################    <br>sum:start<br><span class=\"hljs-number\">3</span><br>sum:end<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>装饰器对函数进行封装时改变了原函数的名称与说明文档等信息，如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    print(func.__name__)<br>    <br>###################################################<br>wrapper<br></code></pre></td></tr></table></figure>\n\n\n\n<p>为解决这个问题，可使用<code>@wraps(func)</code>方法，具体如下。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps<br><br>def gg(name):<br>    def decoratre(func):<br>        @wraps(func)<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    print(func.__name__)<br>    <br>####################################################<br>func<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类的装饰器\"><a href=\"#类的装饰器\" class=\"headerlink\" title=\"类的装饰器\"></a>类的装饰器</h3><p>对一些类都需要添加一些共有的方法，可以用类的装饰器实现</p>\n<p>基本使用方法如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def decorate(cls):<br>    cls.func = lambda self: print(<span class=\"hljs-string\">\"新方法\"</span>)<br>    return cls<br><br>@decorate<br><span class=\"hljs-keyword\">class</span> Pig():<br>    pass<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    pig = Pig()<br>    pig.func()<br>    <br>##########################################<br>新方法<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是一个可以<strong>记住遍历的位置的对象</strong>。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。字符串，列表或元组对象都可用于创建迭代器。同时，迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p>\n<p>把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__</code>和<code>__next__</code>。<code>__iter__()</code>方法返回一个特殊的迭代器对象。<code>__next__()</code> 方法会返回下一个迭代器对象。</p>\n<p>以下代码实现了一个计算平方的迭代器。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Square</span>():</span><br>    value = <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__iter__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__next__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.value += <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.value ** <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:<br>    test = Square()<br>    print(test.__next_<span class=\"hljs-number\">_</span>())<br>    print(test.__next_<span class=\"hljs-number\">_</span>())<br>    print(<span class=\"hljs-keyword\">next</span>(test))<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>在 Python 中，使用了<code>yield</code> 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到<code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code>的值, 并在下一次执行<code>next()</code>方法时从当前位置继续运行。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span><span class=\"hljs-params\">()</span></span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>        <span class=\"hljs-keyword\">yield</span> i ** <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>用于拓展原来函数功能的一种函数，返回函数的函数，在不更改原函数代码的前提下给函数增加新的功能（易于代码重用）</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"># 装饰器的常用写法<br># 输入函数，在函数内部定义返回函数<br>def decoratre(func):<br>    def wrapper():<br>        print(<span class=\"hljs-string\">'start'</span>)<br>        func()<br>        print((<span class=\"hljs-string\">'end'</span>))<br>    return wrapper<br><br>@decoratre<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    func()<br>    <br>##########################################<br>start<br>原函数执行<br>end<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"带参数的装饰器\"><a href=\"#带参数的装饰器\" class=\"headerlink\" title=\"带参数的装饰器\"></a>带参数的装饰器</h3><h4 id=\"装饰器参数的传入\"><a href=\"#装饰器参数的传入\" class=\"headerlink\" title=\"装饰器参数的传入\"></a>装饰器参数的传入</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    func()<br>    <br>#########################################<br>func:start<br>原函数执行<br>func:end<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"函数参数的传入\"><a href=\"#函数参数的传入\" class=\"headerlink\" title=\"函数参数的传入\"></a>函数参数的传入</h4><p>使用<code>*args, **kwargs</code></p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper(*args, **kwargs):<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            res = func(*args, **kwargs)<br>            print(res)<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>            return res<br>        return wrapper<br>    return decoratre<br>    <br>@gg(<span class=\"hljs-string\">'sum'</span>)<br>def sum(a, b):<br>    return a+b<br>    <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    sum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)<br>    <br>#############################################    <br>sum:start<br><span class=\"hljs-number\">3</span><br>sum:end<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>装饰器对函数进行封装时改变了原函数的名称与说明文档等信息，如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def gg(name):<br>    def decoratre(func):<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    print(func.__name__)<br>    <br>###################################################<br>wrapper<br></code></pre></td></tr></table></figure>\n\n\n\n<p>为解决这个问题，可使用<code>@wraps(func)</code>方法，具体如下。</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">from</span> functools <span class=\"hljs-keyword\">import</span> wraps<br><br>def gg(name):<br>    def decoratre(func):<br>        @wraps(func)<br>        def wrapper():<br>            print(<span class=\"hljs-string\">'&#123;&#125;:start'</span>.format(name))<br>            func()<br>            print(<span class=\"hljs-string\">'&#123;&#125;:end'</span>.format(name))<br>        return wrapper<br>    return decoratre<br><br>@gg(<span class=\"hljs-string\">'func'</span>)<br>def func():<br>    print(<span class=\"hljs-string\">\"原函数执行\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    print(func.__name__)<br>    <br>####################################################<br>func<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类的装饰器\"><a href=\"#类的装饰器\" class=\"headerlink\" title=\"类的装饰器\"></a>类的装饰器</h3><p>对一些类都需要添加一些共有的方法，可以用类的装饰器实现</p>\n<p>基本使用方法如下：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def decorate(cls):<br>    cls.func = lambda self: print(<span class=\"hljs-string\">\"新方法\"</span>)<br>    return cls<br><br>@decorate<br><span class=\"hljs-keyword\">class</span> Pig():<br>    pass<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    pig = Pig()<br>    pig.func()<br>    <br>##########################################<br>新方法<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>迭代器是一个可以<strong>记住遍历的位置的对象</strong>。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。字符串，列表或元组对象都可用于创建迭代器。同时，迭代器有两个基本的方法：<strong>iter()</strong> 和 <strong>next()</strong>。</p>\n<p>把一个类作为一个迭代器使用需要在类中实现两个方法<code>__iter__</code>和<code>__next__</code>。<code>__iter__()</code>方法返回一个特殊的迭代器对象。<code>__next__()</code> 方法会返回下一个迭代器对象。</p>\n<p>以下代码实现了一个计算平方的迭代器。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Square</span>():</span><br>    value = <span class=\"hljs-number\">0</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__iter__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span><br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__next__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.value += <span class=\"hljs-number\">1</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.value ** <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:<br>    test = Square()<br>    print(test.__next_<span class=\"hljs-number\">_</span>())<br>    print(test.__next_<span class=\"hljs-number\">_</span>())<br>    print(<span class=\"hljs-keyword\">next</span>(test))<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"生成器\"><a href=\"#生成器\" class=\"headerlink\" title=\"生成器\"></a>生成器</h3><p>在 Python 中，使用了<code>yield</code> 的函数被称为生成器（generator）。在调用生成器运行的过程中，每次遇到<code>yield</code> 时函数会暂停并保存当前所有的运行信息，返回 <code>yield</code>的值, 并在下一次执行<code>next()</code>方法时从当前位置继续运行。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square</span><span class=\"hljs-params\">()</span></span>:<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">5</span>):<br>        <span class=\"hljs-keyword\">yield</span> i ** <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n"},{"title":"Python类的使用","date":"2020-05-08T07:40:45.000Z","fileName":"python3","_content":"\n### 一些基本内容\n\n_name：单前置下划线，私有化属性或方法，类对象和子类可以访问，from somemodule import *禁止导入\n\n__name：双前置下划线，私有化属性或方法，无法在外部直接访问（名字重整所以访问不到）\n\n\\__name__：系统定义的名字，自己不要创建\n\n\n\nPython的析构函数`__del__(self)`。默认会直接进行操作。\n\n```\n# 判断是否为子类\nissubclass(cat, animal)\n```\n\n\n\n### 调用父类方法\n`super()`方法\n\n若方法重名，先继承的优先调用\n\n```\nclass A():\n    def test(self):\n        print(\"我是爸爸\")\n\nclass B(A):\n    def test(self):\n        super().test()\n        print(\"我是儿子\")\n        \nif __name__ == '__main__':\n    b = B()\n    b.test()\n    \n#############################################\n我是爸爸\n我是儿子\n```\n\n\n\n### @property\n\n@property：将类的方法当做属性来使用（可以简单理解为调用时可以将函数的括号去掉）\n\n一般用来获取某些数据（如获取私有变量），不会向函数中传递参数\n\n```\nclass pig():\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n        \np = pig(\"猪\")\nprint(p.name) # 等价于不加@property时的，p.name()\n\n# 猪\n```\n\n\n\n@*.setter 表示可读可写，可以向该函数中传递参数，使用方法为`对象.函数名 = 参数值`。一般用来设置某些数据。\n\n```\nclass Pig():\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n\n    @name.setter\n    def name(self, name):\n        # 在这即可对需要设置的值进行类型判断等操作\n        self.__name = name\n        \nif __name__ == '__main__':\n    p = Pig('pig1')\n    print(p.name)\n    p.name = 'pig2' # 可进行更改\n    print(p.name)\n  \n​```\npig1\npig2\n​```\n```\n\n\n\n### \\__slots__<限制类中的属性>\n\n为指定的类设置一个静态属性列表，为属性很少的类节约内存空间，同时提供更快的属性访问速度\n\n使用`__slots__`后**不允许给类添加新的属性与方法**（对其子类也适用，子类新加的会拼接到后面）。示例如下：\n\n```\n# 不加__slots__\nclass B():\n    pass\n    \nb = B()\nb.gg = 1\nprint(b.gg)\n\n###############################\n1\n```\n\n```\n# 加上__slots__\nclass A():\n    __slots__ = ('name')\n    def __init__(self, name):\n        self.name = name\n        \nif __name__ == '__main__':\n    a = A('aa')\n    a.gg = 1\n    print(a.gg)\n    \n###############################################\nTraceback (most recent call last):\n  File \"C:/Users/lenovo/Desktop/python学习/decorate.py\", line 13, in <module>\n    a.gg = 1\nAttributeError: 'A' object has no attribute 'gg'\n```\n\n可见，使用\\__slots__指定了类的属性后就无法对实例添加属性了\n\n\n\n### Python类中的方法\n\nPython类中的方法主要可以分为以下三种：\n\n* 实例方法：需要绑定要一个对象上，第一个参数默认使用self，会把对象作为第一个参数传递进来\n* 静态方法：使用装饰器@staticmethod进行定义，类和对象都可以调用，不需要默认参数\n* 类方法：使用装饰器@classmethod进行定义，类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来\n\n\n\n#### @staticmethod，静态方法\n\n静态方法，可以直接通过类名对其进行调用（类的实例也可以调用 ）。相当于变为了\"类的方法\"。<类和对象都可以调用，不需要默认参数（如self等）>\n\n```\nclass Pig():\n    @staticmethod\n    def func():\n        print(\"聪明的猪\")\n        \nPig()\n\n#############################################\n聪明的猪\n```\n\n\n\n#### @classmethod，类方法\n\n用于表示类的方法，可以**不实例化调用类的属性和方法**。有一个`cls`参数用于表示类本身。<类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来>\n\n```\nclass A():\n    def test(self):\n        print(\"test\")\n\n    @classmethod\n    def gg(cls):\n        cls().test()\n        \nA.gg()\n\n############################################\ntest\n```\n\n\n\n#### 动态添加实例方法\n\n```\nclass A():\n\tpass\n\t\ndef func(self):\n\tpass\n\t\na = A()\na.func = types.MethodType(func, a)\t# 给实例添加方法\n```\n\n如上，可以使用types.MethodType的方式给类的实例添加其实例方法，但该对象的另一个实例则不具备该方法。\n\n","source":"_posts/编程相关/Python/Python基础/3、Python类的使用.md","raw":"---\ntitle: Python类的使用\ndate: 2020-05-08 15:40:45\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python3\n---\n\n### 一些基本内容\n\n_name：单前置下划线，私有化属性或方法，类对象和子类可以访问，from somemodule import *禁止导入\n\n__name：双前置下划线，私有化属性或方法，无法在外部直接访问（名字重整所以访问不到）\n\n\\__name__：系统定义的名字，自己不要创建\n\n\n\nPython的析构函数`__del__(self)`。默认会直接进行操作。\n\n```\n# 判断是否为子类\nissubclass(cat, animal)\n```\n\n\n\n### 调用父类方法\n`super()`方法\n\n若方法重名，先继承的优先调用\n\n```\nclass A():\n    def test(self):\n        print(\"我是爸爸\")\n\nclass B(A):\n    def test(self):\n        super().test()\n        print(\"我是儿子\")\n        \nif __name__ == '__main__':\n    b = B()\n    b.test()\n    \n#############################################\n我是爸爸\n我是儿子\n```\n\n\n\n### @property\n\n@property：将类的方法当做属性来使用（可以简单理解为调用时可以将函数的括号去掉）\n\n一般用来获取某些数据（如获取私有变量），不会向函数中传递参数\n\n```\nclass pig():\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n        \np = pig(\"猪\")\nprint(p.name) # 等价于不加@property时的，p.name()\n\n# 猪\n```\n\n\n\n@*.setter 表示可读可写，可以向该函数中传递参数，使用方法为`对象.函数名 = 参数值`。一般用来设置某些数据。\n\n```\nclass Pig():\n    def __init__(self, name):\n        self.__name = name\n\n    @property\n    def name(self):\n        return self.__name\n\n    @name.setter\n    def name(self, name):\n        # 在这即可对需要设置的值进行类型判断等操作\n        self.__name = name\n        \nif __name__ == '__main__':\n    p = Pig('pig1')\n    print(p.name)\n    p.name = 'pig2' # 可进行更改\n    print(p.name)\n  \n​```\npig1\npig2\n​```\n```\n\n\n\n### \\__slots__<限制类中的属性>\n\n为指定的类设置一个静态属性列表，为属性很少的类节约内存空间，同时提供更快的属性访问速度\n\n使用`__slots__`后**不允许给类添加新的属性与方法**（对其子类也适用，子类新加的会拼接到后面）。示例如下：\n\n```\n# 不加__slots__\nclass B():\n    pass\n    \nb = B()\nb.gg = 1\nprint(b.gg)\n\n###############################\n1\n```\n\n```\n# 加上__slots__\nclass A():\n    __slots__ = ('name')\n    def __init__(self, name):\n        self.name = name\n        \nif __name__ == '__main__':\n    a = A('aa')\n    a.gg = 1\n    print(a.gg)\n    \n###############################################\nTraceback (most recent call last):\n  File \"C:/Users/lenovo/Desktop/python学习/decorate.py\", line 13, in <module>\n    a.gg = 1\nAttributeError: 'A' object has no attribute 'gg'\n```\n\n可见，使用\\__slots__指定了类的属性后就无法对实例添加属性了\n\n\n\n### Python类中的方法\n\nPython类中的方法主要可以分为以下三种：\n\n* 实例方法：需要绑定要一个对象上，第一个参数默认使用self，会把对象作为第一个参数传递进来\n* 静态方法：使用装饰器@staticmethod进行定义，类和对象都可以调用，不需要默认参数\n* 类方法：使用装饰器@classmethod进行定义，类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来\n\n\n\n#### @staticmethod，静态方法\n\n静态方法，可以直接通过类名对其进行调用（类的实例也可以调用 ）。相当于变为了\"类的方法\"。<类和对象都可以调用，不需要默认参数（如self等）>\n\n```\nclass Pig():\n    @staticmethod\n    def func():\n        print(\"聪明的猪\")\n        \nPig()\n\n#############################################\n聪明的猪\n```\n\n\n\n#### @classmethod，类方法\n\n用于表示类的方法，可以**不实例化调用类的属性和方法**。有一个`cls`参数用于表示类本身。<类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来>\n\n```\nclass A():\n    def test(self):\n        print(\"test\")\n\n    @classmethod\n    def gg(cls):\n        cls().test()\n        \nA.gg()\n\n############################################\ntest\n```\n\n\n\n#### 动态添加实例方法\n\n```\nclass A():\n\tpass\n\t\ndef func(self):\n\tpass\n\t\na = A()\na.func = types.MethodType(func, a)\t# 给实例添加方法\n```\n\n如上，可以使用types.MethodType的方式给类的实例添加其实例方法，但该对象的另一个实例则不具备该方法。\n\n","slug":"编程相关/Python/Python基础/3、Python类的使用","published":1,"updated":"2021-01-11T04:34:06.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moel00ftrwjsgxubcpyk","content":"<h3 id=\"一些基本内容\"><a href=\"#一些基本内容\" class=\"headerlink\" title=\"一些基本内容\"></a>一些基本内容</h3><p>_name：单前置下划线，私有化属性或方法，类对象和子类可以访问，from somemodule import *禁止导入</p>\n<p>__name：双前置下划线，私有化属性或方法，无法在外部直接访问（名字重整所以访问不到）</p>\n<p>__name__：系统定义的名字，自己不要创建</p>\n<p>Python的析构函数<code>__del__(self)</code>。默认会直接进行操作。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 判断是否为子类</span><br>issubclass(cat, animal)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h3><p><code>super()</code>方法</p>\n<p>若方法重名，先继承的优先调用</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">class</span> A():<br>    def test(self):<br>        print(<span class=\"hljs-string\">\"我是爸爸\"</span>)<br><br><span class=\"hljs-keyword\">class</span> B(A):<br>    def test(self):<br>        super().test()<br>        print(<span class=\"hljs-string\">\"我是儿子\"</span>)<br>        <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    b = B()<br>    b.test()<br>    <br>#############################################<br>我是爸爸<br>我是儿子<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p>@property：将类的方法当做属性来使用（可以简单理解为调用时可以将函数的括号去掉）</p>\n<p>一般用来获取某些数据（如获取私有变量），不会向函数中传递参数</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">pig</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.__name = name<br><br>    @property<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.__name<br>        <br>p = pig(<span class=\"hljs-string\">\"猪\"</span>)<br>print(p.name) <span class=\"hljs-comment\"># 等价于不加<span class=\"hljs-doctag\">@property</span>时的，p.name()</span><br><br><span class=\"hljs-comment\"># 猪</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>@*.setter 表示可读可写，可以向该函数中传递参数，使用方法为<code>对象.函数名 = 参数值</code>。一般用来设置某些数据。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Pig</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.__name = name<br><br>    @property<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.__name<br><br>    @name.setter<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-comment\"># 在这即可对需要设置的值进行类型判断等操作</span><br>        <span class=\"hljs-keyword\">self</span>.__name = name<br>        <br><span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:<br>    p = Pig(<span class=\"hljs-string\">'pig1'</span>)<br>    print(p.name)<br>    p.name = <span class=\"hljs-string\">'pig2'</span> <span class=\"hljs-comment\"># 可进行更改</span><br>    print(p.name)<br>  <br>​<br></code></pre></td></tr></table></figure>\n<p>pig1<br>pig2<br>​```</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>### \\__slots__&lt;限制类中的属性&gt;<br><br>为指定的类设置一个静态属性列表，为属性很少的类节约内存空间，同时提供更快的属性访问速度<br><br>使用`__slots__`后**不允许给类添加新的属性与方法**（对其子类也适用，子类新加的会拼接到后面）。示例如下：</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"不加slots\"><a href=\"#不加slots\" class=\"headerlink\" title=\"不加slots\"></a>不加<strong>slots</strong></h1><p>class B():<br>    pass</p>\n<p>b = B()<br>b.gg = 1<br>print(b.gg)</p>\n<p>###############################<br>1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n<h1 id=\"加上slots\"><a href=\"#加上slots\" class=\"headerlink\" title=\"加上slots\"></a>加上<strong>slots</strong></h1><p>class A():<br>    <strong>slots</strong> = (‘name’)<br>    def <strong>init</strong>(self, name):<br>        self.name = name</p>\n<p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    a = A(‘aa’)<br>    a.gg = 1<br>    print(a.gg)</p>\n<p>###############################################<br>Traceback (most recent call last):<br>  File “C:/Users/lenovo/Desktop/python学习/decorate.py”, line 13, in <module><br>    a.gg = 1<br>AttributeError: ‘A’ object has no attribute ‘gg’</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><br>可见，使用\\__slots__指定了类的属性后就无法对实例添加属性了<br><br><br><br>### Python类中的方法<br><br>Python类中的方法主要可以分为以下三种：<br><br>* 实例方法：需要绑定要一个对象上，第一个参数默认使用self，会把对象作为第一个参数传递进来<br>* 静态方法：使用装饰器@staticmethod进行定义，类和对象都可以调用，不需要默认参数<br>* 类方法：使用装饰器@classmethod进行定义，类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来<br><br><br><br>#### @staticmethod，静态方法<br><br>静态方法，可以直接通过类名对其进行调用（类的实例也可以调用 ）。相当于变为了<span class=\"hljs-string\">\"类的方法\"</span>。&lt;类和对象都可以调用，不需要默认参数（如self等）&gt;<br></code></pre></td></tr></table></figure>\n<p>class Pig():<br>    @staticmethod<br>    def func():<br>        print(“聪明的猪”)</p>\n<p>Pig()</p>\n<p>#############################################<br>聪明的猪</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>#### @classmethod，类方法<br><br>用于表示类的方法，可以**不实例化调用类的属性和方法**。有一个`cls`参数用于表示类本身。&lt;类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来&gt;</span><br></code></pre></td></tr></table></figure>\n<p>class A():<br>    def test(self):<br>        print(“test”)</p>\n<pre><code>@classmethod\ndef gg(cls):\n    cls().test()</code></pre><p>A.gg()</p>\n<p>############################################<br>test</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>#### 动态添加实例方法</span><br></code></pre></td></tr></table></figure>\n<p>class A():<br>    pass</p>\n<p>def func(self):<br>    pass</p>\n<p>a = A()<br>a.func = types.MethodType(func, a)    # 给实例添加方法</p>\n<pre><code>\n如上，可以使用types.MethodType的方式给类的实例添加其实例方法，但该对象的另一个实例则不具备该方法。\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一些基本内容\"><a href=\"#一些基本内容\" class=\"headerlink\" title=\"一些基本内容\"></a>一些基本内容</h3><p>_name：单前置下划线，私有化属性或方法，类对象和子类可以访问，from somemodule import *禁止导入</p>\n<p>__name：双前置下划线，私有化属性或方法，无法在外部直接访问（名字重整所以访问不到）</p>\n<p>__name__：系统定义的名字，自己不要创建</p>\n<p>Python的析构函数<code>__del__(self)</code>。默认会直接进行操作。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 判断是否为子类</span><br>issubclass(cat, animal)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"调用父类方法\"><a href=\"#调用父类方法\" class=\"headerlink\" title=\"调用父类方法\"></a>调用父类方法</h3><p><code>super()</code>方法</p>\n<p>若方法重名，先继承的优先调用</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">class</span> A():<br>    def test(self):<br>        print(<span class=\"hljs-string\">\"我是爸爸\"</span>)<br><br><span class=\"hljs-keyword\">class</span> B(A):<br>    def test(self):<br>        super().test()<br>        print(<span class=\"hljs-string\">\"我是儿子\"</span>)<br>        <br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    b = B()<br>    b.test()<br>    <br>#############################################<br>我是爸爸<br>我是儿子<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"property\"><a href=\"#property\" class=\"headerlink\" title=\"@property\"></a>@property</h3><p>@property：将类的方法当做属性来使用（可以简单理解为调用时可以将函数的括号去掉）</p>\n<p>一般用来获取某些数据（如获取私有变量），不会向函数中传递参数</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">pig</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.__name = name<br><br>    @property<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.__name<br>        <br>p = pig(<span class=\"hljs-string\">\"猪\"</span>)<br>print(p.name) <span class=\"hljs-comment\"># 等价于不加<span class=\"hljs-doctag\">@property</span>时的，p.name()</span><br><br><span class=\"hljs-comment\"># 猪</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>@*.setter 表示可读可写，可以向该函数中传递参数，使用方法为<code>对象.函数名 = 参数值</code>。一般用来设置某些数据。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Pig</span>():</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-keyword\">self</span>.__name = name<br><br>    @property<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>)</span></span>:<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.__name<br><br>    @name.setter<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">name</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">self</span>, name)</span></span>:<br>        <span class=\"hljs-comment\"># 在这即可对需要设置的值进行类型判断等操作</span><br>        <span class=\"hljs-keyword\">self</span>.__name = name<br>        <br><span class=\"hljs-keyword\">if</span> __name_<span class=\"hljs-number\">_</span> == <span class=\"hljs-string\">'__main__'</span>:<br>    p = Pig(<span class=\"hljs-string\">'pig1'</span>)<br>    print(p.name)<br>    p.name = <span class=\"hljs-string\">'pig2'</span> <span class=\"hljs-comment\"># 可进行更改</span><br>    print(p.name)<br>  <br>​<br></code></pre></td></tr></table></figure>\n<p>pig1<br>pig2<br>​```</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>### \\__slots__&lt;限制类中的属性&gt;<br><br>为指定的类设置一个静态属性列表，为属性很少的类节约内存空间，同时提供更快的属性访问速度<br><br>使用`__slots__`后**不允许给类添加新的属性与方法**（对其子类也适用，子类新加的会拼接到后面）。示例如下：</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"不加slots\"><a href=\"#不加slots\" class=\"headerlink\" title=\"不加slots\"></a>不加<strong>slots</strong></h1><p>class B():<br>    pass</p>\n<p>b = B()<br>b.gg = 1<br>print(b.gg)</p>\n<p>###############################<br>1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n<h1 id=\"加上slots\"><a href=\"#加上slots\" class=\"headerlink\" title=\"加上slots\"></a>加上<strong>slots</strong></h1><p>class A():<br>    <strong>slots</strong> = (‘name’)<br>    def <strong>init</strong>(self, name):<br>        self.name = name</p>\n<p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    a = A(‘aa’)<br>    a.gg = 1<br>    print(a.gg)</p>\n<p>###############################################<br>Traceback (most recent call last):<br>  File “C:/Users/lenovo/Desktop/python学习/decorate.py”, line 13, in <module><br>    a.gg = 1<br>AttributeError: ‘A’ object has no attribute ‘gg’</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><br>可见，使用\\__slots__指定了类的属性后就无法对实例添加属性了<br><br><br><br>### Python类中的方法<br><br>Python类中的方法主要可以分为以下三种：<br><br>* 实例方法：需要绑定要一个对象上，第一个参数默认使用self，会把对象作为第一个参数传递进来<br>* 静态方法：使用装饰器@staticmethod进行定义，类和对象都可以调用，不需要默认参数<br>* 类方法：使用装饰器@classmethod进行定义，类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来<br><br><br><br>#### @staticmethod，静态方法<br><br>静态方法，可以直接通过类名对其进行调用（类的实例也可以调用 ）。相当于变为了<span class=\"hljs-string\">\"类的方法\"</span>。&lt;类和对象都可以调用，不需要默认参数（如self等）&gt;<br></code></pre></td></tr></table></figure>\n<p>class Pig():<br>    @staticmethod<br>    def func():<br>        print(“聪明的猪”)</p>\n<p>Pig()</p>\n<p>#############################################<br>聪明的猪</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>#### @classmethod，类方法<br><br>用于表示类的方法，可以**不实例化调用类的属性和方法**。有一个`cls`参数用于表示类本身。&lt;类和对象都可以调用，第一个参数默认使用cls，会把类作为第一个参数传递进来&gt;</span><br></code></pre></td></tr></table></figure>\n<p>class A():<br>    def test(self):<br>        print(“test”)</p>\n<pre><code>@classmethod\ndef gg(cls):\n    cls().test()</code></pre><p>A.gg()</p>\n<p>############################################<br>test</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><br><br><span class=\"clean\"><br>#### 动态添加实例方法</span><br></code></pre></td></tr></table></figure>\n<p>class A():<br>    pass</p>\n<p>def func(self):<br>    pass</p>\n<p>a = A()<br>a.func = types.MethodType(func, a)    # 给实例添加方法</p>\n<pre><code>\n如上，可以使用types.MethodType的方式给类的实例添加其实例方法，但该对象的另一个实例则不具备该方法。\n</code></pre>"},{"title":"Python异常处理","date":"2020-05-15T07:15:49.000Z","fileName":"python6","_content":"\n### 异常基本概述\n\n1. 每个异常都是某个类的实例\n2. 发生了异常如果不捕获，程序将终止执行\n3. 有一些内置的异常类（Exception等）\n\n\n\n### 捕获异常\n\n `try except`句式\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 0))\n    except:\n        print(\"出错了\")\n        \n#############################\n出错了\n```\n\n检测出错类型的方法\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except ZeroDivisionError:\n        print(\"除数为0\")\n    except TypeError:\n        print(\"类型出错\")\n        \n#######################################\n类型出错\n```\n\n\n\n获取出错信息\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except (ZeroDivisionError, TypeError) as e:\n        print(e)\n        \n############################################\nunsupported operand type(s) for /: 'int' and 'str'\n```\n\n\n\n处理必须处理的语句（finally中的语句不管有没有问题都会执行）\n\n`try except finally`语句\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except (ZeroDivisionError, TypeError) as e:\n        print(e)\n    finally:\n        print(\"我必须处理\")\n        \n#################################################\nunsupported operand type(s) for /: 'int' and 'str'\n我必须处理\n```\n\n\n\n### 自定义异常和抛出异常\n\n通过继承**Exception类**来定义异常，通过使用**raise**关键字来抛出异常。\n\n1、**自定义异常**。通过创建一个继承自Exception类的新的异常类来记录自己的异常\n\n```\nclass test(Exception):\n    pass\n\nif __name__ == '__main__':\n    if True:\n        raise test('出现了自定义的测试错误')\n        \n######################################################\nTraceback (most recent call last):\n  File \"C:/Users/lenovo/Desktop/python学习/decorate.py\", line 7, in <module>\n    raise test('出现了自定义的测试错误')\n__main__.test: 出现了自定义的测试错误\n```\n\n","source":"_posts/编程相关/Python/Python基础/6、Python异常处理.md","raw":"---\ntitle: Python异常处理\ndate: 2020-05-15 15:15:49\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python6\n---\n\n### 异常基本概述\n\n1. 每个异常都是某个类的实例\n2. 发生了异常如果不捕获，程序将终止执行\n3. 有一些内置的异常类（Exception等）\n\n\n\n### 捕获异常\n\n `try except`句式\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 0))\n    except:\n        print(\"出错了\")\n        \n#############################\n出错了\n```\n\n检测出错类型的方法\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except ZeroDivisionError:\n        print(\"除数为0\")\n    except TypeError:\n        print(\"类型出错\")\n        \n#######################################\n类型出错\n```\n\n\n\n获取出错信息\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except (ZeroDivisionError, TypeError) as e:\n        print(e)\n        \n############################################\nunsupported operand type(s) for /: 'int' and 'str'\n```\n\n\n\n处理必须处理的语句（finally中的语句不管有没有问题都会执行）\n\n`try except finally`语句\n\n```\ndef test(a, b):\n    return a/b\n\nif __name__ == '__main__':\n    try:\n        print(test(2, 'a'))\n    except (ZeroDivisionError, TypeError) as e:\n        print(e)\n    finally:\n        print(\"我必须处理\")\n        \n#################################################\nunsupported operand type(s) for /: 'int' and 'str'\n我必须处理\n```\n\n\n\n### 自定义异常和抛出异常\n\n通过继承**Exception类**来定义异常，通过使用**raise**关键字来抛出异常。\n\n1、**自定义异常**。通过创建一个继承自Exception类的新的异常类来记录自己的异常\n\n```\nclass test(Exception):\n    pass\n\nif __name__ == '__main__':\n    if True:\n        raise test('出现了自定义的测试错误')\n        \n######################################################\nTraceback (most recent call last):\n  File \"C:/Users/lenovo/Desktop/python学习/decorate.py\", line 7, in <module>\n    raise test('出现了自定义的测试错误')\n__main__.test: 出现了自定义的测试错误\n```\n\n","slug":"编程相关/Python/Python基础/6、Python异常处理","published":1,"updated":"2021-01-11T04:34:40.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moen00fxrwjs97bf8wmr","content":"<h3 id=\"异常基本概述\"><a href=\"#异常基本概述\" class=\"headerlink\" title=\"异常基本概述\"></a>异常基本概述</h3><ol>\n<li>每个异常都是某个类的实例</li>\n<li>发生了异常如果不捕获，程序将终止执行</li>\n<li>有一些内置的异常类（Exception等）</li>\n</ol>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><p> <code>try except</code>句式</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>))<br>    except:<br>        print(<span class=\"hljs-string\">\"出错了\"</span>)<br>        <br>#############################<br>出错了<br></code></pre></td></tr></table></figure>\n\n<p>检测出错类型的方法</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except ZeroDivisionError:<br>        print(<span class=\"hljs-string\">\"除数为0\"</span>)<br>    except TypeError:<br>        print(<span class=\"hljs-string\">\"类型出错\"</span>)<br>        <br>#######################################<br>类型出错<br></code></pre></td></tr></table></figure>\n\n\n\n<p>获取出错信息</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except (ZeroDivisionError, TypeError) <span class=\"hljs-keyword\">as</span> e:<br>        print(e)<br>        <br>############################################<br>unsupported operand type(s) for /: <span class=\"hljs-string\">'int'</span> and <span class=\"hljs-string\">'str'</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>处理必须处理的语句（finally中的语句不管有没有问题都会执行）</p>\n<p><code>try except finally</code>语句</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except (ZeroDivisionError, TypeError) <span class=\"hljs-keyword\">as</span> e:<br>        print(e)<br>    finally:<br>        print(<span class=\"hljs-string\">\"我必须处理\"</span>)<br>        <br>#################################################<br>unsupported operand type(s) for /: <span class=\"hljs-string\">'int'</span> and <span class=\"hljs-string\">'str'</span><br>我必须处理<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"自定义异常和抛出异常\"><a href=\"#自定义异常和抛出异常\" class=\"headerlink\" title=\"自定义异常和抛出异常\"></a>自定义异常和抛出异常</h3><p>通过继承<strong>Exception类</strong>来定义异常，通过使用<strong>raise</strong>关键字来抛出异常。</p>\n<p>1、<strong>自定义异常</strong>。通过创建一个继承自Exception类的新的异常类来记录自己的异常</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">class</span> test(Exception):<br>    pass<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span>:<br>        raise test(<span class=\"hljs-string\">'出现了自定义的测试错误'</span>)<br>        <br>######################################################<br>Traceback (most recent call last):<br>  File <span class=\"hljs-string\">\"C:/Users/lenovo/Desktop/python学习/decorate.py\"</span>, line <span class=\"hljs-number\">7</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;<br>    raise test(<span class=\"hljs-string\">'出现了自定义的测试错误'</span>)<br>__main__.test: 出现了自定义的测试错误<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"异常基本概述\"><a href=\"#异常基本概述\" class=\"headerlink\" title=\"异常基本概述\"></a>异常基本概述</h3><ol>\n<li>每个异常都是某个类的实例</li>\n<li>发生了异常如果不捕获，程序将终止执行</li>\n<li>有一些内置的异常类（Exception等）</li>\n</ol>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><p> <code>try except</code>句式</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>))<br>    except:<br>        print(<span class=\"hljs-string\">\"出错了\"</span>)<br>        <br>#############################<br>出错了<br></code></pre></td></tr></table></figure>\n\n<p>检测出错类型的方法</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except ZeroDivisionError:<br>        print(<span class=\"hljs-string\">\"除数为0\"</span>)<br>    except TypeError:<br>        print(<span class=\"hljs-string\">\"类型出错\"</span>)<br>        <br>#######################################<br>类型出错<br></code></pre></td></tr></table></figure>\n\n\n\n<p>获取出错信息</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except (ZeroDivisionError, TypeError) <span class=\"hljs-keyword\">as</span> e:<br>        print(e)<br>        <br>############################################<br>unsupported operand type(s) for /: <span class=\"hljs-string\">'int'</span> and <span class=\"hljs-string\">'str'</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>处理必须处理的语句（finally中的语句不管有没有问题都会执行）</p>\n<p><code>try except finally</code>语句</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def test(a, b):<br>    return a/b<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    try:<br>        print(test(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>))<br>    except (ZeroDivisionError, TypeError) <span class=\"hljs-keyword\">as</span> e:<br>        print(e)<br>    finally:<br>        print(<span class=\"hljs-string\">\"我必须处理\"</span>)<br>        <br>#################################################<br>unsupported operand type(s) for /: <span class=\"hljs-string\">'int'</span> and <span class=\"hljs-string\">'str'</span><br>我必须处理<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"自定义异常和抛出异常\"><a href=\"#自定义异常和抛出异常\" class=\"headerlink\" title=\"自定义异常和抛出异常\"></a>自定义异常和抛出异常</h3><p>通过继承<strong>Exception类</strong>来定义异常，通过使用<strong>raise</strong>关键字来抛出异常。</p>\n<p>1、<strong>自定义异常</strong>。通过创建一个继承自Exception类的新的异常类来记录自己的异常</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">class</span> test(Exception):<br>    pass<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span>:<br>        raise test(<span class=\"hljs-string\">'出现了自定义的测试错误'</span>)<br>        <br>######################################################<br>Traceback (most recent call last):<br>  File <span class=\"hljs-string\">\"C:/Users/lenovo/Desktop/python学习/decorate.py\"</span>, line <span class=\"hljs-number\">7</span>, <span class=\"hljs-keyword\">in</span> &lt;<span class=\"hljs-keyword\">module</span>&gt;<br>    raise test(<span class=\"hljs-string\">'出现了自定义的测试错误'</span>)<br>__main__.test: 出现了自定义的测试错误<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Python中的魔法方法（Magic Method）","date":"2020-08-26T01:19:41.000Z","fileName":"python-magic-method","_content":"\n### 什么是魔法函数\n\n所谓魔法函数（Magic Methods），是Python的一种高级语法，允许你在类中自定义函数（函数名格式一般为\\_\\_xx\\_\\_），并绑定到类的特殊方法中。比如在类A中自定义`__str__()`函数，则在调用`str(A())`时，会自动调用`__str__()`函数，并返回相应的结果。在我们平时的使用中，可能经常使用`__init__`函数和`__del__`函数，其实这也是魔法函数的一种。\n\nPython中每一个魔法函数都对应了一个Python内置函数或操作。比如`__str__`对应str函数。\n\n### 构造与析构\n\n当创建一个对象时，`__new__`被调用创建类并返回这个类的实例，`__init__`将传入的参数来初始化该实例。\n\n> 1. `__new__`是一个静态方法，而`__init__`是一个实例方法.\n> 2. `__new__`方法会返回一个创建的实例，而`__init__`什么都不返回.\n> 3. 只有在`__new__`返回一个cls的实例时后面的`__init__`才能被调用.\n> 4. 当创建一个新实例时调用`__new__`，初始化一个实例时用`__init__`.\n\n当对象生命周期结束时，`__del__`会被调用（作为析构函数）\n\n\n\n### 二元操作符\n\n```\n+\tobject.__add__(self, other)\n-\tobject.__sub__(self, other)\n*\tobject.__mul__(self, other)\n//\tobject.__floordiv__(self, other)\n/\tobject.__div__(self, other)\n%\tobject.__mod__(self, other)\n**\tobject.__pow__(self, other[, modulo])\n<<\tobject.__lshift__(self, other)\n>>\tobject.__rshift__(self, other)\n&\tobject.__and__(self, other)\n^\tobject.__xor__(self, other)\n|\tobject.__or__(self, other)\n```\n\n\n\n### 扩展二元操作符\n\n```\n+=\tobject.__iadd__(self, other)\n-=\tobject.__isub__(self, other)\n*=\tobject.__imul__(self, other)\n/=\tobject.__idiv__(self, other)\n//=\tobject.__ifloordiv__(self, other)\n%=\tobject.__imod__(self, other)\n**=\tobject.__ipow__(self, other[, modulo])\n<<=\tobject.__ilshift__(self, other)\n>>=\tobject.__irshift__(self, other)\n&=\tobject.__iand__(self, other)\n^=\tobject.__ixor__(self, other)\n|=\tobject.__ior__(self, other)\n```\n\n\n\n### 比较方法\n\n```\n<\tobject.__lt__(self, other)\n<=\tobject.__le__(self, other)\n==\tobject.__eq__(self, other)\n!=\tobject.__ne__(self, other)\n>=\tobject.__ge__(self, other)\n>\tobject.__gt__(self, other)\n```\n\n\n\n### 类的表示、输出\n\n```\nstr()\tobject.__str__(self) \nrepr()\tobject.__repr__(self)\nlen()\tobject.__len__(self)\nhash()\tobject.__hash__(self) \nbool()\tobject.__nonzero__(self) \ndir()\tobject.__dir__(self)\nsys.getsizeof()\tobject.__sizeof__(self)\n```\n\n\n\n### 类容器\n\n```\nlen()\tobject.__len__(self)\nself[key]\tobject.__getitem__(self, key)\nself[key] = value\tobject.__setitem__(self, key, value)\ndel[key] object.__delitem__(self, key)\niter()\tobject.__iter__(self)\nreversed()\tobject.__reversed__(self)\nin操作\tobject.__contains__(self, item)\n字典key不存在时\tobject.__missing__(self, key)\n```\n\n\n\n\n\n### 参考\n\nhttps://zhuanlan.zhihu.com/p/24567545\n\nhttps://www.cnblogs.com/jhao/p/6022928.html","source":"_posts/编程相关/Python/Python基础/Python中的魔法方法（Magic Method）.md","raw":"---\ntitle: Python中的魔法方法（Magic Method）\ndate: 2020-08-26 09:19:41\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python-magic-method\n---\n\n### 什么是魔法函数\n\n所谓魔法函数（Magic Methods），是Python的一种高级语法，允许你在类中自定义函数（函数名格式一般为\\_\\_xx\\_\\_），并绑定到类的特殊方法中。比如在类A中自定义`__str__()`函数，则在调用`str(A())`时，会自动调用`__str__()`函数，并返回相应的结果。在我们平时的使用中，可能经常使用`__init__`函数和`__del__`函数，其实这也是魔法函数的一种。\n\nPython中每一个魔法函数都对应了一个Python内置函数或操作。比如`__str__`对应str函数。\n\n### 构造与析构\n\n当创建一个对象时，`__new__`被调用创建类并返回这个类的实例，`__init__`将传入的参数来初始化该实例。\n\n> 1. `__new__`是一个静态方法，而`__init__`是一个实例方法.\n> 2. `__new__`方法会返回一个创建的实例，而`__init__`什么都不返回.\n> 3. 只有在`__new__`返回一个cls的实例时后面的`__init__`才能被调用.\n> 4. 当创建一个新实例时调用`__new__`，初始化一个实例时用`__init__`.\n\n当对象生命周期结束时，`__del__`会被调用（作为析构函数）\n\n\n\n### 二元操作符\n\n```\n+\tobject.__add__(self, other)\n-\tobject.__sub__(self, other)\n*\tobject.__mul__(self, other)\n//\tobject.__floordiv__(self, other)\n/\tobject.__div__(self, other)\n%\tobject.__mod__(self, other)\n**\tobject.__pow__(self, other[, modulo])\n<<\tobject.__lshift__(self, other)\n>>\tobject.__rshift__(self, other)\n&\tobject.__and__(self, other)\n^\tobject.__xor__(self, other)\n|\tobject.__or__(self, other)\n```\n\n\n\n### 扩展二元操作符\n\n```\n+=\tobject.__iadd__(self, other)\n-=\tobject.__isub__(self, other)\n*=\tobject.__imul__(self, other)\n/=\tobject.__idiv__(self, other)\n//=\tobject.__ifloordiv__(self, other)\n%=\tobject.__imod__(self, other)\n**=\tobject.__ipow__(self, other[, modulo])\n<<=\tobject.__ilshift__(self, other)\n>>=\tobject.__irshift__(self, other)\n&=\tobject.__iand__(self, other)\n^=\tobject.__ixor__(self, other)\n|=\tobject.__ior__(self, other)\n```\n\n\n\n### 比较方法\n\n```\n<\tobject.__lt__(self, other)\n<=\tobject.__le__(self, other)\n==\tobject.__eq__(self, other)\n!=\tobject.__ne__(self, other)\n>=\tobject.__ge__(self, other)\n>\tobject.__gt__(self, other)\n```\n\n\n\n### 类的表示、输出\n\n```\nstr()\tobject.__str__(self) \nrepr()\tobject.__repr__(self)\nlen()\tobject.__len__(self)\nhash()\tobject.__hash__(self) \nbool()\tobject.__nonzero__(self) \ndir()\tobject.__dir__(self)\nsys.getsizeof()\tobject.__sizeof__(self)\n```\n\n\n\n### 类容器\n\n```\nlen()\tobject.__len__(self)\nself[key]\tobject.__getitem__(self, key)\nself[key] = value\tobject.__setitem__(self, key, value)\ndel[key] object.__delitem__(self, key)\niter()\tobject.__iter__(self)\nreversed()\tobject.__reversed__(self)\nin操作\tobject.__contains__(self, item)\n字典key不存在时\tobject.__missing__(self, key)\n```\n\n\n\n\n\n### 参考\n\nhttps://zhuanlan.zhihu.com/p/24567545\n\nhttps://www.cnblogs.com/jhao/p/6022928.html","slug":"编程相关/Python/Python基础/Python中的魔法方法（Magic Method）","published":1,"updated":"2021-01-11T04:35:36.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moeo00g0rwjs3nbgfxll","content":"<h3 id=\"什么是魔法函数\"><a href=\"#什么是魔法函数\" class=\"headerlink\" title=\"什么是魔法函数\"></a>什么是魔法函数</h3><p>所谓魔法函数（Magic Methods），是Python的一种高级语法，允许你在类中自定义函数（函数名格式一般为__xx__），并绑定到类的特殊方法中。比如在类A中自定义<code>__str__()</code>函数，则在调用<code>str(A())</code>时，会自动调用<code>__str__()</code>函数，并返回相应的结果。在我们平时的使用中，可能经常使用<code>__init__</code>函数和<code>__del__</code>函数，其实这也是魔法函数的一种。</p>\n<p>Python中每一个魔法函数都对应了一个Python内置函数或操作。比如<code>__str__</code>对应str函数。</p>\n<h3 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h3><p>当创建一个对象时，<code>__new__</code>被调用创建类并返回这个类的实例，<code>__init__</code>将传入的参数来初始化该实例。</p>\n<blockquote>\n<ol>\n<li><code>__new__</code>是一个静态方法，而<code>__init__</code>是一个实例方法.</li>\n<li><code>__new__</code>方法会返回一个创建的实例，而<code>__init__</code>什么都不返回.</li>\n<li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用.</li>\n<li>当创建一个新实例时调用<code>__new__</code>，初始化一个实例时用<code>__init__</code>.</li>\n</ol>\n</blockquote>\n<p>当对象生命周期结束时，<code>__del__</code>会被调用（作为析构函数）</p>\n<h3 id=\"二元操作符\"><a href=\"#二元操作符\" class=\"headerlink\" title=\"二元操作符\"></a>二元操作符</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">+\tobject.<span class=\"hljs-constructor\">__add__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>-\tobject.<span class=\"hljs-constructor\">__sub__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>*\t</span>object.<span class=\"hljs-constructor\">__mul__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br><span class=\"hljs-comment\">//\tobject.__floordiv__(self, other)</span><span class=\"hljs-operator\"><br>/\t</span>object.<span class=\"hljs-constructor\">__div__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>%\tobject.<span class=\"hljs-constructor\">__mod__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>**\t</span>object.<span class=\"hljs-constructor\">__pow__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>[, <span class=\"hljs-params\">modulo</span>])</span><br>&lt;&lt;\tobject.<span class=\"hljs-constructor\">__lshift__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;&gt;\tobject.<span class=\"hljs-constructor\">__rshift__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&amp;\tobject.<span class=\"hljs-constructor\">__and__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>^\tobject.<span class=\"hljs-constructor\">__xor__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br><span class=\"hljs-pattern-match\">|\tobject.<span class=\"hljs-constructor\">__or__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"扩展二元操作符\"><a href=\"#扩展二元操作符\" class=\"headerlink\" title=\"扩展二元操作符\"></a>扩展二元操作符</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">+=\tobject.__iadd__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>-=\tobject.__isub__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>*=\tobject.__imul__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>/=\tobject.__idiv__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br><span class=\"hljs-comment\">//=\tobject.__ifloordiv__(self, other)</span><br>%=\tobject.__imod__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>**=\tobject.__ipow__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>[, modulo])<br>&lt;&lt;=\tobject.__ilshift__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>&gt;&gt;=\tobject.__irshift__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>&amp;=\tobject.__iand__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>^=\tobject.__ixor__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>|=\tobject.__ior__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"比较方法\"><a href=\"#比较方法\" class=\"headerlink\" title=\"比较方法\"></a>比较方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">&lt;\tobject.<span class=\"hljs-constructor\">__lt__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&lt;=\tobject.<span class=\"hljs-constructor\">__le__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>==\t</span>object.<span class=\"hljs-constructor\">__eq__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>!=\tobject.<span class=\"hljs-constructor\">__ne__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;=\tobject.<span class=\"hljs-constructor\">__ge__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;\tobject.<span class=\"hljs-constructor\">__gt__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类的表示、输出\"><a href=\"#类的表示、输出\" class=\"headerlink\" title=\"类的表示、输出\"></a>类的表示、输出</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">str</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__str__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">repr</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__repr__(self)<br><span class=\"hljs-function\"><span class=\"hljs-title\">len</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__len__(self)<br><span class=\"hljs-function\"><span class=\"hljs-title\">hash</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__hash__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">bool</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__nonzero__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">dir</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__dir__(self)<br>sys.getsizeof()\t<span class=\"hljs-selector-tag\">object</span>.__sizeof__(self)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类容器\"><a href=\"#类容器\" class=\"headerlink\" title=\"类容器\"></a>类容器</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">len<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__len__(<span class=\"hljs-params\">self</span>)</span><br>self<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span>\tobject.<span class=\"hljs-constructor\">__getitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br>self<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span> = value\tobject.<span class=\"hljs-constructor\">__setitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>)</span><br>del<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span> object.<span class=\"hljs-constructor\">__delitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br>iter<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__iter__(<span class=\"hljs-params\">self</span>)</span><br>reversed<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__reversed__(<span class=\"hljs-params\">self</span>)</span><br><span class=\"hljs-keyword\">in</span>操作\tobject.<span class=\"hljs-constructor\">__contains__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">item</span>)</span><br>字典key不存在时\tobject.<span class=\"hljs-constructor\">__missing__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/24567545\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24567545</a></p>\n<p><a href=\"https://www.cnblogs.com/jhao/p/6022928.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jhao/p/6022928.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是魔法函数\"><a href=\"#什么是魔法函数\" class=\"headerlink\" title=\"什么是魔法函数\"></a>什么是魔法函数</h3><p>所谓魔法函数（Magic Methods），是Python的一种高级语法，允许你在类中自定义函数（函数名格式一般为__xx__），并绑定到类的特殊方法中。比如在类A中自定义<code>__str__()</code>函数，则在调用<code>str(A())</code>时，会自动调用<code>__str__()</code>函数，并返回相应的结果。在我们平时的使用中，可能经常使用<code>__init__</code>函数和<code>__del__</code>函数，其实这也是魔法函数的一种。</p>\n<p>Python中每一个魔法函数都对应了一个Python内置函数或操作。比如<code>__str__</code>对应str函数。</p>\n<h3 id=\"构造与析构\"><a href=\"#构造与析构\" class=\"headerlink\" title=\"构造与析构\"></a>构造与析构</h3><p>当创建一个对象时，<code>__new__</code>被调用创建类并返回这个类的实例，<code>__init__</code>将传入的参数来初始化该实例。</p>\n<blockquote>\n<ol>\n<li><code>__new__</code>是一个静态方法，而<code>__init__</code>是一个实例方法.</li>\n<li><code>__new__</code>方法会返回一个创建的实例，而<code>__init__</code>什么都不返回.</li>\n<li>只有在<code>__new__</code>返回一个cls的实例时后面的<code>__init__</code>才能被调用.</li>\n<li>当创建一个新实例时调用<code>__new__</code>，初始化一个实例时用<code>__init__</code>.</li>\n</ol>\n</blockquote>\n<p>当对象生命周期结束时，<code>__del__</code>会被调用（作为析构函数）</p>\n<h3 id=\"二元操作符\"><a href=\"#二元操作符\" class=\"headerlink\" title=\"二元操作符\"></a>二元操作符</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">+\tobject.<span class=\"hljs-constructor\">__add__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>-\tobject.<span class=\"hljs-constructor\">__sub__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>*\t</span>object.<span class=\"hljs-constructor\">__mul__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br><span class=\"hljs-comment\">//\tobject.__floordiv__(self, other)</span><span class=\"hljs-operator\"><br>/\t</span>object.<span class=\"hljs-constructor\">__div__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>%\tobject.<span class=\"hljs-constructor\">__mod__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>**\t</span>object.<span class=\"hljs-constructor\">__pow__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>[, <span class=\"hljs-params\">modulo</span>])</span><br>&lt;&lt;\tobject.<span class=\"hljs-constructor\">__lshift__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;&gt;\tobject.<span class=\"hljs-constructor\">__rshift__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&amp;\tobject.<span class=\"hljs-constructor\">__and__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>^\tobject.<span class=\"hljs-constructor\">__xor__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br><span class=\"hljs-pattern-match\">|\tobject.<span class=\"hljs-constructor\">__or__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"扩展二元操作符\"><a href=\"#扩展二元操作符\" class=\"headerlink\" title=\"扩展二元操作符\"></a>扩展二元操作符</h3><figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">+=\tobject.__iadd__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>-=\tobject.__isub__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>*=\tobject.__imul__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>/=\tobject.__idiv__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br><span class=\"hljs-comment\">//=\tobject.__ifloordiv__(self, other)</span><br>%=\tobject.__imod__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>**=\tobject.__ipow__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>[, modulo])<br>&lt;&lt;=\tobject.__ilshift__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>&gt;&gt;=\tobject.__irshift__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>&amp;=\tobject.__iand__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>^=\tobject.__ixor__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br>|=\tobject.__ior__(<span class=\"hljs-literal\">self</span>, <span class=\"hljs-literal\">other</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"比较方法\"><a href=\"#比较方法\" class=\"headerlink\" title=\"比较方法\"></a>比较方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">&lt;\tobject.<span class=\"hljs-constructor\">__lt__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&lt;=\tobject.<span class=\"hljs-constructor\">__le__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><span class=\"hljs-operator\"><br>==\t</span>object.<span class=\"hljs-constructor\">__eq__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>!=\tobject.<span class=\"hljs-constructor\">__ne__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;=\tobject.<span class=\"hljs-constructor\">__ge__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br>&gt;\tobject.<span class=\"hljs-constructor\">__gt__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">other</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类的表示、输出\"><a href=\"#类的表示、输出\" class=\"headerlink\" title=\"类的表示、输出\"></a>类的表示、输出</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">str</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__str__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">repr</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__repr__(self)<br><span class=\"hljs-function\"><span class=\"hljs-title\">len</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__len__(self)<br><span class=\"hljs-function\"><span class=\"hljs-title\">hash</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__hash__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">bool</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__nonzero__(self) <br><span class=\"hljs-function\"><span class=\"hljs-title\">dir</span><span class=\"hljs-params\">()</span></span>\t<span class=\"hljs-selector-tag\">object</span>.__dir__(self)<br>sys.getsizeof()\t<span class=\"hljs-selector-tag\">object</span>.__sizeof__(self)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"类容器\"><a href=\"#类容器\" class=\"headerlink\" title=\"类容器\"></a>类容器</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">len<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__len__(<span class=\"hljs-params\">self</span>)</span><br>self<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span>\tobject.<span class=\"hljs-constructor\">__getitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br>self<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span> = value\tobject.<span class=\"hljs-constructor\">__setitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>)</span><br>del<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">key</span>]</span> object.<span class=\"hljs-constructor\">__delitem__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br>iter<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__iter__(<span class=\"hljs-params\">self</span>)</span><br>reversed<span class=\"hljs-literal\">()</span>\tobject.<span class=\"hljs-constructor\">__reversed__(<span class=\"hljs-params\">self</span>)</span><br><span class=\"hljs-keyword\">in</span>操作\tobject.<span class=\"hljs-constructor\">__contains__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">item</span>)</span><br>字典key不存在时\tobject.<span class=\"hljs-constructor\">__missing__(<span class=\"hljs-params\">self</span>, <span class=\"hljs-params\">key</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/24567545\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/24567545</a></p>\n<p><a href=\"https://www.cnblogs.com/jhao/p/6022928.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jhao/p/6022928.html</a></p>\n"},{"title":"Python的线程与进程","date":"2020-05-18T01:59:00.000Z","fileName":"python7","_content":"\n\n\n\n\n\n\n\n\n内存池机制：当创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，使效率降低。\n\n内存池就是预先在内存中申请一定数量的、大小相等的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了再申请新的内存，这样做最显著的优势就是能够减小内存碎片，提升效率\n\n\n\npymalloc\n\n针对小对象，pymalloc会在内存池中申请内存空间\n\n大对象，申请新的内存空间\n\n\n\n\n\n### Python多线程\n\n进程：一个执行中的程序，每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程，并为这些进程合理分配时间。\n\n\n\nthreading模块\n\n线程：在同一个进程下执行，并共享相同的上下文。一个进程中的各个线程与主线程共享同一片数据空间。\n\n线程包括开始、执行顺序、结束三部分\n\n可以被抢占（中断）和临时挂起（睡眠）\n\n一般以并发方式执行（是一种属性，并行只是并发问题的可能方法之一，若两个事件互不影响，则两个事件是并发的）\n\n\n\n对多核CPU的应用\n\nGIL——全局解释器锁（强制在任何时候只有一个线程可以执行python代码）\n\nI/O密集型应用（如网页之类），CPU密集型应用（数据分析，可借助C或CPP的拓展）\n\n\n\nGIL执行顺序\n\n\n\n实现一个线程\n\n```\nimport threading\nimport time\n\nclass LoopThread(threading.Thread):\n    n = 0\n    def run(self) -> None:\n        while self.n < 5:\n            now_thread = threading.current_thread()\n            print('loop now: {0}'.format(now_thread.name))\n            print(self.n)\n            time.sleep(1)\n            self.n += 1\n\nif __name__ == '__main__':\n    now_thread = threading.current_thread()\n    print('now: {0}'.format(now_thread.name))\n\n    t = LoopThread(name='loop_thread')\n    t.start()\n    t.join()\n    \n############################################\nnow: MainThread\nloop now: loop_thread\n0\nloop now: loop_thread\n1\nloop now: loop_thread\n2\nloop now: loop_thread\n3\nloop now: loop_thread\n4\n```\n\n\n\n多线程并发\n\n```\nimport threading\nimport time\n\nnum = 0\n\ndef test(n):\n    global num\n    num += n\n    time.sleep(2)\n    num -= n\n    time.sleep(1)\n    print('----------------{0}'.format(num))\n\nclass testThread(threading.Thread):\n    def __init__(self, n, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.n = n\n\n    def run(self) -> None:\n        for i in range(1000):\n            test(self.n)\n\nif __name__ == '__main__':\n    t1 = testThread(1)\n    t2 = testThread(2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    \n############################################\n----------------0\n----------------2\n----------------0\n----------------2\n----------------0\n----------------1\n----------------0\n----------------1\n```\n\n\n\n多线程中的锁\n\n`RLock`在一个线程中锁住了还能够再锁\n\n不能重复锁，否则资源被死锁\n\n```\nimport threading\nimport time\n\nnum = 0\nlock = threading.Lock()\n\ndef test(n):\n    global num\n    num += n\n    time.sleep(2)\n    num -= n\n    time.sleep(1)\n    print('----------------{0}'.format(num))\n\nclass testThread(threading.Thread):\n    def __init__(self, n, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.n = n\n\n    def run(self) -> None:\n        for i in range(1000):\n            lock.acquire()\n            try:\n                test(self.n)\n            finally:\n                lock.release()\n\nif __name__ == '__main__':\n    t1 = testThread(1)\n    t2 = testThread(2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    \n###########################################\n----------------0\n----------------0\n----------------0\n----------------0\n----------------0\n----------------0\n```\n\n\n\n产生死锁\n\n```\ndef run(self) -> None:\n    for i in range(1000):\n        print('start lock')\n        lock.acquire()\n        print('lock again')\n        lock.acquire()\n        print('lock end')\n        try:\n            test(self.n)\n        finally:\n            lock.release()\n            \n###########################################\nstart lock\nlock again\nstart lock\n```\n\n\n\n\n\n线程的调度与优化\n\n```\nimport threading, time\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef run(n):\n    time.sleep(1)\n    print(threading.current_thread().name, n)\n\ndef test():\n    t1 = time.time()\n    for n in range(10):\n        run(n)\n    print(time.time() - t1)\n\n\nif __name__ == '__main__':\n    test()\n    \n########################################\nMainThread 0\nMainThread 1\nMainThread 2\nMainThread 3\nMainThread 4\nMainThread 5\nMainThread 6\nMainThread 7\nMainThread 8\nMainThread 9\n10.0053870677948\n```\n\n\n\n快了很多\n\n```\nimport threading, time\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef run(n):\n    time.sleep(1)\n    print(threading.current_thread().name, n)\n\ndef test_use_thread():\n    t1 = time.time()\n    ls = []\n    for i in range(10):\n        t = threading.Thread(target=run, args=(i,))\n        ls.append(t)\n        t.start()\n\n    for l in ls:\n        l.join()\n    print(time.time() - t1)\n\ndef test():\n    t1 = time.time()\n    for n in range(10):\n        run(n)\n    print(time.time() - t1)\n\n\nif __name__ == '__main__':\n    test_use_thread()\n    \n###############################################\nThread-2 1\nThread-3 2\nThread-1 0\nThread-5 4\nThread-4 3\nThread-6 5\nThread-10 9\nThread-8 7\nThread-9 8\nThread-7 6\n1.0038871765136719\n```\n\n\n\n```\ndef test_use_pool():\n    t1 = time.time()\n    n_list = range(100)\n    pool = Pool(10)\n    pool.map(run, n_list)\n    pool.close()\n    pool.join()\n    print(time.time() - t1)\n```\n\n\n\n达到了线程的复用\n\n\n\n\n\n### Python进程\n\n进程的实现\n\n```\nimport time\nfrom multiprocessing import Process\n\ndef run(name):\n    \"\"\"\n    name: 进程名称\n    \"\"\"\n    print(\"进程名称：{}\".format(name))\n    time.sleep(5)\n    print(\"进程完成\")\n\nif __name__ == '__main__':\n    p = Process(target=run, args=('my process',))\n    p.start()\n    p.join()\n    \n##############################################\n进程名称：my process\n进程完成\n```\n\n使用过os模块下的`os.getpid()`可以得到当前进程的ID\n\n\n\n进程间的通信\n\n\n\n多进程中的锁：","source":"_posts/编程相关/Python/Python基础/7、Python的线程与进程.md","raw":"---\ntitle: Python的线程与进程\ndate: 2020-05-18 09:59:00\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python7\n---\n\n\n\n\n\n\n\n\n\n内存池机制：当创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，使效率降低。\n\n内存池就是预先在内存中申请一定数量的、大小相等的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了再申请新的内存，这样做最显著的优势就是能够减小内存碎片，提升效率\n\n\n\npymalloc\n\n针对小对象，pymalloc会在内存池中申请内存空间\n\n大对象，申请新的内存空间\n\n\n\n\n\n### Python多线程\n\n进程：一个执行中的程序，每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程，并为这些进程合理分配时间。\n\n\n\nthreading模块\n\n线程：在同一个进程下执行，并共享相同的上下文。一个进程中的各个线程与主线程共享同一片数据空间。\n\n线程包括开始、执行顺序、结束三部分\n\n可以被抢占（中断）和临时挂起（睡眠）\n\n一般以并发方式执行（是一种属性，并行只是并发问题的可能方法之一，若两个事件互不影响，则两个事件是并发的）\n\n\n\n对多核CPU的应用\n\nGIL——全局解释器锁（强制在任何时候只有一个线程可以执行python代码）\n\nI/O密集型应用（如网页之类），CPU密集型应用（数据分析，可借助C或CPP的拓展）\n\n\n\nGIL执行顺序\n\n\n\n实现一个线程\n\n```\nimport threading\nimport time\n\nclass LoopThread(threading.Thread):\n    n = 0\n    def run(self) -> None:\n        while self.n < 5:\n            now_thread = threading.current_thread()\n            print('loop now: {0}'.format(now_thread.name))\n            print(self.n)\n            time.sleep(1)\n            self.n += 1\n\nif __name__ == '__main__':\n    now_thread = threading.current_thread()\n    print('now: {0}'.format(now_thread.name))\n\n    t = LoopThread(name='loop_thread')\n    t.start()\n    t.join()\n    \n############################################\nnow: MainThread\nloop now: loop_thread\n0\nloop now: loop_thread\n1\nloop now: loop_thread\n2\nloop now: loop_thread\n3\nloop now: loop_thread\n4\n```\n\n\n\n多线程并发\n\n```\nimport threading\nimport time\n\nnum = 0\n\ndef test(n):\n    global num\n    num += n\n    time.sleep(2)\n    num -= n\n    time.sleep(1)\n    print('----------------{0}'.format(num))\n\nclass testThread(threading.Thread):\n    def __init__(self, n, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.n = n\n\n    def run(self) -> None:\n        for i in range(1000):\n            test(self.n)\n\nif __name__ == '__main__':\n    t1 = testThread(1)\n    t2 = testThread(2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    \n############################################\n----------------0\n----------------2\n----------------0\n----------------2\n----------------0\n----------------1\n----------------0\n----------------1\n```\n\n\n\n多线程中的锁\n\n`RLock`在一个线程中锁住了还能够再锁\n\n不能重复锁，否则资源被死锁\n\n```\nimport threading\nimport time\n\nnum = 0\nlock = threading.Lock()\n\ndef test(n):\n    global num\n    num += n\n    time.sleep(2)\n    num -= n\n    time.sleep(1)\n    print('----------------{0}'.format(num))\n\nclass testThread(threading.Thread):\n    def __init__(self, n, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.n = n\n\n    def run(self) -> None:\n        for i in range(1000):\n            lock.acquire()\n            try:\n                test(self.n)\n            finally:\n                lock.release()\n\nif __name__ == '__main__':\n    t1 = testThread(1)\n    t2 = testThread(2)\n    t1.start()\n    t2.start()\n    t1.join()\n    t2.join()\n    \n###########################################\n----------------0\n----------------0\n----------------0\n----------------0\n----------------0\n----------------0\n```\n\n\n\n产生死锁\n\n```\ndef run(self) -> None:\n    for i in range(1000):\n        print('start lock')\n        lock.acquire()\n        print('lock again')\n        lock.acquire()\n        print('lock end')\n        try:\n            test(self.n)\n        finally:\n            lock.release()\n            \n###########################################\nstart lock\nlock again\nstart lock\n```\n\n\n\n\n\n线程的调度与优化\n\n```\nimport threading, time\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef run(n):\n    time.sleep(1)\n    print(threading.current_thread().name, n)\n\ndef test():\n    t1 = time.time()\n    for n in range(10):\n        run(n)\n    print(time.time() - t1)\n\n\nif __name__ == '__main__':\n    test()\n    \n########################################\nMainThread 0\nMainThread 1\nMainThread 2\nMainThread 3\nMainThread 4\nMainThread 5\nMainThread 6\nMainThread 7\nMainThread 8\nMainThread 9\n10.0053870677948\n```\n\n\n\n快了很多\n\n```\nimport threading, time\nfrom multiprocessing.dummy import Pool as ThreadPool\n\ndef run(n):\n    time.sleep(1)\n    print(threading.current_thread().name, n)\n\ndef test_use_thread():\n    t1 = time.time()\n    ls = []\n    for i in range(10):\n        t = threading.Thread(target=run, args=(i,))\n        ls.append(t)\n        t.start()\n\n    for l in ls:\n        l.join()\n    print(time.time() - t1)\n\ndef test():\n    t1 = time.time()\n    for n in range(10):\n        run(n)\n    print(time.time() - t1)\n\n\nif __name__ == '__main__':\n    test_use_thread()\n    \n###############################################\nThread-2 1\nThread-3 2\nThread-1 0\nThread-5 4\nThread-4 3\nThread-6 5\nThread-10 9\nThread-8 7\nThread-9 8\nThread-7 6\n1.0038871765136719\n```\n\n\n\n```\ndef test_use_pool():\n    t1 = time.time()\n    n_list = range(100)\n    pool = Pool(10)\n    pool.map(run, n_list)\n    pool.close()\n    pool.join()\n    print(time.time() - t1)\n```\n\n\n\n达到了线程的复用\n\n\n\n\n\n### Python进程\n\n进程的实现\n\n```\nimport time\nfrom multiprocessing import Process\n\ndef run(name):\n    \"\"\"\n    name: 进程名称\n    \"\"\"\n    print(\"进程名称：{}\".format(name))\n    time.sleep(5)\n    print(\"进程完成\")\n\nif __name__ == '__main__':\n    p = Process(target=run, args=('my process',))\n    p.start()\n    p.join()\n    \n##############################################\n进程名称：my process\n进程完成\n```\n\n使用过os模块下的`os.getpid()`可以得到当前进程的ID\n\n\n\n进程间的通信\n\n\n\n多进程中的锁：","slug":"编程相关/Python/Python基础/7、Python的线程与进程","published":1,"updated":"2021-01-11T04:34:54.676Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moeq00g4rwjs68ew88by","content":"<p>内存池机制：当创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，使效率降低。</p>\n<p>内存池就是预先在内存中申请一定数量的、大小相等的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了再申请新的内存，这样做最显著的优势就是能够减小内存碎片，提升效率</p>\n<p>pymalloc</p>\n<p>针对小对象，pymalloc会在内存池中申请内存空间</p>\n<p>大对象，申请新的内存空间</p>\n<h3 id=\"Python多线程\"><a href=\"#Python多线程\" class=\"headerlink\" title=\"Python多线程\"></a>Python多线程</h3><p>进程：一个执行中的程序，每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程，并为这些进程合理分配时间。</p>\n<p>threading模块</p>\n<p>线程：在同一个进程下执行，并共享相同的上下文。一个进程中的各个线程与主线程共享同一片数据空间。</p>\n<p>线程包括开始、执行顺序、结束三部分</p>\n<p>可以被抢占（中断）和临时挂起（睡眠）</p>\n<p>一般以并发方式执行（是一种属性，并行只是并发问题的可能方法之一，若两个事件互不影响，则两个事件是并发的）</p>\n<p>对多核CPU的应用</p>\n<p>GIL——全局解释器锁（强制在任何时候只有一个线程可以执行python代码）</p>\n<p>I/O密集型应用（如网页之类），CPU密集型应用（数据分析，可借助C或CPP的拓展）</p>\n<p>GIL执行顺序</p>\n<p>实现一个线程</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> LoopThread(threading.Thread):<br>    n = <span class=\"hljs-number\">0</span><br>    def run(self) -&gt; None:<br>        while self.n &lt; <span class=\"hljs-number\">5</span>:<br>            now_thread = threading.current_thread()<br>            print(<span class=\"hljs-string\">'loop now: &#123;0&#125;'</span>.format(now_thread.name))<br>            print(self.n)<br>            time.sleep(<span class=\"hljs-number\">1</span>)<br>            self.n += <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    now_thread = threading.current_thread()<br>    print(<span class=\"hljs-string\">'now: &#123;0&#125;'</span>.format(now_thread.name))<br><br>    t = LoopThread(name=<span class=\"hljs-string\">'loop_thread'</span>)<br>    t.start()<br>    t.join()<br>    <br>############################################<br>now: MainThread<br>loop now: loop_thread<br><span class=\"hljs-number\">0</span><br>loop now: loop_thread<br><span class=\"hljs-number\">1</span><br>loop now: loop_thread<br><span class=\"hljs-number\">2</span><br>loop now: loop_thread<br><span class=\"hljs-number\">3</span><br>loop now: loop_thread<br><span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多线程并发</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>num = <span class=\"hljs-number\">0</span><br><br>def test(n):<br>    global num<br>    num += n<br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    num -= n<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(<span class=\"hljs-string\">'----------------&#123;0&#125;'</span>.format(num))<br><br><span class=\"hljs-keyword\">class</span> testThread(threading.Thread):<br>    def __init__(self, n, *args, **kwargs):<br>        super().__init__(*args, **kwargs)<br>        self.n = n<br><br>    def run(self) -&gt; None:<br>        for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>            test(self.n)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    t1 = testThread(<span class=\"hljs-number\">1</span>)<br>    t2 = testThread(<span class=\"hljs-number\">2</span>)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    <br>############################################<br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-2</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-2</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-1</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多线程中的锁</p>\n<p><code>RLock</code>在一个线程中锁住了还能够再锁</p>\n<p>不能重复锁，否则资源被死锁</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>num = <span class=\"hljs-number\">0</span><br>lock = threading.Lock()<br><br>def test(n):<br>    global num<br>    num += n<br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    num -= n<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(<span class=\"hljs-string\">'----------------&#123;0&#125;'</span>.format(num))<br><br><span class=\"hljs-keyword\">class</span> testThread(threading.Thread):<br>    def __init__(self, n, *args, **kwargs):<br>        super().__init__(*args, **kwargs)<br>        self.n = n<br><br>    def run(self) -&gt; None:<br>        for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>            lock.acquire()<br>            try:<br>                test(self.n)<br>            finally:<br>                lock.release()<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    t1 = testThread(<span class=\"hljs-number\">1</span>)<br>    t2 = testThread(<span class=\"hljs-number\">2</span>)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    <br>###########################################<br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>产生死锁</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def run(self) -&gt; None:<br>    for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>        print(<span class=\"hljs-string\">'start lock'</span>)<br>        lock.acquire()<br>        print(<span class=\"hljs-string\">'lock again'</span>)<br>        lock.acquire()<br>        print(<span class=\"hljs-string\">'lock end'</span>)<br>        try:<br>            test(self.n)<br>        finally:<br>            lock.release()<br>            <br>###########################################<br>start lock<br>lock again<br>start lock<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>线程的调度与优化</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading, time<br><span class=\"hljs-keyword\">from</span> multiprocessing.dummy <span class=\"hljs-keyword\">import</span> Pool <span class=\"hljs-keyword\">as</span> ThreadPool<br><br>def run(n):<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(threading.current_thread().name, n)<br><br>def test():<br>    t1 = time.time()<br>    for n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        run(n)<br>    print(time.time() - t1)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    test()<br>    <br>########################################<br>MainThread <span class=\"hljs-number\">0</span><br>MainThread <span class=\"hljs-number\">1</span><br>MainThread <span class=\"hljs-number\">2</span><br>MainThread <span class=\"hljs-number\">3</span><br>MainThread <span class=\"hljs-number\">4</span><br>MainThread <span class=\"hljs-number\">5</span><br>MainThread <span class=\"hljs-number\">6</span><br>MainThread <span class=\"hljs-number\">7</span><br>MainThread <span class=\"hljs-number\">8</span><br>MainThread <span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">10.0053870677948</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>快了很多</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading, time<br><span class=\"hljs-keyword\">from</span> multiprocessing.dummy <span class=\"hljs-keyword\">import</span> Pool <span class=\"hljs-keyword\">as</span> ThreadPool<br><br>def run(n):<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(threading.current_thread().name, n)<br><br>def test_use_thread():<br>    t1 = time.time()<br>    ls = []<br>    for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        t = threading.Thread(target=run, args=(i,))<br>        ls.append(t)<br>        t.start()<br><br>    for l <span class=\"hljs-keyword\">in</span> ls:<br>        l.join()<br>    print(time.time() - t1)<br><br>def test():<br>    t1 = time.time()<br>    for n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        run(n)<br>    print(time.time() - t1)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    test_use_thread()<br>    <br>###############################################<br>Thread<span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">1</span><br>Thread<span class=\"hljs-number\">-3</span> <span class=\"hljs-number\">2</span><br>Thread<span class=\"hljs-number\">-1</span> <span class=\"hljs-number\">0</span><br>Thread<span class=\"hljs-number\">-5</span> <span class=\"hljs-number\">4</span><br>Thread<span class=\"hljs-number\">-4</span> <span class=\"hljs-number\">3</span><br>Thread<span class=\"hljs-number\">-6</span> <span class=\"hljs-number\">5</span><br>Thread<span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">9</span><br>Thread<span class=\"hljs-number\">-8</span> <span class=\"hljs-number\">7</span><br>Thread<span class=\"hljs-number\">-9</span> <span class=\"hljs-number\">8</span><br>Thread<span class=\"hljs-number\">-7</span> <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">1.0038871765136719</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">def test_use_pool():<br>    t1 = time.time()<br>    n_list = range(100)<br>   <span class=\"hljs-built_in\"> pool </span>= Pool(10)<br>    pool.map(run, n_list)<br>    pool.close()<br>    pool.join()<br>    <span class=\"hljs-builtin-name\">print</span>(time.time() - t1)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>达到了线程的复用</p>\n<h3 id=\"Python进程\"><a href=\"#Python进程\" class=\"headerlink\" title=\"Python进程\"></a>Python进程</h3><p>进程的实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Process<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(name)</span>:</span><br>    <span class=\"hljs-string\">\"\"\"<br>    name: 进程名称<br>    \"\"\"</span><br>    print(<span class=\"hljs-string\">\"进程名称：&#123;&#125;\"</span>.format(name))<br>    time.sleep(<span class=\"hljs-number\">5</span>)<br>    print(<span class=\"hljs-string\">\"进程完成\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    p = Process(target=run, args=(<span class=\"hljs-string\">'my process'</span>,))<br>    p.start()<br>    p.join()<br>    <br><span class=\"hljs-comment\">##############################################</span><br>进程名称：my process<br>进程完成<br></code></pre></td></tr></table></figure>\n\n<p>使用过os模块下的<code>os.getpid()</code>可以得到当前进程的ID</p>\n<p>进程间的通信</p>\n<p>多进程中的锁：</p>\n","site":{"data":{}},"excerpt":"","more":"<p>内存池机制：当创建大量消耗小内存的对象时，频繁调用new/malloc会导致大量的内存碎片，使效率降低。</p>\n<p>内存池就是预先在内存中申请一定数量的、大小相等的内存块留作备用，当有新的内存需求时，就先从内存池中分配内存给这个需求，不够了再申请新的内存，这样做最显著的优势就是能够减小内存碎片，提升效率</p>\n<p>pymalloc</p>\n<p>针对小对象，pymalloc会在内存池中申请内存空间</p>\n<p>大对象，申请新的内存空间</p>\n<h3 id=\"Python多线程\"><a href=\"#Python多线程\" class=\"headerlink\" title=\"Python多线程\"></a>Python多线程</h3><p>进程：一个执行中的程序，每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。操作系统管理其上所有进程，并为这些进程合理分配时间。</p>\n<p>threading模块</p>\n<p>线程：在同一个进程下执行，并共享相同的上下文。一个进程中的各个线程与主线程共享同一片数据空间。</p>\n<p>线程包括开始、执行顺序、结束三部分</p>\n<p>可以被抢占（中断）和临时挂起（睡眠）</p>\n<p>一般以并发方式执行（是一种属性，并行只是并发问题的可能方法之一，若两个事件互不影响，则两个事件是并发的）</p>\n<p>对多核CPU的应用</p>\n<p>GIL——全局解释器锁（强制在任何时候只有一个线程可以执行python代码）</p>\n<p>I/O密集型应用（如网页之类），CPU密集型应用（数据分析，可借助C或CPP的拓展）</p>\n<p>GIL执行顺序</p>\n<p>实现一个线程</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br><span class=\"hljs-keyword\">class</span> LoopThread(threading.Thread):<br>    n = <span class=\"hljs-number\">0</span><br>    def run(self) -&gt; None:<br>        while self.n &lt; <span class=\"hljs-number\">5</span>:<br>            now_thread = threading.current_thread()<br>            print(<span class=\"hljs-string\">'loop now: &#123;0&#125;'</span>.format(now_thread.name))<br>            print(self.n)<br>            time.sleep(<span class=\"hljs-number\">1</span>)<br>            self.n += <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    now_thread = threading.current_thread()<br>    print(<span class=\"hljs-string\">'now: &#123;0&#125;'</span>.format(now_thread.name))<br><br>    t = LoopThread(name=<span class=\"hljs-string\">'loop_thread'</span>)<br>    t.start()<br>    t.join()<br>    <br>############################################<br>now: MainThread<br>loop now: loop_thread<br><span class=\"hljs-number\">0</span><br>loop now: loop_thread<br><span class=\"hljs-number\">1</span><br>loop now: loop_thread<br><span class=\"hljs-number\">2</span><br>loop now: loop_thread<br><span class=\"hljs-number\">3</span><br>loop now: loop_thread<br><span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多线程并发</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>num = <span class=\"hljs-number\">0</span><br><br>def test(n):<br>    global num<br>    num += n<br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    num -= n<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(<span class=\"hljs-string\">'----------------&#123;0&#125;'</span>.format(num))<br><br><span class=\"hljs-keyword\">class</span> testThread(threading.Thread):<br>    def __init__(self, n, *args, **kwargs):<br>        super().__init__(*args, **kwargs)<br>        self.n = n<br><br>    def run(self) -&gt; None:<br>        for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>            test(self.n)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    t1 = testThread(<span class=\"hljs-number\">1</span>)<br>    t2 = testThread(<span class=\"hljs-number\">2</span>)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    <br>############################################<br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-2</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-2</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-1</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-1</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>多线程中的锁</p>\n<p><code>RLock</code>在一个线程中锁住了还能够再锁</p>\n<p>不能重复锁，否则资源被死锁</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading<br><span class=\"hljs-keyword\">import</span> time<br><br>num = <span class=\"hljs-number\">0</span><br>lock = threading.Lock()<br><br>def test(n):<br>    global num<br>    num += n<br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    num -= n<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(<span class=\"hljs-string\">'----------------&#123;0&#125;'</span>.format(num))<br><br><span class=\"hljs-keyword\">class</span> testThread(threading.Thread):<br>    def __init__(self, n, *args, **kwargs):<br>        super().__init__(*args, **kwargs)<br>        self.n = n<br><br>    def run(self) -&gt; None:<br>        for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>            lock.acquire()<br>            try:<br>                test(self.n)<br>            finally:<br>                lock.release()<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    t1 = testThread(<span class=\"hljs-number\">1</span>)<br>    t2 = testThread(<span class=\"hljs-number\">2</span>)<br>    t1.start()<br>    t2.start()<br>    t1.join()<br>    t2.join()<br>    <br>###########################################<br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br>---------------<span class=\"hljs-number\">-0</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>产生死锁</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">def run(self) -&gt; None:<br>    for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">1000</span>):<br>        print(<span class=\"hljs-string\">'start lock'</span>)<br>        lock.acquire()<br>        print(<span class=\"hljs-string\">'lock again'</span>)<br>        lock.acquire()<br>        print(<span class=\"hljs-string\">'lock end'</span>)<br>        try:<br>            test(self.n)<br>        finally:<br>            lock.release()<br>            <br>###########################################<br>start lock<br>lock again<br>start lock<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>线程的调度与优化</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading, time<br><span class=\"hljs-keyword\">from</span> multiprocessing.dummy <span class=\"hljs-keyword\">import</span> Pool <span class=\"hljs-keyword\">as</span> ThreadPool<br><br>def run(n):<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(threading.current_thread().name, n)<br><br>def test():<br>    t1 = time.time()<br>    for n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        run(n)<br>    print(time.time() - t1)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    test()<br>    <br>########################################<br>MainThread <span class=\"hljs-number\">0</span><br>MainThread <span class=\"hljs-number\">1</span><br>MainThread <span class=\"hljs-number\">2</span><br>MainThread <span class=\"hljs-number\">3</span><br>MainThread <span class=\"hljs-number\">4</span><br>MainThread <span class=\"hljs-number\">5</span><br>MainThread <span class=\"hljs-number\">6</span><br>MainThread <span class=\"hljs-number\">7</span><br>MainThread <span class=\"hljs-number\">8</span><br>MainThread <span class=\"hljs-number\">9</span><br><span class=\"hljs-number\">10.0053870677948</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>快了很多</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> threading, time<br><span class=\"hljs-keyword\">from</span> multiprocessing.dummy <span class=\"hljs-keyword\">import</span> Pool <span class=\"hljs-keyword\">as</span> ThreadPool<br><br>def run(n):<br>    time.sleep(<span class=\"hljs-number\">1</span>)<br>    print(threading.current_thread().name, n)<br><br>def test_use_thread():<br>    t1 = time.time()<br>    ls = []<br>    for i <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        t = threading.Thread(target=run, args=(i,))<br>        ls.append(t)<br>        t.start()<br><br>    for l <span class=\"hljs-keyword\">in</span> ls:<br>        l.join()<br>    print(time.time() - t1)<br><br>def test():<br>    t1 = time.time()<br>    for n <span class=\"hljs-keyword\">in</span> range(<span class=\"hljs-number\">10</span>):<br>        run(n)<br>    print(time.time() - t1)<br><br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    test_use_thread()<br>    <br>###############################################<br>Thread<span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">1</span><br>Thread<span class=\"hljs-number\">-3</span> <span class=\"hljs-number\">2</span><br>Thread<span class=\"hljs-number\">-1</span> <span class=\"hljs-number\">0</span><br>Thread<span class=\"hljs-number\">-5</span> <span class=\"hljs-number\">4</span><br>Thread<span class=\"hljs-number\">-4</span> <span class=\"hljs-number\">3</span><br>Thread<span class=\"hljs-number\">-6</span> <span class=\"hljs-number\">5</span><br>Thread<span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">9</span><br>Thread<span class=\"hljs-number\">-8</span> <span class=\"hljs-number\">7</span><br>Thread<span class=\"hljs-number\">-9</span> <span class=\"hljs-number\">8</span><br>Thread<span class=\"hljs-number\">-7</span> <span class=\"hljs-number\">6</span><br><span class=\"hljs-number\">1.0038871765136719</span><br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">def test_use_pool():<br>    t1 = time.time()<br>    n_list = range(100)<br>   <span class=\"hljs-built_in\"> pool </span>= Pool(10)<br>    pool.map(run, n_list)<br>    pool.close()<br>    pool.join()<br>    <span class=\"hljs-builtin-name\">print</span>(time.time() - t1)<br></code></pre></td></tr></table></figure>\n\n\n\n<p>达到了线程的复用</p>\n<h3 id=\"Python进程\"><a href=\"#Python进程\" class=\"headerlink\" title=\"Python进程\"></a>Python进程</h3><p>进程的实现</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> time<br><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Process<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(name)</span>:</span><br>    <span class=\"hljs-string\">\"\"\"<br>    name: 进程名称<br>    \"\"\"</span><br>    print(<span class=\"hljs-string\">\"进程名称：&#123;&#125;\"</span>.format(name))<br>    time.sleep(<span class=\"hljs-number\">5</span>)<br>    print(<span class=\"hljs-string\">\"进程完成\"</span>)<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:<br>    p = Process(target=run, args=(<span class=\"hljs-string\">'my process'</span>,))<br>    p.start()<br>    p.join()<br>    <br><span class=\"hljs-comment\">##############################################</span><br>进程名称：my process<br>进程完成<br></code></pre></td></tr></table></figure>\n\n<p>使用过os模块下的<code>os.getpid()</code>可以得到当前进程的ID</p>\n<p>进程间的通信</p>\n<p>多进程中的锁：</p>\n"},{"title":"Python的一些语言特性与机制","date":"2020-06-19T07:01:02.000Z","fileName":"python8","_content":"\n代码高效、程序健壮\n\n\n\n值的类型，引用类型\n\n\n\n内存共享机制\n\n\n\n垃圾回收机制\n\n以引用计数为主，分代收集为辅\n\n每个对象都有指向该对象的引用总数\n\n```\nsys.getrefcount()\n```\n\n满足特定条件，自动启动垃圾回收\n\nPython运行时，会记录分配对象与取消分配对象的次数。当两者差值高过阈值时。\n\n\n\n```\n# 查看阈值\ngc.get_threshold()\n```\n\n所有新建对象都是0代对象。所有对象分为0，1，2代。当某一代对象经历过垃圾回收，依然存活，则被归入下一代\n\n\n\n若一个对象的引用数为0，Python虚拟机就会回收这个对象的内存\n\n引用计数的缺陷是循环引用的问题\n\n\n\n\n\n递归运行时报错“RecursionError”。这是python默认的递归深度是很有限的（默认是1000），因此当递归深度超过999的样子，就会引发这样的一个异常。\n\n解决方法：首先考虑对代码进行优化，其次也可以考虑将递归深度的数值调大一些。\n\n```\nimport sys\nsys.setrecursionlimit(100000) #你想设置的递归深度（可为任意值）\n```\n\n\n\n","source":"_posts/编程相关/Python/Python基础/8、Python的一些语言特性与机制.md","raw":"---\ntitle: Python的一些语言特性与机制\ndate: 2020-06-19 15:01:02\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python8\n---\n\n代码高效、程序健壮\n\n\n\n值的类型，引用类型\n\n\n\n内存共享机制\n\n\n\n垃圾回收机制\n\n以引用计数为主，分代收集为辅\n\n每个对象都有指向该对象的引用总数\n\n```\nsys.getrefcount()\n```\n\n满足特定条件，自动启动垃圾回收\n\nPython运行时，会记录分配对象与取消分配对象的次数。当两者差值高过阈值时。\n\n\n\n```\n# 查看阈值\ngc.get_threshold()\n```\n\n所有新建对象都是0代对象。所有对象分为0，1，2代。当某一代对象经历过垃圾回收，依然存活，则被归入下一代\n\n\n\n若一个对象的引用数为0，Python虚拟机就会回收这个对象的内存\n\n引用计数的缺陷是循环引用的问题\n\n\n\n\n\n递归运行时报错“RecursionError”。这是python默认的递归深度是很有限的（默认是1000），因此当递归深度超过999的样子，就会引发这样的一个异常。\n\n解决方法：首先考虑对代码进行优化，其次也可以考虑将递归深度的数值调大一些。\n\n```\nimport sys\nsys.setrecursionlimit(100000) #你想设置的递归深度（可为任意值）\n```\n\n\n\n","slug":"编程相关/Python/Python基础/8、Python的一些语言特性与机制","published":1,"updated":"2021-01-11T04:35:13.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moer00g7rwjs3i0lgi0c","content":"<p>代码高效、程序健壮</p>\n<p>值的类型，引用类型</p>\n<p>内存共享机制</p>\n<p>垃圾回收机制</p>\n<p>以引用计数为主，分代收集为辅</p>\n<p>每个对象都有指向该对象的引用总数</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">sys</span><span class=\"hljs-selector-class\">.getrefcount</span>()<br></code></pre></td></tr></table></figure>\n\n<p>满足特定条件，自动启动垃圾回收</p>\n<p>Python运行时，会记录分配对象与取消分配对象的次数。当两者差值高过阈值时。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 查看阈值</span><br>gc.get_threshold()<br></code></pre></td></tr></table></figure>\n\n<p>所有新建对象都是0代对象。所有对象分为0，1，2代。当某一代对象经历过垃圾回收，依然存活，则被归入下一代</p>\n<p>若一个对象的引用数为0，Python虚拟机就会回收这个对象的内存</p>\n<p>引用计数的缺陷是循环引用的问题</p>\n<p>递归运行时报错“RecursionError”。这是python默认的递归深度是很有限的（默认是1000），因此当递归深度超过999的样子，就会引发这样的一个异常。</p>\n<p>解决方法：首先考虑对代码进行优化，其次也可以考虑将递归深度的数值调大一些。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> sys<br>sys.setrecursionlimit(<span class=\"hljs-number\">100000</span>) #你想设置的递归深度（可为任意值）<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>代码高效、程序健壮</p>\n<p>值的类型，引用类型</p>\n<p>内存共享机制</p>\n<p>垃圾回收机制</p>\n<p>以引用计数为主，分代收集为辅</p>\n<p>每个对象都有指向该对象的引用总数</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">sys</span><span class=\"hljs-selector-class\">.getrefcount</span>()<br></code></pre></td></tr></table></figure>\n\n<p>满足特定条件，自动启动垃圾回收</p>\n<p>Python运行时，会记录分配对象与取消分配对象的次数。当两者差值高过阈值时。</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vala\"><span class=\"hljs-meta\"># 查看阈值</span><br>gc.get_threshold()<br></code></pre></td></tr></table></figure>\n\n<p>所有新建对象都是0代对象。所有对象分为0，1，2代。当某一代对象经历过垃圾回收，依然存活，则被归入下一代</p>\n<p>若一个对象的引用数为0，Python虚拟机就会回收这个对象的内存</p>\n<p>引用计数的缺陷是循环引用的问题</p>\n<p>递归运行时报错“RecursionError”。这是python默认的递归深度是很有限的（默认是1000），因此当递归深度超过999的样子，就会引发这样的一个异常。</p>\n<p>解决方法：首先考虑对代码进行优化，其次也可以考虑将递归深度的数值调大一些。</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> sys<br>sys.setrecursionlimit(<span class=\"hljs-number\">100000</span>) #你想设置的递归深度（可为任意值）<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Numpy常用属性与方法","date":"2020-08-21T01:51:27.000Z","fileName":"numpy-basic-use","_content":"\n## n维数组对象：ndarray\n\nndarray对象主要由两部分构成，即实际的数据和描述这些数据的元数据（数据维度、类型）等。\n\n### 相比于Python列表的优势\n\n**1、数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据**，如下：\n\nPython中的数组对象进行平方：\n\n```\nl = [1, 2, 3]\nfor i in range(len(a));\n\ta[i] = a[i]**2\n```\n\nndarray进行平方\n\n```\nimport numpy as np\na = np.array([1, 2, 3])\na = a**2\n```\n\n2、设置专门的数组对象，经过优化，可以提升这类应用的运算速度\n\n3、数组对象采用相同的数据类型，有助于节省运算和存储空间\n\n### ndarray对象属性\n\n| 属性      | 说明                                         |\n| --------- | -------------------------------------------- |\n| .ndim     | 秩，即轴的数量或维度的数量                   |\n| .shape    | ndarray对象的尺度，对于矩阵，n行m列          |\n| .size     | ndarray对象元素的个数，相当于.shape中n*m的值 |\n| .dtype    | ndarray对象的元素类型                        |\n| .itemsize | ndarray对象中每个元素的大小，以字节为单位    |\n\n### ndarray元素类型\n\n包括主要的一些类型，类型后面的数字代表长度，常见的如bool、int32、float32、complex64（虚数）等等。\n\n\n\n## 常用方法\n\n### 创建方法\n\n#### 从Python中的列表、元组等类型创建\n\n```\nx = np.array(list/tuple)\n```\n\n#### 使用相应函数创建\n\n| 函数                | 说明                                           |\n| ------------------- | ---------------------------------------------- |\n| np.arange(n)        | 类似range()函数，返回ndarray类型，元素从0到n‐1 |\n| np.ones(shape)      | 根据shape生成一个全1数组，shape是元组类型      |\n| np.zeros(shape)     | 根据shape生成一个全0数组，shape是元组类型      |\n| np.full(shape,val)  | 根据shape生成一个数组，每个元素值都是val       |\n| np.eye(n)           | 创建一个正方的n*n单位矩阵，对角线为1，其余为0  |\n| np.ones_like(a)     | 根据数组a的形状生成一个全1数组                 |\n| np.zeros_like(a)    | 根据数组a的形状生成一个全0数组                 |\n| np.full_like(a,val) | 根据数组a的形状生成一个数组，每个元素值都是val |\n\n#### 创建网格（meshgrid）\n\n```\n\n```\n\n\n\n\n\n#### 其他方法创建\n\n| 函数                         | 说明                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| np.linspace(begin, end, bia) | 根据起止数据等间距地填充数据，形成数组（从begin到end，共bia个数） |\n| np.concatenate()             | 将两个或多个数组合并成一个新的数组                           |\n\n示例：\n\n```\n>>> a = np.linspace(1,10,3)\n>>> a\narray([ 1. ,  5.5, 10. ])\n>>> b = np.linspace(1,10,3, endpoint=False)\n>>> b\narray([1., 4., 7.])\n>>> c = np.concatenate((a, b))\n>>> c\narray([ 1. ,  5.5, 10. ,  1. ,  4. ,  7. ])\n```\n\n\n\n### 变换方法\n\n#### 维度变换\n\n| 方法            | 说明                                                    |\n| --------------- | ------------------------------------------------------- |\n| .reshape(shape) | 不改变数组元素，返回一个shape形状的数组，**原数组不变** |\n| .resize(shape)  | 与.reshape()功能一致，但**修改原数组**                  |\n| .flatten()      | 对数组进行降维，返回折叠后的一维数组，原数组不变        |\n\n**如果只想指示一个维度，而自动决定其他维度有多少个值，可以使用-1的写法（如果不能整除会报错）**\n\n```\n# 想让数组有5行，列数自动决定\nx.reshape(5, -1)\n```\n\n\n\n#### 类型变换\n\nastype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致\n\n```\nnew_l = l.astype(new_type)\n```\n\n#### 转换为列表\n\n```\nl = n.tolist()\n```\n\n\n\n### 数组的操作\n\n#### 索引与切片\n\n**ndarray数组的索引与切片与Python中的索引与切片大致相同**\n\n#### 运算\n\n**ndarray数组与标量之间的运算作用于数组的每一个元素，包括平方立方等等，示例如下：**\n\n```\nnp.abs(n)\t// 各元素的绝对值\nnp.sqrt(x)\t// 各元素的平方根\n```\n\n同时使用数组中进行大小比较等运算时，会返回一个数值为布尔类型的数组（**也是每个元素进行比较**）\n\n```\nX = np.array([[1,2,3],[4,5,6]])\nprint(X > 3)\n#######################################\n[[False False False]\n [ True  True  True]]\n```\n\n借用这个特性，可以完成对满足某一要求的元素进行如赋值等其他操作\n\n```\nX = np.array([[1,2,3],[4,5,6]])\nX[X > 3] = 10\nprint(X)\n####################################\n[[ 1  2  3]\n [10 10 10]]\n```\n\n\n\n\n\n#### 合并与分割\n\n| 函数                                    | 说明                                                         |\n| --------------------------------------- | ------------------------------------------------------------ |\n| np.concatenate([n1, n2], axis=1)        | 将矩阵n1、n2按照第1个维度合并（axis默认为0）。同时返回一个新的矩阵 |\n| np.vstack([n1, n2])                     | 在垂直的维度合并n1，n2                                       |\n| np.hstack([n1, n2])                     | 在水平方向合并n1,n2                                          |\n| x1, x2, x3 = np.split(x, [2,4], axis=1) | 将x按照[0, 2)、[2, 4)、[4, end)进行分割并赋值（依此类推）    |\n| np.vsplit()、np.hsplit()                |                                                              |\n\n\n\n### 矩阵运算\n\n| 函数             | 说明     |\n| ---------------- | -------- |\n| A.dot(B)         | 矩阵乘法 |\n| A.T              | 矩阵转置 |\n| np.linalg.inv(A) | 矩阵的逆 |\n\n\n\n| 函数                 | 说明            |\n| -------------------- | --------------- |\n| np.random.shuffle(x) | 对x进行乱序处理 |\n| np.sort(x)           | 返回排序后的x   |\n\n\n\n### 随机数函数\n\n在numpy的子库numpy.random中\n\n| 函数                      | 说明                                                         |\n| ------------------------- | ------------------------------------------------------------ |\n| rand(d0,d1,..,dn)         | 根据d0‐dn作为维度创建随机数数组，浮点数，[0,1)，均匀分布     |\n| randn(d0,d1,..,dn)        | 根据d0‐dn创建随机数数组，标准正态分布                        |\n| randint(low, high, shape) | 根据shape创建随机整数或整数数组，范围是[low, high)           |\n| seed(s)                   | 随机数种子，s是给定的种子值（计算机中随机数都是“伪随机数”，依赖于该随机种子） |\n| normal(均值, 方差, shape) | 生成给定均值与方差的符合正态分布的数或矩阵，shape为(元组)    |\n\n\n\n### 统计函数（聚合函数）\n\n| 函数                              | 说明                                                       |\n| --------------------------------- | ---------------------------------------------------------- |\n| sum(a, axis=None)                 | 根据给定轴axis计算数组a相关元素之和，axis整数或元组        |\n| mean(a, axis=None)                | 根据给定轴axis计算数组a相关元素的期望，axis整数或元组      |\n| average(a,axis=None,weights=None) | 根据给定轴axis计算数组a相关元素的加权平均值，weights是列表 |\n| std(a, axis=None)                 | 根据给定轴axis计算数组a相关元素的标准差                    |\n| var(a, axis=None)                 | 根据给定轴axis计算数组a相关元素的方差                      |\n| min(a)  max(a)                    | 计算数组a中元素的最小值、最大值                            |\n| argmin(a)  argmax(a)              | 计算数组a中元素最小值、最大值的降一维后下标                |\n\n\n\n### 梯度函数\n\n`np.gradient(f) `，计算数组f中元素的梯度（即连续值之间的变化率），当f为多维时，返回每个维度梯度\n\n```\n>>> a = np.arange(5)\n>>> a\narray([0, 1, 2, 3, 4])\n>>> np.gradient(a)\narray([1., 1., 1., 1., 1.])\n```\n\n**说明：**以索引为2的值为例，该处梯度的计算值为(a[3] - a[1]) / 2 = 1\n\n\n\n### ndarray数据的读写\n\n#### 二维数据读写\n\n**CSV文件**，以逗号作为分隔符的常见文件格式\n\n**np.savetxt()**：写入文件\n\n```python\n# frame : 文件、字符串或产生器\n# array : 存入文件的数组\n# fmt : 写入文件的格式\n# delimiter : 分割字符串，默认是任何空格\nnp.savetxt(frame, array, fmt='%.18e', delimiter=None)\n```\n\n例:\n\n```\nnp.savetxt('a.csv', a, fmt='%d', delimiter=',')\n```\n\n**np.loadtxt()**：读取文件\n\n```python\n# unpack  : 如果True，读入属性将分别写入不同变量\nnp.loadtxt(frame, dtype=np.float, delimiter=None， unpack=False)\n```\n\n#### 多维数据存取\n\n**a.tofile()**\n\n```\n# frame  : 文件、字符串\n# sep : 数据分割字符串，如果是空串，写入文件为二进制\n# format : 写入数据的格式\na.tofile(frame, sep='', format='%s')\n```\n\n**np.fromfile()**\n\n```\n# count  : 读入元素个数，‐1表示读入整个文件\n# sep : 数据分割字符串，如果是空串，写入文件为二进制\nnp.fromfile(frame, dtype=float, count=‐1, sep='')\n```\n\n#### 便捷文件存取\n\n其中文件名称通常以.npy为拓展名\n\n```\nnp.save(fname, array)\n\nnp.load(fname)\n```\n\n","source":"_posts/编程相关/Python/Python常用模块/Numpy常用属性与方法.md","raw":"---\ntitle: Numpy常用属性与方法\ndate: 2020-08-21 09:51:27\ntags:\n\t- Numpy\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python常用模块\nfileName: numpy-basic-use\n---\n\n## n维数组对象：ndarray\n\nndarray对象主要由两部分构成，即实际的数据和描述这些数据的元数据（数据维度、类型）等。\n\n### 相比于Python列表的优势\n\n**1、数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据**，如下：\n\nPython中的数组对象进行平方：\n\n```\nl = [1, 2, 3]\nfor i in range(len(a));\n\ta[i] = a[i]**2\n```\n\nndarray进行平方\n\n```\nimport numpy as np\na = np.array([1, 2, 3])\na = a**2\n```\n\n2、设置专门的数组对象，经过优化，可以提升这类应用的运算速度\n\n3、数组对象采用相同的数据类型，有助于节省运算和存储空间\n\n### ndarray对象属性\n\n| 属性      | 说明                                         |\n| --------- | -------------------------------------------- |\n| .ndim     | 秩，即轴的数量或维度的数量                   |\n| .shape    | ndarray对象的尺度，对于矩阵，n行m列          |\n| .size     | ndarray对象元素的个数，相当于.shape中n*m的值 |\n| .dtype    | ndarray对象的元素类型                        |\n| .itemsize | ndarray对象中每个元素的大小，以字节为单位    |\n\n### ndarray元素类型\n\n包括主要的一些类型，类型后面的数字代表长度，常见的如bool、int32、float32、complex64（虚数）等等。\n\n\n\n## 常用方法\n\n### 创建方法\n\n#### 从Python中的列表、元组等类型创建\n\n```\nx = np.array(list/tuple)\n```\n\n#### 使用相应函数创建\n\n| 函数                | 说明                                           |\n| ------------------- | ---------------------------------------------- |\n| np.arange(n)        | 类似range()函数，返回ndarray类型，元素从0到n‐1 |\n| np.ones(shape)      | 根据shape生成一个全1数组，shape是元组类型      |\n| np.zeros(shape)     | 根据shape生成一个全0数组，shape是元组类型      |\n| np.full(shape,val)  | 根据shape生成一个数组，每个元素值都是val       |\n| np.eye(n)           | 创建一个正方的n*n单位矩阵，对角线为1，其余为0  |\n| np.ones_like(a)     | 根据数组a的形状生成一个全1数组                 |\n| np.zeros_like(a)    | 根据数组a的形状生成一个全0数组                 |\n| np.full_like(a,val) | 根据数组a的形状生成一个数组，每个元素值都是val |\n\n#### 创建网格（meshgrid）\n\n```\n\n```\n\n\n\n\n\n#### 其他方法创建\n\n| 函数                         | 说明                                                         |\n| ---------------------------- | ------------------------------------------------------------ |\n| np.linspace(begin, end, bia) | 根据起止数据等间距地填充数据，形成数组（从begin到end，共bia个数） |\n| np.concatenate()             | 将两个或多个数组合并成一个新的数组                           |\n\n示例：\n\n```\n>>> a = np.linspace(1,10,3)\n>>> a\narray([ 1. ,  5.5, 10. ])\n>>> b = np.linspace(1,10,3, endpoint=False)\n>>> b\narray([1., 4., 7.])\n>>> c = np.concatenate((a, b))\n>>> c\narray([ 1. ,  5.5, 10. ,  1. ,  4. ,  7. ])\n```\n\n\n\n### 变换方法\n\n#### 维度变换\n\n| 方法            | 说明                                                    |\n| --------------- | ------------------------------------------------------- |\n| .reshape(shape) | 不改变数组元素，返回一个shape形状的数组，**原数组不变** |\n| .resize(shape)  | 与.reshape()功能一致，但**修改原数组**                  |\n| .flatten()      | 对数组进行降维，返回折叠后的一维数组，原数组不变        |\n\n**如果只想指示一个维度，而自动决定其他维度有多少个值，可以使用-1的写法（如果不能整除会报错）**\n\n```\n# 想让数组有5行，列数自动决定\nx.reshape(5, -1)\n```\n\n\n\n#### 类型变换\n\nastype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致\n\n```\nnew_l = l.astype(new_type)\n```\n\n#### 转换为列表\n\n```\nl = n.tolist()\n```\n\n\n\n### 数组的操作\n\n#### 索引与切片\n\n**ndarray数组的索引与切片与Python中的索引与切片大致相同**\n\n#### 运算\n\n**ndarray数组与标量之间的运算作用于数组的每一个元素，包括平方立方等等，示例如下：**\n\n```\nnp.abs(n)\t// 各元素的绝对值\nnp.sqrt(x)\t// 各元素的平方根\n```\n\n同时使用数组中进行大小比较等运算时，会返回一个数值为布尔类型的数组（**也是每个元素进行比较**）\n\n```\nX = np.array([[1,2,3],[4,5,6]])\nprint(X > 3)\n#######################################\n[[False False False]\n [ True  True  True]]\n```\n\n借用这个特性，可以完成对满足某一要求的元素进行如赋值等其他操作\n\n```\nX = np.array([[1,2,3],[4,5,6]])\nX[X > 3] = 10\nprint(X)\n####################################\n[[ 1  2  3]\n [10 10 10]]\n```\n\n\n\n\n\n#### 合并与分割\n\n| 函数                                    | 说明                                                         |\n| --------------------------------------- | ------------------------------------------------------------ |\n| np.concatenate([n1, n2], axis=1)        | 将矩阵n1、n2按照第1个维度合并（axis默认为0）。同时返回一个新的矩阵 |\n| np.vstack([n1, n2])                     | 在垂直的维度合并n1，n2                                       |\n| np.hstack([n1, n2])                     | 在水平方向合并n1,n2                                          |\n| x1, x2, x3 = np.split(x, [2,4], axis=1) | 将x按照[0, 2)、[2, 4)、[4, end)进行分割并赋值（依此类推）    |\n| np.vsplit()、np.hsplit()                |                                                              |\n\n\n\n### 矩阵运算\n\n| 函数             | 说明     |\n| ---------------- | -------- |\n| A.dot(B)         | 矩阵乘法 |\n| A.T              | 矩阵转置 |\n| np.linalg.inv(A) | 矩阵的逆 |\n\n\n\n| 函数                 | 说明            |\n| -------------------- | --------------- |\n| np.random.shuffle(x) | 对x进行乱序处理 |\n| np.sort(x)           | 返回排序后的x   |\n\n\n\n### 随机数函数\n\n在numpy的子库numpy.random中\n\n| 函数                      | 说明                                                         |\n| ------------------------- | ------------------------------------------------------------ |\n| rand(d0,d1,..,dn)         | 根据d0‐dn作为维度创建随机数数组，浮点数，[0,1)，均匀分布     |\n| randn(d0,d1,..,dn)        | 根据d0‐dn创建随机数数组，标准正态分布                        |\n| randint(low, high, shape) | 根据shape创建随机整数或整数数组，范围是[low, high)           |\n| seed(s)                   | 随机数种子，s是给定的种子值（计算机中随机数都是“伪随机数”，依赖于该随机种子） |\n| normal(均值, 方差, shape) | 生成给定均值与方差的符合正态分布的数或矩阵，shape为(元组)    |\n\n\n\n### 统计函数（聚合函数）\n\n| 函数                              | 说明                                                       |\n| --------------------------------- | ---------------------------------------------------------- |\n| sum(a, axis=None)                 | 根据给定轴axis计算数组a相关元素之和，axis整数或元组        |\n| mean(a, axis=None)                | 根据给定轴axis计算数组a相关元素的期望，axis整数或元组      |\n| average(a,axis=None,weights=None) | 根据给定轴axis计算数组a相关元素的加权平均值，weights是列表 |\n| std(a, axis=None)                 | 根据给定轴axis计算数组a相关元素的标准差                    |\n| var(a, axis=None)                 | 根据给定轴axis计算数组a相关元素的方差                      |\n| min(a)  max(a)                    | 计算数组a中元素的最小值、最大值                            |\n| argmin(a)  argmax(a)              | 计算数组a中元素最小值、最大值的降一维后下标                |\n\n\n\n### 梯度函数\n\n`np.gradient(f) `，计算数组f中元素的梯度（即连续值之间的变化率），当f为多维时，返回每个维度梯度\n\n```\n>>> a = np.arange(5)\n>>> a\narray([0, 1, 2, 3, 4])\n>>> np.gradient(a)\narray([1., 1., 1., 1., 1.])\n```\n\n**说明：**以索引为2的值为例，该处梯度的计算值为(a[3] - a[1]) / 2 = 1\n\n\n\n### ndarray数据的读写\n\n#### 二维数据读写\n\n**CSV文件**，以逗号作为分隔符的常见文件格式\n\n**np.savetxt()**：写入文件\n\n```python\n# frame : 文件、字符串或产生器\n# array : 存入文件的数组\n# fmt : 写入文件的格式\n# delimiter : 分割字符串，默认是任何空格\nnp.savetxt(frame, array, fmt='%.18e', delimiter=None)\n```\n\n例:\n\n```\nnp.savetxt('a.csv', a, fmt='%d', delimiter=',')\n```\n\n**np.loadtxt()**：读取文件\n\n```python\n# unpack  : 如果True，读入属性将分别写入不同变量\nnp.loadtxt(frame, dtype=np.float, delimiter=None， unpack=False)\n```\n\n#### 多维数据存取\n\n**a.tofile()**\n\n```\n# frame  : 文件、字符串\n# sep : 数据分割字符串，如果是空串，写入文件为二进制\n# format : 写入数据的格式\na.tofile(frame, sep='', format='%s')\n```\n\n**np.fromfile()**\n\n```\n# count  : 读入元素个数，‐1表示读入整个文件\n# sep : 数据分割字符串，如果是空串，写入文件为二进制\nnp.fromfile(frame, dtype=float, count=‐1, sep='')\n```\n\n#### 便捷文件存取\n\n其中文件名称通常以.npy为拓展名\n\n```\nnp.save(fname, array)\n\nnp.load(fname)\n```\n\n","slug":"编程相关/Python/Python常用模块/Numpy常用属性与方法","published":1,"updated":"2021-01-11T04:37:20.413Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moes00gbrwjsequpehgj","content":"<h2 id=\"n维数组对象：ndarray\"><a href=\"#n维数组对象：ndarray\" class=\"headerlink\" title=\"n维数组对象：ndarray\"></a>n维数组对象：ndarray</h2><p>ndarray对象主要由两部分构成，即实际的数据和描述这些数据的元数据（数据维度、类型）等。</p>\n<h3 id=\"相比于Python列表的优势\"><a href=\"#相比于Python列表的优势\" class=\"headerlink\" title=\"相比于Python列表的优势\"></a>相比于Python列表的优势</h3><p><strong>1、数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据</strong>，如下：</p>\n<p>Python中的数组对象进行平方：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">l = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(a));<br>\ta[i] = a[i]**<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>ndarray进行平方</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br>a = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])<br>a = a**<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>2、设置专门的数组对象，经过优化，可以提升这类应用的运算速度</p>\n<p>3、数组对象采用相同的数据类型，有助于节省运算和存储空间</p>\n<h3 id=\"ndarray对象属性\"><a href=\"#ndarray对象属性\" class=\"headerlink\" title=\"ndarray对象属性\"></a>ndarray对象属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.ndim</td>\n<td>秩，即轴的数量或维度的数量</td>\n</tr>\n<tr>\n<td>.shape</td>\n<td>ndarray对象的尺度，对于矩阵，n行m列</td>\n</tr>\n<tr>\n<td>.size</td>\n<td>ndarray对象元素的个数，相当于.shape中n*m的值</td>\n</tr>\n<tr>\n<td>.dtype</td>\n<td>ndarray对象的元素类型</td>\n</tr>\n<tr>\n<td>.itemsize</td>\n<td>ndarray对象中每个元素的大小，以字节为单位</td>\n</tr>\n</tbody></table>\n<h3 id=\"ndarray元素类型\"><a href=\"#ndarray元素类型\" class=\"headerlink\" title=\"ndarray元素类型\"></a>ndarray元素类型</h3><p>包括主要的一些类型，类型后面的数字代表长度，常见的如bool、int32、float32、complex64（虚数）等等。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h3 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h3><h4 id=\"从Python中的列表、元组等类型创建\"><a href=\"#从Python中的列表、元组等类型创建\" class=\"headerlink\" title=\"从Python中的列表、元组等类型创建\"></a>从Python中的列表、元组等类型创建</h4><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-meta\">x</span> = np.<span class=\"hljs-meta\">array</span>(<span class=\"hljs-meta\">list</span>/tuple)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用相应函数创建\"><a href=\"#使用相应函数创建\" class=\"headerlink\" title=\"使用相应函数创建\"></a>使用相应函数创建</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.arange(n)</td>\n<td>类似range()函数，返回ndarray类型，元素从0到n‐1</td>\n</tr>\n<tr>\n<td>np.ones(shape)</td>\n<td>根据shape生成一个全1数组，shape是元组类型</td>\n</tr>\n<tr>\n<td>np.zeros(shape)</td>\n<td>根据shape生成一个全0数组，shape是元组类型</td>\n</tr>\n<tr>\n<td>np.full(shape,val)</td>\n<td>根据shape生成一个数组，每个元素值都是val</td>\n</tr>\n<tr>\n<td>np.eye(n)</td>\n<td>创建一个正方的n*n单位矩阵，对角线为1，其余为0</td>\n</tr>\n<tr>\n<td>np.ones_like(a)</td>\n<td>根据数组a的形状生成一个全1数组</td>\n</tr>\n<tr>\n<td>np.zeros_like(a)</td>\n<td>根据数组a的形状生成一个全0数组</td>\n</tr>\n<tr>\n<td>np.full_like(a,val)</td>\n<td>根据数组a的形状生成一个数组，每个元素值都是val</td>\n</tr>\n</tbody></table>\n<h4 id=\"创建网格（meshgrid）\"><a href=\"#创建网格（meshgrid）\" class=\"headerlink\" title=\"创建网格（meshgrid）\"></a>创建网格（meshgrid）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"其他方法创建\"><a href=\"#其他方法创建\" class=\"headerlink\" title=\"其他方法创建\"></a>其他方法创建</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.linspace(begin, end, bia)</td>\n<td>根据起止数据等间距地填充数据，形成数组（从begin到end，共bia个数）</td>\n</tr>\n<tr>\n<td>np.concatenate()</td>\n<td>将两个或多个数组合并成一个新的数组</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; a = np.linspace(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>)<br>&gt;&gt;&gt; a<br><span class=\"hljs-built_in\">array</span>([ <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">5.5</span>, <span class=\"hljs-number\">10.</span> ])<br>&gt;&gt;&gt; b = np.linspace(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>, endpoint=False)<br>&gt;&gt;&gt; b<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">4.</span>, <span class=\"hljs-number\">7.</span>])<br>&gt;&gt;&gt; c = np.concatenate((a, b))<br>&gt;&gt;&gt; c<br><span class=\"hljs-built_in\">array</span>([ <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">5.5</span>, <span class=\"hljs-number\">10.</span> ,  <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">4.</span> ,  <span class=\"hljs-number\">7.</span> ])<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"变换方法\"><a href=\"#变换方法\" class=\"headerlink\" title=\"变换方法\"></a>变换方法</h3><h4 id=\"维度变换\"><a href=\"#维度变换\" class=\"headerlink\" title=\"维度变换\"></a>维度变换</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.reshape(shape)</td>\n<td>不改变数组元素，返回一个shape形状的数组，<strong>原数组不变</strong></td>\n</tr>\n<tr>\n<td>.resize(shape)</td>\n<td>与.reshape()功能一致，但<strong>修改原数组</strong></td>\n</tr>\n<tr>\n<td>.flatten()</td>\n<td>对数组进行降维，返回折叠后的一维数组，原数组不变</td>\n</tr>\n</tbody></table>\n<p><strong>如果只想指示一个维度，而自动决定其他维度有多少个值，可以使用-1的写法（如果不能整除会报错）</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 想让数组有<span class=\"hljs-number\">5</span>行，列数自动决定<br>x.reshape(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-1</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"类型变换\"><a href=\"#类型变换\" class=\"headerlink\" title=\"类型变换\"></a>类型变换</h4><p>astype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">new_l</span> = l.<span class=\"hljs-keyword\">as</span><span class=\"hljs-keyword\">type</span>(new_type)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"转换为列表\"><a href=\"#转换为列表\" class=\"headerlink\" title=\"转换为列表\"></a>转换为列表</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">l</span> = n.tolist()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数组的操作\"><a href=\"#数组的操作\" class=\"headerlink\" title=\"数组的操作\"></a>数组的操作</h3><h4 id=\"索引与切片\"><a href=\"#索引与切片\" class=\"headerlink\" title=\"索引与切片\"></a>索引与切片</h4><p><strong>ndarray数组的索引与切片与Python中的索引与切片大致相同</strong></p>\n<h4 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h4><p><strong>ndarray数组与标量之间的运算作用于数组的每一个元素，包括平方立方等等，示例如下：</strong></p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">np.<span class=\"hljs-built_in\">abs</span>(n)\t<span class=\"hljs-comment\">// 各元素的绝对值</span><br>np.<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-symbol\">x</span>)\t<span class=\"hljs-comment\">// 各元素的平方根</span><br></code></pre></td></tr></table></figure>\n\n<p>同时使用数组中进行大小比较等运算时，会返回一个数值为布尔类型的数组（<strong>也是每个元素进行比较</strong>）</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">X = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>print(X &gt; <span class=\"hljs-number\">3</span>)<br>#######################################<br>[[<span class=\"hljs-literal\">False</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-literal\">False</span>]<br> [ <span class=\"hljs-literal\">True</span>  <span class=\"hljs-literal\">True</span>  <span class=\"hljs-literal\">True</span>]]<br></code></pre></td></tr></table></figure>\n\n<p>借用这个特性，可以完成对满足某一要求的元素进行如赋值等其他操作</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">X = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>X[X &gt; <span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">10</span><br>print(X)<br>####################################<br>[[ <span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">3</span>]<br> [<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">10</span>]]<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"合并与分割\"><a href=\"#合并与分割\" class=\"headerlink\" title=\"合并与分割\"></a>合并与分割</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.concatenate([n1, n2], axis=1)</td>\n<td>将矩阵n1、n2按照第1个维度合并（axis默认为0）。同时返回一个新的矩阵</td>\n</tr>\n<tr>\n<td>np.vstack([n1, n2])</td>\n<td>在垂直的维度合并n1，n2</td>\n</tr>\n<tr>\n<td>np.hstack([n1, n2])</td>\n<td>在水平方向合并n1,n2</td>\n</tr>\n<tr>\n<td>x1, x2, x3 = np.split(x, [2,4], axis=1)</td>\n<td>将x按照[0, 2)、[2, 4)、[4, end)进行分割并赋值（依此类推）</td>\n</tr>\n<tr>\n<td>np.vsplit()、np.hsplit()</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A.dot(B)</td>\n<td>矩阵乘法</td>\n</tr>\n<tr>\n<td>A.T</td>\n<td>矩阵转置</td>\n</tr>\n<tr>\n<td>np.linalg.inv(A)</td>\n<td>矩阵的逆</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.random.shuffle(x)</td>\n<td>对x进行乱序处理</td>\n</tr>\n<tr>\n<td>np.sort(x)</td>\n<td>返回排序后的x</td>\n</tr>\n</tbody></table>\n<h3 id=\"随机数函数\"><a href=\"#随机数函数\" class=\"headerlink\" title=\"随机数函数\"></a>随机数函数</h3><p>在numpy的子库numpy.random中</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand(d0,d1,..,dn)</td>\n<td>根据d0‐dn作为维度创建随机数数组，浮点数，[0,1)，均匀分布</td>\n</tr>\n<tr>\n<td>randn(d0,d1,..,dn)</td>\n<td>根据d0‐dn创建随机数数组，标准正态分布</td>\n</tr>\n<tr>\n<td>randint(low, high, shape)</td>\n<td>根据shape创建随机整数或整数数组，范围是[low, high)</td>\n</tr>\n<tr>\n<td>seed(s)</td>\n<td>随机数种子，s是给定的种子值（计算机中随机数都是“伪随机数”，依赖于该随机种子）</td>\n</tr>\n<tr>\n<td>normal(均值, 方差, shape)</td>\n<td>生成给定均值与方差的符合正态分布的数或矩阵，shape为(元组)</td>\n</tr>\n</tbody></table>\n<h3 id=\"统计函数（聚合函数）\"><a href=\"#统计函数（聚合函数）\" class=\"headerlink\" title=\"统计函数（聚合函数）\"></a>统计函数（聚合函数）</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sum(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素之和，axis整数或元组</td>\n</tr>\n<tr>\n<td>mean(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的期望，axis整数或元组</td>\n</tr>\n<tr>\n<td>average(a,axis=None,weights=None)</td>\n<td>根据给定轴axis计算数组a相关元素的加权平均值，weights是列表</td>\n</tr>\n<tr>\n<td>std(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的标准差</td>\n</tr>\n<tr>\n<td>var(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的方差</td>\n</tr>\n<tr>\n<td>min(a)  max(a)</td>\n<td>计算数组a中元素的最小值、最大值</td>\n</tr>\n<tr>\n<td>argmin(a)  argmax(a)</td>\n<td>计算数组a中元素最小值、最大值的降一维后下标</td>\n</tr>\n</tbody></table>\n<h3 id=\"梯度函数\"><a href=\"#梯度函数\" class=\"headerlink\" title=\"梯度函数\"></a>梯度函数</h3><p><code>np.gradient(f)</code>，计算数组f中元素的梯度（即连续值之间的变化率），当f为多维时，返回每个维度梯度</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; a = np.arange(<span class=\"hljs-number\">5</span>)<br>&gt;&gt;&gt; a<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])<br>&gt;&gt;&gt; np.gradient(a)<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>])<br></code></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong>以索引为2的值为例，该处梯度的计算值为(a[3] - a[1]) / 2 = 1</p>\n<h3 id=\"ndarray数据的读写\"><a href=\"#ndarray数据的读写\" class=\"headerlink\" title=\"ndarray数据的读写\"></a>ndarray数据的读写</h3><h4 id=\"二维数据读写\"><a href=\"#二维数据读写\" class=\"headerlink\" title=\"二维数据读写\"></a>二维数据读写</h4><p><strong>CSV文件</strong>，以逗号作为分隔符的常见文件格式</p>\n<p><strong>np.savetxt()</strong>：写入文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># frame : 文件、字符串或产生器</span><br><span class=\"hljs-comment\"># array : 存入文件的数组</span><br><span class=\"hljs-comment\"># fmt : 写入文件的格式</span><br><span class=\"hljs-comment\"># delimiter : 分割字符串，默认是任何空格</span><br>np.savetxt(frame, array, fmt=<span class=\"hljs-string\">'%.18e'</span>, delimiter=<span class=\"hljs-literal\">None</span>)<br></code></pre></td></tr></table></figure>\n\n<p>例:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">np.savetxt(<span class=\"hljs-string\">'a.csv'</span>, a, <span class=\"hljs-attribute\">fmt</span>=<span class=\"hljs-string\">'%d'</span>, <span class=\"hljs-attribute\">delimiter</span>=<span class=\"hljs-string\">','</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>np.loadtxt()</strong>：读取文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># unpack  : 如果True，读入属性将分别写入不同变量</span><br>np.loadtxt(frame, dtype=np.float, delimiter=<span class=\"hljs-literal\">None</span>， unpack=<span class=\"hljs-literal\">False</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"多维数据存取\"><a href=\"#多维数据存取\" class=\"headerlink\" title=\"多维数据存取\"></a>多维数据存取</h4><p><strong>a.tofile()</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># frame  : 文件、字符串</span><br><span class=\"hljs-comment\"># sep : 数据分割字符串，如果是空串，写入文件为二进制</span><br><span class=\"hljs-comment\"># format : 写入数据的格式</span><br>a.tofile(frame, <span class=\"hljs-attribute\">sep</span>=<span class=\"hljs-string\">''</span>, <span class=\"hljs-attribute\">format</span>=<span class=\"hljs-string\">'%s'</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>np.fromfile()</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># count  : 读入元素个数，‐1表示读入整个文件</span><br><span class=\"hljs-comment\"># sep : 数据分割字符串，如果是空串，写入文件为二进制</span><br>np.fromfile(frame, <span class=\"hljs-attribute\">dtype</span>=float, <span class=\"hljs-attribute\">count</span>=‐1, <span class=\"hljs-attribute\">sep</span>=<span class=\"hljs-string\">''</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"便捷文件存取\"><a href=\"#便捷文件存取\" class=\"headerlink\" title=\"便捷文件存取\"></a>便捷文件存取</h4><p>其中文件名称通常以.npy为拓展名</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">save</span>(fname, <span class=\"hljs-built_in\">array</span>)<br><br><span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">load</span>(fname)<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"n维数组对象：ndarray\"><a href=\"#n维数组对象：ndarray\" class=\"headerlink\" title=\"n维数组对象：ndarray\"></a>n维数组对象：ndarray</h2><p>ndarray对象主要由两部分构成，即实际的数据和描述这些数据的元数据（数据维度、类型）等。</p>\n<h3 id=\"相比于Python列表的优势\"><a href=\"#相比于Python列表的优势\" class=\"headerlink\" title=\"相比于Python列表的优势\"></a>相比于Python列表的优势</h3><p><strong>1、数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据</strong>，如下：</p>\n<p>Python中的数组对象进行平方：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">l = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]<br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(len(a));<br>\ta[i] = a[i]**<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>ndarray进行平方</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br>a = np.<span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])<br>a = a**<span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n<p>2、设置专门的数组对象，经过优化，可以提升这类应用的运算速度</p>\n<p>3、数组对象采用相同的数据类型，有助于节省运算和存储空间</p>\n<h3 id=\"ndarray对象属性\"><a href=\"#ndarray对象属性\" class=\"headerlink\" title=\"ndarray对象属性\"></a>ndarray对象属性</h3><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.ndim</td>\n<td>秩，即轴的数量或维度的数量</td>\n</tr>\n<tr>\n<td>.shape</td>\n<td>ndarray对象的尺度，对于矩阵，n行m列</td>\n</tr>\n<tr>\n<td>.size</td>\n<td>ndarray对象元素的个数，相当于.shape中n*m的值</td>\n</tr>\n<tr>\n<td>.dtype</td>\n<td>ndarray对象的元素类型</td>\n</tr>\n<tr>\n<td>.itemsize</td>\n<td>ndarray对象中每个元素的大小，以字节为单位</td>\n</tr>\n</tbody></table>\n<h3 id=\"ndarray元素类型\"><a href=\"#ndarray元素类型\" class=\"headerlink\" title=\"ndarray元素类型\"></a>ndarray元素类型</h3><p>包括主要的一些类型，类型后面的数字代表长度，常见的如bool、int32、float32、complex64（虚数）等等。</p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><h3 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h3><h4 id=\"从Python中的列表、元组等类型创建\"><a href=\"#从Python中的列表、元组等类型创建\" class=\"headerlink\" title=\"从Python中的列表、元组等类型创建\"></a>从Python中的列表、元组等类型创建</h4><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\"><span class=\"hljs-meta\">x</span> = np.<span class=\"hljs-meta\">array</span>(<span class=\"hljs-meta\">list</span>/tuple)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用相应函数创建\"><a href=\"#使用相应函数创建\" class=\"headerlink\" title=\"使用相应函数创建\"></a>使用相应函数创建</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.arange(n)</td>\n<td>类似range()函数，返回ndarray类型，元素从0到n‐1</td>\n</tr>\n<tr>\n<td>np.ones(shape)</td>\n<td>根据shape生成一个全1数组，shape是元组类型</td>\n</tr>\n<tr>\n<td>np.zeros(shape)</td>\n<td>根据shape生成一个全0数组，shape是元组类型</td>\n</tr>\n<tr>\n<td>np.full(shape,val)</td>\n<td>根据shape生成一个数组，每个元素值都是val</td>\n</tr>\n<tr>\n<td>np.eye(n)</td>\n<td>创建一个正方的n*n单位矩阵，对角线为1，其余为0</td>\n</tr>\n<tr>\n<td>np.ones_like(a)</td>\n<td>根据数组a的形状生成一个全1数组</td>\n</tr>\n<tr>\n<td>np.zeros_like(a)</td>\n<td>根据数组a的形状生成一个全0数组</td>\n</tr>\n<tr>\n<td>np.full_like(a,val)</td>\n<td>根据数组a的形状生成一个数组，每个元素值都是val</td>\n</tr>\n</tbody></table>\n<h4 id=\"创建网格（meshgrid）\"><a href=\"#创建网格（meshgrid）\" class=\"headerlink\" title=\"创建网格（meshgrid）\"></a>创建网格（meshgrid）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"其他方法创建\"><a href=\"#其他方法创建\" class=\"headerlink\" title=\"其他方法创建\"></a>其他方法创建</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.linspace(begin, end, bia)</td>\n<td>根据起止数据等间距地填充数据，形成数组（从begin到end，共bia个数）</td>\n</tr>\n<tr>\n<td>np.concatenate()</td>\n<td>将两个或多个数组合并成一个新的数组</td>\n</tr>\n</tbody></table>\n<p>示例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; a = np.linspace(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>)<br>&gt;&gt;&gt; a<br><span class=\"hljs-built_in\">array</span>([ <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">5.5</span>, <span class=\"hljs-number\">10.</span> ])<br>&gt;&gt;&gt; b = np.linspace(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">3</span>, endpoint=False)<br>&gt;&gt;&gt; b<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">4.</span>, <span class=\"hljs-number\">7.</span>])<br>&gt;&gt;&gt; c = np.concatenate((a, b))<br>&gt;&gt;&gt; c<br><span class=\"hljs-built_in\">array</span>([ <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">5.5</span>, <span class=\"hljs-number\">10.</span> ,  <span class=\"hljs-number\">1.</span> ,  <span class=\"hljs-number\">4.</span> ,  <span class=\"hljs-number\">7.</span> ])<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"变换方法\"><a href=\"#变换方法\" class=\"headerlink\" title=\"变换方法\"></a>变换方法</h3><h4 id=\"维度变换\"><a href=\"#维度变换\" class=\"headerlink\" title=\"维度变换\"></a>维度变换</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.reshape(shape)</td>\n<td>不改变数组元素，返回一个shape形状的数组，<strong>原数组不变</strong></td>\n</tr>\n<tr>\n<td>.resize(shape)</td>\n<td>与.reshape()功能一致，但<strong>修改原数组</strong></td>\n</tr>\n<tr>\n<td>.flatten()</td>\n<td>对数组进行降维，返回折叠后的一维数组，原数组不变</td>\n</tr>\n</tbody></table>\n<p><strong>如果只想指示一个维度，而自动决定其他维度有多少个值，可以使用-1的写法（如果不能整除会报错）</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 想让数组有<span class=\"hljs-number\">5</span>行，列数自动决定<br>x.reshape(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">-1</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"类型变换\"><a href=\"#类型变换\" class=\"headerlink\" title=\"类型变换\"></a>类型变换</h4><p>astype()方法一定会创建新的数组（原始数据的一个拷贝），即使两个类型一致</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elm\"><span class=\"hljs-title\">new_l</span> = l.<span class=\"hljs-keyword\">as</span><span class=\"hljs-keyword\">type</span>(new_type)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"转换为列表\"><a href=\"#转换为列表\" class=\"headerlink\" title=\"转换为列表\"></a>转换为列表</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">l</span> = n.tolist()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数组的操作\"><a href=\"#数组的操作\" class=\"headerlink\" title=\"数组的操作\"></a>数组的操作</h3><h4 id=\"索引与切片\"><a href=\"#索引与切片\" class=\"headerlink\" title=\"索引与切片\"></a>索引与切片</h4><p><strong>ndarray数组的索引与切片与Python中的索引与切片大致相同</strong></p>\n<h4 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h4><p><strong>ndarray数组与标量之间的运算作用于数组的每一个元素，包括平方立方等等，示例如下：</strong></p>\n<figure class=\"highlight gml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gml\">np.<span class=\"hljs-built_in\">abs</span>(n)\t<span class=\"hljs-comment\">// 各元素的绝对值</span><br>np.<span class=\"hljs-built_in\">sqrt</span>(<span class=\"hljs-symbol\">x</span>)\t<span class=\"hljs-comment\">// 各元素的平方根</span><br></code></pre></td></tr></table></figure>\n\n<p>同时使用数组中进行大小比较等运算时，会返回一个数值为布尔类型的数组（<strong>也是每个元素进行比较</strong>）</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">X = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>print(X &gt; <span class=\"hljs-number\">3</span>)<br>#######################################<br>[[<span class=\"hljs-literal\">False</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-literal\">False</span>]<br> [ <span class=\"hljs-literal\">True</span>  <span class=\"hljs-literal\">True</span>  <span class=\"hljs-literal\">True</span>]]<br></code></pre></td></tr></table></figure>\n\n<p>借用这个特性，可以完成对满足某一要求的元素进行如赋值等其他操作</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">X = np.array([[<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>]])<br>X[X &gt; <span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">10</span><br>print(X)<br>####################################<br>[[ <span class=\"hljs-number\">1</span>  <span class=\"hljs-number\">2</span>  <span class=\"hljs-number\">3</span>]<br> [<span class=\"hljs-number\">10</span> <span class=\"hljs-number\">10</span> <span class=\"hljs-number\">10</span>]]<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"合并与分割\"><a href=\"#合并与分割\" class=\"headerlink\" title=\"合并与分割\"></a>合并与分割</h4><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.concatenate([n1, n2], axis=1)</td>\n<td>将矩阵n1、n2按照第1个维度合并（axis默认为0）。同时返回一个新的矩阵</td>\n</tr>\n<tr>\n<td>np.vstack([n1, n2])</td>\n<td>在垂直的维度合并n1，n2</td>\n</tr>\n<tr>\n<td>np.hstack([n1, n2])</td>\n<td>在水平方向合并n1,n2</td>\n</tr>\n<tr>\n<td>x1, x2, x3 = np.split(x, [2,4], axis=1)</td>\n<td>将x按照[0, 2)、[2, 4)、[4, end)进行分割并赋值（依此类推）</td>\n</tr>\n<tr>\n<td>np.vsplit()、np.hsplit()</td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"矩阵运算\"><a href=\"#矩阵运算\" class=\"headerlink\" title=\"矩阵运算\"></a>矩阵运算</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A.dot(B)</td>\n<td>矩阵乘法</td>\n</tr>\n<tr>\n<td>A.T</td>\n<td>矩阵转置</td>\n</tr>\n<tr>\n<td>np.linalg.inv(A)</td>\n<td>矩阵的逆</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>np.random.shuffle(x)</td>\n<td>对x进行乱序处理</td>\n</tr>\n<tr>\n<td>np.sort(x)</td>\n<td>返回排序后的x</td>\n</tr>\n</tbody></table>\n<h3 id=\"随机数函数\"><a href=\"#随机数函数\" class=\"headerlink\" title=\"随机数函数\"></a>随机数函数</h3><p>在numpy的子库numpy.random中</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>rand(d0,d1,..,dn)</td>\n<td>根据d0‐dn作为维度创建随机数数组，浮点数，[0,1)，均匀分布</td>\n</tr>\n<tr>\n<td>randn(d0,d1,..,dn)</td>\n<td>根据d0‐dn创建随机数数组，标准正态分布</td>\n</tr>\n<tr>\n<td>randint(low, high, shape)</td>\n<td>根据shape创建随机整数或整数数组，范围是[low, high)</td>\n</tr>\n<tr>\n<td>seed(s)</td>\n<td>随机数种子，s是给定的种子值（计算机中随机数都是“伪随机数”，依赖于该随机种子）</td>\n</tr>\n<tr>\n<td>normal(均值, 方差, shape)</td>\n<td>生成给定均值与方差的符合正态分布的数或矩阵，shape为(元组)</td>\n</tr>\n</tbody></table>\n<h3 id=\"统计函数（聚合函数）\"><a href=\"#统计函数（聚合函数）\" class=\"headerlink\" title=\"统计函数（聚合函数）\"></a>统计函数（聚合函数）</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sum(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素之和，axis整数或元组</td>\n</tr>\n<tr>\n<td>mean(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的期望，axis整数或元组</td>\n</tr>\n<tr>\n<td>average(a,axis=None,weights=None)</td>\n<td>根据给定轴axis计算数组a相关元素的加权平均值，weights是列表</td>\n</tr>\n<tr>\n<td>std(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的标准差</td>\n</tr>\n<tr>\n<td>var(a, axis=None)</td>\n<td>根据给定轴axis计算数组a相关元素的方差</td>\n</tr>\n<tr>\n<td>min(a)  max(a)</td>\n<td>计算数组a中元素的最小值、最大值</td>\n</tr>\n<tr>\n<td>argmin(a)  argmax(a)</td>\n<td>计算数组a中元素最小值、最大值的降一维后下标</td>\n</tr>\n</tbody></table>\n<h3 id=\"梯度函数\"><a href=\"#梯度函数\" class=\"headerlink\" title=\"梯度函数\"></a>梯度函数</h3><p><code>np.gradient(f)</code>，计算数组f中元素的梯度（即连续值之间的变化率），当f为多维时，返回每个维度梯度</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; a = np.arange(<span class=\"hljs-number\">5</span>)<br>&gt;&gt;&gt; a<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])<br>&gt;&gt;&gt; np.gradient(a)<br><span class=\"hljs-built_in\">array</span>([<span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>, <span class=\"hljs-number\">1.</span>])<br></code></pre></td></tr></table></figure>\n\n<p><strong>说明：</strong>以索引为2的值为例，该处梯度的计算值为(a[3] - a[1]) / 2 = 1</p>\n<h3 id=\"ndarray数据的读写\"><a href=\"#ndarray数据的读写\" class=\"headerlink\" title=\"ndarray数据的读写\"></a>ndarray数据的读写</h3><h4 id=\"二维数据读写\"><a href=\"#二维数据读写\" class=\"headerlink\" title=\"二维数据读写\"></a>二维数据读写</h4><p><strong>CSV文件</strong>，以逗号作为分隔符的常见文件格式</p>\n<p><strong>np.savetxt()</strong>：写入文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># frame : 文件、字符串或产生器</span><br><span class=\"hljs-comment\"># array : 存入文件的数组</span><br><span class=\"hljs-comment\"># fmt : 写入文件的格式</span><br><span class=\"hljs-comment\"># delimiter : 分割字符串，默认是任何空格</span><br>np.savetxt(frame, array, fmt=<span class=\"hljs-string\">'%.18e'</span>, delimiter=<span class=\"hljs-literal\">None</span>)<br></code></pre></td></tr></table></figure>\n\n<p>例:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">np.savetxt(<span class=\"hljs-string\">'a.csv'</span>, a, <span class=\"hljs-attribute\">fmt</span>=<span class=\"hljs-string\">'%d'</span>, <span class=\"hljs-attribute\">delimiter</span>=<span class=\"hljs-string\">','</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>np.loadtxt()</strong>：读取文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># unpack  : 如果True，读入属性将分别写入不同变量</span><br>np.loadtxt(frame, dtype=np.float, delimiter=<span class=\"hljs-literal\">None</span>， unpack=<span class=\"hljs-literal\">False</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"多维数据存取\"><a href=\"#多维数据存取\" class=\"headerlink\" title=\"多维数据存取\"></a>多维数据存取</h4><p><strong>a.tofile()</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># frame  : 文件、字符串</span><br><span class=\"hljs-comment\"># sep : 数据分割字符串，如果是空串，写入文件为二进制</span><br><span class=\"hljs-comment\"># format : 写入数据的格式</span><br>a.tofile(frame, <span class=\"hljs-attribute\">sep</span>=<span class=\"hljs-string\">''</span>, <span class=\"hljs-attribute\">format</span>=<span class=\"hljs-string\">'%s'</span>)<br></code></pre></td></tr></table></figure>\n\n<p><strong>np.fromfile()</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># count  : 读入元素个数，‐1表示读入整个文件</span><br><span class=\"hljs-comment\"># sep : 数据分割字符串，如果是空串，写入文件为二进制</span><br>np.fromfile(frame, <span class=\"hljs-attribute\">dtype</span>=float, <span class=\"hljs-attribute\">count</span>=‐1, <span class=\"hljs-attribute\">sep</span>=<span class=\"hljs-string\">''</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"便捷文件存取\"><a href=\"#便捷文件存取\" class=\"headerlink\" title=\"便捷文件存取\"></a>便捷文件存取</h4><p>其中文件名称通常以.npy为拓展名</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\"><span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">save</span>(fname, <span class=\"hljs-built_in\">array</span>)<br><br><span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">load</span>(fname)<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Pandas库基本用法","date":"2020-08-22T03:38:29.000Z","fileName":"pandas-basic-use","_content":"\n## Pandas基础\n\nPandas是Python第三方库，提供高性能易用数据类型和分析工具，其基于NumPy实现，常与NumPy和Matplotlib一同使用.\n\n器有两个主要数据类型：**Series, DataFrame**\n\n基于上述数据类型的各类操作\n基本操作、运算操作、特征类操作、关联类操作\n\n| NumPy              | Pandas             |\n| ------------------ | ------------------ |\n| 基础数据类型       | 扩展数据类型       |\n| 关注数据的结构表达 | 关注数据的应用表达 |\n| 维度：数据间关系   | 数据与索引间关系   |\n\n\n\n## Series类型\n\nSeries类型由一组数据及与之相关的数据索引组成（类似python的enumerate）\n\n如下所示，Series为列表**自动创建了索引**\n\n```\n>>> import pandas as pd\n>>> p = pd.Series([4,3,2,1])\n>>> p\n0    4\n1    3\n2    2\n3    1\ndtype: int64\n```\n\n也可以使用index参数**手动指定索引**（index可省略）\n\n```\n>>> import pandas as pd\n>>> a = pd.Series([1,2,3],['a','b','c'])\n>>> a\na    1\nb    2\nc    3\ndtype: int64\n```\n\n### Series类型的创建\n\n> * Python列表，index与列表元素个数一致\n>\n> * 标量值，index表达Series类型的尺寸\n> * Python字典，键值对中的“键”是索引，index从字典中进行选择操作\n> * ndarray，索引和数据都可以通过ndarray类型创建\n>\n> * 其他函数，range()函数等\n\n### Series类型的操作\n\n#### 获得索引与数据\n\n```\n>>> a.index\nIndex(['a', 'b', 'c'], dtype='object')\n>>> a.values\narray([1, 2, 3], dtype=int64)\n```\n\n#### 其他操作\n\n**其他操作基本与numpy和Python中自带的字典一致，包括切片等功能，其中自定义索引与自动索引并存，但不能混用**\n\n\n\n## DataFrame类型\n\n**DataFrame类型由共用相同索引的一组列组成（一种表格型的数据类型）**\n\n\n\n\n\n\n\n### 参考\n\nMOOC上北理工相关课程PPT","source":"_posts/编程相关/Python/Python常用模块/Pandas库基本用法.md","raw":"---\ntitle: Pandas库基本用法\ndate: 2020-08-22 11:38:29\ntags:\n\t- Pandas\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python常用模块\nfileName: pandas-basic-use\n---\n\n## Pandas基础\n\nPandas是Python第三方库，提供高性能易用数据类型和分析工具，其基于NumPy实现，常与NumPy和Matplotlib一同使用.\n\n器有两个主要数据类型：**Series, DataFrame**\n\n基于上述数据类型的各类操作\n基本操作、运算操作、特征类操作、关联类操作\n\n| NumPy              | Pandas             |\n| ------------------ | ------------------ |\n| 基础数据类型       | 扩展数据类型       |\n| 关注数据的结构表达 | 关注数据的应用表达 |\n| 维度：数据间关系   | 数据与索引间关系   |\n\n\n\n## Series类型\n\nSeries类型由一组数据及与之相关的数据索引组成（类似python的enumerate）\n\n如下所示，Series为列表**自动创建了索引**\n\n```\n>>> import pandas as pd\n>>> p = pd.Series([4,3,2,1])\n>>> p\n0    4\n1    3\n2    2\n3    1\ndtype: int64\n```\n\n也可以使用index参数**手动指定索引**（index可省略）\n\n```\n>>> import pandas as pd\n>>> a = pd.Series([1,2,3],['a','b','c'])\n>>> a\na    1\nb    2\nc    3\ndtype: int64\n```\n\n### Series类型的创建\n\n> * Python列表，index与列表元素个数一致\n>\n> * 标量值，index表达Series类型的尺寸\n> * Python字典，键值对中的“键”是索引，index从字典中进行选择操作\n> * ndarray，索引和数据都可以通过ndarray类型创建\n>\n> * 其他函数，range()函数等\n\n### Series类型的操作\n\n#### 获得索引与数据\n\n```\n>>> a.index\nIndex(['a', 'b', 'c'], dtype='object')\n>>> a.values\narray([1, 2, 3], dtype=int64)\n```\n\n#### 其他操作\n\n**其他操作基本与numpy和Python中自带的字典一致，包括切片等功能，其中自定义索引与自动索引并存，但不能混用**\n\n\n\n## DataFrame类型\n\n**DataFrame类型由共用相同索引的一组列组成（一种表格型的数据类型）**\n\n\n\n\n\n\n\n### 参考\n\nMOOC上北理工相关课程PPT","slug":"编程相关/Python/Python常用模块/Pandas库基本用法","published":1,"updated":"2021-01-11T04:37:04.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moet00gerwjsb48c9f2p","content":"<h2 id=\"Pandas基础\"><a href=\"#Pandas基础\" class=\"headerlink\" title=\"Pandas基础\"></a>Pandas基础</h2><p>Pandas是Python第三方库，提供高性能易用数据类型和分析工具，其基于NumPy实现，常与NumPy和Matplotlib一同使用.</p>\n<p>器有两个主要数据类型：<strong>Series, DataFrame</strong></p>\n<p>基于上述数据类型的各类操作<br>基本操作、运算操作、特征类操作、关联类操作</p>\n<table>\n<thead>\n<tr>\n<th>NumPy</th>\n<th>Pandas</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基础数据类型</td>\n<td>扩展数据类型</td>\n</tr>\n<tr>\n<td>关注数据的结构表达</td>\n<td>关注数据的应用表达</td>\n</tr>\n<tr>\n<td>维度：数据间关系</td>\n<td>数据与索引间关系</td>\n</tr>\n</tbody></table>\n<h2 id=\"Series类型\"><a href=\"#Series类型\" class=\"headerlink\" title=\"Series类型\"></a>Series类型</h2><p>Series类型由一组数据及与之相关的数据索引组成（类似python的enumerate）</p>\n<p>如下所示，Series为列表<strong>自动创建了索引</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; <span class=\"hljs-keyword\">import</span> pandas as pd<br>&gt;&gt;&gt; p = pd.Series([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>])<br>&gt;&gt;&gt; p<br><span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span>    <span class=\"hljs-number\">1</span><br>dtype: <span class=\"hljs-built_in\">int</span>64<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用index参数<strong>手动指定索引</strong>（index可省略）</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-meta\">&gt;&gt;</span>&gt; import pandas as pd<br><span class=\"hljs-meta\">&gt;&gt;</span>&gt; a = pd.Series([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>])<br><span class=\"hljs-meta\">&gt;&gt;</span>&gt; a<br>a    <span class=\"hljs-number\">1</span><br>b    <span class=\"hljs-number\">2</span><br>c    <span class=\"hljs-number\">3</span><br><span class=\"hljs-symbol\">dtype:</span> int64<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Series类型的创建\"><a href=\"#Series类型的创建\" class=\"headerlink\" title=\"Series类型的创建\"></a>Series类型的创建</h3><blockquote>\n<ul>\n<li><p>Python列表，index与列表元素个数一致</p>\n</li>\n<li><p>标量值，index表达Series类型的尺寸</p>\n</li>\n<li><p>Python字典，键值对中的“键”是索引，index从字典中进行选择操作</p>\n</li>\n<li><p>ndarray，索引和数据都可以通过ndarray类型创建</p>\n</li>\n<li><p>其他函数，range()函数等</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Series类型的操作\"><a href=\"#Series类型的操作\" class=\"headerlink\" title=\"Series类型的操作\"></a>Series类型的操作</h3><h4 id=\"获得索引与数据\"><a href=\"#获得索引与数据\" class=\"headerlink\" title=\"获得索引与数据\"></a>获得索引与数据</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">&gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.index</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">Index</span><span class=\"hljs-params\">([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>], dtype=<span class=\"hljs-string\">'object'</span>)</span></span><br>&gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.values</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">array</span><span class=\"hljs-params\">([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], dtype=int64)</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><p><strong>其他操作基本与numpy和Python中自带的字典一致，包括切片等功能，其中自定义索引与自动索引并存，但不能混用</strong></p>\n<h2 id=\"DataFrame类型\"><a href=\"#DataFrame类型\" class=\"headerlink\" title=\"DataFrame类型\"></a>DataFrame类型</h2><p><strong>DataFrame类型由共用相同索引的一组列组成（一种表格型的数据类型）</strong></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>MOOC上北理工相关课程PPT</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Pandas基础\"><a href=\"#Pandas基础\" class=\"headerlink\" title=\"Pandas基础\"></a>Pandas基础</h2><p>Pandas是Python第三方库，提供高性能易用数据类型和分析工具，其基于NumPy实现，常与NumPy和Matplotlib一同使用.</p>\n<p>器有两个主要数据类型：<strong>Series, DataFrame</strong></p>\n<p>基于上述数据类型的各类操作<br>基本操作、运算操作、特征类操作、关联类操作</p>\n<table>\n<thead>\n<tr>\n<th>NumPy</th>\n<th>Pandas</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>基础数据类型</td>\n<td>扩展数据类型</td>\n</tr>\n<tr>\n<td>关注数据的结构表达</td>\n<td>关注数据的应用表达</td>\n</tr>\n<tr>\n<td>维度：数据间关系</td>\n<td>数据与索引间关系</td>\n</tr>\n</tbody></table>\n<h2 id=\"Series类型\"><a href=\"#Series类型\" class=\"headerlink\" title=\"Series类型\"></a>Series类型</h2><p>Series类型由一组数据及与之相关的数据索引组成（类似python的enumerate）</p>\n<p>如下所示，Series为列表<strong>自动创建了索引</strong></p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\">&gt;&gt;&gt; <span class=\"hljs-keyword\">import</span> pandas as pd<br>&gt;&gt;&gt; p = pd.Series([<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>])<br>&gt;&gt;&gt; p<br><span class=\"hljs-number\">0</span>    <span class=\"hljs-number\">4</span><br><span class=\"hljs-number\">1</span>    <span class=\"hljs-number\">3</span><br><span class=\"hljs-number\">2</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-number\">3</span>    <span class=\"hljs-number\">1</span><br>dtype: <span class=\"hljs-built_in\">int</span>64<br></code></pre></td></tr></table></figure>\n\n<p>也可以使用index参数<strong>手动指定索引</strong>（index可省略）</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\"><span class=\"hljs-meta\">&gt;&gt;</span>&gt; import pandas as pd<br><span class=\"hljs-meta\">&gt;&gt;</span>&gt; a = pd.Series([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>],[<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'b'</span>,<span class=\"hljs-string\">'c'</span>])<br><span class=\"hljs-meta\">&gt;&gt;</span>&gt; a<br>a    <span class=\"hljs-number\">1</span><br>b    <span class=\"hljs-number\">2</span><br>c    <span class=\"hljs-number\">3</span><br><span class=\"hljs-symbol\">dtype:</span> int64<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Series类型的创建\"><a href=\"#Series类型的创建\" class=\"headerlink\" title=\"Series类型的创建\"></a>Series类型的创建</h3><blockquote>\n<ul>\n<li><p>Python列表，index与列表元素个数一致</p>\n</li>\n<li><p>标量值，index表达Series类型的尺寸</p>\n</li>\n<li><p>Python字典，键值对中的“键”是索引，index从字典中进行选择操作</p>\n</li>\n<li><p>ndarray，索引和数据都可以通过ndarray类型创建</p>\n</li>\n<li><p>其他函数，range()函数等</p>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Series类型的操作\"><a href=\"#Series类型的操作\" class=\"headerlink\" title=\"Series类型的操作\"></a>Series类型的操作</h3><h4 id=\"获得索引与数据\"><a href=\"#获得索引与数据\" class=\"headerlink\" title=\"获得索引与数据\"></a>获得索引与数据</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">&gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.index</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">Index</span><span class=\"hljs-params\">([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>], dtype=<span class=\"hljs-string\">'object'</span>)</span></span><br>&gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.values</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">array</span><span class=\"hljs-params\">([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], dtype=int64)</span></span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h4><p><strong>其他操作基本与numpy和Python中自带的字典一致，包括切片等功能，其中自定义索引与自动索引并存，但不能混用</strong></p>\n<h2 id=\"DataFrame类型\"><a href=\"#DataFrame类型\" class=\"headerlink\" title=\"DataFrame类型\"></a>DataFrame类型</h2><p><strong>DataFrame类型由共用相同索引的一组列组成（一种表格型的数据类型）</strong></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>MOOC上北理工相关课程PPT</p>\n"},{"title":"python常见问题","date":"2020-06-26T09:29:13.000Z","fileName":"python-common-method","_content":"\n## 项目常用\n\n### 生成requirements.txt\n\n使用`pipreqs`生成requirements\n\n```\n# 安装\npip install pipreqs\n# 在当前目录生成（若存在即覆盖）\npipreqs . --encoding=utf8 --force\n```\n\n使用requirement.txt安装依赖：\n\n```\\\npip install -r requirements.txt\n```\n\n\n\n## pythonic的编码方式\n\n### 变量的交换\n\n```\na, b = b, a\n```\n\n\n\n### 利用百分号语法进行字符串格式化\n\n```\na = 'Curry'\nb = 'Player'\nprint(\"%s is the best %s\" % (a,b))\n#################\nCurry is the best Player\n```\n\n\n\n### 将两个字典合并（解包操作）\n\n```\na = {}\nb = {}\nc = {**a, **b}\t# 解包\n```\n\n","source":"_posts/编程相关/Python/Python基础/python常见问题.md","raw":"---\ntitle: python常见问题\ndate: 2020-06-26 17:29:13\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python基础\nfileName: python-common-method\n---\n\n## 项目常用\n\n### 生成requirements.txt\n\n使用`pipreqs`生成requirements\n\n```\n# 安装\npip install pipreqs\n# 在当前目录生成（若存在即覆盖）\npipreqs . --encoding=utf8 --force\n```\n\n使用requirement.txt安装依赖：\n\n```\\\npip install -r requirements.txt\n```\n\n\n\n## pythonic的编码方式\n\n### 变量的交换\n\n```\na, b = b, a\n```\n\n\n\n### 利用百分号语法进行字符串格式化\n\n```\na = 'Curry'\nb = 'Player'\nprint(\"%s is the best %s\" % (a,b))\n#################\nCurry is the best Player\n```\n\n\n\n### 将两个字典合并（解包操作）\n\n```\na = {}\nb = {}\nc = {**a, **b}\t# 解包\n```\n\n","slug":"编程相关/Python/Python基础/python常见问题","published":1,"updated":"2021-01-11T04:35:26.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moeu00gjrwjs465ac1y0","content":"<h2 id=\"项目常用\"><a href=\"#项目常用\" class=\"headerlink\" title=\"项目常用\"></a>项目常用</h2><h3 id=\"生成requirements-txt\"><a href=\"#生成requirements-txt\" class=\"headerlink\" title=\"生成requirements.txt\"></a>生成requirements.txt</h3><p>使用<code>pipreqs</code>生成requirements</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-comment\"># 安装</span><br>pip install pipreqs<br><span class=\"hljs-comment\"># 在当前目录生成（若存在即覆盖）</span><br>pipreqs . <span class=\"hljs-params\">--encoding=utf8</span> <span class=\"hljs-params\">--force</span><br></code></pre></td></tr></table></figure>\n\n<p>使用requirement.txt安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs \\\">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pythonic的编码方式\"><a href=\"#pythonic的编码方式\" class=\"headerlink\" title=\"pythonic的编码方式\"></a>pythonic的编码方式</h2><h3 id=\"变量的交换\"><a href=\"#变量的交换\" class=\"headerlink\" title=\"变量的交换\"></a>变量的交换</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">a</span>, <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-selector-tag\">b</span>, a<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"利用百分号语法进行字符串格式化\"><a href=\"#利用百分号语法进行字符串格式化\" class=\"headerlink\" title=\"利用百分号语法进行字符串格式化\"></a>利用百分号语法进行字符串格式化</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">a = <span class=\"hljs-string\">'Curry'</span><br>b = <span class=\"hljs-string\">'Player'</span><br>print(<span class=\"hljs-string\">\"%s is the best %s\"</span> % (a,b))<br>#################<br>Curry is the best Player<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"将两个字典合并（解包操作）\"><a href=\"#将两个字典合并（解包操作）\" class=\"headerlink\" title=\"将两个字典合并（解包操作）\"></a>将两个字典合并（解包操作）</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">a</span> = &#123;&#125;<br><span class=\"hljs-attr\">b</span> = &#123;&#125;<br><span class=\"hljs-attr\">c</span> = &#123;**a, **b&#125;\t<span class=\"hljs-comment\"># 解包</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"项目常用\"><a href=\"#项目常用\" class=\"headerlink\" title=\"项目常用\"></a>项目常用</h2><h3 id=\"生成requirements-txt\"><a href=\"#生成requirements-txt\" class=\"headerlink\" title=\"生成requirements.txt\"></a>生成requirements.txt</h3><p>使用<code>pipreqs</code>生成requirements</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jboss-cli\"><span class=\"hljs-comment\"># 安装</span><br>pip install pipreqs<br><span class=\"hljs-comment\"># 在当前目录生成（若存在即覆盖）</span><br>pipreqs . <span class=\"hljs-params\">--encoding=utf8</span> <span class=\"hljs-params\">--force</span><br></code></pre></td></tr></table></figure>\n\n<p>使用requirement.txt安装依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs \\\">pip install -r requirements.txt<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pythonic的编码方式\"><a href=\"#pythonic的编码方式\" class=\"headerlink\" title=\"pythonic的编码方式\"></a>pythonic的编码方式</h2><h3 id=\"变量的交换\"><a href=\"#变量的交换\" class=\"headerlink\" title=\"变量的交换\"></a>变量的交换</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">a</span>, <span class=\"hljs-selector-tag\">b</span> = <span class=\"hljs-selector-tag\">b</span>, a<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"利用百分号语法进行字符串格式化\"><a href=\"#利用百分号语法进行字符串格式化\" class=\"headerlink\" title=\"利用百分号语法进行字符串格式化\"></a>利用百分号语法进行字符串格式化</h3><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">a = <span class=\"hljs-string\">'Curry'</span><br>b = <span class=\"hljs-string\">'Player'</span><br>print(<span class=\"hljs-string\">\"%s is the best %s\"</span> % (a,b))<br>#################<br>Curry is the best Player<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"将两个字典合并（解包操作）\"><a href=\"#将两个字典合并（解包操作）\" class=\"headerlink\" title=\"将两个字典合并（解包操作）\"></a>将两个字典合并（解包操作）</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">a</span> = &#123;&#125;<br><span class=\"hljs-attr\">b</span> = &#123;&#125;<br><span class=\"hljs-attr\">c</span> = &#123;**a, **b&#125;\t<span class=\"hljs-comment\"># 解包</span><br></code></pre></td></tr></table></figure>\n\n"},{"title":"matplotlib库基本使用","date":"2020-08-21T05:58:33.000Z","fileName":"python-matplotlib-use","_content":"\n## matplotlib库的基本用法\n\n这是一个图表可视化的工具，和matlab中对应的图表可视化很像\n\n参考文档以及一些可视化效果可见：http://matplotlib.org/gallery.html\n\n导入：`import matplotlib.pyplot as plt`\n\n### 绘图函数plot()\n\n与matlab中对应的绘图函数类似。\n\n```python\n# X轴数据，列表或数组，（可选）\n# Y轴数据，列表或数组，只写一个自动就是y轴数据\n# 控制曲线的格式字符串，（可选）(颜色字符、风格字符、标记字符)\n# 第二组或更多(x,y,format_string)\nplt.plot(x, y, format_string, **kwargs)\n```\n\n### plt.gca()获取修改坐标轴\n\n```\n\n```\n\n\n\n\n\n### pyplot的文本显示函数\n\n| 函数           | 说明                     |\n| -------------- | ------------------------ |\n| plt.xlabel()   | 对X轴增加文本标签        |\n| plt.ylabel()   | 对Y轴增加文本标签        |\n| plt.title()    | 对图形整体增加文本标签   |\n| plt.text()     | 在任意位置增加文本       |\n| plt.annotate() | 在图形中增加带箭头的注解 |\n\n其中annotate()函数中：xy表示箭头指向的坐标，xytest表示文字坐标，之后的arrowprops传入箭头的粗细颜色等信息，具体如下。\n\n### 示例\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na = np.arange(0.0, 5.0, 0.02)\nplt.plot(a, np.cos(2*np.pi*a))\n\nplt.xlabel(\"x-axis\")\nplt.ylabel(\"y-axis\")\nplt.title(r'$y = cos(2 \\pi x)$')\t# 使用latex\nplt.annotate(r'$cos(2 \\pi x)$', xy=(2,1), xytext=(3, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.1, width=1))\n\nplt.axis([-1, 6, -2, 2])\nplt.grid(True)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/plot%E7%A4%BA%E4%BE%8B.png)\n\n\n\n### plt.figure()\n\n#### 基本理解\n\n<img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/fig%E4%B8%8Eaxis.png\" style=\"zoom:67%;\" />\n\n#### 语法说明\n\n```\nfigure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True)\n\n\"\"\"\n      num : 图像编号或名称，数字为编号，字符串为名称\n  figsize : 指定figure的宽和高，单位为英寸\n      dpi : 指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80\nfacecolor : 背景的颜色\nedgecolor : 边框颜色\n  frameon : 是否显示边框\n\"\"\"\n\n# 示例\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(4, 3), facecolor='blue')\nplt.plot([1 ,2, 3, 4])\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/figure%E7%A4%BA%E4%BE%8B.png)\n\n\n\n### plt.subplot()创建单个子图\n\n即将绘图区域分为nrows行，ncols列，然后在从上向下从左到右第plot_number处进行绘图。使用与matlab中的函数基本一致，还有一些比较复杂的绘图函数，我个人认为没有什么必要（要是用在文章中放进ai再处理好了，没必要直接输出成图吧）\n\n```\nplt.subplot(nrows, ncols, plot_number)\n```\n\n\n\n### plt.subplots()创建多个子图\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 100)\n#划分子图\nfig, axes = plt.subplots(2, 2)\nax1 = axes[0, 0]\nax2 = axes[0, 1]\nax3 = axes[1, 0]\nax4 = axes[1, 1]\n\n#作图1\nax1.plot(x, x)\n#作图2\nax2.plot(x, x)\n#作图3\nax3.plot(x, x ** 2)\n#作图4\nax4.plot(x, np.log(x))\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/subplots%E7%A4%BA%E4%BE%8B.png)\n\n\n\n\n\n### 面向对象API\n\n#### add_subplot新增子图\n\n该方法与subplot方法类似，如下代码即与plt.subplots()中绘制第一幅图和第三幅图等价\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 100)\n#新建figure对象\nfig = plt.figure()\n#新建子图1\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, x)\n#新建子图3\nax3 = fig.add_subplot(2, 2, 3)\nax3.plot(x, x ** 2)\n```\n\n#### add_axes新增子区域（图中图）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#新建figure对象\nfig = plt.figure()\n\n#定义数据\nx = [1, 2, 3, 4, 5, 6, 7]\ny = [1, 3, 4, 2, 5, 8, 6]\n\n#新建区域ax1\n#figure的百分比，从figure 10%的位置开始绘制，宽高是figure的80%\nleft, bottom, width, height = 0.1, 0.1, 0.8, 0.8\n#获得绘制的句柄\nax1 = fig.add_axes([left, bottom, width, height])\nax1.plot(x, y, 'r')\nax1.set_title('area1')\n\n\n#新增区域ax2，嵌套在ax1内\nleft, bottom, width, height = 0.2, 0.6, 0.25, 0.25\n#获得绘制的句柄\nax2 = fig.add_axes([left, bottom, width, height])\nax2.plot(x, y, 'b')\nax2.set_title('area2')\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%9B%BE%E4%B8%AD%E5%9B%BE.png)\n\n\n\n### 保存图像\n\n使用plt.savefig()能很容易的实现，但应当注意，**必须写在plt.show()之前**，否则保存的图像会是空白的\n\n```\nplt.savefig('test.png')\n```\n\n\n\n\n\n## 常用可视化图表绘制\n\n常见可视化图表如下\n\n| 函数                              | 说明                                                |\n| --------------------------------- | --------------------------------------------------- |\n| plt.plot(x,y,fmt,…)               | 绘制一个坐标图                                      |\n| plt.scatter(x,y)                  | 绘制散点图，其中，x和y长度相同                      |\n| plt.bar(left,height,width,bottom) | 绘制一个条形图                                      |\n| plt.contour(X,Y,Z,N)              | 绘制等值图                                          |\n| plt.pie(data, explode)            | 绘制饼图（explode传入一个元组，表示一块出来的比例） |\n| plt.hist(x,bins)                  | 绘制直方图（bins代表直方图个数）                    |\n| plt.polar(theta, r)               | 绘制极坐标图                                        |\n| ...                               | ...                                                 |\n\n### 饼图（pie）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlabels = 'A', 'B', 'C', 'D'\nsizes = [10, 20 ,30, 40]\nexplode = (0, 0, 0, 0.15)\nplt.pie(sizes, explode=explode, labels=labels)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E9%A5%BC%E5%9B%BE.png)\n\n\n\n### 直方图（hist）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0)\nmu, sigma = 100, 20\na = np.random.normal(mu, sigma, size=100)\nplt.hist(a, bins=40, facecolor='r')\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%9B%B4%E6%96%B9%E5%9B%BE.png)\n\n\n\n### 等值图（contour）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndelta = 0.025\nx = np.arange(-3.0, 3.0, delta)\ny = np.arange(-3.0, 3.0, delta)\nX, Y = np.meshgrid(x, y)\nZ = np.exp(-X**2/12 - Y**2/2)\nplt.contour(X, Y, Z)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%AD%89%E5%80%BC%E5%9B%BE.png)\n\n\n\n\n\n## matplotlib总结图（源于知乎）\n\n![图源自知乎](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/matplotlib%E6%80%BB%E7%BB%93.jpg)\n\n\n\n### 参考\n\nhttps://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/\n\nmooc北理工相关课程\n\nhttp://matplotlib.org/gallery.html\n\nhttps://www.zhihu.com/question/51745620","source":"_posts/编程相关/Python/Python常用模块/matplotlib库基本使用.md","raw":"---\ntitle: matplotlib库基本使用\ndate: 2020-08-21 13:58:33\ntags:\n\t- matplotlib\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python常用模块\nfileName: python-matplotlib-use\n---\n\n## matplotlib库的基本用法\n\n这是一个图表可视化的工具，和matlab中对应的图表可视化很像\n\n参考文档以及一些可视化效果可见：http://matplotlib.org/gallery.html\n\n导入：`import matplotlib.pyplot as plt`\n\n### 绘图函数plot()\n\n与matlab中对应的绘图函数类似。\n\n```python\n# X轴数据，列表或数组，（可选）\n# Y轴数据，列表或数组，只写一个自动就是y轴数据\n# 控制曲线的格式字符串，（可选）(颜色字符、风格字符、标记字符)\n# 第二组或更多(x,y,format_string)\nplt.plot(x, y, format_string, **kwargs)\n```\n\n### plt.gca()获取修改坐标轴\n\n```\n\n```\n\n\n\n\n\n### pyplot的文本显示函数\n\n| 函数           | 说明                     |\n| -------------- | ------------------------ |\n| plt.xlabel()   | 对X轴增加文本标签        |\n| plt.ylabel()   | 对Y轴增加文本标签        |\n| plt.title()    | 对图形整体增加文本标签   |\n| plt.text()     | 在任意位置增加文本       |\n| plt.annotate() | 在图形中增加带箭头的注解 |\n\n其中annotate()函数中：xy表示箭头指向的坐标，xytest表示文字坐标，之后的arrowprops传入箭头的粗细颜色等信息，具体如下。\n\n### 示例\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na = np.arange(0.0, 5.0, 0.02)\nplt.plot(a, np.cos(2*np.pi*a))\n\nplt.xlabel(\"x-axis\")\nplt.ylabel(\"y-axis\")\nplt.title(r'$y = cos(2 \\pi x)$')\t# 使用latex\nplt.annotate(r'$cos(2 \\pi x)$', xy=(2,1), xytext=(3, 1.5),\n            arrowprops=dict(facecolor='black', shrink=0.1, width=1))\n\nplt.axis([-1, 6, -2, 2])\nplt.grid(True)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/plot%E7%A4%BA%E4%BE%8B.png)\n\n\n\n### plt.figure()\n\n#### 基本理解\n\n<img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/fig%E4%B8%8Eaxis.png\" style=\"zoom:67%;\" />\n\n#### 语法说明\n\n```\nfigure(num=None, figsize=None, dpi=None, facecolor=None, edgecolor=None, frameon=True)\n\n\"\"\"\n      num : 图像编号或名称，数字为编号，字符串为名称\n  figsize : 指定figure的宽和高，单位为英寸\n      dpi : 指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80\nfacecolor : 背景的颜色\nedgecolor : 边框颜色\n  frameon : 是否显示边框\n\"\"\"\n\n# 示例\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(4, 3), facecolor='blue')\nplt.plot([1 ,2, 3, 4])\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/figure%E7%A4%BA%E4%BE%8B.png)\n\n\n\n### plt.subplot()创建单个子图\n\n即将绘图区域分为nrows行，ncols列，然后在从上向下从左到右第plot_number处进行绘图。使用与matlab中的函数基本一致，还有一些比较复杂的绘图函数，我个人认为没有什么必要（要是用在文章中放进ai再处理好了，没必要直接输出成图吧）\n\n```\nplt.subplot(nrows, ncols, plot_number)\n```\n\n\n\n### plt.subplots()创建多个子图\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 100)\n#划分子图\nfig, axes = plt.subplots(2, 2)\nax1 = axes[0, 0]\nax2 = axes[0, 1]\nax3 = axes[1, 0]\nax4 = axes[1, 1]\n\n#作图1\nax1.plot(x, x)\n#作图2\nax2.plot(x, x)\n#作图3\nax3.plot(x, x ** 2)\n#作图4\nax4.plot(x, np.log(x))\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/subplots%E7%A4%BA%E4%BE%8B.png)\n\n\n\n\n\n### 面向对象API\n\n#### add_subplot新增子图\n\n该方法与subplot方法类似，如下代码即与plt.subplots()中绘制第一幅图和第三幅图等价\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.arange(0, 100)\n#新建figure对象\nfig = plt.figure()\n#新建子图1\nax1 = fig.add_subplot(2, 2, 1)\nax1.plot(x, x)\n#新建子图3\nax3 = fig.add_subplot(2, 2, 3)\nax3.plot(x, x ** 2)\n```\n\n#### add_axes新增子区域（图中图）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#新建figure对象\nfig = plt.figure()\n\n#定义数据\nx = [1, 2, 3, 4, 5, 6, 7]\ny = [1, 3, 4, 2, 5, 8, 6]\n\n#新建区域ax1\n#figure的百分比，从figure 10%的位置开始绘制，宽高是figure的80%\nleft, bottom, width, height = 0.1, 0.1, 0.8, 0.8\n#获得绘制的句柄\nax1 = fig.add_axes([left, bottom, width, height])\nax1.plot(x, y, 'r')\nax1.set_title('area1')\n\n\n#新增区域ax2，嵌套在ax1内\nleft, bottom, width, height = 0.2, 0.6, 0.25, 0.25\n#获得绘制的句柄\nax2 = fig.add_axes([left, bottom, width, height])\nax2.plot(x, y, 'b')\nax2.set_title('area2')\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%9B%BE%E4%B8%AD%E5%9B%BE.png)\n\n\n\n### 保存图像\n\n使用plt.savefig()能很容易的实现，但应当注意，**必须写在plt.show()之前**，否则保存的图像会是空白的\n\n```\nplt.savefig('test.png')\n```\n\n\n\n\n\n## 常用可视化图表绘制\n\n常见可视化图表如下\n\n| 函数                              | 说明                                                |\n| --------------------------------- | --------------------------------------------------- |\n| plt.plot(x,y,fmt,…)               | 绘制一个坐标图                                      |\n| plt.scatter(x,y)                  | 绘制散点图，其中，x和y长度相同                      |\n| plt.bar(left,height,width,bottom) | 绘制一个条形图                                      |\n| plt.contour(X,Y,Z,N)              | 绘制等值图                                          |\n| plt.pie(data, explode)            | 绘制饼图（explode传入一个元组，表示一块出来的比例） |\n| plt.hist(x,bins)                  | 绘制直方图（bins代表直方图个数）                    |\n| plt.polar(theta, r)               | 绘制极坐标图                                        |\n| ...                               | ...                                                 |\n\n### 饼图（pie）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nlabels = 'A', 'B', 'C', 'D'\nsizes = [10, 20 ,30, 40]\nexplode = (0, 0, 0, 0.15)\nplt.pie(sizes, explode=explode, labels=labels)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E9%A5%BC%E5%9B%BE.png)\n\n\n\n### 直方图（hist）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nnp.random.seed(0)\nmu, sigma = 100, 20\na = np.random.normal(mu, sigma, size=100)\nplt.hist(a, bins=40, facecolor='r')\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%9B%B4%E6%96%B9%E5%9B%BE.png)\n\n\n\n### 等值图（contour）\n\n```\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndelta = 0.025\nx = np.arange(-3.0, 3.0, delta)\ny = np.arange(-3.0, 3.0, delta)\nX, Y = np.meshgrid(x, y)\nZ = np.exp(-X**2/12 - Y**2/2)\nplt.contour(X, Y, Z)\nplt.show()\n```\n\n![](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%AD%89%E5%80%BC%E5%9B%BE.png)\n\n\n\n\n\n## matplotlib总结图（源于知乎）\n\n![图源自知乎](http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/matplotlib%E6%80%BB%E7%BB%93.jpg)\n\n\n\n### 参考\n\nhttps://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/\n\nmooc北理工相关课程\n\nhttp://matplotlib.org/gallery.html\n\nhttps://www.zhihu.com/question/51745620","slug":"编程相关/Python/Python常用模块/matplotlib库基本使用","published":1,"updated":"2021-01-11T04:36:45.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moev00gmrwjsa5hv321b","content":"<h2 id=\"matplotlib库的基本用法\"><a href=\"#matplotlib库的基本用法\" class=\"headerlink\" title=\"matplotlib库的基本用法\"></a>matplotlib库的基本用法</h2><p>这是一个图表可视化的工具，和matlab中对应的图表可视化很像</p>\n<p>参考文档以及一些可视化效果可见：<a href=\"http://matplotlib.org/gallery.html\" target=\"_blank\" rel=\"noopener\">http://matplotlib.org/gallery.html</a></p>\n<p>导入：<code>import matplotlib.pyplot as plt</code></p>\n<h3 id=\"绘图函数plot\"><a href=\"#绘图函数plot\" class=\"headerlink\" title=\"绘图函数plot()\"></a>绘图函数plot()</h3><p>与matlab中对应的绘图函数类似。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># X轴数据，列表或数组，（可选）</span><br><span class=\"hljs-comment\"># Y轴数据，列表或数组，只写一个自动就是y轴数据</span><br><span class=\"hljs-comment\"># 控制曲线的格式字符串，（可选）(颜色字符、风格字符、标记字符)</span><br><span class=\"hljs-comment\"># 第二组或更多(x,y,format_string)</span><br>plt.plot(x, y, format_string, **kwargs)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"plt-gca-获取修改坐标轴\"><a href=\"#plt-gca-获取修改坐标轴\" class=\"headerlink\" title=\"plt.gca()获取修改坐标轴\"></a>plt.gca()获取修改坐标轴</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"pyplot的文本显示函数\"><a href=\"#pyplot的文本显示函数\" class=\"headerlink\" title=\"pyplot的文本显示函数\"></a>pyplot的文本显示函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plt.xlabel()</td>\n<td>对X轴增加文本标签</td>\n</tr>\n<tr>\n<td>plt.ylabel()</td>\n<td>对Y轴增加文本标签</td>\n</tr>\n<tr>\n<td>plt.title()</td>\n<td>对图形整体增加文本标签</td>\n</tr>\n<tr>\n<td>plt.text()</td>\n<td>在任意位置增加文本</td>\n</tr>\n<tr>\n<td>plt.annotate()</td>\n<td>在图形中增加带箭头的注解</td>\n</tr>\n</tbody></table>\n<p>其中annotate()函数中：xy表示箭头指向的坐标，xytest表示文字坐标，之后的arrowprops传入箭头的粗细颜色等信息，具体如下。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>a = np.arange(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">0.02</span>)<br>plt.plot(a, np.cos(<span class=\"hljs-number\">2</span>*np.pi*a))<br><br>plt.xlabel(<span class=\"hljs-string\">\"x-axis\"</span>)<br>plt.ylabel(<span class=\"hljs-string\">\"y-axis\"</span>)<br>plt.title(<span class=\"hljs-string\">r'$y = cos(2 \\pi x)$'</span>)\t<span class=\"hljs-comment\"># 使用latex</span><br>plt.annotate(<span class=\"hljs-string\">r'$cos(2 \\pi x)$'</span>, xy=(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>), xytext=(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1.5</span>),<br>            arrowprops=dict(facecolor=<span class=\"hljs-string\">'black'</span>, shrink=<span class=\"hljs-number\">0.1</span>, width=<span class=\"hljs-number\">1</span>))<br><br>plt.axis([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">2</span>])<br>plt.grid(<span class=\"hljs-literal\">True</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/plot%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"plt-figure\"><a href=\"#plt-figure\" class=\"headerlink\" title=\"plt.figure()\"></a>plt.figure()</h3><h4 id=\"基本理解\"><a href=\"#基本理解\" class=\"headerlink\" title=\"基本理解\"></a>基本理解</h4><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/fig%E4%B8%8Eaxis.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">figure(num=<span class=\"hljs-literal\">None</span>, figsize=<span class=\"hljs-literal\">None</span>, dpi=<span class=\"hljs-literal\">None</span>, facecolor=<span class=\"hljs-literal\">None</span>, edgecolor=<span class=\"hljs-literal\">None</span>, frameon=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-string\">\"\"\"<br>      num : 图像编号或名称，数字为编号，字符串为名称<br>  figsize : 指定figure的宽和高，单位为英寸<br>      dpi : 指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80<br>facecolor : 背景的颜色<br>edgecolor : 边框颜色<br>  frameon : 是否显示边框<br>\"\"\"</span><br><br><span class=\"hljs-comment\"># 示例</span><br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>fig = plt.figure(figsize=(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>), facecolor=<span class=\"hljs-string\">'blue'</span>)<br>plt.plot([<span class=\"hljs-number\">1</span> ,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/figure%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"plt-subplot-创建单个子图\"><a href=\"#plt-subplot-创建单个子图\" class=\"headerlink\" title=\"plt.subplot()创建单个子图\"></a>plt.subplot()创建单个子图</h3><p>即将绘图区域分为nrows行，ncols列，然后在从上向下从左到右第plot_number处进行绘图。使用与matlab中的函数基本一致，还有一些比较复杂的绘图函数，我个人认为没有什么必要（要是用在文章中放进ai再处理好了，没必要直接输出成图吧）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.subplot</span>(<span class=\"hljs-selector-tag\">nrows</span>, <span class=\"hljs-selector-tag\">ncols</span>, <span class=\"hljs-selector-tag\">plot_number</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"plt-subplots-创建多个子图\"><a href=\"#plt-subplots-创建多个子图\" class=\"headerlink\" title=\"plt.subplots()创建多个子图\"></a>plt.subplots()创建多个子图</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>x = np.arange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)<br>#划分子图<br>fig, axes = plt.subplots(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br>ax1 = axes[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]<br>ax2 = axes[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>ax3 = axes[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]<br>ax4 = axes[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]<br><br>#作图<span class=\"hljs-number\">1</span><br>ax1.plot(x, x)<br>#作图<span class=\"hljs-number\">2</span><br>ax2.plot(x, x)<br>#作图<span class=\"hljs-number\">3</span><br>ax3.plot(x, x ** <span class=\"hljs-number\">2</span>)<br>#作图<span class=\"hljs-number\">4</span><br>ax4.plot(x, np.log(x))<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/subplots%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"面向对象API\"><a href=\"#面向对象API\" class=\"headerlink\" title=\"面向对象API\"></a>面向对象API</h3><h4 id=\"add-subplot新增子图\"><a href=\"#add-subplot新增子图\" class=\"headerlink\" title=\"add_subplot新增子图\"></a>add_subplot新增子图</h4><p>该方法与subplot方法类似，如下代码即与plt.subplots()中绘制第一幅图和第三幅图等价</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>x = np.arange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)<br>#新建figure对象<br>fig = plt.figure()<br>#新建子图<span class=\"hljs-number\">1</span><br>ax1 = fig.add_subplot(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)<br>ax1.plot(x, x)<br>#新建子图<span class=\"hljs-number\">3</span><br>ax3 = fig.add_subplot(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br>ax3.plot(x, x ** <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"add-axes新增子区域（图中图）\"><a href=\"#add-axes新增子区域（图中图）\" class=\"headerlink\" title=\"add_axes新增子区域（图中图）\"></a>add_axes新增子区域（图中图）</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">import</span> <span class=\"hljs-string\">numpy</span> <span class=\"hljs-string\">as</span> <span class=\"hljs-string\">np</span><br><span class=\"hljs-string\">import</span> <span class=\"hljs-string\">matplotlib.pyplot</span> <span class=\"hljs-string\">as</span> <span class=\"hljs-string\">plt</span><br><br><span class=\"hljs-comment\">#新建figure对象</span><br><span class=\"hljs-string\">fig</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">plt.figure()</span><br><br><span class=\"hljs-comment\">#定义数据</span><br><span class=\"hljs-string\">x</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">[1,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">7</span><span class=\"hljs-string\">]</span><br><span class=\"hljs-string\">y</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">[1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">8</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">]</span><br><br><span class=\"hljs-comment\">#新建区域ax1</span><br><span class=\"hljs-comment\">#figure的百分比，从figure 10%的位置开始绘制，宽高是figure的80%</span><br><span class=\"hljs-string\">left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0.1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.8</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.8</span><br><span class=\"hljs-comment\">#获得绘制的句柄</span><br><span class=\"hljs-string\">ax1</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fig.add_axes([left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height])</span><br><span class=\"hljs-string\">ax1.plot(x,</span> <span class=\"hljs-string\">y,</span> <span class=\"hljs-string\">'r'</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">ax1.set_title('area1')</span><br><br><br><span class=\"hljs-comment\">#新增区域ax2，嵌套在ax1内</span><br><span class=\"hljs-string\">left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0.2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.6</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.25</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.25</span><br><span class=\"hljs-comment\">#获得绘制的句柄</span><br><span class=\"hljs-string\">ax2</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fig.add_axes([left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height])</span><br><span class=\"hljs-string\">ax2.plot(x,</span> <span class=\"hljs-string\">y,</span> <span class=\"hljs-string\">'b'</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">ax2.set_title('area2')</span><br><span class=\"hljs-string\">plt.show()</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%9B%BE%E4%B8%AD%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"保存图像\"><a href=\"#保存图像\" class=\"headerlink\" title=\"保存图像\"></a>保存图像</h3><p>使用plt.savefig()能很容易的实现，但应当注意，<strong>必须写在plt.show()之前</strong>，否则保存的图像会是空白的</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.savefig</span>(<span class=\"hljs-string\">'test.png'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"常用可视化图表绘制\"><a href=\"#常用可视化图表绘制\" class=\"headerlink\" title=\"常用可视化图表绘制\"></a>常用可视化图表绘制</h2><p>常见可视化图表如下</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plt.plot(x,y,fmt,…)</td>\n<td>绘制一个坐标图</td>\n</tr>\n<tr>\n<td>plt.scatter(x,y)</td>\n<td>绘制散点图，其中，x和y长度相同</td>\n</tr>\n<tr>\n<td>plt.bar(left,height,width,bottom)</td>\n<td>绘制一个条形图</td>\n</tr>\n<tr>\n<td>plt.contour(X,Y,Z,N)</td>\n<td>绘制等值图</td>\n</tr>\n<tr>\n<td>plt.pie(data, explode)</td>\n<td>绘制饼图（explode传入一个元组，表示一块出来的比例）</td>\n</tr>\n<tr>\n<td>plt.hist(x,bins)</td>\n<td>绘制直方图（bins代表直方图个数）</td>\n</tr>\n<tr>\n<td>plt.polar(theta, r)</td>\n<td>绘制极坐标图</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h3 id=\"饼图（pie）\"><a href=\"#饼图（pie）\" class=\"headerlink\" title=\"饼图（pie）\"></a>饼图（pie）</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>labels = <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span><br>sizes = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span> ,<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>]<br>explode = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.15</span>)<br>plt.pie(sizes, explode=explode, labels=labels)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E9%A5%BC%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"直方图（hist）\"><a href=\"#直方图（hist）\" class=\"headerlink\" title=\"直方图（hist）\"></a>直方图（hist）</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">import numpy <span class=\"hljs-keyword\">as</span> np<br>import matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>np.<span class=\"hljs-built_in\">random</span>.seed(<span class=\"hljs-number\">0</span>)<br>mu, sigma = <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span><br><span class=\"hljs-keyword\">a</span> = np.<span class=\"hljs-built_in\">random</span>.<span class=\"hljs-keyword\">normal</span>(mu, sigma, size=<span class=\"hljs-number\">100</span>)<br>plt.hist(<span class=\"hljs-keyword\">a</span>, bins=<span class=\"hljs-number\">40</span>, facecolor=<span class=\"hljs-string\">'r'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"等值图（contour）\"><a href=\"#等值图（contour）\" class=\"headerlink\" title=\"等值图（contour）\"></a>等值图（contour）</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>delta = <span class=\"hljs-number\">0.025</span><br>x = np.arange(<span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">3.0</span>, delta)<br>y = np.arange(<span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">3.0</span>, delta)<br>X, Y = np.meshgrid(x, y)<br>Z = np.exp(-X**<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">12</span> - Y**<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">2</span>)<br>plt.contour(X, Y, Z)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%AD%89%E5%80%BC%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"matplotlib总结图（源于知乎）\"><a href=\"#matplotlib总结图（源于知乎）\" class=\"headerlink\" title=\"matplotlib总结图（源于知乎）\"></a>matplotlib总结图（源于知乎）</h2><p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/matplotlib%E6%80%BB%E7%BB%93.jpg\" alt=\"图源自知乎\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/\" target=\"_blank\" rel=\"noopener\">https://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/</a></p>\n<p>mooc北理工相关课程</p>\n<p><a href=\"http://matplotlib.org/gallery.html\" target=\"_blank\" rel=\"noopener\">http://matplotlib.org/gallery.html</a></p>\n<p><a href=\"https://www.zhihu.com/question/51745620\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/51745620</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"matplotlib库的基本用法\"><a href=\"#matplotlib库的基本用法\" class=\"headerlink\" title=\"matplotlib库的基本用法\"></a>matplotlib库的基本用法</h2><p>这是一个图表可视化的工具，和matlab中对应的图表可视化很像</p>\n<p>参考文档以及一些可视化效果可见：<a href=\"http://matplotlib.org/gallery.html\" target=\"_blank\" rel=\"noopener\">http://matplotlib.org/gallery.html</a></p>\n<p>导入：<code>import matplotlib.pyplot as plt</code></p>\n<h3 id=\"绘图函数plot\"><a href=\"#绘图函数plot\" class=\"headerlink\" title=\"绘图函数plot()\"></a>绘图函数plot()</h3><p>与matlab中对应的绘图函数类似。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># X轴数据，列表或数组，（可选）</span><br><span class=\"hljs-comment\"># Y轴数据，列表或数组，只写一个自动就是y轴数据</span><br><span class=\"hljs-comment\"># 控制曲线的格式字符串，（可选）(颜色字符、风格字符、标记字符)</span><br><span class=\"hljs-comment\"># 第二组或更多(x,y,format_string)</span><br>plt.plot(x, y, format_string, **kwargs)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"plt-gca-获取修改坐标轴\"><a href=\"#plt-gca-获取修改坐标轴\" class=\"headerlink\" title=\"plt.gca()获取修改坐标轴\"></a>plt.gca()获取修改坐标轴</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs plain\"><br><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"pyplot的文本显示函数\"><a href=\"#pyplot的文本显示函数\" class=\"headerlink\" title=\"pyplot的文本显示函数\"></a>pyplot的文本显示函数</h3><table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plt.xlabel()</td>\n<td>对X轴增加文本标签</td>\n</tr>\n<tr>\n<td>plt.ylabel()</td>\n<td>对Y轴增加文本标签</td>\n</tr>\n<tr>\n<td>plt.title()</td>\n<td>对图形整体增加文本标签</td>\n</tr>\n<tr>\n<td>plt.text()</td>\n<td>在任意位置增加文本</td>\n</tr>\n<tr>\n<td>plt.annotate()</td>\n<td>在图形中增加带箭头的注解</td>\n</tr>\n</tbody></table>\n<p>其中annotate()函数中：xy表示箭头指向的坐标，xytest表示文字坐标，之后的arrowprops传入箭头的粗细颜色等信息，具体如下。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>a = np.arange(<span class=\"hljs-number\">0.0</span>, <span class=\"hljs-number\">5.0</span>, <span class=\"hljs-number\">0.02</span>)<br>plt.plot(a, np.cos(<span class=\"hljs-number\">2</span>*np.pi*a))<br><br>plt.xlabel(<span class=\"hljs-string\">\"x-axis\"</span>)<br>plt.ylabel(<span class=\"hljs-string\">\"y-axis\"</span>)<br>plt.title(<span class=\"hljs-string\">r'$y = cos(2 \\pi x)$'</span>)\t<span class=\"hljs-comment\"># 使用latex</span><br>plt.annotate(<span class=\"hljs-string\">r'$cos(2 \\pi x)$'</span>, xy=(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>), xytext=(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1.5</span>),<br>            arrowprops=dict(facecolor=<span class=\"hljs-string\">'black'</span>, shrink=<span class=\"hljs-number\">0.1</span>, width=<span class=\"hljs-number\">1</span>))<br><br>plt.axis([<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">2</span>])<br>plt.grid(<span class=\"hljs-literal\">True</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/plot%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"plt-figure\"><a href=\"#plt-figure\" class=\"headerlink\" title=\"plt.figure()\"></a>plt.figure()</h3><h4 id=\"基本理解\"><a href=\"#基本理解\" class=\"headerlink\" title=\"基本理解\"></a>基本理解</h4><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/fig%E4%B8%8Eaxis.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">figure(num=<span class=\"hljs-literal\">None</span>, figsize=<span class=\"hljs-literal\">None</span>, dpi=<span class=\"hljs-literal\">None</span>, facecolor=<span class=\"hljs-literal\">None</span>, edgecolor=<span class=\"hljs-literal\">None</span>, frameon=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-string\">\"\"\"<br>      num : 图像编号或名称，数字为编号，字符串为名称<br>  figsize : 指定figure的宽和高，单位为英寸<br>      dpi : 指定绘图对象的分辨率，即每英寸多少个像素，缺省值为80<br>facecolor : 背景的颜色<br>edgecolor : 边框颜色<br>  frameon : 是否显示边框<br>\"\"\"</span><br><br><span class=\"hljs-comment\"># 示例</span><br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>fig = plt.figure(figsize=(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>), facecolor=<span class=\"hljs-string\">'blue'</span>)<br>plt.plot([<span class=\"hljs-number\">1</span> ,<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>])<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/figure%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"plt-subplot-创建单个子图\"><a href=\"#plt-subplot-创建单个子图\" class=\"headerlink\" title=\"plt.subplot()创建单个子图\"></a>plt.subplot()创建单个子图</h3><p>即将绘图区域分为nrows行，ncols列，然后在从上向下从左到右第plot_number处进行绘图。使用与matlab中的函数基本一致，还有一些比较复杂的绘图函数，我个人认为没有什么必要（要是用在文章中放进ai再处理好了，没必要直接输出成图吧）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.subplot</span>(<span class=\"hljs-selector-tag\">nrows</span>, <span class=\"hljs-selector-tag\">ncols</span>, <span class=\"hljs-selector-tag\">plot_number</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"plt-subplots-创建多个子图\"><a href=\"#plt-subplots-创建多个子图\" class=\"headerlink\" title=\"plt.subplots()创建多个子图\"></a>plt.subplots()创建多个子图</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>x = np.arange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)<br>#划分子图<br>fig, axes = plt.subplots(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>)<br>ax1 = axes[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>]<br>ax2 = axes[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>]<br>ax3 = axes[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>]<br>ax4 = axes[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>]<br><br>#作图<span class=\"hljs-number\">1</span><br>ax1.plot(x, x)<br>#作图<span class=\"hljs-number\">2</span><br>ax2.plot(x, x)<br>#作图<span class=\"hljs-number\">3</span><br>ax3.plot(x, x ** <span class=\"hljs-number\">2</span>)<br>#作图<span class=\"hljs-number\">4</span><br>ax4.plot(x, np.log(x))<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/subplots%E7%A4%BA%E4%BE%8B.png\" alt=\"\"></p>\n<h3 id=\"面向对象API\"><a href=\"#面向对象API\" class=\"headerlink\" title=\"面向对象API\"></a>面向对象API</h3><h4 id=\"add-subplot新增子图\"><a href=\"#add-subplot新增子图\" class=\"headerlink\" title=\"add_subplot新增子图\"></a>add_subplot新增子图</h4><p>该方法与subplot方法类似，如下代码即与plt.subplots()中绘制第一幅图和第三幅图等价</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>x = np.arange(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">100</span>)<br>#新建figure对象<br>fig = plt.figure()<br>#新建子图<span class=\"hljs-number\">1</span><br>ax1 = fig.add_subplot(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)<br>ax1.plot(x, x)<br>#新建子图<span class=\"hljs-number\">3</span><br>ax3 = fig.add_subplot(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br>ax3.plot(x, x ** <span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"add-axes新增子区域（图中图）\"><a href=\"#add-axes新增子区域（图中图）\" class=\"headerlink\" title=\"add_axes新增子区域（图中图）\"></a>add_axes新增子区域（图中图）</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">import</span> <span class=\"hljs-string\">numpy</span> <span class=\"hljs-string\">as</span> <span class=\"hljs-string\">np</span><br><span class=\"hljs-string\">import</span> <span class=\"hljs-string\">matplotlib.pyplot</span> <span class=\"hljs-string\">as</span> <span class=\"hljs-string\">plt</span><br><br><span class=\"hljs-comment\">#新建figure对象</span><br><span class=\"hljs-string\">fig</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">plt.figure()</span><br><br><span class=\"hljs-comment\">#定义数据</span><br><span class=\"hljs-string\">x</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">[1,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">7</span><span class=\"hljs-string\">]</span><br><span class=\"hljs-string\">y</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">[1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">5</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">8</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">6</span><span class=\"hljs-string\">]</span><br><br><span class=\"hljs-comment\">#新建区域ax1</span><br><span class=\"hljs-comment\">#figure的百分比，从figure 10%的位置开始绘制，宽高是figure的80%</span><br><span class=\"hljs-string\">left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0.1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.1</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.8</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.8</span><br><span class=\"hljs-comment\">#获得绘制的句柄</span><br><span class=\"hljs-string\">ax1</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fig.add_axes([left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height])</span><br><span class=\"hljs-string\">ax1.plot(x,</span> <span class=\"hljs-string\">y,</span> <span class=\"hljs-string\">'r'</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">ax1.set_title('area1')</span><br><br><br><span class=\"hljs-comment\">#新增区域ax2，嵌套在ax1内</span><br><span class=\"hljs-string\">left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-number\">0.2</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.6</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.25</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">0.25</span><br><span class=\"hljs-comment\">#获得绘制的句柄</span><br><span class=\"hljs-string\">ax2</span> <span class=\"hljs-string\">=</span> <span class=\"hljs-string\">fig.add_axes([left,</span> <span class=\"hljs-string\">bottom,</span> <span class=\"hljs-string\">width,</span> <span class=\"hljs-string\">height])</span><br><span class=\"hljs-string\">ax2.plot(x,</span> <span class=\"hljs-string\">y,</span> <span class=\"hljs-string\">'b'</span><span class=\"hljs-string\">)</span><br><span class=\"hljs-string\">ax2.set_title('area2')</span><br><span class=\"hljs-string\">plt.show()</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E5%9B%BE%E4%B8%AD%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"保存图像\"><a href=\"#保存图像\" class=\"headerlink\" title=\"保存图像\"></a>保存图像</h3><p>使用plt.savefig()能很容易的实现，但应当注意，<strong>必须写在plt.show()之前</strong>，否则保存的图像会是空白的</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">plt</span><span class=\"hljs-selector-class\">.savefig</span>(<span class=\"hljs-string\">'test.png'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"常用可视化图表绘制\"><a href=\"#常用可视化图表绘制\" class=\"headerlink\" title=\"常用可视化图表绘制\"></a>常用可视化图表绘制</h2><p>常见可视化图表如下</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>plt.plot(x,y,fmt,…)</td>\n<td>绘制一个坐标图</td>\n</tr>\n<tr>\n<td>plt.scatter(x,y)</td>\n<td>绘制散点图，其中，x和y长度相同</td>\n</tr>\n<tr>\n<td>plt.bar(left,height,width,bottom)</td>\n<td>绘制一个条形图</td>\n</tr>\n<tr>\n<td>plt.contour(X,Y,Z,N)</td>\n<td>绘制等值图</td>\n</tr>\n<tr>\n<td>plt.pie(data, explode)</td>\n<td>绘制饼图（explode传入一个元组，表示一块出来的比例）</td>\n</tr>\n<tr>\n<td>plt.hist(x,bins)</td>\n<td>绘制直方图（bins代表直方图个数）</td>\n</tr>\n<tr>\n<td>plt.polar(theta, r)</td>\n<td>绘制极坐标图</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h3 id=\"饼图（pie）\"><a href=\"#饼图（pie）\" class=\"headerlink\" title=\"饼图（pie）\"></a>饼图（pie）</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>labels = <span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>, <span class=\"hljs-string\">'D'</span><br>sizes = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span> ,<span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>]<br>explode = (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0.15</span>)<br>plt.pie(sizes, explode=explode, labels=labels)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E9%A5%BC%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"直方图（hist）\"><a href=\"#直方图（hist）\" class=\"headerlink\" title=\"直方图（hist）\"></a>直方图（hist）</h3><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">import numpy <span class=\"hljs-keyword\">as</span> np<br>import matplotlib.pyplot <span class=\"hljs-keyword\">as</span> plt<br><br>np.<span class=\"hljs-built_in\">random</span>.seed(<span class=\"hljs-number\">0</span>)<br>mu, sigma = <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">20</span><br><span class=\"hljs-keyword\">a</span> = np.<span class=\"hljs-built_in\">random</span>.<span class=\"hljs-keyword\">normal</span>(mu, sigma, size=<span class=\"hljs-number\">100</span>)<br>plt.hist(<span class=\"hljs-keyword\">a</span>, bins=<span class=\"hljs-number\">40</span>, facecolor=<span class=\"hljs-string\">'r'</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" alt=\"\"></p>\n<h3 id=\"等值图（contour）\"><a href=\"#等值图（contour）\" class=\"headerlink\" title=\"等值图（contour）\"></a>等值图（contour）</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">import</span> numpy as np<br><span class=\"hljs-keyword\">import</span> matplotlib.pyplot as plt<br><br>delta = <span class=\"hljs-number\">0.025</span><br>x = np.arange(<span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">3.0</span>, delta)<br>y = np.arange(<span class=\"hljs-number\">-3.0</span>, <span class=\"hljs-number\">3.0</span>, delta)<br>X, Y = np.meshgrid(x, y)<br>Z = np.exp(-X**<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">12</span> - Y**<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">2</span>)<br>plt.contour(X, Y, Z)<br>plt.show()<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/%E7%AD%89%E5%80%BC%E5%9B%BE.png\" alt=\"\"></p>\n<h2 id=\"matplotlib总结图（源于知乎）\"><a href=\"#matplotlib总结图（源于知乎）\" class=\"headerlink\" title=\"matplotlib总结图（源于知乎）\"></a>matplotlib总结图（源于知乎）</h2><p><img src=\"http://cdn.ziyedy.top/image/matplotlib%E5%BA%93%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/matplotlib%E6%80%BB%E7%BB%93.jpg\" alt=\"图源自知乎\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/\" target=\"_blank\" rel=\"noopener\">https://www.dazhuanlan.com/2020/01/19/5e24219f9ae61/</a></p>\n<p>mooc北理工相关课程</p>\n<p><a href=\"http://matplotlib.org/gallery.html\" target=\"_blank\" rel=\"noopener\">http://matplotlib.org/gallery.html</a></p>\n<p><a href=\"https://www.zhihu.com/question/51745620\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/51745620</a></p>\n"},{"title":"路径操作常用模块（os与pathlib）","date":"2020-06-20T01:41:07.000Z","fileName":"Python-path-operation","_content":"\n## OS模块\n\n### 模块简介\n\n> os模块是Python标准库中的一个用于**访问操作系统功能**的模块。使用os模块中提供的接口可以实现跨平台访问。\n\n\n\n### 系统操作\n\nos.sep：用于系统路径的分隔符。Windows为“\\\\\\”，Linux为“/”。\n\nos.name：指示正在使用的工作平台。Windows为‘nt’，Linux为‘posix’。\n\nos.getenv('path')：读取环境变量名称\n\nos.getcwd()：获取当前路径\n\nos.getpid()：获取当前进程ID\n\n#### os.system\n\n> 将字符串转化为命令行在操作系统上执行。每次执行system函数，会创建一个子进程在系统上执行命令（**子进程的执行结果无法影响主进程**）\n\n\n\n\n\n### 目录操作\n\n**os.listdir(path)**：列出指定目录下的所有文件和子目录，包括隐藏文件；参数为空，为当前目录，返回一个列表。\n\nos.mkdir()：创建一个目录。\n\nos.rmdir()：删除一个空目录，如果该目录中有文件则删除不了。\n\n\n\n**os.rename(src, dst) **：用于重命名文件或目录，从src改为dst。若运行出错会抛出OSError。\n\n\n\n### Path模块\n\nos.path.exists(path)：判断文件或者目录是否存在。存在返回True，不存在返回False。\n\nos.path.isfile(path)：判断是否为文件。是返回True，不是返回False。\n\nos.path.isdir(path)：判断是否为目录。是返回True，不是返回False。\n\n\n\nos.path.abspath()：返回绝对路径\n\nos.path.realpath(\\__file__)：获取当前.py文件的目录\n\nos.path.dirname()：返回文件路径\n\nos.path.basename(path) ：返回文件名\n\n\n\nos.path.split(path) ：拆分路径dirname和basename，返回为元组\n\n**os.path.splitext('')**：将文件名与后缀名分开\n\n\n\n**os.path.join(path, name)**：连接目录与文件名或目录\n\n\n\n#### 示例\n\n```\nimport os\n\nfile_path = os.path.realpath(__file__)  # 该py文件目录\nprint(file_path)\nprint(os.path.dirname(file_path))   # 上级目录\nprint(os.path.basename(file_path))  # py文件名称\nprint(os.path.split(file_path)) # 分割目录与名称\n\n##############################################\nC:\\Users\\lenovo\\Desktop\\vega\\gg.py\nC:\\Users\\lenovo\\Desktop\\vega\ngg.py\n('C:\\\\Users\\\\lenovo\\\\Desktop\\\\vega', 'gg.py')\n```\n\n\n\n### 操作实例\n\n1、将某一路径下的文件名称中的广告部分去除并填上文件后缀名\n\n```\ndef rename():\n    path = '你的路径'\n    file_list = os.listdir(path)\t# 得到文件名列表\n    for file in file_list:\n        old_dir = os.path.join(path, file)\t#得到初始路径\n        # 若该文件名为路径，则继续遍历\n        if os.path.isdir(old_dir):\n            continue\n        file_name = os.path.splitext(file)[0]\n        # 在该处进行文件名的字符串更改操作\n        file_type = os.path.splitext(file)[1]\n        # 在该处变更文件的后缀\n        file_name = file_name+file_type\n        new_dir = os.path.join(path, file_name)\t# 新的路径\n        os.rename(old_dir, new_dir)\t# 完成文件的重命名\n```\n\n\n\n## pathlib模块\n\n### 基础使用\n\n#### 导入\n\n```\nfrom pathlib import Path\n```\n\n#### 列出子目录\n\n```\nIn[5]: p = Path('C:\\\\Users\\\\lenovo\\\\.keras\\\\datasets\\\\flower_photos')\nIn[6]: [x for x in p.iterdir() if x.is_dir()]\nOut[6]: \n[WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/daisy'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/dandelion'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/roses'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/sunflowers'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/tulips')]\n```\n\n#### 获取当前目录下所有文件与文件夹\n\n```\nIn[7]: list(p.glob('*/'))\nOut[7]: \n[WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/daisy'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/dandelion'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/LICENSE.txt'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/roses'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/sunflowers'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/tulips')]\n```\n\n#### 路径拼接\n\n```\nIn[9]: q = p / 'daisy'\nIn[10]: print(q)\nC:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\daisy\n```\n\n#### 查询属性\n\n路径是否存在与是否是路径\n\n```\nIn[11]: q.exists()\nOut[11]: True\nIn[12]: q.is_dir()\nOut[12]: True\n```\n\n\n\n\n\n### 参考链接\n\nhttps://docs.python.org/zh-cn/3/library/pathlib.html","source":"_posts/编程相关/Python/Python常用模块/路径操作常用模块（os与pathlib）.md","raw":"---\ntitle: 路径操作常用模块（os与pathlib）\ndate: 2020-06-20 09:41:07\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- Python常用模块\nfileName: Python-path-operation\n---\n\n## OS模块\n\n### 模块简介\n\n> os模块是Python标准库中的一个用于**访问操作系统功能**的模块。使用os模块中提供的接口可以实现跨平台访问。\n\n\n\n### 系统操作\n\nos.sep：用于系统路径的分隔符。Windows为“\\\\\\”，Linux为“/”。\n\nos.name：指示正在使用的工作平台。Windows为‘nt’，Linux为‘posix’。\n\nos.getenv('path')：读取环境变量名称\n\nos.getcwd()：获取当前路径\n\nos.getpid()：获取当前进程ID\n\n#### os.system\n\n> 将字符串转化为命令行在操作系统上执行。每次执行system函数，会创建一个子进程在系统上执行命令（**子进程的执行结果无法影响主进程**）\n\n\n\n\n\n### 目录操作\n\n**os.listdir(path)**：列出指定目录下的所有文件和子目录，包括隐藏文件；参数为空，为当前目录，返回一个列表。\n\nos.mkdir()：创建一个目录。\n\nos.rmdir()：删除一个空目录，如果该目录中有文件则删除不了。\n\n\n\n**os.rename(src, dst) **：用于重命名文件或目录，从src改为dst。若运行出错会抛出OSError。\n\n\n\n### Path模块\n\nos.path.exists(path)：判断文件或者目录是否存在。存在返回True，不存在返回False。\n\nos.path.isfile(path)：判断是否为文件。是返回True，不是返回False。\n\nos.path.isdir(path)：判断是否为目录。是返回True，不是返回False。\n\n\n\nos.path.abspath()：返回绝对路径\n\nos.path.realpath(\\__file__)：获取当前.py文件的目录\n\nos.path.dirname()：返回文件路径\n\nos.path.basename(path) ：返回文件名\n\n\n\nos.path.split(path) ：拆分路径dirname和basename，返回为元组\n\n**os.path.splitext('')**：将文件名与后缀名分开\n\n\n\n**os.path.join(path, name)**：连接目录与文件名或目录\n\n\n\n#### 示例\n\n```\nimport os\n\nfile_path = os.path.realpath(__file__)  # 该py文件目录\nprint(file_path)\nprint(os.path.dirname(file_path))   # 上级目录\nprint(os.path.basename(file_path))  # py文件名称\nprint(os.path.split(file_path)) # 分割目录与名称\n\n##############################################\nC:\\Users\\lenovo\\Desktop\\vega\\gg.py\nC:\\Users\\lenovo\\Desktop\\vega\ngg.py\n('C:\\\\Users\\\\lenovo\\\\Desktop\\\\vega', 'gg.py')\n```\n\n\n\n### 操作实例\n\n1、将某一路径下的文件名称中的广告部分去除并填上文件后缀名\n\n```\ndef rename():\n    path = '你的路径'\n    file_list = os.listdir(path)\t# 得到文件名列表\n    for file in file_list:\n        old_dir = os.path.join(path, file)\t#得到初始路径\n        # 若该文件名为路径，则继续遍历\n        if os.path.isdir(old_dir):\n            continue\n        file_name = os.path.splitext(file)[0]\n        # 在该处进行文件名的字符串更改操作\n        file_type = os.path.splitext(file)[1]\n        # 在该处变更文件的后缀\n        file_name = file_name+file_type\n        new_dir = os.path.join(path, file_name)\t# 新的路径\n        os.rename(old_dir, new_dir)\t# 完成文件的重命名\n```\n\n\n\n## pathlib模块\n\n### 基础使用\n\n#### 导入\n\n```\nfrom pathlib import Path\n```\n\n#### 列出子目录\n\n```\nIn[5]: p = Path('C:\\\\Users\\\\lenovo\\\\.keras\\\\datasets\\\\flower_photos')\nIn[6]: [x for x in p.iterdir() if x.is_dir()]\nOut[6]: \n[WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/daisy'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/dandelion'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/roses'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/sunflowers'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/tulips')]\n```\n\n#### 获取当前目录下所有文件与文件夹\n\n```\nIn[7]: list(p.glob('*/'))\nOut[7]: \n[WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/daisy'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/dandelion'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/LICENSE.txt'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/roses'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/sunflowers'),\n WindowsPath('C:/Users/lenovo/.keras/datasets/flower_photos/tulips')]\n```\n\n#### 路径拼接\n\n```\nIn[9]: q = p / 'daisy'\nIn[10]: print(q)\nC:\\Users\\lenovo\\.keras\\datasets\\flower_photos\\daisy\n```\n\n#### 查询属性\n\n路径是否存在与是否是路径\n\n```\nIn[11]: q.exists()\nOut[11]: True\nIn[12]: q.is_dir()\nOut[12]: True\n```\n\n\n\n\n\n### 参考链接\n\nhttps://docs.python.org/zh-cn/3/library/pathlib.html","slug":"编程相关/Python/Python常用模块/路径操作常用模块（os与pathlib）","published":1,"updated":"2021-01-11T04:37:42.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moex00gqrwjs0w2h11qe","content":"<h2 id=\"OS模块\"><a href=\"#OS模块\" class=\"headerlink\" title=\"OS模块\"></a>OS模块</h2><h3 id=\"模块简介\"><a href=\"#模块简介\" class=\"headerlink\" title=\"模块简介\"></a>模块简介</h3><blockquote>\n<p>os模块是Python标准库中的一个用于<strong>访问操作系统功能</strong>的模块。使用os模块中提供的接口可以实现跨平台访问。</p>\n</blockquote>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><p>os.sep：用于系统路径的分隔符。Windows为“\\\\”，Linux为“/”。</p>\n<p>os.name：指示正在使用的工作平台。Windows为‘nt’，Linux为‘posix’。</p>\n<p>os.getenv(‘path’)：读取环境变量名称</p>\n<p>os.getcwd()：获取当前路径</p>\n<p>os.getpid()：获取当前进程ID</p>\n<h4 id=\"os-system\"><a href=\"#os-system\" class=\"headerlink\" title=\"os.system\"></a>os.system</h4><blockquote>\n<p>将字符串转化为命令行在操作系统上执行。每次执行system函数，会创建一个子进程在系统上执行命令（<strong>子进程的执行结果无法影响主进程</strong>）</p>\n</blockquote>\n<h3 id=\"目录操作\"><a href=\"#目录操作\" class=\"headerlink\" title=\"目录操作\"></a>目录操作</h3><p><strong>os.listdir(path)</strong>：列出指定目录下的所有文件和子目录，包括隐藏文件；参数为空，为当前目录，返回一个列表。</p>\n<p>os.mkdir()：创建一个目录。</p>\n<p>os.rmdir()：删除一个空目录，如果该目录中有文件则删除不了。</p>\n<p>*<em>os.rename(src, dst) *</em>：用于重命名文件或目录，从src改为dst。若运行出错会抛出OSError。</p>\n<h3 id=\"Path模块\"><a href=\"#Path模块\" class=\"headerlink\" title=\"Path模块\"></a>Path模块</h3><p>os.path.exists(path)：判断文件或者目录是否存在。存在返回True，不存在返回False。</p>\n<p>os.path.isfile(path)：判断是否为文件。是返回True，不是返回False。</p>\n<p>os.path.isdir(path)：判断是否为目录。是返回True，不是返回False。</p>\n<p>os.path.abspath()：返回绝对路径</p>\n<p>os.path.realpath(_<em>file_</em>)：获取当前.py文件的目录</p>\n<p>os.path.dirname()：返回文件路径</p>\n<p>os.path.basename(path) ：返回文件名</p>\n<p>os.path.split(path) ：拆分路径dirname和basename，返回为元组</p>\n<p><strong>os.path.splitext(‘’)</strong>：将文件名与后缀名分开</p>\n<p><strong>os.path.join(path, name)</strong>：连接目录与文件名或目录</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> os<br><br>file_path = os.path.realpath(__file__)  # 该py文件目录<br>print(file_path)<br>print(os.path.dirname(file_path))   # 上级目录<br>print(os.path.basename(file_path))  # py文件名称<br>print(os.path.split(file_path)) # 分割目录与名称<br><br>##############################################<br>C:\\Users\\lenovo\\Desktop\\vega\\gg.py<br>C:\\Users\\lenovo\\Desktop\\vega<br>gg.py<br>(<span class=\"hljs-string\">'C:\\\\Users\\\\lenovo\\\\Desktop\\\\vega'</span>, <span class=\"hljs-string\">'gg.py'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"操作实例\"><a href=\"#操作实例\" class=\"headerlink\" title=\"操作实例\"></a>操作实例</h3><p>1、将某一路径下的文件名称中的广告部分去除并填上文件后缀名</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">def <span class=\"hljs-built_in\">rename</span>():<br>    <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-string\">'你的路径'</span><br>    file_list = <span class=\"hljs-built_in\">os</span>.listdir(<span class=\"hljs-built_in\">path</span>)\t# 得到文件名列表<br>    <span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> file_list:<br>        old_dir = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(<span class=\"hljs-built_in\">path</span>, file)\t#得到初始路径<br>        # 若该文件名为路径，则继续遍历<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.isdir(old_dir):<br>            continue<br>        file_name = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.splitext(file)[<span class=\"hljs-number\">0</span>]<br>        # 在该处进行文件名的字符串更改操作<br>        file_type = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.splitext(file)[<span class=\"hljs-number\">1</span>]<br>        # 在该处变更文件的后缀<br>        file_name = file_name+file_type<br>        new_dir = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(<span class=\"hljs-built_in\">path</span>, file_name)\t# 新的路径<br>        <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">rename</span>(old_dir, new_dir)\t# 完成文件的重命名<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pathlib模块\"><a href=\"#pathlib模块\" class=\"headerlink\" title=\"pathlib模块\"></a>pathlib模块</h2><h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Path</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"列出子目录\"><a href=\"#列出子目录\" class=\"headerlink\" title=\"列出子目录\"></a>列出子目录</h4><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\"><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">5</span>]: p = <span class=\"hljs-type\">Path</span>(<span class=\"hljs-symbol\">'C</span>:\\\\<span class=\"hljs-type\">Users</span>\\\\lenovo\\\\.keras\\\\datasets\\\\flower_photos')<br><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">6</span>]: [x for x <span class=\"hljs-keyword\">in</span> p.iterdir<span class=\"hljs-literal\">()</span> <span class=\"hljs-keyword\">if</span> x.is_dir<span class=\"hljs-literal\">()</span>]<br><span class=\"hljs-type\">Out</span>[<span class=\"hljs-number\">6</span>]: <br>[<span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/daisy'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/dandelion'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/roses'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/sunflowers'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/tulips')]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取当前目录下所有文件与文件夹\"><a href=\"#获取当前目录下所有文件与文件夹\" class=\"headerlink\" title=\"获取当前目录下所有文件与文件夹\"></a>获取当前目录下所有文件与文件夹</h4><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\"><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">7</span>]: <span class=\"hljs-built_in\">list</span>(p.glob(<span class=\"hljs-string\">'*/'</span>))<br><span class=\"hljs-type\">Out</span>[<span class=\"hljs-number\">7</span>]: <br>[<span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/daisy'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/dandelion'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/<span class=\"hljs-type\">LICENSE</span>.txt'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/roses'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/sunflowers'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/tulips')]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"路径拼接\"><a href=\"#路径拼接\" class=\"headerlink\" title=\"路径拼接\"></a>路径拼接</h4><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">In[9]: q = p / 'daisy'<br>In[10]: print(q)<br>C:<span class=\"hljs-symbol\">\\U</span>sers<span class=\"hljs-symbol\">\\l</span>enovo<span class=\"hljs-symbol\">\\.</span>keras<span class=\"hljs-symbol\">\\d</span>atasets<span class=\"hljs-symbol\">\\f</span>lower_photos<span class=\"hljs-symbol\">\\d</span>aisy<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查询属性\"><a href=\"#查询属性\" class=\"headerlink\" title=\"查询属性\"></a>查询属性</h4><p>路径是否存在与是否是路径</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">In</span><span class=\"hljs-selector-attr\">[11]</span>: <span class=\"hljs-selector-tag\">q</span><span class=\"hljs-selector-class\">.exists</span>()<br><span class=\"hljs-selector-tag\">Out</span><span class=\"hljs-selector-attr\">[11]</span>: <span class=\"hljs-selector-tag\">True</span><br><span class=\"hljs-selector-tag\">In</span><span class=\"hljs-selector-attr\">[12]</span>: <span class=\"hljs-selector-tag\">q</span><span class=\"hljs-selector-class\">.is_dir</span>()<br><span class=\"hljs-selector-tag\">Out</span><span class=\"hljs-selector-attr\">[12]</span>: <span class=\"hljs-selector-tag\">True</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://docs.python.org/zh-cn/3/library/pathlib.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3/library/pathlib.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"OS模块\"><a href=\"#OS模块\" class=\"headerlink\" title=\"OS模块\"></a>OS模块</h2><h3 id=\"模块简介\"><a href=\"#模块简介\" class=\"headerlink\" title=\"模块简介\"></a>模块简介</h3><blockquote>\n<p>os模块是Python标准库中的一个用于<strong>访问操作系统功能</strong>的模块。使用os模块中提供的接口可以实现跨平台访问。</p>\n</blockquote>\n<h3 id=\"系统操作\"><a href=\"#系统操作\" class=\"headerlink\" title=\"系统操作\"></a>系统操作</h3><p>os.sep：用于系统路径的分隔符。Windows为“\\\\”，Linux为“/”。</p>\n<p>os.name：指示正在使用的工作平台。Windows为‘nt’，Linux为‘posix’。</p>\n<p>os.getenv(‘path’)：读取环境变量名称</p>\n<p>os.getcwd()：获取当前路径</p>\n<p>os.getpid()：获取当前进程ID</p>\n<h4 id=\"os-system\"><a href=\"#os-system\" class=\"headerlink\" title=\"os.system\"></a>os.system</h4><blockquote>\n<p>将字符串转化为命令行在操作系统上执行。每次执行system函数，会创建一个子进程在系统上执行命令（<strong>子进程的执行结果无法影响主进程</strong>）</p>\n</blockquote>\n<h3 id=\"目录操作\"><a href=\"#目录操作\" class=\"headerlink\" title=\"目录操作\"></a>目录操作</h3><p><strong>os.listdir(path)</strong>：列出指定目录下的所有文件和子目录，包括隐藏文件；参数为空，为当前目录，返回一个列表。</p>\n<p>os.mkdir()：创建一个目录。</p>\n<p>os.rmdir()：删除一个空目录，如果该目录中有文件则删除不了。</p>\n<p>*<em>os.rename(src, dst) *</em>：用于重命名文件或目录，从src改为dst。若运行出错会抛出OSError。</p>\n<h3 id=\"Path模块\"><a href=\"#Path模块\" class=\"headerlink\" title=\"Path模块\"></a>Path模块</h3><p>os.path.exists(path)：判断文件或者目录是否存在。存在返回True，不存在返回False。</p>\n<p>os.path.isfile(path)：判断是否为文件。是返回True，不是返回False。</p>\n<p>os.path.isdir(path)：判断是否为目录。是返回True，不是返回False。</p>\n<p>os.path.abspath()：返回绝对路径</p>\n<p>os.path.realpath(_<em>file_</em>)：获取当前.py文件的目录</p>\n<p>os.path.dirname()：返回文件路径</p>\n<p>os.path.basename(path) ：返回文件名</p>\n<p>os.path.split(path) ：拆分路径dirname和basename，返回为元组</p>\n<p><strong>os.path.splitext(‘’)</strong>：将文件名与后缀名分开</p>\n<p><strong>os.path.join(path, name)</strong>：连接目录与文件名或目录</p>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-keyword\">import</span> os<br><br>file_path = os.path.realpath(__file__)  # 该py文件目录<br>print(file_path)<br>print(os.path.dirname(file_path))   # 上级目录<br>print(os.path.basename(file_path))  # py文件名称<br>print(os.path.split(file_path)) # 分割目录与名称<br><br>##############################################<br>C:\\Users\\lenovo\\Desktop\\vega\\gg.py<br>C:\\Users\\lenovo\\Desktop\\vega<br>gg.py<br>(<span class=\"hljs-string\">'C:\\\\Users\\\\lenovo\\\\Desktop\\\\vega'</span>, <span class=\"hljs-string\">'gg.py'</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"操作实例\"><a href=\"#操作实例\" class=\"headerlink\" title=\"操作实例\"></a>操作实例</h3><p>1、将某一路径下的文件名称中的广告部分去除并填上文件后缀名</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lua\">def <span class=\"hljs-built_in\">rename</span>():<br>    <span class=\"hljs-built_in\">path</span> = <span class=\"hljs-string\">'你的路径'</span><br>    file_list = <span class=\"hljs-built_in\">os</span>.listdir(<span class=\"hljs-built_in\">path</span>)\t# 得到文件名列表<br>    <span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> file_list:<br>        old_dir = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(<span class=\"hljs-built_in\">path</span>, file)\t#得到初始路径<br>        # 若该文件名为路径，则继续遍历<br>        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.isdir(old_dir):<br>            continue<br>        file_name = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.splitext(file)[<span class=\"hljs-number\">0</span>]<br>        # 在该处进行文件名的字符串更改操作<br>        file_type = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.splitext(file)[<span class=\"hljs-number\">1</span>]<br>        # 在该处变更文件的后缀<br>        file_name = file_name+file_type<br>        new_dir = <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(<span class=\"hljs-built_in\">path</span>, file_name)\t# 新的路径<br>        <span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">rename</span>(old_dir, new_dir)\t# 完成文件的重命名<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"pathlib模块\"><a href=\"#pathlib模块\" class=\"headerlink\" title=\"pathlib模块\"></a>pathlib模块</h2><h3 id=\"基础使用\"><a href=\"#基础使用\" class=\"headerlink\" title=\"基础使用\"></a>基础使用</h3><h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Path</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"列出子目录\"><a href=\"#列出子目录\" class=\"headerlink\" title=\"列出子目录\"></a>列出子目录</h4><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\"><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">5</span>]: p = <span class=\"hljs-type\">Path</span>(<span class=\"hljs-symbol\">'C</span>:\\\\<span class=\"hljs-type\">Users</span>\\\\lenovo\\\\.keras\\\\datasets\\\\flower_photos')<br><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">6</span>]: [x for x <span class=\"hljs-keyword\">in</span> p.iterdir<span class=\"hljs-literal\">()</span> <span class=\"hljs-keyword\">if</span> x.is_dir<span class=\"hljs-literal\">()</span>]<br><span class=\"hljs-type\">Out</span>[<span class=\"hljs-number\">6</span>]: <br>[<span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/daisy'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/dandelion'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/roses'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/sunflowers'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/tulips')]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取当前目录下所有文件与文件夹\"><a href=\"#获取当前目录下所有文件与文件夹\" class=\"headerlink\" title=\"获取当前目录下所有文件与文件夹\"></a>获取当前目录下所有文件与文件夹</h4><figure class=\"highlight sml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sml\"><span class=\"hljs-type\">In</span>[<span class=\"hljs-number\">7</span>]: <span class=\"hljs-built_in\">list</span>(p.glob(<span class=\"hljs-string\">'*/'</span>))<br><span class=\"hljs-type\">Out</span>[<span class=\"hljs-number\">7</span>]: <br>[<span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/daisy'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/dandelion'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/<span class=\"hljs-type\">LICENSE</span>.txt'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/roses'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/sunflowers'),<br> <span class=\"hljs-type\">WindowsPath</span>(<span class=\"hljs-symbol\">'C</span>:/<span class=\"hljs-type\">Users</span>/lenovo/.keras/datasets/flower_photos/tulips')]<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"路径拼接\"><a href=\"#路径拼接\" class=\"headerlink\" title=\"路径拼接\"></a>路径拼接</h4><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">In[9]: q = p / 'daisy'<br>In[10]: print(q)<br>C:<span class=\"hljs-symbol\">\\U</span>sers<span class=\"hljs-symbol\">\\l</span>enovo<span class=\"hljs-symbol\">\\.</span>keras<span class=\"hljs-symbol\">\\d</span>atasets<span class=\"hljs-symbol\">\\f</span>lower_photos<span class=\"hljs-symbol\">\\d</span>aisy<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查询属性\"><a href=\"#查询属性\" class=\"headerlink\" title=\"查询属性\"></a>查询属性</h4><p>路径是否存在与是否是路径</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">In</span><span class=\"hljs-selector-attr\">[11]</span>: <span class=\"hljs-selector-tag\">q</span><span class=\"hljs-selector-class\">.exists</span>()<br><span class=\"hljs-selector-tag\">Out</span><span class=\"hljs-selector-attr\">[11]</span>: <span class=\"hljs-selector-tag\">True</span><br><span class=\"hljs-selector-tag\">In</span><span class=\"hljs-selector-attr\">[12]</span>: <span class=\"hljs-selector-tag\">q</span><span class=\"hljs-selector-class\">.is_dir</span>()<br><span class=\"hljs-selector-tag\">Out</span><span class=\"hljs-selector-attr\">[12]</span>: <span class=\"hljs-selector-tag\">True</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://docs.python.org/zh-cn/3/library/pathlib.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/zh-cn/3/library/pathlib.html</a></p>\n"},{"title":"bs4库基本使用","date":"2020-08-13T08:09:39.000Z","fileName":"python-bs4-basic","_content":"\n**BeautifulSoup库是解析、遍历、维护“标签树”的功能库**\n\n### bs4的HTML解析器\n\n```\nBeautifulSoup(html文件,'html.parser')\n```\n\n\n\n\n\n\n\n","source":"_posts/编程相关/Python/爬虫/bs4库基本使用.md","raw":"---\ntitle: bs4库基本使用\ndate: 2020-08-13 16:09:39\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- 爬虫\nfileName: python-bs4-basic\n---\n\n**BeautifulSoup库是解析、遍历、维护“标签树”的功能库**\n\n### bs4的HTML解析器\n\n```\nBeautifulSoup(html文件,'html.parser')\n```\n\n\n\n\n\n\n\n","slug":"编程相关/Python/爬虫/bs4库基本使用","published":1,"updated":"2021-01-11T04:38:00.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moey00gurwjsdyw5b2an","content":"<p><strong>BeautifulSoup库是解析、遍历、维护“标签树”的功能库</strong></p>\n<h3 id=\"bs4的HTML解析器\"><a href=\"#bs4的HTML解析器\" class=\"headerlink\" title=\"bs4的HTML解析器\"></a>bs4的HTML解析器</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">BeautifulSoup(<span class=\"hljs-params\">html</span>文件,'<span class=\"hljs-params\">html</span>.<span class=\"hljs-params\">parser</span>')</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>BeautifulSoup库是解析、遍历、维护“标签树”的功能库</strong></p>\n<h3 id=\"bs4的HTML解析器\"><a href=\"#bs4的HTML解析器\" class=\"headerlink\" title=\"bs4的HTML解析器\"></a>bs4的HTML解析器</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">BeautifulSoup(<span class=\"hljs-params\">html</span>文件,'<span class=\"hljs-params\">html</span>.<span class=\"hljs-params\">parser</span>')</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"requests库基本使用","date":"2020-08-13T08:09:39.000Z","fileName":"python-requests-basic","_content":"\n**requests库是python实现的最简单易用的HTTP库。**\n\n### 主要方法\n\n\n\n```\nrequests.request(method, url, **kwargs)\n```\n\nmethod : 请求方式，对应get/put/post等7种\nurl : 拟获取页面的url链接\n**kwargs: 控制访问的参数，共13个\n\n\n\n### get方法\n\n基本使用如下：\n\n```\nr = requests.get(url)\n```\n\n其中r是返回的一个包含服务器资源的**Response对象**\n\nget方法是构造了一个向服务器请求资源的**Request对象**\n\n\n\n### Response对象的属性\n\n\n\n#### 判断异常\n\nr.raise_for_status()在方法内部判断r.status_code是否等于200，不需要增加额外的if语句，该语句**便于利用try‐except进行异常处理**\n\n```\nr.raise_for_status()\n```\n\n\n\n### 爬取网页通用代码框架\n\n```\ndef getHTMLText(url):\n    import requests\n    try:\n        r = requests.get(url)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        print(\"产生异常\")\n        return None\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/编程相关/Python/爬虫/requests库基本使用.md","raw":"---\ntitle: requests库基本使用\ndate: 2020-08-13 16:09:39\ntags:\n\t- Python\ncategories:\n\t- 编程相关\n\t- Python\n\t- 爬虫\nfileName: python-requests-basic\n---\n\n**requests库是python实现的最简单易用的HTTP库。**\n\n### 主要方法\n\n\n\n```\nrequests.request(method, url, **kwargs)\n```\n\nmethod : 请求方式，对应get/put/post等7种\nurl : 拟获取页面的url链接\n**kwargs: 控制访问的参数，共13个\n\n\n\n### get方法\n\n基本使用如下：\n\n```\nr = requests.get(url)\n```\n\n其中r是返回的一个包含服务器资源的**Response对象**\n\nget方法是构造了一个向服务器请求资源的**Request对象**\n\n\n\n### Response对象的属性\n\n\n\n#### 判断异常\n\nr.raise_for_status()在方法内部判断r.status_code是否等于200，不需要增加额外的if语句，该语句**便于利用try‐except进行异常处理**\n\n```\nr.raise_for_status()\n```\n\n\n\n### 爬取网页通用代码框架\n\n```\ndef getHTMLText(url):\n    import requests\n    try:\n        r = requests.get(url)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        print(\"产生异常\")\n        return None\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"编程相关/Python/爬虫/requests库基本使用","published":1,"updated":"2021-01-11T04:38:08.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjs3moez00gyrwjsatol5dhr","content":"<p><strong>requests库是python实现的最简单易用的HTTP库。</strong></p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">requests.request(<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>, <span class=\"hljs-title\">url</span>, **<span class=\"hljs-title\">kwargs</span>)</span><br></code></pre></td></tr></table></figure>\n\n<p>method : 请求方式，对应get/put/post等7种<br>url : 拟获取页面的url链接<br>**kwargs: 控制访问的参数，共13个</p>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>基本使用如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">r</span> = requests.get(url)<br></code></pre></td></tr></table></figure>\n\n<p>其中r是返回的一个包含服务器资源的<strong>Response对象</strong></p>\n<p>get方法是构造了一个向服务器请求资源的<strong>Request对象</strong></p>\n<h3 id=\"Response对象的属性\"><a href=\"#Response对象的属性\" class=\"headerlink\" title=\"Response对象的属性\"></a>Response对象的属性</h3><h4 id=\"判断异常\"><a href=\"#判断异常\" class=\"headerlink\" title=\"判断异常\"></a>判断异常</h4><p>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要增加额外的if语句，该语句<strong>便于利用try‐except进行异常处理</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">r</span><span class=\"hljs-selector-class\">.raise_for_status</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"爬取网页通用代码框架\"><a href=\"#爬取网页通用代码框架\" class=\"headerlink\" title=\"爬取网页通用代码框架\"></a>爬取网页通用代码框架</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getHTMLText</span><span class=\"hljs-params\">(url)</span>:</span><br>    <span class=\"hljs-keyword\">import</span> requests<br>    <span class=\"hljs-keyword\">try</span>:<br>        r = requests.get(url)<br>        r.raise_for_status()<br>        r.encoding = r.apparent_encoding<br>        <span class=\"hljs-keyword\">return</span> r.text<br>    <span class=\"hljs-keyword\">except</span>:<br>        print(<span class=\"hljs-string\">\"产生异常\"</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>requests库是python实现的最简单易用的HTTP库。</strong></p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">requests.request(<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>, <span class=\"hljs-title\">url</span>, **<span class=\"hljs-title\">kwargs</span>)</span><br></code></pre></td></tr></table></figure>\n\n<p>method : 请求方式，对应get/put/post等7种<br>url : 拟获取页面的url链接<br>**kwargs: 控制访问的参数，共13个</p>\n<h3 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h3><p>基本使用如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">r</span> = requests.get(url)<br></code></pre></td></tr></table></figure>\n\n<p>其中r是返回的一个包含服务器资源的<strong>Response对象</strong></p>\n<p>get方法是构造了一个向服务器请求资源的<strong>Request对象</strong></p>\n<h3 id=\"Response对象的属性\"><a href=\"#Response对象的属性\" class=\"headerlink\" title=\"Response对象的属性\"></a>Response对象的属性</h3><h4 id=\"判断异常\"><a href=\"#判断异常\" class=\"headerlink\" title=\"判断异常\"></a>判断异常</h4><p>r.raise_for_status()在方法内部判断r.status_code是否等于200，不需要增加额外的if语句，该语句<strong>便于利用try‐except进行异常处理</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">r</span><span class=\"hljs-selector-class\">.raise_for_status</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"爬取网页通用代码框架\"><a href=\"#爬取网页通用代码框架\" class=\"headerlink\" title=\"爬取网页通用代码框架\"></a>爬取网页通用代码框架</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getHTMLText</span><span class=\"hljs-params\">(url)</span>:</span><br>    <span class=\"hljs-keyword\">import</span> requests<br>    <span class=\"hljs-keyword\">try</span>:<br>        r = requests.get(url)<br>        r.raise_for_status()<br>        r.encoding = r.apparent_encoding<br>        <span class=\"hljs-keyword\">return</span> r.text<br>    <span class=\"hljs-keyword\">except</span>:<br>        print(<span class=\"hljs-string\">\"产生异常\"</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">None</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"vim基本用法","date":"2020-08-16T01:52:18.000Z","fileName":"vim-basic-use","_content":"\n### 启动vi\n\n```\nvi\n```\n\n\n\n### 退出\n\n退出vi，出现未保存文件等情况会无法退出\n\n```\n:q\n```\n\n强制退出\n\n```\n:q!\n```\n\n### 保存\n\n```\n:w\n```\n\n\n\n> vi分为3种模式，一般命令模式、编辑模式、命令行模式\n\n\n\n### 一般命令模式（commmand mode）\n\n默认的模式，可以移动光标、删除字符删除整行、复制粘贴文件内容\n\n\n\n\n\n### 编辑模式（insert mode）\n\n要在文件中添加文本，我们需要先进入插入模式。按下\"i\"键进入插入模式。\n\n若要退出插入模式返回命令模式，按下 Esc 按键。\n\n\n\n### 命令行模式（command-line mode）\n\n输入`: / ?`任意一个字符则可以在底部输入命令，可以实现查找数据、读取保存批量替换字符、退出、显示行号等操作\n\n\n\n\n\n常用命令记录\n\n使用数字键 n⬇就代表向下移动n行\n\n\n\nCtrl + f  向下翻页\n\nCtrl + b 向上翻页\n\n0 或 Home 移动到该行最前面\n\n$ 或 End 移动到改行最后面\n\nG 移动到文件最后一行\n\ngg 1G 移动到文件第一行\n\nnG 移动到文件第n行\n\nn\\<space\\> 光标向后移动n个字符\n\nn\\<Enter\\> n为数字，光标向下移动n行\n\n\n\n/word 向光标之下查找名为word的字符串\n\n?word 向光标之上查找名为word的字符串\n\nn 此处n不代表数字，重复前一个查找操作\n\nN 与n的查找方向相反\n\n\n\n:1,10s/word1/word2/g 将第1到10行之间的word1替换为word2\n\n:1,$s/word1/word2/g 全文替换\n\n:1,$s/word1/word2/gc 全文替换，并在替换前让用户confirm\n\n\n\nx 向后删除一个字符\n\nnx 向后删除n个字符\n\ndd 删除（剪切）光标所在行\n\nndd 处理后面n行\n\nyy 复制光标所在行\n\nnyy\n\np 在光标下一行粘贴\n\n\n\nu 撤销上一步操作\n\nCtrl+r 重做上一个操作（撤销还原）\n\n. 重复上一个操作\n\n\n\n\n\n\n\n:! command 暂时退出vi到中断执行command命令：\n\n\n\n:set nu 显示行号\n\n:set nonu 取消行号","source":"_posts/工具使用/vim基本用法.md","raw":"---\ntitle: vim基本用法\ndate: 2020-08-16 09:52:18\ntags:\n\t- vim\ncategories:\n\t- 工具使用\nfileName: vim-basic-use\n---\n\n### 启动vi\n\n```\nvi\n```\n\n\n\n### 退出\n\n退出vi，出现未保存文件等情况会无法退出\n\n```\n:q\n```\n\n强制退出\n\n```\n:q!\n```\n\n### 保存\n\n```\n:w\n```\n\n\n\n> vi分为3种模式，一般命令模式、编辑模式、命令行模式\n\n\n\n### 一般命令模式（commmand mode）\n\n默认的模式，可以移动光标、删除字符删除整行、复制粘贴文件内容\n\n\n\n\n\n### 编辑模式（insert mode）\n\n要在文件中添加文本，我们需要先进入插入模式。按下\"i\"键进入插入模式。\n\n若要退出插入模式返回命令模式，按下 Esc 按键。\n\n\n\n### 命令行模式（command-line mode）\n\n输入`: / ?`任意一个字符则可以在底部输入命令，可以实现查找数据、读取保存批量替换字符、退出、显示行号等操作\n\n\n\n\n\n常用命令记录\n\n使用数字键 n⬇就代表向下移动n行\n\n\n\nCtrl + f  向下翻页\n\nCtrl + b 向上翻页\n\n0 或 Home 移动到该行最前面\n\n$ 或 End 移动到改行最后面\n\nG 移动到文件最后一行\n\ngg 1G 移动到文件第一行\n\nnG 移动到文件第n行\n\nn\\<space\\> 光标向后移动n个字符\n\nn\\<Enter\\> n为数字，光标向下移动n行\n\n\n\n/word 向光标之下查找名为word的字符串\n\n?word 向光标之上查找名为word的字符串\n\nn 此处n不代表数字，重复前一个查找操作\n\nN 与n的查找方向相反\n\n\n\n:1,10s/word1/word2/g 将第1到10行之间的word1替换为word2\n\n:1,$s/word1/word2/g 全文替换\n\n:1,$s/word1/word2/gc 全文替换，并在替换前让用户confirm\n\n\n\nx 向后删除一个字符\n\nnx 向后删除n个字符\n\ndd 删除（剪切）光标所在行\n\nndd 处理后面n行\n\nyy 复制光标所在行\n\nnyy\n\np 在光标下一行粘贴\n\n\n\nu 撤销上一步操作\n\nCtrl+r 重做上一个操作（撤销还原）\n\n. 重复上一个操作\n\n\n\n\n\n\n\n:! command 暂时退出vi到中断执行command命令：\n\n\n\n:set nu 显示行号\n\n:set nonu 取消行号","slug":"工具使用/vim基本用法","published":1,"updated":"2021-01-21T21:23:15.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nho800008sjs69def45i","content":"<h3 id=\"启动vi\"><a href=\"#启动vi\" class=\"headerlink\" title=\"启动vi\"></a>启动vi</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">vi</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h3><p>退出vi，出现未保存文件等情况会无法退出</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:q</span><br></code></pre></td></tr></table></figure>\n\n<p>强制退出</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:q!</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"保存\"><a href=\"#保存\" class=\"headerlink\" title=\"保存\"></a>保存</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:w</span><br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>vi分为3种模式，一般命令模式、编辑模式、命令行模式</p>\n</blockquote>\n<h3 id=\"一般命令模式（commmand-mode）\"><a href=\"#一般命令模式（commmand-mode）\" class=\"headerlink\" title=\"一般命令模式（commmand mode）\"></a>一般命令模式（commmand mode）</h3><p>默认的模式，可以移动光标、删除字符删除整行、复制粘贴文件内容</p>\n<h3 id=\"编辑模式（insert-mode）\"><a href=\"#编辑模式（insert-mode）\" class=\"headerlink\" title=\"编辑模式（insert mode）\"></a>编辑模式（insert mode）</h3><p>要在文件中添加文本，我们需要先进入插入模式。按下”i”键进入插入模式。</p>\n<p>若要退出插入模式返回命令模式，按下 Esc 按键。</p>\n<h3 id=\"命令行模式（command-line-mode）\"><a href=\"#命令行模式（command-line-mode）\" class=\"headerlink\" title=\"命令行模式（command-line mode）\"></a>命令行模式（command-line mode）</h3><p>输入<code>: / ?</code>任意一个字符则可以在底部输入命令，可以实现查找数据、读取保存批量替换字符、退出、显示行号等操作</p>\n<p>常用命令记录</p>\n<p>使用数字键 n⬇就代表向下移动n行</p>\n<p>Ctrl + f  向下翻页</p>\n<p>Ctrl + b 向上翻页</p>\n<p>0 或 Home 移动到该行最前面</p>\n<p>$ 或 End 移动到改行最后面</p>\n<p>G 移动到文件最后一行</p>\n<p>gg 1G 移动到文件第一行</p>\n<p>nG 移动到文件第n行</p>\n<p>n&lt;space&gt; 光标向后移动n个字符</p>\n<p>n&lt;Enter&gt; n为数字，光标向下移动n行</p>\n<p>/word 向光标之下查找名为word的字符串</p>\n<p>?word 向光标之上查找名为word的字符串</p>\n<p>n 此处n不代表数字，重复前一个查找操作</p>\n<p>N 与n的查找方向相反</p>\n<p>:1,10s/word1/word2/g 将第1到10行之间的word1替换为word2</p>\n<p>:1,$s/word1/word2/g 全文替换</p>\n<p>:1,$s/word1/word2/gc 全文替换，并在替换前让用户confirm</p>\n<p>x 向后删除一个字符</p>\n<p>nx 向后删除n个字符</p>\n<p>dd 删除（剪切）光标所在行</p>\n<p>ndd 处理后面n行</p>\n<p>yy 复制光标所在行</p>\n<p>nyy</p>\n<p>p 在光标下一行粘贴</p>\n<p>u 撤销上一步操作</p>\n<p>Ctrl+r 重做上一个操作（撤销还原）</p>\n<p>. 重复上一个操作</p>\n<p>:! command 暂时退出vi到中断执行command命令：</p>\n<p>:set nu 显示行号</p>\n<p>:set nonu 取消行号</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"启动vi\"><a href=\"#启动vi\" class=\"headerlink\" title=\"启动vi\"></a>启动vi</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">vi</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h3><p>退出vi，出现未保存文件等情况会无法退出</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:q</span><br></code></pre></td></tr></table></figure>\n\n<p>强制退出</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:q!</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"保存\"><a href=\"#保存\" class=\"headerlink\" title=\"保存\"></a>保存</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clojure\"><span class=\"hljs-symbol\">:w</span><br></code></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>vi分为3种模式，一般命令模式、编辑模式、命令行模式</p>\n</blockquote>\n<h3 id=\"一般命令模式（commmand-mode）\"><a href=\"#一般命令模式（commmand-mode）\" class=\"headerlink\" title=\"一般命令模式（commmand mode）\"></a>一般命令模式（commmand mode）</h3><p>默认的模式，可以移动光标、删除字符删除整行、复制粘贴文件内容</p>\n<h3 id=\"编辑模式（insert-mode）\"><a href=\"#编辑模式（insert-mode）\" class=\"headerlink\" title=\"编辑模式（insert mode）\"></a>编辑模式（insert mode）</h3><p>要在文件中添加文本，我们需要先进入插入模式。按下”i”键进入插入模式。</p>\n<p>若要退出插入模式返回命令模式，按下 Esc 按键。</p>\n<h3 id=\"命令行模式（command-line-mode）\"><a href=\"#命令行模式（command-line-mode）\" class=\"headerlink\" title=\"命令行模式（command-line mode）\"></a>命令行模式（command-line mode）</h3><p>输入<code>: / ?</code>任意一个字符则可以在底部输入命令，可以实现查找数据、读取保存批量替换字符、退出、显示行号等操作</p>\n<p>常用命令记录</p>\n<p>使用数字键 n⬇就代表向下移动n行</p>\n<p>Ctrl + f  向下翻页</p>\n<p>Ctrl + b 向上翻页</p>\n<p>0 或 Home 移动到该行最前面</p>\n<p>$ 或 End 移动到改行最后面</p>\n<p>G 移动到文件最后一行</p>\n<p>gg 1G 移动到文件第一行</p>\n<p>nG 移动到文件第n行</p>\n<p>n&lt;space&gt; 光标向后移动n个字符</p>\n<p>n&lt;Enter&gt; n为数字，光标向下移动n行</p>\n<p>/word 向光标之下查找名为word的字符串</p>\n<p>?word 向光标之上查找名为word的字符串</p>\n<p>n 此处n不代表数字，重复前一个查找操作</p>\n<p>N 与n的查找方向相反</p>\n<p>:1,10s/word1/word2/g 将第1到10行之间的word1替换为word2</p>\n<p>:1,$s/word1/word2/g 全文替换</p>\n<p>:1,$s/word1/word2/gc 全文替换，并在替换前让用户confirm</p>\n<p>x 向后删除一个字符</p>\n<p>nx 向后删除n个字符</p>\n<p>dd 删除（剪切）光标所在行</p>\n<p>ndd 处理后面n行</p>\n<p>yy 复制光标所在行</p>\n<p>nyy</p>\n<p>p 在光标下一行粘贴</p>\n<p>u 撤销上一步操作</p>\n<p>Ctrl+r 重做上一个操作（撤销还原）</p>\n<p>. 重复上一个操作</p>\n<p>:! command 暂时退出vi到中断执行command命令：</p>\n<p>:set nu 显示行号</p>\n<p>:set nonu 取消行号</p>\n"},{"title":"docker","date":"2021-02-06T05:35:42.000Z","fileName":null,"_content":"","source":"_posts/工具使用/docker.md","raw":"---\ntitle: docker\ndate: 2021-02-06 13:35:42\ntags:\ncategories:\nfileName:\n---\n","slug":"工具使用/docker","published":1,"updated":"2021-02-06T05:35:42.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhou00038sjse2k03s9z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Maven","date":"2021-02-05T15:30:18.000Z","fileName":"maven","_content":"\n## maven基础\n\n### 基本概念\n\n> Maven是Java项目的构建工具，支持从远程库中下载相关jar包等文件，进行依赖管理，并使用xml作为配置文件格式\n>\n> 类似于Python中的pip等工具\n\n### 特性\n\n* **依赖管理**：支持使用`groupId、artifactId、version`组成的`Coordination`（坐标）唯一标识一个依赖，而任何基于 Maven 构建的项目自身也必须定义这三项属性，生成的包可以是 Jar 包，也可以是 war 包或者 jar 包\n* **多模块构建**：可以定义父模块与子模块，完成软件架构的分离（如 dao service controller 三层架构）\n* **一致的目录结构**：只要是使用Maven构建的项目，在不同的IDE中项目结构是一致的\n* **一致的构建模型与插件的机制**：如配置tomcat、jetty等插件在不同环境下是一样的\n\n### maven项目目录结构\n\n```\n|——src/main/\t\n|\t   |——java\t\t项目Java源代码\n|\t   |——resources\t项目资源\n|\n|——src/test/\n|\t   |——java\t\t项目测试类（JUnit）\n|\t   |——resources\t测试资源\n|\n|——pom.xml\t配置文件\n```\n\n### maven设置\n\n> maven的配置文件为`path/to/maven/conf/settings.xml`，大部分配置都在该文件中修改\n\n#### 修改默认仓库的位置\n\n修改`<localRepository>`标签\n\n```\n<!-- 本地仓库地址，存放jar包的位置 -->\n<localRepository>/path/to/local/repo</localRepository>\n```\n\n#### 修改国内镜像\n\n在相同的配置文件中更改`<mirrors>`中加载国内镜像\n\n### maven仓库\n\n> 对于 Maven 来说， 仓库只分为两类： 本地仓库和远程仓库\n>\n> 当 Maven 根据坐标寻找构件时，首先会查看本地仓库，如果本地仓库存在，则直接使用； 如果本地没有，Maven 就会去远程仓库查找；如果都没有则报错\n\n### maven命令格式\n\n执行`plugin-name`插件的`goal-name`目标\n\n```\nmvn [plugin-name]:[goal-name]\n```\n\n命令参数：以`-D`开头传入属性参数，以`-P`开头使用指定的Profile配置\n\n#### 使用-D\n\n```\nmvn exec:java -Dexec.mainClass=\"类A\"\t\t# 执行类A\n```\n\n#### 使用-P\n\n使用-P选择打包的对应环境，以下选择了test环境\n\n```\nmvn package t -Ptest -Dmaven.test.skip=true\t\t# 打包测试环境并跳过maven测试\n```\n\n### maven常用命令\n\n| 命令                | 功能                                                    |\n| ------------------- | ------------------------------------------------------- |\n| mvn -version        | 显示版本信息                                            |\n| mvn clean           | 清理项目生产的临时文件，—般是模块下的target目录         |\n| mvn compile         | 编译源代码，一般编译模块下的src/main/java目录           |\n| mvn package         | 项目打包工具，会在模块下的target目录生成jar或war等文件  |\n| mvn test            | 测试命令，或执行src/test/javal下junit的测试用例         |\n| mvn install         | 将打包的jar/war文件复制到你的本地仓库中，供其他模块使用 |\n| mvn deploy          | 将打包的文件发布到远程参考,提供其他人员进行下载依赖     |\n| mvn dependency:tree | 打印出项目的整个依赖树                                  |\n| mvn tomcat7:run     | 在tomcat容器中运行web应用                               |\n| mvn jetty:run       | 调用Jetty插件的 Run目标在Jetty Servlet容器中启动web应用 |\n\n### pom文件常用标签\n\n\n\n\n\n\n\n## IDEA中使用maven\n\n### 配置maven\n\n在`Setting for New Project`中选择下载的maven目录以及对应的`settings.xml`配置文件，使得每次使用IDEA创建maven项目使用我们下载的而不是IDEA系统自带的。\n\n### 创建maven项目\n\n新建项目选择Maven，如果是创建普通项目，选择`quickstart`，创建Web项目选择`webapp`。\n\n![](http://cdn.ziyedy.top/Maven/maven%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8.png)\n\n### 设置运行方式\n\n在IDEA右上角选择运行Maven项目的命令，如下即构建了Maven 的编译命令，如果是使用Maven构建的Web项目的话也可以使用Maven中相应的使用服务器运行的方法。\n\n![](http://cdn.ziyedy.top/Maven/%E8%AE%BE%E7%BD%AEmaven%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png)\n\n\n\n\n\n## maven常见bug\n\n### bug1：IDEA构建项目失败\n\n#### 报错\n\n```\nCould not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Transfer failed for http://maven.aliyun.com/nexus/content/repositories/central/o\n```\n\n#### 解决\n\n在设置中为Maven启动加入如下命令\n\n![](http://cdn.ziyedy.top/Maven/bug1.png)\n\n```\n-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true\n```\n\n### bug2：插件出错\n\n#### 报错\n\n```\nCannot resolve plugin org.apache.maven.plugins:maven-clean-plugin:2.5 Maven\n```\n\n#### 解决\n\n如图所示，删除对应出错的插件，然后点击左上角重新构建即可\n\n<img src=\"http://cdn.ziyedy.top/Maven/bug2.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n","source":"_posts/工具使用/Maven.md","raw":"---\ntitle: Maven\ndate: 2021-02-05 23:30:18\ntags:\n\t- Java\n\t- maven\ncategories:\n\t- 工具使用\nfileName: maven\n---\n\n## maven基础\n\n### 基本概念\n\n> Maven是Java项目的构建工具，支持从远程库中下载相关jar包等文件，进行依赖管理，并使用xml作为配置文件格式\n>\n> 类似于Python中的pip等工具\n\n### 特性\n\n* **依赖管理**：支持使用`groupId、artifactId、version`组成的`Coordination`（坐标）唯一标识一个依赖，而任何基于 Maven 构建的项目自身也必须定义这三项属性，生成的包可以是 Jar 包，也可以是 war 包或者 jar 包\n* **多模块构建**：可以定义父模块与子模块，完成软件架构的分离（如 dao service controller 三层架构）\n* **一致的目录结构**：只要是使用Maven构建的项目，在不同的IDE中项目结构是一致的\n* **一致的构建模型与插件的机制**：如配置tomcat、jetty等插件在不同环境下是一样的\n\n### maven项目目录结构\n\n```\n|——src/main/\t\n|\t   |——java\t\t项目Java源代码\n|\t   |——resources\t项目资源\n|\n|——src/test/\n|\t   |——java\t\t项目测试类（JUnit）\n|\t   |——resources\t测试资源\n|\n|——pom.xml\t配置文件\n```\n\n### maven设置\n\n> maven的配置文件为`path/to/maven/conf/settings.xml`，大部分配置都在该文件中修改\n\n#### 修改默认仓库的位置\n\n修改`<localRepository>`标签\n\n```\n<!-- 本地仓库地址，存放jar包的位置 -->\n<localRepository>/path/to/local/repo</localRepository>\n```\n\n#### 修改国内镜像\n\n在相同的配置文件中更改`<mirrors>`中加载国内镜像\n\n### maven仓库\n\n> 对于 Maven 来说， 仓库只分为两类： 本地仓库和远程仓库\n>\n> 当 Maven 根据坐标寻找构件时，首先会查看本地仓库，如果本地仓库存在，则直接使用； 如果本地没有，Maven 就会去远程仓库查找；如果都没有则报错\n\n### maven命令格式\n\n执行`plugin-name`插件的`goal-name`目标\n\n```\nmvn [plugin-name]:[goal-name]\n```\n\n命令参数：以`-D`开头传入属性参数，以`-P`开头使用指定的Profile配置\n\n#### 使用-D\n\n```\nmvn exec:java -Dexec.mainClass=\"类A\"\t\t# 执行类A\n```\n\n#### 使用-P\n\n使用-P选择打包的对应环境，以下选择了test环境\n\n```\nmvn package t -Ptest -Dmaven.test.skip=true\t\t# 打包测试环境并跳过maven测试\n```\n\n### maven常用命令\n\n| 命令                | 功能                                                    |\n| ------------------- | ------------------------------------------------------- |\n| mvn -version        | 显示版本信息                                            |\n| mvn clean           | 清理项目生产的临时文件，—般是模块下的target目录         |\n| mvn compile         | 编译源代码，一般编译模块下的src/main/java目录           |\n| mvn package         | 项目打包工具，会在模块下的target目录生成jar或war等文件  |\n| mvn test            | 测试命令，或执行src/test/javal下junit的测试用例         |\n| mvn install         | 将打包的jar/war文件复制到你的本地仓库中，供其他模块使用 |\n| mvn deploy          | 将打包的文件发布到远程参考,提供其他人员进行下载依赖     |\n| mvn dependency:tree | 打印出项目的整个依赖树                                  |\n| mvn tomcat7:run     | 在tomcat容器中运行web应用                               |\n| mvn jetty:run       | 调用Jetty插件的 Run目标在Jetty Servlet容器中启动web应用 |\n\n### pom文件常用标签\n\n\n\n\n\n\n\n## IDEA中使用maven\n\n### 配置maven\n\n在`Setting for New Project`中选择下载的maven目录以及对应的`settings.xml`配置文件，使得每次使用IDEA创建maven项目使用我们下载的而不是IDEA系统自带的。\n\n### 创建maven项目\n\n新建项目选择Maven，如果是创建普通项目，选择`quickstart`，创建Web项目选择`webapp`。\n\n![](http://cdn.ziyedy.top/Maven/maven%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8.png)\n\n### 设置运行方式\n\n在IDEA右上角选择运行Maven项目的命令，如下即构建了Maven 的编译命令，如果是使用Maven构建的Web项目的话也可以使用Maven中相应的使用服务器运行的方法。\n\n![](http://cdn.ziyedy.top/Maven/%E8%AE%BE%E7%BD%AEmaven%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png)\n\n\n\n\n\n## maven常见bug\n\n### bug1：IDEA构建项目失败\n\n#### 报错\n\n```\nCould not transfer metadata org.apache.maven.plugins:maven-archetype-plugin/maven-metadata.xml from/to alimaven (http://maven.aliyun.com/nexus/content/repositories/central/): Transfer failed for http://maven.aliyun.com/nexus/content/repositories/central/o\n```\n\n#### 解决\n\n在设置中为Maven启动加入如下命令\n\n![](http://cdn.ziyedy.top/Maven/bug1.png)\n\n```\n-Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true -Dmaven.wagon.http.ssl.ignore.validity.dates=true\n```\n\n### bug2：插件出错\n\n#### 报错\n\n```\nCannot resolve plugin org.apache.maven.plugins:maven-clean-plugin:2.5 Maven\n```\n\n#### 解决\n\n如图所示，删除对应出错的插件，然后点击左上角重新构建即可\n\n<img src=\"http://cdn.ziyedy.top/Maven/bug2.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n","slug":"工具使用/Maven","published":1,"updated":"2021-02-07T03:26:27.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhov00048sjs1c86g08y","content":"<h2 id=\"maven基础\"><a href=\"#maven基础\" class=\"headerlink\" title=\"maven基础\"></a>maven基础</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>Maven是Java项目的构建工具，支持从远程库中下载相关jar包等文件，进行依赖管理，并使用xml作为配置文件格式</p>\n<p>类似于Python中的pip等工具</p>\n</blockquote>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li><strong>依赖管理</strong>：支持使用<code>groupId、artifactId、version</code>组成的<code>Coordination</code>（坐标）唯一标识一个依赖，而任何基于 Maven 构建的项目自身也必须定义这三项属性，生成的包可以是 Jar 包，也可以是 war 包或者 jar 包</li>\n<li><strong>多模块构建</strong>：可以定义父模块与子模块，完成软件架构的分离（如 dao service controller 三层架构）</li>\n<li><strong>一致的目录结构</strong>：只要是使用Maven构建的项目，在不同的IDE中项目结构是一致的</li>\n<li><strong>一致的构建模型与插件的机制</strong>：如配置tomcat、jetty等插件在不同环境下是一样的</li>\n</ul>\n<h3 id=\"maven项目目录结构\"><a href=\"#maven项目目录结构\" class=\"headerlink\" title=\"maven项目目录结构\"></a>maven项目目录结构</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\">——src/main/\t<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——java\t\t项目Java源代码<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——resources\t项目资源<br></span>|<br>|<span class=\"hljs-string\">——src/test/<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——java\t\t项目测试类（JUnit）<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——resources\t测试资源<br></span>|<br>|<span class=\"hljs-string\">——pom.xml\t配置文件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"maven设置\"><a href=\"#maven设置\" class=\"headerlink\" title=\"maven设置\"></a>maven设置</h3><blockquote>\n<p>maven的配置文件为<code>path/to/maven/conf/settings.xml</code>，大部分配置都在该文件中修改</p>\n</blockquote>\n<h4 id=\"修改默认仓库的位置\"><a href=\"#修改默认仓库的位置\" class=\"headerlink\" title=\"修改默认仓库的位置\"></a>修改默认仓库的位置</h4><p>修改<code>&lt;localRepository&gt;</code>标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 本地仓库地址，存放jar包的位置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">localRepository</span>&gt;</span>/path/to/local/repo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改国内镜像\"><a href=\"#修改国内镜像\" class=\"headerlink\" title=\"修改国内镜像\"></a>修改国内镜像</h4><p>在相同的配置文件中更改<code>&lt;mirrors&gt;</code>中加载国内镜像</p>\n<h3 id=\"maven仓库\"><a href=\"#maven仓库\" class=\"headerlink\" title=\"maven仓库\"></a>maven仓库</h3><blockquote>\n<p>对于 Maven 来说， 仓库只分为两类： 本地仓库和远程仓库</p>\n<p>当 Maven 根据坐标寻找构件时，首先会查看本地仓库，如果本地仓库存在，则直接使用； 如果本地没有，Maven 就会去远程仓库查找；如果都没有则报错</p>\n</blockquote>\n<h3 id=\"maven命令格式\"><a href=\"#maven命令格式\" class=\"headerlink\" title=\"maven命令格式\"></a>maven命令格式</h3><p>执行<code>plugin-name</code>插件的<code>goal-name</code>目标</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">mvn [plugin-<span class=\"hljs-built_in\">name</span>]:[goal-<span class=\"hljs-built_in\">name</span>]<br></code></pre></td></tr></table></figure>\n\n<p>命令参数：以<code>-D</code>开头传入属性参数，以<code>-P</code>开头使用指定的Profile配置</p>\n<h4 id=\"使用-D\"><a href=\"#使用-D\" class=\"headerlink\" title=\"使用-D\"></a>使用-D</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">mvn exec:<span class=\"hljs-keyword\">java </span>-Dexec.mainClass=<span class=\"hljs-string\">\"类A\"</span>\t\t<span class=\"hljs-comment\"># 执行类A</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用-P\"><a href=\"#使用-P\" class=\"headerlink\" title=\"使用-P\"></a>使用-P</h4><p>使用-P选择打包的对应环境，以下选择了test环境</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">mvn package t -Ptest -Dmaven.<span class=\"hljs-keyword\">test</span>.skip=<span class=\"hljs-keyword\">true</span>\t\t<span class=\"hljs-comment\"># 打包测试环境并跳过maven测试</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"maven常用命令\"><a href=\"#maven常用命令\" class=\"headerlink\" title=\"maven常用命令\"></a>maven常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mvn -version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>mvn clean</td>\n<td>清理项目生产的临时文件，—般是模块下的target目录</td>\n</tr>\n<tr>\n<td>mvn compile</td>\n<td>编译源代码，一般编译模块下的src/main/java目录</td>\n</tr>\n<tr>\n<td>mvn package</td>\n<td>项目打包工具，会在模块下的target目录生成jar或war等文件</td>\n</tr>\n<tr>\n<td>mvn test</td>\n<td>测试命令，或执行src/test/javal下junit的测试用例</td>\n</tr>\n<tr>\n<td>mvn install</td>\n<td>将打包的jar/war文件复制到你的本地仓库中，供其他模块使用</td>\n</tr>\n<tr>\n<td>mvn deploy</td>\n<td>将打包的文件发布到远程参考,提供其他人员进行下载依赖</td>\n</tr>\n<tr>\n<td>mvn dependency:tree</td>\n<td>打印出项目的整个依赖树</td>\n</tr>\n<tr>\n<td>mvn tomcat7:run</td>\n<td>在tomcat容器中运行web应用</td>\n</tr>\n<tr>\n<td>mvn jetty:run</td>\n<td>调用Jetty插件的 Run目标在Jetty Servlet容器中启动web应用</td>\n</tr>\n</tbody></table>\n<h3 id=\"pom文件常用标签\"><a href=\"#pom文件常用标签\" class=\"headerlink\" title=\"pom文件常用标签\"></a>pom文件常用标签</h3><h2 id=\"IDEA中使用maven\"><a href=\"#IDEA中使用maven\" class=\"headerlink\" title=\"IDEA中使用maven\"></a>IDEA中使用maven</h2><h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>在<code>Setting for New Project</code>中选择下载的maven目录以及对应的<code>settings.xml</code>配置文件，使得每次使用IDEA创建maven项目使用我们下载的而不是IDEA系统自带的。</p>\n<h3 id=\"创建maven项目\"><a href=\"#创建maven项目\" class=\"headerlink\" title=\"创建maven项目\"></a>创建maven项目</h3><p>新建项目选择Maven，如果是创建普通项目，选择<code>quickstart</code>，创建Web项目选择<code>webapp</code>。</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/maven%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8.png\" alt=\"\"></p>\n<h3 id=\"设置运行方式\"><a href=\"#设置运行方式\" class=\"headerlink\" title=\"设置运行方式\"></a>设置运行方式</h3><p>在IDEA右上角选择运行Maven项目的命令，如下即构建了Maven 的编译命令，如果是使用Maven构建的Web项目的话也可以使用Maven中相应的使用服务器运行的方法。</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/%E8%AE%BE%E7%BD%AEmaven%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png\" alt=\"\"></p>\n<h2 id=\"maven常见bug\"><a href=\"#maven常见bug\" class=\"headerlink\" title=\"maven常见bug\"></a>maven常见bug</h2><h3 id=\"bug1：IDEA构建项目失败\"><a href=\"#bug1：IDEA构建项目失败\" class=\"headerlink\" title=\"bug1：IDEA构建项目失败\"></a>bug1：IDEA构建项目失败</h3><h4 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin<span class=\"hljs-regexp\">/maven-metadata.xml from/</span>to alimaven (http:<span class=\"hljs-regexp\">//m</span>aven.aliyun.com<span class=\"hljs-regexp\">/nexus/</span>content<span class=\"hljs-regexp\">/repositories/</span>central<span class=\"hljs-regexp\">/): Transfer failed for http:/</span><span class=\"hljs-regexp\">/maven.aliyun.com/</span>nexus<span class=\"hljs-regexp\">/content/</span>repositories<span class=\"hljs-regexp\">/central/</span>o<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在设置中为Maven启动加入如下命令</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/bug1.png\" alt=\"\"></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">-Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span>.insecure=true -Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span>.allowall=true -Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span><span class=\"hljs-selector-class\">.ignore</span><span class=\"hljs-selector-class\">.validity</span>.dates=true<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"bug2：插件出错\"><a href=\"#bug2：插件出错\" class=\"headerlink\" title=\"bug2：插件出错\"></a>bug2：插件出错</h3><h4 id=\"报错-1\"><a href=\"#报错-1\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">Cannot</span> <span class=\"hljs-selector-tag\">resolve</span> <span class=\"hljs-selector-tag\">plugin</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.maven</span><span class=\"hljs-selector-class\">.plugins</span><span class=\"hljs-selector-pseudo\">:maven-clean-plugin</span><span class=\"hljs-selector-pseudo\">:2.5</span> <span class=\"hljs-selector-tag\">Maven</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>如图所示，删除对应出错的插件，然后点击左上角重新构建即可</p>\n<img src=\"http://cdn.ziyedy.top/Maven/bug2.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"maven基础\"><a href=\"#maven基础\" class=\"headerlink\" title=\"maven基础\"></a>maven基础</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><blockquote>\n<p>Maven是Java项目的构建工具，支持从远程库中下载相关jar包等文件，进行依赖管理，并使用xml作为配置文件格式</p>\n<p>类似于Python中的pip等工具</p>\n</blockquote>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li><strong>依赖管理</strong>：支持使用<code>groupId、artifactId、version</code>组成的<code>Coordination</code>（坐标）唯一标识一个依赖，而任何基于 Maven 构建的项目自身也必须定义这三项属性，生成的包可以是 Jar 包，也可以是 war 包或者 jar 包</li>\n<li><strong>多模块构建</strong>：可以定义父模块与子模块，完成软件架构的分离（如 dao service controller 三层架构）</li>\n<li><strong>一致的目录结构</strong>：只要是使用Maven构建的项目，在不同的IDE中项目结构是一致的</li>\n<li><strong>一致的构建模型与插件的机制</strong>：如配置tomcat、jetty等插件在不同环境下是一样的</li>\n</ul>\n<h3 id=\"maven项目目录结构\"><a href=\"#maven项目目录结构\" class=\"headerlink\" title=\"maven项目目录结构\"></a>maven项目目录结构</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\">——src/main/\t<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——java\t\t项目Java源代码<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——resources\t项目资源<br></span>|<br>|<span class=\"hljs-string\">——src/test/<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——java\t\t项目测试类（JUnit）<br></span>|<span class=\"hljs-string\">\t   </span>|<span class=\"hljs-string\">——resources\t测试资源<br></span>|<br>|<span class=\"hljs-string\">——pom.xml\t配置文件</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"maven设置\"><a href=\"#maven设置\" class=\"headerlink\" title=\"maven设置\"></a>maven设置</h3><blockquote>\n<p>maven的配置文件为<code>path/to/maven/conf/settings.xml</code>，大部分配置都在该文件中修改</p>\n</blockquote>\n<h4 id=\"修改默认仓库的位置\"><a href=\"#修改默认仓库的位置\" class=\"headerlink\" title=\"修改默认仓库的位置\"></a>修改默认仓库的位置</h4><p>修改<code>&lt;localRepository&gt;</code>标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 本地仓库地址，存放jar包的位置 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">localRepository</span>&gt;</span>/path/to/local/repo<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改国内镜像\"><a href=\"#修改国内镜像\" class=\"headerlink\" title=\"修改国内镜像\"></a>修改国内镜像</h4><p>在相同的配置文件中更改<code>&lt;mirrors&gt;</code>中加载国内镜像</p>\n<h3 id=\"maven仓库\"><a href=\"#maven仓库\" class=\"headerlink\" title=\"maven仓库\"></a>maven仓库</h3><blockquote>\n<p>对于 Maven 来说， 仓库只分为两类： 本地仓库和远程仓库</p>\n<p>当 Maven 根据坐标寻找构件时，首先会查看本地仓库，如果本地仓库存在，则直接使用； 如果本地没有，Maven 就会去远程仓库查找；如果都没有则报错</p>\n</blockquote>\n<h3 id=\"maven命令格式\"><a href=\"#maven命令格式\" class=\"headerlink\" title=\"maven命令格式\"></a>maven命令格式</h3><p>执行<code>plugin-name</code>插件的<code>goal-name</code>目标</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">mvn [plugin-<span class=\"hljs-built_in\">name</span>]:[goal-<span class=\"hljs-built_in\">name</span>]<br></code></pre></td></tr></table></figure>\n\n<p>命令参数：以<code>-D</code>开头传入属性参数，以<code>-P</code>开头使用指定的Profile配置</p>\n<h4 id=\"使用-D\"><a href=\"#使用-D\" class=\"headerlink\" title=\"使用-D\"></a>使用-D</h4><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">mvn exec:<span class=\"hljs-keyword\">java </span>-Dexec.mainClass=<span class=\"hljs-string\">\"类A\"</span>\t\t<span class=\"hljs-comment\"># 执行类A</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"使用-P\"><a href=\"#使用-P\" class=\"headerlink\" title=\"使用-P\"></a>使用-P</h4><p>使用-P选择打包的对应环境，以下选择了test环境</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">mvn package t -Ptest -Dmaven.<span class=\"hljs-keyword\">test</span>.skip=<span class=\"hljs-keyword\">true</span>\t\t<span class=\"hljs-comment\"># 打包测试环境并跳过maven测试</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"maven常用命令\"><a href=\"#maven常用命令\" class=\"headerlink\" title=\"maven常用命令\"></a>maven常用命令</h3><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mvn -version</td>\n<td>显示版本信息</td>\n</tr>\n<tr>\n<td>mvn clean</td>\n<td>清理项目生产的临时文件，—般是模块下的target目录</td>\n</tr>\n<tr>\n<td>mvn compile</td>\n<td>编译源代码，一般编译模块下的src/main/java目录</td>\n</tr>\n<tr>\n<td>mvn package</td>\n<td>项目打包工具，会在模块下的target目录生成jar或war等文件</td>\n</tr>\n<tr>\n<td>mvn test</td>\n<td>测试命令，或执行src/test/javal下junit的测试用例</td>\n</tr>\n<tr>\n<td>mvn install</td>\n<td>将打包的jar/war文件复制到你的本地仓库中，供其他模块使用</td>\n</tr>\n<tr>\n<td>mvn deploy</td>\n<td>将打包的文件发布到远程参考,提供其他人员进行下载依赖</td>\n</tr>\n<tr>\n<td>mvn dependency:tree</td>\n<td>打印出项目的整个依赖树</td>\n</tr>\n<tr>\n<td>mvn tomcat7:run</td>\n<td>在tomcat容器中运行web应用</td>\n</tr>\n<tr>\n<td>mvn jetty:run</td>\n<td>调用Jetty插件的 Run目标在Jetty Servlet容器中启动web应用</td>\n</tr>\n</tbody></table>\n<h3 id=\"pom文件常用标签\"><a href=\"#pom文件常用标签\" class=\"headerlink\" title=\"pom文件常用标签\"></a>pom文件常用标签</h3><h2 id=\"IDEA中使用maven\"><a href=\"#IDEA中使用maven\" class=\"headerlink\" title=\"IDEA中使用maven\"></a>IDEA中使用maven</h2><h3 id=\"配置maven\"><a href=\"#配置maven\" class=\"headerlink\" title=\"配置maven\"></a>配置maven</h3><p>在<code>Setting for New Project</code>中选择下载的maven目录以及对应的<code>settings.xml</code>配置文件，使得每次使用IDEA创建maven项目使用我们下载的而不是IDEA系统自带的。</p>\n<h3 id=\"创建maven项目\"><a href=\"#创建maven项目\" class=\"headerlink\" title=\"创建maven项目\"></a>创建maven项目</h3><p>新建项目选择Maven，如果是创建普通项目，选择<code>quickstart</code>，创建Web项目选择<code>webapp</code>。</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/maven%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8.png\" alt=\"\"></p>\n<h3 id=\"设置运行方式\"><a href=\"#设置运行方式\" class=\"headerlink\" title=\"设置运行方式\"></a>设置运行方式</h3><p>在IDEA右上角选择运行Maven项目的命令，如下即构建了Maven 的编译命令，如果是使用Maven构建的Web项目的话也可以使用Maven中相应的使用服务器运行的方法。</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/%E8%AE%BE%E7%BD%AEmaven%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4.png\" alt=\"\"></p>\n<h2 id=\"maven常见bug\"><a href=\"#maven常见bug\" class=\"headerlink\" title=\"maven常见bug\"></a>maven常见bug</h2><h3 id=\"bug1：IDEA构建项目失败\"><a href=\"#bug1：IDEA构建项目失败\" class=\"headerlink\" title=\"bug1：IDEA构建项目失败\"></a>bug1：IDEA构建项目失败</h3><h4 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">Could not transfer metadata org.apache.maven.plugins:maven-archetype-plugin<span class=\"hljs-regexp\">/maven-metadata.xml from/</span>to alimaven (http:<span class=\"hljs-regexp\">//m</span>aven.aliyun.com<span class=\"hljs-regexp\">/nexus/</span>content<span class=\"hljs-regexp\">/repositories/</span>central<span class=\"hljs-regexp\">/): Transfer failed for http:/</span><span class=\"hljs-regexp\">/maven.aliyun.com/</span>nexus<span class=\"hljs-regexp\">/content/</span>repositories<span class=\"hljs-regexp\">/central/</span>o<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在设置中为Maven启动加入如下命令</p>\n<p><img src=\"http://cdn.ziyedy.top/Maven/bug1.png\" alt=\"\"></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">-Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span>.insecure=true -Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span>.allowall=true -Dmaven<span class=\"hljs-selector-class\">.wagon</span><span class=\"hljs-selector-class\">.http</span><span class=\"hljs-selector-class\">.ssl</span><span class=\"hljs-selector-class\">.ignore</span><span class=\"hljs-selector-class\">.validity</span>.dates=true<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"bug2：插件出错\"><a href=\"#bug2：插件出错\" class=\"headerlink\" title=\"bug2：插件出错\"></a>bug2：插件出错</h3><h4 id=\"报错-1\"><a href=\"#报错-1\" class=\"headerlink\" title=\"报错\"></a>报错</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">Cannot</span> <span class=\"hljs-selector-tag\">resolve</span> <span class=\"hljs-selector-tag\">plugin</span> <span class=\"hljs-selector-tag\">org</span><span class=\"hljs-selector-class\">.apache</span><span class=\"hljs-selector-class\">.maven</span><span class=\"hljs-selector-class\">.plugins</span><span class=\"hljs-selector-pseudo\">:maven-clean-plugin</span><span class=\"hljs-selector-pseudo\">:2.5</span> <span class=\"hljs-selector-tag\">Maven</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>如图所示，删除对应出错的插件，然后点击左上角重新构建即可</p>\n<img src=\"http://cdn.ziyedy.top/Maven/bug2.png\" style=\"zoom:67%;\" />\n\n\n\n\n\n"},{"title":"第三章：传输层","date":"2020-10-05T06:41:47.000Z","fileName":"transport-layer","_content":"\n## 传输层概述\n\n### 传输层概述\n\n> 传输层协议为运行在不同主机上的**应用进程**之间提供**逻辑通信**功能\n>\n> 传输层协议是在**端系统**中而不是在网络路由器中实现的\n\n### 传输层与网络层关系\n\n> 传输层为运行在不同主机上的**进程间**的逻辑通信，而网络层则提供了**主机之间**的逻辑通信\n>\n> 传输层协议所能提供的服务也受到了*底层网络层协议的服务模型的限制*，\n\n### 因特网传输概述\n\n传输层主要有TCP（传输控制协议）与UDP（用户数据报协议）两种协议，特点及区别如下：\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%2CUDP.png)\n\n\n\n## 多路复用与多路分解\n\n> 多路复用与多路分解：本质上是将网络层所提供的*主机到主机*交付服务，**扩展**到为在主机上运行的应用程序所提供的*进程到进程*交付服务\n>\n> 即将从网络层接收的报文段，交付给合适的应用进程\n\n### 多路复用\n\n> 从源主机的不同套接字中收集数据块，井为每个数据块封装上首部信息( ( 在多路分解时使用) ) 从而生成报文段，然后将报文段传递到网络层的工作称为多路复用\n\n传输层要达到多路复用，必须保证\n\n* 套接字有唯一标识符\n* 每个传输层报文段有特殊字段来指示该报文段所要交付的套接字（即源端口号字段与目的端口号字段）\n\n### 多路分解\n\n> 将传输层报文段中的数据放置到正确的套接字的工作称为多路分解，确切地说，多路分解其实是多路分发，或者说是数据流的分解。\n\n\n\n## 无连接传输：UDP\n\n> UDP 只是做了传输层协议能够做的最少工作。除了多路复用/多路分解功能及少量的差错检测外，它几乎没有对 IP 增加别的东西\n>\n> UDP发送报文前，发送方与接收方之间并未进行握手，因此UDP是**无连接的**\n>\n> DNS即是一个使用UDP的例子\n\n#### UDP的优点\n\n* 应用层能更好地设置要发送的数据和发送时间（有较快发送速率，且能容忍一些丢包）\n* 无需建立连接（不会引入建立连接的时延）\n* 无连接状态（UDP无连接状态，也无需追踪一些相关参数）\n* 分组首部开销小（TCP有20字节的首部开销，而UDP仅有8个字节）\n\n#### UDP报文结构\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/UDP%E6%8A%A5%E6%96%87%E6%AE%B5.png)\n\n由4个字段组成，每个字段包含2个字节\n\n源端口号、目的端口号\n\n长度：包含首部在内的UDP报文段长度，以字节为单位\n\n校验和：计算报文段在传输的过程中是否出现了差错\n\n#### 校验和\n\n> 校验和提供了差错检测功能，即当 UDP 报文段从源到达目的时，校验和用于确定其中的比特是否发生了改变\n\n\n\n## 可靠数据传输原理（建模）\n\n> 考虑单向实现可靠传输的建模，得到TCP实现的基本思路\n\n### 完全可靠信道上\n\n> 底层信道完全可靠\n>\n> no bit errors;\tno loss of packets\n\n```\n// 发送方\npacket = make_pkt(data)\t// 生成数据分组\npacket = make_pkt(data)\t// 发送分组\n\n// 接收方\nextract (packet,data)\t// 从分组中提取\ndeliver_data(data)\t\t// 交付数据给应用层\n```\n\n### 具有比特差错信道上\n\n#### ACK、NAK不受损\n\n> 在传输过程中会产生比特差错\n>\n> 需要引入：**自动重传请求协议**（ARQ），即\n>\n> * 差错检测\n> * 接收方反馈（ACK：数据包OK；NAK：数据包存在错误）\n> * 重传：接收方收到有差错的分组时，发送方进行重传\n\n#### ACK、NAK受损\n\n> 确认信息在传输中本身出现错误\n>\n> 解决方法：发送方为数据报添加**序号字段**，而接收方抛弃重复的数据报\n\n### 具有比特差错的丢包信道上\n\n> 除去比特受损外，还有可能丢包\n>\n> 解决方法：发送方等待ACK到来足够的时间（采用**定时器**实现），然后进行**重传**\n\n### 流水线可靠数据传输协议\n\n> 为提高发送效率（解决上述“停等协议”的问题）：以“不停等”方式运行，*允许发送方发送多个分组而无需等待确认*，该技术称为流水线。流水线提出了新的需求：\n\n* 必须增加序号范围。保证每个传输的分组有一个唯一的序号\n* 协议的发送方和接收方必须缓存多个分组。\n* 所需序号范围和对缓冲的要求取决于数据传输协议处理丢失、损坏及过度延时分组：**回退N步与选择重传**\n\n#### 回退N步（GBN）\n\n> 在 GBN 协议中，允许发送方发送多个分组而不需等待确认，但*在流水线中未确认的分组数不能超过某个最大允许数N*\n>\n> 已被发送但还未被确认的分组的许可序号范围可以被看成是一个**在序号范围内长度为N的窗口**，因此N常被称为窗口长度，GBN也被称为滑动窗口协议\n>\n> *当有超时事件发生，出现丢失和过度时延分组时，发送方将重传所有已发送但还未被确认的分组*\n>\n> GBN使用了**累积确认**技术，累积确认指接收一个未出错分组（可能失序）时总是返回一个最后接收的按顺序到达分组的确认。\n\n#### 选择重传\n\n> 选择重传 (SR) 协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。\n>\n> 这种个别的、按需的重传要求接收方逐个地确认正确接收的分组，也用窗口长度N来限制流水线中未完成、未被确认的分组数。\n\n\n\n## 面向连接的传输：TCP\n\n> TCP是**面向连接**的传输层协议，*连接的实质是双方都初始化与连接相关的发送/接收缓冲区，以及许多 TCP 状态变量*\n\n* TCP连接提供的是全双工服务\n* TCP连接是点对点的（TCP不可能多播）\n\nTCP连接每一端都有各自的发送缓冲和接收缓存，TCP 可从缓存中取出并放入报文段中发送的数据量受限于**最大报文段长MSS（Maximum Segment Size）**，通常由**最大链路层帧长度（即最大传输单元MTU）**来决定（也就是底层的通信链路决定）\n\n除去进行通信的两台主机之中维护TCP连接所需的内容，这两台主机之间的路由器交换机并未为该连接分配任何缓存和控制变量\n\n### TCP报文格式\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png)\n\n* 源端口号与目的端口号：用于多路复用/多路分解来自或送至上层应用的数据\n* 32 比特的序号字段和 32 比特的确认号字段：用来实现可靠数据传输服务\n\n> 序号字段：即该数据报在所需传送的字节流上的位置，用于实现TCP报文的有序性\n>\n> 确认号字段：用于标识接收方期待从发送方收到的下一报文段首字节的序号\n\n* 16 比特的接收窗口字段：用于*流量控制*，用于指示接受方能够接收的字节数量\n* 4 比特的首部长度字段：用于指示以 32 比特的字为单位的 TCP 首部长度，一般 TCP 首部的长度就是 20 字节\n* 6比特标志字段：主要使用以下三个\n\n> ACK：用于指示确认字段中的值是有效的（对成功接收报文的确认），ACK=1时有效\n>\n> SYN：表示建立一个连接\n>\n> ​\tSYN=1，ACK=0时，表示这是一个**连接请求报文段**\n>\n> ​\tSYN=1，ACK=1时，表示对方同意建立连接\n>\n> FIN：告知对方关闭连接\n\n\n\n### 三次握手\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png)\n\n#### 第一次握手\n\n发送方创建一个特殊的TCP报文段（**SYN报文段**）：\n\n1. 不包含任何应用层数据；\n2. 将SYN标志位置为1；\n3. 随机生成一个初始序号（client_isn），并将该序号置于该报文的序号字段（seq）处\n\n#### 第二次握手\n\n收到SYN报文段后，接收方会返回允许连接的报文段（SYNACK报文段）：\n\n1. SYN标志位置为1，ACK标志位置为1；\n2. 确认号字段（ack）置为client_isn+1；\n3. 接收端生成一个自己的初始序号（server_isn），并将该序号置于自己报文的序号字段（seq）处\n\n#### 第三次握手\n\n1. SYN被置为0，ACK置为1\n2. 确认号字段置为server_isn+1\n3. seq字段设置为client_isn+1\n\n\n\n### 四次挥手\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png)\n\n1. 主机A发送一个标识了**FIN=1**的数据段，序列号**seq=a**的报文用来释放连接\n2. 主机B回应一个标识了**ACK=1**的数据段，序列号**seq=b**，确认序号**ack=a+1**，作为对主机A的FIN报文的确认\n3. 主机A收到主机B的确认后进入**等待状态**，等待主机B请求释放连接。主机B向主机A发送一个标识了**FIN=1，ACK=1**的数据段，序列号为**seq=b**，确认序列号为**ack=a+1**，用以释放连接\n4. 主机A发送标识了**ACK=1**，序列号**seq=a+1**，确认序号**ack=b+1**，用以确认关闭\n\n为什么要进行四次挥手：因为关闭连接时，接收端收到FIN报文时，很可能不会立刻关闭连接，因此需要多一次挥手\n\n\n\n### TCP可靠数据传输\n\n主要有超时重传和快速重传：\n\n* 超时重传：超时后进行重传，需要设置超时事件（通常4个往返时间RTT）\n* 快速重传：如果发送者收到了重复的3个ACK报文段（接收方如果发现有丢失（即收到了间隔后的报文段）会重复发送ACK报文段，），说明该报文段所指下一个段丢失，会在超时触发前快速重传该报文段。可以避免超时引起的大时延\n\n\n\n### TCP流量控制——滑动窗口\n\n> 流量控制只要在于消除发送方导致接收方缓存溢出的可能性，流量控制是一个**速度匹配**服务，即发送方的发送速率与接收方应用程序的读速率相匹配\n\nTCP通过维护**接收窗口**来提供流量控制，接收窗口用于告诉发送方，该接收方还有多少可用的缓存空间\n\n\n\n## 拥塞控制原理\n\n### 产生拥塞的情况\n\n#### 情况1\n\n> 两个发送方和一个具有无穷大缓存的路由器\n\n当分组到达速率接近*链路容量*时，分组将经历较长的排队时延\n\n#### 情况2\n\n> 两个发送方和一个具有有限缓存的路由器\n\n发送方在遇到大时延时所进行的不必要重传，导致路由器需要利用其链路带宽来转发不必要的分组\n\n#### 情况3\n\n> 四个发送方、具有有限缓存的多台路由器和多跳路径\n\n当一个分组沿一条路径被丢弃时每个上游路由器用于转发该分组而使用的传输容量最终被浪费掉了\n\n### 拥塞控制方法\n\n#### 端到端控制\n\n> 网络层没有为传输层拥塞控制提供显式支持，因此端系统必须对网络行为观察（分组丢失、时延等），来**推断**拥塞的发生\n\nTCP中将报文段的丢失（通过超时或3次冗余确认得知），认为是网络拥塞的一个迹象，之后TCP会相应减小其发送的窗口\n\n#### 网络辅助的拥塞控制\n\n> 网络层对是否产生拥塞显式反馈给端系统\n\n## TCP拥塞控制\n\n> 由于IP向端系统提供显式的网络拥塞反馈，因此TCP必须使用端到端的拥塞控制\n>\n> 拥塞控制的过程是源主机不断试探网络传输能力的过程，如果一个TCP发送方没有感知到拥塞，它就会增加其发送速率；如果感知到拥塞，则降低其发送速率\n\nTCP拥塞控制机制使用一个控制变量，即拥塞窗口（congestion window）来表征网络的拥塞情况\n\n发送窗口 = min{CongWin, RcvWin}\n\n### 加性增，乘性减\n\n* 加性增：每个RTT周期CongWin增加1个MSS单位，直到检测到丢包\n* 乘性减：当检测到丢包时，CongWin减半\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%8A%A0%E6%80%A7%E5%A2%9E%E4%B9%98%E6%80%A7%E5%87%8F.png)\n\n### 慢启动\n\n在慢启动阶段，每当一个传输的报文段被确认后，CongWin 的值就增加1个 MSS ，由于TCP 一次发送多个报文段进入网络，从\n而使发送方的发送速率在经过一个 RTT 时间后成倍增长\n\n以指数级增长后，直到遇到一个丢包，CongWin减半后开始变为线性增长\n\n### 对超时事件的反应\n\n1. 收到3个冗余ACK后，TCP将拥塞窗口减小一半，然后线性增长\n2. 超时事件发生后，TCP则进入一个慢启动状态\n\nTCP通过维持一个称为阈值 (Threshold) 的变量来确定慢启动将结束并且拥塞避免将开始的窗口长度\n\n变量Threshold初始化时被设置为一个很大的值，每当发生一个丢包事件时，Threshold值就会被设置为当前CongWin值的一半\n\n### 总结\n\n* 慢启动：CongWin < Threshold，CongWin指数增长\n* 拥塞避免：CongWin > Threshold，CongWin线性增长\n* 快速恢复：3个冗余ACK，Threshold设置为Threshold/2，CongWin设置为Threshold\n* 超时处理：timeout事件，Threshold设置为Threshold/2，CongWin设置为1MMS大小\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E8%BF%87%E7%A8%8B.png)\n\n\n\n\n\n参考：\n\n> https://zhuanlan.zhihu.com/p/145260638\n\n","source":"_posts/学习笔记/计算机网络/第三章：传输层.md","raw":"---\ntitle: 第三章：传输层\ndate: 2020-10-05 14:41:47\ntags:\n\t- 计算机网络\ncategories:\n\t- 学习笔记\n\t- 计算机网络\nfileName: transport-layer\n---\n\n## 传输层概述\n\n### 传输层概述\n\n> 传输层协议为运行在不同主机上的**应用进程**之间提供**逻辑通信**功能\n>\n> 传输层协议是在**端系统**中而不是在网络路由器中实现的\n\n### 传输层与网络层关系\n\n> 传输层为运行在不同主机上的**进程间**的逻辑通信，而网络层则提供了**主机之间**的逻辑通信\n>\n> 传输层协议所能提供的服务也受到了*底层网络层协议的服务模型的限制*，\n\n### 因特网传输概述\n\n传输层主要有TCP（传输控制协议）与UDP（用户数据报协议）两种协议，特点及区别如下：\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%2CUDP.png)\n\n\n\n## 多路复用与多路分解\n\n> 多路复用与多路分解：本质上是将网络层所提供的*主机到主机*交付服务，**扩展**到为在主机上运行的应用程序所提供的*进程到进程*交付服务\n>\n> 即将从网络层接收的报文段，交付给合适的应用进程\n\n### 多路复用\n\n> 从源主机的不同套接字中收集数据块，井为每个数据块封装上首部信息( ( 在多路分解时使用) ) 从而生成报文段，然后将报文段传递到网络层的工作称为多路复用\n\n传输层要达到多路复用，必须保证\n\n* 套接字有唯一标识符\n* 每个传输层报文段有特殊字段来指示该报文段所要交付的套接字（即源端口号字段与目的端口号字段）\n\n### 多路分解\n\n> 将传输层报文段中的数据放置到正确的套接字的工作称为多路分解，确切地说，多路分解其实是多路分发，或者说是数据流的分解。\n\n\n\n## 无连接传输：UDP\n\n> UDP 只是做了传输层协议能够做的最少工作。除了多路复用/多路分解功能及少量的差错检测外，它几乎没有对 IP 增加别的东西\n>\n> UDP发送报文前，发送方与接收方之间并未进行握手，因此UDP是**无连接的**\n>\n> DNS即是一个使用UDP的例子\n\n#### UDP的优点\n\n* 应用层能更好地设置要发送的数据和发送时间（有较快发送速率，且能容忍一些丢包）\n* 无需建立连接（不会引入建立连接的时延）\n* 无连接状态（UDP无连接状态，也无需追踪一些相关参数）\n* 分组首部开销小（TCP有20字节的首部开销，而UDP仅有8个字节）\n\n#### UDP报文结构\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/UDP%E6%8A%A5%E6%96%87%E6%AE%B5.png)\n\n由4个字段组成，每个字段包含2个字节\n\n源端口号、目的端口号\n\n长度：包含首部在内的UDP报文段长度，以字节为单位\n\n校验和：计算报文段在传输的过程中是否出现了差错\n\n#### 校验和\n\n> 校验和提供了差错检测功能，即当 UDP 报文段从源到达目的时，校验和用于确定其中的比特是否发生了改变\n\n\n\n## 可靠数据传输原理（建模）\n\n> 考虑单向实现可靠传输的建模，得到TCP实现的基本思路\n\n### 完全可靠信道上\n\n> 底层信道完全可靠\n>\n> no bit errors;\tno loss of packets\n\n```\n// 发送方\npacket = make_pkt(data)\t// 生成数据分组\npacket = make_pkt(data)\t// 发送分组\n\n// 接收方\nextract (packet,data)\t// 从分组中提取\ndeliver_data(data)\t\t// 交付数据给应用层\n```\n\n### 具有比特差错信道上\n\n#### ACK、NAK不受损\n\n> 在传输过程中会产生比特差错\n>\n> 需要引入：**自动重传请求协议**（ARQ），即\n>\n> * 差错检测\n> * 接收方反馈（ACK：数据包OK；NAK：数据包存在错误）\n> * 重传：接收方收到有差错的分组时，发送方进行重传\n\n#### ACK、NAK受损\n\n> 确认信息在传输中本身出现错误\n>\n> 解决方法：发送方为数据报添加**序号字段**，而接收方抛弃重复的数据报\n\n### 具有比特差错的丢包信道上\n\n> 除去比特受损外，还有可能丢包\n>\n> 解决方法：发送方等待ACK到来足够的时间（采用**定时器**实现），然后进行**重传**\n\n### 流水线可靠数据传输协议\n\n> 为提高发送效率（解决上述“停等协议”的问题）：以“不停等”方式运行，*允许发送方发送多个分组而无需等待确认*，该技术称为流水线。流水线提出了新的需求：\n\n* 必须增加序号范围。保证每个传输的分组有一个唯一的序号\n* 协议的发送方和接收方必须缓存多个分组。\n* 所需序号范围和对缓冲的要求取决于数据传输协议处理丢失、损坏及过度延时分组：**回退N步与选择重传**\n\n#### 回退N步（GBN）\n\n> 在 GBN 协议中，允许发送方发送多个分组而不需等待确认，但*在流水线中未确认的分组数不能超过某个最大允许数N*\n>\n> 已被发送但还未被确认的分组的许可序号范围可以被看成是一个**在序号范围内长度为N的窗口**，因此N常被称为窗口长度，GBN也被称为滑动窗口协议\n>\n> *当有超时事件发生，出现丢失和过度时延分组时，发送方将重传所有已发送但还未被确认的分组*\n>\n> GBN使用了**累积确认**技术，累积确认指接收一个未出错分组（可能失序）时总是返回一个最后接收的按顺序到达分组的确认。\n\n#### 选择重传\n\n> 选择重传 (SR) 协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。\n>\n> 这种个别的、按需的重传要求接收方逐个地确认正确接收的分组，也用窗口长度N来限制流水线中未完成、未被确认的分组数。\n\n\n\n## 面向连接的传输：TCP\n\n> TCP是**面向连接**的传输层协议，*连接的实质是双方都初始化与连接相关的发送/接收缓冲区，以及许多 TCP 状态变量*\n\n* TCP连接提供的是全双工服务\n* TCP连接是点对点的（TCP不可能多播）\n\nTCP连接每一端都有各自的发送缓冲和接收缓存，TCP 可从缓存中取出并放入报文段中发送的数据量受限于**最大报文段长MSS（Maximum Segment Size）**，通常由**最大链路层帧长度（即最大传输单元MTU）**来决定（也就是底层的通信链路决定）\n\n除去进行通信的两台主机之中维护TCP连接所需的内容，这两台主机之间的路由器交换机并未为该连接分配任何缓存和控制变量\n\n### TCP报文格式\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png)\n\n* 源端口号与目的端口号：用于多路复用/多路分解来自或送至上层应用的数据\n* 32 比特的序号字段和 32 比特的确认号字段：用来实现可靠数据传输服务\n\n> 序号字段：即该数据报在所需传送的字节流上的位置，用于实现TCP报文的有序性\n>\n> 确认号字段：用于标识接收方期待从发送方收到的下一报文段首字节的序号\n\n* 16 比特的接收窗口字段：用于*流量控制*，用于指示接受方能够接收的字节数量\n* 4 比特的首部长度字段：用于指示以 32 比特的字为单位的 TCP 首部长度，一般 TCP 首部的长度就是 20 字节\n* 6比特标志字段：主要使用以下三个\n\n> ACK：用于指示确认字段中的值是有效的（对成功接收报文的确认），ACK=1时有效\n>\n> SYN：表示建立一个连接\n>\n> ​\tSYN=1，ACK=0时，表示这是一个**连接请求报文段**\n>\n> ​\tSYN=1，ACK=1时，表示对方同意建立连接\n>\n> FIN：告知对方关闭连接\n\n\n\n### 三次握手\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png)\n\n#### 第一次握手\n\n发送方创建一个特殊的TCP报文段（**SYN报文段**）：\n\n1. 不包含任何应用层数据；\n2. 将SYN标志位置为1；\n3. 随机生成一个初始序号（client_isn），并将该序号置于该报文的序号字段（seq）处\n\n#### 第二次握手\n\n收到SYN报文段后，接收方会返回允许连接的报文段（SYNACK报文段）：\n\n1. SYN标志位置为1，ACK标志位置为1；\n2. 确认号字段（ack）置为client_isn+1；\n3. 接收端生成一个自己的初始序号（server_isn），并将该序号置于自己报文的序号字段（seq）处\n\n#### 第三次握手\n\n1. SYN被置为0，ACK置为1\n2. 确认号字段置为server_isn+1\n3. seq字段设置为client_isn+1\n\n\n\n### 四次挥手\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png)\n\n1. 主机A发送一个标识了**FIN=1**的数据段，序列号**seq=a**的报文用来释放连接\n2. 主机B回应一个标识了**ACK=1**的数据段，序列号**seq=b**，确认序号**ack=a+1**，作为对主机A的FIN报文的确认\n3. 主机A收到主机B的确认后进入**等待状态**，等待主机B请求释放连接。主机B向主机A发送一个标识了**FIN=1，ACK=1**的数据段，序列号为**seq=b**，确认序列号为**ack=a+1**，用以释放连接\n4. 主机A发送标识了**ACK=1**，序列号**seq=a+1**，确认序号**ack=b+1**，用以确认关闭\n\n为什么要进行四次挥手：因为关闭连接时，接收端收到FIN报文时，很可能不会立刻关闭连接，因此需要多一次挥手\n\n\n\n### TCP可靠数据传输\n\n主要有超时重传和快速重传：\n\n* 超时重传：超时后进行重传，需要设置超时事件（通常4个往返时间RTT）\n* 快速重传：如果发送者收到了重复的3个ACK报文段（接收方如果发现有丢失（即收到了间隔后的报文段）会重复发送ACK报文段，），说明该报文段所指下一个段丢失，会在超时触发前快速重传该报文段。可以避免超时引起的大时延\n\n\n\n### TCP流量控制——滑动窗口\n\n> 流量控制只要在于消除发送方导致接收方缓存溢出的可能性，流量控制是一个**速度匹配**服务，即发送方的发送速率与接收方应用程序的读速率相匹配\n\nTCP通过维护**接收窗口**来提供流量控制，接收窗口用于告诉发送方，该接收方还有多少可用的缓存空间\n\n\n\n## 拥塞控制原理\n\n### 产生拥塞的情况\n\n#### 情况1\n\n> 两个发送方和一个具有无穷大缓存的路由器\n\n当分组到达速率接近*链路容量*时，分组将经历较长的排队时延\n\n#### 情况2\n\n> 两个发送方和一个具有有限缓存的路由器\n\n发送方在遇到大时延时所进行的不必要重传，导致路由器需要利用其链路带宽来转发不必要的分组\n\n#### 情况3\n\n> 四个发送方、具有有限缓存的多台路由器和多跳路径\n\n当一个分组沿一条路径被丢弃时每个上游路由器用于转发该分组而使用的传输容量最终被浪费掉了\n\n### 拥塞控制方法\n\n#### 端到端控制\n\n> 网络层没有为传输层拥塞控制提供显式支持，因此端系统必须对网络行为观察（分组丢失、时延等），来**推断**拥塞的发生\n\nTCP中将报文段的丢失（通过超时或3次冗余确认得知），认为是网络拥塞的一个迹象，之后TCP会相应减小其发送的窗口\n\n#### 网络辅助的拥塞控制\n\n> 网络层对是否产生拥塞显式反馈给端系统\n\n## TCP拥塞控制\n\n> 由于IP向端系统提供显式的网络拥塞反馈，因此TCP必须使用端到端的拥塞控制\n>\n> 拥塞控制的过程是源主机不断试探网络传输能力的过程，如果一个TCP发送方没有感知到拥塞，它就会增加其发送速率；如果感知到拥塞，则降低其发送速率\n\nTCP拥塞控制机制使用一个控制变量，即拥塞窗口（congestion window）来表征网络的拥塞情况\n\n发送窗口 = min{CongWin, RcvWin}\n\n### 加性增，乘性减\n\n* 加性增：每个RTT周期CongWin增加1个MSS单位，直到检测到丢包\n* 乘性减：当检测到丢包时，CongWin减半\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%8A%A0%E6%80%A7%E5%A2%9E%E4%B9%98%E6%80%A7%E5%87%8F.png)\n\n### 慢启动\n\n在慢启动阶段，每当一个传输的报文段被确认后，CongWin 的值就增加1个 MSS ，由于TCP 一次发送多个报文段进入网络，从\n而使发送方的发送速率在经过一个 RTT 时间后成倍增长\n\n以指数级增长后，直到遇到一个丢包，CongWin减半后开始变为线性增长\n\n### 对超时事件的反应\n\n1. 收到3个冗余ACK后，TCP将拥塞窗口减小一半，然后线性增长\n2. 超时事件发生后，TCP则进入一个慢启动状态\n\nTCP通过维持一个称为阈值 (Threshold) 的变量来确定慢启动将结束并且拥塞避免将开始的窗口长度\n\n变量Threshold初始化时被设置为一个很大的值，每当发生一个丢包事件时，Threshold值就会被设置为当前CongWin值的一半\n\n### 总结\n\n* 慢启动：CongWin < Threshold，CongWin指数增长\n* 拥塞避免：CongWin > Threshold，CongWin线性增长\n* 快速恢复：3个冗余ACK，Threshold设置为Threshold/2，CongWin设置为Threshold\n* 超时处理：timeout事件，Threshold设置为Threshold/2，CongWin设置为1MMS大小\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E8%BF%87%E7%A8%8B.png)\n\n\n\n\n\n参考：\n\n> https://zhuanlan.zhihu.com/p/145260638\n\n","slug":"学习笔记/计算机网络/第三章：传输层","published":1,"updated":"2021-02-26T08:14:03.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhov00058sjs15xpglcw","content":"<h2 id=\"传输层概述\"><a href=\"#传输层概述\" class=\"headerlink\" title=\"传输层概述\"></a>传输层概述</h2><h3 id=\"传输层概述-1\"><a href=\"#传输层概述-1\" class=\"headerlink\" title=\"传输层概述\"></a>传输层概述</h3><blockquote>\n<p>传输层协议为运行在不同主机上的<strong>应用进程</strong>之间提供<strong>逻辑通信</strong>功能</p>\n<p>传输层协议是在<strong>端系统</strong>中而不是在网络路由器中实现的</p>\n</blockquote>\n<h3 id=\"传输层与网络层关系\"><a href=\"#传输层与网络层关系\" class=\"headerlink\" title=\"传输层与网络层关系\"></a>传输层与网络层关系</h3><blockquote>\n<p>传输层为运行在不同主机上的<strong>进程间</strong>的逻辑通信，而网络层则提供了<strong>主机之间</strong>的逻辑通信</p>\n<p>传输层协议所能提供的服务也受到了<em>底层网络层协议的服务模型的限制</em>，</p>\n</blockquote>\n<h3 id=\"因特网传输概述\"><a href=\"#因特网传输概述\" class=\"headerlink\" title=\"因特网传输概述\"></a>因特网传输概述</h3><p>传输层主要有TCP（传输控制协议）与UDP（用户数据报协议）两种协议，特点及区别如下：</p>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%2CUDP.png\" alt=\"\"></p>\n<h2 id=\"多路复用与多路分解\"><a href=\"#多路复用与多路分解\" class=\"headerlink\" title=\"多路复用与多路分解\"></a>多路复用与多路分解</h2><blockquote>\n<p>多路复用与多路分解：本质上是将网络层所提供的<em>主机到主机</em>交付服务，<strong>扩展</strong>到为在主机上运行的应用程序所提供的<em>进程到进程</em>交付服务</p>\n<p>即将从网络层接收的报文段，交付给合适的应用进程</p>\n</blockquote>\n<h3 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3><blockquote>\n<p>从源主机的不同套接字中收集数据块，井为每个数据块封装上首部信息( ( 在多路分解时使用) ) 从而生成报文段，然后将报文段传递到网络层的工作称为多路复用</p>\n</blockquote>\n<p>传输层要达到多路复用，必须保证</p>\n<ul>\n<li>套接字有唯一标识符</li>\n<li>每个传输层报文段有特殊字段来指示该报文段所要交付的套接字（即源端口号字段与目的端口号字段）</li>\n</ul>\n<h3 id=\"多路分解\"><a href=\"#多路分解\" class=\"headerlink\" title=\"多路分解\"></a>多路分解</h3><blockquote>\n<p>将传输层报文段中的数据放置到正确的套接字的工作称为多路分解，确切地说，多路分解其实是多路分发，或者说是数据流的分解。</p>\n</blockquote>\n<h2 id=\"无连接传输：UDP\"><a href=\"#无连接传输：UDP\" class=\"headerlink\" title=\"无连接传输：UDP\"></a>无连接传输：UDP</h2><blockquote>\n<p>UDP 只是做了传输层协议能够做的最少工作。除了多路复用/多路分解功能及少量的差错检测外，它几乎没有对 IP 增加别的东西</p>\n<p>UDP发送报文前，发送方与接收方之间并未进行握手，因此UDP是<strong>无连接的</strong></p>\n<p>DNS即是一个使用UDP的例子</p>\n</blockquote>\n<h4 id=\"UDP的优点\"><a href=\"#UDP的优点\" class=\"headerlink\" title=\"UDP的优点\"></a>UDP的优点</h4><ul>\n<li>应用层能更好地设置要发送的数据和发送时间（有较快发送速率，且能容忍一些丢包）</li>\n<li>无需建立连接（不会引入建立连接的时延）</li>\n<li>无连接状态（UDP无连接状态，也无需追踪一些相关参数）</li>\n<li>分组首部开销小（TCP有20字节的首部开销，而UDP仅有8个字节）</li>\n</ul>\n<h4 id=\"UDP报文结构\"><a href=\"#UDP报文结构\" class=\"headerlink\" title=\"UDP报文结构\"></a>UDP报文结构</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/UDP%E6%8A%A5%E6%96%87%E6%AE%B5.png\" alt=\"\"></p>\n<p>由4个字段组成，每个字段包含2个字节</p>\n<p>源端口号、目的端口号</p>\n<p>长度：包含首部在内的UDP报文段长度，以字节为单位</p>\n<p>校验和：计算报文段在传输的过程中是否出现了差错</p>\n<h4 id=\"校验和\"><a href=\"#校验和\" class=\"headerlink\" title=\"校验和\"></a>校验和</h4><blockquote>\n<p>校验和提供了差错检测功能，即当 UDP 报文段从源到达目的时，校验和用于确定其中的比特是否发生了改变</p>\n</blockquote>\n<h2 id=\"可靠数据传输原理（建模）\"><a href=\"#可靠数据传输原理（建模）\" class=\"headerlink\" title=\"可靠数据传输原理（建模）\"></a>可靠数据传输原理（建模）</h2><blockquote>\n<p>考虑单向实现可靠传输的建模，得到TCP实现的基本思路</p>\n</blockquote>\n<h3 id=\"完全可靠信道上\"><a href=\"#完全可靠信道上\" class=\"headerlink\" title=\"完全可靠信道上\"></a>完全可靠信道上</h3><blockquote>\n<p>底层信道完全可靠</p>\n<p>no bit errors;    no loss of packets</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 发送方</span><br>packet = make<span class=\"hljs-constructor\">_pkt(<span class=\"hljs-params\">data</span>)</span>\t<span class=\"hljs-comment\">// 生成数据分组</span><br>packet = make<span class=\"hljs-constructor\">_pkt(<span class=\"hljs-params\">data</span>)</span>\t<span class=\"hljs-comment\">// 发送分组</span><br><br><span class=\"hljs-comment\">// 接收方</span><br>extract (packet,data)\t<span class=\"hljs-comment\">// 从分组中提取</span><br>deliver<span class=\"hljs-constructor\">_data(<span class=\"hljs-params\">data</span>)</span>\t\t<span class=\"hljs-comment\">// 交付数据给应用层</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"具有比特差错信道上\"><a href=\"#具有比特差错信道上\" class=\"headerlink\" title=\"具有比特差错信道上\"></a>具有比特差错信道上</h3><h4 id=\"ACK、NAK不受损\"><a href=\"#ACK、NAK不受损\" class=\"headerlink\" title=\"ACK、NAK不受损\"></a>ACK、NAK不受损</h4><blockquote>\n<p>在传输过程中会产生比特差错</p>\n<p>需要引入：<strong>自动重传请求协议</strong>（ARQ），即</p>\n<ul>\n<li>差错检测</li>\n<li>接收方反馈（ACK：数据包OK；NAK：数据包存在错误）</li>\n<li>重传：接收方收到有差错的分组时，发送方进行重传</li>\n</ul>\n</blockquote>\n<h4 id=\"ACK、NAK受损\"><a href=\"#ACK、NAK受损\" class=\"headerlink\" title=\"ACK、NAK受损\"></a>ACK、NAK受损</h4><blockquote>\n<p>确认信息在传输中本身出现错误</p>\n<p>解决方法：发送方为数据报添加<strong>序号字段</strong>，而接收方抛弃重复的数据报</p>\n</blockquote>\n<h3 id=\"具有比特差错的丢包信道上\"><a href=\"#具有比特差错的丢包信道上\" class=\"headerlink\" title=\"具有比特差错的丢包信道上\"></a>具有比特差错的丢包信道上</h3><blockquote>\n<p>除去比特受损外，还有可能丢包</p>\n<p>解决方法：发送方等待ACK到来足够的时间（采用<strong>定时器</strong>实现），然后进行<strong>重传</strong></p>\n</blockquote>\n<h3 id=\"流水线可靠数据传输协议\"><a href=\"#流水线可靠数据传输协议\" class=\"headerlink\" title=\"流水线可靠数据传输协议\"></a>流水线可靠数据传输协议</h3><blockquote>\n<p>为提高发送效率（解决上述“停等协议”的问题）：以“不停等”方式运行，<em>允许发送方发送多个分组而无需等待确认</em>，该技术称为流水线。流水线提出了新的需求：</p>\n</blockquote>\n<ul>\n<li>必须增加序号范围。保证每个传输的分组有一个唯一的序号</li>\n<li>协议的发送方和接收方必须缓存多个分组。</li>\n<li>所需序号范围和对缓冲的要求取决于数据传输协议处理丢失、损坏及过度延时分组：<strong>回退N步与选择重传</strong></li>\n</ul>\n<h4 id=\"回退N步（GBN）\"><a href=\"#回退N步（GBN）\" class=\"headerlink\" title=\"回退N步（GBN）\"></a>回退N步（GBN）</h4><blockquote>\n<p>在 GBN 协议中，允许发送方发送多个分组而不需等待确认，但<em>在流水线中未确认的分组数不能超过某个最大允许数N</em></p>\n<p>已被发送但还未被确认的分组的许可序号范围可以被看成是一个<strong>在序号范围内长度为N的窗口</strong>，因此N常被称为窗口长度，GBN也被称为滑动窗口协议</p>\n<p><em>当有超时事件发生，出现丢失和过度时延分组时，发送方将重传所有已发送但还未被确认的分组</em></p>\n<p>GBN使用了<strong>累积确认</strong>技术，累积确认指接收一个未出错分组（可能失序）时总是返回一个最后接收的按顺序到达分组的确认。</p>\n</blockquote>\n<h4 id=\"选择重传\"><a href=\"#选择重传\" class=\"headerlink\" title=\"选择重传\"></a>选择重传</h4><blockquote>\n<p>选择重传 (SR) 协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。</p>\n<p>这种个别的、按需的重传要求接收方逐个地确认正确接收的分组，也用窗口长度N来限制流水线中未完成、未被确认的分组数。</p>\n</blockquote>\n<h2 id=\"面向连接的传输：TCP\"><a href=\"#面向连接的传输：TCP\" class=\"headerlink\" title=\"面向连接的传输：TCP\"></a>面向连接的传输：TCP</h2><blockquote>\n<p>TCP是<strong>面向连接</strong>的传输层协议，<em>连接的实质是双方都初始化与连接相关的发送/接收缓冲区，以及许多 TCP 状态变量</em></p>\n</blockquote>\n<ul>\n<li>TCP连接提供的是全双工服务</li>\n<li>TCP连接是点对点的（TCP不可能多播）</li>\n</ul>\n<p>TCP连接每一端都有各自的发送缓冲和接收缓存，TCP 可从缓存中取出并放入报文段中发送的数据量受限于<strong>最大报文段长MSS（Maximum Segment Size）</strong>，通常由<strong>最大链路层帧长度（即最大传输单元MTU）</strong>来决定（也就是底层的通信链路决定）</p>\n<p>除去进行通信的两台主机之中维护TCP连接所需的内容，这两台主机之间的路由器交换机并未为该连接分配任何缓存和控制变量</p>\n<h3 id=\"TCP报文格式\"><a href=\"#TCP报文格式\" class=\"headerlink\" title=\"TCP报文格式\"></a>TCP报文格式</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png\" alt=\"\"></p>\n<ul>\n<li>源端口号与目的端口号：用于多路复用/多路分解来自或送至上层应用的数据</li>\n<li>32 比特的序号字段和 32 比特的确认号字段：用来实现可靠数据传输服务</li>\n</ul>\n<blockquote>\n<p>序号字段：即该数据报在所需传送的字节流上的位置，用于实现TCP报文的有序性</p>\n<p>确认号字段：用于标识接收方期待从发送方收到的下一报文段首字节的序号</p>\n</blockquote>\n<ul>\n<li>16 比特的接收窗口字段：用于<em>流量控制</em>，用于指示接受方能够接收的字节数量</li>\n<li>4 比特的首部长度字段：用于指示以 32 比特的字为单位的 TCP 首部长度，一般 TCP 首部的长度就是 20 字节</li>\n<li>6比特标志字段：主要使用以下三个</li>\n</ul>\n<blockquote>\n<p>ACK：用于指示确认字段中的值是有效的（对成功接收报文的确认），ACK=1时有效</p>\n<p>SYN：表示建立一个连接</p>\n<p>​    SYN=1，ACK=0时，表示这是一个<strong>连接请求报文段</strong></p>\n<p>​    SYN=1，ACK=1时，表示对方同意建立连接</p>\n<p>FIN：告知对方关闭连接</p>\n</blockquote>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"\"></p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>发送方创建一个特殊的TCP报文段（<strong>SYN报文段</strong>）：</p>\n<ol>\n<li>不包含任何应用层数据；</li>\n<li>将SYN标志位置为1；</li>\n<li>随机生成一个初始序号（client_isn），并将该序号置于该报文的序号字段（seq）处</li>\n</ol>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>收到SYN报文段后，接收方会返回允许连接的报文段（SYNACK报文段）：</p>\n<ol>\n<li>SYN标志位置为1，ACK标志位置为1；</li>\n<li>确认号字段（ack）置为client_isn+1；</li>\n<li>接收端生成一个自己的初始序号（server_isn），并将该序号置于自己报文的序号字段（seq）处</li>\n</ol>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><ol>\n<li>SYN被置为0，ACK置为1</li>\n<li>确认号字段置为server_isn+1</li>\n<li>seq字段设置为client_isn+1</li>\n</ol>\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"\"></p>\n<ol>\n<li>主机A发送一个标识了<strong>FIN=1</strong>的数据段，序列号<strong>seq=a</strong>的报文用来释放连接</li>\n<li>主机B回应一个标识了<strong>ACK=1</strong>的数据段，序列号<strong>seq=b</strong>，确认序号<strong>ack=a+1</strong>，作为对主机A的FIN报文的确认</li>\n<li>主机A收到主机B的确认后进入<strong>等待状态</strong>，等待主机B请求释放连接。主机B向主机A发送一个标识了<strong>FIN=1，ACK=1</strong>的数据段，序列号为<strong>seq=b</strong>，确认序列号为<strong>ack=a+1</strong>，用以释放连接</li>\n<li>主机A发送标识了<strong>ACK=1</strong>，序列号<strong>seq=a+1</strong>，确认序号<strong>ack=b+1</strong>，用以确认关闭</li>\n</ol>\n<p>为什么要进行四次挥手：因为关闭连接时，接收端收到FIN报文时，很可能不会立刻关闭连接，因此需要多一次挥手</p>\n<h3 id=\"TCP可靠数据传输\"><a href=\"#TCP可靠数据传输\" class=\"headerlink\" title=\"TCP可靠数据传输\"></a>TCP可靠数据传输</h3><p>主要有超时重传和快速重传：</p>\n<ul>\n<li>超时重传：超时后进行重传，需要设置超时事件（通常4个往返时间RTT）</li>\n<li>快速重传：如果发送者收到了重复的3个ACK报文段（接收方如果发现有丢失（即收到了间隔后的报文段）会重复发送ACK报文段，），说明该报文段所指下一个段丢失，会在超时触发前快速重传该报文段。可以避免超时引起的大时延</li>\n</ul>\n<h3 id=\"TCP流量控制——滑动窗口\"><a href=\"#TCP流量控制——滑动窗口\" class=\"headerlink\" title=\"TCP流量控制——滑动窗口\"></a>TCP流量控制——滑动窗口</h3><blockquote>\n<p>流量控制只要在于消除发送方导致接收方缓存溢出的可能性，流量控制是一个<strong>速度匹配</strong>服务，即发送方的发送速率与接收方应用程序的读速率相匹配</p>\n</blockquote>\n<p>TCP通过维护<strong>接收窗口</strong>来提供流量控制，接收窗口用于告诉发送方，该接收方还有多少可用的缓存空间</p>\n<h2 id=\"拥塞控制原理\"><a href=\"#拥塞控制原理\" class=\"headerlink\" title=\"拥塞控制原理\"></a>拥塞控制原理</h2><h3 id=\"产生拥塞的情况\"><a href=\"#产生拥塞的情况\" class=\"headerlink\" title=\"产生拥塞的情况\"></a>产生拥塞的情况</h3><h4 id=\"情况1\"><a href=\"#情况1\" class=\"headerlink\" title=\"情况1\"></a>情况1</h4><blockquote>\n<p>两个发送方和一个具有无穷大缓存的路由器</p>\n</blockquote>\n<p>当分组到达速率接近<em>链路容量</em>时，分组将经历较长的排队时延</p>\n<h4 id=\"情况2\"><a href=\"#情况2\" class=\"headerlink\" title=\"情况2\"></a>情况2</h4><blockquote>\n<p>两个发送方和一个具有有限缓存的路由器</p>\n</blockquote>\n<p>发送方在遇到大时延时所进行的不必要重传，导致路由器需要利用其链路带宽来转发不必要的分组</p>\n<h4 id=\"情况3\"><a href=\"#情况3\" class=\"headerlink\" title=\"情况3\"></a>情况3</h4><blockquote>\n<p>四个发送方、具有有限缓存的多台路由器和多跳路径</p>\n</blockquote>\n<p>当一个分组沿一条路径被丢弃时每个上游路由器用于转发该分组而使用的传输容量最终被浪费掉了</p>\n<h3 id=\"拥塞控制方法\"><a href=\"#拥塞控制方法\" class=\"headerlink\" title=\"拥塞控制方法\"></a>拥塞控制方法</h3><h4 id=\"端到端控制\"><a href=\"#端到端控制\" class=\"headerlink\" title=\"端到端控制\"></a>端到端控制</h4><blockquote>\n<p>网络层没有为传输层拥塞控制提供显式支持，因此端系统必须对网络行为观察（分组丢失、时延等），来<strong>推断</strong>拥塞的发生</p>\n</blockquote>\n<p>TCP中将报文段的丢失（通过超时或3次冗余确认得知），认为是网络拥塞的一个迹象，之后TCP会相应减小其发送的窗口</p>\n<h4 id=\"网络辅助的拥塞控制\"><a href=\"#网络辅助的拥塞控制\" class=\"headerlink\" title=\"网络辅助的拥塞控制\"></a>网络辅助的拥塞控制</h4><blockquote>\n<p>网络层对是否产生拥塞显式反馈给端系统</p>\n</blockquote>\n<h2 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h2><blockquote>\n<p>由于IP向端系统提供显式的网络拥塞反馈，因此TCP必须使用端到端的拥塞控制</p>\n<p>拥塞控制的过程是源主机不断试探网络传输能力的过程，如果一个TCP发送方没有感知到拥塞，它就会增加其发送速率；如果感知到拥塞，则降低其发送速率</p>\n</blockquote>\n<p>TCP拥塞控制机制使用一个控制变量，即拥塞窗口（congestion window）来表征网络的拥塞情况</p>\n<p>发送窗口 = min{CongWin, RcvWin}</p>\n<h3 id=\"加性增，乘性减\"><a href=\"#加性增，乘性减\" class=\"headerlink\" title=\"加性增，乘性减\"></a>加性增，乘性减</h3><ul>\n<li>加性增：每个RTT周期CongWin增加1个MSS单位，直到检测到丢包</li>\n<li>乘性减：当检测到丢包时，CongWin减半</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%8A%A0%E6%80%A7%E5%A2%9E%E4%B9%98%E6%80%A7%E5%87%8F.png\" alt=\"\"></p>\n<h3 id=\"慢启动\"><a href=\"#慢启动\" class=\"headerlink\" title=\"慢启动\"></a>慢启动</h3><p>在慢启动阶段，每当一个传输的报文段被确认后，CongWin 的值就增加1个 MSS ，由于TCP 一次发送多个报文段进入网络，从<br>而使发送方的发送速率在经过一个 RTT 时间后成倍增长</p>\n<p>以指数级增长后，直到遇到一个丢包，CongWin减半后开始变为线性增长</p>\n<h3 id=\"对超时事件的反应\"><a href=\"#对超时事件的反应\" class=\"headerlink\" title=\"对超时事件的反应\"></a>对超时事件的反应</h3><ol>\n<li>收到3个冗余ACK后，TCP将拥塞窗口减小一半，然后线性增长</li>\n<li>超时事件发生后，TCP则进入一个慢启动状态</li>\n</ol>\n<p>TCP通过维持一个称为阈值 (Threshold) 的变量来确定慢启动将结束并且拥塞避免将开始的窗口长度</p>\n<p>变量Threshold初始化时被设置为一个很大的值，每当发生一个丢包事件时，Threshold值就会被设置为当前CongWin值的一半</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>慢启动：CongWin &lt; Threshold，CongWin指数增长</li>\n<li>拥塞避免：CongWin &gt; Threshold，CongWin线性增长</li>\n<li>快速恢复：3个冗余ACK，Threshold设置为Threshold/2，CongWin设置为Threshold</li>\n<li>超时处理：timeout事件，Threshold设置为Threshold/2，CongWin设置为1MMS大小</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/145260638\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/145260638</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"传输层概述\"><a href=\"#传输层概述\" class=\"headerlink\" title=\"传输层概述\"></a>传输层概述</h2><h3 id=\"传输层概述-1\"><a href=\"#传输层概述-1\" class=\"headerlink\" title=\"传输层概述\"></a>传输层概述</h3><blockquote>\n<p>传输层协议为运行在不同主机上的<strong>应用进程</strong>之间提供<strong>逻辑通信</strong>功能</p>\n<p>传输层协议是在<strong>端系统</strong>中而不是在网络路由器中实现的</p>\n</blockquote>\n<h3 id=\"传输层与网络层关系\"><a href=\"#传输层与网络层关系\" class=\"headerlink\" title=\"传输层与网络层关系\"></a>传输层与网络层关系</h3><blockquote>\n<p>传输层为运行在不同主机上的<strong>进程间</strong>的逻辑通信，而网络层则提供了<strong>主机之间</strong>的逻辑通信</p>\n<p>传输层协议所能提供的服务也受到了<em>底层网络层协议的服务模型的限制</em>，</p>\n</blockquote>\n<h3 id=\"因特网传输概述\"><a href=\"#因特网传输概述\" class=\"headerlink\" title=\"因特网传输概述\"></a>因特网传输概述</h3><p>传输层主要有TCP（传输控制协议）与UDP（用户数据报协议）两种协议，特点及区别如下：</p>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%2CUDP.png\" alt=\"\"></p>\n<h2 id=\"多路复用与多路分解\"><a href=\"#多路复用与多路分解\" class=\"headerlink\" title=\"多路复用与多路分解\"></a>多路复用与多路分解</h2><blockquote>\n<p>多路复用与多路分解：本质上是将网络层所提供的<em>主机到主机</em>交付服务，<strong>扩展</strong>到为在主机上运行的应用程序所提供的<em>进程到进程</em>交付服务</p>\n<p>即将从网络层接收的报文段，交付给合适的应用进程</p>\n</blockquote>\n<h3 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h3><blockquote>\n<p>从源主机的不同套接字中收集数据块，井为每个数据块封装上首部信息( ( 在多路分解时使用) ) 从而生成报文段，然后将报文段传递到网络层的工作称为多路复用</p>\n</blockquote>\n<p>传输层要达到多路复用，必须保证</p>\n<ul>\n<li>套接字有唯一标识符</li>\n<li>每个传输层报文段有特殊字段来指示该报文段所要交付的套接字（即源端口号字段与目的端口号字段）</li>\n</ul>\n<h3 id=\"多路分解\"><a href=\"#多路分解\" class=\"headerlink\" title=\"多路分解\"></a>多路分解</h3><blockquote>\n<p>将传输层报文段中的数据放置到正确的套接字的工作称为多路分解，确切地说，多路分解其实是多路分发，或者说是数据流的分解。</p>\n</blockquote>\n<h2 id=\"无连接传输：UDP\"><a href=\"#无连接传输：UDP\" class=\"headerlink\" title=\"无连接传输：UDP\"></a>无连接传输：UDP</h2><blockquote>\n<p>UDP 只是做了传输层协议能够做的最少工作。除了多路复用/多路分解功能及少量的差错检测外，它几乎没有对 IP 增加别的东西</p>\n<p>UDP发送报文前，发送方与接收方之间并未进行握手，因此UDP是<strong>无连接的</strong></p>\n<p>DNS即是一个使用UDP的例子</p>\n</blockquote>\n<h4 id=\"UDP的优点\"><a href=\"#UDP的优点\" class=\"headerlink\" title=\"UDP的优点\"></a>UDP的优点</h4><ul>\n<li>应用层能更好地设置要发送的数据和发送时间（有较快发送速率，且能容忍一些丢包）</li>\n<li>无需建立连接（不会引入建立连接的时延）</li>\n<li>无连接状态（UDP无连接状态，也无需追踪一些相关参数）</li>\n<li>分组首部开销小（TCP有20字节的首部开销，而UDP仅有8个字节）</li>\n</ul>\n<h4 id=\"UDP报文结构\"><a href=\"#UDP报文结构\" class=\"headerlink\" title=\"UDP报文结构\"></a>UDP报文结构</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/UDP%E6%8A%A5%E6%96%87%E6%AE%B5.png\" alt=\"\"></p>\n<p>由4个字段组成，每个字段包含2个字节</p>\n<p>源端口号、目的端口号</p>\n<p>长度：包含首部在内的UDP报文段长度，以字节为单位</p>\n<p>校验和：计算报文段在传输的过程中是否出现了差错</p>\n<h4 id=\"校验和\"><a href=\"#校验和\" class=\"headerlink\" title=\"校验和\"></a>校验和</h4><blockquote>\n<p>校验和提供了差错检测功能，即当 UDP 报文段从源到达目的时，校验和用于确定其中的比特是否发生了改变</p>\n</blockquote>\n<h2 id=\"可靠数据传输原理（建模）\"><a href=\"#可靠数据传输原理（建模）\" class=\"headerlink\" title=\"可靠数据传输原理（建模）\"></a>可靠数据传输原理（建模）</h2><blockquote>\n<p>考虑单向实现可靠传输的建模，得到TCP实现的基本思路</p>\n</blockquote>\n<h3 id=\"完全可靠信道上\"><a href=\"#完全可靠信道上\" class=\"headerlink\" title=\"完全可靠信道上\"></a>完全可靠信道上</h3><blockquote>\n<p>底层信道完全可靠</p>\n<p>no bit errors;    no loss of packets</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 发送方</span><br>packet = make<span class=\"hljs-constructor\">_pkt(<span class=\"hljs-params\">data</span>)</span>\t<span class=\"hljs-comment\">// 生成数据分组</span><br>packet = make<span class=\"hljs-constructor\">_pkt(<span class=\"hljs-params\">data</span>)</span>\t<span class=\"hljs-comment\">// 发送分组</span><br><br><span class=\"hljs-comment\">// 接收方</span><br>extract (packet,data)\t<span class=\"hljs-comment\">// 从分组中提取</span><br>deliver<span class=\"hljs-constructor\">_data(<span class=\"hljs-params\">data</span>)</span>\t\t<span class=\"hljs-comment\">// 交付数据给应用层</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"具有比特差错信道上\"><a href=\"#具有比特差错信道上\" class=\"headerlink\" title=\"具有比特差错信道上\"></a>具有比特差错信道上</h3><h4 id=\"ACK、NAK不受损\"><a href=\"#ACK、NAK不受损\" class=\"headerlink\" title=\"ACK、NAK不受损\"></a>ACK、NAK不受损</h4><blockquote>\n<p>在传输过程中会产生比特差错</p>\n<p>需要引入：<strong>自动重传请求协议</strong>（ARQ），即</p>\n<ul>\n<li>差错检测</li>\n<li>接收方反馈（ACK：数据包OK；NAK：数据包存在错误）</li>\n<li>重传：接收方收到有差错的分组时，发送方进行重传</li>\n</ul>\n</blockquote>\n<h4 id=\"ACK、NAK受损\"><a href=\"#ACK、NAK受损\" class=\"headerlink\" title=\"ACK、NAK受损\"></a>ACK、NAK受损</h4><blockquote>\n<p>确认信息在传输中本身出现错误</p>\n<p>解决方法：发送方为数据报添加<strong>序号字段</strong>，而接收方抛弃重复的数据报</p>\n</blockquote>\n<h3 id=\"具有比特差错的丢包信道上\"><a href=\"#具有比特差错的丢包信道上\" class=\"headerlink\" title=\"具有比特差错的丢包信道上\"></a>具有比特差错的丢包信道上</h3><blockquote>\n<p>除去比特受损外，还有可能丢包</p>\n<p>解决方法：发送方等待ACK到来足够的时间（采用<strong>定时器</strong>实现），然后进行<strong>重传</strong></p>\n</blockquote>\n<h3 id=\"流水线可靠数据传输协议\"><a href=\"#流水线可靠数据传输协议\" class=\"headerlink\" title=\"流水线可靠数据传输协议\"></a>流水线可靠数据传输协议</h3><blockquote>\n<p>为提高发送效率（解决上述“停等协议”的问题）：以“不停等”方式运行，<em>允许发送方发送多个分组而无需等待确认</em>，该技术称为流水线。流水线提出了新的需求：</p>\n</blockquote>\n<ul>\n<li>必须增加序号范围。保证每个传输的分组有一个唯一的序号</li>\n<li>协议的发送方和接收方必须缓存多个分组。</li>\n<li>所需序号范围和对缓冲的要求取决于数据传输协议处理丢失、损坏及过度延时分组：<strong>回退N步与选择重传</strong></li>\n</ul>\n<h4 id=\"回退N步（GBN）\"><a href=\"#回退N步（GBN）\" class=\"headerlink\" title=\"回退N步（GBN）\"></a>回退N步（GBN）</h4><blockquote>\n<p>在 GBN 协议中，允许发送方发送多个分组而不需等待确认，但<em>在流水线中未确认的分组数不能超过某个最大允许数N</em></p>\n<p>已被发送但还未被确认的分组的许可序号范围可以被看成是一个<strong>在序号范围内长度为N的窗口</strong>，因此N常被称为窗口长度，GBN也被称为滑动窗口协议</p>\n<p><em>当有超时事件发生，出现丢失和过度时延分组时，发送方将重传所有已发送但还未被确认的分组</em></p>\n<p>GBN使用了<strong>累积确认</strong>技术，累积确认指接收一个未出错分组（可能失序）时总是返回一个最后接收的按顺序到达分组的确认。</p>\n</blockquote>\n<h4 id=\"选择重传\"><a href=\"#选择重传\" class=\"headerlink\" title=\"选择重传\"></a>选择重传</h4><blockquote>\n<p>选择重传 (SR) 协议通过让发送方仅重传那些它怀疑在接收方出错的分组而避免了不必要的重传。</p>\n<p>这种个别的、按需的重传要求接收方逐个地确认正确接收的分组，也用窗口长度N来限制流水线中未完成、未被确认的分组数。</p>\n</blockquote>\n<h2 id=\"面向连接的传输：TCP\"><a href=\"#面向连接的传输：TCP\" class=\"headerlink\" title=\"面向连接的传输：TCP\"></a>面向连接的传输：TCP</h2><blockquote>\n<p>TCP是<strong>面向连接</strong>的传输层协议，<em>连接的实质是双方都初始化与连接相关的发送/接收缓冲区，以及许多 TCP 状态变量</em></p>\n</blockquote>\n<ul>\n<li>TCP连接提供的是全双工服务</li>\n<li>TCP连接是点对点的（TCP不可能多播）</li>\n</ul>\n<p>TCP连接每一端都有各自的发送缓冲和接收缓存，TCP 可从缓存中取出并放入报文段中发送的数据量受限于<strong>最大报文段长MSS（Maximum Segment Size）</strong>，通常由<strong>最大链路层帧长度（即最大传输单元MTU）</strong>来决定（也就是底层的通信链路决定）</p>\n<p>除去进行通信的两台主机之中维护TCP连接所需的内容，这两台主机之间的路由器交换机并未为该连接分配任何缓存和控制变量</p>\n<h3 id=\"TCP报文格式\"><a href=\"#TCP报文格式\" class=\"headerlink\" title=\"TCP报文格式\"></a>TCP报文格式</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png\" alt=\"\"></p>\n<ul>\n<li>源端口号与目的端口号：用于多路复用/多路分解来自或送至上层应用的数据</li>\n<li>32 比特的序号字段和 32 比特的确认号字段：用来实现可靠数据传输服务</li>\n</ul>\n<blockquote>\n<p>序号字段：即该数据报在所需传送的字节流上的位置，用于实现TCP报文的有序性</p>\n<p>确认号字段：用于标识接收方期待从发送方收到的下一报文段首字节的序号</p>\n</blockquote>\n<ul>\n<li>16 比特的接收窗口字段：用于<em>流量控制</em>，用于指示接受方能够接收的字节数量</li>\n<li>4 比特的首部长度字段：用于指示以 32 比特的字为单位的 TCP 首部长度，一般 TCP 首部的长度就是 20 字节</li>\n<li>6比特标志字段：主要使用以下三个</li>\n</ul>\n<blockquote>\n<p>ACK：用于指示确认字段中的值是有效的（对成功接收报文的确认），ACK=1时有效</p>\n<p>SYN：表示建立一个连接</p>\n<p>​    SYN=1，ACK=0时，表示这是一个<strong>连接请求报文段</strong></p>\n<p>​    SYN=1，ACK=1时，表示对方同意建立连接</p>\n<p>FIN：告知对方关闭连接</p>\n</blockquote>\n<h3 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png\" alt=\"\"></p>\n<h4 id=\"第一次握手\"><a href=\"#第一次握手\" class=\"headerlink\" title=\"第一次握手\"></a>第一次握手</h4><p>发送方创建一个特殊的TCP报文段（<strong>SYN报文段</strong>）：</p>\n<ol>\n<li>不包含任何应用层数据；</li>\n<li>将SYN标志位置为1；</li>\n<li>随机生成一个初始序号（client_isn），并将该序号置于该报文的序号字段（seq）处</li>\n</ol>\n<h4 id=\"第二次握手\"><a href=\"#第二次握手\" class=\"headerlink\" title=\"第二次握手\"></a>第二次握手</h4><p>收到SYN报文段后，接收方会返回允许连接的报文段（SYNACK报文段）：</p>\n<ol>\n<li>SYN标志位置为1，ACK标志位置为1；</li>\n<li>确认号字段（ack）置为client_isn+1；</li>\n<li>接收端生成一个自己的初始序号（server_isn），并将该序号置于自己报文的序号字段（seq）处</li>\n</ol>\n<h4 id=\"第三次握手\"><a href=\"#第三次握手\" class=\"headerlink\" title=\"第三次握手\"></a>第三次握手</h4><ol>\n<li>SYN被置为0，ACK置为1</li>\n<li>确认号字段置为server_isn+1</li>\n<li>seq字段设置为client_isn+1</li>\n</ol>\n<h3 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h3><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png\" alt=\"\"></p>\n<ol>\n<li>主机A发送一个标识了<strong>FIN=1</strong>的数据段，序列号<strong>seq=a</strong>的报文用来释放连接</li>\n<li>主机B回应一个标识了<strong>ACK=1</strong>的数据段，序列号<strong>seq=b</strong>，确认序号<strong>ack=a+1</strong>，作为对主机A的FIN报文的确认</li>\n<li>主机A收到主机B的确认后进入<strong>等待状态</strong>，等待主机B请求释放连接。主机B向主机A发送一个标识了<strong>FIN=1，ACK=1</strong>的数据段，序列号为<strong>seq=b</strong>，确认序列号为<strong>ack=a+1</strong>，用以释放连接</li>\n<li>主机A发送标识了<strong>ACK=1</strong>，序列号<strong>seq=a+1</strong>，确认序号<strong>ack=b+1</strong>，用以确认关闭</li>\n</ol>\n<p>为什么要进行四次挥手：因为关闭连接时，接收端收到FIN报文时，很可能不会立刻关闭连接，因此需要多一次挥手</p>\n<h3 id=\"TCP可靠数据传输\"><a href=\"#TCP可靠数据传输\" class=\"headerlink\" title=\"TCP可靠数据传输\"></a>TCP可靠数据传输</h3><p>主要有超时重传和快速重传：</p>\n<ul>\n<li>超时重传：超时后进行重传，需要设置超时事件（通常4个往返时间RTT）</li>\n<li>快速重传：如果发送者收到了重复的3个ACK报文段（接收方如果发现有丢失（即收到了间隔后的报文段）会重复发送ACK报文段，），说明该报文段所指下一个段丢失，会在超时触发前快速重传该报文段。可以避免超时引起的大时延</li>\n</ul>\n<h3 id=\"TCP流量控制——滑动窗口\"><a href=\"#TCP流量控制——滑动窗口\" class=\"headerlink\" title=\"TCP流量控制——滑动窗口\"></a>TCP流量控制——滑动窗口</h3><blockquote>\n<p>流量控制只要在于消除发送方导致接收方缓存溢出的可能性，流量控制是一个<strong>速度匹配</strong>服务，即发送方的发送速率与接收方应用程序的读速率相匹配</p>\n</blockquote>\n<p>TCP通过维护<strong>接收窗口</strong>来提供流量控制，接收窗口用于告诉发送方，该接收方还有多少可用的缓存空间</p>\n<h2 id=\"拥塞控制原理\"><a href=\"#拥塞控制原理\" class=\"headerlink\" title=\"拥塞控制原理\"></a>拥塞控制原理</h2><h3 id=\"产生拥塞的情况\"><a href=\"#产生拥塞的情况\" class=\"headerlink\" title=\"产生拥塞的情况\"></a>产生拥塞的情况</h3><h4 id=\"情况1\"><a href=\"#情况1\" class=\"headerlink\" title=\"情况1\"></a>情况1</h4><blockquote>\n<p>两个发送方和一个具有无穷大缓存的路由器</p>\n</blockquote>\n<p>当分组到达速率接近<em>链路容量</em>时，分组将经历较长的排队时延</p>\n<h4 id=\"情况2\"><a href=\"#情况2\" class=\"headerlink\" title=\"情况2\"></a>情况2</h4><blockquote>\n<p>两个发送方和一个具有有限缓存的路由器</p>\n</blockquote>\n<p>发送方在遇到大时延时所进行的不必要重传，导致路由器需要利用其链路带宽来转发不必要的分组</p>\n<h4 id=\"情况3\"><a href=\"#情况3\" class=\"headerlink\" title=\"情况3\"></a>情况3</h4><blockquote>\n<p>四个发送方、具有有限缓存的多台路由器和多跳路径</p>\n</blockquote>\n<p>当一个分组沿一条路径被丢弃时每个上游路由器用于转发该分组而使用的传输容量最终被浪费掉了</p>\n<h3 id=\"拥塞控制方法\"><a href=\"#拥塞控制方法\" class=\"headerlink\" title=\"拥塞控制方法\"></a>拥塞控制方法</h3><h4 id=\"端到端控制\"><a href=\"#端到端控制\" class=\"headerlink\" title=\"端到端控制\"></a>端到端控制</h4><blockquote>\n<p>网络层没有为传输层拥塞控制提供显式支持，因此端系统必须对网络行为观察（分组丢失、时延等），来<strong>推断</strong>拥塞的发生</p>\n</blockquote>\n<p>TCP中将报文段的丢失（通过超时或3次冗余确认得知），认为是网络拥塞的一个迹象，之后TCP会相应减小其发送的窗口</p>\n<h4 id=\"网络辅助的拥塞控制\"><a href=\"#网络辅助的拥塞控制\" class=\"headerlink\" title=\"网络辅助的拥塞控制\"></a>网络辅助的拥塞控制</h4><blockquote>\n<p>网络层对是否产生拥塞显式反馈给端系统</p>\n</blockquote>\n<h2 id=\"TCP拥塞控制\"><a href=\"#TCP拥塞控制\" class=\"headerlink\" title=\"TCP拥塞控制\"></a>TCP拥塞控制</h2><blockquote>\n<p>由于IP向端系统提供显式的网络拥塞反馈，因此TCP必须使用端到端的拥塞控制</p>\n<p>拥塞控制的过程是源主机不断试探网络传输能力的过程，如果一个TCP发送方没有感知到拥塞，它就会增加其发送速率；如果感知到拥塞，则降低其发送速率</p>\n</blockquote>\n<p>TCP拥塞控制机制使用一个控制变量，即拥塞窗口（congestion window）来表征网络的拥塞情况</p>\n<p>发送窗口 = min{CongWin, RcvWin}</p>\n<h3 id=\"加性增，乘性减\"><a href=\"#加性增，乘性减\" class=\"headerlink\" title=\"加性增，乘性减\"></a>加性增，乘性减</h3><ul>\n<li>加性增：每个RTT周期CongWin增加1个MSS单位，直到检测到丢包</li>\n<li>乘性减：当检测到丢包时，CongWin减半</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%8A%A0%E6%80%A7%E5%A2%9E%E4%B9%98%E6%80%A7%E5%87%8F.png\" alt=\"\"></p>\n<h3 id=\"慢启动\"><a href=\"#慢启动\" class=\"headerlink\" title=\"慢启动\"></a>慢启动</h3><p>在慢启动阶段，每当一个传输的报文段被确认后，CongWin 的值就增加1个 MSS ，由于TCP 一次发送多个报文段进入网络，从<br>而使发送方的发送速率在经过一个 RTT 时间后成倍增长</p>\n<p>以指数级增长后，直到遇到一个丢包，CongWin减半后开始变为线性增长</p>\n<h3 id=\"对超时事件的反应\"><a href=\"#对超时事件的反应\" class=\"headerlink\" title=\"对超时事件的反应\"></a>对超时事件的反应</h3><ol>\n<li>收到3个冗余ACK后，TCP将拥塞窗口减小一半，然后线性增长</li>\n<li>超时事件发生后，TCP则进入一个慢启动状态</li>\n</ol>\n<p>TCP通过维持一个称为阈值 (Threshold) 的变量来确定慢启动将结束并且拥塞避免将开始的窗口长度</p>\n<p>变量Threshold初始化时被设置为一个很大的值，每当发生一个丢包事件时，Threshold值就会被设置为当前CongWin值的一半</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>慢启动：CongWin &lt; Threshold，CongWin指数增长</li>\n<li>拥塞避免：CongWin &gt; Threshold，CongWin线性增长</li>\n<li>快速恢复：3个冗余ACK，Threshold设置为Threshold/2，CongWin设置为Threshold</li>\n<li>超时处理：timeout事件，Threshold设置为Threshold/2，CongWin设置为1MMS大小</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E8%BF%87%E7%A8%8B.png\" alt=\"\"></p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/145260638\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/145260638</a></p>\n</blockquote>\n"},{"title":"第二章：应用层","date":"2020-09-02T14:46:27.000Z","top":true,"fileName":"no2-application-llayer","_content":"\n## 应用层内容架构\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/%E5%BA%94%E7%94%A8%E5%B1%82%E5%86%85%E5%AE%B9.png)\n\n图源：https://blog.csdn.net/qq_39326472/article/details/88089747\n\n## 应用层协议原理\n\n> 网络核心设备并不在应用层上起作用，而仅在较低层起作用\n>\n> 设计核心思想：**将应用软件限制在端系统**\n\n### 网络应用程序体系结构\n\n#### 客户-服务器体系结构\n\n在该体系结构中，有一个**总是打开**的主机，即服务器，它接收和服务来自其他许多被称为客户的主机请求；值得注意的是，在该体系结构中，**客户之间是不直接通信**的；该服务器具有固定的、周知的地址（IP地址）\n\n#### P2P体系结构\n\n应用程序在间断连接的**主机对之间使用直接通信**，这些主机被称为**对等方**\n\n该体系结构下，对位于数据中心的专用服务器有着最小（或者没有）依赖。\n\nP2P体系结构最引人入胜的特性之一就是它们的**自扩展性（self-scalability）**（即对等方通过为其他对等方传送文件而为原始拥有者分担压力）\n\n\n\n### 进程通信\n\n> 即**运行在不同端系统上的进程**之间的通信，运行在不同端系统上的进程对之间通过计算机网络来实现通信\n\n#### 客户与服务器进程\n\n首先发起通信的进程被标记为客户，在会话开始时等待联系的进程被称为服务器。\n\n#### 进程与计算机网络之间的接口\n\n> 进程通过一个称为**套接字（socket）**的软件接口向网络发送和接收报文。（套接字是同一台主机内应用层与传输层之间的接口）\n\n应用程序开发者可以控制套接字在应用层的一切内容，但是对于运输层的相关部分，几乎没有控制权*（能控制传输层协议的选择，以及设定最大缓存和最大报文长度等几个传输层参数）*\n\n#### 进程寻址（标识接收方的地址）\n\n> 主机地址（**IP地址**） + 目的主机接收进程的标识符（**端口号**）\n\n\n\n### 可供应用程序使用的运输服务\n\n> 传输层协议的特点大致可以从以下这四个方面考量：可靠数据传输、吞吐量、定时和安全性\n\n从可靠数据传输、吞吐量、定时、安全性等四个角度来看传输层提供的服务，传输层无法对吞吐量和定时做出保证。但是，今天的因特网能够为时间敏感的应用提供满意的服务，尽管它并不提供任何定时或者带宽保证\n\n### 因特网提供的传输层服务\n\n#### TCP\n\n* **面向连接的服务**\n* **可靠的数据传输**\n* 提供了**拥塞控制**机制（不一定会给通行双方带来好处，但是会给网络带来整体好处）\n\n#### UDP\n\n> UDP是无连接的也就是说通信之前没有握手；UDP不提供数据的可靠传输；UDP也没有拥塞控制机制。有些应用场景下，UDP协议将带来更多的便利和效率\n\n\n\n## WEB和HTTP\n\n### HTTP概述\n\n> HTTP（HyperText Transfer Protocol）是WEB的应用层协议，它是Web的核心；HTTP有两部分实现，一个客户端程序一个服务器程序；HTTP定义了客户和服务器进行报文交换的方法；\n\nHTTP服务器不存储任何关于该客户的状态信息，因此HTTP被称为**无状态协议**\n\n### 持续连接和非持续连接\n\n持续连接即**多个对象，一次连接**，HTTP既可使用持续连接也可以使用非持续连接。尽管**HTTP在静默情况下使用持续连接**\n\n非持续连接可以理解为**多个对象，多个连接**（比如一个HTML中有10个图片，即需对10个图片均进行一次TCP连接）\n\n### HTTP报文格式：请求报文和响应报文\n\n#### 请求报文\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png)\n\n> 报文第一行：**请求行**（包括：方法字段、URL字段、HTTP版本），其中方法字段可为：GET、POST、PUT、DELETE、HEAD等\n>\n> 后继各行：**首部行**（包含是否在发送完响应报文后关闭TCP连接的Connection；请求的主机地址（该头部信息被Web高速缓存所要求）；浏览器版本；可接受的语言等头部信息；）\n>\n> 空行（用于分隔）\n>\n> **实体行**：该实体体可以在POST方法里传递Form表单内容或者传递其它一些二进制流数据等\n\n#### 响应报文\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png)\n\n> **状态行**：（HTTP版本、状态码、状态信息）\n>\n> **首部行**：（发送日期、服务器类型、上一次修改请求资源的时间、内容的类型）\n>\n> **实体体**：**实体包含请求对象本身（HTML文件等）**。\n\n\n\n### 用户与服务器的交互：Cookie\n\nHTTP是无状态协议，但是Web站点可以使用Cookie技术对用户进行跟踪。Web站点生成一个**唯一标识码**，下次访问该站点时，浏览器就会查询cookie文件并抽取识别码\n\nCookie技术包含4个组件\n\n1. HTTP响应报文里增加一个关于Cookie的首部行；\n2. HTTP请求报文里增加一个关于Cookie的首部行；\n3. 用户端系统保留一个Cookie文件，由浏览器保存维护；\n4. Web站点建立Cookie和用户身份的关联；\n\n\n\n### Web缓存\n\nWeb缓存器（Web cache）也被称为**代理服务器**（proxy server），能够代表初始Web服务器来满足部分HTTP请求的网络实体\n\n当代理服务器收到一个HTTP请求后，它将*检查本地是否缓存过该对象*，如果缓存过该对象，将*检查是否过期*（**条件GET方法**，使用GET方法的时候，增加一个`If-Modified-Since`首部行，其对应的内容是一个时间），如果没有过期，则直接将该对象返回给浏览器；如果本地不存在或者存在已过期，则代理服务器将根据请求报文里的Host首部行以及请求行里的URL字段向初始服务器发出请求，然后将响应对象返回给浏览器并缓存在本地。\n\n因此，**Web缓存器既是服务器又是客户**\n\n#### 使用Web缓存器的原因\n\n1. 大大减少对用户请求的响应时间（规避瓶颈带宽）\n2. 大大减少一个机构的接入链路到因特网的通行量（节省成本）\n\n\n\n## 因特网中的电子邮件\n\n> 因特网电子邮件系统有三个核心组件：**用户代理**、**邮件服务器**、**SMTP**（简单邮件传输协议，Simple Mail Transfer Protocol）\n\n### SMTP（25号端口）\n\n**传输的三个阶段**：握手、传输、关闭连接\n\nSMTP是**持续连接**的，同时由于继承的问题，它限制邮件报文的所有部分只能使用**7比特的ASCII**表示（导致一些多媒体文件在发送方需要编码，接收方则需要解码）\n\n#### 与HTTP对比\n\nHTTP和SMTP都是用TCP协议；持续的HTTP和SMTP都是用持续连接；但是两者也有区别：\n\n* HTTP被设计为一个Pull协议而SMTP被设计为一个Push协议。即用户通过HTTP主动向服务器请求内容，而SMTP则是客户将内容推向服务器端；\n* HTTP传输的数据不一定是用ASCII字符，但是SMTP则只能使用ASCII字符；\n* HTTP将每个对象封装在自己的响应报文里，而SMTP则将所有的报文对象放到一个报文之中；\n\n### 邮件访问协议\n\n需要注意的是，**SMTP是邮件服务器之间发送邮件报文**的协议，并不是用户通过代理和邮件服务器之间通信的协议；用户代理使用邮件访问协议来从邮件服务器上获取邮件信息；目前常用的邮件访问协议有**POP3**（Post Office Protocol-Version 3）、**因特网邮件访问协议**（**IMAP**，Internet Mail Access protocol）和**HTTP**\n\n\n\n## DNS：因特网的目录服务\n\n> DNS（Domain Name System）域名系统，用于处理**主机名和IP地址的转换问题**。\n>\n> **DNS是一个由分层的DNS服务器组成的分布式数据库和一个使得主机可以查询分布式数据库的应用层协议组成**\n>\n> DNS运行在UDP之上，使用53号端口\n\n### DNS提供的服务\n\n\n\n### DNS工作机理概述\n\n> **DNS采用分布式的设计方案**\n>\n> 因为单一的DNS服务器无法解决*单点故障*、*保证通信容量*、*邻近所有的查询主机*和*维护困难*等问题\n\n#### 分布式层次的数据库\n\n为了处理扩展性问题，DNS服务器采用层次式组织，并且分布在全世界范围内；大致来说，存在三种DNS服务器：**根DNS服务器**、**顶级域DNS服务器**和**权威DNS服务器**\n\n* 根DNS服务器：因特网上有13个根DNS服务器\n* 顶级域DNS服务器：负责顶级域名，如com，org，net，edu，gov以及各个国家的顶级域名的转换\n* 权威DNS服务器：如大学、公司等公共可访问的DNS记录\n* **本地DNS服务器（除去上面三个外重要的DNS服务器）**：**邻近**其所在网络的其他主机。当主机发出DNS请求时，该请求被发往本地DNS服务器，它起着代理的作用，并将请求转发到DNS服务器层次结构中。\n\n> 解析`www.baidu.com`的IP地址的过程\n>\n> 1. 返回负责解析顶级域名`com`的服务器的IP地址\n> 2. 顶级域DNS服务器建返回`baidu.com`的权威服务器的IP集合\n> 3. 与这些服务器之一取得联系，获得`www.baidu.com`的IP地址\n\nDNS查询有两种，一种是**递归查询**一种是**迭代查询**；实践中，查询通常满足这样的模式：**从请求主机到本地DNS服务器的查询是递归的，其余查询是迭代的**。\n\n#### DNS缓存\n\n> 当某DNS服务器接收一个DNS回答时，其将映射缓存到本地存储器中\n>\n> **由于缓存，除了少数DNS查询以外，根服务器被绕过了**\n\n\n\n\n\n\n\n\n\n### 参考\n\n《计算机网络——自顶向下方法》\n\nhttps://blog.csdn.net/qq_39326472/article/details/88089747\n\n\n\n","source":"_posts/学习笔记/计算机网络/第二章：应用层.md","raw":"---\ntitle: 第二章：应用层\ndate: 2020-09-02 22:46:27\ntags:\n\t- 计算机网络\ncategories:\n\t- 学习笔记\n\t- 计算机网络\ntop: true\nfileName: no2-application-llayer\n---\n\n## 应用层内容架构\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/%E5%BA%94%E7%94%A8%E5%B1%82%E5%86%85%E5%AE%B9.png)\n\n图源：https://blog.csdn.net/qq_39326472/article/details/88089747\n\n## 应用层协议原理\n\n> 网络核心设备并不在应用层上起作用，而仅在较低层起作用\n>\n> 设计核心思想：**将应用软件限制在端系统**\n\n### 网络应用程序体系结构\n\n#### 客户-服务器体系结构\n\n在该体系结构中，有一个**总是打开**的主机，即服务器，它接收和服务来自其他许多被称为客户的主机请求；值得注意的是，在该体系结构中，**客户之间是不直接通信**的；该服务器具有固定的、周知的地址（IP地址）\n\n#### P2P体系结构\n\n应用程序在间断连接的**主机对之间使用直接通信**，这些主机被称为**对等方**\n\n该体系结构下，对位于数据中心的专用服务器有着最小（或者没有）依赖。\n\nP2P体系结构最引人入胜的特性之一就是它们的**自扩展性（self-scalability）**（即对等方通过为其他对等方传送文件而为原始拥有者分担压力）\n\n\n\n### 进程通信\n\n> 即**运行在不同端系统上的进程**之间的通信，运行在不同端系统上的进程对之间通过计算机网络来实现通信\n\n#### 客户与服务器进程\n\n首先发起通信的进程被标记为客户，在会话开始时等待联系的进程被称为服务器。\n\n#### 进程与计算机网络之间的接口\n\n> 进程通过一个称为**套接字（socket）**的软件接口向网络发送和接收报文。（套接字是同一台主机内应用层与传输层之间的接口）\n\n应用程序开发者可以控制套接字在应用层的一切内容，但是对于运输层的相关部分，几乎没有控制权*（能控制传输层协议的选择，以及设定最大缓存和最大报文长度等几个传输层参数）*\n\n#### 进程寻址（标识接收方的地址）\n\n> 主机地址（**IP地址**） + 目的主机接收进程的标识符（**端口号**）\n\n\n\n### 可供应用程序使用的运输服务\n\n> 传输层协议的特点大致可以从以下这四个方面考量：可靠数据传输、吞吐量、定时和安全性\n\n从可靠数据传输、吞吐量、定时、安全性等四个角度来看传输层提供的服务，传输层无法对吞吐量和定时做出保证。但是，今天的因特网能够为时间敏感的应用提供满意的服务，尽管它并不提供任何定时或者带宽保证\n\n### 因特网提供的传输层服务\n\n#### TCP\n\n* **面向连接的服务**\n* **可靠的数据传输**\n* 提供了**拥塞控制**机制（不一定会给通行双方带来好处，但是会给网络带来整体好处）\n\n#### UDP\n\n> UDP是无连接的也就是说通信之前没有握手；UDP不提供数据的可靠传输；UDP也没有拥塞控制机制。有些应用场景下，UDP协议将带来更多的便利和效率\n\n\n\n## WEB和HTTP\n\n### HTTP概述\n\n> HTTP（HyperText Transfer Protocol）是WEB的应用层协议，它是Web的核心；HTTP有两部分实现，一个客户端程序一个服务器程序；HTTP定义了客户和服务器进行报文交换的方法；\n\nHTTP服务器不存储任何关于该客户的状态信息，因此HTTP被称为**无状态协议**\n\n### 持续连接和非持续连接\n\n持续连接即**多个对象，一次连接**，HTTP既可使用持续连接也可以使用非持续连接。尽管**HTTP在静默情况下使用持续连接**\n\n非持续连接可以理解为**多个对象，多个连接**（比如一个HTML中有10个图片，即需对10个图片均进行一次TCP连接）\n\n### HTTP报文格式：请求报文和响应报文\n\n#### 请求报文\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png)\n\n> 报文第一行：**请求行**（包括：方法字段、URL字段、HTTP版本），其中方法字段可为：GET、POST、PUT、DELETE、HEAD等\n>\n> 后继各行：**首部行**（包含是否在发送完响应报文后关闭TCP连接的Connection；请求的主机地址（该头部信息被Web高速缓存所要求）；浏览器版本；可接受的语言等头部信息；）\n>\n> 空行（用于分隔）\n>\n> **实体行**：该实体体可以在POST方法里传递Form表单内容或者传递其它一些二进制流数据等\n\n#### 响应报文\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png)\n\n> **状态行**：（HTTP版本、状态码、状态信息）\n>\n> **首部行**：（发送日期、服务器类型、上一次修改请求资源的时间、内容的类型）\n>\n> **实体体**：**实体包含请求对象本身（HTML文件等）**。\n\n\n\n### 用户与服务器的交互：Cookie\n\nHTTP是无状态协议，但是Web站点可以使用Cookie技术对用户进行跟踪。Web站点生成一个**唯一标识码**，下次访问该站点时，浏览器就会查询cookie文件并抽取识别码\n\nCookie技术包含4个组件\n\n1. HTTP响应报文里增加一个关于Cookie的首部行；\n2. HTTP请求报文里增加一个关于Cookie的首部行；\n3. 用户端系统保留一个Cookie文件，由浏览器保存维护；\n4. Web站点建立Cookie和用户身份的关联；\n\n\n\n### Web缓存\n\nWeb缓存器（Web cache）也被称为**代理服务器**（proxy server），能够代表初始Web服务器来满足部分HTTP请求的网络实体\n\n当代理服务器收到一个HTTP请求后，它将*检查本地是否缓存过该对象*，如果缓存过该对象，将*检查是否过期*（**条件GET方法**，使用GET方法的时候，增加一个`If-Modified-Since`首部行，其对应的内容是一个时间），如果没有过期，则直接将该对象返回给浏览器；如果本地不存在或者存在已过期，则代理服务器将根据请求报文里的Host首部行以及请求行里的URL字段向初始服务器发出请求，然后将响应对象返回给浏览器并缓存在本地。\n\n因此，**Web缓存器既是服务器又是客户**\n\n#### 使用Web缓存器的原因\n\n1. 大大减少对用户请求的响应时间（规避瓶颈带宽）\n2. 大大减少一个机构的接入链路到因特网的通行量（节省成本）\n\n\n\n## 因特网中的电子邮件\n\n> 因特网电子邮件系统有三个核心组件：**用户代理**、**邮件服务器**、**SMTP**（简单邮件传输协议，Simple Mail Transfer Protocol）\n\n### SMTP（25号端口）\n\n**传输的三个阶段**：握手、传输、关闭连接\n\nSMTP是**持续连接**的，同时由于继承的问题，它限制邮件报文的所有部分只能使用**7比特的ASCII**表示（导致一些多媒体文件在发送方需要编码，接收方则需要解码）\n\n#### 与HTTP对比\n\nHTTP和SMTP都是用TCP协议；持续的HTTP和SMTP都是用持续连接；但是两者也有区别：\n\n* HTTP被设计为一个Pull协议而SMTP被设计为一个Push协议。即用户通过HTTP主动向服务器请求内容，而SMTP则是客户将内容推向服务器端；\n* HTTP传输的数据不一定是用ASCII字符，但是SMTP则只能使用ASCII字符；\n* HTTP将每个对象封装在自己的响应报文里，而SMTP则将所有的报文对象放到一个报文之中；\n\n### 邮件访问协议\n\n需要注意的是，**SMTP是邮件服务器之间发送邮件报文**的协议，并不是用户通过代理和邮件服务器之间通信的协议；用户代理使用邮件访问协议来从邮件服务器上获取邮件信息；目前常用的邮件访问协议有**POP3**（Post Office Protocol-Version 3）、**因特网邮件访问协议**（**IMAP**，Internet Mail Access protocol）和**HTTP**\n\n\n\n## DNS：因特网的目录服务\n\n> DNS（Domain Name System）域名系统，用于处理**主机名和IP地址的转换问题**。\n>\n> **DNS是一个由分层的DNS服务器组成的分布式数据库和一个使得主机可以查询分布式数据库的应用层协议组成**\n>\n> DNS运行在UDP之上，使用53号端口\n\n### DNS提供的服务\n\n\n\n### DNS工作机理概述\n\n> **DNS采用分布式的设计方案**\n>\n> 因为单一的DNS服务器无法解决*单点故障*、*保证通信容量*、*邻近所有的查询主机*和*维护困难*等问题\n\n#### 分布式层次的数据库\n\n为了处理扩展性问题，DNS服务器采用层次式组织，并且分布在全世界范围内；大致来说，存在三种DNS服务器：**根DNS服务器**、**顶级域DNS服务器**和**权威DNS服务器**\n\n* 根DNS服务器：因特网上有13个根DNS服务器\n* 顶级域DNS服务器：负责顶级域名，如com，org，net，edu，gov以及各个国家的顶级域名的转换\n* 权威DNS服务器：如大学、公司等公共可访问的DNS记录\n* **本地DNS服务器（除去上面三个外重要的DNS服务器）**：**邻近**其所在网络的其他主机。当主机发出DNS请求时，该请求被发往本地DNS服务器，它起着代理的作用，并将请求转发到DNS服务器层次结构中。\n\n> 解析`www.baidu.com`的IP地址的过程\n>\n> 1. 返回负责解析顶级域名`com`的服务器的IP地址\n> 2. 顶级域DNS服务器建返回`baidu.com`的权威服务器的IP集合\n> 3. 与这些服务器之一取得联系，获得`www.baidu.com`的IP地址\n\nDNS查询有两种，一种是**递归查询**一种是**迭代查询**；实践中，查询通常满足这样的模式：**从请求主机到本地DNS服务器的查询是递归的，其余查询是迭代的**。\n\n#### DNS缓存\n\n> 当某DNS服务器接收一个DNS回答时，其将映射缓存到本地存储器中\n>\n> **由于缓存，除了少数DNS查询以外，根服务器被绕过了**\n\n\n\n\n\n\n\n\n\n### 参考\n\n《计算机网络——自顶向下方法》\n\nhttps://blog.csdn.net/qq_39326472/article/details/88089747\n\n\n\n","slug":"学习笔记/计算机网络/第二章：应用层","published":1,"updated":"2021-01-31T16:05:06.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpb00078sjs9nzh98i7","content":"<h2 id=\"应用层内容架构\"><a href=\"#应用层内容架构\" class=\"headerlink\" title=\"应用层内容架构\"></a>应用层内容架构</h2><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/%E5%BA%94%E7%94%A8%E5%B1%82%E5%86%85%E5%AE%B9.png\" alt=\"\"></p>\n<p>图源：<a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n<h2 id=\"应用层协议原理\"><a href=\"#应用层协议原理\" class=\"headerlink\" title=\"应用层协议原理\"></a>应用层协议原理</h2><blockquote>\n<p>网络核心设备并不在应用层上起作用，而仅在较低层起作用</p>\n<p>设计核心思想：<strong>将应用软件限制在端系统</strong></p>\n</blockquote>\n<h3 id=\"网络应用程序体系结构\"><a href=\"#网络应用程序体系结构\" class=\"headerlink\" title=\"网络应用程序体系结构\"></a>网络应用程序体系结构</h3><h4 id=\"客户-服务器体系结构\"><a href=\"#客户-服务器体系结构\" class=\"headerlink\" title=\"客户-服务器体系结构\"></a>客户-服务器体系结构</h4><p>在该体系结构中，有一个<strong>总是打开</strong>的主机，即服务器，它接收和服务来自其他许多被称为客户的主机请求；值得注意的是，在该体系结构中，<strong>客户之间是不直接通信</strong>的；该服务器具有固定的、周知的地址（IP地址）</p>\n<h4 id=\"P2P体系结构\"><a href=\"#P2P体系结构\" class=\"headerlink\" title=\"P2P体系结构\"></a>P2P体系结构</h4><p>应用程序在间断连接的<strong>主机对之间使用直接通信</strong>，这些主机被称为<strong>对等方</strong></p>\n<p>该体系结构下，对位于数据中心的专用服务器有着最小（或者没有）依赖。</p>\n<p>P2P体系结构最引人入胜的特性之一就是它们的<strong>自扩展性（self-scalability）</strong>（即对等方通过为其他对等方传送文件而为原始拥有者分担压力）</p>\n<h3 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h3><blockquote>\n<p>即<strong>运行在不同端系统上的进程</strong>之间的通信，运行在不同端系统上的进程对之间通过计算机网络来实现通信</p>\n</blockquote>\n<h4 id=\"客户与服务器进程\"><a href=\"#客户与服务器进程\" class=\"headerlink\" title=\"客户与服务器进程\"></a>客户与服务器进程</h4><p>首先发起通信的进程被标记为客户，在会话开始时等待联系的进程被称为服务器。</p>\n<h4 id=\"进程与计算机网络之间的接口\"><a href=\"#进程与计算机网络之间的接口\" class=\"headerlink\" title=\"进程与计算机网络之间的接口\"></a>进程与计算机网络之间的接口</h4><blockquote>\n<p>进程通过一个称为<strong>套接字（socket）</strong>的软件接口向网络发送和接收报文。（套接字是同一台主机内应用层与传输层之间的接口）</p>\n</blockquote>\n<p>应用程序开发者可以控制套接字在应用层的一切内容，但是对于运输层的相关部分，几乎没有控制权<em>（能控制传输层协议的选择，以及设定最大缓存和最大报文长度等几个传输层参数）</em></p>\n<h4 id=\"进程寻址（标识接收方的地址）\"><a href=\"#进程寻址（标识接收方的地址）\" class=\"headerlink\" title=\"进程寻址（标识接收方的地址）\"></a>进程寻址（标识接收方的地址）</h4><blockquote>\n<p>主机地址（<strong>IP地址</strong>） + 目的主机接收进程的标识符（<strong>端口号</strong>）</p>\n</blockquote>\n<h3 id=\"可供应用程序使用的运输服务\"><a href=\"#可供应用程序使用的运输服务\" class=\"headerlink\" title=\"可供应用程序使用的运输服务\"></a>可供应用程序使用的运输服务</h3><blockquote>\n<p>传输层协议的特点大致可以从以下这四个方面考量：可靠数据传输、吞吐量、定时和安全性</p>\n</blockquote>\n<p>从可靠数据传输、吞吐量、定时、安全性等四个角度来看传输层提供的服务，传输层无法对吞吐量和定时做出保证。但是，今天的因特网能够为时间敏感的应用提供满意的服务，尽管它并不提供任何定时或者带宽保证</p>\n<h3 id=\"因特网提供的传输层服务\"><a href=\"#因特网提供的传输层服务\" class=\"headerlink\" title=\"因特网提供的传输层服务\"></a>因特网提供的传输层服务</h3><h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><ul>\n<li><strong>面向连接的服务</strong></li>\n<li><strong>可靠的数据传输</strong></li>\n<li>提供了<strong>拥塞控制</strong>机制（不一定会给通行双方带来好处，但是会给网络带来整体好处）</li>\n</ul>\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><blockquote>\n<p>UDP是无连接的也就是说通信之前没有握手；UDP不提供数据的可靠传输；UDP也没有拥塞控制机制。有些应用场景下，UDP协议将带来更多的便利和效率</p>\n</blockquote>\n<h2 id=\"WEB和HTTP\"><a href=\"#WEB和HTTP\" class=\"headerlink\" title=\"WEB和HTTP\"></a>WEB和HTTP</h2><h3 id=\"HTTP概述\"><a href=\"#HTTP概述\" class=\"headerlink\" title=\"HTTP概述\"></a>HTTP概述</h3><blockquote>\n<p>HTTP（HyperText Transfer Protocol）是WEB的应用层协议，它是Web的核心；HTTP有两部分实现，一个客户端程序一个服务器程序；HTTP定义了客户和服务器进行报文交换的方法；</p>\n</blockquote>\n<p>HTTP服务器不存储任何关于该客户的状态信息，因此HTTP被称为<strong>无状态协议</strong></p>\n<h3 id=\"持续连接和非持续连接\"><a href=\"#持续连接和非持续连接\" class=\"headerlink\" title=\"持续连接和非持续连接\"></a>持续连接和非持续连接</h3><p>持续连接即<strong>多个对象，一次连接</strong>，HTTP既可使用持续连接也可以使用非持续连接。尽管<strong>HTTP在静默情况下使用持续连接</strong></p>\n<p>非持续连接可以理解为<strong>多个对象，多个连接</strong>（比如一个HTML中有10个图片，即需对10个图片均进行一次TCP连接）</p>\n<h3 id=\"HTTP报文格式：请求报文和响应报文\"><a href=\"#HTTP报文格式：请求报文和响应报文\" class=\"headerlink\" title=\"HTTP报文格式：请求报文和响应报文\"></a>HTTP报文格式：请求报文和响应报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png\" alt=\"\"></p>\n<blockquote>\n<p>报文第一行：<strong>请求行</strong>（包括：方法字段、URL字段、HTTP版本），其中方法字段可为：GET、POST、PUT、DELETE、HEAD等</p>\n<p>后继各行：<strong>首部行</strong>（包含是否在发送完响应报文后关闭TCP连接的Connection；请求的主机地址（该头部信息被Web高速缓存所要求）；浏览器版本；可接受的语言等头部信息；）</p>\n<p>空行（用于分隔）</p>\n<p><strong>实体行</strong>：该实体体可以在POST方法里传递Form表单内容或者传递其它一些二进制流数据等</p>\n</blockquote>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>状态行</strong>：（HTTP版本、状态码、状态信息）</p>\n<p><strong>首部行</strong>：（发送日期、服务器类型、上一次修改请求资源的时间、内容的类型）</p>\n<p><strong>实体体</strong>：<strong>实体包含请求对象本身（HTML文件等）</strong>。</p>\n</blockquote>\n<h3 id=\"用户与服务器的交互：Cookie\"><a href=\"#用户与服务器的交互：Cookie\" class=\"headerlink\" title=\"用户与服务器的交互：Cookie\"></a>用户与服务器的交互：Cookie</h3><p>HTTP是无状态协议，但是Web站点可以使用Cookie技术对用户进行跟踪。Web站点生成一个<strong>唯一标识码</strong>，下次访问该站点时，浏览器就会查询cookie文件并抽取识别码</p>\n<p>Cookie技术包含4个组件</p>\n<ol>\n<li>HTTP响应报文里增加一个关于Cookie的首部行；</li>\n<li>HTTP请求报文里增加一个关于Cookie的首部行；</li>\n<li>用户端系统保留一个Cookie文件，由浏览器保存维护；</li>\n<li>Web站点建立Cookie和用户身份的关联；</li>\n</ol>\n<h3 id=\"Web缓存\"><a href=\"#Web缓存\" class=\"headerlink\" title=\"Web缓存\"></a>Web缓存</h3><p>Web缓存器（Web cache）也被称为<strong>代理服务器</strong>（proxy server），能够代表初始Web服务器来满足部分HTTP请求的网络实体</p>\n<p>当代理服务器收到一个HTTP请求后，它将<em>检查本地是否缓存过该对象</em>，如果缓存过该对象，将<em>检查是否过期</em>（<strong>条件GET方法</strong>，使用GET方法的时候，增加一个<code>If-Modified-Since</code>首部行，其对应的内容是一个时间），如果没有过期，则直接将该对象返回给浏览器；如果本地不存在或者存在已过期，则代理服务器将根据请求报文里的Host首部行以及请求行里的URL字段向初始服务器发出请求，然后将响应对象返回给浏览器并缓存在本地。</p>\n<p>因此，<strong>Web缓存器既是服务器又是客户</strong></p>\n<h4 id=\"使用Web缓存器的原因\"><a href=\"#使用Web缓存器的原因\" class=\"headerlink\" title=\"使用Web缓存器的原因\"></a>使用Web缓存器的原因</h4><ol>\n<li>大大减少对用户请求的响应时间（规避瓶颈带宽）</li>\n<li>大大减少一个机构的接入链路到因特网的通行量（节省成本）</li>\n</ol>\n<h2 id=\"因特网中的电子邮件\"><a href=\"#因特网中的电子邮件\" class=\"headerlink\" title=\"因特网中的电子邮件\"></a>因特网中的电子邮件</h2><blockquote>\n<p>因特网电子邮件系统有三个核心组件：<strong>用户代理</strong>、<strong>邮件服务器</strong>、<strong>SMTP</strong>（简单邮件传输协议，Simple Mail Transfer Protocol）</p>\n</blockquote>\n<h3 id=\"SMTP（25号端口）\"><a href=\"#SMTP（25号端口）\" class=\"headerlink\" title=\"SMTP（25号端口）\"></a>SMTP（25号端口）</h3><p><strong>传输的三个阶段</strong>：握手、传输、关闭连接</p>\n<p>SMTP是<strong>持续连接</strong>的，同时由于继承的问题，它限制邮件报文的所有部分只能使用<strong>7比特的ASCII</strong>表示（导致一些多媒体文件在发送方需要编码，接收方则需要解码）</p>\n<h4 id=\"与HTTP对比\"><a href=\"#与HTTP对比\" class=\"headerlink\" title=\"与HTTP对比\"></a>与HTTP对比</h4><p>HTTP和SMTP都是用TCP协议；持续的HTTP和SMTP都是用持续连接；但是两者也有区别：</p>\n<ul>\n<li>HTTP被设计为一个Pull协议而SMTP被设计为一个Push协议。即用户通过HTTP主动向服务器请求内容，而SMTP则是客户将内容推向服务器端；</li>\n<li>HTTP传输的数据不一定是用ASCII字符，但是SMTP则只能使用ASCII字符；</li>\n<li>HTTP将每个对象封装在自己的响应报文里，而SMTP则将所有的报文对象放到一个报文之中；</li>\n</ul>\n<h3 id=\"邮件访问协议\"><a href=\"#邮件访问协议\" class=\"headerlink\" title=\"邮件访问协议\"></a>邮件访问协议</h3><p>需要注意的是，<strong>SMTP是邮件服务器之间发送邮件报文</strong>的协议，并不是用户通过代理和邮件服务器之间通信的协议；用户代理使用邮件访问协议来从邮件服务器上获取邮件信息；目前常用的邮件访问协议有<strong>POP3</strong>（Post Office Protocol-Version 3）、<strong>因特网邮件访问协议</strong>（<strong>IMAP</strong>，Internet Mail Access protocol）和<strong>HTTP</strong></p>\n<h2 id=\"DNS：因特网的目录服务\"><a href=\"#DNS：因特网的目录服务\" class=\"headerlink\" title=\"DNS：因特网的目录服务\"></a>DNS：因特网的目录服务</h2><blockquote>\n<p>DNS（Domain Name System）域名系统，用于处理<strong>主机名和IP地址的转换问题</strong>。</p>\n<p><strong>DNS是一个由分层的DNS服务器组成的分布式数据库和一个使得主机可以查询分布式数据库的应用层协议组成</strong></p>\n<p>DNS运行在UDP之上，使用53号端口</p>\n</blockquote>\n<h3 id=\"DNS提供的服务\"><a href=\"#DNS提供的服务\" class=\"headerlink\" title=\"DNS提供的服务\"></a>DNS提供的服务</h3><h3 id=\"DNS工作机理概述\"><a href=\"#DNS工作机理概述\" class=\"headerlink\" title=\"DNS工作机理概述\"></a>DNS工作机理概述</h3><blockquote>\n<p><strong>DNS采用分布式的设计方案</strong></p>\n<p>因为单一的DNS服务器无法解决<em>单点故障</em>、<em>保证通信容量</em>、<em>邻近所有的查询主机</em>和<em>维护困难</em>等问题</p>\n</blockquote>\n<h4 id=\"分布式层次的数据库\"><a href=\"#分布式层次的数据库\" class=\"headerlink\" title=\"分布式层次的数据库\"></a>分布式层次的数据库</h4><p>为了处理扩展性问题，DNS服务器采用层次式组织，并且分布在全世界范围内；大致来说，存在三种DNS服务器：<strong>根DNS服务器</strong>、<strong>顶级域DNS服务器</strong>和<strong>权威DNS服务器</strong></p>\n<ul>\n<li>根DNS服务器：因特网上有13个根DNS服务器</li>\n<li>顶级域DNS服务器：负责顶级域名，如com，org，net，edu，gov以及各个国家的顶级域名的转换</li>\n<li>权威DNS服务器：如大学、公司等公共可访问的DNS记录</li>\n<li><strong>本地DNS服务器（除去上面三个外重要的DNS服务器）</strong>：<strong>邻近</strong>其所在网络的其他主机。当主机发出DNS请求时，该请求被发往本地DNS服务器，它起着代理的作用，并将请求转发到DNS服务器层次结构中。</li>\n</ul>\n<blockquote>\n<p>解析<code>www.baidu.com</code>的IP地址的过程</p>\n<ol>\n<li>返回负责解析顶级域名<code>com</code>的服务器的IP地址</li>\n<li>顶级域DNS服务器建返回<code>baidu.com</code>的权威服务器的IP集合</li>\n<li>与这些服务器之一取得联系，获得<code>www.baidu.com</code>的IP地址</li>\n</ol>\n</blockquote>\n<p>DNS查询有两种，一种是<strong>递归查询</strong>一种是<strong>迭代查询</strong>；实践中，查询通常满足这样的模式：<strong>从请求主机到本地DNS服务器的查询是递归的，其余查询是迭代的</strong>。</p>\n<h4 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h4><blockquote>\n<p>当某DNS服务器接收一个DNS回答时，其将映射缓存到本地存储器中</p>\n<p><strong>由于缓存，除了少数DNS查询以外，根服务器被绕过了</strong></p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《计算机网络——自顶向下方法》</p>\n<p><a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"应用层内容架构\"><a href=\"#应用层内容架构\" class=\"headerlink\" title=\"应用层内容架构\"></a>应用层内容架构</h2><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/%E5%BA%94%E7%94%A8%E5%B1%82%E5%86%85%E5%AE%B9.png\" alt=\"\"></p>\n<p>图源：<a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n<h2 id=\"应用层协议原理\"><a href=\"#应用层协议原理\" class=\"headerlink\" title=\"应用层协议原理\"></a>应用层协议原理</h2><blockquote>\n<p>网络核心设备并不在应用层上起作用，而仅在较低层起作用</p>\n<p>设计核心思想：<strong>将应用软件限制在端系统</strong></p>\n</blockquote>\n<h3 id=\"网络应用程序体系结构\"><a href=\"#网络应用程序体系结构\" class=\"headerlink\" title=\"网络应用程序体系结构\"></a>网络应用程序体系结构</h3><h4 id=\"客户-服务器体系结构\"><a href=\"#客户-服务器体系结构\" class=\"headerlink\" title=\"客户-服务器体系结构\"></a>客户-服务器体系结构</h4><p>在该体系结构中，有一个<strong>总是打开</strong>的主机，即服务器，它接收和服务来自其他许多被称为客户的主机请求；值得注意的是，在该体系结构中，<strong>客户之间是不直接通信</strong>的；该服务器具有固定的、周知的地址（IP地址）</p>\n<h4 id=\"P2P体系结构\"><a href=\"#P2P体系结构\" class=\"headerlink\" title=\"P2P体系结构\"></a>P2P体系结构</h4><p>应用程序在间断连接的<strong>主机对之间使用直接通信</strong>，这些主机被称为<strong>对等方</strong></p>\n<p>该体系结构下，对位于数据中心的专用服务器有着最小（或者没有）依赖。</p>\n<p>P2P体系结构最引人入胜的特性之一就是它们的<strong>自扩展性（self-scalability）</strong>（即对等方通过为其他对等方传送文件而为原始拥有者分担压力）</p>\n<h3 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h3><blockquote>\n<p>即<strong>运行在不同端系统上的进程</strong>之间的通信，运行在不同端系统上的进程对之间通过计算机网络来实现通信</p>\n</blockquote>\n<h4 id=\"客户与服务器进程\"><a href=\"#客户与服务器进程\" class=\"headerlink\" title=\"客户与服务器进程\"></a>客户与服务器进程</h4><p>首先发起通信的进程被标记为客户，在会话开始时等待联系的进程被称为服务器。</p>\n<h4 id=\"进程与计算机网络之间的接口\"><a href=\"#进程与计算机网络之间的接口\" class=\"headerlink\" title=\"进程与计算机网络之间的接口\"></a>进程与计算机网络之间的接口</h4><blockquote>\n<p>进程通过一个称为<strong>套接字（socket）</strong>的软件接口向网络发送和接收报文。（套接字是同一台主机内应用层与传输层之间的接口）</p>\n</blockquote>\n<p>应用程序开发者可以控制套接字在应用层的一切内容，但是对于运输层的相关部分，几乎没有控制权<em>（能控制传输层协议的选择，以及设定最大缓存和最大报文长度等几个传输层参数）</em></p>\n<h4 id=\"进程寻址（标识接收方的地址）\"><a href=\"#进程寻址（标识接收方的地址）\" class=\"headerlink\" title=\"进程寻址（标识接收方的地址）\"></a>进程寻址（标识接收方的地址）</h4><blockquote>\n<p>主机地址（<strong>IP地址</strong>） + 目的主机接收进程的标识符（<strong>端口号</strong>）</p>\n</blockquote>\n<h3 id=\"可供应用程序使用的运输服务\"><a href=\"#可供应用程序使用的运输服务\" class=\"headerlink\" title=\"可供应用程序使用的运输服务\"></a>可供应用程序使用的运输服务</h3><blockquote>\n<p>传输层协议的特点大致可以从以下这四个方面考量：可靠数据传输、吞吐量、定时和安全性</p>\n</blockquote>\n<p>从可靠数据传输、吞吐量、定时、安全性等四个角度来看传输层提供的服务，传输层无法对吞吐量和定时做出保证。但是，今天的因特网能够为时间敏感的应用提供满意的服务，尽管它并不提供任何定时或者带宽保证</p>\n<h3 id=\"因特网提供的传输层服务\"><a href=\"#因特网提供的传输层服务\" class=\"headerlink\" title=\"因特网提供的传输层服务\"></a>因特网提供的传输层服务</h3><h4 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h4><ul>\n<li><strong>面向连接的服务</strong></li>\n<li><strong>可靠的数据传输</strong></li>\n<li>提供了<strong>拥塞控制</strong>机制（不一定会给通行双方带来好处，但是会给网络带来整体好处）</li>\n</ul>\n<h4 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h4><blockquote>\n<p>UDP是无连接的也就是说通信之前没有握手；UDP不提供数据的可靠传输；UDP也没有拥塞控制机制。有些应用场景下，UDP协议将带来更多的便利和效率</p>\n</blockquote>\n<h2 id=\"WEB和HTTP\"><a href=\"#WEB和HTTP\" class=\"headerlink\" title=\"WEB和HTTP\"></a>WEB和HTTP</h2><h3 id=\"HTTP概述\"><a href=\"#HTTP概述\" class=\"headerlink\" title=\"HTTP概述\"></a>HTTP概述</h3><blockquote>\n<p>HTTP（HyperText Transfer Protocol）是WEB的应用层协议，它是Web的核心；HTTP有两部分实现，一个客户端程序一个服务器程序；HTTP定义了客户和服务器进行报文交换的方法；</p>\n</blockquote>\n<p>HTTP服务器不存储任何关于该客户的状态信息，因此HTTP被称为<strong>无状态协议</strong></p>\n<h3 id=\"持续连接和非持续连接\"><a href=\"#持续连接和非持续连接\" class=\"headerlink\" title=\"持续连接和非持续连接\"></a>持续连接和非持续连接</h3><p>持续连接即<strong>多个对象，一次连接</strong>，HTTP既可使用持续连接也可以使用非持续连接。尽管<strong>HTTP在静默情况下使用持续连接</strong></p>\n<p>非持续连接可以理解为<strong>多个对象，多个连接</strong>（比如一个HTML中有10个图片，即需对10个图片均进行一次TCP连接）</p>\n<h3 id=\"HTTP报文格式：请求报文和响应报文\"><a href=\"#HTTP报文格式：请求报文和响应报文\" class=\"headerlink\" title=\"HTTP报文格式：请求报文和响应报文\"></a>HTTP报文格式：请求报文和响应报文</h3><h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png\" alt=\"\"></p>\n<blockquote>\n<p>报文第一行：<strong>请求行</strong>（包括：方法字段、URL字段、HTTP版本），其中方法字段可为：GET、POST、PUT、DELETE、HEAD等</p>\n<p>后继各行：<strong>首部行</strong>（包含是否在发送完响应报文后关闭TCP连接的Connection；请求的主机地址（该头部信息被Web高速缓存所要求）；浏览器版本；可接受的语言等头部信息；）</p>\n<p>空行（用于分隔）</p>\n<p><strong>实体行</strong>：该实体体可以在POST方法里传递Form表单内容或者传递其它一些二进制流数据等</p>\n</blockquote>\n<h4 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h4><p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>状态行</strong>：（HTTP版本、状态码、状态信息）</p>\n<p><strong>首部行</strong>：（发送日期、服务器类型、上一次修改请求资源的时间、内容的类型）</p>\n<p><strong>实体体</strong>：<strong>实体包含请求对象本身（HTML文件等）</strong>。</p>\n</blockquote>\n<h3 id=\"用户与服务器的交互：Cookie\"><a href=\"#用户与服务器的交互：Cookie\" class=\"headerlink\" title=\"用户与服务器的交互：Cookie\"></a>用户与服务器的交互：Cookie</h3><p>HTTP是无状态协议，但是Web站点可以使用Cookie技术对用户进行跟踪。Web站点生成一个<strong>唯一标识码</strong>，下次访问该站点时，浏览器就会查询cookie文件并抽取识别码</p>\n<p>Cookie技术包含4个组件</p>\n<ol>\n<li>HTTP响应报文里增加一个关于Cookie的首部行；</li>\n<li>HTTP请求报文里增加一个关于Cookie的首部行；</li>\n<li>用户端系统保留一个Cookie文件，由浏览器保存维护；</li>\n<li>Web站点建立Cookie和用户身份的关联；</li>\n</ol>\n<h3 id=\"Web缓存\"><a href=\"#Web缓存\" class=\"headerlink\" title=\"Web缓存\"></a>Web缓存</h3><p>Web缓存器（Web cache）也被称为<strong>代理服务器</strong>（proxy server），能够代表初始Web服务器来满足部分HTTP请求的网络实体</p>\n<p>当代理服务器收到一个HTTP请求后，它将<em>检查本地是否缓存过该对象</em>，如果缓存过该对象，将<em>检查是否过期</em>（<strong>条件GET方法</strong>，使用GET方法的时候，增加一个<code>If-Modified-Since</code>首部行，其对应的内容是一个时间），如果没有过期，则直接将该对象返回给浏览器；如果本地不存在或者存在已过期，则代理服务器将根据请求报文里的Host首部行以及请求行里的URL字段向初始服务器发出请求，然后将响应对象返回给浏览器并缓存在本地。</p>\n<p>因此，<strong>Web缓存器既是服务器又是客户</strong></p>\n<h4 id=\"使用Web缓存器的原因\"><a href=\"#使用Web缓存器的原因\" class=\"headerlink\" title=\"使用Web缓存器的原因\"></a>使用Web缓存器的原因</h4><ol>\n<li>大大减少对用户请求的响应时间（规避瓶颈带宽）</li>\n<li>大大减少一个机构的接入链路到因特网的通行量（节省成本）</li>\n</ol>\n<h2 id=\"因特网中的电子邮件\"><a href=\"#因特网中的电子邮件\" class=\"headerlink\" title=\"因特网中的电子邮件\"></a>因特网中的电子邮件</h2><blockquote>\n<p>因特网电子邮件系统有三个核心组件：<strong>用户代理</strong>、<strong>邮件服务器</strong>、<strong>SMTP</strong>（简单邮件传输协议，Simple Mail Transfer Protocol）</p>\n</blockquote>\n<h3 id=\"SMTP（25号端口）\"><a href=\"#SMTP（25号端口）\" class=\"headerlink\" title=\"SMTP（25号端口）\"></a>SMTP（25号端口）</h3><p><strong>传输的三个阶段</strong>：握手、传输、关闭连接</p>\n<p>SMTP是<strong>持续连接</strong>的，同时由于继承的问题，它限制邮件报文的所有部分只能使用<strong>7比特的ASCII</strong>表示（导致一些多媒体文件在发送方需要编码，接收方则需要解码）</p>\n<h4 id=\"与HTTP对比\"><a href=\"#与HTTP对比\" class=\"headerlink\" title=\"与HTTP对比\"></a>与HTTP对比</h4><p>HTTP和SMTP都是用TCP协议；持续的HTTP和SMTP都是用持续连接；但是两者也有区别：</p>\n<ul>\n<li>HTTP被设计为一个Pull协议而SMTP被设计为一个Push协议。即用户通过HTTP主动向服务器请求内容，而SMTP则是客户将内容推向服务器端；</li>\n<li>HTTP传输的数据不一定是用ASCII字符，但是SMTP则只能使用ASCII字符；</li>\n<li>HTTP将每个对象封装在自己的响应报文里，而SMTP则将所有的报文对象放到一个报文之中；</li>\n</ul>\n<h3 id=\"邮件访问协议\"><a href=\"#邮件访问协议\" class=\"headerlink\" title=\"邮件访问协议\"></a>邮件访问协议</h3><p>需要注意的是，<strong>SMTP是邮件服务器之间发送邮件报文</strong>的协议，并不是用户通过代理和邮件服务器之间通信的协议；用户代理使用邮件访问协议来从邮件服务器上获取邮件信息；目前常用的邮件访问协议有<strong>POP3</strong>（Post Office Protocol-Version 3）、<strong>因特网邮件访问协议</strong>（<strong>IMAP</strong>，Internet Mail Access protocol）和<strong>HTTP</strong></p>\n<h2 id=\"DNS：因特网的目录服务\"><a href=\"#DNS：因特网的目录服务\" class=\"headerlink\" title=\"DNS：因特网的目录服务\"></a>DNS：因特网的目录服务</h2><blockquote>\n<p>DNS（Domain Name System）域名系统，用于处理<strong>主机名和IP地址的转换问题</strong>。</p>\n<p><strong>DNS是一个由分层的DNS服务器组成的分布式数据库和一个使得主机可以查询分布式数据库的应用层协议组成</strong></p>\n<p>DNS运行在UDP之上，使用53号端口</p>\n</blockquote>\n<h3 id=\"DNS提供的服务\"><a href=\"#DNS提供的服务\" class=\"headerlink\" title=\"DNS提供的服务\"></a>DNS提供的服务</h3><h3 id=\"DNS工作机理概述\"><a href=\"#DNS工作机理概述\" class=\"headerlink\" title=\"DNS工作机理概述\"></a>DNS工作机理概述</h3><blockquote>\n<p><strong>DNS采用分布式的设计方案</strong></p>\n<p>因为单一的DNS服务器无法解决<em>单点故障</em>、<em>保证通信容量</em>、<em>邻近所有的查询主机</em>和<em>维护困难</em>等问题</p>\n</blockquote>\n<h4 id=\"分布式层次的数据库\"><a href=\"#分布式层次的数据库\" class=\"headerlink\" title=\"分布式层次的数据库\"></a>分布式层次的数据库</h4><p>为了处理扩展性问题，DNS服务器采用层次式组织，并且分布在全世界范围内；大致来说，存在三种DNS服务器：<strong>根DNS服务器</strong>、<strong>顶级域DNS服务器</strong>和<strong>权威DNS服务器</strong></p>\n<ul>\n<li>根DNS服务器：因特网上有13个根DNS服务器</li>\n<li>顶级域DNS服务器：负责顶级域名，如com，org，net，edu，gov以及各个国家的顶级域名的转换</li>\n<li>权威DNS服务器：如大学、公司等公共可访问的DNS记录</li>\n<li><strong>本地DNS服务器（除去上面三个外重要的DNS服务器）</strong>：<strong>邻近</strong>其所在网络的其他主机。当主机发出DNS请求时，该请求被发往本地DNS服务器，它起着代理的作用，并将请求转发到DNS服务器层次结构中。</li>\n</ul>\n<blockquote>\n<p>解析<code>www.baidu.com</code>的IP地址的过程</p>\n<ol>\n<li>返回负责解析顶级域名<code>com</code>的服务器的IP地址</li>\n<li>顶级域DNS服务器建返回<code>baidu.com</code>的权威服务器的IP集合</li>\n<li>与这些服务器之一取得联系，获得<code>www.baidu.com</code>的IP地址</li>\n</ol>\n</blockquote>\n<p>DNS查询有两种，一种是<strong>递归查询</strong>一种是<strong>迭代查询</strong>；实践中，查询通常满足这样的模式：<strong>从请求主机到本地DNS服务器的查询是递归的，其余查询是迭代的</strong>。</p>\n<h4 id=\"DNS缓存\"><a href=\"#DNS缓存\" class=\"headerlink\" title=\"DNS缓存\"></a>DNS缓存</h4><blockquote>\n<p>当某DNS服务器接收一个DNS回答时，其将映射缓存到本地存储器中</p>\n<p><strong>由于缓存，除了少数DNS查询以外，根服务器被绕过了</strong></p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《计算机网络——自顶向下方法》</p>\n<p><a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n"},{"title":"进程与线程","date":"2021-02-26T07:45:58.000Z","fileName":"process-thread","_content":"\n# 进程\n\n进程是程序的一次执行过程，是一个程序及其数据在处理机上顺序执行时所发生的活动\n\n## 进程模型\n\n\n\n## 进程的状态与转换\n\n### 进程的状态\n\n> 进程有三个基本状态：运行、就绪、阻塞/等待，此外还有创建状态和终止状态\n\n* 运行状态(Running)：占有CPU，并在CPU上运行\n* 就绪状态(Ready)：进程已经具备一切运行条件，除了没有空闲CPU，导致暂时不能运行\n* 阻塞状态(Waiting/Blocked)：等待某一事件或资源而暂时不能运行，比如等待操作系统分配打印机、等待磁盘读写\n* 创建状态(New)：操作系统为该进程分配所需内存等系统资源，为其创建、初始化PCB(分配PID等等)\n* 终止状态(Terminated)：进程运行结束，或者出现Bug导致无法继续执行，操作系统需要撤销进程 完成资源回收，撤销PCB\n\n### 进程状态转换\n\n\n\n\n\n# 线程\n\n\n\n# 进程间通信\n\n\n\n# 调度\n\n\n\n\n\n参考：\n\n> 《现代操作系统》\n>\n> https://mubu.com/doc/Cd-Y4YOfkh\n\n","source":"_posts/学习笔记/操作系统/进程与线程.md","raw":"---\ntitle: 进程与线程\ndate: 2021-02-26 15:45:58\ntags:\n\t- 操作系统\ncategories:\n\t- 学习笔记\n\t- 操作系统\nfileName: process-thread\n---\n\n# 进程\n\n进程是程序的一次执行过程，是一个程序及其数据在处理机上顺序执行时所发生的活动\n\n## 进程模型\n\n\n\n## 进程的状态与转换\n\n### 进程的状态\n\n> 进程有三个基本状态：运行、就绪、阻塞/等待，此外还有创建状态和终止状态\n\n* 运行状态(Running)：占有CPU，并在CPU上运行\n* 就绪状态(Ready)：进程已经具备一切运行条件，除了没有空闲CPU，导致暂时不能运行\n* 阻塞状态(Waiting/Blocked)：等待某一事件或资源而暂时不能运行，比如等待操作系统分配打印机、等待磁盘读写\n* 创建状态(New)：操作系统为该进程分配所需内存等系统资源，为其创建、初始化PCB(分配PID等等)\n* 终止状态(Terminated)：进程运行结束，或者出现Bug导致无法继续执行，操作系统需要撤销进程 完成资源回收，撤销PCB\n\n### 进程状态转换\n\n\n\n\n\n# 线程\n\n\n\n# 进程间通信\n\n\n\n# 调度\n\n\n\n\n\n参考：\n\n> 《现代操作系统》\n>\n> https://mubu.com/doc/Cd-Y4YOfkh\n\n","slug":"学习笔记/操作系统/进程与线程","published":1,"updated":"2021-02-28T15:31:39.890Z","_id":"cklp5nhpd00098sjsb9nqc4r7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>进程是程序的一次执行过程，是一个程序及其数据在处理机上顺序执行时所发生的活动</p>\n<h2 id=\"进程模型\"><a href=\"#进程模型\" class=\"headerlink\" title=\"进程模型\"></a>进程模型</h2><h2 id=\"进程的状态与转换\"><a href=\"#进程的状态与转换\" class=\"headerlink\" title=\"进程的状态与转换\"></a>进程的状态与转换</h2><h3 id=\"进程的状态\"><a href=\"#进程的状态\" class=\"headerlink\" title=\"进程的状态\"></a>进程的状态</h3><blockquote>\n<p>进程有三个基本状态：运行、就绪、阻塞/等待，此外还有创建状态和终止状态</p>\n</blockquote>\n<ul>\n<li>运行状态(Running)：占有CPU，并在CPU上运行</li>\n<li>就绪状态(Ready)：进程已经具备一切运行条件，除了没有空闲CPU，导致暂时不能运行</li>\n<li>阻塞状态(Waiting/Blocked)：等待某一事件或资源而暂时不能运行，比如等待操作系统分配打印机、等待磁盘读写</li>\n<li>创建状态(New)：操作系统为该进程分配所需内存等系统资源，为其创建、初始化PCB(分配PID等等)</li>\n<li>终止状态(Terminated)：进程运行结束，或者出现Bug导致无法继续执行，操作系统需要撤销进程 完成资源回收，撤销PCB</li>\n</ul>\n<h3 id=\"进程状态转换\"><a href=\"#进程状态转换\" class=\"headerlink\" title=\"进程状态转换\"></a>进程状态转换</h3><h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><h1 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h1><h1 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h1><p>参考：</p>\n<blockquote>\n<p>《现代操作系统》</p>\n<p><a href=\"https://mubu.com/doc/Cd-Y4YOfkh\" target=\"_blank\" rel=\"noopener\">https://mubu.com/doc/Cd-Y4YOfkh</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h1><p>进程是程序的一次执行过程，是一个程序及其数据在处理机上顺序执行时所发生的活动</p>\n<h2 id=\"进程模型\"><a href=\"#进程模型\" class=\"headerlink\" title=\"进程模型\"></a>进程模型</h2><h2 id=\"进程的状态与转换\"><a href=\"#进程的状态与转换\" class=\"headerlink\" title=\"进程的状态与转换\"></a>进程的状态与转换</h2><h3 id=\"进程的状态\"><a href=\"#进程的状态\" class=\"headerlink\" title=\"进程的状态\"></a>进程的状态</h3><blockquote>\n<p>进程有三个基本状态：运行、就绪、阻塞/等待，此外还有创建状态和终止状态</p>\n</blockquote>\n<ul>\n<li>运行状态(Running)：占有CPU，并在CPU上运行</li>\n<li>就绪状态(Ready)：进程已经具备一切运行条件，除了没有空闲CPU，导致暂时不能运行</li>\n<li>阻塞状态(Waiting/Blocked)：等待某一事件或资源而暂时不能运行，比如等待操作系统分配打印机、等待磁盘读写</li>\n<li>创建状态(New)：操作系统为该进程分配所需内存等系统资源，为其创建、初始化PCB(分配PID等等)</li>\n<li>终止状态(Terminated)：进程运行结束，或者出现Bug导致无法继续执行，操作系统需要撤销进程 完成资源回收，撤销PCB</li>\n</ul>\n<h3 id=\"进程状态转换\"><a href=\"#进程状态转换\" class=\"headerlink\" title=\"进程状态转换\"></a>进程状态转换</h3><h1 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h1><h1 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h1><h1 id=\"调度\"><a href=\"#调度\" class=\"headerlink\" title=\"调度\"></a>调度</h1><p>参考：</p>\n<blockquote>\n<p>《现代操作系统》</p>\n<p><a href=\"https://mubu.com/doc/Cd-Y4YOfkh\" target=\"_blank\" rel=\"noopener\">https://mubu.com/doc/Cd-Y4YOfkh</a></p>\n</blockquote>\n"},{"title":"第一章：计算机网络与英特网","date":"2020-08-27T14:00:15.000Z","fileName":"no1-computer-network-and-the-internet","_content":"\n## 什么是Internet\n\n计算机网络：通过**通信信道**，将地理上分布的多个计算机系统连接起来，在相应**网络协议**的支持下，实现信息传送、资源共享和网络计算功能的系统\n\n### 分类依据\n\n1、根据覆盖范围（Coverage）\n\n2、根据节点移动性（Node Mobility）\n\n\n\n## 网络边缘\n\n**端系统（End System）**：与因特网相连的计算机和其它设备，往往处于网络的边缘，因此称为端系统，也被称为**主机（host）**，主机有时可以进一步被划分为**客户（client）**和**服务器（server）**\n\n### 两种模型\n\n1、client/server model\n\n2、peer-peer model\n\n### 接入网\n\n**接入网**：是指将端系统连入到边缘路由器的物理链路\n\n**边缘路由器**：是指端系统到任何其他远程端系统路径上的第一台路由器\n\n\n\n## 网络核心\n\n>  网络核心即由网端系统的**分组交换机（主要有路由器（router）和链路层交换机（link-layer switch））**和**链路**构成的网状网络\n\n### 网络核心两个主要功能\n\n1. **路由（Routing）**决定包的路径，包括路由算法等\n\n2. **转发（Forwarding）**将数据包从路由器的输入转移到输出\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A7%BB%E5%8A%A8.png)\n\n\n\n### 网络核心的数据传输模式\n\n#### 电路交换（circuit switching）\n\n> 在电路交换网络中，在端系统通信会话期间，交换机会预留端系统间通信路径上的相关资源（缓存，链路传输速率），即先建立连接，然后通信；而在分组交换网络中，这些资源没有被预留；也就是说，在端系统进行通信时，其所需要的资源是被保持的，其他通信是无法使用这一部分资源的；也就说，端系统间真正建立了一条“连接”；而这一连接，用电话的术语被称为“电路”。传统的电话网络就是电路交换网络的例子。\n\n#### 分组交换（packet switching）\n\n从源端系统向目的端系统发送一个报文（message），要先**将长报文划分为较小的数据块**，称为分组（packet）。在传输过程中，每个分组都**通过链路和分组交换机传送**。\n\n**存储转发**\n\n>  存储转发是指**交换机在收到一个完成的分组，才会向链路输出转发分组，否则就将收到的部分分组缓存起来（因为需要缓存分组，所以分组交换机需要一个缓冲队列）**；因为缓存等待一个分组的全部数据而导致的时间开销被称为存储转发时延\n\n**排队时延与分组丢失**\n\n发生在缓冲队列满的情况，具体见下一节\n\n**转发表与路由选择协议**\n\n实际上，分组交换机之所以能够知道往哪去是因为其内部有一个**转发表**，这个表维护了一个IP地址和链路的对应关系，所以处理流程为：\n\n1. 通过分组的必要信息，获得目的端系统的*IP地址*\n2. 通过IP地址*索引转发表*，从而确定输出链路\n\n\n\n### 分组交换和电路交换的对比\n\n#### 分组交换的优点\n\n提供了比电路交换更好的带宽共享；\n\n比电路交换更简单、更有效、实现成本更低；\n\n#### 分组交换的缺点\n\n分组交换不适合实时服务，因为端到端的时延是可变、不可预测的，这和整个网络的情况相关\n\n#### 电路交换的优点\n\n提供了端对端传输数据的速率保证\n\n#### 电路交换的缺点\n\n电路交换存在静默期，这是指专用电路空闲时，其占用的资源并没有得到充分的利用\n\n建立连接的过程比较复杂\n\n总体上来说，分组交换的性能要好于电路交换的性能，但是不同类型的分组交换方式有不同的应用场景；比如一些对最低速率有着严格要求的应用，比如实时服务等，为了获得速率保证，牺牲网络的效率也是可以接受的。趋势向着分组交换发展\n\n\n\n## 分组交换中的时延、丢包、吞吐量\n\n### 时延（delay）\n\n> 一个分组在沿途**每个节点**承受不同类型的时延，这些时延中最为重要有四个的是：结点处理时延、排队时延、传输时延和传播时延.这些时延总体累加起来是结点总时延\n\n#### 处理时延\n\n处理时延是由于节点需要解析分组的必要信息然后**决定其出链路**而产生的，通常在微秒或者更低数量级。\n\n常用耗时在查找比特错误、索引转发表等操作\n\n#### 排队时延\n\n排队时延是因为分组所对应的出链路前面有其他分组正在传输，所以分组需要该链路的缓冲队列里等待其他分组传输完毕而产生的（即在分组交换机中**等待其他分组处理发送完成**造成的时延）；一般来说，排队时延是到达该队列的**流量强度**和性质的函数，通常可以达到毫秒级到微秒级。\n\n> R：带宽\n>\n> L：数据报长\n>\n> a：平均到达速率\n\n#### 传输时延\n\n传输时延是将所有分组的比特推向链路所有需要的时间（**即向外推的动作**），实际的传输时延通常在毫秒到微秒数量级。用L（bit）表示分组的长度，用R（bps，b/s）表示从路由器A到B的链路传输速率。传输时延是**L/R**。影响因素也就是L与R的大小了\n\n####  传播时延\n\n传播时延是指比特进入链路后，从该链路的起点到下一个结点所用的时间（**即在向外推之后，借链路速度到答下一个节点的事件**）；一旦分组中的最后一个比特到达路由器就意味着该分组的所有比特都已到达路由器；广域网中，传播时延一般是毫秒级的。传播时延是d/s。d是路由器A到B的距离。s是链路的传播速率。\n\n影响因素也就是物理链路的长度以及使用的介质的传播速度了\n\n#### 端到端时延\n\n假设源主机与目的地主机之间有N-1台路由器，且无拥塞（排队时延微不足道），则节点累计起来，得到端到端时延D=N(d)\n\n\n\n### 丢包（loss）\n\n> 到达的分组发现一个满的队列。由于没有地方存储这个分组，路由器将丢弃该分组，该分组将会丢失（**即当分组交换机缓存满的情况**）\n\n排队时延和丢包与网络的状况和结点的缓冲空间大小、处理速度相关；如果分组到达的速度高于结点的处理速度，那么分组就会在缓冲队列里排队等待。当缓冲空间用完后，如果还有到的分组，那么该分组将被迫丢弃，产生丢包\n\n**流量强度 = 分组到达的速度 / 结点的处理速度，当流量强度大于1时，会出现丢包现象**\n\n为降低丢包率，使用决定每个节点buffer的大小也需要进行考量\n\n\n\n### 吞吐量（throughput）\n\n> 计算机网络的吞吐量实际上是一个**速度指标**，它描述了比特经过某个节点的速度（单位时间传输的文件bit/time）。网络的吞吐量可以衡量网络的性能。通常有**瞬时吞吐量**和**平均吞吐量**两个指标进行评价，在今天，因特网对吞吐率的限制因素通常是接入网。\n\n对于某条路径上的**结点**来说，和该结点有关的速度有两个：接收数据的速度和发送数据的速度，而该结点的吞吐量是这两个速度中较小的一个；\n\n对于某条**路径**来说，该路径的吞吐量可以近似是**所有节点的吞吐量的最小值（瓶颈）**，该最小传输速率的链路为**瓶颈链路**。\n\n\n\n## 协议层次及服务模型\n\n### 分层体系结构\n\n计算机网络中的协议可以简单理解为两个端系统交流的语法与语义，即交流的规范。\n\n总体来说，将各层的所有协议组合起来，称为**协议栈**。因特网的协议栈有5个层次组成**：物理层、链路层、网络成、传输层、应用层**（OSI七层模型相比之下还在应用层下添加了**表示层、会话层**两层）\n\n同时，网络传输过程中，**对等层间使用协议关系（Protocol），上下层间使用接口关系（Interface）**\n\n\n\n#### 应用层（进程-进程process）\n\n应用层协议分布在多个端系统，端系统中的应用程序使用该协议与另一个端系统中的应用程序通信。处于应用层的分组称为**报文（message）**\n\n* FTP、SMTP、HTTP\n\n#### 传输层（端-端end）\n\n传输层在应**用程序端点**之间传输应用层报文，因特网中有两个传输层协议：TCP和UDP。处于传输层的分组称为**报文段（segment）**。TCP提供确保传递、流量控制、拥塞控制机制。UDP提供无连接服务，即不提供不必要服务的服务。没有可靠性、没有流量和拥塞控制。\n\n* TCP、UDP\n\n#### 网络层（主机-主机host）\n\n网络层将称为数据报的网络层分组从**一台主机移动到另一台主机（任意两台机器）**。网络层协议包含著名的IP协议以及其他一些路由选择协议。**数据报**\n\n* IP、routing protocols\n\n#### 数据链路层（节点-节点point）\n\n链路层将称为**帧（frame）**的链路层分组从一个**节点移动到路径上的下一个节点（两个节点要相邻）**。一个帧可能被沿途不同链路上的不同链路层协议处理。\n\n* PPP\n\n#### 物理层（比特流）\n\n物理层的任务是将**帧中的比特**从一个结点移动到下一个节点，它提供了传输信息的实际物理通道；\n\n### 封装\n\n一个分组，在不同的层次有不同的称谓，是因为它们经过每一层的时候就被该层**封装上了属于该层的相关信息**，也就是前面提到的必要信息；于是，每一分层的分组有两种类型的字段：**首部字段**和**有效负载**；其中有效负载即为来自上一层的分组数据，而首部字段就是该层加上的必要信息；分组不断被封装以实现各层协议规定的相关功能\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E6%8E%A5%E5%8F%A3%E6%A8%A1%E5%9E%8B.png)\n\n\n\n### 参考\n\n《计算机网络——自顶向下方法》\n\nhttps://blog.csdn.net/qq_39326472/article/details/88089747","source":"_posts/学习笔记/计算机网络/第一章：计算机网络与英特网.md","raw":"---\ntitle: 第一章：计算机网络与英特网\ndate: 2020-08-27 22:00:15\ntags:\n\t- 计算机网络\ncategories:\n\t- 学习笔记\n\t- 计算机网络\nfileName: no1-computer-network-and-the-internet\n---\n\n## 什么是Internet\n\n计算机网络：通过**通信信道**，将地理上分布的多个计算机系统连接起来，在相应**网络协议**的支持下，实现信息传送、资源共享和网络计算功能的系统\n\n### 分类依据\n\n1、根据覆盖范围（Coverage）\n\n2、根据节点移动性（Node Mobility）\n\n\n\n## 网络边缘\n\n**端系统（End System）**：与因特网相连的计算机和其它设备，往往处于网络的边缘，因此称为端系统，也被称为**主机（host）**，主机有时可以进一步被划分为**客户（client）**和**服务器（server）**\n\n### 两种模型\n\n1、client/server model\n\n2、peer-peer model\n\n### 接入网\n\n**接入网**：是指将端系统连入到边缘路由器的物理链路\n\n**边缘路由器**：是指端系统到任何其他远程端系统路径上的第一台路由器\n\n\n\n## 网络核心\n\n>  网络核心即由网端系统的**分组交换机（主要有路由器（router）和链路层交换机（link-layer switch））**和**链路**构成的网状网络\n\n### 网络核心两个主要功能\n\n1. **路由（Routing）**决定包的路径，包括路由算法等\n\n2. **转发（Forwarding）**将数据包从路由器的输入转移到输出\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A7%BB%E5%8A%A8.png)\n\n\n\n### 网络核心的数据传输模式\n\n#### 电路交换（circuit switching）\n\n> 在电路交换网络中，在端系统通信会话期间，交换机会预留端系统间通信路径上的相关资源（缓存，链路传输速率），即先建立连接，然后通信；而在分组交换网络中，这些资源没有被预留；也就是说，在端系统进行通信时，其所需要的资源是被保持的，其他通信是无法使用这一部分资源的；也就说，端系统间真正建立了一条“连接”；而这一连接，用电话的术语被称为“电路”。传统的电话网络就是电路交换网络的例子。\n\n#### 分组交换（packet switching）\n\n从源端系统向目的端系统发送一个报文（message），要先**将长报文划分为较小的数据块**，称为分组（packet）。在传输过程中，每个分组都**通过链路和分组交换机传送**。\n\n**存储转发**\n\n>  存储转发是指**交换机在收到一个完成的分组，才会向链路输出转发分组，否则就将收到的部分分组缓存起来（因为需要缓存分组，所以分组交换机需要一个缓冲队列）**；因为缓存等待一个分组的全部数据而导致的时间开销被称为存储转发时延\n\n**排队时延与分组丢失**\n\n发生在缓冲队列满的情况，具体见下一节\n\n**转发表与路由选择协议**\n\n实际上，分组交换机之所以能够知道往哪去是因为其内部有一个**转发表**，这个表维护了一个IP地址和链路的对应关系，所以处理流程为：\n\n1. 通过分组的必要信息，获得目的端系统的*IP地址*\n2. 通过IP地址*索引转发表*，从而确定输出链路\n\n\n\n### 分组交换和电路交换的对比\n\n#### 分组交换的优点\n\n提供了比电路交换更好的带宽共享；\n\n比电路交换更简单、更有效、实现成本更低；\n\n#### 分组交换的缺点\n\n分组交换不适合实时服务，因为端到端的时延是可变、不可预测的，这和整个网络的情况相关\n\n#### 电路交换的优点\n\n提供了端对端传输数据的速率保证\n\n#### 电路交换的缺点\n\n电路交换存在静默期，这是指专用电路空闲时，其占用的资源并没有得到充分的利用\n\n建立连接的过程比较复杂\n\n总体上来说，分组交换的性能要好于电路交换的性能，但是不同类型的分组交换方式有不同的应用场景；比如一些对最低速率有着严格要求的应用，比如实时服务等，为了获得速率保证，牺牲网络的效率也是可以接受的。趋势向着分组交换发展\n\n\n\n## 分组交换中的时延、丢包、吞吐量\n\n### 时延（delay）\n\n> 一个分组在沿途**每个节点**承受不同类型的时延，这些时延中最为重要有四个的是：结点处理时延、排队时延、传输时延和传播时延.这些时延总体累加起来是结点总时延\n\n#### 处理时延\n\n处理时延是由于节点需要解析分组的必要信息然后**决定其出链路**而产生的，通常在微秒或者更低数量级。\n\n常用耗时在查找比特错误、索引转发表等操作\n\n#### 排队时延\n\n排队时延是因为分组所对应的出链路前面有其他分组正在传输，所以分组需要该链路的缓冲队列里等待其他分组传输完毕而产生的（即在分组交换机中**等待其他分组处理发送完成**造成的时延）；一般来说，排队时延是到达该队列的**流量强度**和性质的函数，通常可以达到毫秒级到微秒级。\n\n> R：带宽\n>\n> L：数据报长\n>\n> a：平均到达速率\n\n#### 传输时延\n\n传输时延是将所有分组的比特推向链路所有需要的时间（**即向外推的动作**），实际的传输时延通常在毫秒到微秒数量级。用L（bit）表示分组的长度，用R（bps，b/s）表示从路由器A到B的链路传输速率。传输时延是**L/R**。影响因素也就是L与R的大小了\n\n####  传播时延\n\n传播时延是指比特进入链路后，从该链路的起点到下一个结点所用的时间（**即在向外推之后，借链路速度到答下一个节点的事件**）；一旦分组中的最后一个比特到达路由器就意味着该分组的所有比特都已到达路由器；广域网中，传播时延一般是毫秒级的。传播时延是d/s。d是路由器A到B的距离。s是链路的传播速率。\n\n影响因素也就是物理链路的长度以及使用的介质的传播速度了\n\n#### 端到端时延\n\n假设源主机与目的地主机之间有N-1台路由器，且无拥塞（排队时延微不足道），则节点累计起来，得到端到端时延D=N(d)\n\n\n\n### 丢包（loss）\n\n> 到达的分组发现一个满的队列。由于没有地方存储这个分组，路由器将丢弃该分组，该分组将会丢失（**即当分组交换机缓存满的情况**）\n\n排队时延和丢包与网络的状况和结点的缓冲空间大小、处理速度相关；如果分组到达的速度高于结点的处理速度，那么分组就会在缓冲队列里排队等待。当缓冲空间用完后，如果还有到的分组，那么该分组将被迫丢弃，产生丢包\n\n**流量强度 = 分组到达的速度 / 结点的处理速度，当流量强度大于1时，会出现丢包现象**\n\n为降低丢包率，使用决定每个节点buffer的大小也需要进行考量\n\n\n\n### 吞吐量（throughput）\n\n> 计算机网络的吞吐量实际上是一个**速度指标**，它描述了比特经过某个节点的速度（单位时间传输的文件bit/time）。网络的吞吐量可以衡量网络的性能。通常有**瞬时吞吐量**和**平均吞吐量**两个指标进行评价，在今天，因特网对吞吐率的限制因素通常是接入网。\n\n对于某条路径上的**结点**来说，和该结点有关的速度有两个：接收数据的速度和发送数据的速度，而该结点的吞吐量是这两个速度中较小的一个；\n\n对于某条**路径**来说，该路径的吞吐量可以近似是**所有节点的吞吐量的最小值（瓶颈）**，该最小传输速率的链路为**瓶颈链路**。\n\n\n\n## 协议层次及服务模型\n\n### 分层体系结构\n\n计算机网络中的协议可以简单理解为两个端系统交流的语法与语义，即交流的规范。\n\n总体来说，将各层的所有协议组合起来，称为**协议栈**。因特网的协议栈有5个层次组成**：物理层、链路层、网络成、传输层、应用层**（OSI七层模型相比之下还在应用层下添加了**表示层、会话层**两层）\n\n同时，网络传输过程中，**对等层间使用协议关系（Protocol），上下层间使用接口关系（Interface）**\n\n\n\n#### 应用层（进程-进程process）\n\n应用层协议分布在多个端系统，端系统中的应用程序使用该协议与另一个端系统中的应用程序通信。处于应用层的分组称为**报文（message）**\n\n* FTP、SMTP、HTTP\n\n#### 传输层（端-端end）\n\n传输层在应**用程序端点**之间传输应用层报文，因特网中有两个传输层协议：TCP和UDP。处于传输层的分组称为**报文段（segment）**。TCP提供确保传递、流量控制、拥塞控制机制。UDP提供无连接服务，即不提供不必要服务的服务。没有可靠性、没有流量和拥塞控制。\n\n* TCP、UDP\n\n#### 网络层（主机-主机host）\n\n网络层将称为数据报的网络层分组从**一台主机移动到另一台主机（任意两台机器）**。网络层协议包含著名的IP协议以及其他一些路由选择协议。**数据报**\n\n* IP、routing protocols\n\n#### 数据链路层（节点-节点point）\n\n链路层将称为**帧（frame）**的链路层分组从一个**节点移动到路径上的下一个节点（两个节点要相邻）**。一个帧可能被沿途不同链路上的不同链路层协议处理。\n\n* PPP\n\n#### 物理层（比特流）\n\n物理层的任务是将**帧中的比特**从一个结点移动到下一个节点，它提供了传输信息的实际物理通道；\n\n### 封装\n\n一个分组，在不同的层次有不同的称谓，是因为它们经过每一层的时候就被该层**封装上了属于该层的相关信息**，也就是前面提到的必要信息；于是，每一分层的分组有两种类型的字段：**首部字段**和**有效负载**；其中有效负载即为来自上一层的分组数据，而首部字段就是该层加上的必要信息；分组不断被封装以实现各层协议规定的相关功能\n\n![](http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E6%8E%A5%E5%8F%A3%E6%A8%A1%E5%9E%8B.png)\n\n\n\n### 参考\n\n《计算机网络——自顶向下方法》\n\nhttps://blog.csdn.net/qq_39326472/article/details/88089747","slug":"学习笔记/计算机网络/第一章：计算机网络与英特网","published":1,"updated":"2021-01-31T16:04:53.199Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpe000d8sjsgu571y37","content":"<h2 id=\"什么是Internet\"><a href=\"#什么是Internet\" class=\"headerlink\" title=\"什么是Internet\"></a>什么是Internet</h2><p>计算机网络：通过<strong>通信信道</strong>，将地理上分布的多个计算机系统连接起来，在相应<strong>网络协议</strong>的支持下，实现信息传送、资源共享和网络计算功能的系统</p>\n<h3 id=\"分类依据\"><a href=\"#分类依据\" class=\"headerlink\" title=\"分类依据\"></a>分类依据</h3><p>1、根据覆盖范围（Coverage）</p>\n<p>2、根据节点移动性（Node Mobility）</p>\n<h2 id=\"网络边缘\"><a href=\"#网络边缘\" class=\"headerlink\" title=\"网络边缘\"></a>网络边缘</h2><p><strong>端系统（End System）</strong>：与因特网相连的计算机和其它设备，往往处于网络的边缘，因此称为端系统，也被称为<strong>主机（host）</strong>，主机有时可以进一步被划分为<strong>客户（client）</strong>和<strong>服务器（server）</strong></p>\n<h3 id=\"两种模型\"><a href=\"#两种模型\" class=\"headerlink\" title=\"两种模型\"></a>两种模型</h3><p>1、client/server model</p>\n<p>2、peer-peer model</p>\n<h3 id=\"接入网\"><a href=\"#接入网\" class=\"headerlink\" title=\"接入网\"></a>接入网</h3><p><strong>接入网</strong>：是指将端系统连入到边缘路由器的物理链路</p>\n<p><strong>边缘路由器</strong>：是指端系统到任何其他远程端系统路径上的第一台路由器</p>\n<h2 id=\"网络核心\"><a href=\"#网络核心\" class=\"headerlink\" title=\"网络核心\"></a>网络核心</h2><blockquote>\n<p> 网络核心即由网端系统的<strong>分组交换机（主要有路由器（router）和链路层交换机（link-layer switch））</strong>和<strong>链路</strong>构成的网状网络</p>\n</blockquote>\n<h3 id=\"网络核心两个主要功能\"><a href=\"#网络核心两个主要功能\" class=\"headerlink\" title=\"网络核心两个主要功能\"></a>网络核心两个主要功能</h3><ol>\n<li><p><strong>路由（Routing）</strong>决定包的路径，包括路由算法等</p>\n</li>\n<li><p><strong>转发（Forwarding）</strong>将数据包从路由器的输入转移到输出</p>\n</li>\n</ol>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A7%BB%E5%8A%A8.png\" alt=\"\"></p>\n<h3 id=\"网络核心的数据传输模式\"><a href=\"#网络核心的数据传输模式\" class=\"headerlink\" title=\"网络核心的数据传输模式\"></a>网络核心的数据传输模式</h3><h4 id=\"电路交换（circuit-switching）\"><a href=\"#电路交换（circuit-switching）\" class=\"headerlink\" title=\"电路交换（circuit switching）\"></a>电路交换（circuit switching）</h4><blockquote>\n<p>在电路交换网络中，在端系统通信会话期间，交换机会预留端系统间通信路径上的相关资源（缓存，链路传输速率），即先建立连接，然后通信；而在分组交换网络中，这些资源没有被预留；也就是说，在端系统进行通信时，其所需要的资源是被保持的，其他通信是无法使用这一部分资源的；也就说，端系统间真正建立了一条“连接”；而这一连接，用电话的术语被称为“电路”。传统的电话网络就是电路交换网络的例子。</p>\n</blockquote>\n<h4 id=\"分组交换（packet-switching）\"><a href=\"#分组交换（packet-switching）\" class=\"headerlink\" title=\"分组交换（packet switching）\"></a>分组交换（packet switching）</h4><p>从源端系统向目的端系统发送一个报文（message），要先<strong>将长报文划分为较小的数据块</strong>，称为分组（packet）。在传输过程中，每个分组都<strong>通过链路和分组交换机传送</strong>。</p>\n<p><strong>存储转发</strong></p>\n<blockquote>\n<p> 存储转发是指<strong>交换机在收到一个完成的分组，才会向链路输出转发分组，否则就将收到的部分分组缓存起来（因为需要缓存分组，所以分组交换机需要一个缓冲队列）</strong>；因为缓存等待一个分组的全部数据而导致的时间开销被称为存储转发时延</p>\n</blockquote>\n<p><strong>排队时延与分组丢失</strong></p>\n<p>发生在缓冲队列满的情况，具体见下一节</p>\n<p><strong>转发表与路由选择协议</strong></p>\n<p>实际上，分组交换机之所以能够知道往哪去是因为其内部有一个<strong>转发表</strong>，这个表维护了一个IP地址和链路的对应关系，所以处理流程为：</p>\n<ol>\n<li>通过分组的必要信息，获得目的端系统的<em>IP地址</em></li>\n<li>通过IP地址<em>索引转发表</em>，从而确定输出链路</li>\n</ol>\n<h3 id=\"分组交换和电路交换的对比\"><a href=\"#分组交换和电路交换的对比\" class=\"headerlink\" title=\"分组交换和电路交换的对比\"></a>分组交换和电路交换的对比</h3><h4 id=\"分组交换的优点\"><a href=\"#分组交换的优点\" class=\"headerlink\" title=\"分组交换的优点\"></a>分组交换的优点</h4><p>提供了比电路交换更好的带宽共享；</p>\n<p>比电路交换更简单、更有效、实现成本更低；</p>\n<h4 id=\"分组交换的缺点\"><a href=\"#分组交换的缺点\" class=\"headerlink\" title=\"分组交换的缺点\"></a>分组交换的缺点</h4><p>分组交换不适合实时服务，因为端到端的时延是可变、不可预测的，这和整个网络的情况相关</p>\n<h4 id=\"电路交换的优点\"><a href=\"#电路交换的优点\" class=\"headerlink\" title=\"电路交换的优点\"></a>电路交换的优点</h4><p>提供了端对端传输数据的速率保证</p>\n<h4 id=\"电路交换的缺点\"><a href=\"#电路交换的缺点\" class=\"headerlink\" title=\"电路交换的缺点\"></a>电路交换的缺点</h4><p>电路交换存在静默期，这是指专用电路空闲时，其占用的资源并没有得到充分的利用</p>\n<p>建立连接的过程比较复杂</p>\n<p>总体上来说，分组交换的性能要好于电路交换的性能，但是不同类型的分组交换方式有不同的应用场景；比如一些对最低速率有着严格要求的应用，比如实时服务等，为了获得速率保证，牺牲网络的效率也是可以接受的。趋势向着分组交换发展</p>\n<h2 id=\"分组交换中的时延、丢包、吞吐量\"><a href=\"#分组交换中的时延、丢包、吞吐量\" class=\"headerlink\" title=\"分组交换中的时延、丢包、吞吐量\"></a>分组交换中的时延、丢包、吞吐量</h2><h3 id=\"时延（delay）\"><a href=\"#时延（delay）\" class=\"headerlink\" title=\"时延（delay）\"></a>时延（delay）</h3><blockquote>\n<p>一个分组在沿途<strong>每个节点</strong>承受不同类型的时延，这些时延中最为重要有四个的是：结点处理时延、排队时延、传输时延和传播时延.这些时延总体累加起来是结点总时延</p>\n</blockquote>\n<h4 id=\"处理时延\"><a href=\"#处理时延\" class=\"headerlink\" title=\"处理时延\"></a>处理时延</h4><p>处理时延是由于节点需要解析分组的必要信息然后<strong>决定其出链路</strong>而产生的，通常在微秒或者更低数量级。</p>\n<p>常用耗时在查找比特错误、索引转发表等操作</p>\n<h4 id=\"排队时延\"><a href=\"#排队时延\" class=\"headerlink\" title=\"排队时延\"></a>排队时延</h4><p>排队时延是因为分组所对应的出链路前面有其他分组正在传输，所以分组需要该链路的缓冲队列里等待其他分组传输完毕而产生的（即在分组交换机中<strong>等待其他分组处理发送完成</strong>造成的时延）；一般来说，排队时延是到达该队列的<strong>流量强度</strong>和性质的函数，通常可以达到毫秒级到微秒级。</p>\n<blockquote>\n<p>R：带宽</p>\n<p>L：数据报长</p>\n<p>a：平均到达速率</p>\n</blockquote>\n<h4 id=\"传输时延\"><a href=\"#传输时延\" class=\"headerlink\" title=\"传输时延\"></a>传输时延</h4><p>传输时延是将所有分组的比特推向链路所有需要的时间（<strong>即向外推的动作</strong>），实际的传输时延通常在毫秒到微秒数量级。用L（bit）表示分组的长度，用R（bps，b/s）表示从路由器A到B的链路传输速率。传输时延是<strong>L/R</strong>。影响因素也就是L与R的大小了</p>\n<h4 id=\"传播时延\"><a href=\"#传播时延\" class=\"headerlink\" title=\"传播时延\"></a>传播时延</h4><p>传播时延是指比特进入链路后，从该链路的起点到下一个结点所用的时间（<strong>即在向外推之后，借链路速度到答下一个节点的事件</strong>）；一旦分组中的最后一个比特到达路由器就意味着该分组的所有比特都已到达路由器；广域网中，传播时延一般是毫秒级的。传播时延是d/s。d是路由器A到B的距离。s是链路的传播速率。</p>\n<p>影响因素也就是物理链路的长度以及使用的介质的传播速度了</p>\n<h4 id=\"端到端时延\"><a href=\"#端到端时延\" class=\"headerlink\" title=\"端到端时延\"></a>端到端时延</h4><p>假设源主机与目的地主机之间有N-1台路由器，且无拥塞（排队时延微不足道），则节点累计起来，得到端到端时延D=N(d)</p>\n<h3 id=\"丢包（loss）\"><a href=\"#丢包（loss）\" class=\"headerlink\" title=\"丢包（loss）\"></a>丢包（loss）</h3><blockquote>\n<p>到达的分组发现一个满的队列。由于没有地方存储这个分组，路由器将丢弃该分组，该分组将会丢失（<strong>即当分组交换机缓存满的情况</strong>）</p>\n</blockquote>\n<p>排队时延和丢包与网络的状况和结点的缓冲空间大小、处理速度相关；如果分组到达的速度高于结点的处理速度，那么分组就会在缓冲队列里排队等待。当缓冲空间用完后，如果还有到的分组，那么该分组将被迫丢弃，产生丢包</p>\n<p><strong>流量强度 = 分组到达的速度 / 结点的处理速度，当流量强度大于1时，会出现丢包现象</strong></p>\n<p>为降低丢包率，使用决定每个节点buffer的大小也需要进行考量</p>\n<h3 id=\"吞吐量（throughput）\"><a href=\"#吞吐量（throughput）\" class=\"headerlink\" title=\"吞吐量（throughput）\"></a>吞吐量（throughput）</h3><blockquote>\n<p>计算机网络的吞吐量实际上是一个<strong>速度指标</strong>，它描述了比特经过某个节点的速度（单位时间传输的文件bit/time）。网络的吞吐量可以衡量网络的性能。通常有<strong>瞬时吞吐量</strong>和<strong>平均吞吐量</strong>两个指标进行评价，在今天，因特网对吞吐率的限制因素通常是接入网。</p>\n</blockquote>\n<p>对于某条路径上的<strong>结点</strong>来说，和该结点有关的速度有两个：接收数据的速度和发送数据的速度，而该结点的吞吐量是这两个速度中较小的一个；</p>\n<p>对于某条<strong>路径</strong>来说，该路径的吞吐量可以近似是<strong>所有节点的吞吐量的最小值（瓶颈）</strong>，该最小传输速率的链路为<strong>瓶颈链路</strong>。</p>\n<h2 id=\"协议层次及服务模型\"><a href=\"#协议层次及服务模型\" class=\"headerlink\" title=\"协议层次及服务模型\"></a>协议层次及服务模型</h2><h3 id=\"分层体系结构\"><a href=\"#分层体系结构\" class=\"headerlink\" title=\"分层体系结构\"></a>分层体系结构</h3><p>计算机网络中的协议可以简单理解为两个端系统交流的语法与语义，即交流的规范。</p>\n<p>总体来说，将各层的所有协议组合起来，称为<strong>协议栈</strong>。因特网的协议栈有5个层次组成<strong>：物理层、链路层、网络成、传输层、应用层</strong>（OSI七层模型相比之下还在应用层下添加了<strong>表示层、会话层</strong>两层）</p>\n<p>同时，网络传输过程中，<strong>对等层间使用协议关系（Protocol），上下层间使用接口关系（Interface）</strong></p>\n<h4 id=\"应用层（进程-进程process）\"><a href=\"#应用层（进程-进程process）\" class=\"headerlink\" title=\"应用层（进程-进程process）\"></a>应用层（进程-进程process）</h4><p>应用层协议分布在多个端系统，端系统中的应用程序使用该协议与另一个端系统中的应用程序通信。处于应用层的分组称为<strong>报文（message）</strong></p>\n<ul>\n<li>FTP、SMTP、HTTP</li>\n</ul>\n<h4 id=\"传输层（端-端end）\"><a href=\"#传输层（端-端end）\" class=\"headerlink\" title=\"传输层（端-端end）\"></a>传输层（端-端end）</h4><p>传输层在应<strong>用程序端点</strong>之间传输应用层报文，因特网中有两个传输层协议：TCP和UDP。处于传输层的分组称为<strong>报文段（segment）</strong>。TCP提供确保传递、流量控制、拥塞控制机制。UDP提供无连接服务，即不提供不必要服务的服务。没有可靠性、没有流量和拥塞控制。</p>\n<ul>\n<li>TCP、UDP</li>\n</ul>\n<h4 id=\"网络层（主机-主机host）\"><a href=\"#网络层（主机-主机host）\" class=\"headerlink\" title=\"网络层（主机-主机host）\"></a>网络层（主机-主机host）</h4><p>网络层将称为数据报的网络层分组从<strong>一台主机移动到另一台主机（任意两台机器）</strong>。网络层协议包含著名的IP协议以及其他一些路由选择协议。<strong>数据报</strong></p>\n<ul>\n<li>IP、routing protocols</li>\n</ul>\n<h4 id=\"数据链路层（节点-节点point）\"><a href=\"#数据链路层（节点-节点point）\" class=\"headerlink\" title=\"数据链路层（节点-节点point）\"></a>数据链路层（节点-节点point）</h4><p>链路层将称为<strong>帧（frame）</strong>的链路层分组从一个<strong>节点移动到路径上的下一个节点（两个节点要相邻）</strong>。一个帧可能被沿途不同链路上的不同链路层协议处理。</p>\n<ul>\n<li>PPP</li>\n</ul>\n<h4 id=\"物理层（比特流）\"><a href=\"#物理层（比特流）\" class=\"headerlink\" title=\"物理层（比特流）\"></a>物理层（比特流）</h4><p>物理层的任务是将<strong>帧中的比特</strong>从一个结点移动到下一个节点，它提供了传输信息的实际物理通道；</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>一个分组，在不同的层次有不同的称谓，是因为它们经过每一层的时候就被该层<strong>封装上了属于该层的相关信息</strong>，也就是前面提到的必要信息；于是，每一分层的分组有两种类型的字段：<strong>首部字段</strong>和<strong>有效负载</strong>；其中有效负载即为来自上一层的分组数据，而首部字段就是该层加上的必要信息；分组不断被封装以实现各层协议规定的相关功能</p>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E6%8E%A5%E5%8F%A3%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《计算机网络——自顶向下方法》</p>\n<p><a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Internet\"><a href=\"#什么是Internet\" class=\"headerlink\" title=\"什么是Internet\"></a>什么是Internet</h2><p>计算机网络：通过<strong>通信信道</strong>，将地理上分布的多个计算机系统连接起来，在相应<strong>网络协议</strong>的支持下，实现信息传送、资源共享和网络计算功能的系统</p>\n<h3 id=\"分类依据\"><a href=\"#分类依据\" class=\"headerlink\" title=\"分类依据\"></a>分类依据</h3><p>1、根据覆盖范围（Coverage）</p>\n<p>2、根据节点移动性（Node Mobility）</p>\n<h2 id=\"网络边缘\"><a href=\"#网络边缘\" class=\"headerlink\" title=\"网络边缘\"></a>网络边缘</h2><p><strong>端系统（End System）</strong>：与因特网相连的计算机和其它设备，往往处于网络的边缘，因此称为端系统，也被称为<strong>主机（host）</strong>，主机有时可以进一步被划分为<strong>客户（client）</strong>和<strong>服务器（server）</strong></p>\n<h3 id=\"两种模型\"><a href=\"#两种模型\" class=\"headerlink\" title=\"两种模型\"></a>两种模型</h3><p>1、client/server model</p>\n<p>2、peer-peer model</p>\n<h3 id=\"接入网\"><a href=\"#接入网\" class=\"headerlink\" title=\"接入网\"></a>接入网</h3><p><strong>接入网</strong>：是指将端系统连入到边缘路由器的物理链路</p>\n<p><strong>边缘路由器</strong>：是指端系统到任何其他远程端系统路径上的第一台路由器</p>\n<h2 id=\"网络核心\"><a href=\"#网络核心\" class=\"headerlink\" title=\"网络核心\"></a>网络核心</h2><blockquote>\n<p> 网络核心即由网端系统的<strong>分组交换机（主要有路由器（router）和链路层交换机（link-layer switch））</strong>和<strong>链路</strong>构成的网状网络</p>\n</blockquote>\n<h3 id=\"网络核心两个主要功能\"><a href=\"#网络核心两个主要功能\" class=\"headerlink\" title=\"网络核心两个主要功能\"></a>网络核心两个主要功能</h3><ol>\n<li><p><strong>路由（Routing）</strong>决定包的路径，包括路由算法等</p>\n</li>\n<li><p><strong>转发（Forwarding）</strong>将数据包从路由器的输入转移到输出</p>\n</li>\n</ol>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E6%95%B0%E6%8D%AE%E7%9A%84%E7%A7%BB%E5%8A%A8.png\" alt=\"\"></p>\n<h3 id=\"网络核心的数据传输模式\"><a href=\"#网络核心的数据传输模式\" class=\"headerlink\" title=\"网络核心的数据传输模式\"></a>网络核心的数据传输模式</h3><h4 id=\"电路交换（circuit-switching）\"><a href=\"#电路交换（circuit-switching）\" class=\"headerlink\" title=\"电路交换（circuit switching）\"></a>电路交换（circuit switching）</h4><blockquote>\n<p>在电路交换网络中，在端系统通信会话期间，交换机会预留端系统间通信路径上的相关资源（缓存，链路传输速率），即先建立连接，然后通信；而在分组交换网络中，这些资源没有被预留；也就是说，在端系统进行通信时，其所需要的资源是被保持的，其他通信是无法使用这一部分资源的；也就说，端系统间真正建立了一条“连接”；而这一连接，用电话的术语被称为“电路”。传统的电话网络就是电路交换网络的例子。</p>\n</blockquote>\n<h4 id=\"分组交换（packet-switching）\"><a href=\"#分组交换（packet-switching）\" class=\"headerlink\" title=\"分组交换（packet switching）\"></a>分组交换（packet switching）</h4><p>从源端系统向目的端系统发送一个报文（message），要先<strong>将长报文划分为较小的数据块</strong>，称为分组（packet）。在传输过程中，每个分组都<strong>通过链路和分组交换机传送</strong>。</p>\n<p><strong>存储转发</strong></p>\n<blockquote>\n<p> 存储转发是指<strong>交换机在收到一个完成的分组，才会向链路输出转发分组，否则就将收到的部分分组缓存起来（因为需要缓存分组，所以分组交换机需要一个缓冲队列）</strong>；因为缓存等待一个分组的全部数据而导致的时间开销被称为存储转发时延</p>\n</blockquote>\n<p><strong>排队时延与分组丢失</strong></p>\n<p>发生在缓冲队列满的情况，具体见下一节</p>\n<p><strong>转发表与路由选择协议</strong></p>\n<p>实际上，分组交换机之所以能够知道往哪去是因为其内部有一个<strong>转发表</strong>，这个表维护了一个IP地址和链路的对应关系，所以处理流程为：</p>\n<ol>\n<li>通过分组的必要信息，获得目的端系统的<em>IP地址</em></li>\n<li>通过IP地址<em>索引转发表</em>，从而确定输出链路</li>\n</ol>\n<h3 id=\"分组交换和电路交换的对比\"><a href=\"#分组交换和电路交换的对比\" class=\"headerlink\" title=\"分组交换和电路交换的对比\"></a>分组交换和电路交换的对比</h3><h4 id=\"分组交换的优点\"><a href=\"#分组交换的优点\" class=\"headerlink\" title=\"分组交换的优点\"></a>分组交换的优点</h4><p>提供了比电路交换更好的带宽共享；</p>\n<p>比电路交换更简单、更有效、实现成本更低；</p>\n<h4 id=\"分组交换的缺点\"><a href=\"#分组交换的缺点\" class=\"headerlink\" title=\"分组交换的缺点\"></a>分组交换的缺点</h4><p>分组交换不适合实时服务，因为端到端的时延是可变、不可预测的，这和整个网络的情况相关</p>\n<h4 id=\"电路交换的优点\"><a href=\"#电路交换的优点\" class=\"headerlink\" title=\"电路交换的优点\"></a>电路交换的优点</h4><p>提供了端对端传输数据的速率保证</p>\n<h4 id=\"电路交换的缺点\"><a href=\"#电路交换的缺点\" class=\"headerlink\" title=\"电路交换的缺点\"></a>电路交换的缺点</h4><p>电路交换存在静默期，这是指专用电路空闲时，其占用的资源并没有得到充分的利用</p>\n<p>建立连接的过程比较复杂</p>\n<p>总体上来说，分组交换的性能要好于电路交换的性能，但是不同类型的分组交换方式有不同的应用场景；比如一些对最低速率有着严格要求的应用，比如实时服务等，为了获得速率保证，牺牲网络的效率也是可以接受的。趋势向着分组交换发展</p>\n<h2 id=\"分组交换中的时延、丢包、吞吐量\"><a href=\"#分组交换中的时延、丢包、吞吐量\" class=\"headerlink\" title=\"分组交换中的时延、丢包、吞吐量\"></a>分组交换中的时延、丢包、吞吐量</h2><h3 id=\"时延（delay）\"><a href=\"#时延（delay）\" class=\"headerlink\" title=\"时延（delay）\"></a>时延（delay）</h3><blockquote>\n<p>一个分组在沿途<strong>每个节点</strong>承受不同类型的时延，这些时延中最为重要有四个的是：结点处理时延、排队时延、传输时延和传播时延.这些时延总体累加起来是结点总时延</p>\n</blockquote>\n<h4 id=\"处理时延\"><a href=\"#处理时延\" class=\"headerlink\" title=\"处理时延\"></a>处理时延</h4><p>处理时延是由于节点需要解析分组的必要信息然后<strong>决定其出链路</strong>而产生的，通常在微秒或者更低数量级。</p>\n<p>常用耗时在查找比特错误、索引转发表等操作</p>\n<h4 id=\"排队时延\"><a href=\"#排队时延\" class=\"headerlink\" title=\"排队时延\"></a>排队时延</h4><p>排队时延是因为分组所对应的出链路前面有其他分组正在传输，所以分组需要该链路的缓冲队列里等待其他分组传输完毕而产生的（即在分组交换机中<strong>等待其他分组处理发送完成</strong>造成的时延）；一般来说，排队时延是到达该队列的<strong>流量强度</strong>和性质的函数，通常可以达到毫秒级到微秒级。</p>\n<blockquote>\n<p>R：带宽</p>\n<p>L：数据报长</p>\n<p>a：平均到达速率</p>\n</blockquote>\n<h4 id=\"传输时延\"><a href=\"#传输时延\" class=\"headerlink\" title=\"传输时延\"></a>传输时延</h4><p>传输时延是将所有分组的比特推向链路所有需要的时间（<strong>即向外推的动作</strong>），实际的传输时延通常在毫秒到微秒数量级。用L（bit）表示分组的长度，用R（bps，b/s）表示从路由器A到B的链路传输速率。传输时延是<strong>L/R</strong>。影响因素也就是L与R的大小了</p>\n<h4 id=\"传播时延\"><a href=\"#传播时延\" class=\"headerlink\" title=\"传播时延\"></a>传播时延</h4><p>传播时延是指比特进入链路后，从该链路的起点到下一个结点所用的时间（<strong>即在向外推之后，借链路速度到答下一个节点的事件</strong>）；一旦分组中的最后一个比特到达路由器就意味着该分组的所有比特都已到达路由器；广域网中，传播时延一般是毫秒级的。传播时延是d/s。d是路由器A到B的距离。s是链路的传播速率。</p>\n<p>影响因素也就是物理链路的长度以及使用的介质的传播速度了</p>\n<h4 id=\"端到端时延\"><a href=\"#端到端时延\" class=\"headerlink\" title=\"端到端时延\"></a>端到端时延</h4><p>假设源主机与目的地主机之间有N-1台路由器，且无拥塞（排队时延微不足道），则节点累计起来，得到端到端时延D=N(d)</p>\n<h3 id=\"丢包（loss）\"><a href=\"#丢包（loss）\" class=\"headerlink\" title=\"丢包（loss）\"></a>丢包（loss）</h3><blockquote>\n<p>到达的分组发现一个满的队列。由于没有地方存储这个分组，路由器将丢弃该分组，该分组将会丢失（<strong>即当分组交换机缓存满的情况</strong>）</p>\n</blockquote>\n<p>排队时延和丢包与网络的状况和结点的缓冲空间大小、处理速度相关；如果分组到达的速度高于结点的处理速度，那么分组就会在缓冲队列里排队等待。当缓冲空间用完后，如果还有到的分组，那么该分组将被迫丢弃，产生丢包</p>\n<p><strong>流量强度 = 分组到达的速度 / 结点的处理速度，当流量强度大于1时，会出现丢包现象</strong></p>\n<p>为降低丢包率，使用决定每个节点buffer的大小也需要进行考量</p>\n<h3 id=\"吞吐量（throughput）\"><a href=\"#吞吐量（throughput）\" class=\"headerlink\" title=\"吞吐量（throughput）\"></a>吞吐量（throughput）</h3><blockquote>\n<p>计算机网络的吞吐量实际上是一个<strong>速度指标</strong>，它描述了比特经过某个节点的速度（单位时间传输的文件bit/time）。网络的吞吐量可以衡量网络的性能。通常有<strong>瞬时吞吐量</strong>和<strong>平均吞吐量</strong>两个指标进行评价，在今天，因特网对吞吐率的限制因素通常是接入网。</p>\n</blockquote>\n<p>对于某条路径上的<strong>结点</strong>来说，和该结点有关的速度有两个：接收数据的速度和发送数据的速度，而该结点的吞吐量是这两个速度中较小的一个；</p>\n<p>对于某条<strong>路径</strong>来说，该路径的吞吐量可以近似是<strong>所有节点的吞吐量的最小值（瓶颈）</strong>，该最小传输速率的链路为<strong>瓶颈链路</strong>。</p>\n<h2 id=\"协议层次及服务模型\"><a href=\"#协议层次及服务模型\" class=\"headerlink\" title=\"协议层次及服务模型\"></a>协议层次及服务模型</h2><h3 id=\"分层体系结构\"><a href=\"#分层体系结构\" class=\"headerlink\" title=\"分层体系结构\"></a>分层体系结构</h3><p>计算机网络中的协议可以简单理解为两个端系统交流的语法与语义，即交流的规范。</p>\n<p>总体来说，将各层的所有协议组合起来，称为<strong>协议栈</strong>。因特网的协议栈有5个层次组成<strong>：物理层、链路层、网络成、传输层、应用层</strong>（OSI七层模型相比之下还在应用层下添加了<strong>表示层、会话层</strong>两层）</p>\n<p>同时，网络传输过程中，<strong>对等层间使用协议关系（Protocol），上下层间使用接口关系（Interface）</strong></p>\n<h4 id=\"应用层（进程-进程process）\"><a href=\"#应用层（进程-进程process）\" class=\"headerlink\" title=\"应用层（进程-进程process）\"></a>应用层（进程-进程process）</h4><p>应用层协议分布在多个端系统，端系统中的应用程序使用该协议与另一个端系统中的应用程序通信。处于应用层的分组称为<strong>报文（message）</strong></p>\n<ul>\n<li>FTP、SMTP、HTTP</li>\n</ul>\n<h4 id=\"传输层（端-端end）\"><a href=\"#传输层（端-端end）\" class=\"headerlink\" title=\"传输层（端-端end）\"></a>传输层（端-端end）</h4><p>传输层在应<strong>用程序端点</strong>之间传输应用层报文，因特网中有两个传输层协议：TCP和UDP。处于传输层的分组称为<strong>报文段（segment）</strong>。TCP提供确保传递、流量控制、拥塞控制机制。UDP提供无连接服务，即不提供不必要服务的服务。没有可靠性、没有流量和拥塞控制。</p>\n<ul>\n<li>TCP、UDP</li>\n</ul>\n<h4 id=\"网络层（主机-主机host）\"><a href=\"#网络层（主机-主机host）\" class=\"headerlink\" title=\"网络层（主机-主机host）\"></a>网络层（主机-主机host）</h4><p>网络层将称为数据报的网络层分组从<strong>一台主机移动到另一台主机（任意两台机器）</strong>。网络层协议包含著名的IP协议以及其他一些路由选择协议。<strong>数据报</strong></p>\n<ul>\n<li>IP、routing protocols</li>\n</ul>\n<h4 id=\"数据链路层（节点-节点point）\"><a href=\"#数据链路层（节点-节点point）\" class=\"headerlink\" title=\"数据链路层（节点-节点point）\"></a>数据链路层（节点-节点point）</h4><p>链路层将称为<strong>帧（frame）</strong>的链路层分组从一个<strong>节点移动到路径上的下一个节点（两个节点要相邻）</strong>。一个帧可能被沿途不同链路上的不同链路层协议处理。</p>\n<ul>\n<li>PPP</li>\n</ul>\n<h4 id=\"物理层（比特流）\"><a href=\"#物理层（比特流）\" class=\"headerlink\" title=\"物理层（比特流）\"></a>物理层（比特流）</h4><p>物理层的任务是将<strong>帧中的比特</strong>从一个结点移动到下一个节点，它提供了传输信息的实际物理通道；</p>\n<h3 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h3><p>一个分组，在不同的层次有不同的称谓，是因为它们经过每一层的时候就被该层<strong>封装上了属于该层的相关信息</strong>，也就是前面提到的必要信息；于是，每一分层的分组有两种类型的字段：<strong>首部字段</strong>和<strong>有效负载</strong>；其中有效负载即为来自上一层的分组数据，而首部字段就是该层加上的必要信息；分组不断被封装以实现各层协议规定的相关功能</p>\n<p><img src=\"http://cdn.ziyedy.top/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%8E%E8%8B%B1%E7%89%B9%E7%BD%91/%E7%BD%91%E7%BB%9C%E5%B1%82%E6%AC%A1%E6%8E%A5%E5%8F%A3%E6%A8%A1%E5%9E%8B.png\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>《计算机网络——自顶向下方法》</p>\n<p><a href=\"https://blog.csdn.net/qq_39326472/article/details/88089747\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_39326472/article/details/88089747</a></p>\n"},{"title":"单例模式","date":"2021-02-22T14:00:22.000Z","fileName":"singleton-pattern","_content":"\n## 单例\n\n> 保证一个类仅有一个实例，并提供一个全局访问点（创建型）\n\n在内存中只有一个实例，减少内存开销，避免资源多重占用\n\n没有接口，拓展比较困难，私有构造器，线程安全，延迟加载\n\n序列化反序列化\n\n反射\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/学习笔记/设计模式/单例模式.md","raw":"---\ntitle: 单例模式\ndate: 2021-02-22 22:00:22\ntags:\n\t- 设计模式\ncategories:\n\t- 学习笔记\n\t- 设计模式\nfileName: singleton-pattern\n---\n\n## 单例\n\n> 保证一个类仅有一个实例，并提供一个全局访问点（创建型）\n\n在内存中只有一个实例，减少内存开销，避免资源多重占用\n\n没有接口，拓展比较困难，私有构造器，线程安全，延迟加载\n\n序列化反序列化\n\n反射\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"学习笔记/设计模式/单例模式","published":1,"updated":"2021-02-28T15:52:17.206Z","_id":"cklp5nhpf000f8sjsda1rfj1q","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h2><blockquote>\n<p>保证一个类仅有一个实例，并提供一个全局访问点（创建型）</p>\n</blockquote>\n<p>在内存中只有一个实例，减少内存开销，避免资源多重占用</p>\n<p>没有接口，拓展比较困难，私有构造器，线程安全，延迟加载</p>\n<p>序列化反序列化</p>\n<p>反射</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h2><blockquote>\n<p>保证一个类仅有一个实例，并提供一个全局访问点（创建型）</p>\n</blockquote>\n<p>在内存中只有一个实例，减少内存开销，避免资源多重占用</p>\n<p>没有接口，拓展比较困难，私有构造器，线程安全，延迟加载</p>\n<p>序列化反序列化</p>\n<p>反射</p>\n"},{"title":"设计模式六大原则","date":"2021-02-02T04:38:06.000Z","fileName":"design-pattern-6-principle","_content":"\n## 开闭原则\n\n> 一个软件实体如类、模块和函数应该**对拓展开放，对修改关闭**\n\n越基层的模块影响越大，越高层的影响越小\n\n\n\n应用层改变\n\n\n\n\n\n## 依赖倒置原则\n\n### 概念\n\n> 高层模块不应该依赖低层模块，二者都应该依赖其**抽象**\n>\n> 依赖倒置原则可以减少类间的耦合性、提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险\n\n在Java中集中表现在**面向接口编程**的思想\n\n1. 模块间的依赖通过抽象发生，*实现类之间不直接发生依赖关系*（依赖通过相同的接口产生）\n2. 接口与抽象类不依赖于实现类，而实现类依赖于接口与抽象类\n\n### 举例\n\n\n\n\n\n\n\n## 单一职责原则\n\n> 不要存在多于一个导致类变更的原因，一个类/接口/方法只负责一项职责\n>\n> 优点：可以降低类的复杂度，提高类的可读性，提高系统的可维护性\n\n单一职责原则很好理解，在面向接口编程中即表现为*一个类实现多个接口*，将多个接口的职责融合在一起，从而将接口解耦合\n\n\n\n## 接口隔离原则\n\n> 用多个专门的接口，而不使用单一的总接口（尽量细化接口，接口中的方法尽量少）\n>\n> 符合高内聚低耦合的设计思想，从而使类具有很好的可读性、可拓展性和可维护性\n\n\n\n\n\n## 迪米特法则\n\n> 一个对象应该对其他对象保持最少的了解，即“最少知道原则”，尽量降低类之间的耦合","source":"_posts/学习笔记/设计模式/设计模式六大原则.md","raw":"---\ntitle: 设计模式六大原则\ndate: 2021-02-02 12:38:06\ntags:\n\t- 设计模式\ncategories:\n\t- 学习笔记\n\t- 设计模式\nfileName: design-pattern-6-principle\n---\n\n## 开闭原则\n\n> 一个软件实体如类、模块和函数应该**对拓展开放，对修改关闭**\n\n越基层的模块影响越大，越高层的影响越小\n\n\n\n应用层改变\n\n\n\n\n\n## 依赖倒置原则\n\n### 概念\n\n> 高层模块不应该依赖低层模块，二者都应该依赖其**抽象**\n>\n> 依赖倒置原则可以减少类间的耦合性、提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险\n\n在Java中集中表现在**面向接口编程**的思想\n\n1. 模块间的依赖通过抽象发生，*实现类之间不直接发生依赖关系*（依赖通过相同的接口产生）\n2. 接口与抽象类不依赖于实现类，而实现类依赖于接口与抽象类\n\n### 举例\n\n\n\n\n\n\n\n## 单一职责原则\n\n> 不要存在多于一个导致类变更的原因，一个类/接口/方法只负责一项职责\n>\n> 优点：可以降低类的复杂度，提高类的可读性，提高系统的可维护性\n\n单一职责原则很好理解，在面向接口编程中即表现为*一个类实现多个接口*，将多个接口的职责融合在一起，从而将接口解耦合\n\n\n\n## 接口隔离原则\n\n> 用多个专门的接口，而不使用单一的总接口（尽量细化接口，接口中的方法尽量少）\n>\n> 符合高内聚低耦合的设计思想，从而使类具有很好的可读性、可拓展性和可维护性\n\n\n\n\n\n## 迪米特法则\n\n> 一个对象应该对其他对象保持最少的了解，即“最少知道原则”，尽量降低类之间的耦合","slug":"学习笔记/设计模式/设计模式六大原则","published":1,"updated":"2021-02-28T15:52:23.754Z","_id":"cklp5nhpk000i8sjs7ot2ag0o","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><blockquote>\n<p>一个软件实体如类、模块和函数应该<strong>对拓展开放，对修改关闭</strong></p>\n</blockquote>\n<p>越基层的模块影响越大，越高层的影响越小</p>\n<p>应用层改变</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>高层模块不应该依赖低层模块，二者都应该依赖其<strong>抽象</strong></p>\n<p>依赖倒置原则可以减少类间的耦合性、提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险</p>\n</blockquote>\n<p>在Java中集中表现在<strong>面向接口编程</strong>的思想</p>\n<ol>\n<li>模块间的依赖通过抽象发生，<em>实现类之间不直接发生依赖关系</em>（依赖通过相同的接口产生）</li>\n<li>接口与抽象类不依赖于实现类，而实现类依赖于接口与抽象类</li>\n</ol>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><blockquote>\n<p>不要存在多于一个导致类变更的原因，一个类/接口/方法只负责一项职责</p>\n<p>优点：可以降低类的复杂度，提高类的可读性，提高系统的可维护性</p>\n</blockquote>\n<p>单一职责原则很好理解，在面向接口编程中即表现为<em>一个类实现多个接口</em>，将多个接口的职责融合在一起，从而将接口解耦合</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><blockquote>\n<p>用多个专门的接口，而不使用单一的总接口（尽量细化接口，接口中的方法尽量少）</p>\n<p>符合高内聚低耦合的设计思想，从而使类具有很好的可读性、可拓展性和可维护性</p>\n</blockquote>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><blockquote>\n<p>一个对象应该对其他对象保持最少的了解，即“最少知道原则”，尽量降低类之间的耦合</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><blockquote>\n<p>一个软件实体如类、模块和函数应该<strong>对拓展开放，对修改关闭</strong></p>\n</blockquote>\n<p>越基层的模块影响越大，越高层的影响越小</p>\n<p>应用层改变</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>高层模块不应该依赖低层模块，二者都应该依赖其<strong>抽象</strong></p>\n<p>依赖倒置原则可以减少类间的耦合性、提高系统稳定性，提高代码可读性和可维护性，降低修改程序所造成的风险</p>\n</blockquote>\n<p>在Java中集中表现在<strong>面向接口编程</strong>的思想</p>\n<ol>\n<li>模块间的依赖通过抽象发生，<em>实现类之间不直接发生依赖关系</em>（依赖通过相同的接口产生）</li>\n<li>接口与抽象类不依赖于实现类，而实现类依赖于接口与抽象类</li>\n</ol>\n<h3 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h3><h2 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h2><blockquote>\n<p>不要存在多于一个导致类变更的原因，一个类/接口/方法只负责一项职责</p>\n<p>优点：可以降低类的复杂度，提高类的可读性，提高系统的可维护性</p>\n</blockquote>\n<p>单一职责原则很好理解，在面向接口编程中即表现为<em>一个类实现多个接口</em>，将多个接口的职责融合在一起，从而将接口解耦合</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><blockquote>\n<p>用多个专门的接口，而不使用单一的总接口（尽量细化接口，接口中的方法尽量少）</p>\n<p>符合高内聚低耦合的设计思想，从而使类具有很好的可读性、可拓展性和可维护性</p>\n</blockquote>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><blockquote>\n<p>一个对象应该对其他对象保持最少的了解，即“最少知道原则”，尽量降低类之间的耦合</p>\n</blockquote>\n"},{"title":"工厂模式","date":"2021-02-22T13:59:05.000Z","fileName":"factory-pattern","_content":"\n## 简单工厂模式\n\n> 简单工厂模式不属于23种设计模式，指的是*由一个工厂对象决定创建出哪一种产品类的实例*\n\n\n\n```java\n// 接口\npublic interface NBAPlayer {\n    void getName();\n}\n\n// 实现类1\npublic class KobeBryant implements NBAPlayer {\n    @Override\n    public void getName() {\n        System.out.println(\"Kobe\");\n    }\n}\n\n// 工厂类\npublic class NBAFactory {\n    public NBAPlayer getNBAPlayer(String name) {\n        if(\"Kobe\".equals(name)) {\n            return new KobeBryant();\n        } else if(\"LeBron\".equals(name)) {\n            return new LeBronJames();\n        }\n        return null;\n    }\n}\n\n// 主方法\npublic class Main {\n    public static void main(String[] args) {\n        NBAFactory factory = new NBAFactory();\t// 创建工厂类\n        NBAPlayer player = factory.getNBAPlayer(\"Kobe\");\t// 通过工厂类创建主方法 \n        player.getName();\t// 调用对应成员方法 Kobe\n    }\n}\n```\n\n\n\n\n\n工厂类职责过重，创建新的类时需要修改工厂类的判断逻辑，违背开闭原则\n\n\n\n## 工厂模式\n\n\n\n类的个数容易过多，增加复杂度，增加了系统的抽象性和理解难度","source":"_posts/学习笔记/设计模式/工厂模式.md","raw":"---\ntitle: 工厂模式\ndate: 2021-02-22 21:59:05\ntags:\n\t- 设计模式\ncategories:\n\t- 学习笔记\n\t- 设计模式\nfileName: factory-pattern\n---\n\n## 简单工厂模式\n\n> 简单工厂模式不属于23种设计模式，指的是*由一个工厂对象决定创建出哪一种产品类的实例*\n\n\n\n```java\n// 接口\npublic interface NBAPlayer {\n    void getName();\n}\n\n// 实现类1\npublic class KobeBryant implements NBAPlayer {\n    @Override\n    public void getName() {\n        System.out.println(\"Kobe\");\n    }\n}\n\n// 工厂类\npublic class NBAFactory {\n    public NBAPlayer getNBAPlayer(String name) {\n        if(\"Kobe\".equals(name)) {\n            return new KobeBryant();\n        } else if(\"LeBron\".equals(name)) {\n            return new LeBronJames();\n        }\n        return null;\n    }\n}\n\n// 主方法\npublic class Main {\n    public static void main(String[] args) {\n        NBAFactory factory = new NBAFactory();\t// 创建工厂类\n        NBAPlayer player = factory.getNBAPlayer(\"Kobe\");\t// 通过工厂类创建主方法 \n        player.getName();\t// 调用对应成员方法 Kobe\n    }\n}\n```\n\n\n\n\n\n工厂类职责过重，创建新的类时需要修改工厂类的判断逻辑，违背开闭原则\n\n\n\n## 工厂模式\n\n\n\n类的个数容易过多，增加复杂度，增加了系统的抽象性和理解难度","slug":"学习笔记/设计模式/工厂模式","published":1,"updated":"2021-02-28T15:52:20.621Z","_id":"cklp5nhpl000k8sjs7yo6dzr6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><blockquote>\n<p>简单工厂模式不属于23种设计模式，指的是<em>由一个工厂对象决定创建出哪一种产品类的实例</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 接口</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">NBAPlayer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 实现类1</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KobeBryant</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NBAPlayer</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Kobe\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 工厂类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NBAFactory</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> NBAPlayer <span class=\"hljs-title\">getNBAPlayer</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"Kobe\"</span>.equals(name)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> KobeBryant();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"LeBron\"</span>.equals(name)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LeBronJames();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 主方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        NBAFactory factory = <span class=\"hljs-keyword\">new</span> NBAFactory();\t<span class=\"hljs-comment\">// 创建工厂类</span><br>        NBAPlayer player = factory.getNBAPlayer(<span class=\"hljs-string\">\"Kobe\"</span>);\t<span class=\"hljs-comment\">// 通过工厂类创建主方法 </span><br>        player.getName();\t<span class=\"hljs-comment\">// 调用对应成员方法 Kobe</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>工厂类职责过重，创建新的类时需要修改工厂类的判断逻辑，违背开闭原则</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>类的个数容易过多，增加复杂度，增加了系统的抽象性和理解难度</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><blockquote>\n<p>简单工厂模式不属于23种设计模式，指的是<em>由一个工厂对象决定创建出哪一种产品类的实例</em></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 接口</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">NBAPlayer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span></span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 实现类1</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">KobeBryant</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">NBAPlayer</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Kobe\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 工厂类</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NBAFactory</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> NBAPlayer <span class=\"hljs-title\">getNBAPlayer</span><span class=\"hljs-params\">(String name)</span> </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"Kobe\"</span>.equals(name)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> KobeBryant();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-string\">\"LeBron\"</span>.equals(name)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LeBronJames();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 主方法</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>        NBAFactory factory = <span class=\"hljs-keyword\">new</span> NBAFactory();\t<span class=\"hljs-comment\">// 创建工厂类</span><br>        NBAPlayer player = factory.getNBAPlayer(<span class=\"hljs-string\">\"Kobe\"</span>);\t<span class=\"hljs-comment\">// 通过工厂类创建主方法 </span><br>        player.getName();\t<span class=\"hljs-comment\">// 调用对应成员方法 Kobe</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>工厂类职责过重，创建新的类时需要修改工厂类的判断逻辑，违背开闭原则</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><p>类的个数容易过多，增加复杂度，增加了系统的抽象性和理解难度</p>\n"},{"title":"Blender使用Python脚本的基本渲染操作","date":"2020-09-13T01:17:32.000Z","top":true,"fileName":"blender-python-script-basic","_content":"\n> 渲染可以简单理解为将3D场景转化为2D场景的过程\n\n## bpy模块\n\nbpy模块是blender脚本插件核心库\n\n### bpy.ops\n\n> 对于操纵3D对象，最重要的两个类是`bpy.ops.object`和`bpy.ops.mesh`\n>\n> Object类包含用于同时操作多个选定对象的函数以及许多常规实用程序。Mesh类包含用于一次操作一个对象的顶点、边和面的函数\n\n### bpy.context\n\n> context（正文）是blender数据管理中的一个全局变量集合，它包含了目前被选择的和激活的（物体的两种属性状态）的物体的信息，还记录了当前物体的编辑模式\n> 用于按各种状态条件访问 Blender 的对象和区域（如用户选定的对象），用于将我们指向对象组（即`bpy.context`类将生成对`bpy.data`类的数据块的引用）\n\n```\n# 访问选定对象的列表\nbpy.context.selected_objects\n\n# 访问目前激活的对象\nbpy.context.active_object\n```\n\n\n\n### bpy.data\n\n> blender界面上所有可使用调节的对象内容（包括mesh模型、lamp灯光、camera摄像机，material材质等）都在python中以特定的类型存储起来\n>\n> 用于访问Blender的内部数据，包含确定对象形状和位置的所有数据\n\n访问出现的对象\n\n```\nbpy.data.objects  #访问场景内普通对象列表，包括lamp、camera以及mesh模型的\nbpy.data.scenes  #访问场景列表\nbpy.data.materials  #访问材质对象列表\n```\n\n访问具体的对象\n\n```\nbpy.data.objects['Cube']  #访问名为`Cube`的对象\nbpy.data.objects[1]  #访问列表中的第1个对象\n```\n\n访问对象属性\n\n```\nbpy.data.objects['Cube'].name #访问对象名称\nbpy.data.objects['Cube'].location #访问对象的位置\n```\n\n\n\n## 常用基本操作\n\n### 选择对象\n\n```\n# 选中所有\nbpy.ops.object.select_all(action='SELECT')\n\n# 取消所有选中\nbpy.ops.object.select_all(action='DESELECT')\n\n#通过select_pattern命令来按照物体命名查找选定物体，支持通配符*模糊匹配\nbpy.ops.object.select_pattern(pattern=\"Cube\", case_sensitive=False, extend=True)\n\n# 选中名为Cube的对象\nbpy.data.objects['Cube'].select_set(True)\n```\n\n### 对选中物体进行缩放\n\n```\n# 按 x y z 进行缩放\nbpy.ops.transform.resize(value=(1.1, 1.2, 1.4))\n```\n\n### 对选中物体进行旋转\n\n```\n# 绕 Z轴 旋转 3.14 弧度\nbpy.ops.transform.rotate(value=3.14, orient_axis='Z')\n```\n\n### 对选中物体进行平移操作\n\n```\n# 按 x y z 方向平移物体\nbpy.ops.transform.translate(value=(1, -2, 3))\n\n# 设置位置\nbpy.data.objects['Cube'].location = (1, 2, 3)\n```\n\n\n\n\n\n## 灯光操作\n\n```\n# 新建一个点光源\nlight_data = bpy.data.lights.new(name='Light', type='POINT')\n\n# 设置该光源的一些属性（具体属性可查看文档）\nlight_data.distance = 2400.\nlight_data.use_nodes = True\nlight_data.energy = 5\n\n# 激活灯光\nlight = bpy.data.objects.new(name=\"Light\", object_data=light_data)\nscene.objects.link(light)\nbpy.context.view_layer.objects.active = light\n\n# 脚本使用完毕后删除灯光\nbpy.data.objects['Light'+str(i)].select_set(True)\nbpy.ops.object.delete()\n```\n\n\n\n## 相机操作\n\n### 改变相机指向\n\n```\ndef look_at(obj_camera, point=Vector((0, 0, 0))):\n\t\"\"\"\n\t使相机指向point点\n\t\"\"\"\n    loc_camera = obj_camera.location\n    direction = point - loc_camera\n    rot_quat = direction.to_track_quat('-Z', 'Y')\n    obj_camera.rotation_euler = rot_quat.to_euler()\n```\n\n\n\n## 实现多角度渲染物体\n\n> 实现多角度渲染物体生成物体模板主要需要进行以下工作\n>\n> 1、合理设置相机的位置（以LineMOD方法为例就利用球面的几何特征设置相机位置）\n>\n> 2、合理布局灯光（调整使得灯光能够覆盖）\n>\n> 3、得到此时相机的Rt变换矩阵用于标识该角度下物体的姿态\n>\n> 4、输入模型，进行渲染输出图片\n\n第1点和第2点其实就是之前的灯光操作与相机操作\n\n### 进行模型渲染\n\n#### 导入模型\n\n以.obj文件为例，其余文件格式的导入方法可以查官方文档（导入的模型默认的位置为坐标原点）\n\n```\n# 导入.obj文件\nbpy.ops.import_scene.obj(filepath=obj_path)\n```\n\n除导入模型外，就是合理设置输入路径和输出路径了，这个可以用os等模块进行处理\n\n#### 设置渲染输出的基本信息\n\n根据官网可以设置输出分辨率等基本信息\n\n```\ncontext = bpy.context\nscene = context.scene\n\nscene.render.engine = 'CYCLES'\nscene.render.film_transparent = True\nscene.render.resolution_x = 360\nscene.render.resolution_y = 360\nscene.render.image_settings.file_format = 'PNG'\n```\n\n#### 渲染输出\n\n```\n# 设置输出路径\nscene.render.filepath = output_path + \"0\".zfill(5) + \".png\"\n\n# 渲染输出\nbpy.ops.render.render(write_still=True, use_viewport=False)\n```\n\n#### 渲染结果\n\n渲染结果如下，实现了**模型的批量渲染处理**\n\n![](http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C1.png)\n\n![](http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C2.png)\n\n## 总结\n\n总而言之，blender插件脚本的python开发是一个文档相对欠缺（官方文档写的我个人认为很烂）而且不同版本之间差别较大的二次开发工具。\n\n如果没有特别的要求非得使用blender，我的建议是能不用就不用（尤其对于新手）。顺带一提，blender内置的Python脚本开发环境也极其糟糕，理论上vscode内是有相应的插件的，但bug较多我个人认为也很不好用。\n\n之后如果还会使用blender的话我会写一个专题好好记录一下学习的过程（希望不会有这一天）\n\n### 参考\n\nhttps://github.com/zju3dv/pvnet-rendering\n","source":"_posts/编程相关/Python/Blender使用Python脚本的基本渲染操作.md","raw":"---\ntitle: Blender使用Python脚本的基本渲染操作\ndate: 2020-09-13 09:17:32\ntags:\n\t- Blender\ncategories:\n\t- 编程相关\n\t- Python\ntop: true\nfileName: blender-python-script-basic\n---\n\n> 渲染可以简单理解为将3D场景转化为2D场景的过程\n\n## bpy模块\n\nbpy模块是blender脚本插件核心库\n\n### bpy.ops\n\n> 对于操纵3D对象，最重要的两个类是`bpy.ops.object`和`bpy.ops.mesh`\n>\n> Object类包含用于同时操作多个选定对象的函数以及许多常规实用程序。Mesh类包含用于一次操作一个对象的顶点、边和面的函数\n\n### bpy.context\n\n> context（正文）是blender数据管理中的一个全局变量集合，它包含了目前被选择的和激活的（物体的两种属性状态）的物体的信息，还记录了当前物体的编辑模式\n> 用于按各种状态条件访问 Blender 的对象和区域（如用户选定的对象），用于将我们指向对象组（即`bpy.context`类将生成对`bpy.data`类的数据块的引用）\n\n```\n# 访问选定对象的列表\nbpy.context.selected_objects\n\n# 访问目前激活的对象\nbpy.context.active_object\n```\n\n\n\n### bpy.data\n\n> blender界面上所有可使用调节的对象内容（包括mesh模型、lamp灯光、camera摄像机，material材质等）都在python中以特定的类型存储起来\n>\n> 用于访问Blender的内部数据，包含确定对象形状和位置的所有数据\n\n访问出现的对象\n\n```\nbpy.data.objects  #访问场景内普通对象列表，包括lamp、camera以及mesh模型的\nbpy.data.scenes  #访问场景列表\nbpy.data.materials  #访问材质对象列表\n```\n\n访问具体的对象\n\n```\nbpy.data.objects['Cube']  #访问名为`Cube`的对象\nbpy.data.objects[1]  #访问列表中的第1个对象\n```\n\n访问对象属性\n\n```\nbpy.data.objects['Cube'].name #访问对象名称\nbpy.data.objects['Cube'].location #访问对象的位置\n```\n\n\n\n## 常用基本操作\n\n### 选择对象\n\n```\n# 选中所有\nbpy.ops.object.select_all(action='SELECT')\n\n# 取消所有选中\nbpy.ops.object.select_all(action='DESELECT')\n\n#通过select_pattern命令来按照物体命名查找选定物体，支持通配符*模糊匹配\nbpy.ops.object.select_pattern(pattern=\"Cube\", case_sensitive=False, extend=True)\n\n# 选中名为Cube的对象\nbpy.data.objects['Cube'].select_set(True)\n```\n\n### 对选中物体进行缩放\n\n```\n# 按 x y z 进行缩放\nbpy.ops.transform.resize(value=(1.1, 1.2, 1.4))\n```\n\n### 对选中物体进行旋转\n\n```\n# 绕 Z轴 旋转 3.14 弧度\nbpy.ops.transform.rotate(value=3.14, orient_axis='Z')\n```\n\n### 对选中物体进行平移操作\n\n```\n# 按 x y z 方向平移物体\nbpy.ops.transform.translate(value=(1, -2, 3))\n\n# 设置位置\nbpy.data.objects['Cube'].location = (1, 2, 3)\n```\n\n\n\n\n\n## 灯光操作\n\n```\n# 新建一个点光源\nlight_data = bpy.data.lights.new(name='Light', type='POINT')\n\n# 设置该光源的一些属性（具体属性可查看文档）\nlight_data.distance = 2400.\nlight_data.use_nodes = True\nlight_data.energy = 5\n\n# 激活灯光\nlight = bpy.data.objects.new(name=\"Light\", object_data=light_data)\nscene.objects.link(light)\nbpy.context.view_layer.objects.active = light\n\n# 脚本使用完毕后删除灯光\nbpy.data.objects['Light'+str(i)].select_set(True)\nbpy.ops.object.delete()\n```\n\n\n\n## 相机操作\n\n### 改变相机指向\n\n```\ndef look_at(obj_camera, point=Vector((0, 0, 0))):\n\t\"\"\"\n\t使相机指向point点\n\t\"\"\"\n    loc_camera = obj_camera.location\n    direction = point - loc_camera\n    rot_quat = direction.to_track_quat('-Z', 'Y')\n    obj_camera.rotation_euler = rot_quat.to_euler()\n```\n\n\n\n## 实现多角度渲染物体\n\n> 实现多角度渲染物体生成物体模板主要需要进行以下工作\n>\n> 1、合理设置相机的位置（以LineMOD方法为例就利用球面的几何特征设置相机位置）\n>\n> 2、合理布局灯光（调整使得灯光能够覆盖）\n>\n> 3、得到此时相机的Rt变换矩阵用于标识该角度下物体的姿态\n>\n> 4、输入模型，进行渲染输出图片\n\n第1点和第2点其实就是之前的灯光操作与相机操作\n\n### 进行模型渲染\n\n#### 导入模型\n\n以.obj文件为例，其余文件格式的导入方法可以查官方文档（导入的模型默认的位置为坐标原点）\n\n```\n# 导入.obj文件\nbpy.ops.import_scene.obj(filepath=obj_path)\n```\n\n除导入模型外，就是合理设置输入路径和输出路径了，这个可以用os等模块进行处理\n\n#### 设置渲染输出的基本信息\n\n根据官网可以设置输出分辨率等基本信息\n\n```\ncontext = bpy.context\nscene = context.scene\n\nscene.render.engine = 'CYCLES'\nscene.render.film_transparent = True\nscene.render.resolution_x = 360\nscene.render.resolution_y = 360\nscene.render.image_settings.file_format = 'PNG'\n```\n\n#### 渲染输出\n\n```\n# 设置输出路径\nscene.render.filepath = output_path + \"0\".zfill(5) + \".png\"\n\n# 渲染输出\nbpy.ops.render.render(write_still=True, use_viewport=False)\n```\n\n#### 渲染结果\n\n渲染结果如下，实现了**模型的批量渲染处理**\n\n![](http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C1.png)\n\n![](http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C2.png)\n\n## 总结\n\n总而言之，blender插件脚本的python开发是一个文档相对欠缺（官方文档写的我个人认为很烂）而且不同版本之间差别较大的二次开发工具。\n\n如果没有特别的要求非得使用blender，我的建议是能不用就不用（尤其对于新手）。顺带一提，blender内置的Python脚本开发环境也极其糟糕，理论上vscode内是有相应的插件的，但bug较多我个人认为也很不好用。\n\n之后如果还会使用blender的话我会写一个专题好好记录一下学习的过程（希望不会有这一天）\n\n### 参考\n\nhttps://github.com/zju3dv/pvnet-rendering\n","slug":"编程相关/Python/Blender使用Python脚本的基本渲染操作","published":1,"updated":"2021-02-28T04:30:19.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpm000m8sjsh506ffoq","content":"<blockquote>\n<p>渲染可以简单理解为将3D场景转化为2D场景的过程</p>\n</blockquote>\n<h2 id=\"bpy模块\"><a href=\"#bpy模块\" class=\"headerlink\" title=\"bpy模块\"></a>bpy模块</h2><p>bpy模块是blender脚本插件核心库</p>\n<h3 id=\"bpy-ops\"><a href=\"#bpy-ops\" class=\"headerlink\" title=\"bpy.ops\"></a>bpy.ops</h3><blockquote>\n<p>对于操纵3D对象，最重要的两个类是<code>bpy.ops.object</code>和<code>bpy.ops.mesh</code></p>\n<p>Object类包含用于同时操作多个选定对象的函数以及许多常规实用程序。Mesh类包含用于一次操作一个对象的顶点、边和面的函数</p>\n</blockquote>\n<h3 id=\"bpy-context\"><a href=\"#bpy-context\" class=\"headerlink\" title=\"bpy.context\"></a>bpy.context</h3><blockquote>\n<p>context（正文）是blender数据管理中的一个全局变量集合，它包含了目前被选择的和激活的（物体的两种属性状态）的物体的信息，还记录了当前物体的编辑模式<br>用于按各种状态条件访问 Blender 的对象和区域（如用户选定的对象），用于将我们指向对象组（即<code>bpy.context</code>类将生成对<code>bpy.data</code>类的数据块的引用）</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"># 访问选定对象的列表<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.context</span><span class=\"hljs-selector-class\">.selected_objects</span><br><br># 访问目前激活的对象<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.context</span><span class=\"hljs-selector-class\">.active_object</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"bpy-data\"><a href=\"#bpy-data\" class=\"headerlink\" title=\"bpy.data\"></a>bpy.data</h3><blockquote>\n<p>blender界面上所有可使用调节的对象内容（包括mesh模型、lamp灯光、camera摄像机，material材质等）都在python中以特定的类型存储起来</p>\n<p>用于访问Blender的内部数据，包含确定对象形状和位置的所有数据</p>\n</blockquote>\n<p>访问出现的对象</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span>  #访问场景内普通对象列表，包括<span class=\"hljs-selector-tag\">lamp</span>、<span class=\"hljs-selector-tag\">camera</span>以及<span class=\"hljs-selector-tag\">mesh</span>模型的<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.scenes</span>  #访问场景列表<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.materials</span>  #访问材质对象列表<br></code></pre></td></tr></table></figure>\n\n<p>访问具体的对象</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span>  #访问名为`<span class=\"hljs-selector-tag\">Cube</span>`的对象<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[1]</span>  #访问列表中的第1个对象<br></code></pre></td></tr></table></figure>\n\n<p>访问对象属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span><span class=\"hljs-selector-class\">.name</span> #访问对象名称<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span><span class=\"hljs-selector-class\">.location</span> #访问对象的位置<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用基本操作\"><a href=\"#常用基本操作\" class=\"headerlink\" title=\"常用基本操作\"></a>常用基本操作</h2><h3 id=\"选择对象\"><a href=\"#选择对象\" class=\"headerlink\" title=\"选择对象\"></a>选择对象</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 选中所有</span><br>bpy.ops.object.select_all(<span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">'SELECT'</span>)<br><br><span class=\"hljs-comment\"># 取消所有选中</span><br>bpy.ops.object.select_all(<span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">'DESELECT'</span>)<br><br><span class=\"hljs-comment\">#通过select_pattern命令来按照物体命名查找选定物体，支持通配符*模糊匹配</span><br>bpy.ops.object.select_pattern(<span class=\"hljs-attribute\">pattern</span>=<span class=\"hljs-string\">\"Cube\"</span>, <span class=\"hljs-attribute\">case_sensitive</span>=<span class=\"hljs-literal\">False</span>, <span class=\"hljs-attribute\">extend</span>=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-comment\"># 选中名为Cube的对象</span><br>bpy.data.objects[<span class=\"hljs-string\">'Cube'</span>].select_set(<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行缩放\"><a href=\"#对选中物体进行缩放\" class=\"headerlink\" title=\"对选中物体进行缩放\"></a>对选中物体进行缩放</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 按 x y z 进行缩放<br>bpy.ops.transform.resize(value=(<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">1.4</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行旋转\"><a href=\"#对选中物体进行旋转\" class=\"headerlink\" title=\"对选中物体进行旋转\"></a>对选中物体进行旋转</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 绕 Z轴 旋转 3.14 弧度</span><br>bpy.ops.transform.rotate(<span class=\"hljs-attribute\">value</span>=3.14, <span class=\"hljs-attribute\">orient_axis</span>=<span class=\"hljs-string\">'Z'</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行平移操作\"><a href=\"#对选中物体进行平移操作\" class=\"headerlink\" title=\"对选中物体进行平移操作\"></a>对选中物体进行平移操作</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 按 x y z 方向平移物体<br>bpy.ops.transform.translate(value=(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">3</span>))<br><br># 设置位置<br>bpy.data.objects[<span class=\"hljs-string\">'Cube'</span>].location = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"灯光操作\"><a href=\"#灯光操作\" class=\"headerlink\" title=\"灯光操作\"></a>灯光操作</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 新建一个点光源</span><br>light_data = bpy.data.lights.new(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">'Light'</span>, <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">'POINT'</span>)<br><br><span class=\"hljs-comment\"># 设置该光源的一些属性（具体属性可查看文档）</span><br>light_data.distance = 2400.<br>light_data.use_nodes = <span class=\"hljs-literal\">True</span><br>light_data.energy = 5<br><br><span class=\"hljs-comment\"># 激活灯光</span><br>light = bpy.data.objects.new(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Light\"</span>, <span class=\"hljs-attribute\">object_data</span>=light_data)<br>scene.objects.link(light)<br>bpy.context.view_layer.objects.active = light<br><br><span class=\"hljs-comment\"># 脚本使用完毕后删除灯光</span><br>bpy.data.objects[<span class=\"hljs-string\">'Light'</span>+str(i)].select_set(<span class=\"hljs-literal\">True</span>)<br>bpy.ops.object.delete()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h2><h3 id=\"改变相机指向\"><a href=\"#改变相机指向\" class=\"headerlink\" title=\"改变相机指向\"></a>改变相机指向</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">look_at</span><span class=\"hljs-params\">(obj_camera, point=Vector<span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>)</span>)</span>:</span><br>\t<span class=\"hljs-string\">\"\"\"<br>\t使相机指向point点<br>\t\"\"\"</span><br>    loc_camera = obj_camera.location<br>    direction = point - loc_camera<br>    rot_quat = direction.to_track_quat(<span class=\"hljs-string\">'-Z'</span>, <span class=\"hljs-string\">'Y'</span>)<br>    obj_camera.rotation_euler = rot_quat.to_euler()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现多角度渲染物体\"><a href=\"#实现多角度渲染物体\" class=\"headerlink\" title=\"实现多角度渲染物体\"></a>实现多角度渲染物体</h2><blockquote>\n<p>实现多角度渲染物体生成物体模板主要需要进行以下工作</p>\n<p>1、合理设置相机的位置（以LineMOD方法为例就利用球面的几何特征设置相机位置）</p>\n<p>2、合理布局灯光（调整使得灯光能够覆盖）</p>\n<p>3、得到此时相机的Rt变换矩阵用于标识该角度下物体的姿态</p>\n<p>4、输入模型，进行渲染输出图片</p>\n</blockquote>\n<p>第1点和第2点其实就是之前的灯光操作与相机操作</p>\n<h3 id=\"进行模型渲染\"><a href=\"#进行模型渲染\" class=\"headerlink\" title=\"进行模型渲染\"></a>进行模型渲染</h3><h4 id=\"导入模型\"><a href=\"#导入模型\" class=\"headerlink\" title=\"导入模型\"></a>导入模型</h4><p>以.obj文件为例，其余文件格式的导入方法可以查官方文档（导入的模型默认的位置为坐标原点）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 导入.obj文件</span><br>bpy.ops.import_scene.obj(<span class=\"hljs-attribute\">filepath</span>=obj_path)<br></code></pre></td></tr></table></figure>\n\n<p>除导入模型外，就是合理设置输入路径和输出路径了，这个可以用os等模块进行处理</p>\n<h4 id=\"设置渲染输出的基本信息\"><a href=\"#设置渲染输出的基本信息\" class=\"headerlink\" title=\"设置渲染输出的基本信息\"></a>设置渲染输出的基本信息</h4><p>根据官网可以设置输出分辨率等基本信息</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">context</span> = bpy.context<br><span class=\"hljs-attr\">scene</span> = context.scene<br><br><span class=\"hljs-attr\">scene.render.engine</span> = <span class=\"hljs-string\">'CYCLES'</span><br><span class=\"hljs-attr\">scene.render.film_transparent</span> = <span class=\"hljs-literal\">True</span><br><span class=\"hljs-attr\">scene.render.resolution_x</span> = <span class=\"hljs-number\">360</span><br><span class=\"hljs-attr\">scene.render.resolution_y</span> = <span class=\"hljs-number\">360</span><br><span class=\"hljs-attr\">scene.render.image_settings.file_format</span> = <span class=\"hljs-string\">'PNG'</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"渲染输出\"><a href=\"#渲染输出\" class=\"headerlink\" title=\"渲染输出\"></a>渲染输出</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 设置输出路径</span><br>scene.render.filepath = output_path + <span class=\"hljs-string\">\"0\"</span>.zfill(5) + <span class=\"hljs-string\">\".png\"</span><br><br><span class=\"hljs-comment\"># 渲染输出</span><br>bpy.ops.render.render(<span class=\"hljs-attribute\">write_still</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">use_viewport</span>=<span class=\"hljs-literal\">False</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h4><p>渲染结果如下，实现了<strong>模型的批量渲染处理</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C1.png\" alt=\"\"></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C2.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，blender插件脚本的python开发是一个文档相对欠缺（官方文档写的我个人认为很烂）而且不同版本之间差别较大的二次开发工具。</p>\n<p>如果没有特别的要求非得使用blender，我的建议是能不用就不用（尤其对于新手）。顺带一提，blender内置的Python脚本开发环境也极其糟糕，理论上vscode内是有相应的插件的，但bug较多我个人认为也很不好用。</p>\n<p>之后如果还会使用blender的话我会写一个专题好好记录一下学习的过程（希望不会有这一天）</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://github.com/zju3dv/pvnet-rendering\" target=\"_blank\" rel=\"noopener\">https://github.com/zju3dv/pvnet-rendering</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>渲染可以简单理解为将3D场景转化为2D场景的过程</p>\n</blockquote>\n<h2 id=\"bpy模块\"><a href=\"#bpy模块\" class=\"headerlink\" title=\"bpy模块\"></a>bpy模块</h2><p>bpy模块是blender脚本插件核心库</p>\n<h3 id=\"bpy-ops\"><a href=\"#bpy-ops\" class=\"headerlink\" title=\"bpy.ops\"></a>bpy.ops</h3><blockquote>\n<p>对于操纵3D对象，最重要的两个类是<code>bpy.ops.object</code>和<code>bpy.ops.mesh</code></p>\n<p>Object类包含用于同时操作多个选定对象的函数以及许多常规实用程序。Mesh类包含用于一次操作一个对象的顶点、边和面的函数</p>\n</blockquote>\n<h3 id=\"bpy-context\"><a href=\"#bpy-context\" class=\"headerlink\" title=\"bpy.context\"></a>bpy.context</h3><blockquote>\n<p>context（正文）是blender数据管理中的一个全局变量集合，它包含了目前被选择的和激活的（物体的两种属性状态）的物体的信息，还记录了当前物体的编辑模式<br>用于按各种状态条件访问 Blender 的对象和区域（如用户选定的对象），用于将我们指向对象组（即<code>bpy.context</code>类将生成对<code>bpy.data</code>类的数据块的引用）</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"># 访问选定对象的列表<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.context</span><span class=\"hljs-selector-class\">.selected_objects</span><br><br># 访问目前激活的对象<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.context</span><span class=\"hljs-selector-class\">.active_object</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"bpy-data\"><a href=\"#bpy-data\" class=\"headerlink\" title=\"bpy.data\"></a>bpy.data</h3><blockquote>\n<p>blender界面上所有可使用调节的对象内容（包括mesh模型、lamp灯光、camera摄像机，material材质等）都在python中以特定的类型存储起来</p>\n<p>用于访问Blender的内部数据，包含确定对象形状和位置的所有数据</p>\n</blockquote>\n<p>访问出现的对象</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span>  #访问场景内普通对象列表，包括<span class=\"hljs-selector-tag\">lamp</span>、<span class=\"hljs-selector-tag\">camera</span>以及<span class=\"hljs-selector-tag\">mesh</span>模型的<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.scenes</span>  #访问场景列表<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.materials</span>  #访问材质对象列表<br></code></pre></td></tr></table></figure>\n\n<p>访问具体的对象</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span>  #访问名为`<span class=\"hljs-selector-tag\">Cube</span>`的对象<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[1]</span>  #访问列表中的第1个对象<br></code></pre></td></tr></table></figure>\n\n<p>访问对象属性</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span><span class=\"hljs-selector-class\">.name</span> #访问对象名称<br><span class=\"hljs-selector-tag\">bpy</span><span class=\"hljs-selector-class\">.data</span><span class=\"hljs-selector-class\">.objects</span><span class=\"hljs-selector-attr\">[<span class=\"hljs-string\">'Cube'</span>]</span><span class=\"hljs-selector-class\">.location</span> #访问对象的位置<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"常用基本操作\"><a href=\"#常用基本操作\" class=\"headerlink\" title=\"常用基本操作\"></a>常用基本操作</h2><h3 id=\"选择对象\"><a href=\"#选择对象\" class=\"headerlink\" title=\"选择对象\"></a>选择对象</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 选中所有</span><br>bpy.ops.object.select_all(<span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">'SELECT'</span>)<br><br><span class=\"hljs-comment\"># 取消所有选中</span><br>bpy.ops.object.select_all(<span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">'DESELECT'</span>)<br><br><span class=\"hljs-comment\">#通过select_pattern命令来按照物体命名查找选定物体，支持通配符*模糊匹配</span><br>bpy.ops.object.select_pattern(<span class=\"hljs-attribute\">pattern</span>=<span class=\"hljs-string\">\"Cube\"</span>, <span class=\"hljs-attribute\">case_sensitive</span>=<span class=\"hljs-literal\">False</span>, <span class=\"hljs-attribute\">extend</span>=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-comment\"># 选中名为Cube的对象</span><br>bpy.data.objects[<span class=\"hljs-string\">'Cube'</span>].select_set(<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行缩放\"><a href=\"#对选中物体进行缩放\" class=\"headerlink\" title=\"对选中物体进行缩放\"></a>对选中物体进行缩放</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 按 x y z 进行缩放<br>bpy.ops.transform.resize(value=(<span class=\"hljs-number\">1.1</span>, <span class=\"hljs-number\">1.2</span>, <span class=\"hljs-number\">1.4</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行旋转\"><a href=\"#对选中物体进行旋转\" class=\"headerlink\" title=\"对选中物体进行旋转\"></a>对选中物体进行旋转</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 绕 Z轴 旋转 3.14 弧度</span><br>bpy.ops.transform.rotate(<span class=\"hljs-attribute\">value</span>=3.14, <span class=\"hljs-attribute\">orient_axis</span>=<span class=\"hljs-string\">'Z'</span>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"对选中物体进行平移操作\"><a href=\"#对选中物体进行平移操作\" class=\"headerlink\" title=\"对选中物体进行平移操作\"></a>对选中物体进行平移操作</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"># 按 x y z 方向平移物体<br>bpy.ops.transform.translate(value=(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">3</span>))<br><br># 设置位置<br>bpy.data.objects[<span class=\"hljs-string\">'Cube'</span>].location = (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>)<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"灯光操作\"><a href=\"#灯光操作\" class=\"headerlink\" title=\"灯光操作\"></a>灯光操作</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 新建一个点光源</span><br>light_data = bpy.data.lights.new(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">'Light'</span>, <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">'POINT'</span>)<br><br><span class=\"hljs-comment\"># 设置该光源的一些属性（具体属性可查看文档）</span><br>light_data.distance = 2400.<br>light_data.use_nodes = <span class=\"hljs-literal\">True</span><br>light_data.energy = 5<br><br><span class=\"hljs-comment\"># 激活灯光</span><br>light = bpy.data.objects.new(<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Light\"</span>, <span class=\"hljs-attribute\">object_data</span>=light_data)<br>scene.objects.link(light)<br>bpy.context.view_layer.objects.active = light<br><br><span class=\"hljs-comment\"># 脚本使用完毕后删除灯光</span><br>bpy.data.objects[<span class=\"hljs-string\">'Light'</span>+str(i)].select_set(<span class=\"hljs-literal\">True</span>)<br>bpy.ops.object.delete()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h2><h3 id=\"改变相机指向\"><a href=\"#改变相机指向\" class=\"headerlink\" title=\"改变相机指向\"></a>改变相机指向</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">look_at</span><span class=\"hljs-params\">(obj_camera, point=Vector<span class=\"hljs-params\">(<span class=\"hljs-params\">(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)</span>)</span>)</span>:</span><br>\t<span class=\"hljs-string\">\"\"\"<br>\t使相机指向point点<br>\t\"\"\"</span><br>    loc_camera = obj_camera.location<br>    direction = point - loc_camera<br>    rot_quat = direction.to_track_quat(<span class=\"hljs-string\">'-Z'</span>, <span class=\"hljs-string\">'Y'</span>)<br>    obj_camera.rotation_euler = rot_quat.to_euler()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现多角度渲染物体\"><a href=\"#实现多角度渲染物体\" class=\"headerlink\" title=\"实现多角度渲染物体\"></a>实现多角度渲染物体</h2><blockquote>\n<p>实现多角度渲染物体生成物体模板主要需要进行以下工作</p>\n<p>1、合理设置相机的位置（以LineMOD方法为例就利用球面的几何特征设置相机位置）</p>\n<p>2、合理布局灯光（调整使得灯光能够覆盖）</p>\n<p>3、得到此时相机的Rt变换矩阵用于标识该角度下物体的姿态</p>\n<p>4、输入模型，进行渲染输出图片</p>\n</blockquote>\n<p>第1点和第2点其实就是之前的灯光操作与相机操作</p>\n<h3 id=\"进行模型渲染\"><a href=\"#进行模型渲染\" class=\"headerlink\" title=\"进行模型渲染\"></a>进行模型渲染</h3><h4 id=\"导入模型\"><a href=\"#导入模型\" class=\"headerlink\" title=\"导入模型\"></a>导入模型</h4><p>以.obj文件为例，其余文件格式的导入方法可以查官方文档（导入的模型默认的位置为坐标原点）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 导入.obj文件</span><br>bpy.ops.import_scene.obj(<span class=\"hljs-attribute\">filepath</span>=obj_path)<br></code></pre></td></tr></table></figure>\n\n<p>除导入模型外，就是合理设置输入路径和输出路径了，这个可以用os等模块进行处理</p>\n<h4 id=\"设置渲染输出的基本信息\"><a href=\"#设置渲染输出的基本信息\" class=\"headerlink\" title=\"设置渲染输出的基本信息\"></a>设置渲染输出的基本信息</h4><p>根据官网可以设置输出分辨率等基本信息</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">context</span> = bpy.context<br><span class=\"hljs-attr\">scene</span> = context.scene<br><br><span class=\"hljs-attr\">scene.render.engine</span> = <span class=\"hljs-string\">'CYCLES'</span><br><span class=\"hljs-attr\">scene.render.film_transparent</span> = <span class=\"hljs-literal\">True</span><br><span class=\"hljs-attr\">scene.render.resolution_x</span> = <span class=\"hljs-number\">360</span><br><span class=\"hljs-attr\">scene.render.resolution_y</span> = <span class=\"hljs-number\">360</span><br><span class=\"hljs-attr\">scene.render.image_settings.file_format</span> = <span class=\"hljs-string\">'PNG'</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"渲染输出\"><a href=\"#渲染输出\" class=\"headerlink\" title=\"渲染输出\"></a>渲染输出</h4><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 设置输出路径</span><br>scene.render.filepath = output_path + <span class=\"hljs-string\">\"0\"</span>.zfill(5) + <span class=\"hljs-string\">\".png\"</span><br><br><span class=\"hljs-comment\"># 渲染输出</span><br>bpy.ops.render.render(<span class=\"hljs-attribute\">write_still</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">use_viewport</span>=<span class=\"hljs-literal\">False</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h4><p>渲染结果如下，实现了<strong>模型的批量渲染处理</strong></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C1.png\" alt=\"\"></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E7%89%A9%E4%BD%93%E6%B8%B2%E6%9F%93%E8%84%9A%E6%9C%AC/%E6%B8%B2%E6%9F%93%E7%BB%93%E6%9E%9C2.png\" alt=\"\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总而言之，blender插件脚本的python开发是一个文档相对欠缺（官方文档写的我个人认为很烂）而且不同版本之间差别较大的二次开发工具。</p>\n<p>如果没有特别的要求非得使用blender，我的建议是能不用就不用（尤其对于新手）。顺带一提，blender内置的Python脚本开发环境也极其糟糕，理论上vscode内是有相应的插件的，但bug较多我个人认为也很不好用。</p>\n<p>之后如果还会使用blender的话我会写一个专题好好记录一下学习的过程（希望不会有这一天）</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://github.com/zju3dv/pvnet-rendering\" target=\"_blank\" rel=\"noopener\">https://github.com/zju3dv/pvnet-rendering</a></p>\n"},{"title":"Blender使用Python脚本生成CV数据集","date":"2021-02-26T09:12:39.000Z","top":true,"fileName":"blender-render-cv-dataset","_content":"\n## 获取相机内参、旋转平移等基本信息\n\n参考：https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera\n\n这个应该是使用blender渲染数据集并获取相应GT信息的标准方法与代码了。\n\n### 获取相机内参\n\n主要可以通过在blender中对相机对象及渲染方面的设置得到，\n\n1. 定义相机类（以blender中的相机对象作为输入）\n\n```python\nclass Camera:\n    def __init__(self, camera):\n        self.camera = camera\n```\n\n2. 获取相机内部传感器的模式与尺寸\n\n```python\ndef get_sensor_size(sensor_fit, sensor_x, sensor_y):\n    if sensor_fit == 'VERTICAL':\n        return sensor_y\n    return sensor_x\n\n\ndef get_sensor_fit(sensor_fit, size_x, size_y):\n    if sensor_fit == 'AUTO':\n        if size_x >= size_y:\n            return 'HORIZONTAL'\n        else:\n            return 'VERTICAL'\n    return sensor_fit\n```\n\n3. 计算得到相机内参\n\n```python\ndef get_camera_intrinsic(self):\n    camd = self.camera.data\n    if camd.type != 'PERSP':\n        raise ValueError('Non-perspective cameras not supported')\n    scene = bpy.context.scene\n    f_in_mm = camd.lens\n    scale = scene.render.resolution_percentage / 100\n    resolution_x_in_px = scale * scene.render.resolution_x\n    resolution_y_in_px = scale * scene.render.resolution_y\n    # 获取传感器的最长边\n    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)\n    # 获取传感器模式\n    sensor_fit = get_sensor_fit(\n        camd.sensor_fit,\n        scene.render.pixel_aspect_x * resolution_x_in_px,\n        scene.render.pixel_aspect_y * resolution_y_in_px\n    )\n    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x\n    if sensor_fit == 'HORIZONTAL':\n        view_fac_in_px = resolution_x_in_px\n    else:\n        view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px\n    pixel_size_mm_per_px = sensor_size_in_mm / f_in_mm / view_fac_in_px\n    s_u = 1 / pixel_size_mm_per_px\n    s_v = 1 / pixel_size_mm_per_px / pixel_aspect_ratio\n\n\t# Parameters of intrinsic calibration matrix K\n    u_0 = resolution_x_in_px / 2 - camd.shift_x * view_fac_in_px\n    v_0 = resolution_y_in_px / 2 + camd.shift_y * view_fac_in_px / pixel_aspect_ratio\n    skew = 0  # only use rectangular pixels\n\n    K = Matrix(\n        ((s_u, skew, u_0),\n        (0, s_v, v_0),\n        (0, 0, 1)))\n    return K\n```\n\n4. 根据获取相机内参中的逻辑可以编写通过内参矩阵设置相机内参的代码\n\n```python\ndef set_camera_intrinsic(self, K):\n    scene = bpy.context.scene\n    camd = self.camera.data\n\n    scale = scene.render.resolution_percentage / 100\n    resolution_x_in_px = scale * scene.render.resolution_x\n    resolution_y_in_px = scale * scene.render.resolution_y\n\n    # 获取传感器的最长边\n    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)\n    # 获取传感器模式\n    sensor_fit = get_sensor_fit(\n        camd.sensor_fit,\n        scene.render.pixel_aspect_x * resolution_x_in_px,\n        scene.render.pixel_aspect_y * resolution_y_in_px\n    )\n    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x\n    if sensor_fit == 'HORIZONTAL':\n        view_fac_in_px = resolution_x_in_px\n        else:\n            view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px\n\n            camd.lens = K[0, 0] * sensor_size_in_mm / view_fac_in_px\n            camd.shift_x = (resolution_x_in_px / 2 - K[0, 2]) / view_fac_in_px\n            camd.shift_y = ((K[1, 2] - resolution_y_in_px / 2) * pixel_aspect_ratio) / view_fac_in_px\n```\n\n### 获取物体旋转平移矩阵\n\n主要在于获取相机在世界坐标系的位置（经过转化后可以视为blender中内置的坐标）与旋转，以及目标物体在世界坐标系中的位置与旋转，之后可以根据定义计算得到。\n\n1. 获取相机的外参矩阵（代码逻辑可以参考上述stackexchange中的内容）\n\n```python\ndef get_camera_extrinsic(self):\n    R_bcam2cv = Matrix(\n        ((1, 0, 0),\n         (0, -1, 0),\n         (0, 0, -1)))\n\n    location, rotation = self.camera.matrix_world.decompose()[0: 2]\n\n    R_world2bcam = rotation.to_matrix().transposed()\n    T_world2bcam = -1 * R_world2bcam @ location\n\n    R_world2cv = R_bcam2cv @ R_world2bcam\n    T_world2cv = R_bcam2cv @ T_world2bcam\n\n    RT = Matrix((\n        R_world2cv[0][:] + (T_world2cv[0],),\n        R_world2cv[1][:] + (T_world2cv[1],),\n        R_world2cv[2][:] + (T_world2cv[2],),\n        (0, 0, 0, 1)\n    ))\n\n    return RT\n```\n\n2. 获取物体相对于blender原点的旋转与平移\n\n```python\ntransform_matrix = obj.matrix_world.copy()\t// obj为获得的物体\ngt_rt = camera_param['RT'] @ obj_matrix\t\t// 相机外参与获取物体相乘\n```\n\n### 注意事项\n\n1、当物体相对原点有旋转与平移的情况\n\nobj与ply的存储坐标有不同（没有详细查看文件格式，但经过实验应该是这样的，如下图所示，即obj在读入blender中时会在x轴自带90度的旋转）\n\n所以如果使用obj文件进行渲染时，在获取目标平移旋转矩阵时不进行以上第2步，则不能得到正确的GT值，需要注意。\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/obj_and_ply.png)\n\n2、对物体进行刚体运动后`matrix_world`没变\n\n这是由于blender没有在物体转变后立刻重新计算，在blender2.8的版本下需要在刚体变化后加上如下代码，参考https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation\n\n```python\ncontext.view_layer.update()\n```\n\n\n\n## 渲染背景图片\n\n即让对应的模型带上背景图片，参考https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/\n\n在blender中的处理流程如下（在`Compositor`模式下）\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/bg_render.png)\n\n### 代码实现\n\n1. 获取作为背景的图片\n\n```python\nbg_img = bpy.data.images.load(filepath=\"/path/to/bg_img.png\")\n```\n\n2. 传入背景图片，使用脚本完成节点的构建\n\n```python\ndef render_rgb(bg_img):\n    scene = bpy.context.scene\n    scene.use_nodes = True\n    tree = scene.node_tree\n    links = tree.links\n    links.clear()\n\n    # 合成渲染\n    composite_node = tree.nodes[\"Composite\"]\n    rl_node = tree.nodes[\"Render Layers\"]\n\n    img_node = tree.nodes.new(type=\"CompositorNodeImage\")\n    scale_node = tree.nodes.new(type=\"CompositorNodeScale\")\n    ao_node = tree.nodes.new(type=\"CompositorNodeAlphaOver\")\n\n    img_node.image = bg_img\n\n    scale_node.space = 'RENDER_SIZE'\n    scale_node.frame_method = 'CROP'\n\n    links.new(img_node.outputs['Image'], scale_node.inputs['Image'])\n    links.new(scale_node.outputs['Image'], ao_node.inputs[1])\n    links.new(rl_node.outputs['Image'], ao_node.inputs[2])\n\n    links.new(ao_node.outputs['Image'], composite_node.inputs['Image'])\n\n    scene.render.filepath = cfg.OUTPUT_DIR + 'test.png'\n```\n\n\n\n### 为物体加上阴影\n\n添加plane在需要投影的位置并且合理设置灯光即可得到物体相对的投影，参考\n\n```python\nbpy.ops.mesh.primitive_plane_add()\t// 新建plane\nbpy.context.object.cycles.is_shadow_catcher = True\t// 设置相应的渲染属性\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/background.png)\n\n\n\n\n\n## 生成深度图\n\n在blender中的处理流程如下（在`Compositor`模式下），其实就是在渲染背景图的基础上新添加了一个用于处理depth的节点与一个渲染输出节点\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/depth_render.png)\n\n### 代码实现\n\n1. 设置节点及连接渲染得到exr格式的深度图\n\n```python\ndef render_depth():\n    scene = bpy.context.scene\n    tree = scene.node_tree\n    links = tree.links\n\n    rl_node = tree.nodes[\"Render Layers\"]\n\n    map_node = tree.nodes.new(type=\"CompositorNodeMapRange\")\n    map_node.inputs[1].default_value = 0\n    map_node.inputs[2].default_value = 2\n    map_node.inputs[3].default_value = 0\n    map_node.inputs[4].default_value = 1\n\n    depth_file_output = tree.nodes.new(type=\"CompositorNodeOutputFile\")\n    depth_file_output.base_path = ''\n    depth_file_output.format.file_format = 'OPEN_EXR'\n    depth_file_output.format.color_depth = '32'\n\n    links.new(rl_node.outputs['Depth'], map_node.inputs[0])\n    links.new(map_node.outputs[0], depth_file_output.inputs[0])\n\n    depth_file_output.file_slots[0].path = cfg.OUTPUT_DIR + 'depth_'\n```\n\n2. 将渲染得到的exr格式的深度图转化为常用的png格式，需要安装`OpenEXR`库\n\n```python\n// 先转化为png再删除exr文件\ndef exr_to_png(exr_path):\n    depth_path = exr_path.replace('.exr', '.png')\n    exr_image = OpenEXR.InputFile(exr_path)\n    dw = exr_image.header()['dataWindow']\n    (width, height) = (dw.max.x - dw.min.x + 1, dw.max.y - dw.min.y + 1)\n\n    def read_exr(s, width, height):\n        mat = np.fromstring(s, dtype=np.float32)\n        mat = mat.reshape(height, width)\n        return mat\n\n    dmap, _, _ = [read_exr(s, width, height) for s in\n                  exr_image.channels('BGR', Imath.PixelType(Imath.PixelType.FLOAT))]\n    dmap = Image.fromarray((dmap != 1).astype(np.int32))\n    dmap.save(depth_path)\n    exr_image.close()\n    os.system('rm {}'.format(exr_path))\n```\n\n\n\n\n\n## 生成Mask\n\n生成mask关键在于删除物体已有材质，之后将物体的材质设置成某颜色（或标准的数值），参考https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask_render.png)\n\n### 代码实现\n\n```python\ndef render_mask():\n    scene = bpy.context.scene\n    objs = [obj for obj in bpy.data.objects if obj.type in (\"MESH\", \"CURVE\")]\n    for obj_idx, obj in enumerate(objs):\n        color = cfg.colors[obj_idx] + (1,)\t# 得到不同的颜色\n\n        material_name = \"auto.material.\" + obj.name\t\n        material = bpy.data.materials.new(material_name)\n\n        material[\"is_auto\"] = True\n        material.use_nodes = True\n        material.node_tree.nodes.clear()\n\n        emission = material.node_tree.nodes.new(type=\"ShaderNodeEmission\")\n        emission.inputs['Color'].default_value = color\t# 给不同物体设置不同颜色\n\n        output = material.node_tree.nodes.new(type=\"ShaderNodeOutputMaterial\")\n        material.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])\n\n        obj.data.materials.clear()\t# 删除物体之前的所有材质\n        obj.data.materials.append(material)\t# 将刚刚创建并初始化颜色的材质加入物体\n\n    scene.render.filepath = cfg.OUTPUT_DIR + 'mask.png'\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask.png)\n\n\n\n## 为模型中每个点赋值并渲染\n\n由于渲染数据集时需要使用新数据集用nocs方法进行方法性能检验，所以必须要渲染得到nocs图（nocs相关见https://github.com/hughw19/NOCS_CVPR2019）\n\n参考https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs_render.png)\n\n### 代码实现\n\n```python\ndef render_nocs():\n    scene = bpy.context.scene\n    objs = [obj for obj in bpy.data.objects if obj.type in (\"MESH\", \"CURVE\")]\n    for obj_idx, obj in enumerate(objs):\n        vcol_layer = obj.data.vertex_colors.new()\n        for loop_index, loop in enumerate(obj.data.loops):\n            loop_vert_index = loop.vertex_index\n            scale = 1\n            color = scale * obj.data.vertices[loop_vert_index].co + Vector([0.5, 0.5, 0.5])\n            color = tuple(color) + (1,)\n\n            vcol_layer.data[loop_index].color = color\n        obj.data.vertex_colors.active = vcol_layer\n        obj.data.update()\n\n        material = bpy.data.materials.new('coord_color')\n\n        material.alpha_threshold = 1\n\n        material[\"is_auto\"] = True\n        material.use_nodes = True\n        material.node_tree.nodes.clear()\n\n        attr = material.node_tree.nodes.new(type=\"ShaderNodeAttribute\")\n        attr.attribute_name = \"Col\"\n\n        output = material.node_tree.nodes.new(type=\"ShaderNodeOutputMaterial\")\n\n        material.node_tree.links.new(attr.outputs['Color'], output.inputs['Surface'])\n\n        obj.data.materials.clear()\n        obj.data.materials.append(material)\n        obj.active_material = material\n    scene.render.filepath = cfg.OUTPUT_DIR + 'nocs.png'\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs.png)\n\n## 不错的源码\n\nblender中资源本身比较少，以下是我编写代码时找到的一个质量不错的源码，值得参考\n\nhttps://github.com/DIYer22/bpycv","source":"_posts/编程相关/Python/Blender使用Python脚本生成CV数据集.md","raw":"---\ntitle: Blender使用Python脚本生成CV数据集\ndate: 2021-02-26 17:12:39\ntags:\n\t- Blender\ncategories:\n\t- 编程相关\n\t- Python\ntop: true\nfileName: blender-render-cv-dataset\n---\n\n## 获取相机内参、旋转平移等基本信息\n\n参考：https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera\n\n这个应该是使用blender渲染数据集并获取相应GT信息的标准方法与代码了。\n\n### 获取相机内参\n\n主要可以通过在blender中对相机对象及渲染方面的设置得到，\n\n1. 定义相机类（以blender中的相机对象作为输入）\n\n```python\nclass Camera:\n    def __init__(self, camera):\n        self.camera = camera\n```\n\n2. 获取相机内部传感器的模式与尺寸\n\n```python\ndef get_sensor_size(sensor_fit, sensor_x, sensor_y):\n    if sensor_fit == 'VERTICAL':\n        return sensor_y\n    return sensor_x\n\n\ndef get_sensor_fit(sensor_fit, size_x, size_y):\n    if sensor_fit == 'AUTO':\n        if size_x >= size_y:\n            return 'HORIZONTAL'\n        else:\n            return 'VERTICAL'\n    return sensor_fit\n```\n\n3. 计算得到相机内参\n\n```python\ndef get_camera_intrinsic(self):\n    camd = self.camera.data\n    if camd.type != 'PERSP':\n        raise ValueError('Non-perspective cameras not supported')\n    scene = bpy.context.scene\n    f_in_mm = camd.lens\n    scale = scene.render.resolution_percentage / 100\n    resolution_x_in_px = scale * scene.render.resolution_x\n    resolution_y_in_px = scale * scene.render.resolution_y\n    # 获取传感器的最长边\n    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)\n    # 获取传感器模式\n    sensor_fit = get_sensor_fit(\n        camd.sensor_fit,\n        scene.render.pixel_aspect_x * resolution_x_in_px,\n        scene.render.pixel_aspect_y * resolution_y_in_px\n    )\n    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x\n    if sensor_fit == 'HORIZONTAL':\n        view_fac_in_px = resolution_x_in_px\n    else:\n        view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px\n    pixel_size_mm_per_px = sensor_size_in_mm / f_in_mm / view_fac_in_px\n    s_u = 1 / pixel_size_mm_per_px\n    s_v = 1 / pixel_size_mm_per_px / pixel_aspect_ratio\n\n\t# Parameters of intrinsic calibration matrix K\n    u_0 = resolution_x_in_px / 2 - camd.shift_x * view_fac_in_px\n    v_0 = resolution_y_in_px / 2 + camd.shift_y * view_fac_in_px / pixel_aspect_ratio\n    skew = 0  # only use rectangular pixels\n\n    K = Matrix(\n        ((s_u, skew, u_0),\n        (0, s_v, v_0),\n        (0, 0, 1)))\n    return K\n```\n\n4. 根据获取相机内参中的逻辑可以编写通过内参矩阵设置相机内参的代码\n\n```python\ndef set_camera_intrinsic(self, K):\n    scene = bpy.context.scene\n    camd = self.camera.data\n\n    scale = scene.render.resolution_percentage / 100\n    resolution_x_in_px = scale * scene.render.resolution_x\n    resolution_y_in_px = scale * scene.render.resolution_y\n\n    # 获取传感器的最长边\n    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)\n    # 获取传感器模式\n    sensor_fit = get_sensor_fit(\n        camd.sensor_fit,\n        scene.render.pixel_aspect_x * resolution_x_in_px,\n        scene.render.pixel_aspect_y * resolution_y_in_px\n    )\n    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x\n    if sensor_fit == 'HORIZONTAL':\n        view_fac_in_px = resolution_x_in_px\n        else:\n            view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px\n\n            camd.lens = K[0, 0] * sensor_size_in_mm / view_fac_in_px\n            camd.shift_x = (resolution_x_in_px / 2 - K[0, 2]) / view_fac_in_px\n            camd.shift_y = ((K[1, 2] - resolution_y_in_px / 2) * pixel_aspect_ratio) / view_fac_in_px\n```\n\n### 获取物体旋转平移矩阵\n\n主要在于获取相机在世界坐标系的位置（经过转化后可以视为blender中内置的坐标）与旋转，以及目标物体在世界坐标系中的位置与旋转，之后可以根据定义计算得到。\n\n1. 获取相机的外参矩阵（代码逻辑可以参考上述stackexchange中的内容）\n\n```python\ndef get_camera_extrinsic(self):\n    R_bcam2cv = Matrix(\n        ((1, 0, 0),\n         (0, -1, 0),\n         (0, 0, -1)))\n\n    location, rotation = self.camera.matrix_world.decompose()[0: 2]\n\n    R_world2bcam = rotation.to_matrix().transposed()\n    T_world2bcam = -1 * R_world2bcam @ location\n\n    R_world2cv = R_bcam2cv @ R_world2bcam\n    T_world2cv = R_bcam2cv @ T_world2bcam\n\n    RT = Matrix((\n        R_world2cv[0][:] + (T_world2cv[0],),\n        R_world2cv[1][:] + (T_world2cv[1],),\n        R_world2cv[2][:] + (T_world2cv[2],),\n        (0, 0, 0, 1)\n    ))\n\n    return RT\n```\n\n2. 获取物体相对于blender原点的旋转与平移\n\n```python\ntransform_matrix = obj.matrix_world.copy()\t// obj为获得的物体\ngt_rt = camera_param['RT'] @ obj_matrix\t\t// 相机外参与获取物体相乘\n```\n\n### 注意事项\n\n1、当物体相对原点有旋转与平移的情况\n\nobj与ply的存储坐标有不同（没有详细查看文件格式，但经过实验应该是这样的，如下图所示，即obj在读入blender中时会在x轴自带90度的旋转）\n\n所以如果使用obj文件进行渲染时，在获取目标平移旋转矩阵时不进行以上第2步，则不能得到正确的GT值，需要注意。\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/obj_and_ply.png)\n\n2、对物体进行刚体运动后`matrix_world`没变\n\n这是由于blender没有在物体转变后立刻重新计算，在blender2.8的版本下需要在刚体变化后加上如下代码，参考https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation\n\n```python\ncontext.view_layer.update()\n```\n\n\n\n## 渲染背景图片\n\n即让对应的模型带上背景图片，参考https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/\n\n在blender中的处理流程如下（在`Compositor`模式下）\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/bg_render.png)\n\n### 代码实现\n\n1. 获取作为背景的图片\n\n```python\nbg_img = bpy.data.images.load(filepath=\"/path/to/bg_img.png\")\n```\n\n2. 传入背景图片，使用脚本完成节点的构建\n\n```python\ndef render_rgb(bg_img):\n    scene = bpy.context.scene\n    scene.use_nodes = True\n    tree = scene.node_tree\n    links = tree.links\n    links.clear()\n\n    # 合成渲染\n    composite_node = tree.nodes[\"Composite\"]\n    rl_node = tree.nodes[\"Render Layers\"]\n\n    img_node = tree.nodes.new(type=\"CompositorNodeImage\")\n    scale_node = tree.nodes.new(type=\"CompositorNodeScale\")\n    ao_node = tree.nodes.new(type=\"CompositorNodeAlphaOver\")\n\n    img_node.image = bg_img\n\n    scale_node.space = 'RENDER_SIZE'\n    scale_node.frame_method = 'CROP'\n\n    links.new(img_node.outputs['Image'], scale_node.inputs['Image'])\n    links.new(scale_node.outputs['Image'], ao_node.inputs[1])\n    links.new(rl_node.outputs['Image'], ao_node.inputs[2])\n\n    links.new(ao_node.outputs['Image'], composite_node.inputs['Image'])\n\n    scene.render.filepath = cfg.OUTPUT_DIR + 'test.png'\n```\n\n\n\n### 为物体加上阴影\n\n添加plane在需要投影的位置并且合理设置灯光即可得到物体相对的投影，参考\n\n```python\nbpy.ops.mesh.primitive_plane_add()\t// 新建plane\nbpy.context.object.cycles.is_shadow_catcher = True\t// 设置相应的渲染属性\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/background.png)\n\n\n\n\n\n## 生成深度图\n\n在blender中的处理流程如下（在`Compositor`模式下），其实就是在渲染背景图的基础上新添加了一个用于处理depth的节点与一个渲染输出节点\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/depth_render.png)\n\n### 代码实现\n\n1. 设置节点及连接渲染得到exr格式的深度图\n\n```python\ndef render_depth():\n    scene = bpy.context.scene\n    tree = scene.node_tree\n    links = tree.links\n\n    rl_node = tree.nodes[\"Render Layers\"]\n\n    map_node = tree.nodes.new(type=\"CompositorNodeMapRange\")\n    map_node.inputs[1].default_value = 0\n    map_node.inputs[2].default_value = 2\n    map_node.inputs[3].default_value = 0\n    map_node.inputs[4].default_value = 1\n\n    depth_file_output = tree.nodes.new(type=\"CompositorNodeOutputFile\")\n    depth_file_output.base_path = ''\n    depth_file_output.format.file_format = 'OPEN_EXR'\n    depth_file_output.format.color_depth = '32'\n\n    links.new(rl_node.outputs['Depth'], map_node.inputs[0])\n    links.new(map_node.outputs[0], depth_file_output.inputs[0])\n\n    depth_file_output.file_slots[0].path = cfg.OUTPUT_DIR + 'depth_'\n```\n\n2. 将渲染得到的exr格式的深度图转化为常用的png格式，需要安装`OpenEXR`库\n\n```python\n// 先转化为png再删除exr文件\ndef exr_to_png(exr_path):\n    depth_path = exr_path.replace('.exr', '.png')\n    exr_image = OpenEXR.InputFile(exr_path)\n    dw = exr_image.header()['dataWindow']\n    (width, height) = (dw.max.x - dw.min.x + 1, dw.max.y - dw.min.y + 1)\n\n    def read_exr(s, width, height):\n        mat = np.fromstring(s, dtype=np.float32)\n        mat = mat.reshape(height, width)\n        return mat\n\n    dmap, _, _ = [read_exr(s, width, height) for s in\n                  exr_image.channels('BGR', Imath.PixelType(Imath.PixelType.FLOAT))]\n    dmap = Image.fromarray((dmap != 1).astype(np.int32))\n    dmap.save(depth_path)\n    exr_image.close()\n    os.system('rm {}'.format(exr_path))\n```\n\n\n\n\n\n## 生成Mask\n\n生成mask关键在于删除物体已有材质，之后将物体的材质设置成某颜色（或标准的数值），参考https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask_render.png)\n\n### 代码实现\n\n```python\ndef render_mask():\n    scene = bpy.context.scene\n    objs = [obj for obj in bpy.data.objects if obj.type in (\"MESH\", \"CURVE\")]\n    for obj_idx, obj in enumerate(objs):\n        color = cfg.colors[obj_idx] + (1,)\t# 得到不同的颜色\n\n        material_name = \"auto.material.\" + obj.name\t\n        material = bpy.data.materials.new(material_name)\n\n        material[\"is_auto\"] = True\n        material.use_nodes = True\n        material.node_tree.nodes.clear()\n\n        emission = material.node_tree.nodes.new(type=\"ShaderNodeEmission\")\n        emission.inputs['Color'].default_value = color\t# 给不同物体设置不同颜色\n\n        output = material.node_tree.nodes.new(type=\"ShaderNodeOutputMaterial\")\n        material.node_tree.links.new(emission.outputs['Emission'], output.inputs['Surface'])\n\n        obj.data.materials.clear()\t# 删除物体之前的所有材质\n        obj.data.materials.append(material)\t# 将刚刚创建并初始化颜色的材质加入物体\n\n    scene.render.filepath = cfg.OUTPUT_DIR + 'mask.png'\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask.png)\n\n\n\n## 为模型中每个点赋值并渲染\n\n由于渲染数据集时需要使用新数据集用nocs方法进行方法性能检验，所以必须要渲染得到nocs图（nocs相关见https://github.com/hughw19/NOCS_CVPR2019）\n\n参考https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs_render.png)\n\n### 代码实现\n\n```python\ndef render_nocs():\n    scene = bpy.context.scene\n    objs = [obj for obj in bpy.data.objects if obj.type in (\"MESH\", \"CURVE\")]\n    for obj_idx, obj in enumerate(objs):\n        vcol_layer = obj.data.vertex_colors.new()\n        for loop_index, loop in enumerate(obj.data.loops):\n            loop_vert_index = loop.vertex_index\n            scale = 1\n            color = scale * obj.data.vertices[loop_vert_index].co + Vector([0.5, 0.5, 0.5])\n            color = tuple(color) + (1,)\n\n            vcol_layer.data[loop_index].color = color\n        obj.data.vertex_colors.active = vcol_layer\n        obj.data.update()\n\n        material = bpy.data.materials.new('coord_color')\n\n        material.alpha_threshold = 1\n\n        material[\"is_auto\"] = True\n        material.use_nodes = True\n        material.node_tree.nodes.clear()\n\n        attr = material.node_tree.nodes.new(type=\"ShaderNodeAttribute\")\n        attr.attribute_name = \"Col\"\n\n        output = material.node_tree.nodes.new(type=\"ShaderNodeOutputMaterial\")\n\n        material.node_tree.links.new(attr.outputs['Color'], output.inputs['Surface'])\n\n        obj.data.materials.clear()\n        obj.data.materials.append(material)\n        obj.active_material = material\n    scene.render.filepath = cfg.OUTPUT_DIR + 'nocs.png'\n```\n\n### 渲染结果\n\n![](http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs.png)\n\n## 不错的源码\n\nblender中资源本身比较少，以下是我编写代码时找到的一个质量不错的源码，值得参考\n\nhttps://github.com/DIYer22/bpycv","slug":"编程相关/Python/Blender使用Python脚本生成CV数据集","published":1,"updated":"2021-02-28T15:46:08.574Z","_id":"cklp5nhpn000o8sjse42tgdc1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"获取相机内参、旋转平移等基本信息\"><a href=\"#获取相机内参、旋转平移等基本信息\" class=\"headerlink\" title=\"获取相机内参、旋转平移等基本信息\"></a>获取相机内参、旋转平移等基本信息</h2><p>参考：<a href=\"https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera</a></p>\n<p>这个应该是使用blender渲染数据集并获取相应GT信息的标准方法与代码了。</p>\n<h3 id=\"获取相机内参\"><a href=\"#获取相机内参\" class=\"headerlink\" title=\"获取相机内参\"></a>获取相机内参</h3><p>主要可以通过在blender中对相机对象及渲染方面的设置得到，</p>\n<ol>\n<li>定义相机类（以blender中的相机对象作为输入）</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Camera</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, camera)</span>:</span><br>        self.camera = camera<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>获取相机内部传感器的模式与尺寸</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_sensor_size</span><span class=\"hljs-params\">(sensor_fit, sensor_x, sensor_y)</span>:</span><br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'VERTICAL'</span>:<br>        <span class=\"hljs-keyword\">return</span> sensor_y<br>    <span class=\"hljs-keyword\">return</span> sensor_x<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_sensor_fit</span><span class=\"hljs-params\">(sensor_fit, size_x, size_y)</span>:</span><br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'AUTO'</span>:<br>        <span class=\"hljs-keyword\">if</span> size_x &gt;= size_y:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'HORIZONTAL'</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'VERTICAL'</span><br>    <span class=\"hljs-keyword\">return</span> sensor_fit<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>计算得到相机内参</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_camera_intrinsic</span><span class=\"hljs-params\">(self)</span>:</span><br>    camd = self.camera.data<br>    <span class=\"hljs-keyword\">if</span> camd.type != <span class=\"hljs-string\">'PERSP'</span>:<br>        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">'Non-perspective cameras not supported'</span>)<br>    scene = bpy.context.scene<br>    f_in_mm = camd.lens<br>    scale = scene.render.resolution_percentage / <span class=\"hljs-number\">100</span><br>    resolution_x_in_px = scale * scene.render.resolution_x<br>    resolution_y_in_px = scale * scene.render.resolution_y<br>    <span class=\"hljs-comment\"># 获取传感器的最长边</span><br>    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)<br>    <span class=\"hljs-comment\"># 获取传感器模式</span><br>    sensor_fit = get_sensor_fit(<br>        camd.sensor_fit,<br>        scene.render.pixel_aspect_x * resolution_x_in_px,<br>        scene.render.pixel_aspect_y * resolution_y_in_px<br>    )<br>    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x<br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'HORIZONTAL'</span>:<br>        view_fac_in_px = resolution_x_in_px<br>    <span class=\"hljs-keyword\">else</span>:<br>        view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px<br>    pixel_size_mm_per_px = sensor_size_in_mm / f_in_mm / view_fac_in_px<br>    s_u = <span class=\"hljs-number\">1</span> / pixel_size_mm_per_px<br>    s_v = <span class=\"hljs-number\">1</span> / pixel_size_mm_per_px / pixel_aspect_ratio<br><br>\t<span class=\"hljs-comment\"># Parameters of intrinsic calibration matrix K</span><br>    u_0 = resolution_x_in_px / <span class=\"hljs-number\">2</span> - camd.shift_x * view_fac_in_px<br>    v_0 = resolution_y_in_px / <span class=\"hljs-number\">2</span> + camd.shift_y * view_fac_in_px / pixel_aspect_ratio<br>    skew = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># only use rectangular pixels</span><br><br>    K = Matrix(<br>        ((s_u, skew, u_0),<br>        (<span class=\"hljs-number\">0</span>, s_v, v_0),<br>        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)))<br>    <span class=\"hljs-keyword\">return</span> K<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>根据获取相机内参中的逻辑可以编写通过内参矩阵设置相机内参的代码</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_camera_intrinsic</span><span class=\"hljs-params\">(self, K)</span>:</span><br>    scene = bpy.context.scene<br>    camd = self.camera.data<br><br>    scale = scene.render.resolution_percentage / <span class=\"hljs-number\">100</span><br>    resolution_x_in_px = scale * scene.render.resolution_x<br>    resolution_y_in_px = scale * scene.render.resolution_y<br><br>    <span class=\"hljs-comment\"># 获取传感器的最长边</span><br>    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)<br>    <span class=\"hljs-comment\"># 获取传感器模式</span><br>    sensor_fit = get_sensor_fit(<br>        camd.sensor_fit,<br>        scene.render.pixel_aspect_x * resolution_x_in_px,<br>        scene.render.pixel_aspect_y * resolution_y_in_px<br>    )<br>    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x<br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'HORIZONTAL'</span>:<br>        view_fac_in_px = resolution_x_in_px<br>        <span class=\"hljs-keyword\">else</span>:<br>            view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px<br><br>            camd.lens = K[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>] * sensor_size_in_mm / view_fac_in_px<br>            camd.shift_x = (resolution_x_in_px / <span class=\"hljs-number\">2</span> - K[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]) / view_fac_in_px<br>            camd.shift_y = ((K[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] - resolution_y_in_px / <span class=\"hljs-number\">2</span>) * pixel_aspect_ratio) / view_fac_in_px<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取物体旋转平移矩阵\"><a href=\"#获取物体旋转平移矩阵\" class=\"headerlink\" title=\"获取物体旋转平移矩阵\"></a>获取物体旋转平移矩阵</h3><p>主要在于获取相机在世界坐标系的位置（经过转化后可以视为blender中内置的坐标）与旋转，以及目标物体在世界坐标系中的位置与旋转，之后可以根据定义计算得到。</p>\n<ol>\n<li>获取相机的外参矩阵（代码逻辑可以参考上述stackexchange中的内容）</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_camera_extrinsic</span><span class=\"hljs-params\">(self)</span>:</span><br>    R_bcam2cv = Matrix(<br>        ((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>         (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>),<br>         (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>)))<br><br>    location, rotation = self.camera.matrix_world.decompose()[<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">2</span>]<br><br>    R_world2bcam = rotation.to_matrix().transposed()<br>    T_world2bcam = <span class=\"hljs-number\">-1</span> * R_world2bcam @ location<br><br>    R_world2cv = R_bcam2cv @ R_world2bcam<br>    T_world2cv = R_bcam2cv @ T_world2bcam<br><br>    RT = Matrix((<br>        R_world2cv[<span class=\"hljs-number\">0</span>][:] + (T_world2cv[<span class=\"hljs-number\">0</span>],),<br>        R_world2cv[<span class=\"hljs-number\">1</span>][:] + (T_world2cv[<span class=\"hljs-number\">1</span>],),<br>        R_world2cv[<span class=\"hljs-number\">2</span>][:] + (T_world2cv[<span class=\"hljs-number\">2</span>],),<br>        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>    ))<br><br>    <span class=\"hljs-keyword\">return</span> RT<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>获取物体相对于blender原点的旋转与平移</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">transform_matrix = obj.matrix_world.copy()\t// obj为获得的物体<br>gt_rt = camera_param[<span class=\"hljs-string\">'RT'</span>] @ obj_matrix\t\t// 相机外参与获取物体相乘<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1、当物体相对原点有旋转与平移的情况</p>\n<p>obj与ply的存储坐标有不同（没有详细查看文件格式，但经过实验应该是这样的，如下图所示，即obj在读入blender中时会在x轴自带90度的旋转）</p>\n<p>所以如果使用obj文件进行渲染时，在获取目标平移旋转矩阵时不进行以上第2步，则不能得到正确的GT值，需要注意。</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/obj_and_ply.png\" alt=\"\"></p>\n<p>2、对物体进行刚体运动后<code>matrix_world</code>没变</p>\n<p>这是由于blender没有在物体转变后立刻重新计算，在blender2.8的版本下需要在刚体变化后加上如下代码，参考<a href=\"https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">context.view_layer.update()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"渲染背景图片\"><a href=\"#渲染背景图片\" class=\"headerlink\" title=\"渲染背景图片\"></a>渲染背景图片</h2><p>即让对应的模型带上背景图片，参考<a href=\"https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/\" target=\"_blank\" rel=\"noopener\">https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/</a></p>\n<p>在blender中的处理流程如下（在<code>Compositor</code>模式下）</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/bg_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li>获取作为背景的图片</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">bg_img = bpy.data.images.load(filepath=<span class=\"hljs-string\">\"/path/to/bg_img.png\"</span>)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>传入背景图片，使用脚本完成节点的构建</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_rgb</span><span class=\"hljs-params\">(bg_img)</span>:</span><br>    scene = bpy.context.scene<br>    scene.use_nodes = <span class=\"hljs-literal\">True</span><br>    tree = scene.node_tree<br>    links = tree.links<br>    links.clear()<br><br>    <span class=\"hljs-comment\"># 合成渲染</span><br>    composite_node = tree.nodes[<span class=\"hljs-string\">\"Composite\"</span>]<br>    rl_node = tree.nodes[<span class=\"hljs-string\">\"Render Layers\"</span>]<br><br>    img_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeImage\"</span>)<br>    scale_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeScale\"</span>)<br>    ao_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeAlphaOver\"</span>)<br><br>    img_node.image = bg_img<br><br>    scale_node.space = <span class=\"hljs-string\">'RENDER_SIZE'</span><br>    scale_node.frame_method = <span class=\"hljs-string\">'CROP'</span><br><br>    links.new(img_node.outputs[<span class=\"hljs-string\">'Image'</span>], scale_node.inputs[<span class=\"hljs-string\">'Image'</span>])<br>    links.new(scale_node.outputs[<span class=\"hljs-string\">'Image'</span>], ao_node.inputs[<span class=\"hljs-number\">1</span>])<br>    links.new(rl_node.outputs[<span class=\"hljs-string\">'Image'</span>], ao_node.inputs[<span class=\"hljs-number\">2</span>])<br><br>    links.new(ao_node.outputs[<span class=\"hljs-string\">'Image'</span>], composite_node.inputs[<span class=\"hljs-string\">'Image'</span>])<br><br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'test.png'</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"为物体加上阴影\"><a href=\"#为物体加上阴影\" class=\"headerlink\" title=\"为物体加上阴影\"></a>为物体加上阴影</h3><p>添加plane在需要投影的位置并且合理设置灯光即可得到物体相对的投影，参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">bpy.ops.mesh.primitive_plane_add()\t// 新建plane<br>bpy.context.object.cycles.is_shadow_catcher = <span class=\"hljs-literal\">True</span>\t// 设置相应的渲染属性<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/background.png\" alt=\"\"></p>\n<h2 id=\"生成深度图\"><a href=\"#生成深度图\" class=\"headerlink\" title=\"生成深度图\"></a>生成深度图</h2><p>在blender中的处理流程如下（在<code>Compositor</code>模式下），其实就是在渲染背景图的基础上新添加了一个用于处理depth的节点与一个渲染输出节点</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/depth_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li>设置节点及连接渲染得到exr格式的深度图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_depth</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    tree = scene.node_tree<br>    links = tree.links<br><br>    rl_node = tree.nodes[<span class=\"hljs-string\">\"Render Layers\"</span>]<br><br>    map_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeMapRange\"</span>)<br>    map_node.inputs[<span class=\"hljs-number\">1</span>].default_value = <span class=\"hljs-number\">0</span><br>    map_node.inputs[<span class=\"hljs-number\">2</span>].default_value = <span class=\"hljs-number\">2</span><br>    map_node.inputs[<span class=\"hljs-number\">3</span>].default_value = <span class=\"hljs-number\">0</span><br>    map_node.inputs[<span class=\"hljs-number\">4</span>].default_value = <span class=\"hljs-number\">1</span><br><br>    depth_file_output = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeOutputFile\"</span>)<br>    depth_file_output.base_path = <span class=\"hljs-string\">''</span><br>    depth_file_output.format.file_format = <span class=\"hljs-string\">'OPEN_EXR'</span><br>    depth_file_output.format.color_depth = <span class=\"hljs-string\">'32'</span><br><br>    links.new(rl_node.outputs[<span class=\"hljs-string\">'Depth'</span>], map_node.inputs[<span class=\"hljs-number\">0</span>])<br>    links.new(map_node.outputs[<span class=\"hljs-number\">0</span>], depth_file_output.inputs[<span class=\"hljs-number\">0</span>])<br><br>    depth_file_output.file_slots[<span class=\"hljs-number\">0</span>].path = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'depth_'</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将渲染得到的exr格式的深度图转化为常用的png格式，需要安装<code>OpenEXR</code>库</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">// 先转化为png再删除exr文件<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exr_to_png</span><span class=\"hljs-params\">(exr_path)</span>:</span><br>    depth_path = exr_path.replace(<span class=\"hljs-string\">'.exr'</span>, <span class=\"hljs-string\">'.png'</span>)<br>    exr_image = OpenEXR.InputFile(exr_path)<br>    dw = exr_image.header()[<span class=\"hljs-string\">'dataWindow'</span>]<br>    (width, height) = (dw.max.x - dw.min.x + <span class=\"hljs-number\">1</span>, dw.max.y - dw.min.y + <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_exr</span><span class=\"hljs-params\">(s, width, height)</span>:</span><br>        mat = np.fromstring(s, dtype=np.float32)<br>        mat = mat.reshape(height, width)<br>        <span class=\"hljs-keyword\">return</span> mat<br><br>    dmap, _, _ = [read_exr(s, width, height) <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span><br>                  exr_image.channels(<span class=\"hljs-string\">'BGR'</span>, Imath.PixelType(Imath.PixelType.FLOAT))]<br>    dmap = Image.fromarray((dmap != <span class=\"hljs-number\">1</span>).astype(np.int32))<br>    dmap.save(depth_path)<br>    exr_image.close()<br>    os.system(<span class=\"hljs-string\">'rm &#123;&#125;'</span>.format(exr_path))<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"生成Mask\"><a href=\"#生成Mask\" class=\"headerlink\" title=\"生成Mask\"></a>生成Mask</h2><p>生成mask关键在于删除物体已有材质，之后将物体的材质设置成某颜色（或标准的数值），参考<a href=\"https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925</a></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_mask</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    objs = [obj <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> bpy.data.objects <span class=\"hljs-keyword\">if</span> obj.type <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">\"MESH\"</span>, <span class=\"hljs-string\">\"CURVE\"</span>)]<br>    <span class=\"hljs-keyword\">for</span> obj_idx, obj <span class=\"hljs-keyword\">in</span> enumerate(objs):<br>        color = cfg.colors[obj_idx] + (<span class=\"hljs-number\">1</span>,)\t<span class=\"hljs-comment\"># 得到不同的颜色</span><br><br>        material_name = <span class=\"hljs-string\">\"auto.material.\"</span> + obj.name\t<br>        material = bpy.data.materials.new(material_name)<br><br>        material[<span class=\"hljs-string\">\"is_auto\"</span>] = <span class=\"hljs-literal\">True</span><br>        material.use_nodes = <span class=\"hljs-literal\">True</span><br>        material.node_tree.nodes.clear()<br><br>        emission = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeEmission\"</span>)<br>        emission.inputs[<span class=\"hljs-string\">'Color'</span>].default_value = color\t<span class=\"hljs-comment\"># 给不同物体设置不同颜色</span><br><br>        output = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeOutputMaterial\"</span>)<br>        material.node_tree.links.new(emission.outputs[<span class=\"hljs-string\">'Emission'</span>], output.inputs[<span class=\"hljs-string\">'Surface'</span>])<br><br>        obj.data.materials.clear()\t<span class=\"hljs-comment\"># 删除物体之前的所有材质</span><br>        obj.data.materials.append(material)\t<span class=\"hljs-comment\"># 将刚刚创建并初始化颜色的材质加入物体</span><br><br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'mask.png'</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果-1\"><a href=\"#渲染结果-1\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask.png\" alt=\"\"></p>\n<h2 id=\"为模型中每个点赋值并渲染\"><a href=\"#为模型中每个点赋值并渲染\" class=\"headerlink\" title=\"为模型中每个点赋值并渲染\"></a>为模型中每个点赋值并渲染</h2><p>由于渲染数据集时需要使用新数据集用nocs方法进行方法性能检验，所以必须要渲染得到nocs图（nocs相关见<a href=\"https://github.com/hughw19/NOCS_CVPR2019）\" target=\"_blank\" rel=\"noopener\">https://github.com/hughw19/NOCS_CVPR2019）</a></p>\n<p>参考<a href=\"https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325</a></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_nocs</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    objs = [obj <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> bpy.data.objects <span class=\"hljs-keyword\">if</span> obj.type <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">\"MESH\"</span>, <span class=\"hljs-string\">\"CURVE\"</span>)]<br>    <span class=\"hljs-keyword\">for</span> obj_idx, obj <span class=\"hljs-keyword\">in</span> enumerate(objs):<br>        vcol_layer = obj.data.vertex_colors.new()<br>        <span class=\"hljs-keyword\">for</span> loop_index, loop <span class=\"hljs-keyword\">in</span> enumerate(obj.data.loops):<br>            loop_vert_index = loop.vertex_index<br>            scale = <span class=\"hljs-number\">1</span><br>            color = scale * obj.data.vertices[loop_vert_index].co + Vector([<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>])<br>            color = tuple(color) + (<span class=\"hljs-number\">1</span>,)<br><br>            vcol_layer.data[loop_index].color = color<br>        obj.data.vertex_colors.active = vcol_layer<br>        obj.data.update()<br><br>        material = bpy.data.materials.new(<span class=\"hljs-string\">'coord_color'</span>)<br><br>        material.alpha_threshold = <span class=\"hljs-number\">1</span><br><br>        material[<span class=\"hljs-string\">\"is_auto\"</span>] = <span class=\"hljs-literal\">True</span><br>        material.use_nodes = <span class=\"hljs-literal\">True</span><br>        material.node_tree.nodes.clear()<br><br>        attr = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeAttribute\"</span>)<br>        attr.attribute_name = <span class=\"hljs-string\">\"Col\"</span><br><br>        output = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeOutputMaterial\"</span>)<br><br>        material.node_tree.links.new(attr.outputs[<span class=\"hljs-string\">'Color'</span>], output.inputs[<span class=\"hljs-string\">'Surface'</span>])<br><br>        obj.data.materials.clear()<br>        obj.data.materials.append(material)<br>        obj.active_material = material<br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'nocs.png'</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果-2\"><a href=\"#渲染结果-2\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs.png\" alt=\"\"></p>\n<h2 id=\"不错的源码\"><a href=\"#不错的源码\" class=\"headerlink\" title=\"不错的源码\"></a>不错的源码</h2><p>blender中资源本身比较少，以下是我编写代码时找到的一个质量不错的源码，值得参考</p>\n<p><a href=\"https://github.com/DIYer22/bpycv\" target=\"_blank\" rel=\"noopener\">https://github.com/DIYer22/bpycv</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取相机内参、旋转平移等基本信息\"><a href=\"#获取相机内参、旋转平移等基本信息\" class=\"headerlink\" title=\"获取相机内参、旋转平移等基本信息\"></a>获取相机内参、旋转平移等基本信息</h2><p>参考：<a href=\"https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/38009/3x4-camera-matrix-from-blender-camera</a></p>\n<p>这个应该是使用blender渲染数据集并获取相应GT信息的标准方法与代码了。</p>\n<h3 id=\"获取相机内参\"><a href=\"#获取相机内参\" class=\"headerlink\" title=\"获取相机内参\"></a>获取相机内参</h3><p>主要可以通过在blender中对相机对象及渲染方面的设置得到，</p>\n<ol>\n<li>定义相机类（以blender中的相机对象作为输入）</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Camera</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, camera)</span>:</span><br>        self.camera = camera<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>获取相机内部传感器的模式与尺寸</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_sensor_size</span><span class=\"hljs-params\">(sensor_fit, sensor_x, sensor_y)</span>:</span><br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'VERTICAL'</span>:<br>        <span class=\"hljs-keyword\">return</span> sensor_y<br>    <span class=\"hljs-keyword\">return</span> sensor_x<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_sensor_fit</span><span class=\"hljs-params\">(sensor_fit, size_x, size_y)</span>:</span><br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'AUTO'</span>:<br>        <span class=\"hljs-keyword\">if</span> size_x &gt;= size_y:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'HORIZONTAL'</span><br>        <span class=\"hljs-keyword\">else</span>:<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'VERTICAL'</span><br>    <span class=\"hljs-keyword\">return</span> sensor_fit<br></code></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>计算得到相机内参</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_camera_intrinsic</span><span class=\"hljs-params\">(self)</span>:</span><br>    camd = self.camera.data<br>    <span class=\"hljs-keyword\">if</span> camd.type != <span class=\"hljs-string\">'PERSP'</span>:<br>        <span class=\"hljs-keyword\">raise</span> ValueError(<span class=\"hljs-string\">'Non-perspective cameras not supported'</span>)<br>    scene = bpy.context.scene<br>    f_in_mm = camd.lens<br>    scale = scene.render.resolution_percentage / <span class=\"hljs-number\">100</span><br>    resolution_x_in_px = scale * scene.render.resolution_x<br>    resolution_y_in_px = scale * scene.render.resolution_y<br>    <span class=\"hljs-comment\"># 获取传感器的最长边</span><br>    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)<br>    <span class=\"hljs-comment\"># 获取传感器模式</span><br>    sensor_fit = get_sensor_fit(<br>        camd.sensor_fit,<br>        scene.render.pixel_aspect_x * resolution_x_in_px,<br>        scene.render.pixel_aspect_y * resolution_y_in_px<br>    )<br>    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x<br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'HORIZONTAL'</span>:<br>        view_fac_in_px = resolution_x_in_px<br>    <span class=\"hljs-keyword\">else</span>:<br>        view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px<br>    pixel_size_mm_per_px = sensor_size_in_mm / f_in_mm / view_fac_in_px<br>    s_u = <span class=\"hljs-number\">1</span> / pixel_size_mm_per_px<br>    s_v = <span class=\"hljs-number\">1</span> / pixel_size_mm_per_px / pixel_aspect_ratio<br><br>\t<span class=\"hljs-comment\"># Parameters of intrinsic calibration matrix K</span><br>    u_0 = resolution_x_in_px / <span class=\"hljs-number\">2</span> - camd.shift_x * view_fac_in_px<br>    v_0 = resolution_y_in_px / <span class=\"hljs-number\">2</span> + camd.shift_y * view_fac_in_px / pixel_aspect_ratio<br>    skew = <span class=\"hljs-number\">0</span>  <span class=\"hljs-comment\"># only use rectangular pixels</span><br><br>    K = Matrix(<br>        ((s_u, skew, u_0),<br>        (<span class=\"hljs-number\">0</span>, s_v, v_0),<br>        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)))<br>    <span class=\"hljs-keyword\">return</span> K<br></code></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>根据获取相机内参中的逻辑可以编写通过内参矩阵设置相机内参的代码</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">set_camera_intrinsic</span><span class=\"hljs-params\">(self, K)</span>:</span><br>    scene = bpy.context.scene<br>    camd = self.camera.data<br><br>    scale = scene.render.resolution_percentage / <span class=\"hljs-number\">100</span><br>    resolution_x_in_px = scale * scene.render.resolution_x<br>    resolution_y_in_px = scale * scene.render.resolution_y<br><br>    <span class=\"hljs-comment\"># 获取传感器的最长边</span><br>    sensor_size_in_mm = get_sensor_size(camd.sensor_fit, camd.sensor_width, camd.sensor_height)<br>    <span class=\"hljs-comment\"># 获取传感器模式</span><br>    sensor_fit = get_sensor_fit(<br>        camd.sensor_fit,<br>        scene.render.pixel_aspect_x * resolution_x_in_px,<br>        scene.render.pixel_aspect_y * resolution_y_in_px<br>    )<br>    pixel_aspect_ratio = scene.render.pixel_aspect_y / scene.render.pixel_aspect_x<br>    <span class=\"hljs-keyword\">if</span> sensor_fit == <span class=\"hljs-string\">'HORIZONTAL'</span>:<br>        view_fac_in_px = resolution_x_in_px<br>        <span class=\"hljs-keyword\">else</span>:<br>            view_fac_in_px = pixel_aspect_ratio * resolution_y_in_px<br><br>            camd.lens = K[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>] * sensor_size_in_mm / view_fac_in_px<br>            camd.shift_x = (resolution_x_in_px / <span class=\"hljs-number\">2</span> - K[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>]) / view_fac_in_px<br>            camd.shift_y = ((K[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>] - resolution_y_in_px / <span class=\"hljs-number\">2</span>) * pixel_aspect_ratio) / view_fac_in_px<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"获取物体旋转平移矩阵\"><a href=\"#获取物体旋转平移矩阵\" class=\"headerlink\" title=\"获取物体旋转平移矩阵\"></a>获取物体旋转平移矩阵</h3><p>主要在于获取相机在世界坐标系的位置（经过转化后可以视为blender中内置的坐标）与旋转，以及目标物体在世界坐标系中的位置与旋转，之后可以根据定义计算得到。</p>\n<ol>\n<li>获取相机的外参矩阵（代码逻辑可以参考上述stackexchange中的内容）</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_camera_extrinsic</span><span class=\"hljs-params\">(self)</span>:</span><br>    R_bcam2cv = Matrix(<br>        ((<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>),<br>         (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>),<br>         (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>)))<br><br>    location, rotation = self.camera.matrix_world.decompose()[<span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">2</span>]<br><br>    R_world2bcam = rotation.to_matrix().transposed()<br>    T_world2bcam = <span class=\"hljs-number\">-1</span> * R_world2bcam @ location<br><br>    R_world2cv = R_bcam2cv @ R_world2bcam<br>    T_world2cv = R_bcam2cv @ T_world2bcam<br><br>    RT = Matrix((<br>        R_world2cv[<span class=\"hljs-number\">0</span>][:] + (T_world2cv[<span class=\"hljs-number\">0</span>],),<br>        R_world2cv[<span class=\"hljs-number\">1</span>][:] + (T_world2cv[<span class=\"hljs-number\">1</span>],),<br>        R_world2cv[<span class=\"hljs-number\">2</span>][:] + (T_world2cv[<span class=\"hljs-number\">2</span>],),<br>        (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>)<br>    ))<br><br>    <span class=\"hljs-keyword\">return</span> RT<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>获取物体相对于blender原点的旋转与平移</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">transform_matrix = obj.matrix_world.copy()\t// obj为获得的物体<br>gt_rt = camera_param[<span class=\"hljs-string\">'RT'</span>] @ obj_matrix\t\t// 相机外参与获取物体相乘<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>1、当物体相对原点有旋转与平移的情况</p>\n<p>obj与ply的存储坐标有不同（没有详细查看文件格式，但经过实验应该是这样的，如下图所示，即obj在读入blender中时会在x轴自带90度的旋转）</p>\n<p>所以如果使用obj文件进行渲染时，在获取目标平移旋转矩阵时不进行以上第2步，则不能得到正确的GT值，需要注意。</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/obj_and_ply.png\" alt=\"\"></p>\n<p>2、对物体进行刚体运动后<code>matrix_world</code>没变</p>\n<p>这是由于blender没有在物体转变后立刻重新计算，在blender2.8的版本下需要在刚体变化后加上如下代码，参考<a href=\"https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/27667/incorrect-matrix-world-after-transformation</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">context.view_layer.update()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"渲染背景图片\"><a href=\"#渲染背景图片\" class=\"headerlink\" title=\"渲染背景图片\"></a>渲染背景图片</h2><p>即让对应的模型带上背景图片，参考<a href=\"https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/\" target=\"_blank\" rel=\"noopener\">https://henryegloff.com/how-to-render-a-background-image-in-blender-2-8/</a></p>\n<p>在blender中的处理流程如下（在<code>Compositor</code>模式下）</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/bg_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li>获取作为背景的图片</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">bg_img = bpy.data.images.load(filepath=<span class=\"hljs-string\">\"/path/to/bg_img.png\"</span>)<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>传入背景图片，使用脚本完成节点的构建</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_rgb</span><span class=\"hljs-params\">(bg_img)</span>:</span><br>    scene = bpy.context.scene<br>    scene.use_nodes = <span class=\"hljs-literal\">True</span><br>    tree = scene.node_tree<br>    links = tree.links<br>    links.clear()<br><br>    <span class=\"hljs-comment\"># 合成渲染</span><br>    composite_node = tree.nodes[<span class=\"hljs-string\">\"Composite\"</span>]<br>    rl_node = tree.nodes[<span class=\"hljs-string\">\"Render Layers\"</span>]<br><br>    img_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeImage\"</span>)<br>    scale_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeScale\"</span>)<br>    ao_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeAlphaOver\"</span>)<br><br>    img_node.image = bg_img<br><br>    scale_node.space = <span class=\"hljs-string\">'RENDER_SIZE'</span><br>    scale_node.frame_method = <span class=\"hljs-string\">'CROP'</span><br><br>    links.new(img_node.outputs[<span class=\"hljs-string\">'Image'</span>], scale_node.inputs[<span class=\"hljs-string\">'Image'</span>])<br>    links.new(scale_node.outputs[<span class=\"hljs-string\">'Image'</span>], ao_node.inputs[<span class=\"hljs-number\">1</span>])<br>    links.new(rl_node.outputs[<span class=\"hljs-string\">'Image'</span>], ao_node.inputs[<span class=\"hljs-number\">2</span>])<br><br>    links.new(ao_node.outputs[<span class=\"hljs-string\">'Image'</span>], composite_node.inputs[<span class=\"hljs-string\">'Image'</span>])<br><br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'test.png'</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"为物体加上阴影\"><a href=\"#为物体加上阴影\" class=\"headerlink\" title=\"为物体加上阴影\"></a>为物体加上阴影</h3><p>添加plane在需要投影的位置并且合理设置灯光即可得到物体相对的投影，参考</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">bpy.ops.mesh.primitive_plane_add()\t// 新建plane<br>bpy.context.object.cycles.is_shadow_catcher = <span class=\"hljs-literal\">True</span>\t// 设置相应的渲染属性<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果\"><a href=\"#渲染结果\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/background.png\" alt=\"\"></p>\n<h2 id=\"生成深度图\"><a href=\"#生成深度图\" class=\"headerlink\" title=\"生成深度图\"></a>生成深度图</h2><p>在blender中的处理流程如下（在<code>Compositor</code>模式下），其实就是在渲染背景图的基础上新添加了一个用于处理depth的节点与一个渲染输出节点</p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/depth_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><ol>\n<li>设置节点及连接渲染得到exr格式的深度图</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_depth</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    tree = scene.node_tree<br>    links = tree.links<br><br>    rl_node = tree.nodes[<span class=\"hljs-string\">\"Render Layers\"</span>]<br><br>    map_node = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeMapRange\"</span>)<br>    map_node.inputs[<span class=\"hljs-number\">1</span>].default_value = <span class=\"hljs-number\">0</span><br>    map_node.inputs[<span class=\"hljs-number\">2</span>].default_value = <span class=\"hljs-number\">2</span><br>    map_node.inputs[<span class=\"hljs-number\">3</span>].default_value = <span class=\"hljs-number\">0</span><br>    map_node.inputs[<span class=\"hljs-number\">4</span>].default_value = <span class=\"hljs-number\">1</span><br><br>    depth_file_output = tree.nodes.new(type=<span class=\"hljs-string\">\"CompositorNodeOutputFile\"</span>)<br>    depth_file_output.base_path = <span class=\"hljs-string\">''</span><br>    depth_file_output.format.file_format = <span class=\"hljs-string\">'OPEN_EXR'</span><br>    depth_file_output.format.color_depth = <span class=\"hljs-string\">'32'</span><br><br>    links.new(rl_node.outputs[<span class=\"hljs-string\">'Depth'</span>], map_node.inputs[<span class=\"hljs-number\">0</span>])<br>    links.new(map_node.outputs[<span class=\"hljs-number\">0</span>], depth_file_output.inputs[<span class=\"hljs-number\">0</span>])<br><br>    depth_file_output.file_slots[<span class=\"hljs-number\">0</span>].path = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'depth_'</span><br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>将渲染得到的exr格式的深度图转化为常用的png格式，需要安装<code>OpenEXR</code>库</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">// 先转化为png再删除exr文件<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">exr_to_png</span><span class=\"hljs-params\">(exr_path)</span>:</span><br>    depth_path = exr_path.replace(<span class=\"hljs-string\">'.exr'</span>, <span class=\"hljs-string\">'.png'</span>)<br>    exr_image = OpenEXR.InputFile(exr_path)<br>    dw = exr_image.header()[<span class=\"hljs-string\">'dataWindow'</span>]<br>    (width, height) = (dw.max.x - dw.min.x + <span class=\"hljs-number\">1</span>, dw.max.y - dw.min.y + <span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">read_exr</span><span class=\"hljs-params\">(s, width, height)</span>:</span><br>        mat = np.fromstring(s, dtype=np.float32)<br>        mat = mat.reshape(height, width)<br>        <span class=\"hljs-keyword\">return</span> mat<br><br>    dmap, _, _ = [read_exr(s, width, height) <span class=\"hljs-keyword\">for</span> s <span class=\"hljs-keyword\">in</span><br>                  exr_image.channels(<span class=\"hljs-string\">'BGR'</span>, Imath.PixelType(Imath.PixelType.FLOAT))]<br>    dmap = Image.fromarray((dmap != <span class=\"hljs-number\">1</span>).astype(np.int32))<br>    dmap.save(depth_path)<br>    exr_image.close()<br>    os.system(<span class=\"hljs-string\">'rm &#123;&#125;'</span>.format(exr_path))<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"生成Mask\"><a href=\"#生成Mask\" class=\"headerlink\" title=\"生成Mask\"></a>生成Mask</h2><p>生成mask关键在于删除物体已有材质，之后将物体的材质设置成某颜色（或标准的数值），参考<a href=\"https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/80906/create-a-segmentation-picture-with-each-object-class-rendered-in-different-color/80925#80925</a></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_mask</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    objs = [obj <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> bpy.data.objects <span class=\"hljs-keyword\">if</span> obj.type <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">\"MESH\"</span>, <span class=\"hljs-string\">\"CURVE\"</span>)]<br>    <span class=\"hljs-keyword\">for</span> obj_idx, obj <span class=\"hljs-keyword\">in</span> enumerate(objs):<br>        color = cfg.colors[obj_idx] + (<span class=\"hljs-number\">1</span>,)\t<span class=\"hljs-comment\"># 得到不同的颜色</span><br><br>        material_name = <span class=\"hljs-string\">\"auto.material.\"</span> + obj.name\t<br>        material = bpy.data.materials.new(material_name)<br><br>        material[<span class=\"hljs-string\">\"is_auto\"</span>] = <span class=\"hljs-literal\">True</span><br>        material.use_nodes = <span class=\"hljs-literal\">True</span><br>        material.node_tree.nodes.clear()<br><br>        emission = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeEmission\"</span>)<br>        emission.inputs[<span class=\"hljs-string\">'Color'</span>].default_value = color\t<span class=\"hljs-comment\"># 给不同物体设置不同颜色</span><br><br>        output = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeOutputMaterial\"</span>)<br>        material.node_tree.links.new(emission.outputs[<span class=\"hljs-string\">'Emission'</span>], output.inputs[<span class=\"hljs-string\">'Surface'</span>])<br><br>        obj.data.materials.clear()\t<span class=\"hljs-comment\"># 删除物体之前的所有材质</span><br>        obj.data.materials.append(material)\t<span class=\"hljs-comment\"># 将刚刚创建并初始化颜色的材质加入物体</span><br><br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'mask.png'</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果-1\"><a href=\"#渲染结果-1\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/mask.png\" alt=\"\"></p>\n<h2 id=\"为模型中每个点赋值并渲染\"><a href=\"#为模型中每个点赋值并渲染\" class=\"headerlink\" title=\"为模型中每个点赋值并渲染\"></a>为模型中每个点赋值并渲染</h2><p>由于渲染数据集时需要使用新数据集用nocs方法进行方法性能检验，所以必须要渲染得到nocs图（nocs相关见<a href=\"https://github.com/hughw19/NOCS_CVPR2019）\" target=\"_blank\" rel=\"noopener\">https://github.com/hughw19/NOCS_CVPR2019）</a></p>\n<p>参考<a href=\"https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/questions/2324/using-wrl-data-in-cycles/2325#2325</a></p>\n<p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs_render.png\" alt=\"\"></p>\n<h3 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">render_nocs</span><span class=\"hljs-params\">()</span>:</span><br>    scene = bpy.context.scene<br>    objs = [obj <span class=\"hljs-keyword\">for</span> obj <span class=\"hljs-keyword\">in</span> bpy.data.objects <span class=\"hljs-keyword\">if</span> obj.type <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">\"MESH\"</span>, <span class=\"hljs-string\">\"CURVE\"</span>)]<br>    <span class=\"hljs-keyword\">for</span> obj_idx, obj <span class=\"hljs-keyword\">in</span> enumerate(objs):<br>        vcol_layer = obj.data.vertex_colors.new()<br>        <span class=\"hljs-keyword\">for</span> loop_index, loop <span class=\"hljs-keyword\">in</span> enumerate(obj.data.loops):<br>            loop_vert_index = loop.vertex_index<br>            scale = <span class=\"hljs-number\">1</span><br>            color = scale * obj.data.vertices[loop_vert_index].co + Vector([<span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>, <span class=\"hljs-number\">0.5</span>])<br>            color = tuple(color) + (<span class=\"hljs-number\">1</span>,)<br><br>            vcol_layer.data[loop_index].color = color<br>        obj.data.vertex_colors.active = vcol_layer<br>        obj.data.update()<br><br>        material = bpy.data.materials.new(<span class=\"hljs-string\">'coord_color'</span>)<br><br>        material.alpha_threshold = <span class=\"hljs-number\">1</span><br><br>        material[<span class=\"hljs-string\">\"is_auto\"</span>] = <span class=\"hljs-literal\">True</span><br>        material.use_nodes = <span class=\"hljs-literal\">True</span><br>        material.node_tree.nodes.clear()<br><br>        attr = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeAttribute\"</span>)<br>        attr.attribute_name = <span class=\"hljs-string\">\"Col\"</span><br><br>        output = material.node_tree.nodes.new(type=<span class=\"hljs-string\">\"ShaderNodeOutputMaterial\"</span>)<br><br>        material.node_tree.links.new(attr.outputs[<span class=\"hljs-string\">'Color'</span>], output.inputs[<span class=\"hljs-string\">'Surface'</span>])<br><br>        obj.data.materials.clear()<br>        obj.data.materials.append(material)<br>        obj.active_material = material<br>    scene.render.filepath = cfg.OUTPUT_DIR + <span class=\"hljs-string\">'nocs.png'</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"渲染结果-2\"><a href=\"#渲染结果-2\" class=\"headerlink\" title=\"渲染结果\"></a>渲染结果</h3><p><img src=\"http://cdn.ziyedy.top/Blender%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E7%94%9F%E6%88%90CV%E6%95%B0%E6%8D%AE%E9%9B%86/nocs.png\" alt=\"\"></p>\n<h2 id=\"不错的源码\"><a href=\"#不错的源码\" class=\"headerlink\" title=\"不错的源码\"></a>不错的源码</h2><p>blender中资源本身比较少，以下是我编写代码时找到的一个质量不错的源码，值得参考</p>\n<p><a href=\"https://github.com/DIYer22/bpycv\" target=\"_blank\" rel=\"noopener\">https://github.com/DIYer22/bpycv</a></p>\n"},{"title":"SQL常用查询语句","date":"2020-06-10T09:30:10.000Z","fileName":"mysql2","_content":"\n## SELECT——查询\n\n### SELECT-FROM——基本句式（从XX表选择XX字段）\n\n1、基本使用框架\n\n```\nSELECT * FROM 数据表\n[WHERE]\n[LIMIT]\n[OFFSET]\n```\n\n2、使用别名\n\n```\nSELECT\n\t字段名 AS 别名\nFROM 数据表 AS 别名\n```\n\n3、查询语句的执行顺序：\n\n先进行语法分析和优化，找到关键字优先级，先执行FROM，再执行SELECT\n\n\n\n### LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\n\n注意：**检索出来的第一行是行0**\n\n同时若指定的行数不够，则返回最多能返回的行。\n\n```\n# 返回n条数据\nLIMIT n\nLIMIT 0, n\n# 跳过x条数据，之后返回n条数据（两者等价）\nLIMIT x, n\nLIMIT n OFFSET x\n```\n\n\n\n\n\n### DISTINCT——去重\n\n去除结果中的**重复记录**，在字段名称前加上`DISTINCT`字段，只支持一个字段名。\n\n```\nSELECT DISTINCT 字段名 FROM *;\n```\n\n\n\n### ORDER BY——排序\n\n注意：**`ORDER BY`必须位于`WHERE`**之后\n\n```\n# 按照相关信息进行排序\nSELECT * FROM * ORDER BY 列名 [ASC|DESC]\n# 多个排序信息\nSELECT * FROM * ORDER BY 列名 [ASC|DESC],列名 [ASC|DESC]\n```\n\n\n\n### 聚合函数\n\n使用**聚合函数**。所谓聚合函数，也就是平均值、最大值等函数，以下为求该字段名下的平均值函数（AVG），其他函数使用方法与此类似。该类方法在实际使用时可以将统计结果作为一个子表进行查询。\n\n```\nSELECT AVG(字段名) FROM 表名\n```\n\n**COUNT(*)**用于获得包含空值的记录数，**COUNT(字段名)**用于获取包含非空值的记录数。\n\n\n\n### GROUP BY——分组查询\n\n**分组查询**，使用`GROUP BY`子句。即通过一定规则将数据集分为若干个部分进行查询处理。以下即为使用字段1进行分组统计每一组中字段2的平均值。\n\n```\nSELECT 字段1,AVG(字段2) FROM 表名 GROUP BY 字段1;\n```\n\n使用分组查询SELECT语句中只能出现用以分组的字段以及其他字段的聚合函数，否则会报错（由于产生了**一对多**的关系）。为解决这个问题，可以使用`GROUP_CONCAT`函数，这个函数可以将符合条件的值连接起来进行输出，可以理解为将“多”的部分进行了字符串拼接。\n\n```\nSELECT 字段1,GROUP_CONCAT(字段2) FROM 表名 GROUP BY 字段1;\n```\n\n同时可以加上`WITH ROLLUP`再进行一次汇总运算（即在返回的查询结果之下再加上一条汇总记录）。\n\n```\nSELECT 字段1,AVG(字段2) FROM 表名 GROUP BY 字段1 WITH ROLLUP;\n```\n\n\n\n### HAVING——分组查询条件\n\n为何要使用HAVING子句（与WHERE的区别）\n\n**WHERE子句执行在GROUP BY子句之前**，因此如果WHERE子句中出现了如平均值等信息时SQL会不知道在哪个范围内进行平均，即报错。所以需要使用`HAVING`子句。\n\n```\n# 使用错误，WHERE不知道AVG作用范围\nSELECT f1\nFROM table\nWHERE AVG(f2) > 10\nGROUP BY f1;\n```\n\n```\n# 使用正确\nSELECT f1\nFROM table\nGROUP BY f1 HAVING AVG(f2) > 10;\n```\n\n\n\n## WHERE——条件查询\n\n过滤数据，使用`WHERE`语句指定查询的条件逻辑，中间使用AND|OR等逻辑连接符连接\n\n```\nSELECT * FROM * WHERE 条件1 [AND|OR] 条件2 ......;\n```\n\n同时注意判断相等的条件是`=`而不是`==`；不等于通常写成`<>`。\n\n除此之外还有BETWEEN，LIKE，IN等常用运算符\n\n### 常用操作符\n\n\n\n### 使用通配符\n\n\n\n\n\n## JOIN——表连接\n\n表连接即把多个表通过表之间的共用字段连接起来，可以将其视为一张表进行操作。\n\n\n\n### INNER JOIN\n\n如果表中有至少一个匹配，则返回行。结果集中只保留符合连接条件的记录。\n\n**使用WHERE语句连接默认也是INNER JOIN**，如下面第3条语句\n\n```\nSELECT * FROM 表1 [INNER] JOIN 表2 ON 连接条件;\n\nSELECT * FROM 表1 [INNER] JOIN 表2 WHERE 连接条件;\n\nSELECT * FROM 表1, 表2 WHERE 连接条件;\n```\n\n\n\n### LEFT JOIN——左连接\n\n即使右表中没有匹配，联结结果也保留左表的全部数据。同时*右表中对应数据视为NULL*\n\n### RIGHT JOIN——右连接\n\n与左连接相反，联结结果保留右表的全部数据\n\n\n\n应用在[175.组合两个表中](https://leetcode-cn.com/problems/combine-two-tables/)。该题需要满足“无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息”，所以当person表在左时采用左连接。\n\n\n\n### on和where的区别\n\n1. 对`INNER JOIN`，条件放在ON和WHERE中结果集是相同的\n2. 对外连接，条件放在ON中，则不管一些条件是否为真，都会返回对应表中的记录\n\n比如在`LEFT JOIN`中写上右表的条件，则不论是否满足有些行都会返回NULL\n\n而\n\n> 具体参考：https://www.runoob.com/w3cnote/sql-different-on-and-where.html\n\n\n\n**几种条件查询语句执行顺序：ON > WHERE > 聚合函数 > having**\n\n\n\n## 子查询\n\n\n\n以下不推荐，因为查询速度会很慢，每一次都会执行WHERE语句中的内容。\n\n```\nSELECT ename \nFROM t_emp\nWHERE deptno = (SELECT deptno FROM t_emp WHERE ename=\"SCOTT\")\n```\n\n\n\n```\nSELECT e2.ename\nFROM t_emp e1 JOIN t_emp e2 ON e1.deptno=e2.deptno\nWHERE e1.ename = \"SCOTT\"\n```\n\n\n\n将AVG的结果视为一个表，与原表进行连接。\n\n错误\n\n```\nSELECT e2.ename\nFROM t_emp e1 JOIN t_emp e2 ON e2.sal >= AVG(e1.sal)\n```\n\n正确\n\n```\nSELECT e.ename\nFROM t_emp e \nJOIN (SELECT AVG(sal) avg FROM t_emp) t\nON e.sal >= t.avg;\n```\n\n\n\n## 组合查询\n\n\n\n\n\n","source":"_posts/编程相关/SQL/SQL常用查询语句.md","raw":"---\ntitle: SQL常用查询语句\ndate: 2020-06-10 17:30:10\ntags:\n\t- 数据库\n\t- SQL\ncategories:\n\t- 编程相关\n\t- SQL\nfileName: mysql2\n---\n\n## SELECT——查询\n\n### SELECT-FROM——基本句式（从XX表选择XX字段）\n\n1、基本使用框架\n\n```\nSELECT * FROM 数据表\n[WHERE]\n[LIMIT]\n[OFFSET]\n```\n\n2、使用别名\n\n```\nSELECT\n\t字段名 AS 别名\nFROM 数据表 AS 别名\n```\n\n3、查询语句的执行顺序：\n\n先进行语法分析和优化，找到关键字优先级，先执行FROM，再执行SELECT\n\n\n\n### LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\n\n注意：**检索出来的第一行是行0**\n\n同时若指定的行数不够，则返回最多能返回的行。\n\n```\n# 返回n条数据\nLIMIT n\nLIMIT 0, n\n# 跳过x条数据，之后返回n条数据（两者等价）\nLIMIT x, n\nLIMIT n OFFSET x\n```\n\n\n\n\n\n### DISTINCT——去重\n\n去除结果中的**重复记录**，在字段名称前加上`DISTINCT`字段，只支持一个字段名。\n\n```\nSELECT DISTINCT 字段名 FROM *;\n```\n\n\n\n### ORDER BY——排序\n\n注意：**`ORDER BY`必须位于`WHERE`**之后\n\n```\n# 按照相关信息进行排序\nSELECT * FROM * ORDER BY 列名 [ASC|DESC]\n# 多个排序信息\nSELECT * FROM * ORDER BY 列名 [ASC|DESC],列名 [ASC|DESC]\n```\n\n\n\n### 聚合函数\n\n使用**聚合函数**。所谓聚合函数，也就是平均值、最大值等函数，以下为求该字段名下的平均值函数（AVG），其他函数使用方法与此类似。该类方法在实际使用时可以将统计结果作为一个子表进行查询。\n\n```\nSELECT AVG(字段名) FROM 表名\n```\n\n**COUNT(*)**用于获得包含空值的记录数，**COUNT(字段名)**用于获取包含非空值的记录数。\n\n\n\n### GROUP BY——分组查询\n\n**分组查询**，使用`GROUP BY`子句。即通过一定规则将数据集分为若干个部分进行查询处理。以下即为使用字段1进行分组统计每一组中字段2的平均值。\n\n```\nSELECT 字段1,AVG(字段2) FROM 表名 GROUP BY 字段1;\n```\n\n使用分组查询SELECT语句中只能出现用以分组的字段以及其他字段的聚合函数，否则会报错（由于产生了**一对多**的关系）。为解决这个问题，可以使用`GROUP_CONCAT`函数，这个函数可以将符合条件的值连接起来进行输出，可以理解为将“多”的部分进行了字符串拼接。\n\n```\nSELECT 字段1,GROUP_CONCAT(字段2) FROM 表名 GROUP BY 字段1;\n```\n\n同时可以加上`WITH ROLLUP`再进行一次汇总运算（即在返回的查询结果之下再加上一条汇总记录）。\n\n```\nSELECT 字段1,AVG(字段2) FROM 表名 GROUP BY 字段1 WITH ROLLUP;\n```\n\n\n\n### HAVING——分组查询条件\n\n为何要使用HAVING子句（与WHERE的区别）\n\n**WHERE子句执行在GROUP BY子句之前**，因此如果WHERE子句中出现了如平均值等信息时SQL会不知道在哪个范围内进行平均，即报错。所以需要使用`HAVING`子句。\n\n```\n# 使用错误，WHERE不知道AVG作用范围\nSELECT f1\nFROM table\nWHERE AVG(f2) > 10\nGROUP BY f1;\n```\n\n```\n# 使用正确\nSELECT f1\nFROM table\nGROUP BY f1 HAVING AVG(f2) > 10;\n```\n\n\n\n## WHERE——条件查询\n\n过滤数据，使用`WHERE`语句指定查询的条件逻辑，中间使用AND|OR等逻辑连接符连接\n\n```\nSELECT * FROM * WHERE 条件1 [AND|OR] 条件2 ......;\n```\n\n同时注意判断相等的条件是`=`而不是`==`；不等于通常写成`<>`。\n\n除此之外还有BETWEEN，LIKE，IN等常用运算符\n\n### 常用操作符\n\n\n\n### 使用通配符\n\n\n\n\n\n## JOIN——表连接\n\n表连接即把多个表通过表之间的共用字段连接起来，可以将其视为一张表进行操作。\n\n\n\n### INNER JOIN\n\n如果表中有至少一个匹配，则返回行。结果集中只保留符合连接条件的记录。\n\n**使用WHERE语句连接默认也是INNER JOIN**，如下面第3条语句\n\n```\nSELECT * FROM 表1 [INNER] JOIN 表2 ON 连接条件;\n\nSELECT * FROM 表1 [INNER] JOIN 表2 WHERE 连接条件;\n\nSELECT * FROM 表1, 表2 WHERE 连接条件;\n```\n\n\n\n### LEFT JOIN——左连接\n\n即使右表中没有匹配，联结结果也保留左表的全部数据。同时*右表中对应数据视为NULL*\n\n### RIGHT JOIN——右连接\n\n与左连接相反，联结结果保留右表的全部数据\n\n\n\n应用在[175.组合两个表中](https://leetcode-cn.com/problems/combine-two-tables/)。该题需要满足“无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息”，所以当person表在左时采用左连接。\n\n\n\n### on和where的区别\n\n1. 对`INNER JOIN`，条件放在ON和WHERE中结果集是相同的\n2. 对外连接，条件放在ON中，则不管一些条件是否为真，都会返回对应表中的记录\n\n比如在`LEFT JOIN`中写上右表的条件，则不论是否满足有些行都会返回NULL\n\n而\n\n> 具体参考：https://www.runoob.com/w3cnote/sql-different-on-and-where.html\n\n\n\n**几种条件查询语句执行顺序：ON > WHERE > 聚合函数 > having**\n\n\n\n## 子查询\n\n\n\n以下不推荐，因为查询速度会很慢，每一次都会执行WHERE语句中的内容。\n\n```\nSELECT ename \nFROM t_emp\nWHERE deptno = (SELECT deptno FROM t_emp WHERE ename=\"SCOTT\")\n```\n\n\n\n```\nSELECT e2.ename\nFROM t_emp e1 JOIN t_emp e2 ON e1.deptno=e2.deptno\nWHERE e1.ename = \"SCOTT\"\n```\n\n\n\n将AVG的结果视为一个表，与原表进行连接。\n\n错误\n\n```\nSELECT e2.ename\nFROM t_emp e1 JOIN t_emp e2 ON e2.sal >= AVG(e1.sal)\n```\n\n正确\n\n```\nSELECT e.ename\nFROM t_emp e \nJOIN (SELECT AVG(sal) avg FROM t_emp) t\nON e.sal >= t.avg;\n```\n\n\n\n## 组合查询\n\n\n\n\n\n","slug":"编程相关/SQL/SQL常用查询语句","published":1,"updated":"2021-01-22T15:46:45.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpu000z8sjs9b7zhxop","content":"<h2 id=\"SELECT——查询\"><a href=\"#SELECT——查询\" class=\"headerlink\" title=\"SELECT——查询\"></a>SELECT——查询</h2><h3 id=\"SELECT-FROM——基本句式（从XX表选择XX字段）\"><a href=\"#SELECT-FROM——基本句式（从XX表选择XX字段）\" class=\"headerlink\" title=\"SELECT-FROM——基本句式（从XX表选择XX字段）\"></a>SELECT-FROM——基本句式（从XX表选择XX字段）</h3><p>1、基本使用框架</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 数据表<br>[<span class=\"hljs-keyword\">WHERE</span>]<br>[<span class=\"hljs-keyword\">LIMIT</span>]<br>[<span class=\"hljs-keyword\">OFFSET</span>]<br></code></pre></td></tr></table></figure>\n\n<p>2、使用别名</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\t字段名 <span class=\"hljs-keyword\">AS</span> 别名<br><span class=\"hljs-keyword\">FROM</span> 数据表 <span class=\"hljs-keyword\">AS</span> 别名<br></code></pre></td></tr></table></figure>\n\n<p>3、查询语句的执行顺序：</p>\n<p>先进行语法分析和优化，找到关键字优先级，先执行FROM，再执行SELECT</p>\n<h3 id=\"LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\"><a href=\"#LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\" class=\"headerlink\" title=\"LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\"></a>LIMIT-OFFSET——限制查询返回数量，跳过的数据条数</h3><p>注意：<strong>检索出来的第一行是行0</strong></p>\n<p>同时若指定的行数不够，则返回最多能返回的行。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\"># 返回<span class=\"hljs-built_in\">n</span>条数据<br>LIMIT <span class=\"hljs-built_in\">n</span><br>LIMIT <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">n</span><br># 跳过x条数据，之后返回<span class=\"hljs-built_in\">n</span>条数据（两者等价）<br>LIMIT x, <span class=\"hljs-built_in\">n</span><br>LIMIT <span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">OFFSET</span> x<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"DISTINCT——去重\"><a href=\"#DISTINCT——去重\" class=\"headerlink\" title=\"DISTINCT——去重\"></a>DISTINCT——去重</h3><p>去除结果中的<strong>重复记录</strong>，在字段名称前加上<code>DISTINCT</code>字段，只支持一个字段名。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> 字段名 <span class=\"hljs-keyword\">FROM</span> *;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ORDER-BY——排序\"><a href=\"#ORDER-BY——排序\" class=\"headerlink\" title=\"ORDER BY——排序\"></a>ORDER BY——排序</h3><p>注意：<strong><code>ORDER BY</code>必须位于<code>WHERE</code></strong>之后</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\"># 按照相关信息进行排序</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> 列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>]<br><span class=\"hljs-comment\"># 多个排序信息</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> 列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>],列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p>使用<strong>聚合函数</strong>。所谓聚合函数，也就是平均值、最大值等函数，以下为求该字段名下的平均值函数（AVG），其他函数使用方法与此类似。该类方法在实际使用时可以将统计结果作为一个子表进行查询。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(字段名) <span class=\"hljs-keyword\">FROM</span> 表名<br></code></pre></td></tr></table></figure>\n\n<p><strong>COUNT(*)</strong>用于获得包含空值的记录数，<strong>COUNT(字段名)</strong>用于获取包含非空值的记录数。</p>\n<h3 id=\"GROUP-BY——分组查询\"><a href=\"#GROUP-BY——分组查询\" class=\"headerlink\" title=\"GROUP BY——分组查询\"></a>GROUP BY——分组查询</h3><p><strong>分组查询</strong>，使用<code>GROUP BY</code>子句。即通过一定规则将数据集分为若干个部分进行查询处理。以下即为使用字段1进行分组统计每一组中字段2的平均值。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,AVG(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1;<br></code></pre></td></tr></table></figure>\n\n<p>使用分组查询SELECT语句中只能出现用以分组的字段以及其他字段的聚合函数，否则会报错（由于产生了<strong>一对多</strong>的关系）。为解决这个问题，可以使用<code>GROUP_CONCAT</code>函数，这个函数可以将符合条件的值连接起来进行输出，可以理解为将“多”的部分进行了字符串拼接。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,GROUP_CONCAT(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1;<br></code></pre></td></tr></table></figure>\n\n<p>同时可以加上<code>WITH ROLLUP</code>再进行一次汇总运算（即在返回的查询结果之下再加上一条汇总记录）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,AVG(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1 WITH ROLLUP;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HAVING——分组查询条件\"><a href=\"#HAVING——分组查询条件\" class=\"headerlink\" title=\"HAVING——分组查询条件\"></a>HAVING——分组查询条件</h3><p>为何要使用HAVING子句（与WHERE的区别）</p>\n<p><strong>WHERE子句执行在GROUP BY子句之前</strong>，因此如果WHERE子句中出现了如平均值等信息时SQL会不知道在哪个范围内进行平均，即报错。所以需要使用<code>HAVING</code>子句。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用错误，WHERE不知道AVG作用范围</span><br>SELECT f1<br><span class=\"hljs-keyword\">FROM</span> table<br>WHERE AVG(f2) &gt; 10<span class=\"hljs-built_in\"><br>GROUP </span>BY f1;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用正确</span><br>SELECT f1<br><span class=\"hljs-keyword\">FROM</span> table<span class=\"hljs-built_in\"><br>GROUP </span>BY f1 HAVING AVG(f2) &gt; 10;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WHERE——条件查询\"><a href=\"#WHERE——条件查询\" class=\"headerlink\" title=\"WHERE——条件查询\"></a>WHERE——条件查询</h2><p>过滤数据，使用<code>WHERE</code>语句指定查询的条件逻辑，中间使用AND|OR等逻辑连接符连接</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">WHERE</span> 条件<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">AND</span>|<span class=\"hljs-keyword\">OR</span>] 条件<span class=\"hljs-number\">2</span> ......;<br></code></pre></td></tr></table></figure>\n\n<p>同时注意判断相等的条件是<code>=</code>而不是<code>==</code>；不等于通常写成<code>&lt;&gt;</code>。</p>\n<p>除此之外还有BETWEEN，LIKE，IN等常用运算符</p>\n<h3 id=\"常用操作符\"><a href=\"#常用操作符\" class=\"headerlink\" title=\"常用操作符\"></a>常用操作符</h3><h3 id=\"使用通配符\"><a href=\"#使用通配符\" class=\"headerlink\" title=\"使用通配符\"></a>使用通配符</h3><h2 id=\"JOIN——表连接\"><a href=\"#JOIN——表连接\" class=\"headerlink\" title=\"JOIN——表连接\"></a>JOIN——表连接</h2><p>表连接即把多个表通过表之间的共用字段连接起来，可以将其视为一张表进行操作。</p>\n<h3 id=\"INNER-JOIN\"><a href=\"#INNER-JOIN\" class=\"headerlink\" title=\"INNER JOIN\"></a>INNER JOIN</h3><p>如果表中有至少一个匹配，则返回行。结果集中只保留符合连接条件的记录。</p>\n<p><strong>使用WHERE语句连接默认也是INNER JOIN</strong>，如下面第3条语句</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">INNER</span>] <span class=\"hljs-keyword\">JOIN</span> 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">ON</span> 连接条件;<br><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">INNER</span>] <span class=\"hljs-keyword\">JOIN</span> 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">WHERE</span> 连接条件;<br><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span>, 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">WHERE</span> 连接条件;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"LEFT-JOIN——左连接\"><a href=\"#LEFT-JOIN——左连接\" class=\"headerlink\" title=\"LEFT JOIN——左连接\"></a>LEFT JOIN——左连接</h3><p>即使右表中没有匹配，联结结果也保留左表的全部数据。同时<em>右表中对应数据视为NULL</em></p>\n<h3 id=\"RIGHT-JOIN——右连接\"><a href=\"#RIGHT-JOIN——右连接\" class=\"headerlink\" title=\"RIGHT JOIN——右连接\"></a>RIGHT JOIN——右连接</h3><p>与左连接相反，联结结果保留右表的全部数据</p>\n<p>应用在<a href=\"https://leetcode-cn.com/problems/combine-two-tables/\" target=\"_blank\" rel=\"noopener\">175.组合两个表中</a>。该题需要满足“无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息”，所以当person表在左时采用左连接。</p>\n<h3 id=\"on和where的区别\"><a href=\"#on和where的区别\" class=\"headerlink\" title=\"on和where的区别\"></a>on和where的区别</h3><ol>\n<li>对<code>INNER JOIN</code>，条件放在ON和WHERE中结果集是相同的</li>\n<li>对外连接，条件放在ON中，则不管一些条件是否为真，都会返回对应表中的记录</li>\n</ol>\n<p>比如在<code>LEFT JOIN</code>中写上右表的条件，则不论是否满足有些行都会返回NULL</p>\n<p>而</p>\n<blockquote>\n<p>具体参考：<a href=\"https://www.runoob.com/w3cnote/sql-different-on-and-where.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/w3cnote/sql-different-on-and-where.html</a></p>\n</blockquote>\n<p><strong>几种条件查询语句执行顺序：ON &gt; WHERE &gt; 聚合函数 &gt; having</strong></p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><p>以下不推荐，因为查询速度会很慢，每一次都会执行WHERE语句中的内容。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span> ename <br><span class=\"hljs-keyword\">FROM</span> t_emp<br><span class=\"hljs-keyword\">WHERE</span> deptno = (<span class=\"hljs-keyword\">SELECT</span> deptno <span class=\"hljs-keyword\">FROM</span> t_emp <span class=\"hljs-keyword\">WHERE</span> ename=\"SCOTT\")<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span> e2.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp e1 <span class=\"hljs-keyword\">JOIN</span> t_emp e2 <span class=\"hljs-keyword\">ON</span> e1.deptno=e2.deptno<br><span class=\"hljs-keyword\">WHERE</span> e1.ename = \"SCOTT\"<br></code></pre></td></tr></table></figure>\n\n\n\n<p>将AVG的结果视为一个表，与原表进行连接。</p>\n<p>错误</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> e2.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp e1 <span class=\"hljs-keyword\">JOIN</span> t_emp e2 <span class=\"hljs-keyword\">ON</span> e2.sal &gt;= <span class=\"hljs-built_in\">AVG</span>(e1.sal)<br></code></pre></td></tr></table></figure>\n\n<p>正确</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">e</span>.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp <span class=\"hljs-built_in\">e</span> <br><span class=\"hljs-keyword\">JOIN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(sal) <span class=\"hljs-built_in\">avg</span> <span class=\"hljs-keyword\">FROM</span> t_emp) t<br><span class=\"hljs-keyword\">ON</span> <span class=\"hljs-built_in\">e</span>.sal &gt;= t.<span class=\"hljs-built_in\">avg</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SELECT——查询\"><a href=\"#SELECT——查询\" class=\"headerlink\" title=\"SELECT——查询\"></a>SELECT——查询</h2><h3 id=\"SELECT-FROM——基本句式（从XX表选择XX字段）\"><a href=\"#SELECT-FROM——基本句式（从XX表选择XX字段）\" class=\"headerlink\" title=\"SELECT-FROM——基本句式（从XX表选择XX字段）\"></a>SELECT-FROM——基本句式（从XX表选择XX字段）</h3><p>1、基本使用框架</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 数据表<br>[<span class=\"hljs-keyword\">WHERE</span>]<br>[<span class=\"hljs-keyword\">LIMIT</span>]<br>[<span class=\"hljs-keyword\">OFFSET</span>]<br></code></pre></td></tr></table></figure>\n\n<p>2、使用别名</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span><br>\t字段名 <span class=\"hljs-keyword\">AS</span> 别名<br><span class=\"hljs-keyword\">FROM</span> 数据表 <span class=\"hljs-keyword\">AS</span> 别名<br></code></pre></td></tr></table></figure>\n\n<p>3、查询语句的执行顺序：</p>\n<p>先进行语法分析和优化，找到关键字优先级，先执行FROM，再执行SELECT</p>\n<h3 id=\"LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\"><a href=\"#LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\" class=\"headerlink\" title=\"LIMIT-OFFSET——限制查询返回数量，跳过的数据条数\"></a>LIMIT-OFFSET——限制查询返回数量，跳过的数据条数</h3><p>注意：<strong>检索出来的第一行是行0</strong></p>\n<p>同时若指定的行数不够，则返回最多能返回的行。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\"># 返回<span class=\"hljs-built_in\">n</span>条数据<br>LIMIT <span class=\"hljs-built_in\">n</span><br>LIMIT <span class=\"hljs-number\">0</span>, <span class=\"hljs-built_in\">n</span><br># 跳过x条数据，之后返回<span class=\"hljs-built_in\">n</span>条数据（两者等价）<br>LIMIT x, <span class=\"hljs-built_in\">n</span><br>LIMIT <span class=\"hljs-built_in\">n</span> <span class=\"hljs-built_in\">OFFSET</span> x<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"DISTINCT——去重\"><a href=\"#DISTINCT——去重\" class=\"headerlink\" title=\"DISTINCT——去重\"></a>DISTINCT——去重</h3><p>去除结果中的<strong>重复记录</strong>，在字段名称前加上<code>DISTINCT</code>字段，只支持一个字段名。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-keyword\">DISTINCT</span> 字段名 <span class=\"hljs-keyword\">FROM</span> *;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"ORDER-BY——排序\"><a href=\"#ORDER-BY——排序\" class=\"headerlink\" title=\"ORDER BY——排序\"></a>ORDER BY——排序</h3><p>注意：<strong><code>ORDER BY</code>必须位于<code>WHERE</code></strong>之后</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-comment\"># 按照相关信息进行排序</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> 列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>]<br><span class=\"hljs-comment\"># 多个排序信息</span><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">ORDER</span> <span class=\"hljs-keyword\">BY</span> 列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>],列名 [<span class=\"hljs-keyword\">ASC</span>|<span class=\"hljs-keyword\">DESC</span>]<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a>聚合函数</h3><p>使用<strong>聚合函数</strong>。所谓聚合函数，也就是平均值、最大值等函数，以下为求该字段名下的平均值函数（AVG），其他函数使用方法与此类似。该类方法在实际使用时可以将统计结果作为一个子表进行查询。</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(字段名) <span class=\"hljs-keyword\">FROM</span> 表名<br></code></pre></td></tr></table></figure>\n\n<p><strong>COUNT(*)</strong>用于获得包含空值的记录数，<strong>COUNT(字段名)</strong>用于获取包含非空值的记录数。</p>\n<h3 id=\"GROUP-BY——分组查询\"><a href=\"#GROUP-BY——分组查询\" class=\"headerlink\" title=\"GROUP BY——分组查询\"></a>GROUP BY——分组查询</h3><p><strong>分组查询</strong>，使用<code>GROUP BY</code>子句。即通过一定规则将数据集分为若干个部分进行查询处理。以下即为使用字段1进行分组统计每一组中字段2的平均值。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,AVG(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1;<br></code></pre></td></tr></table></figure>\n\n<p>使用分组查询SELECT语句中只能出现用以分组的字段以及其他字段的聚合函数，否则会报错（由于产生了<strong>一对多</strong>的关系）。为解决这个问题，可以使用<code>GROUP_CONCAT</code>函数，这个函数可以将符合条件的值连接起来进行输出，可以理解为将“多”的部分进行了字符串拼接。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,GROUP_CONCAT(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1;<br></code></pre></td></tr></table></figure>\n\n<p>同时可以加上<code>WITH ROLLUP</code>再进行一次汇总运算（即在返回的查询结果之下再加上一条汇总记录）。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">SELECT 字段1,AVG(字段2) <span class=\"hljs-keyword\">FROM</span> 表名<span class=\"hljs-built_in\"> GROUP </span>BY 字段1 WITH ROLLUP;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HAVING——分组查询条件\"><a href=\"#HAVING——分组查询条件\" class=\"headerlink\" title=\"HAVING——分组查询条件\"></a>HAVING——分组查询条件</h3><p>为何要使用HAVING子句（与WHERE的区别）</p>\n<p><strong>WHERE子句执行在GROUP BY子句之前</strong>，因此如果WHERE子句中出现了如平均值等信息时SQL会不知道在哪个范围内进行平均，即报错。所以需要使用<code>HAVING</code>子句。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用错误，WHERE不知道AVG作用范围</span><br>SELECT f1<br><span class=\"hljs-keyword\">FROM</span> table<br>WHERE AVG(f2) &gt; 10<span class=\"hljs-built_in\"><br>GROUP </span>BY f1;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-comment\"># 使用正确</span><br>SELECT f1<br><span class=\"hljs-keyword\">FROM</span> table<span class=\"hljs-built_in\"><br>GROUP </span>BY f1 HAVING AVG(f2) &gt; 10;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WHERE——条件查询\"><a href=\"#WHERE——条件查询\" class=\"headerlink\" title=\"WHERE——条件查询\"></a>WHERE——条件查询</h2><p>过滤数据，使用<code>WHERE</code>语句指定查询的条件逻辑，中间使用AND|OR等逻辑连接符连接</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> * <span class=\"hljs-keyword\">WHERE</span> 条件<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">AND</span>|<span class=\"hljs-keyword\">OR</span>] 条件<span class=\"hljs-number\">2</span> ......;<br></code></pre></td></tr></table></figure>\n\n<p>同时注意判断相等的条件是<code>=</code>而不是<code>==</code>；不等于通常写成<code>&lt;&gt;</code>。</p>\n<p>除此之外还有BETWEEN，LIKE，IN等常用运算符</p>\n<h3 id=\"常用操作符\"><a href=\"#常用操作符\" class=\"headerlink\" title=\"常用操作符\"></a>常用操作符</h3><h3 id=\"使用通配符\"><a href=\"#使用通配符\" class=\"headerlink\" title=\"使用通配符\"></a>使用通配符</h3><h2 id=\"JOIN——表连接\"><a href=\"#JOIN——表连接\" class=\"headerlink\" title=\"JOIN——表连接\"></a>JOIN——表连接</h2><p>表连接即把多个表通过表之间的共用字段连接起来，可以将其视为一张表进行操作。</p>\n<h3 id=\"INNER-JOIN\"><a href=\"#INNER-JOIN\" class=\"headerlink\" title=\"INNER JOIN\"></a>INNER JOIN</h3><p>如果表中有至少一个匹配，则返回行。结果集中只保留符合连接条件的记录。</p>\n<p><strong>使用WHERE语句连接默认也是INNER JOIN</strong>，如下面第3条语句</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">INNER</span>] <span class=\"hljs-keyword\">JOIN</span> 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">ON</span> 连接条件;<br><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span> [<span class=\"hljs-keyword\">INNER</span>] <span class=\"hljs-keyword\">JOIN</span> 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">WHERE</span> 连接条件;<br><br><span class=\"hljs-keyword\">SELECT</span> * <span class=\"hljs-keyword\">FROM</span> 表<span class=\"hljs-number\">1</span>, 表<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">WHERE</span> 连接条件;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"LEFT-JOIN——左连接\"><a href=\"#LEFT-JOIN——左连接\" class=\"headerlink\" title=\"LEFT JOIN——左连接\"></a>LEFT JOIN——左连接</h3><p>即使右表中没有匹配，联结结果也保留左表的全部数据。同时<em>右表中对应数据视为NULL</em></p>\n<h3 id=\"RIGHT-JOIN——右连接\"><a href=\"#RIGHT-JOIN——右连接\" class=\"headerlink\" title=\"RIGHT JOIN——右连接\"></a>RIGHT JOIN——右连接</h3><p>与左连接相反，联结结果保留右表的全部数据</p>\n<p>应用在<a href=\"https://leetcode-cn.com/problems/combine-two-tables/\" target=\"_blank\" rel=\"noopener\">175.组合两个表中</a>。该题需要满足“无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息”，所以当person表在左时采用左连接。</p>\n<h3 id=\"on和where的区别\"><a href=\"#on和where的区别\" class=\"headerlink\" title=\"on和where的区别\"></a>on和where的区别</h3><ol>\n<li>对<code>INNER JOIN</code>，条件放在ON和WHERE中结果集是相同的</li>\n<li>对外连接，条件放在ON中，则不管一些条件是否为真，都会返回对应表中的记录</li>\n</ol>\n<p>比如在<code>LEFT JOIN</code>中写上右表的条件，则不论是否满足有些行都会返回NULL</p>\n<p>而</p>\n<blockquote>\n<p>具体参考：<a href=\"https://www.runoob.com/w3cnote/sql-different-on-and-where.html\" target=\"_blank\" rel=\"noopener\">https://www.runoob.com/w3cnote/sql-different-on-and-where.html</a></p>\n</blockquote>\n<p><strong>几种条件查询语句执行顺序：ON &gt; WHERE &gt; 聚合函数 &gt; having</strong></p>\n<h2 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h2><p>以下不推荐，因为查询速度会很慢，每一次都会执行WHERE语句中的内容。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span> ename <br><span class=\"hljs-keyword\">FROM</span> t_emp<br><span class=\"hljs-keyword\">WHERE</span> deptno = (<span class=\"hljs-keyword\">SELECT</span> deptno <span class=\"hljs-keyword\">FROM</span> t_emp <span class=\"hljs-keyword\">WHERE</span> ename=\"SCOTT\")<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">SELECT</span> e2.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp e1 <span class=\"hljs-keyword\">JOIN</span> t_emp e2 <span class=\"hljs-keyword\">ON</span> e1.deptno=e2.deptno<br><span class=\"hljs-keyword\">WHERE</span> e1.ename = \"SCOTT\"<br></code></pre></td></tr></table></figure>\n\n\n\n<p>将AVG的结果视为一个表，与原表进行连接。</p>\n<p>错误</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> e2.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp e1 <span class=\"hljs-keyword\">JOIN</span> t_emp e2 <span class=\"hljs-keyword\">ON</span> e2.sal &gt;= <span class=\"hljs-built_in\">AVG</span>(e1.sal)<br></code></pre></td></tr></table></figure>\n\n<p>正确</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">e</span>.ename<br><span class=\"hljs-keyword\">FROM</span> t_emp <span class=\"hljs-built_in\">e</span> <br><span class=\"hljs-keyword\">JOIN</span> (<span class=\"hljs-keyword\">SELECT</span> <span class=\"hljs-built_in\">AVG</span>(sal) <span class=\"hljs-built_in\">avg</span> <span class=\"hljs-keyword\">FROM</span> t_emp) t<br><span class=\"hljs-keyword\">ON</span> <span class=\"hljs-built_in\">e</span>.sal &gt;= t.<span class=\"hljs-built_in\">avg</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组合查询\"><a href=\"#组合查询\" class=\"headerlink\" title=\"组合查询\"></a>组合查询</h2>"},{"title":"Ubuntu下bug解决","date":"2021-01-20T15:39:29.000Z","fileName":null,"_content":"\n\n\n```\nEXT4-fs error\n```\n\n系统频繁死机\n\nhttps://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105\n\n\n\n\n\n\n\n```\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\n\n该问题产生的原因通常是由于有dpkg安装包安装时中断等引起\n\n该问题产生的通常解决方法可见：https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/\n\n比如安装向日葵时就会产生这种中断从而导致该问题，解决方法：\n\n即为在`/etc/apt/source.list`中加入`deb http://cz.archive.ubuntu.com/ubuntu bionic main universe`","source":"_posts/问题解决/Ubuntu/Ubuntu下bug解决.md","raw":"---\ntitle: Ubuntu下bug解决\ndate: 2021-01-20 23:39:29\ntags:\n\t- Ubuntu\ncategories:\n\t- 问题解决\n\t- Ubuntu\nfileName:\n---\n\n\n\n```\nEXT4-fs error\n```\n\n系统频繁死机\n\nhttps://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105\n\n\n\n\n\n\n\n```\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\n\n该问题产生的原因通常是由于有dpkg安装包安装时中断等引起\n\n该问题产生的通常解决方法可见：https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/\n\n比如安装向日葵时就会产生这种中断从而导致该问题，解决方法：\n\n即为在`/etc/apt/source.list`中加入`deb http://cz.archive.ubuntu.com/ubuntu bionic main universe`","slug":"问题解决/Ubuntu/Ubuntu下bug解决","published":1,"updated":"2021-01-21T21:23:15.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpu00108sjs0rkbgbq5","content":"<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">EXT4-fs <span class=\"hljs-keyword\">error</span><br></code></pre></td></tr></table></figure>\n\n<p>系统频繁死机</p>\n<p><a href=\"https://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">E: <span class=\"hljs-keyword\">Sub-process </span>/usr/<span class=\"hljs-keyword\">bin/dpkg </span>returned an error <span class=\"hljs-meta\">code</span> (<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n<p>该问题产生的原因通常是由于有dpkg安装包安装时中断等引起</p>\n<p>该问题产生的通常解决方法可见：<a href=\"https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/\" target=\"_blank\" rel=\"noopener\">https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/</a></p>\n<p>比如安装向日葵时就会产生这种中断从而导致该问题，解决方法：</p>\n<p>即为在<code>/etc/apt/source.list</code>中加入<code>deb http://cz.archive.ubuntu.com/ubuntu bionic main universe</code></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">EXT4-fs <span class=\"hljs-keyword\">error</span><br></code></pre></td></tr></table></figure>\n\n<p>系统频繁死机</p>\n<p><a href=\"https://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105\" target=\"_blank\" rel=\"noopener\">https://askubuntu.com/questions/905710/ext4-fs-error-after-ubuntu-17-04-upgrade/906105#906105</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">E: <span class=\"hljs-keyword\">Sub-process </span>/usr/<span class=\"hljs-keyword\">bin/dpkg </span>returned an error <span class=\"hljs-meta\">code</span> (<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n\n<p>该问题产生的原因通常是由于有dpkg安装包安装时中断等引起</p>\n<p>该问题产生的通常解决方法可见：<a href=\"https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/\" target=\"_blank\" rel=\"noopener\">https://www.tecmint.com/sub-process-usr-bin-dpkg-returned-an-error-in-ubuntu/</a></p>\n<p>比如安装向日葵时就会产生这种中断从而导致该问题，解决方法：</p>\n<p>即为在<code>/etc/apt/source.list</code>中加入<code>deb http://cz.archive.ubuntu.com/ubuntu bionic main universe</code></p>\n"},{"title":"Ubuntu安装摘记","date":"2020-09-24T03:11:26.000Z","fileName":"ubuntu-install-summary","_content":"\n\n\n## 卸载双系统Ubuntu\n\n> 从Win10系统中卸载ubuntu\n\n\n\n\n\n### 参考\n\nhttps://blog.csdn.net/mtllyb/article/details/78635757","source":"_posts/问题解决/Ubuntu/Ubuntu安装摘记.md","raw":"---\ntitle: Ubuntu安装摘记\ndate: 2020-09-24 11:11:26\ntags:\n\t- Ubuntu\ncategories:\n\t- 问题解决\n\t- Ubuntu\nfileName: ubuntu-install-summary\n---\n\n\n\n## 卸载双系统Ubuntu\n\n> 从Win10系统中卸载ubuntu\n\n\n\n\n\n### 参考\n\nhttps://blog.csdn.net/mtllyb/article/details/78635757","slug":"问题解决/Ubuntu/Ubuntu安装摘记","published":1,"updated":"2021-01-21T21:23:15.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhpv00128sjs9e2b7m2d","content":"<h2 id=\"卸载双系统Ubuntu\"><a href=\"#卸载双系统Ubuntu\" class=\"headerlink\" title=\"卸载双系统Ubuntu\"></a>卸载双系统Ubuntu</h2><blockquote>\n<p>从Win10系统中卸载ubuntu</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/mtllyb/article/details/78635757\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mtllyb/article/details/78635757</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"卸载双系统Ubuntu\"><a href=\"#卸载双系统Ubuntu\" class=\"headerlink\" title=\"卸载双系统Ubuntu\"></a>卸载双系统Ubuntu</h2><blockquote>\n<p>从Win10系统中卸载ubuntu</p>\n</blockquote>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://blog.csdn.net/mtllyb/article/details/78635757\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/mtllyb/article/details/78635757</a></p>\n"},{"title":"JDBC基础总结","date":"2021-01-30T15:33:07.000Z","fileName":"jdbc-basic-summary","_content":"\n\n\n\n\n","source":"_posts/编程相关/Java/Java Web/JDBC基础总结.md","raw":"---\ntitle: JDBC基础总结\ndate: 2021-01-30 23:33:07\ntags:\n\t- Java\n\t- 数据库\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java Web\nfileName: jdbc-basic-summary\n---\n\n\n\n\n\n","slug":"编程相关/Java/Java Web/JDBC基础总结","published":1,"updated":"2021-02-28T12:52:57.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq2001e8sjsdx93abx2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Servlet基础总结","date":"2021-01-28T05:03:39.000Z","fileName":"servlet-basic-summary","_content":"\n# Servlet基础\n\n## 概念\n\n> Servlet是 Server 与 Applet 的缩写，是用Java语言编写的*运行在服务器端*，由服务器调用执行，按照 Servlet 标准来开发的类，用来完成B/S架构下，客户端请求的响应处理。\n>\n> Servlet 本质上也是 Java 类，但要遵循 Servlet 规范进行编写，它的创建、使用、销毁都由 Servlet 容器进行管理，所谓 Servlet 容器即为提供了 Servlet 功能的服务器，常见的有Tomcat、Jetty、JBoss等等（即服务器会自动调用Servlet程序）\n>\n> 同时Servlet与HTTP紧密相连，可以处理HTTP协议相关的所有内容，因此在Java Web开发中应用广泛\n\n## Servlet实现\n\n### 继承 `HttpServlet` 类\n\n> 该类中已经完成了通信的规则，我们只需要进行业务的实现即可\n\n在整个Servlet程序之中最重要的就是Servlet接口，在此接口下定义了一个GenericServlet的子类，但是一般不会直接继承此类，而是根据所使用的协议选择GenericServlet的子类继承，例如：现在是采用HTTP协议处理的，所以一般而言当需要使用HTTP协议操作时用户自定义的Servlet类都要继承HttpServlet类。\n\n### 重写`service`方法\n\n该方法用来处理请求的操作，也可以重写`doGet`、`doPost`等方法，`service`方法的本质其实是调用了这两个方法。\n\n### 设置注解\n\n> 可以通过注解指定访问路径（在Servlet 3.0之后版本支持，否则得配置`web.xml`文件）\n\n示例如下，表示该网页位于`root/gg/ss`下，（name只是作为一个标识，没有太大实际作用）\n\n```\n@WebServlet(\"/gg/ss\")\n@WebServlet(value=\"/gg/ss\")\n@WebServlet(urlPatterns=\"/gg/ss\")\n@WebServlet(name=\"Servlet01\",value=\"/gg/ss\")\n```\n\n也可以配置多路径访问，如下表示两个路径都能够进行访问。\n\n```\n@WebServlet(name=\"Servlet01\",value={\"/ss\",'/gg'})\n```\n\n### IDEA中更改Web项目根目录\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/IDEA%E8%AE%BE%E7%BD%AEURL%E5%9C%B0%E5%9D%80.png)\n\n## Servlet生命周期\n\n> Servlet没有main()方法，不能独立运行，其运行完全由Servlet容器来控制和调度。\n>\n> 其生命周期则是指Servlet容器何时创建servlet实例、何时调用其方法进行请求的处理、何时销毁其实例的整个过程。\n>\n> Servlet类加载——>实例化——>服务——> 销毁\n\n* 实例化与初始化\n\n  请求到达容器时，容器查找该servlet对象是否存在，若不存在，则创建实例并初始化。默认方法`init()`\n\n* 就绪/调用/服务阶段\n\n  调用`service()`方法处理请求，在生命周期中可以被多次调用，`HttpServlet`中的该方法根据请求方式调用doGet和doPost方法\n\n* 销毁时机\n\n  当容器关闭时，将Servlet实例进行销毁，`destroy()`方法。\n\n\n\n# 请求与响应\n\n## HttpServletRequest对象\n\n> HttpServletRequest对象，主要作用是用来接收客户端发送过来的请求信息（如请求参数、表单等信息）\n>\n> `service()`方法中形参接收的是 HttpServletRequest 接口的实例化对象，表示该对象主要应用在 HTTP 协议上，该对象是由 Tomcat 封装好传递过来，我们只需要调用相应方法取出信息进行处理即可\n>\n> HttpServletRequest 是 `ServletRequest` 唯一的子接口\n\n### 常用方法\n\n获取基本信息的方法。\n\n| 方法名           | 功能                                                 |\n| ---------------- | ---------------------------------------------------- |\n| getRequestURL()  | 获取客户端请求的完整URL（从http开始，到?前面结束）   |\n| getRequestURI()  | 获取客户端请求的部分URL（从站点名开始，到?前面结束） |\n| getQueryString() | 获取请求行中的参数部分（?后面的部分，没有返回null）  |\n| getMethod()      | 获取客户端请求方法（GET、POST）                      |\n| getProtocol()    | 获取HTTP版本号                                       |\n| getContextPath() | 获取webapp名字                                       |\n\n### 处理表单输入\n\n> 使用`getParameter()`方法获取指定名称的对应值\n>\n> 使用`getParameterValues()`方法获取指定名称所有对应值，返回数组\n\nHTML表单如下：\n\n```\n<form action=\"test\" method=\"get\">\n    请输入：\n    <input type=\"text\" name=\"info\" />\n    <input type=\"submit\" value=\"提交\" />\n</form>\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5.png)\n\nServlet处理逻辑：\n\n```\n@WebServlet(\"/test\")    // 子目录\npublic class test extends HttpServlet {\n    public void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException {\n        resp.setContentType(\"text/html;charset=UTF-8\"); // 解决中文乱码\n        String info = req.getParameter(\"info\");\t// 获取名为info的值\n        PrintWriter out=resp.getWriter();\n        out.println(\"<html><head><title>test</title></head>\");\n        out.println(\"<body><h1>\"+info+\"</h1>\");\n        out.println(\"</body></html\");\n        out.close();\n    }\n}\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E7%BB%93%E6%9E%9C.png)\n\n## HttpServletResponse对象\n\n> 主要用于向客户端输出数据\n>\n> service()方法中形参接收的是 HttpServletResponse 接口的实例化对象，这个对象中封装了向客户端发送数据、发送响应头、发送响应状态码的方法\n\n### 响应数据\n\n> 通过HttpServletResponse对象直接使用*输出流*进行响应，响应的数据回到客户端被浏览器解析\n>\n> `getWriter()` 获取字符流\n>\n> `getOutputStream()` 获取字节流，可以响应一切数据\n\n示例如下：\n\n```\n// 字符输出流\nPrintWriter writer = response.getWriter();\nwriter.write(\"<h2>Hello</h2>\");\n```\n\n```\n// 字节输出流\nServletOutputStream out = response.getOutputStream();\nout.write(\"<h2>Hello</h2>\".getBytes());\n```\n\n设置响应类型，默认是字符串：\n\n```\n// 设置响应MIME类型\nresponse.setHeader(\"content-type\",\"text/html\"); // html\n```\n\n## 处理中文乱码\n\n解决服务器返回页面中文乱码问题\n\n```\nresponse.setContentType(\"text/html;charset=UTF-8\");\n```\n\n解决post方式请求表单参数中文乱码问题，在接收所有数据前设定\n\n```\nrequest.setCharacterEncoding(\"UTF-8\");\n```\n\nTomcat9.0已经解决了get方式请求中文乱码问题，可以不需要做此配置。\n\n## Servlet跳转\n\n### 请求转发\n\n> 一种服务器行为，只存在一次请求（因此request数据共享），地址栏不会发生改变\n>\n> 同时只能跳转到该站点下的目录\n\n```\nrequest.getRequestDispatcher(url).forward(request,response);\n```\n\n### 重定向\n\n> 服务端指导，客户端行为，存在两次请求，且地址栏会发生改变\n>\n> 可以跳转到任意目录，比如www.baidu.com\n>\n> 第一次请求会获得3开头的响应码，并且含有一个 location 头信息（代表重定向的地址）\n\n```\n// 重定向跳转到index.jsp\nresponse.sendRedirect(\"index.jsp\");\n```\n\n## ServletContext对象\n\n> 在Web容器启动的时候，会为每一个 Web 应用程序创建一个对应的 `ServletContext` 对象，每个Web应用都有且只有一个`ServletContext`对象\n>\n> 主要作用：1、作为域对象在整个Web应用共享数据；2、保存了当前应用程序的相关信息\n\n### 获取与常用方法\n\n```\n// 通过 request 对象获取\nServletContext servletContext = request.getServletContext();\n\n// 通过 session 对象获取\nServletContext servletContext = request.getSession().getServletContext();\n\n// 通过 servletConfig 对象获取\nServletConfig servletConfig = getServletConfig();\nServletContext servletContext = servletConfig.getServletContext();\n\n// 直接通过Servlet类获取\nServletContext servletContext = getServletContext();\n\n// 获取项目存放的真实路径\nString realPath = request.getServletContext().getRealPath(\"/\");\n// 获取当前服务器的版本信息\nString serverInfo = request.getServletContext().getServerInfo();\n```\n\n### ServletContext域对象使用\n\n```\n// 获取ServletContext对象\nServletContext servletContext = request.getServletContext();\n// 设置域对象\nservletContext.setAttribute(\"name\",\"zhangsan\");\n// 获取域对象\nString name = (String) servletContext.getAttribute(\"name\");\n// 移除域对象\nservletContext.removeAttribute(\"name\");\n```\n\n\n\n# 会话\n\n## Cookie\n\n> `javax.servlet.http.Cookie`\n\n### 特点\n\n* Cookie只保存在当前浏览器中\n* Cookie中不能出现中文，需要进行编解码操作\n* 如果服务器端发送重复的Cookie那么会覆盖原有的Cookie\n* 浏览器存放Cookie的数量是有上限的\n\n### Cookie的创建与发送\n\n```\n// 创建Cookie对象\nCookie cookie = new Cookie(\"id\", 0);\n// 发送Cookie对象\nresponse.addCookie(cookie);\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%88%9B%E5%BB%BAcookie.png)\n\n如上，即创建了我们自己的cookie\n\n```\n@WebServlet(\"/cookie1\")\npublic class Cookie1 extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // 创建Cookie对象\n        Cookie cookie = new Cookie(\"id\", \"id\");\n        // 发送Cookie对象\n        response.addCookie(cookie);\n    }\n}\n```\n\n### Cookie的获取\n\n> Servlet提供了一个 `getCookies()`的方法用来获取客户端回传的所有 cookie 组成的一个*数组*，如果需要获取单个 cookie 则需要通过遍历，`getName()`获取 Cookie 的名称，`getValue()`获取 Cookie 的值\n\n\n\n```\n// 获取Cookie数组\nCookie[] cookies = request.getCookies();\n// 判断数组是否为空\nif (cookies != null && cookies.length > 0) {\n  \t// 遍历Cookie数组\n  \tfor (Cookie cookie : cookies){\n  \t\t// 判断并获取\n    \tSystem.out.println(cookie.getName());\n    \tSystem.out.println(cookie.getValue());\n\t}\n}\n```\n\n### Cookie的路径\n\n> Cookie的`setPath()`方法设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie\n>\n> 默认情况下只有当前项目能获取当前项目产生的cookie\n\n```\n// 设置路径为\"/\"，表示在当前服务器下任何项目都可访问到该Cookie对象\ncookie.setPath(\"/\");\n\n// 只有gg项目能访问该cookie\ncookie.setPath(\"/gg\");\n\n// 只有/gg/ss目录下的文件才能访问到cookie\ncookie.setPath(\"/gg/ss\");\n```\n\n### Cookie的到期时间\n\n> Cookie默认当前浏览器关闭即失效，也可以通过 `setMaxAge(int time)`方法设定 cookie 的最大有效时间，以秒为单位\n>\n> time为负数，表示不存储该Cookie，浏览器关闭即失效\n>\n> time为0，表示删除该cookie\n>\n> time为正数则为存储的秒数\n\n\n\n## Session\n\n> session 本身就属于 HTTP 协议，用于保留某个用户访问的信息，只保存在当前浏览器当中。\n>\n> 对于服务器而言，每一个连接到它的客户端都是一个 session，servlet 容器使用` javax.servlet.http.HttpSession`创建 HTTP 客户端和 HTTP 服务器之间的会话\n>\n> 简而言之，Session 的作用就是为了标识一次会话，或者说确认一个用户，并且在一次会话（一个用户的多次请求）期间共享数据\n\n### Session的获取与基本使用\n\n```\n@WebServlet(\"/session1\")\npublic class Session1 extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    \t// 获取Session对象\n        HttpSession session = request.getSession();\n\n\t\t// 获取Session会话标识符\n\t\t// D111F6C6F0A65C44184672B9BF04D728\n        System.out.println(session.getId());\n\n\t\t// 获取Session创建时间\n\t\t// 1612756089930\n        System.out.println(session.getCreationTime());\n\n\t\t// 获取最后一次访问时间\n\t\t// 1612756089935\n        System.out.println(session.getLastAccessedTime());\n\t\t\n\t\t// 判断是否是新的Session对象\n\t\t// false\n        System.out.println(session.isNew());\n    }\n}\n```\n\n### JSESSIONID标识符\n\n> 使用一个叫JSESSIONID的特殊cookie来标识一次会话，Session 的底层依赖 Cookie 来实现\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/session.png)\n\n### Session域对象\n\n> Session 用来表示一次会话，在一次会话中数据是可以共享的，这时 session 作为域对象存在\n\n```\n// 向域对象中添加数据\nsetAttribute(name, value)\n\n// 从域对象中获取数据\ngetAttribute(name)\n\n// 从域对象中移除数据\nremoveAttribute(name)\n```\n\n### Session对象的销毁\n\n#### 默认到期时间\n\n> 由服务器设置产生，如Tomcat 中 session 默认的存活时间为30min，一旦客户端有操作，session 会重新计时\n\n可以在 Tomcat 中的 conf 目录下的 web.xml 文件中进行修改\n\n```\n<session-config>\n\t<session-timeout>30</session-timeout>\n</session-config>\n```\n\n#### 设置到期时间\n\n```\n// 设置session的最大不活动时间(单位为秒)\nsession.setMaxInactiveInterval(30); // 30秒\n\n// 获取session的最大不活动时间\nint time = session.getMaxInactiveInterval();\n```\n\n#### 立即失效\n\n```\n// 销毁session对象\nsession.invalidate();\n```\n\n### Servlet三大域对象\n\n> Servlet的三大域对象：\n>\n> 1、request域对象；在一次请求中有效\n>\n> 2、session域对象；在一次会话中有效\n>\n> 3、servletContext域对象；在整个应用程序中有效，服务器关闭后失效\n\n\n\n# 文件的上传与下载\n\n## 文件上传\n\n### 前台实现\n\n> 表单提交类型选择post；表单类型选择`enctype=\"multipart/form-data\"`\n\n```\n<form method=\"post\" action=\"uploadServlet\" enctype=\"multipart/form-data\">\n    文件：<input type=\"file\" name=\"myfile\">\n    <button type=\"submit\">提交</button>\n</form>\n```\n\n### 后台实现\n\n> 1、使用注解`@MultipartConfig()`标识文件上传\n>\n> 2、 Servlet 将 `multipart/form-data` 的 POST 请求封装成 Part，通过 Part 对上传的文件进行操作\n\n```\n@WebServlet(\"/uploadServlet\")\n@MultipartConfig()\npublic class UploadServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setCharacterEncoding(\"UTF-8\");\n        Part part = request.getPart(\"myfile\");\n\n        String cd = part.getHeader(\"Content-Disposition\");\n        String fileName = cd.substring(cd.lastIndexOf(\"=\")+2, cd.length()-1);\n\n        String realPath = request.getServletContext().getRealPath(\"/\");\n        part.write(realPath + fileName);\t// 写入文件\n    }\n}\n```\n\n\n\n## 文件下载\n\n### 超链接下载\n\n```\n<!-- 当超链接遇到浏览器不识别的资源时，会自动下载 -->\n<a href=\"test.zip\">超链接下载</a>\n\n<!-- 通过download属性可进行下载 -->\n<a href=\"test.zip\" download>超链接下载</a>\n```","source":"_posts/编程相关/Java/Java Web/Servlet基础总结.md","raw":"---\ntitle: Servlet基础总结\ndate: 2021-01-28 13:03:39\ntags:\n\t- Java\n\t- Web\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java Web\nfileName: servlet-basic-summary\n---\n\n# Servlet基础\n\n## 概念\n\n> Servlet是 Server 与 Applet 的缩写，是用Java语言编写的*运行在服务器端*，由服务器调用执行，按照 Servlet 标准来开发的类，用来完成B/S架构下，客户端请求的响应处理。\n>\n> Servlet 本质上也是 Java 类，但要遵循 Servlet 规范进行编写，它的创建、使用、销毁都由 Servlet 容器进行管理，所谓 Servlet 容器即为提供了 Servlet 功能的服务器，常见的有Tomcat、Jetty、JBoss等等（即服务器会自动调用Servlet程序）\n>\n> 同时Servlet与HTTP紧密相连，可以处理HTTP协议相关的所有内容，因此在Java Web开发中应用广泛\n\n## Servlet实现\n\n### 继承 `HttpServlet` 类\n\n> 该类中已经完成了通信的规则，我们只需要进行业务的实现即可\n\n在整个Servlet程序之中最重要的就是Servlet接口，在此接口下定义了一个GenericServlet的子类，但是一般不会直接继承此类，而是根据所使用的协议选择GenericServlet的子类继承，例如：现在是采用HTTP协议处理的，所以一般而言当需要使用HTTP协议操作时用户自定义的Servlet类都要继承HttpServlet类。\n\n### 重写`service`方法\n\n该方法用来处理请求的操作，也可以重写`doGet`、`doPost`等方法，`service`方法的本质其实是调用了这两个方法。\n\n### 设置注解\n\n> 可以通过注解指定访问路径（在Servlet 3.0之后版本支持，否则得配置`web.xml`文件）\n\n示例如下，表示该网页位于`root/gg/ss`下，（name只是作为一个标识，没有太大实际作用）\n\n```\n@WebServlet(\"/gg/ss\")\n@WebServlet(value=\"/gg/ss\")\n@WebServlet(urlPatterns=\"/gg/ss\")\n@WebServlet(name=\"Servlet01\",value=\"/gg/ss\")\n```\n\n也可以配置多路径访问，如下表示两个路径都能够进行访问。\n\n```\n@WebServlet(name=\"Servlet01\",value={\"/ss\",'/gg'})\n```\n\n### IDEA中更改Web项目根目录\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/IDEA%E8%AE%BE%E7%BD%AEURL%E5%9C%B0%E5%9D%80.png)\n\n## Servlet生命周期\n\n> Servlet没有main()方法，不能独立运行，其运行完全由Servlet容器来控制和调度。\n>\n> 其生命周期则是指Servlet容器何时创建servlet实例、何时调用其方法进行请求的处理、何时销毁其实例的整个过程。\n>\n> Servlet类加载——>实例化——>服务——> 销毁\n\n* 实例化与初始化\n\n  请求到达容器时，容器查找该servlet对象是否存在，若不存在，则创建实例并初始化。默认方法`init()`\n\n* 就绪/调用/服务阶段\n\n  调用`service()`方法处理请求，在生命周期中可以被多次调用，`HttpServlet`中的该方法根据请求方式调用doGet和doPost方法\n\n* 销毁时机\n\n  当容器关闭时，将Servlet实例进行销毁，`destroy()`方法。\n\n\n\n# 请求与响应\n\n## HttpServletRequest对象\n\n> HttpServletRequest对象，主要作用是用来接收客户端发送过来的请求信息（如请求参数、表单等信息）\n>\n> `service()`方法中形参接收的是 HttpServletRequest 接口的实例化对象，表示该对象主要应用在 HTTP 协议上，该对象是由 Tomcat 封装好传递过来，我们只需要调用相应方法取出信息进行处理即可\n>\n> HttpServletRequest 是 `ServletRequest` 唯一的子接口\n\n### 常用方法\n\n获取基本信息的方法。\n\n| 方法名           | 功能                                                 |\n| ---------------- | ---------------------------------------------------- |\n| getRequestURL()  | 获取客户端请求的完整URL（从http开始，到?前面结束）   |\n| getRequestURI()  | 获取客户端请求的部分URL（从站点名开始，到?前面结束） |\n| getQueryString() | 获取请求行中的参数部分（?后面的部分，没有返回null）  |\n| getMethod()      | 获取客户端请求方法（GET、POST）                      |\n| getProtocol()    | 获取HTTP版本号                                       |\n| getContextPath() | 获取webapp名字                                       |\n\n### 处理表单输入\n\n> 使用`getParameter()`方法获取指定名称的对应值\n>\n> 使用`getParameterValues()`方法获取指定名称所有对应值，返回数组\n\nHTML表单如下：\n\n```\n<form action=\"test\" method=\"get\">\n    请输入：\n    <input type=\"text\" name=\"info\" />\n    <input type=\"submit\" value=\"提交\" />\n</form>\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5.png)\n\nServlet处理逻辑：\n\n```\n@WebServlet(\"/test\")    // 子目录\npublic class test extends HttpServlet {\n    public void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException {\n        resp.setContentType(\"text/html;charset=UTF-8\"); // 解决中文乱码\n        String info = req.getParameter(\"info\");\t// 获取名为info的值\n        PrintWriter out=resp.getWriter();\n        out.println(\"<html><head><title>test</title></head>\");\n        out.println(\"<body><h1>\"+info+\"</h1>\");\n        out.println(\"</body></html\");\n        out.close();\n    }\n}\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E7%BB%93%E6%9E%9C.png)\n\n## HttpServletResponse对象\n\n> 主要用于向客户端输出数据\n>\n> service()方法中形参接收的是 HttpServletResponse 接口的实例化对象，这个对象中封装了向客户端发送数据、发送响应头、发送响应状态码的方法\n\n### 响应数据\n\n> 通过HttpServletResponse对象直接使用*输出流*进行响应，响应的数据回到客户端被浏览器解析\n>\n> `getWriter()` 获取字符流\n>\n> `getOutputStream()` 获取字节流，可以响应一切数据\n\n示例如下：\n\n```\n// 字符输出流\nPrintWriter writer = response.getWriter();\nwriter.write(\"<h2>Hello</h2>\");\n```\n\n```\n// 字节输出流\nServletOutputStream out = response.getOutputStream();\nout.write(\"<h2>Hello</h2>\".getBytes());\n```\n\n设置响应类型，默认是字符串：\n\n```\n// 设置响应MIME类型\nresponse.setHeader(\"content-type\",\"text/html\"); // html\n```\n\n## 处理中文乱码\n\n解决服务器返回页面中文乱码问题\n\n```\nresponse.setContentType(\"text/html;charset=UTF-8\");\n```\n\n解决post方式请求表单参数中文乱码问题，在接收所有数据前设定\n\n```\nrequest.setCharacterEncoding(\"UTF-8\");\n```\n\nTomcat9.0已经解决了get方式请求中文乱码问题，可以不需要做此配置。\n\n## Servlet跳转\n\n### 请求转发\n\n> 一种服务器行为，只存在一次请求（因此request数据共享），地址栏不会发生改变\n>\n> 同时只能跳转到该站点下的目录\n\n```\nrequest.getRequestDispatcher(url).forward(request,response);\n```\n\n### 重定向\n\n> 服务端指导，客户端行为，存在两次请求，且地址栏会发生改变\n>\n> 可以跳转到任意目录，比如www.baidu.com\n>\n> 第一次请求会获得3开头的响应码，并且含有一个 location 头信息（代表重定向的地址）\n\n```\n// 重定向跳转到index.jsp\nresponse.sendRedirect(\"index.jsp\");\n```\n\n## ServletContext对象\n\n> 在Web容器启动的时候，会为每一个 Web 应用程序创建一个对应的 `ServletContext` 对象，每个Web应用都有且只有一个`ServletContext`对象\n>\n> 主要作用：1、作为域对象在整个Web应用共享数据；2、保存了当前应用程序的相关信息\n\n### 获取与常用方法\n\n```\n// 通过 request 对象获取\nServletContext servletContext = request.getServletContext();\n\n// 通过 session 对象获取\nServletContext servletContext = request.getSession().getServletContext();\n\n// 通过 servletConfig 对象获取\nServletConfig servletConfig = getServletConfig();\nServletContext servletContext = servletConfig.getServletContext();\n\n// 直接通过Servlet类获取\nServletContext servletContext = getServletContext();\n\n// 获取项目存放的真实路径\nString realPath = request.getServletContext().getRealPath(\"/\");\n// 获取当前服务器的版本信息\nString serverInfo = request.getServletContext().getServerInfo();\n```\n\n### ServletContext域对象使用\n\n```\n// 获取ServletContext对象\nServletContext servletContext = request.getServletContext();\n// 设置域对象\nservletContext.setAttribute(\"name\",\"zhangsan\");\n// 获取域对象\nString name = (String) servletContext.getAttribute(\"name\");\n// 移除域对象\nservletContext.removeAttribute(\"name\");\n```\n\n\n\n# 会话\n\n## Cookie\n\n> `javax.servlet.http.Cookie`\n\n### 特点\n\n* Cookie只保存在当前浏览器中\n* Cookie中不能出现中文，需要进行编解码操作\n* 如果服务器端发送重复的Cookie那么会覆盖原有的Cookie\n* 浏览器存放Cookie的数量是有上限的\n\n### Cookie的创建与发送\n\n```\n// 创建Cookie对象\nCookie cookie = new Cookie(\"id\", 0);\n// 发送Cookie对象\nresponse.addCookie(cookie);\n```\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%88%9B%E5%BB%BAcookie.png)\n\n如上，即创建了我们自己的cookie\n\n```\n@WebServlet(\"/cookie1\")\npublic class Cookie1 extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        // 创建Cookie对象\n        Cookie cookie = new Cookie(\"id\", \"id\");\n        // 发送Cookie对象\n        response.addCookie(cookie);\n    }\n}\n```\n\n### Cookie的获取\n\n> Servlet提供了一个 `getCookies()`的方法用来获取客户端回传的所有 cookie 组成的一个*数组*，如果需要获取单个 cookie 则需要通过遍历，`getName()`获取 Cookie 的名称，`getValue()`获取 Cookie 的值\n\n\n\n```\n// 获取Cookie数组\nCookie[] cookies = request.getCookies();\n// 判断数组是否为空\nif (cookies != null && cookies.length > 0) {\n  \t// 遍历Cookie数组\n  \tfor (Cookie cookie : cookies){\n  \t\t// 判断并获取\n    \tSystem.out.println(cookie.getName());\n    \tSystem.out.println(cookie.getValue());\n\t}\n}\n```\n\n### Cookie的路径\n\n> Cookie的`setPath()`方法设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie\n>\n> 默认情况下只有当前项目能获取当前项目产生的cookie\n\n```\n// 设置路径为\"/\"，表示在当前服务器下任何项目都可访问到该Cookie对象\ncookie.setPath(\"/\");\n\n// 只有gg项目能访问该cookie\ncookie.setPath(\"/gg\");\n\n// 只有/gg/ss目录下的文件才能访问到cookie\ncookie.setPath(\"/gg/ss\");\n```\n\n### Cookie的到期时间\n\n> Cookie默认当前浏览器关闭即失效，也可以通过 `setMaxAge(int time)`方法设定 cookie 的最大有效时间，以秒为单位\n>\n> time为负数，表示不存储该Cookie，浏览器关闭即失效\n>\n> time为0，表示删除该cookie\n>\n> time为正数则为存储的秒数\n\n\n\n## Session\n\n> session 本身就属于 HTTP 协议，用于保留某个用户访问的信息，只保存在当前浏览器当中。\n>\n> 对于服务器而言，每一个连接到它的客户端都是一个 session，servlet 容器使用` javax.servlet.http.HttpSession`创建 HTTP 客户端和 HTTP 服务器之间的会话\n>\n> 简而言之，Session 的作用就是为了标识一次会话，或者说确认一个用户，并且在一次会话（一个用户的多次请求）期间共享数据\n\n### Session的获取与基本使用\n\n```\n@WebServlet(\"/session1\")\npublic class Session1 extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    \t// 获取Session对象\n        HttpSession session = request.getSession();\n\n\t\t// 获取Session会话标识符\n\t\t// D111F6C6F0A65C44184672B9BF04D728\n        System.out.println(session.getId());\n\n\t\t// 获取Session创建时间\n\t\t// 1612756089930\n        System.out.println(session.getCreationTime());\n\n\t\t// 获取最后一次访问时间\n\t\t// 1612756089935\n        System.out.println(session.getLastAccessedTime());\n\t\t\n\t\t// 判断是否是新的Session对象\n\t\t// false\n        System.out.println(session.isNew());\n    }\n}\n```\n\n### JSESSIONID标识符\n\n> 使用一个叫JSESSIONID的特殊cookie来标识一次会话，Session 的底层依赖 Cookie 来实现\n\n![](http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/session.png)\n\n### Session域对象\n\n> Session 用来表示一次会话，在一次会话中数据是可以共享的，这时 session 作为域对象存在\n\n```\n// 向域对象中添加数据\nsetAttribute(name, value)\n\n// 从域对象中获取数据\ngetAttribute(name)\n\n// 从域对象中移除数据\nremoveAttribute(name)\n```\n\n### Session对象的销毁\n\n#### 默认到期时间\n\n> 由服务器设置产生，如Tomcat 中 session 默认的存活时间为30min，一旦客户端有操作，session 会重新计时\n\n可以在 Tomcat 中的 conf 目录下的 web.xml 文件中进行修改\n\n```\n<session-config>\n\t<session-timeout>30</session-timeout>\n</session-config>\n```\n\n#### 设置到期时间\n\n```\n// 设置session的最大不活动时间(单位为秒)\nsession.setMaxInactiveInterval(30); // 30秒\n\n// 获取session的最大不活动时间\nint time = session.getMaxInactiveInterval();\n```\n\n#### 立即失效\n\n```\n// 销毁session对象\nsession.invalidate();\n```\n\n### Servlet三大域对象\n\n> Servlet的三大域对象：\n>\n> 1、request域对象；在一次请求中有效\n>\n> 2、session域对象；在一次会话中有效\n>\n> 3、servletContext域对象；在整个应用程序中有效，服务器关闭后失效\n\n\n\n# 文件的上传与下载\n\n## 文件上传\n\n### 前台实现\n\n> 表单提交类型选择post；表单类型选择`enctype=\"multipart/form-data\"`\n\n```\n<form method=\"post\" action=\"uploadServlet\" enctype=\"multipart/form-data\">\n    文件：<input type=\"file\" name=\"myfile\">\n    <button type=\"submit\">提交</button>\n</form>\n```\n\n### 后台实现\n\n> 1、使用注解`@MultipartConfig()`标识文件上传\n>\n> 2、 Servlet 将 `multipart/form-data` 的 POST 请求封装成 Part，通过 Part 对上传的文件进行操作\n\n```\n@WebServlet(\"/uploadServlet\")\n@MultipartConfig()\npublic class UploadServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setCharacterEncoding(\"UTF-8\");\n        Part part = request.getPart(\"myfile\");\n\n        String cd = part.getHeader(\"Content-Disposition\");\n        String fileName = cd.substring(cd.lastIndexOf(\"=\")+2, cd.length()-1);\n\n        String realPath = request.getServletContext().getRealPath(\"/\");\n        part.write(realPath + fileName);\t// 写入文件\n    }\n}\n```\n\n\n\n## 文件下载\n\n### 超链接下载\n\n```\n<!-- 当超链接遇到浏览器不识别的资源时，会自动下载 -->\n<a href=\"test.zip\">超链接下载</a>\n\n<!-- 通过download属性可进行下载 -->\n<a href=\"test.zip\" download>超链接下载</a>\n```","slug":"编程相关/Java/Java Web/Servlet基础总结","published":1,"updated":"2021-02-28T12:51:45.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq3001f8sjs95lead7d","content":"<h1 id=\"Servlet基础\"><a href=\"#Servlet基础\" class=\"headerlink\" title=\"Servlet基础\"></a>Servlet基础</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>Servlet是 Server 与 Applet 的缩写，是用Java语言编写的<em>运行在服务器端</em>，由服务器调用执行，按照 Servlet 标准来开发的类，用来完成B/S架构下，客户端请求的响应处理。</p>\n<p>Servlet 本质上也是 Java 类，但要遵循 Servlet 规范进行编写，它的创建、使用、销毁都由 Servlet 容器进行管理，所谓 Servlet 容器即为提供了 Servlet 功能的服务器，常见的有Tomcat、Jetty、JBoss等等（即服务器会自动调用Servlet程序）</p>\n<p>同时Servlet与HTTP紧密相连，可以处理HTTP协议相关的所有内容，因此在Java Web开发中应用广泛</p>\n</blockquote>\n<h2 id=\"Servlet实现\"><a href=\"#Servlet实现\" class=\"headerlink\" title=\"Servlet实现\"></a>Servlet实现</h2><h3 id=\"继承-HttpServlet-类\"><a href=\"#继承-HttpServlet-类\" class=\"headerlink\" title=\"继承 HttpServlet 类\"></a>继承 <code>HttpServlet</code> 类</h3><blockquote>\n<p>该类中已经完成了通信的规则，我们只需要进行业务的实现即可</p>\n</blockquote>\n<p>在整个Servlet程序之中最重要的就是Servlet接口，在此接口下定义了一个GenericServlet的子类，但是一般不会直接继承此类，而是根据所使用的协议选择GenericServlet的子类继承，例如：现在是采用HTTP协议处理的，所以一般而言当需要使用HTTP协议操作时用户自定义的Servlet类都要继承HttpServlet类。</p>\n<h3 id=\"重写service方法\"><a href=\"#重写service方法\" class=\"headerlink\" title=\"重写service方法\"></a>重写<code>service</code>方法</h3><p>该方法用来处理请求的操作，也可以重写<code>doGet</code>、<code>doPost</code>等方法，<code>service</code>方法的本质其实是调用了这两个方法。</p>\n<h3 id=\"设置注解\"><a href=\"#设置注解\" class=\"headerlink\" title=\"设置注解\"></a>设置注解</h3><blockquote>\n<p>可以通过注解指定访问路径（在Servlet 3.0之后版本支持，否则得配置<code>web.xml</code>文件）</p>\n</blockquote>\n<p>示例如下，表示该网页位于<code>root/gg/ss</code>下，（name只是作为一个标识，没有太大实际作用）</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@WebServlet</span>(<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(value=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(urlPatterns=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(name=<span class=\"hljs-string\">\"Servlet01\"</span>,value=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br></code></pre></td></tr></table></figure>\n\n<p>也可以配置多路径访问，如下表示两个路径都能够进行访问。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@<span class=\"hljs-constructor\">WebServlet(<span class=\"hljs-params\">name</span>=<span class=\"hljs-string\">\"Servlet01\"</span>,<span class=\"hljs-params\">value</span>=&#123;<span class=\"hljs-string\">\"/ss\"</span>,'<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">gg</span>'&#125;)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"IDEA中更改Web项目根目录\"><a href=\"#IDEA中更改Web项目根目录\" class=\"headerlink\" title=\"IDEA中更改Web项目根目录\"></a>IDEA中更改Web项目根目录</h3><p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/IDEA%E8%AE%BE%E7%BD%AEURL%E5%9C%B0%E5%9D%80.png\" alt=\"\"></p>\n<h2 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h2><blockquote>\n<p>Servlet没有main()方法，不能独立运行，其运行完全由Servlet容器来控制和调度。</p>\n<p>其生命周期则是指Servlet容器何时创建servlet实例、何时调用其方法进行请求的处理、何时销毁其实例的整个过程。</p>\n<p>Servlet类加载——&gt;实例化——&gt;服务——&gt; 销毁</p>\n</blockquote>\n<ul>\n<li><p>实例化与初始化</p>\n<p>请求到达容器时，容器查找该servlet对象是否存在，若不存在，则创建实例并初始化。默认方法<code>init()</code></p>\n</li>\n<li><p>就绪/调用/服务阶段</p>\n<p>调用<code>service()</code>方法处理请求，在生命周期中可以被多次调用，<code>HttpServlet</code>中的该方法根据请求方式调用doGet和doPost方法</p>\n</li>\n<li><p>销毁时机</p>\n<p>当容器关闭时，将Servlet实例进行销毁，<code>destroy()</code>方法。</p>\n</li>\n</ul>\n<h1 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h1><h2 id=\"HttpServletRequest对象\"><a href=\"#HttpServletRequest对象\" class=\"headerlink\" title=\"HttpServletRequest对象\"></a>HttpServletRequest对象</h2><blockquote>\n<p>HttpServletRequest对象，主要作用是用来接收客户端发送过来的请求信息（如请求参数、表单等信息）</p>\n<p><code>service()</code>方法中形参接收的是 HttpServletRequest 接口的实例化对象，表示该对象主要应用在 HTTP 协议上，该对象是由 Tomcat 封装好传递过来，我们只需要调用相应方法取出信息进行处理即可</p>\n<p>HttpServletRequest 是 <code>ServletRequest</code> 唯一的子接口</p>\n</blockquote>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><p>获取基本信息的方法。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getRequestURL()</td>\n<td>获取客户端请求的完整URL（从http开始，到?前面结束）</td>\n</tr>\n<tr>\n<td>getRequestURI()</td>\n<td>获取客户端请求的部分URL（从站点名开始，到?前面结束）</td>\n</tr>\n<tr>\n<td>getQueryString()</td>\n<td>获取请求行中的参数部分（?后面的部分，没有返回null）</td>\n</tr>\n<tr>\n<td>getMethod()</td>\n<td>获取客户端请求方法（GET、POST）</td>\n</tr>\n<tr>\n<td>getProtocol()</td>\n<td>获取HTTP版本号</td>\n</tr>\n<tr>\n<td>getContextPath()</td>\n<td>获取webapp名字</td>\n</tr>\n</tbody></table>\n<h3 id=\"处理表单输入\"><a href=\"#处理表单输入\" class=\"headerlink\" title=\"处理表单输入\"></a>处理表单输入</h3><blockquote>\n<p>使用<code>getParameter()</code>方法获取指定名称的对应值</p>\n<p>使用<code>getParameterValues()</code>方法获取指定名称所有对应值，返回数组</p>\n</blockquote>\n<p>HTML表单如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">&lt;form action=\"test\" <span class=\"hljs-keyword\">method</span>=\"get\"&gt;<br>    请输入：<br>    &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"text\" <span class=\"hljs-type\">name</span>=\"info\" /&gt;<br>    &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"submit\" <span class=\"hljs-keyword\">value</span>=\"提交\" /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5.png\" alt=\"\"></p>\n<p>Servlet处理逻辑：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/test\"</span>)    <span class=\"hljs-comment\">// 子目录</span><br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">test</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    public void doGet(<span class=\"hljs-type\">HttpServletRequest</span> req, <span class=\"hljs-type\">HttpServletResponse</span> resp)<span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        resp.setContentType(<span class=\"hljs-string\">\"text/html;charset=UTF-8\"</span>); <span class=\"hljs-comment\">// 解决中文乱码</span><br>        <span class=\"hljs-type\">String</span> info = req.getParameter(<span class=\"hljs-string\">\"info\"</span>);\t<span class=\"hljs-comment\">// 获取名为info的值</span><br>        <span class=\"hljs-type\">PrintWriter</span> out=resp.getWriter();<br>        out.println(<span class=\"hljs-string\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;/head&gt;\"</span>);<br>        out.println(<span class=\"hljs-string\">\"&lt;body&gt;&lt;h1&gt;\"</span>+info+<span class=\"hljs-string\">\"&lt;/h1&gt;\"</span>);<br>        out.println(<span class=\"hljs-string\">\"&lt;/body&gt;&lt;/html\"</span>);<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<h2 id=\"HttpServletResponse对象\"><a href=\"#HttpServletResponse对象\" class=\"headerlink\" title=\"HttpServletResponse对象\"></a>HttpServletResponse对象</h2><blockquote>\n<p>主要用于向客户端输出数据</p>\n<p>service()方法中形参接收的是 HttpServletResponse 接口的实例化对象，这个对象中封装了向客户端发送数据、发送响应头、发送响应状态码的方法</p>\n</blockquote>\n<h3 id=\"响应数据\"><a href=\"#响应数据\" class=\"headerlink\" title=\"响应数据\"></a>响应数据</h3><blockquote>\n<p>通过HttpServletResponse对象直接使用<em>输出流</em>进行响应，响应的数据回到客户端被浏览器解析</p>\n<p><code>getWriter()</code> 获取字符流</p>\n<p><code>getOutputStream()</code> 获取字节流，可以响应一切数据</p>\n</blockquote>\n<p>示例如下：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">// 字符输出流<br>PrintWriter writer = response.getWriter()<span class=\"hljs-comment\">;</span><br>writer.write(<span class=\"hljs-string\">\"&lt;h2&gt;Hello&lt;/h2&gt;\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ceylon\"><span class=\"hljs-comment\">// 字节输出流</span><br>ServletOutputStream <span class=\"hljs-keyword\">out</span> = response.getOutputStream();<br><span class=\"hljs-keyword\">out</span>.write(<span class=\"hljs-string\">\"&lt;h2&gt;Hello&lt;/h2&gt;\"</span>.getBytes());<br></code></pre></td></tr></table></figure>\n\n<p>设置响应类型，默认是字符串：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 设置响应MIME类型</span><br><span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.setHeader</span>(<span class=\"hljs-string\">\"content-type\"</span>,<span class=\"hljs-string\">\"text/html\"</span>); <span class=\"hljs-comment\">// html</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"处理中文乱码\"><a href=\"#处理中文乱码\" class=\"headerlink\" title=\"处理中文乱码\"></a>处理中文乱码</h2><p>解决服务器返回页面中文乱码问题</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">response.setContentType(<span class=\"hljs-string\">\"text/html;charset=UTF-8\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>解决post方式请求表单参数中文乱码问题，在接收所有数据前设定</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">request.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>Tomcat9.0已经解决了get方式请求中文乱码问题，可以不需要做此配置。</p>\n<h2 id=\"Servlet跳转\"><a href=\"#Servlet跳转\" class=\"headerlink\" title=\"Servlet跳转\"></a>Servlet跳转</h2><h3 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h3><blockquote>\n<p>一种服务器行为，只存在一次请求（因此request数据共享），地址栏不会发生改变</p>\n<p>同时只能跳转到该站点下的目录</p>\n</blockquote>\n<figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbscript\"><span class=\"hljs-built_in\">request</span>.getRequestDispatcher(url).forward(<span class=\"hljs-built_in\">request</span>,<span class=\"hljs-built_in\">response</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><blockquote>\n<p>服务端指导，客户端行为，存在两次请求，且地址栏会发生改变</p>\n<p>可以跳转到任意目录，比如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n<p>第一次请求会获得3开头的响应码，并且含有一个 location 头信息（代表重定向的地址）</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 重定向跳转到index.jsp</span><br><span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.sendRedirect</span>(<span class=\"hljs-string\">\"index.jsp\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ServletContext对象\"><a href=\"#ServletContext对象\" class=\"headerlink\" title=\"ServletContext对象\"></a>ServletContext对象</h2><blockquote>\n<p>在Web容器启动的时候，会为每一个 Web 应用程序创建一个对应的 <code>ServletContext</code> 对象，每个Web应用都有且只有一个<code>ServletContext</code>对象</p>\n<p>主要作用：1、作为域对象在整个Web应用共享数据；2、保存了当前应用程序的相关信息</p>\n</blockquote>\n<h3 id=\"获取与常用方法\"><a href=\"#获取与常用方法\" class=\"headerlink\" title=\"获取与常用方法\"></a>获取与常用方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 通过 request 对象获取</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 通过 session 对象获取</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">Session()</span>.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 通过 servletConfig 对象获取</span><br>ServletConfig servletConfig = get<span class=\"hljs-constructor\">ServletConfig()</span>;<br>ServletContext servletContext = servletConfig.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 直接通过Servlet类获取</span><br>ServletContext servletContext = get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 获取项目存放的真实路径</span><br>String realPath = request.get<span class=\"hljs-constructor\">ServletContext()</span>.get<span class=\"hljs-constructor\">RealPath(<span class=\"hljs-string\">\"/\"</span>)</span>;<br><span class=\"hljs-comment\">// 获取当前服务器的版本信息</span><br>String serverInfo = request.get<span class=\"hljs-constructor\">ServletContext()</span>.get<span class=\"hljs-constructor\">ServerInfo()</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ServletContext域对象使用\"><a href=\"#ServletContext域对象使用\" class=\"headerlink\" title=\"ServletContext域对象使用\"></a>ServletContext域对象使用</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 获取ServletContext对象</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><span class=\"hljs-comment\">// 设置域对象</span><br>servletContext.set<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>,<span class=\"hljs-string\">\"zhangsan\"</span>)</span>;<br><span class=\"hljs-comment\">// 获取域对象</span><br>String name = (String) servletContext.get<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>)</span>;<br><span class=\"hljs-comment\">// 移除域对象</span><br>servletContext.remove<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h1><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><blockquote>\n<p><code>javax.servlet.http.Cookie</code></p>\n</blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>Cookie只保存在当前浏览器中</li>\n<li>Cookie中不能出现中文，需要进行编解码操作</li>\n<li>如果服务器端发送重复的Cookie那么会覆盖原有的Cookie</li>\n<li>浏览器存放Cookie的数量是有上限的</li>\n</ul>\n<h3 id=\"Cookie的创建与发送\"><a href=\"#Cookie的创建与发送\" class=\"headerlink\" title=\"Cookie的创建与发送\"></a>Cookie的创建与发送</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 创建Cookie对象</span><br>Cookie cookie = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Cookie(<span class=\"hljs-string\">\"id\"</span>, 0)</span>;<br><span class=\"hljs-comment\">// 发送Cookie对象</span><br>response.add<span class=\"hljs-constructor\">Cookie(<span class=\"hljs-params\">cookie</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%88%9B%E5%BB%BAcookie.png\" alt=\"\"></p>\n<p>如上，即创建了我们自己的cookie</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/cookie1\"</span>)<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cookie1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        <span class=\"hljs-comment\">// 创建Cookie对象</span><br>        <span class=\"hljs-type\">Cookie</span> cookie = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Cookie</span>(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\">\"id\"</span>);<br>        <span class=\"hljs-comment\">// 发送Cookie对象</span><br>        response.addCookie(cookie);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的获取\"><a href=\"#Cookie的获取\" class=\"headerlink\" title=\"Cookie的获取\"></a>Cookie的获取</h3><blockquote>\n<p>Servlet提供了一个 <code>getCookies()</code>的方法用来获取客户端回传的所有 cookie 组成的一个<em>数组</em>，如果需要获取单个 cookie 则需要通过遍历，<code>getName()</code>获取 Cookie 的名称，<code>getValue()</code>获取 Cookie 的值</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 获取Cookie数组</span><br>Cookie<span class=\"hljs-literal\">[]</span> cookies = request.get<span class=\"hljs-constructor\">Cookies()</span>;<br><span class=\"hljs-comment\">// 判断数组是否为空</span><br><span class=\"hljs-keyword\">if</span> (cookies != null<span class=\"hljs-operator\"> &amp;&amp; </span>cookies.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>  \t<span class=\"hljs-comment\">// 遍历Cookie数组</span><br>  \tfor (Cookie cookie : cookies)&#123;<br>  \t\t<span class=\"hljs-comment\">// 判断并获取</span><br>    \t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(cookie.get<span class=\"hljs-constructor\">Name()</span>);<br>    \t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(cookie.get<span class=\"hljs-constructor\">Value()</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的路径\"><a href=\"#Cookie的路径\" class=\"headerlink\" title=\"Cookie的路径\"></a>Cookie的路径</h3><blockquote>\n<p>Cookie的<code>setPath()</code>方法设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie</p>\n<p>默认情况下只有当前项目能获取当前项目产生的cookie</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 设置路径为\"/\"，表示在当前服务器下任何项目都可访问到该Cookie对象</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/\"</span>);<br><br><span class=\"hljs-comment\">// 只有gg项目能访问该cookie</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/gg\"</span>);<br><br><span class=\"hljs-comment\">// 只有/gg/ss目录下的文件才能访问到cookie</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/gg/ss\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的到期时间\"><a href=\"#Cookie的到期时间\" class=\"headerlink\" title=\"Cookie的到期时间\"></a>Cookie的到期时间</h3><blockquote>\n<p>Cookie默认当前浏览器关闭即失效，也可以通过 <code>setMaxAge(int time)</code>方法设定 cookie 的最大有效时间，以秒为单位</p>\n<p>time为负数，表示不存储该Cookie，浏览器关闭即失效</p>\n<p>time为0，表示删除该cookie</p>\n<p>time为正数则为存储的秒数</p>\n</blockquote>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><blockquote>\n<p>session 本身就属于 HTTP 协议，用于保留某个用户访问的信息，只保存在当前浏览器当中。</p>\n<p>对于服务器而言，每一个连接到它的客户端都是一个 session，servlet 容器使用<code>javax.servlet.http.HttpSession</code>创建 HTTP 客户端和 HTTP 服务器之间的会话</p>\n<p>简而言之，Session 的作用就是为了标识一次会话，或者说确认一个用户，并且在一次会话（一个用户的多次请求）期间共享数据</p>\n</blockquote>\n<h3 id=\"Session的获取与基本使用\"><a href=\"#Session的获取与基本使用\" class=\"headerlink\" title=\"Session的获取与基本使用\"></a>Session的获取与基本使用</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/session1\"</span>)<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Session1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>    \t<span class=\"hljs-comment\">// 获取Session对象</span><br>        <span class=\"hljs-type\">HttpSession</span> session = request.getSession();<br><br>\t\t<span class=\"hljs-comment\">// 获取Session会话标识符</span><br>\t\t<span class=\"hljs-comment\">// D111F6C6F0A65C44184672B9BF04D728</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getId());<br><br>\t\t<span class=\"hljs-comment\">// 获取Session创建时间</span><br>\t\t<span class=\"hljs-comment\">// 1612756089930</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getCreationTime());<br><br>\t\t<span class=\"hljs-comment\">// 获取最后一次访问时间</span><br>\t\t<span class=\"hljs-comment\">// 1612756089935</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getLastAccessedTime());<br>\t\t<br>\t\t<span class=\"hljs-comment\">// 判断是否是新的Session对象</span><br>\t\t<span class=\"hljs-comment\">// false</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.isNew());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"JSESSIONID标识符\"><a href=\"#JSESSIONID标识符\" class=\"headerlink\" title=\"JSESSIONID标识符\"></a>JSESSIONID标识符</h3><blockquote>\n<p>使用一个叫JSESSIONID的特殊cookie来标识一次会话，Session 的底层依赖 Cookie 来实现</p>\n</blockquote>\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/session.png\" alt=\"\"></p>\n<h3 id=\"Session域对象\"><a href=\"#Session域对象\" class=\"headerlink\" title=\"Session域对象\"></a>Session域对象</h3><blockquote>\n<p>Session 用来表示一次会话，在一次会话中数据是可以共享的，这时 session 作为域对象存在</p>\n</blockquote>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">// 向域对象中添加数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setAttribute</span><span class=\"hljs-params\">(name, value)</span></span><br><br><span class=\"hljs-comment\">// 从域对象中获取数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">getAttribute</span><span class=\"hljs-params\">(name)</span></span><br><br><span class=\"hljs-comment\">// 从域对象中移除数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">removeAttribute</span><span class=\"hljs-params\">(name)</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Session对象的销毁\"><a href=\"#Session对象的销毁\" class=\"headerlink\" title=\"Session对象的销毁\"></a>Session对象的销毁</h3><h4 id=\"默认到期时间\"><a href=\"#默认到期时间\" class=\"headerlink\" title=\"默认到期时间\"></a>默认到期时间</h4><blockquote>\n<p>由服务器设置产生，如Tomcat 中 session 默认的存活时间为30min，一旦客户端有操作，session 会重新计时</p>\n</blockquote>\n<p>可以在 Tomcat 中的 conf 目录下的 web.xml 文件中进行修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">session-config</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">session-timeout</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">session-timeout</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"设置到期时间\"><a href=\"#设置到期时间\" class=\"headerlink\" title=\"设置到期时间\"></a>设置到期时间</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">// 设置<span class=\"hljs-keyword\">session</span>的最大不活动时间(单位为秒)<br><span class=\"hljs-keyword\">session</span>.setMaxInactiveInterval(<span class=\"hljs-number\">30</span>); // <span class=\"hljs-number\">30</span>秒<br><br>// 获取<span class=\"hljs-keyword\">session</span>的最大不活动时间<br><span class=\"hljs-type\">int</span> <span class=\"hljs-type\">time</span> = <span class=\"hljs-keyword\">session</span>.getMaxInactiveInterval();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"立即失效\"><a href=\"#立即失效\" class=\"headerlink\" title=\"立即失效\"></a>立即失效</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 销毁session对象</span><br><span class=\"hljs-selector-tag\">session</span><span class=\"hljs-selector-class\">.invalidate</span>();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Servlet三大域对象\"><a href=\"#Servlet三大域对象\" class=\"headerlink\" title=\"Servlet三大域对象\"></a>Servlet三大域对象</h3><blockquote>\n<p>Servlet的三大域对象：</p>\n<p>1、request域对象；在一次请求中有效</p>\n<p>2、session域对象；在一次会话中有效</p>\n<p>3、servletContext域对象；在整个应用程序中有效，服务器关闭后失效</p>\n</blockquote>\n<h1 id=\"文件的上传与下载\"><a href=\"#文件的上传与下载\" class=\"headerlink\" title=\"文件的上传与下载\"></a>文件的上传与下载</h1><h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"前台实现\"><a href=\"#前台实现\" class=\"headerlink\" title=\"前台实现\"></a>前台实现</h3><blockquote>\n<p>表单提交类型选择post；表单类型选择<code>enctype=&quot;multipart/form-data&quot;</code></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"uploadServlet\"</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">\"multipart/form-data\"</span>&gt;</span><br>    文件：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"myfile\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"后台实现\"><a href=\"#后台实现\" class=\"headerlink\" title=\"后台实现\"></a>后台实现</h3><blockquote>\n<p>1、使用注解<code>@MultipartConfig()</code>标识文件上传</p>\n<p>2、 Servlet 将 <code>multipart/form-data</code> 的 POST 请求封装成 Part，通过 Part 对上传的文件进行操作</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/uploadServlet\"</span>)<br><span class=\"hljs-meta\">@MultipartConfig</span>()<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        request.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>);<br>        <span class=\"hljs-type\">Part</span> part = request.getPart(<span class=\"hljs-string\">\"myfile\"</span>);<br><br>        <span class=\"hljs-type\">String</span> cd = part.getHeader(<span class=\"hljs-string\">\"Content-Disposition\"</span>);<br>        <span class=\"hljs-type\">String</span> fileName = cd.substring(cd.lastIndexOf(<span class=\"hljs-string\">\"=\"</span>)+<span class=\"hljs-number\">2</span>, cd.length()<span class=\"hljs-number\">-1</span>);<br><br>        <span class=\"hljs-type\">String</span> realPath = request.getServletContext().getRealPath(<span class=\"hljs-string\">\"/\"</span>);<br>        part.write(realPath + fileName);\t<span class=\"hljs-comment\">// 写入文件</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><h3 id=\"超链接下载\"><a href=\"#超链接下载\" class=\"headerlink\" title=\"超链接下载\"></a>超链接下载</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 当超链接遇到浏览器不识别的资源时，会自动下载 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"test.zip\"</span>&gt;</span>超链接下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 通过download属性可进行下载 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"test.zip\"</span> <span class=\"hljs-attr\">download</span>&gt;</span>超链接下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Servlet基础\"><a href=\"#Servlet基础\" class=\"headerlink\" title=\"Servlet基础\"></a>Servlet基础</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><blockquote>\n<p>Servlet是 Server 与 Applet 的缩写，是用Java语言编写的<em>运行在服务器端</em>，由服务器调用执行，按照 Servlet 标准来开发的类，用来完成B/S架构下，客户端请求的响应处理。</p>\n<p>Servlet 本质上也是 Java 类，但要遵循 Servlet 规范进行编写，它的创建、使用、销毁都由 Servlet 容器进行管理，所谓 Servlet 容器即为提供了 Servlet 功能的服务器，常见的有Tomcat、Jetty、JBoss等等（即服务器会自动调用Servlet程序）</p>\n<p>同时Servlet与HTTP紧密相连，可以处理HTTP协议相关的所有内容，因此在Java Web开发中应用广泛</p>\n</blockquote>\n<h2 id=\"Servlet实现\"><a href=\"#Servlet实现\" class=\"headerlink\" title=\"Servlet实现\"></a>Servlet实现</h2><h3 id=\"继承-HttpServlet-类\"><a href=\"#继承-HttpServlet-类\" class=\"headerlink\" title=\"继承 HttpServlet 类\"></a>继承 <code>HttpServlet</code> 类</h3><blockquote>\n<p>该类中已经完成了通信的规则，我们只需要进行业务的实现即可</p>\n</blockquote>\n<p>在整个Servlet程序之中最重要的就是Servlet接口，在此接口下定义了一个GenericServlet的子类，但是一般不会直接继承此类，而是根据所使用的协议选择GenericServlet的子类继承，例如：现在是采用HTTP协议处理的，所以一般而言当需要使用HTTP协议操作时用户自定义的Servlet类都要继承HttpServlet类。</p>\n<h3 id=\"重写service方法\"><a href=\"#重写service方法\" class=\"headerlink\" title=\"重写service方法\"></a>重写<code>service</code>方法</h3><p>该方法用来处理请求的操作，也可以重写<code>doGet</code>、<code>doPost</code>等方法，<code>service</code>方法的本质其实是调用了这两个方法。</p>\n<h3 id=\"设置注解\"><a href=\"#设置注解\" class=\"headerlink\" title=\"设置注解\"></a>设置注解</h3><blockquote>\n<p>可以通过注解指定访问路径（在Servlet 3.0之后版本支持，否则得配置<code>web.xml</code>文件）</p>\n</blockquote>\n<p>示例如下，表示该网页位于<code>root/gg/ss</code>下，（name只是作为一个标识，没有太大实际作用）</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-variable\">@WebServlet</span>(<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(value=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(urlPatterns=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br><span class=\"hljs-variable\">@WebServlet</span>(name=<span class=\"hljs-string\">\"Servlet01\"</span>,value=<span class=\"hljs-string\">\"/gg/ss\"</span>)<br></code></pre></td></tr></table></figure>\n\n<p>也可以配置多路径访问，如下表示两个路径都能够进行访问。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">@<span class=\"hljs-constructor\">WebServlet(<span class=\"hljs-params\">name</span>=<span class=\"hljs-string\">\"Servlet01\"</span>,<span class=\"hljs-params\">value</span>=&#123;<span class=\"hljs-string\">\"/ss\"</span>,'<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">gg</span>'&#125;)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"IDEA中更改Web项目根目录\"><a href=\"#IDEA中更改Web项目根目录\" class=\"headerlink\" title=\"IDEA中更改Web项目根目录\"></a>IDEA中更改Web项目根目录</h3><p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/IDEA%E8%AE%BE%E7%BD%AEURL%E5%9C%B0%E5%9D%80.png\" alt=\"\"></p>\n<h2 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h2><blockquote>\n<p>Servlet没有main()方法，不能独立运行，其运行完全由Servlet容器来控制和调度。</p>\n<p>其生命周期则是指Servlet容器何时创建servlet实例、何时调用其方法进行请求的处理、何时销毁其实例的整个过程。</p>\n<p>Servlet类加载——&gt;实例化——&gt;服务——&gt; 销毁</p>\n</blockquote>\n<ul>\n<li><p>实例化与初始化</p>\n<p>请求到达容器时，容器查找该servlet对象是否存在，若不存在，则创建实例并初始化。默认方法<code>init()</code></p>\n</li>\n<li><p>就绪/调用/服务阶段</p>\n<p>调用<code>service()</code>方法处理请求，在生命周期中可以被多次调用，<code>HttpServlet</code>中的该方法根据请求方式调用doGet和doPost方法</p>\n</li>\n<li><p>销毁时机</p>\n<p>当容器关闭时，将Servlet实例进行销毁，<code>destroy()</code>方法。</p>\n</li>\n</ul>\n<h1 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h1><h2 id=\"HttpServletRequest对象\"><a href=\"#HttpServletRequest对象\" class=\"headerlink\" title=\"HttpServletRequest对象\"></a>HttpServletRequest对象</h2><blockquote>\n<p>HttpServletRequest对象，主要作用是用来接收客户端发送过来的请求信息（如请求参数、表单等信息）</p>\n<p><code>service()</code>方法中形参接收的是 HttpServletRequest 接口的实例化对象，表示该对象主要应用在 HTTP 协议上，该对象是由 Tomcat 封装好传递过来，我们只需要调用相应方法取出信息进行处理即可</p>\n<p>HttpServletRequest 是 <code>ServletRequest</code> 唯一的子接口</p>\n</blockquote>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><p>获取基本信息的方法。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getRequestURL()</td>\n<td>获取客户端请求的完整URL（从http开始，到?前面结束）</td>\n</tr>\n<tr>\n<td>getRequestURI()</td>\n<td>获取客户端请求的部分URL（从站点名开始，到?前面结束）</td>\n</tr>\n<tr>\n<td>getQueryString()</td>\n<td>获取请求行中的参数部分（?后面的部分，没有返回null）</td>\n</tr>\n<tr>\n<td>getMethod()</td>\n<td>获取客户端请求方法（GET、POST）</td>\n</tr>\n<tr>\n<td>getProtocol()</td>\n<td>获取HTTP版本号</td>\n</tr>\n<tr>\n<td>getContextPath()</td>\n<td>获取webapp名字</td>\n</tr>\n</tbody></table>\n<h3 id=\"处理表单输入\"><a href=\"#处理表单输入\" class=\"headerlink\" title=\"处理表单输入\"></a>处理表单输入</h3><blockquote>\n<p>使用<code>getParameter()</code>方法获取指定名称的对应值</p>\n<p>使用<code>getParameterValues()</code>方法获取指定名称所有对应值，返回数组</p>\n</blockquote>\n<p>HTML表单如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">&lt;form action=\"test\" <span class=\"hljs-keyword\">method</span>=\"get\"&gt;<br>    请输入：<br>    &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"text\" <span class=\"hljs-type\">name</span>=\"info\" /&gt;<br>    &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=\"submit\" <span class=\"hljs-keyword\">value</span>=\"提交\" /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5.png\" alt=\"\"></p>\n<p>Servlet处理逻辑：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/test\"</span>)    <span class=\"hljs-comment\">// 子目录</span><br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">test</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    public void doGet(<span class=\"hljs-type\">HttpServletRequest</span> req, <span class=\"hljs-type\">HttpServletResponse</span> resp)<span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        resp.setContentType(<span class=\"hljs-string\">\"text/html;charset=UTF-8\"</span>); <span class=\"hljs-comment\">// 解决中文乱码</span><br>        <span class=\"hljs-type\">String</span> info = req.getParameter(<span class=\"hljs-string\">\"info\"</span>);\t<span class=\"hljs-comment\">// 获取名为info的值</span><br>        <span class=\"hljs-type\">PrintWriter</span> out=resp.getWriter();<br>        out.println(<span class=\"hljs-string\">\"&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;/title&gt;&lt;/head&gt;\"</span>);<br>        out.println(<span class=\"hljs-string\">\"&lt;body&gt;&lt;h1&gt;\"</span>+info+<span class=\"hljs-string\">\"&lt;/h1&gt;\"</span>);<br>        out.println(<span class=\"hljs-string\">\"&lt;/body&gt;&lt;/html\"</span>);<br>        out.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E7%BB%93%E6%9E%9C.png\" alt=\"\"></p>\n<h2 id=\"HttpServletResponse对象\"><a href=\"#HttpServletResponse对象\" class=\"headerlink\" title=\"HttpServletResponse对象\"></a>HttpServletResponse对象</h2><blockquote>\n<p>主要用于向客户端输出数据</p>\n<p>service()方法中形参接收的是 HttpServletResponse 接口的实例化对象，这个对象中封装了向客户端发送数据、发送响应头、发送响应状态码的方法</p>\n</blockquote>\n<h3 id=\"响应数据\"><a href=\"#响应数据\" class=\"headerlink\" title=\"响应数据\"></a>响应数据</h3><blockquote>\n<p>通过HttpServletResponse对象直接使用<em>输出流</em>进行响应，响应的数据回到客户端被浏览器解析</p>\n<p><code>getWriter()</code> 获取字符流</p>\n<p><code>getOutputStream()</code> 获取字节流，可以响应一切数据</p>\n</blockquote>\n<p>示例如下：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">// 字符输出流<br>PrintWriter writer = response.getWriter()<span class=\"hljs-comment\">;</span><br>writer.write(<span class=\"hljs-string\">\"&lt;h2&gt;Hello&lt;/h2&gt;\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight ceylon\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ceylon\"><span class=\"hljs-comment\">// 字节输出流</span><br>ServletOutputStream <span class=\"hljs-keyword\">out</span> = response.getOutputStream();<br><span class=\"hljs-keyword\">out</span>.write(<span class=\"hljs-string\">\"&lt;h2&gt;Hello&lt;/h2&gt;\"</span>.getBytes());<br></code></pre></td></tr></table></figure>\n\n<p>设置响应类型，默认是字符串：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 设置响应MIME类型</span><br><span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.setHeader</span>(<span class=\"hljs-string\">\"content-type\"</span>,<span class=\"hljs-string\">\"text/html\"</span>); <span class=\"hljs-comment\">// html</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"处理中文乱码\"><a href=\"#处理中文乱码\" class=\"headerlink\" title=\"处理中文乱码\"></a>处理中文乱码</h2><p>解决服务器返回页面中文乱码问题</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">response.setContentType(<span class=\"hljs-string\">\"text/html;charset=UTF-8\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>解决post方式请求表单参数中文乱码问题，在接收所有数据前设定</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">request.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<p>Tomcat9.0已经解决了get方式请求中文乱码问题，可以不需要做此配置。</p>\n<h2 id=\"Servlet跳转\"><a href=\"#Servlet跳转\" class=\"headerlink\" title=\"Servlet跳转\"></a>Servlet跳转</h2><h3 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h3><blockquote>\n<p>一种服务器行为，只存在一次请求（因此request数据共享），地址栏不会发生改变</p>\n<p>同时只能跳转到该站点下的目录</p>\n</blockquote>\n<figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbscript\"><span class=\"hljs-built_in\">request</span>.getRequestDispatcher(url).forward(<span class=\"hljs-built_in\">request</span>,<span class=\"hljs-built_in\">response</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h3><blockquote>\n<p>服务端指导，客户端行为，存在两次请求，且地址栏会发生改变</p>\n<p>可以跳转到任意目录，比如<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">www.baidu.com</a></p>\n<p>第一次请求会获得3开头的响应码，并且含有一个 location 头信息（代表重定向的地址）</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 重定向跳转到index.jsp</span><br><span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.sendRedirect</span>(<span class=\"hljs-string\">\"index.jsp\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ServletContext对象\"><a href=\"#ServletContext对象\" class=\"headerlink\" title=\"ServletContext对象\"></a>ServletContext对象</h2><blockquote>\n<p>在Web容器启动的时候，会为每一个 Web 应用程序创建一个对应的 <code>ServletContext</code> 对象，每个Web应用都有且只有一个<code>ServletContext</code>对象</p>\n<p>主要作用：1、作为域对象在整个Web应用共享数据；2、保存了当前应用程序的相关信息</p>\n</blockquote>\n<h3 id=\"获取与常用方法\"><a href=\"#获取与常用方法\" class=\"headerlink\" title=\"获取与常用方法\"></a>获取与常用方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 通过 request 对象获取</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 通过 session 对象获取</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">Session()</span>.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 通过 servletConfig 对象获取</span><br>ServletConfig servletConfig = get<span class=\"hljs-constructor\">ServletConfig()</span>;<br>ServletContext servletContext = servletConfig.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 直接通过Servlet类获取</span><br>ServletContext servletContext = get<span class=\"hljs-constructor\">ServletContext()</span>;<br><br><span class=\"hljs-comment\">// 获取项目存放的真实路径</span><br>String realPath = request.get<span class=\"hljs-constructor\">ServletContext()</span>.get<span class=\"hljs-constructor\">RealPath(<span class=\"hljs-string\">\"/\"</span>)</span>;<br><span class=\"hljs-comment\">// 获取当前服务器的版本信息</span><br>String serverInfo = request.get<span class=\"hljs-constructor\">ServletContext()</span>.get<span class=\"hljs-constructor\">ServerInfo()</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"ServletContext域对象使用\"><a href=\"#ServletContext域对象使用\" class=\"headerlink\" title=\"ServletContext域对象使用\"></a>ServletContext域对象使用</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 获取ServletContext对象</span><br>ServletContext servletContext = request.get<span class=\"hljs-constructor\">ServletContext()</span>;<br><span class=\"hljs-comment\">// 设置域对象</span><br>servletContext.set<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>,<span class=\"hljs-string\">\"zhangsan\"</span>)</span>;<br><span class=\"hljs-comment\">// 获取域对象</span><br>String name = (String) servletContext.get<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>)</span>;<br><span class=\"hljs-comment\">// 移除域对象</span><br>servletContext.remove<span class=\"hljs-constructor\">Attribute(<span class=\"hljs-string\">\"name\"</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"会话\"><a href=\"#会话\" class=\"headerlink\" title=\"会话\"></a>会话</h1><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><blockquote>\n<p><code>javax.servlet.http.Cookie</code></p>\n</blockquote>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>Cookie只保存在当前浏览器中</li>\n<li>Cookie中不能出现中文，需要进行编解码操作</li>\n<li>如果服务器端发送重复的Cookie那么会覆盖原有的Cookie</li>\n<li>浏览器存放Cookie的数量是有上限的</li>\n</ul>\n<h3 id=\"Cookie的创建与发送\"><a href=\"#Cookie的创建与发送\" class=\"headerlink\" title=\"Cookie的创建与发送\"></a>Cookie的创建与发送</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 创建Cookie对象</span><br>Cookie cookie = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Cookie(<span class=\"hljs-string\">\"id\"</span>, 0)</span>;<br><span class=\"hljs-comment\">// 发送Cookie对象</span><br>response.add<span class=\"hljs-constructor\">Cookie(<span class=\"hljs-params\">cookie</span>)</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/%E5%88%9B%E5%BB%BAcookie.png\" alt=\"\"></p>\n<p>如上，即创建了我们自己的cookie</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/cookie1\"</span>)<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cookie1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        <span class=\"hljs-comment\">// 创建Cookie对象</span><br>        <span class=\"hljs-type\">Cookie</span> cookie = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Cookie</span>(<span class=\"hljs-string\">\"id\"</span>, <span class=\"hljs-string\">\"id\"</span>);<br>        <span class=\"hljs-comment\">// 发送Cookie对象</span><br>        response.addCookie(cookie);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的获取\"><a href=\"#Cookie的获取\" class=\"headerlink\" title=\"Cookie的获取\"></a>Cookie的获取</h3><blockquote>\n<p>Servlet提供了一个 <code>getCookies()</code>的方法用来获取客户端回传的所有 cookie 组成的一个<em>数组</em>，如果需要获取单个 cookie 则需要通过遍历，<code>getName()</code>获取 Cookie 的名称，<code>getValue()</code>获取 Cookie 的值</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 获取Cookie数组</span><br>Cookie<span class=\"hljs-literal\">[]</span> cookies = request.get<span class=\"hljs-constructor\">Cookies()</span>;<br><span class=\"hljs-comment\">// 判断数组是否为空</span><br><span class=\"hljs-keyword\">if</span> (cookies != null<span class=\"hljs-operator\"> &amp;&amp; </span>cookies.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>  \t<span class=\"hljs-comment\">// 遍历Cookie数组</span><br>  \tfor (Cookie cookie : cookies)&#123;<br>  \t\t<span class=\"hljs-comment\">// 判断并获取</span><br>    \t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(cookie.get<span class=\"hljs-constructor\">Name()</span>);<br>    \t<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(cookie.get<span class=\"hljs-constructor\">Value()</span>);<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的路径\"><a href=\"#Cookie的路径\" class=\"headerlink\" title=\"Cookie的路径\"></a>Cookie的路径</h3><blockquote>\n<p>Cookie的<code>setPath()</code>方法设置cookie的路径，这个路径直接决定服务器的请求是否会从浏览器中加载某些cookie</p>\n<p>默认情况下只有当前项目能获取当前项目产生的cookie</p>\n</blockquote>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 设置路径为\"/\"，表示在当前服务器下任何项目都可访问到该Cookie对象</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/\"</span>);<br><br><span class=\"hljs-comment\">// 只有gg项目能访问该cookie</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/gg\"</span>);<br><br><span class=\"hljs-comment\">// 只有/gg/ss目录下的文件才能访问到cookie</span><br><span class=\"hljs-selector-tag\">cookie</span><span class=\"hljs-selector-class\">.setPath</span>(<span class=\"hljs-string\">\"/gg/ss\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Cookie的到期时间\"><a href=\"#Cookie的到期时间\" class=\"headerlink\" title=\"Cookie的到期时间\"></a>Cookie的到期时间</h3><blockquote>\n<p>Cookie默认当前浏览器关闭即失效，也可以通过 <code>setMaxAge(int time)</code>方法设定 cookie 的最大有效时间，以秒为单位</p>\n<p>time为负数，表示不存储该Cookie，浏览器关闭即失效</p>\n<p>time为0，表示删除该cookie</p>\n<p>time为正数则为存储的秒数</p>\n</blockquote>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><blockquote>\n<p>session 本身就属于 HTTP 协议，用于保留某个用户访问的信息，只保存在当前浏览器当中。</p>\n<p>对于服务器而言，每一个连接到它的客户端都是一个 session，servlet 容器使用<code>javax.servlet.http.HttpSession</code>创建 HTTP 客户端和 HTTP 服务器之间的会话</p>\n<p>简而言之，Session 的作用就是为了标识一次会话，或者说确认一个用户，并且在一次会话（一个用户的多次请求）期间共享数据</p>\n</blockquote>\n<h3 id=\"Session的获取与基本使用\"><a href=\"#Session的获取与基本使用\" class=\"headerlink\" title=\"Session的获取与基本使用\"></a>Session的获取与基本使用</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/session1\"</span>)<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Session1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>    \t<span class=\"hljs-comment\">// 获取Session对象</span><br>        <span class=\"hljs-type\">HttpSession</span> session = request.getSession();<br><br>\t\t<span class=\"hljs-comment\">// 获取Session会话标识符</span><br>\t\t<span class=\"hljs-comment\">// D111F6C6F0A65C44184672B9BF04D728</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getId());<br><br>\t\t<span class=\"hljs-comment\">// 获取Session创建时间</span><br>\t\t<span class=\"hljs-comment\">// 1612756089930</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getCreationTime());<br><br>\t\t<span class=\"hljs-comment\">// 获取最后一次访问时间</span><br>\t\t<span class=\"hljs-comment\">// 1612756089935</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.getLastAccessedTime());<br>\t\t<br>\t\t<span class=\"hljs-comment\">// 判断是否是新的Session对象</span><br>\t\t<span class=\"hljs-comment\">// false</span><br>        <span class=\"hljs-type\">System</span>.out.println(session.isNew());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"JSESSIONID标识符\"><a href=\"#JSESSIONID标识符\" class=\"headerlink\" title=\"JSESSIONID标识符\"></a>JSESSIONID标识符</h3><blockquote>\n<p>使用一个叫JSESSIONID的特殊cookie来标识一次会话，Session 的底层依赖 Cookie 来实现</p>\n</blockquote>\n<p><img src=\"http://cdn.ziyedy.top/Servlet%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/session.png\" alt=\"\"></p>\n<h3 id=\"Session域对象\"><a href=\"#Session域对象\" class=\"headerlink\" title=\"Session域对象\"></a>Session域对象</h3><blockquote>\n<p>Session 用来表示一次会话，在一次会话中数据是可以共享的，这时 session 作为域对象存在</p>\n</blockquote>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-comment\">// 向域对象中添加数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">setAttribute</span><span class=\"hljs-params\">(name, value)</span></span><br><br><span class=\"hljs-comment\">// 从域对象中获取数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">getAttribute</span><span class=\"hljs-params\">(name)</span></span><br><br><span class=\"hljs-comment\">// 从域对象中移除数据</span><br><span class=\"hljs-function\"><span class=\"hljs-title\">removeAttribute</span><span class=\"hljs-params\">(name)</span></span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Session对象的销毁\"><a href=\"#Session对象的销毁\" class=\"headerlink\" title=\"Session对象的销毁\"></a>Session对象的销毁</h3><h4 id=\"默认到期时间\"><a href=\"#默认到期时间\" class=\"headerlink\" title=\"默认到期时间\"></a>默认到期时间</h4><blockquote>\n<p>由服务器设置产生，如Tomcat 中 session 默认的存活时间为30min，一旦客户端有操作，session 会重新计时</p>\n</blockquote>\n<p>可以在 Tomcat 中的 conf 目录下的 web.xml 文件中进行修改</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">session-config</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">session-timeout</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">session-timeout</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"设置到期时间\"><a href=\"#设置到期时间\" class=\"headerlink\" title=\"设置到期时间\"></a>设置到期时间</h4><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">// 设置<span class=\"hljs-keyword\">session</span>的最大不活动时间(单位为秒)<br><span class=\"hljs-keyword\">session</span>.setMaxInactiveInterval(<span class=\"hljs-number\">30</span>); // <span class=\"hljs-number\">30</span>秒<br><br>// 获取<span class=\"hljs-keyword\">session</span>的最大不活动时间<br><span class=\"hljs-type\">int</span> <span class=\"hljs-type\">time</span> = <span class=\"hljs-keyword\">session</span>.getMaxInactiveInterval();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"立即失效\"><a href=\"#立即失效\" class=\"headerlink\" title=\"立即失效\"></a>立即失效</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-comment\">// 销毁session对象</span><br><span class=\"hljs-selector-tag\">session</span><span class=\"hljs-selector-class\">.invalidate</span>();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Servlet三大域对象\"><a href=\"#Servlet三大域对象\" class=\"headerlink\" title=\"Servlet三大域对象\"></a>Servlet三大域对象</h3><blockquote>\n<p>Servlet的三大域对象：</p>\n<p>1、request域对象；在一次请求中有效</p>\n<p>2、session域对象；在一次会话中有效</p>\n<p>3、servletContext域对象；在整个应用程序中有效，服务器关闭后失效</p>\n</blockquote>\n<h1 id=\"文件的上传与下载\"><a href=\"#文件的上传与下载\" class=\"headerlink\" title=\"文件的上传与下载\"></a>文件的上传与下载</h1><h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><h3 id=\"前台实现\"><a href=\"#前台实现\" class=\"headerlink\" title=\"前台实现\"></a>前台实现</h3><blockquote>\n<p>表单提交类型选择post；表单类型选择<code>enctype=&quot;multipart/form-data&quot;</code></p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">\"post\"</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"uploadServlet\"</span> <span class=\"hljs-attr\">enctype</span>=<span class=\"hljs-string\">\"multipart/form-data\"</span>&gt;</span><br>    文件：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"file\"</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"myfile\"</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>提交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"后台实现\"><a href=\"#后台实现\" class=\"headerlink\" title=\"后台实现\"></a>后台实现</h3><blockquote>\n<p>1、使用注解<code>@MultipartConfig()</code>标识文件上传</p>\n<p>2、 Servlet 将 <code>multipart/form-data</code> 的 POST 请求封装成 Part，通过 Part 对上传的文件进行操作</p>\n</blockquote>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\"><span class=\"hljs-meta\">@WebServlet</span>(<span class=\"hljs-string\">\"/uploadServlet\"</span>)<br><span class=\"hljs-meta\">@MultipartConfig</span>()<br>public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UploadServlet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">HttpServlet</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> void service(<span class=\"hljs-type\">HttpServletRequest</span> request, <span class=\"hljs-type\">HttpServletResponse</span> response) <span class=\"hljs-keyword\">throws</span> <span class=\"hljs-type\">ServletException</span>, <span class=\"hljs-type\">IOException</span> &#123;<br>        request.setCharacterEncoding(<span class=\"hljs-string\">\"UTF-8\"</span>);<br>        <span class=\"hljs-type\">Part</span> part = request.getPart(<span class=\"hljs-string\">\"myfile\"</span>);<br><br>        <span class=\"hljs-type\">String</span> cd = part.getHeader(<span class=\"hljs-string\">\"Content-Disposition\"</span>);<br>        <span class=\"hljs-type\">String</span> fileName = cd.substring(cd.lastIndexOf(<span class=\"hljs-string\">\"=\"</span>)+<span class=\"hljs-number\">2</span>, cd.length()<span class=\"hljs-number\">-1</span>);<br><br>        <span class=\"hljs-type\">String</span> realPath = request.getServletContext().getRealPath(<span class=\"hljs-string\">\"/\"</span>);<br>        part.write(realPath + fileName);\t<span class=\"hljs-comment\">// 写入文件</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h2><h3 id=\"超链接下载\"><a href=\"#超链接下载\" class=\"headerlink\" title=\"超链接下载\"></a>超链接下载</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- 当超链接遇到浏览器不识别的资源时，会自动下载 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"test.zip\"</span>&gt;</span>超链接下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!-- 通过download属性可进行下载 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"test.zip\"</span> <span class=\"hljs-attr\">download</span>&gt;</span>超链接下载<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>"},{"title":"Java字节码","date":"2021-02-02T15:07:03.000Z","fileName":"jvm-classbytecode","_content":"\n## Class文件\n\n### 概念\n\n> .class文件即字节码（bytecode）文件，是一个二进制文件\n>\n> 具有平台无关性，可以由其他语言编译生成，由JVM执行\n\n### 文件构成\n\n主要包括两种数据类型：\n\n1. 定长数据：无符号数，u1, u2, u4（分别代表1个字节、2个字节、4个字节的无符号数），所以u1相当于就是使用两个16进制位表示\n2. 不定长数据：由多个无符号数组成，通常在数据前面给出其长度\n\n### 文件内容\n\n每个`.class`文件对应一个`ClassFile`结构（摘自Java虚拟机规范）\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/classfile.png\" style=\"zoom:80%;\" />\n\n对应到中文按照顺序分别为\n\n* Magic（魔数）：唯一作用是确定该文件是否为一个能被JVM接受的class文件，其固定值为0xCAFEBABE\n* minor_version（副版本号）、major_version（主版本号）：可以理解为标识JDK的版本\n* constant_pool_count（常量池计数器）：其值等于常量池中成员+1\n* constant_pool[]（常量池）：一种表结构，按顺序存储相关结构，具体结构可进行查找\n\n> 常量池主要存放两类常量：\n>\n> 字面量（如文本字符串、 final 的常量值等）\n>\n> 符号引用（类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）\n\n* access_flag（访问标志）：用于表示某个类或接口的访问权限及属性（是类还是接口，是否被public等修饰）\n\n![访问标志表](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97%E8%A1%A8.png)\n\n* this_class（类索引）：表示这个class文件所定义的类或接口，由常量池中某项表示\n* super_class（父类索引）：为0表示没有父类（即Object类），否则与类索引相同，只是表示其父类\n* interfaces_count（接口计数器）：表示当前接口或类实现接口的数量\n* interfaces[]（接口表）：存储接口\n* fields_count（字段计数器）、fields[]（字段表）\n* methods_count（方法计数器）、methods[]（方法表）\n* attributes_count（属性计数器）、attributes[]（属性表）：字节码最后一部分，存放了基本信息，由编译器写入，JVM会忽略不认识的属性信息。\n\n\n\n# Class文件、反编译文件、源码的对照阅读\n\n## Java源代码\n\n定义在`HelloWorld.java`中的一个简单代码\n\n```\npackage com.jvm.classfile;\n\npublic class HelloWorld {\n    private static String msg = \"Hello World\";\n\n    public static void main(String[] args) {\n        System.out.println(\"msg = \" + msg);\n    }\n}\n```\n\n## Class字节码文件\n\n### 魔数、版本号\n\n如下所示，魔数固定为CAFEBABE，而主版本号16进制39转化为10进制就是57，代表Java13（版本对应可查看《Java虚拟机规范》）\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81%E9%AD%94%E6%95%B0%E3%80%81%E4%B8%BB%E7%89%88%E6%9C%AC%E5%8F%B7.png\" style=\"zoom:80%;\" />\n\n### 常量池\n\n常量池记录中具有以下通用格式：\n\n```\ncp_info {\n\tu1 tag;\t\t// 用于表示常量类型\n\tu1 info[];\t// 后续的内容由tag确定的类型确定\n}\n```\n\n如下，常量个数3A即为58，而根据下面反编译文件，符合57+1\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%B8%B8%E9%87%8F.png\" style=\"zoom:80%;\" />\n\n而后第一个常量tag为0A（即10），根据对应表可见为如下常量类型，而后两个参数分别为2和3，与反编译文件中常量池第一个常量一致。\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/methodref.png)\n\n### 访问标志及各类索引\n\n如下，首先根据最后一个常量为Lookup找到常量池结束的位置，类标识为0021（即0x0001和0x0020），对照反编译文件符合。\n\n而类索引与父类索引对应反编译文件第9、10行也一致\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E7%B1%BB%E6%A0%87%E8%AF%86.png)\n\n### 接口\n\n由于源码中未实现接口，因此如上节中父类标识后为0000，表示不存在接口\n\n### 字段\n\n字段的通用表示格式：\n\n```\nfield_info {\n\tu2 access_flags;\t\t// 字段访问权限标识符\n\tu2 name_index;\t\t\t// 对常量池的索引，即字段名\n\tu2 descriptor_index;\t// 对常量池的索引，字段类型\n\tu2 attributes_count;\t// 附加属性数量\n\tattribute_info[]\n}\n```\n\n如下，0001表示只有一个字段，000A表示源码中的`private static`，对应关系可查对应表\n\n0011表示字段名索引为17，由反编译文件第29行可知，对应的为`msg`，与源码定义一致\n\n0012表示字段类型索引为18，对应反编译文件第30行，为`String`类型\n\n0000表示无附加属性\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%AD%97%E6%AE%B5.png)\n\n### 方法\n\n方法的通用表示格式：\n\n```\nmethod_info {\n\tu2 access_flags;\t\t// 访问权限\n\tu2 name_index;\t\t\t// 名称索引\n\tu2 descriptor_index;\t// 方法描述符\n\tu2 attribute_count;\n\tattribute_info[];\n}\n```\n\n由上一节向后看：\n\n0003表示该类有三个方法，类初始化方法、实例初始化方法、源码中我们自己定义的方法\n\n其余的查看方法与字段相同，可以看到分别对应相关的方法，以及其参数与返回值。\n\n\n\n## 反编译文件\n\n### 反编译结果\n\n使用`javap -verbose`反编译后的文件，如下。\n\n可以看到其中内容与之间说明的文件内容是**一一对应**的，如`Constant pool`中就包括常量池的内容\n\n```\nClassfile /D:/java-demo/jvm/out/production/jvm/com/jvm/classfile/HelloWorld.class\n  Last modified 2021年2月3日; size 1128 bytes\n  SHA-256 checksum ce04ce48aa10126385c2a8b9bd8399ebf073b33cd6c7cb17f4b3ec73903aef7a\n  Compiled from \"HelloWorld.java\"\npublic class com.jvm.classfile.HelloWorld\n  minor version: 0\n  major version: 57\n  flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n  this_class: #14                         // com/jvm/classfile/HelloWorld\n  super_class: #2                         // java/lang/Object\n  interfaces: 0, fields: 1, methods: 3, attributes: 3\nConstant pool:\n   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n   #2 = Class              #4             // java/lang/Object\n   #3 = NameAndType        #5:#6          // \"<init>\":()V\n   #4 = Utf8               java/lang/Object\n   #5 = Utf8               <init>\n   #6 = Utf8               ()V\n   #7 = Fieldref           #8.#9          // java/lang/System.out:Ljava/io/PrintStream;\n   #8 = Class              #10            // java/lang/System\n   #9 = NameAndType        #11:#12        // out:Ljava/io/PrintStream;\n  #10 = Utf8               java/lang/System\n  #11 = Utf8               out\n  #12 = Utf8               Ljava/io/PrintStream;\n  #13 = Fieldref           #14.#15        // com/jvm/classfile/HelloWorld.msg:Ljava/lang/String;\n  #14 = Class              #16            // com/jvm/classfile/HelloWorld\n  #15 = NameAndType        #17:#18        // msg:Ljava/lang/String;\n  #16 = Utf8               com/jvm/classfile/HelloWorld\n  #17 = Utf8               msg\n  #18 = Utf8               Ljava/lang/String;\n  #19 = InvokeDynamic      #0:#20         // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n  #20 = NameAndType        #21:#22        // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n  #21 = Utf8               makeConcatWithConstants\n  #22 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n  #23 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V\n  #24 = Class              #26            // java/io/PrintStream\n  #25 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V\n  #26 = Utf8               java/io/PrintStream\n  #27 = Utf8               println\n  #28 = Utf8               (Ljava/lang/String;)V\n  #29 = String             #30            // Hello World\n  #30 = Utf8               Hello World\n  #31 = Utf8               Code\n  #32 = Utf8               LineNumberTable\n  #33 = Utf8               LocalVariableTable\n  #34 = Utf8               this\n  #35 = Utf8               Lcom/jvm/classfile/HelloWorld;\n  #36 = Utf8               main\n  #37 = Utf8               ([Ljava/lang/String;)V\n  #38 = Utf8               args\n  #39 = Utf8               [Ljava/lang/String;\n  #40 = Utf8               <clinit>\n  #41 = Utf8               SourceFile\n  #42 = Utf8               HelloWorld.java\n  #43 = Utf8               BootstrapMethods\n  #44 = MethodHandle       6:#45          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Lja\nva/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #45 = Methodref          #46.#47        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/Me\nthodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #46 = Class              #48            // java/lang/invoke/StringConcatFactory\n  #47 = NameAndType        #21:#49        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lan\ng/Object;)Ljava/lang/invoke/CallSite;\n  #48 = Utf8               java/lang/invoke/StringConcatFactory\n  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #50 = String             #51            // msg = \\u0001\n  #51 = Utf8               msg = \\u0001\n  #52 = Utf8               InnerClasses\n  #53 = Class              #54            // java/lang/invoke/MethodHandles$Lookup\n  #54 = Utf8               java/lang/invoke/MethodHandles$Lookup\n  #55 = Class              #56            // java/lang/invoke/MethodHandles\n  #56 = Utf8               java/lang/invoke/MethodHandles\n  #57 = Utf8               Lookup\n{\n  public com.jvm.classfile.HelloWorld();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/jvm/classfile/HelloWorld;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: getstatic     #13                 // Field msg:Ljava/lang/String;\n         6: invokedynamic #19,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n        11: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        14: return\n      LineNumberTable:\n        line 7: 0\n        line 8: 14\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      15     0  args   [Ljava/lang/String;\n\n  static {};\n    descriptor: ()V\n    flags: (0x0008) ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: ldc           #29                 // String Hello World\n         2: putstatic     #13                 // Field msg:Ljava/lang/String;\n         5: return\n      LineNumberTable:\n        line 4: 0\n}\nSourceFile: \"HelloWorld.java\"\nBootstrapMethods:\n  0: #44 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang\n/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n    Method arguments:\n      #50 msg = \\u0001\nInnerClasses:\n  public static final #57= #53 of #55;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n```\n\n### 反编译方法阅读\n\nstack：方法执行时操作栈深度\n\nlocals：局部变量所需的存储空间，单位是slot（虚拟机为局部变量分配内存的最小单位）\n","source":"_posts/编程相关/Java/JVM/1、Java字节码.md","raw":"---\ntitle: Java字节码\ndate: 2021-02-02 23:07:03\ntags:\n\t- JVM\ncategories:\n\t- 编程相关\n\t- Java\n\t- JVM\nfileName: jvm-classbytecode\n---\n\n## Class文件\n\n### 概念\n\n> .class文件即字节码（bytecode）文件，是一个二进制文件\n>\n> 具有平台无关性，可以由其他语言编译生成，由JVM执行\n\n### 文件构成\n\n主要包括两种数据类型：\n\n1. 定长数据：无符号数，u1, u2, u4（分别代表1个字节、2个字节、4个字节的无符号数），所以u1相当于就是使用两个16进制位表示\n2. 不定长数据：由多个无符号数组成，通常在数据前面给出其长度\n\n### 文件内容\n\n每个`.class`文件对应一个`ClassFile`结构（摘自Java虚拟机规范）\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/classfile.png\" style=\"zoom:80%;\" />\n\n对应到中文按照顺序分别为\n\n* Magic（魔数）：唯一作用是确定该文件是否为一个能被JVM接受的class文件，其固定值为0xCAFEBABE\n* minor_version（副版本号）、major_version（主版本号）：可以理解为标识JDK的版本\n* constant_pool_count（常量池计数器）：其值等于常量池中成员+1\n* constant_pool[]（常量池）：一种表结构，按顺序存储相关结构，具体结构可进行查找\n\n> 常量池主要存放两类常量：\n>\n> 字面量（如文本字符串、 final 的常量值等）\n>\n> 符号引用（类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）\n\n* access_flag（访问标志）：用于表示某个类或接口的访问权限及属性（是类还是接口，是否被public等修饰）\n\n![访问标志表](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97%E8%A1%A8.png)\n\n* this_class（类索引）：表示这个class文件所定义的类或接口，由常量池中某项表示\n* super_class（父类索引）：为0表示没有父类（即Object类），否则与类索引相同，只是表示其父类\n* interfaces_count（接口计数器）：表示当前接口或类实现接口的数量\n* interfaces[]（接口表）：存储接口\n* fields_count（字段计数器）、fields[]（字段表）\n* methods_count（方法计数器）、methods[]（方法表）\n* attributes_count（属性计数器）、attributes[]（属性表）：字节码最后一部分，存放了基本信息，由编译器写入，JVM会忽略不认识的属性信息。\n\n\n\n# Class文件、反编译文件、源码的对照阅读\n\n## Java源代码\n\n定义在`HelloWorld.java`中的一个简单代码\n\n```\npackage com.jvm.classfile;\n\npublic class HelloWorld {\n    private static String msg = \"Hello World\";\n\n    public static void main(String[] args) {\n        System.out.println(\"msg = \" + msg);\n    }\n}\n```\n\n## Class字节码文件\n\n### 魔数、版本号\n\n如下所示，魔数固定为CAFEBABE，而主版本号16进制39转化为10进制就是57，代表Java13（版本对应可查看《Java虚拟机规范》）\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81%E9%AD%94%E6%95%B0%E3%80%81%E4%B8%BB%E7%89%88%E6%9C%AC%E5%8F%B7.png\" style=\"zoom:80%;\" />\n\n### 常量池\n\n常量池记录中具有以下通用格式：\n\n```\ncp_info {\n\tu1 tag;\t\t// 用于表示常量类型\n\tu1 info[];\t// 后续的内容由tag确定的类型确定\n}\n```\n\n如下，常量个数3A即为58，而根据下面反编译文件，符合57+1\n\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%B8%B8%E9%87%8F.png\" style=\"zoom:80%;\" />\n\n而后第一个常量tag为0A（即10），根据对应表可见为如下常量类型，而后两个参数分别为2和3，与反编译文件中常量池第一个常量一致。\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/methodref.png)\n\n### 访问标志及各类索引\n\n如下，首先根据最后一个常量为Lookup找到常量池结束的位置，类标识为0021（即0x0001和0x0020），对照反编译文件符合。\n\n而类索引与父类索引对应反编译文件第9、10行也一致\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E7%B1%BB%E6%A0%87%E8%AF%86.png)\n\n### 接口\n\n由于源码中未实现接口，因此如上节中父类标识后为0000，表示不存在接口\n\n### 字段\n\n字段的通用表示格式：\n\n```\nfield_info {\n\tu2 access_flags;\t\t// 字段访问权限标识符\n\tu2 name_index;\t\t\t// 对常量池的索引，即字段名\n\tu2 descriptor_index;\t// 对常量池的索引，字段类型\n\tu2 attributes_count;\t// 附加属性数量\n\tattribute_info[]\n}\n```\n\n如下，0001表示只有一个字段，000A表示源码中的`private static`，对应关系可查对应表\n\n0011表示字段名索引为17，由反编译文件第29行可知，对应的为`msg`，与源码定义一致\n\n0012表示字段类型索引为18，对应反编译文件第30行，为`String`类型\n\n0000表示无附加属性\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%AD%97%E6%AE%B5.png)\n\n### 方法\n\n方法的通用表示格式：\n\n```\nmethod_info {\n\tu2 access_flags;\t\t// 访问权限\n\tu2 name_index;\t\t\t// 名称索引\n\tu2 descriptor_index;\t// 方法描述符\n\tu2 attribute_count;\n\tattribute_info[];\n}\n```\n\n由上一节向后看：\n\n0003表示该类有三个方法，类初始化方法、实例初始化方法、源码中我们自己定义的方法\n\n其余的查看方法与字段相同，可以看到分别对应相关的方法，以及其参数与返回值。\n\n\n\n## 反编译文件\n\n### 反编译结果\n\n使用`javap -verbose`反编译后的文件，如下。\n\n可以看到其中内容与之间说明的文件内容是**一一对应**的，如`Constant pool`中就包括常量池的内容\n\n```\nClassfile /D:/java-demo/jvm/out/production/jvm/com/jvm/classfile/HelloWorld.class\n  Last modified 2021年2月3日; size 1128 bytes\n  SHA-256 checksum ce04ce48aa10126385c2a8b9bd8399ebf073b33cd6c7cb17f4b3ec73903aef7a\n  Compiled from \"HelloWorld.java\"\npublic class com.jvm.classfile.HelloWorld\n  minor version: 0\n  major version: 57\n  flags: (0x0021) ACC_PUBLIC, ACC_SUPER\n  this_class: #14                         // com/jvm/classfile/HelloWorld\n  super_class: #2                         // java/lang/Object\n  interfaces: 0, fields: 1, methods: 3, attributes: 3\nConstant pool:\n   #1 = Methodref          #2.#3          // java/lang/Object.\"<init>\":()V\n   #2 = Class              #4             // java/lang/Object\n   #3 = NameAndType        #5:#6          // \"<init>\":()V\n   #4 = Utf8               java/lang/Object\n   #5 = Utf8               <init>\n   #6 = Utf8               ()V\n   #7 = Fieldref           #8.#9          // java/lang/System.out:Ljava/io/PrintStream;\n   #8 = Class              #10            // java/lang/System\n   #9 = NameAndType        #11:#12        // out:Ljava/io/PrintStream;\n  #10 = Utf8               java/lang/System\n  #11 = Utf8               out\n  #12 = Utf8               Ljava/io/PrintStream;\n  #13 = Fieldref           #14.#15        // com/jvm/classfile/HelloWorld.msg:Ljava/lang/String;\n  #14 = Class              #16            // com/jvm/classfile/HelloWorld\n  #15 = NameAndType        #17:#18        // msg:Ljava/lang/String;\n  #16 = Utf8               com/jvm/classfile/HelloWorld\n  #17 = Utf8               msg\n  #18 = Utf8               Ljava/lang/String;\n  #19 = InvokeDynamic      #0:#20         // #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n  #20 = NameAndType        #21:#22        // makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n  #21 = Utf8               makeConcatWithConstants\n  #22 = Utf8               (Ljava/lang/String;)Ljava/lang/String;\n  #23 = Methodref          #24.#25        // java/io/PrintStream.println:(Ljava/lang/String;)V\n  #24 = Class              #26            // java/io/PrintStream\n  #25 = NameAndType        #27:#28        // println:(Ljava/lang/String;)V\n  #26 = Utf8               java/io/PrintStream\n  #27 = Utf8               println\n  #28 = Utf8               (Ljava/lang/String;)V\n  #29 = String             #30            // Hello World\n  #30 = Utf8               Hello World\n  #31 = Utf8               Code\n  #32 = Utf8               LineNumberTable\n  #33 = Utf8               LocalVariableTable\n  #34 = Utf8               this\n  #35 = Utf8               Lcom/jvm/classfile/HelloWorld;\n  #36 = Utf8               main\n  #37 = Utf8               ([Ljava/lang/String;)V\n  #38 = Utf8               args\n  #39 = Utf8               [Ljava/lang/String;\n  #40 = Utf8               <clinit>\n  #41 = Utf8               SourceFile\n  #42 = Utf8               HelloWorld.java\n  #43 = Utf8               BootstrapMethods\n  #44 = MethodHandle       6:#45          // REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Lja\nva/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #45 = Methodref          #46.#47        // java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/Me\nthodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #46 = Class              #48            // java/lang/invoke/StringConcatFactory\n  #47 = NameAndType        #21:#49        // makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lan\ng/Object;)Ljava/lang/invoke/CallSite;\n  #48 = Utf8               java/lang/invoke/StringConcatFactory\n  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n  #50 = String             #51            // msg = \\u0001\n  #51 = Utf8               msg = \\u0001\n  #52 = Utf8               InnerClasses\n  #53 = Class              #54            // java/lang/invoke/MethodHandles$Lookup\n  #54 = Utf8               java/lang/invoke/MethodHandles$Lookup\n  #55 = Class              #56            // java/lang/invoke/MethodHandles\n  #56 = Utf8               java/lang/invoke/MethodHandles\n  #57 = Utf8               Lookup\n{\n  public com.jvm.classfile.HelloWorld();\n    descriptor: ()V\n    flags: (0x0001) ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/jvm/classfile/HelloWorld;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: (0x0009) ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=1, args_size=1\n         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;\n         3: getstatic     #13                 // Field msg:Ljava/lang/String;\n         6: invokedynamic #19,  0             // InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;\n        11: invokevirtual #23                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n        14: return\n      LineNumberTable:\n        line 7: 0\n        line 8: 14\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0      15     0  args   [Ljava/lang/String;\n\n  static {};\n    descriptor: ()V\n    flags: (0x0008) ACC_STATIC\n    Code:\n      stack=1, locals=0, args_size=0\n         0: ldc           #29                 // String Hello World\n         2: putstatic     #13                 // Field msg:Ljava/lang/String;\n         5: return\n      LineNumberTable:\n        line 4: 0\n}\nSourceFile: \"HelloWorld.java\"\nBootstrapMethods:\n  0: #44 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang\n/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;\n    Method arguments:\n      #50 msg = \\u0001\nInnerClasses:\n  public static final #57= #53 of #55;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles\n```\n\n### 反编译方法阅读\n\nstack：方法执行时操作栈深度\n\nlocals：局部变量所需的存储空间，单位是slot（虚拟机为局部变量分配内存的最小单位）\n","slug":"编程相关/Java/JVM/1、Java字节码","published":1,"updated":"2021-02-28T12:48:40.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq4001h8sjsf3bz96ra","content":"<h2 id=\"Class文件\"><a href=\"#Class文件\" class=\"headerlink\" title=\"Class文件\"></a>Class文件</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>.class文件即字节码（bytecode）文件，是一个二进制文件</p>\n<p>具有平台无关性，可以由其他语言编译生成，由JVM执行</p>\n</blockquote>\n<h3 id=\"文件构成\"><a href=\"#文件构成\" class=\"headerlink\" title=\"文件构成\"></a>文件构成</h3><p>主要包括两种数据类型：</p>\n<ol>\n<li>定长数据：无符号数，u1, u2, u4（分别代表1个字节、2个字节、4个字节的无符号数），所以u1相当于就是使用两个16进制位表示</li>\n<li>不定长数据：由多个无符号数组成，通常在数据前面给出其长度</li>\n</ol>\n<h3 id=\"文件内容\"><a href=\"#文件内容\" class=\"headerlink\" title=\"文件内容\"></a>文件内容</h3><p>每个<code>.class</code>文件对应一个<code>ClassFile</code>结构（摘自Java虚拟机规范）</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/classfile.png\" style=\"zoom:80%;\" />\n\n<p>对应到中文按照顺序分别为</p>\n<ul>\n<li>Magic（魔数）：唯一作用是确定该文件是否为一个能被JVM接受的class文件，其固定值为0xCAFEBABE</li>\n<li>minor_version（副版本号）、major_version（主版本号）：可以理解为标识JDK的版本</li>\n<li>constant_pool_count（常量池计数器）：其值等于常量池中成员+1</li>\n<li>constant_pool[]（常量池）：一种表结构，按顺序存储相关结构，具体结构可进行查找</li>\n</ul>\n<blockquote>\n<p>常量池主要存放两类常量：</p>\n<p>字面量（如文本字符串、 final 的常量值等）</p>\n<p>符号引用（类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）</p>\n</blockquote>\n<ul>\n<li>access_flag（访问标志）：用于表示某个类或接口的访问权限及属性（是类还是接口，是否被public等修饰）</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97%E8%A1%A8.png\" alt=\"访问标志表\"></p>\n<ul>\n<li>this_class（类索引）：表示这个class文件所定义的类或接口，由常量池中某项表示</li>\n<li>super_class（父类索引）：为0表示没有父类（即Object类），否则与类索引相同，只是表示其父类</li>\n<li>interfaces_count（接口计数器）：表示当前接口或类实现接口的数量</li>\n<li>interfaces[]（接口表）：存储接口</li>\n<li>fields_count（字段计数器）、fields[]（字段表）</li>\n<li>methods_count（方法计数器）、methods[]（方法表）</li>\n<li>attributes_count（属性计数器）、attributes[]（属性表）：字节码最后一部分，存放了基本信息，由编译器写入，JVM会忽略不认识的属性信息。</li>\n</ul>\n<h1 id=\"Class文件、反编译文件、源码的对照阅读\"><a href=\"#Class文件、反编译文件、源码的对照阅读\" class=\"headerlink\" title=\"Class文件、反编译文件、源码的对照阅读\"></a>Class文件、反编译文件、源码的对照阅读</h1><h2 id=\"Java源代码\"><a href=\"#Java源代码\" class=\"headerlink\" title=\"Java源代码\"></a>Java源代码</h2><p>定义在<code>HelloWorld.java</code>中的一个简单代码</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">package com.jvm.classfile;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> &#123;</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> msg = <span class=\"hljs-string\">\"Hello World\"</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"msg = \"</span> + msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Class字节码文件\"><a href=\"#Class字节码文件\" class=\"headerlink\" title=\"Class字节码文件\"></a>Class字节码文件</h2><h3 id=\"魔数、版本号\"><a href=\"#魔数、版本号\" class=\"headerlink\" title=\"魔数、版本号\"></a>魔数、版本号</h3><p>如下所示，魔数固定为CAFEBABE，而主版本号16进制39转化为10进制就是57，代表Java13（版本对应可查看《Java虚拟机规范》）</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81%E9%AD%94%E6%95%B0%E3%80%81%E4%B8%BB%E7%89%88%E6%9C%AC%E5%8F%B7.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>常量池记录中具有以下通用格式：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-class\">cp_info </span>&#123;<br>\tu1 tag;\t\t<span class=\"hljs-comment\">// 用于表示常量类型</span><br>\tu1 info[];\t<span class=\"hljs-comment\">// 后续的内容由tag确定的类型确定</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如下，常量个数3A即为58，而根据下面反编译文件，符合57+1</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%B8%B8%E9%87%8F.png\" style=\"zoom:80%;\" />\n\n<p>而后第一个常量tag为0A（即10），根据对应表可见为如下常量类型，而后两个参数分别为2和3，与反编译文件中常量池第一个常量一致。</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/methodref.png\" alt=\"\"></p>\n<h3 id=\"访问标志及各类索引\"><a href=\"#访问标志及各类索引\" class=\"headerlink\" title=\"访问标志及各类索引\"></a>访问标志及各类索引</h3><p>如下，首先根据最后一个常量为Lookup找到常量池结束的位置，类标识为0021（即0x0001和0x0020），对照反编译文件符合。</p>\n<p>而类索引与父类索引对应反编译文件第9、10行也一致</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E7%B1%BB%E6%A0%87%E8%AF%86.png\" alt=\"\"></p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>由于源码中未实现接口，因此如上节中父类标识后为0000，表示不存在接口</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>字段的通用表示格式：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-class\">field_info </span>&#123;<br>\tu2 access_flags;\t\t<span class=\"hljs-comment\">// 字段访问权限标识符</span><br>\tu2 name_index;\t\t\t<span class=\"hljs-comment\">// 对常量池的索引，即字段名</span><br>\tu2 descriptor_index;\t<span class=\"hljs-comment\">// 对常量池的索引，字段类型</span><br>\tu2 attributes_count;\t<span class=\"hljs-comment\">// 附加属性数量</span><br>\tattribute_info[]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如下，0001表示只有一个字段，000A表示源码中的<code>private static</code>，对应关系可查对应表</p>\n<p>0011表示字段名索引为17，由反编译文件第29行可知，对应的为<code>msg</code>，与源码定义一致</p>\n<p>0012表示字段类型索引为18，对应反编译文件第30行，为<code>String</code>类型</p>\n<p>0000表示无附加属性</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%AD%97%E6%AE%B5.png\" alt=\"\"></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>方法的通用表示格式：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">method_info &#123;<br>\tu2 access_flags<span class=\"hljs-comment\">;\t\t// 访问权限</span><br>\tu2 name_index<span class=\"hljs-comment\">;\t\t\t// 名称索引</span><br>\tu2 descriptor_index<span class=\"hljs-comment\">;\t// 方法描述符</span><br>\tu2 attribute_count<span class=\"hljs-comment\">;</span><br>\tattribute_info[]<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由上一节向后看：</p>\n<p>0003表示该类有三个方法，类初始化方法、实例初始化方法、源码中我们自己定义的方法</p>\n<p>其余的查看方法与字段相同，可以看到分别对应相关的方法，以及其参数与返回值。</p>\n<h2 id=\"反编译文件\"><a href=\"#反编译文件\" class=\"headerlink\" title=\"反编译文件\"></a>反编译文件</h2><h3 id=\"反编译结果\"><a href=\"#反编译结果\" class=\"headerlink\" title=\"反编译结果\"></a>反编译结果</h3><p>使用<code>javap -verbose</code>反编译后的文件，如下。</p>\n<p>可以看到其中内容与之间说明的文件内容是<strong>一一对应</strong>的，如<code>Constant pool</code>中就包括常量池的内容</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">Classfile /D:/java<span class=\"hljs-params\">-demo</span>/jvm/out/production/jvm/com/jvm/classfile/HelloWorld.class<br>  Last modified <span class=\"hljs-number\">2021</span>年<span class=\"hljs-number\">2</span>月<span class=\"hljs-number\">3</span>日; size <span class=\"hljs-number\">1128</span> <span class=\"hljs-built_in\">bytes</span><br>  SHA<span class=\"hljs-number\">-256</span> checksum ce04ce48aa10126385c2a8b9bd8399ebf073b33cd6c7cb17f4b3ec73903aef7a<br>  Compiled from <span class=\"hljs-string\">\"HelloWorld.java\"</span><br><span class=\"hljs-keyword\">public</span> class com.jvm.classfile.HelloWorld<br>  minor version: <span class=\"hljs-number\">0</span><br>  major version: <span class=\"hljs-number\">57</span><br>  flags: (<span class=\"hljs-number\">0x0021</span>) ACC_PUBLIC, ACC_SUPER<br>  this_class: #14                         <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld</span><br>  super_class: #2                         <span class=\"hljs-comment\">// java/lang/Object</span><br>  interfaces: <span class=\"hljs-number\">0</span>, fields: <span class=\"hljs-number\">1</span>, methods: <span class=\"hljs-number\">3</span>, attributes: <span class=\"hljs-number\">3</span><br>Constant pool:<br>   #1 = Methodref          #2.#3          <span class=\"hljs-comment\">// java/lang/Object.\"&lt;init&gt;\":()V</span><br>   #2 = Class              #4             <span class=\"hljs-comment\">// java/lang/Object</span><br>   #3 = NameAndType        #5:#6          <span class=\"hljs-comment\">// \"&lt;init&gt;\":()V</span><br>   #4 = Utf8               java/lang/Object<br>   #5 = Utf8               &lt;init&gt;<br>   #6 = Utf8               ()V<br>   #7 = Fieldref           #8.#9          <span class=\"hljs-comment\">// java/lang/System.out:Ljava/io/PrintStream;</span><br>   #8 = Class              #10            <span class=\"hljs-comment\">// java/lang/System</span><br>   #9 = NameAndType        #11:#12        <span class=\"hljs-comment\">// out:Ljava/io/PrintStream;</span><br>  #10 = Utf8               java/lang/System<br>  #11 = Utf8               out<br>  #12 = Utf8               Ljava/io/PrintStream;<br>  #13 = Fieldref           #14.#15        <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld.msg:Ljava/lang/String;</span><br>  #14 = Class              #16            <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld</span><br>  #15 = NameAndType        #17:#18        <span class=\"hljs-comment\">// msg:Ljava/lang/String;</span><br>  #16 = Utf8               com/jvm/classfile/HelloWorld<br>  #17 = Utf8               msg<br>  #18 = Utf8               Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #19 = InvokeDynamic      #0:#20         <span class=\"hljs-comment\">// #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>  #20 = NameAndType        #21:#22        <span class=\"hljs-comment\">// makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>  #21 = Utf8               makeConcatWithConstants<br>  #22 = Utf8               (Ljava/lang/<span class=\"hljs-built_in\">String</span>;)Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #23 = Methodref          #24.#25        <span class=\"hljs-comment\">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #24 = Class              #26            <span class=\"hljs-comment\">// java/io/PrintStream</span><br>  #25 = NameAndType        #27:#28        <span class=\"hljs-comment\">// println:(Ljava/lang/String;)V</span><br>  #26 = Utf8               java/io/PrintStream<br>  #27 = Utf8               println<br>  #28 = Utf8               (Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>  #29 = <span class=\"hljs-built_in\">String</span>             #30            <span class=\"hljs-comment\">// Hello World</span><br>  #30 = Utf8               Hello World<br>  #31 = Utf8               Code<br>  #32 = Utf8               LineNumberTable<br>  #33 = Utf8               LocalVariableTable<br>  #34 = Utf8               this<br>  #35 = Utf8               Lcom/jvm/classfile/HelloWorld;<br>  #36 = Utf8               main<br>  #37 = Utf8               (<span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>  #38 = Utf8               args<br>  #39 = Utf8               <span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #40 = Utf8               &lt;clinit&gt;<br>  #41 = Utf8               SourceFile<br>  #42 = Utf8               HelloWorld.java<br>  #43 = Utf8               BootstrapMethods<br>  #44 = MethodHandle       <span class=\"hljs-number\">6</span>:#45          <span class=\"hljs-comment\">// REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Lja</span><br>va/lang/invoke/MethodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #45 = Methodref          #46.#47        <span class=\"hljs-comment\">// java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/Me</span><br>thodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #46 = Class              #48            <span class=\"hljs-comment\">// java/lang/invoke/StringConcatFactory</span><br>  #47 = NameAndType        #21:#49        <span class=\"hljs-comment\">// makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lan</span><br>g/Object;)Ljava/lang/invoke/CallSite;<br>  #48 = Utf8               java/lang/invoke/StringConcatFactory<br>  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/<span class=\"hljs-built_in\">String</span>;Ljava/lang/invoke/MethodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #50 = <span class=\"hljs-built_in\">String</span>             #51            <span class=\"hljs-comment\">// msg = \\u0001</span><br>  #51 = Utf8               msg = \\u0001<br>  #52 = Utf8               InnerClasses<br>  #53 = Class              #54            <span class=\"hljs-comment\">// java/lang/invoke/MethodHandles$Lookup</span><br>  #54 = Utf8               java/lang/invoke/MethodHandles$Lookup<br>  #55 = Class              #56            <span class=\"hljs-comment\">// java/lang/invoke/MethodHandles</span><br>  #56 = Utf8               java/lang/invoke/MethodHandles<br>  #57 = Utf8               Lookup<br>&#123;<br>  <span class=\"hljs-keyword\">public</span> com.jvm.classfile.HelloWorld();<br>    descriptor: ()V<br>    flags: (<span class=\"hljs-number\">0x0001</span>) ACC_PUBLIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">1</span>, locals=<span class=\"hljs-number\">1</span>, args_size=<span class=\"hljs-number\">1</span><br>         <span class=\"hljs-number\">0</span>: aload_0<br>         <span class=\"hljs-number\">1</span>: invokespecial #1                  <span class=\"hljs-comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span><br>         <span class=\"hljs-number\">4</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">3</span>: <span class=\"hljs-number\">0</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class=\"hljs-number\">0</span>       <span class=\"hljs-number\">5</span>     <span class=\"hljs-number\">0</span>  this   Lcom/jvm/classfile/HelloWorld;<br><br>  <span class=\"hljs-keyword\">public</span> static <span class=\"hljs-literal\">void</span> main(java.lang.<span class=\"hljs-built_in\">String</span><span class=\"hljs-meta\">[</span><span class=\"hljs-meta\">]</span>);<br>    descriptor: (<span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>    flags: (<span class=\"hljs-number\">0x0009</span>) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">2</span>, locals=<span class=\"hljs-number\">1</span>, args_size=<span class=\"hljs-number\">1</span><br>         <span class=\"hljs-number\">0</span>: getstatic     #7                  <span class=\"hljs-comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class=\"hljs-number\">3</span>: getstatic     #13                 <span class=\"hljs-comment\">// Field msg:Ljava/lang/String;</span><br>         <span class=\"hljs-number\">6</span>: invokedynamic #19,  <span class=\"hljs-number\">0</span>             <span class=\"hljs-comment\">// InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>        <span class=\"hljs-number\">11</span>: invokevirtual #23                 <span class=\"hljs-comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class=\"hljs-number\">14</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">7</span>: <span class=\"hljs-number\">0</span><br>        line <span class=\"hljs-number\">8</span>: <span class=\"hljs-number\">14</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">15</span>     <span class=\"hljs-number\">0</span>  args   <span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br><br>  static &#123;&#125;;<br>    descriptor: ()V<br>    flags: (<span class=\"hljs-number\">0x0008</span>) ACC_STATIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">1</span>, locals=<span class=\"hljs-number\">0</span>, args_size=<span class=\"hljs-number\">0</span><br>         <span class=\"hljs-number\">0</span>: ldc           #29                 <span class=\"hljs-comment\">// String Hello World</span><br>         <span class=\"hljs-number\">2</span>: putstatic     #13                 <span class=\"hljs-comment\">// Field msg:Ljava/lang/String;</span><br>         <span class=\"hljs-number\">5</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">0</span><br>&#125;<br>SourceFile: <span class=\"hljs-string\">\"HelloWorld.java\"</span><br>BootstrapMethods:<br>  <span class=\"hljs-number\">0</span>: #44 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/<span class=\"hljs-built_in\">String</span>;Ljava/lang/invoke/MethodType;Ljava/lang<br>/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>    Method arguments:<br>      #50 msg = \\u0001<br>InnerClasses:<br>  <span class=\"hljs-keyword\">public</span> static final #57= #53 of #55;    <span class=\"hljs-comment\">// Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反编译方法阅读\"><a href=\"#反编译方法阅读\" class=\"headerlink\" title=\"反编译方法阅读\"></a>反编译方法阅读</h3><p>stack：方法执行时操作栈深度</p>\n<p>locals：局部变量所需的存储空间，单位是slot（虚拟机为局部变量分配内存的最小单位）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Class文件\"><a href=\"#Class文件\" class=\"headerlink\" title=\"Class文件\"></a>Class文件</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>.class文件即字节码（bytecode）文件，是一个二进制文件</p>\n<p>具有平台无关性，可以由其他语言编译生成，由JVM执行</p>\n</blockquote>\n<h3 id=\"文件构成\"><a href=\"#文件构成\" class=\"headerlink\" title=\"文件构成\"></a>文件构成</h3><p>主要包括两种数据类型：</p>\n<ol>\n<li>定长数据：无符号数，u1, u2, u4（分别代表1个字节、2个字节、4个字节的无符号数），所以u1相当于就是使用两个16进制位表示</li>\n<li>不定长数据：由多个无符号数组成，通常在数据前面给出其长度</li>\n</ol>\n<h3 id=\"文件内容\"><a href=\"#文件内容\" class=\"headerlink\" title=\"文件内容\"></a>文件内容</h3><p>每个<code>.class</code>文件对应一个<code>ClassFile</code>结构（摘自Java虚拟机规范）</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/classfile.png\" style=\"zoom:80%;\" />\n\n<p>对应到中文按照顺序分别为</p>\n<ul>\n<li>Magic（魔数）：唯一作用是确定该文件是否为一个能被JVM接受的class文件，其固定值为0xCAFEBABE</li>\n<li>minor_version（副版本号）、major_version（主版本号）：可以理解为标识JDK的版本</li>\n<li>constant_pool_count（常量池计数器）：其值等于常量池中成员+1</li>\n<li>constant_pool[]（常量池）：一种表结构，按顺序存储相关结构，具体结构可进行查找</li>\n</ul>\n<blockquote>\n<p>常量池主要存放两类常量：</p>\n<p>字面量（如文本字符串、 final 的常量值等）</p>\n<p>符号引用（类和接口的全限定名、字段的名称和描述符、方法的名称和描述符）</p>\n</blockquote>\n<ul>\n<li>access_flag（访问标志）：用于表示某个类或接口的访问权限及属性（是类还是接口，是否被public等修饰）</li>\n</ul>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97%E8%A1%A8.png\" alt=\"访问标志表\"></p>\n<ul>\n<li>this_class（类索引）：表示这个class文件所定义的类或接口，由常量池中某项表示</li>\n<li>super_class（父类索引）：为0表示没有父类（即Object类），否则与类索引相同，只是表示其父类</li>\n<li>interfaces_count（接口计数器）：表示当前接口或类实现接口的数量</li>\n<li>interfaces[]（接口表）：存储接口</li>\n<li>fields_count（字段计数器）、fields[]（字段表）</li>\n<li>methods_count（方法计数器）、methods[]（方法表）</li>\n<li>attributes_count（属性计数器）、attributes[]（属性表）：字节码最后一部分，存放了基本信息，由编译器写入，JVM会忽略不认识的属性信息。</li>\n</ul>\n<h1 id=\"Class文件、反编译文件、源码的对照阅读\"><a href=\"#Class文件、反编译文件、源码的对照阅读\" class=\"headerlink\" title=\"Class文件、反编译文件、源码的对照阅读\"></a>Class文件、反编译文件、源码的对照阅读</h1><h2 id=\"Java源代码\"><a href=\"#Java源代码\" class=\"headerlink\" title=\"Java源代码\"></a>Java源代码</h2><p>定义在<code>HelloWorld.java</code>中的一个简单代码</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">package com.jvm.classfile;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HelloWorld</span> &#123;</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">String</span> msg = <span class=\"hljs-string\">\"Hello World\"</span>;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>        System.out.<span class=\"hljs-built_in\">println</span>(<span class=\"hljs-string\">\"msg = \"</span> + msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Class字节码文件\"><a href=\"#Class字节码文件\" class=\"headerlink\" title=\"Class字节码文件\"></a>Class字节码文件</h2><h3 id=\"魔数、版本号\"><a href=\"#魔数、版本号\" class=\"headerlink\" title=\"魔数、版本号\"></a>魔数、版本号</h3><p>如下所示，魔数固定为CAFEBABE，而主版本号16进制39转化为10进制就是57，代表Java13（版本对应可查看《Java虚拟机规范》）</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81%E9%AD%94%E6%95%B0%E3%80%81%E4%B8%BB%E7%89%88%E6%9C%AC%E5%8F%B7.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>常量池记录中具有以下通用格式：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-class\">cp_info </span>&#123;<br>\tu1 tag;\t\t<span class=\"hljs-comment\">// 用于表示常量类型</span><br>\tu1 info[];\t<span class=\"hljs-comment\">// 后续的内容由tag确定的类型确定</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如下，常量个数3A即为58，而根据下面反编译文件，符合57+1</p>\n<img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%B8%B8%E9%87%8F.png\" style=\"zoom:80%;\" />\n\n<p>而后第一个常量tag为0A（即10），根据对应表可见为如下常量类型，而后两个参数分别为2和3，与反编译文件中常量池第一个常量一致。</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/methodref.png\" alt=\"\"></p>\n<h3 id=\"访问标志及各类索引\"><a href=\"#访问标志及各类索引\" class=\"headerlink\" title=\"访问标志及各类索引\"></a>访问标志及各类索引</h3><p>如下，首先根据最后一个常量为Lookup找到常量池结束的位置，类标识为0021（即0x0001和0x0020），对照反编译文件符合。</p>\n<p>而类索引与父类索引对应反编译文件第9、10行也一致</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E7%B1%BB%E6%A0%87%E8%AF%86.png\" alt=\"\"></p>\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>由于源码中未实现接口，因此如上节中父类标识后为0000，表示不存在接口</p>\n<h3 id=\"字段\"><a href=\"#字段\" class=\"headerlink\" title=\"字段\"></a>字段</h3><p>字段的通用表示格式：</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dts\"><span class=\"hljs-class\">field_info </span>&#123;<br>\tu2 access_flags;\t\t<span class=\"hljs-comment\">// 字段访问权限标识符</span><br>\tu2 name_index;\t\t\t<span class=\"hljs-comment\">// 对常量池的索引，即字段名</span><br>\tu2 descriptor_index;\t<span class=\"hljs-comment\">// 对常量池的索引，字段类型</span><br>\tu2 attributes_count;\t<span class=\"hljs-comment\">// 附加属性数量</span><br>\tattribute_info[]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如下，0001表示只有一个字段，000A表示源码中的<code>private static</code>，对应关系可查对应表</p>\n<p>0011表示字段名索引为17，由反编译文件第29行可知，对应的为<code>msg</code>，与源码定义一致</p>\n<p>0012表示字段类型索引为18，对应反编译文件第30行，为<code>String</code>类型</p>\n<p>0000表示无附加属性</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%E5%AD%97%E8%8A%82%E7%A0%81/%E5%AD%97%E6%AE%B5.png\" alt=\"\"></p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><p>方法的通用表示格式：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">method_info &#123;<br>\tu2 access_flags<span class=\"hljs-comment\">;\t\t// 访问权限</span><br>\tu2 name_index<span class=\"hljs-comment\">;\t\t\t// 名称索引</span><br>\tu2 descriptor_index<span class=\"hljs-comment\">;\t// 方法描述符</span><br>\tu2 attribute_count<span class=\"hljs-comment\">;</span><br>\tattribute_info[]<span class=\"hljs-comment\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>由上一节向后看：</p>\n<p>0003表示该类有三个方法，类初始化方法、实例初始化方法、源码中我们自己定义的方法</p>\n<p>其余的查看方法与字段相同，可以看到分别对应相关的方法，以及其参数与返回值。</p>\n<h2 id=\"反编译文件\"><a href=\"#反编译文件\" class=\"headerlink\" title=\"反编译文件\"></a>反编译文件</h2><h3 id=\"反编译结果\"><a href=\"#反编译结果\" class=\"headerlink\" title=\"反编译结果\"></a>反编译结果</h3><p>使用<code>javap -verbose</code>反编译后的文件，如下。</p>\n<p>可以看到其中内容与之间说明的文件内容是<strong>一一对应</strong>的，如<code>Constant pool</code>中就包括常量池的内容</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">Classfile /D:/java<span class=\"hljs-params\">-demo</span>/jvm/out/production/jvm/com/jvm/classfile/HelloWorld.class<br>  Last modified <span class=\"hljs-number\">2021</span>年<span class=\"hljs-number\">2</span>月<span class=\"hljs-number\">3</span>日; size <span class=\"hljs-number\">1128</span> <span class=\"hljs-built_in\">bytes</span><br>  SHA<span class=\"hljs-number\">-256</span> checksum ce04ce48aa10126385c2a8b9bd8399ebf073b33cd6c7cb17f4b3ec73903aef7a<br>  Compiled from <span class=\"hljs-string\">\"HelloWorld.java\"</span><br><span class=\"hljs-keyword\">public</span> class com.jvm.classfile.HelloWorld<br>  minor version: <span class=\"hljs-number\">0</span><br>  major version: <span class=\"hljs-number\">57</span><br>  flags: (<span class=\"hljs-number\">0x0021</span>) ACC_PUBLIC, ACC_SUPER<br>  this_class: #14                         <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld</span><br>  super_class: #2                         <span class=\"hljs-comment\">// java/lang/Object</span><br>  interfaces: <span class=\"hljs-number\">0</span>, fields: <span class=\"hljs-number\">1</span>, methods: <span class=\"hljs-number\">3</span>, attributes: <span class=\"hljs-number\">3</span><br>Constant pool:<br>   #1 = Methodref          #2.#3          <span class=\"hljs-comment\">// java/lang/Object.\"&lt;init&gt;\":()V</span><br>   #2 = Class              #4             <span class=\"hljs-comment\">// java/lang/Object</span><br>   #3 = NameAndType        #5:#6          <span class=\"hljs-comment\">// \"&lt;init&gt;\":()V</span><br>   #4 = Utf8               java/lang/Object<br>   #5 = Utf8               &lt;init&gt;<br>   #6 = Utf8               ()V<br>   #7 = Fieldref           #8.#9          <span class=\"hljs-comment\">// java/lang/System.out:Ljava/io/PrintStream;</span><br>   #8 = Class              #10            <span class=\"hljs-comment\">// java/lang/System</span><br>   #9 = NameAndType        #11:#12        <span class=\"hljs-comment\">// out:Ljava/io/PrintStream;</span><br>  #10 = Utf8               java/lang/System<br>  #11 = Utf8               out<br>  #12 = Utf8               Ljava/io/PrintStream;<br>  #13 = Fieldref           #14.#15        <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld.msg:Ljava/lang/String;</span><br>  #14 = Class              #16            <span class=\"hljs-comment\">// com/jvm/classfile/HelloWorld</span><br>  #15 = NameAndType        #17:#18        <span class=\"hljs-comment\">// msg:Ljava/lang/String;</span><br>  #16 = Utf8               com/jvm/classfile/HelloWorld<br>  #17 = Utf8               msg<br>  #18 = Utf8               Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #19 = InvokeDynamic      #0:#20         <span class=\"hljs-comment\">// #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>  #20 = NameAndType        #21:#22        <span class=\"hljs-comment\">// makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>  #21 = Utf8               makeConcatWithConstants<br>  #22 = Utf8               (Ljava/lang/<span class=\"hljs-built_in\">String</span>;)Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #23 = Methodref          #24.#25        <span class=\"hljs-comment\">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>  #24 = Class              #26            <span class=\"hljs-comment\">// java/io/PrintStream</span><br>  #25 = NameAndType        #27:#28        <span class=\"hljs-comment\">// println:(Ljava/lang/String;)V</span><br>  #26 = Utf8               java/io/PrintStream<br>  #27 = Utf8               println<br>  #28 = Utf8               (Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>  #29 = <span class=\"hljs-built_in\">String</span>             #30            <span class=\"hljs-comment\">// Hello World</span><br>  #30 = Utf8               Hello World<br>  #31 = Utf8               Code<br>  #32 = Utf8               LineNumberTable<br>  #33 = Utf8               LocalVariableTable<br>  #34 = Utf8               this<br>  #35 = Utf8               Lcom/jvm/classfile/HelloWorld;<br>  #36 = Utf8               main<br>  #37 = Utf8               (<span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>  #38 = Utf8               args<br>  #39 = Utf8               <span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br>  #40 = Utf8               &lt;clinit&gt;<br>  #41 = Utf8               SourceFile<br>  #42 = Utf8               HelloWorld.java<br>  #43 = Utf8               BootstrapMethods<br>  #44 = MethodHandle       <span class=\"hljs-number\">6</span>:#45          <span class=\"hljs-comment\">// REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Lja</span><br>va/lang/invoke/MethodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #45 = Methodref          #46.#47        <span class=\"hljs-comment\">// java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/Me</span><br>thodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #46 = Class              #48            <span class=\"hljs-comment\">// java/lang/invoke/StringConcatFactory</span><br>  #47 = NameAndType        #21:#49        <span class=\"hljs-comment\">// makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lan</span><br>g/Object;)Ljava/lang/invoke/CallSite;<br>  #48 = Utf8               java/lang/invoke/StringConcatFactory<br>  #49 = Utf8               (Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/<span class=\"hljs-built_in\">String</span>;Ljava/lang/invoke/MethodType;Ljava/lang/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>  #50 = <span class=\"hljs-built_in\">String</span>             #51            <span class=\"hljs-comment\">// msg = \\u0001</span><br>  #51 = Utf8               msg = \\u0001<br>  #52 = Utf8               InnerClasses<br>  #53 = Class              #54            <span class=\"hljs-comment\">// java/lang/invoke/MethodHandles$Lookup</span><br>  #54 = Utf8               java/lang/invoke/MethodHandles$Lookup<br>  #55 = Class              #56            <span class=\"hljs-comment\">// java/lang/invoke/MethodHandles</span><br>  #56 = Utf8               java/lang/invoke/MethodHandles<br>  #57 = Utf8               Lookup<br>&#123;<br>  <span class=\"hljs-keyword\">public</span> com.jvm.classfile.HelloWorld();<br>    descriptor: ()V<br>    flags: (<span class=\"hljs-number\">0x0001</span>) ACC_PUBLIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">1</span>, locals=<span class=\"hljs-number\">1</span>, args_size=<span class=\"hljs-number\">1</span><br>         <span class=\"hljs-number\">0</span>: aload_0<br>         <span class=\"hljs-number\">1</span>: invokespecial #1                  <span class=\"hljs-comment\">// Method java/lang/Object.\"&lt;init&gt;\":()V</span><br>         <span class=\"hljs-number\">4</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">3</span>: <span class=\"hljs-number\">0</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class=\"hljs-number\">0</span>       <span class=\"hljs-number\">5</span>     <span class=\"hljs-number\">0</span>  this   Lcom/jvm/classfile/HelloWorld;<br><br>  <span class=\"hljs-keyword\">public</span> static <span class=\"hljs-literal\">void</span> main(java.lang.<span class=\"hljs-built_in\">String</span><span class=\"hljs-meta\">[</span><span class=\"hljs-meta\">]</span>);<br>    descriptor: (<span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;)V<br>    flags: (<span class=\"hljs-number\">0x0009</span>) ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">2</span>, locals=<span class=\"hljs-number\">1</span>, args_size=<span class=\"hljs-number\">1</span><br>         <span class=\"hljs-number\">0</span>: getstatic     #7                  <span class=\"hljs-comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class=\"hljs-number\">3</span>: getstatic     #13                 <span class=\"hljs-comment\">// Field msg:Ljava/lang/String;</span><br>         <span class=\"hljs-number\">6</span>: invokedynamic #19,  <span class=\"hljs-number\">0</span>             <span class=\"hljs-comment\">// InvokeDynamic #0:makeConcatWithConstants:(Ljava/lang/String;)Ljava/lang/String;</span><br>        <span class=\"hljs-number\">11</span>: invokevirtual #23                 <span class=\"hljs-comment\">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>        <span class=\"hljs-number\">14</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">7</span>: <span class=\"hljs-number\">0</span><br>        line <span class=\"hljs-number\">8</span>: <span class=\"hljs-number\">14</span><br>      LocalVariableTable:<br>        Start  Length  Slot  Name   Signature<br>            <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">15</span>     <span class=\"hljs-number\">0</span>  args   <span class=\"hljs-meta\">[</span>Ljava/lang/<span class=\"hljs-built_in\">String</span>;<br><br>  static &#123;&#125;;<br>    descriptor: ()V<br>    flags: (<span class=\"hljs-number\">0x0008</span>) ACC_STATIC<br>    Code:<br>      <span class=\"hljs-built_in\">stack</span>=<span class=\"hljs-number\">1</span>, locals=<span class=\"hljs-number\">0</span>, args_size=<span class=\"hljs-number\">0</span><br>         <span class=\"hljs-number\">0</span>: ldc           #29                 <span class=\"hljs-comment\">// String Hello World</span><br>         <span class=\"hljs-number\">2</span>: putstatic     #13                 <span class=\"hljs-comment\">// Field msg:Ljava/lang/String;</span><br>         <span class=\"hljs-number\">5</span>: <span class=\"hljs-keyword\">return</span><br>      LineNumberTable:<br>        line <span class=\"hljs-number\">4</span>: <span class=\"hljs-number\">0</span><br>&#125;<br>SourceFile: <span class=\"hljs-string\">\"HelloWorld.java\"</span><br>BootstrapMethods:<br>  <span class=\"hljs-number\">0</span>: #44 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/<span class=\"hljs-built_in\">String</span>;Ljava/lang/invoke/MethodType;Ljava/lang<br>/<span class=\"hljs-built_in\">String</span>;<span class=\"hljs-meta\">[</span>Ljava/lang/Object;)Ljava/lang/invoke/CallSite;<br>    Method arguments:<br>      #50 msg = \\u0001<br>InnerClasses:<br>  <span class=\"hljs-keyword\">public</span> static final #57= #53 of #55;    <span class=\"hljs-comment\">// Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反编译方法阅读\"><a href=\"#反编译方法阅读\" class=\"headerlink\" title=\"反编译方法阅读\"></a>反编译方法阅读</h3><p>stack：方法执行时操作栈深度</p>\n<p>locals：局部变量所需的存储空间，单位是slot（虚拟机为局部变量分配内存的最小单位）</p>\n"},{"title":"Tomcat基础总结","date":"2021-02-07T03:27:04.000Z","fileName":"tomcat-basic-summary","_content":"\n## Tomcat\n\n### 目录结构\n\n```\n|——bin/  存放启动和关闭Tomcat的脚本文件\n|\n|——conf/  存放Tomcat服务器的各种配置文件\n|  |——server.xml\t服务器的主配置文件\n|  |——web.xml\t定义所有web应用的配置\n|  |——tomcat-user.xml\t定义了tomcat用户的信息\n|\n|——lib/  存放所需要的jar文件\n|\n|——logs/  存放Tomcat的日志文件\n|\n|——temp/\t存放Tomcat运行时产生的临时文件\n|\n|——webapps/\t\tweb应用程序的目录及文件（其下每一个子目录都是一个独立的web应用程序）\n|  |——.../WEB-INF\t存放Web应用程序的部署描述性文件web.xml（用户不可见）\n|     |——classes\t存放Servlet和其他有用的类文件\n|     |——lib\t存放Web应用程序需要用到的jar文件\n|     |——web.xml\t存放配置与部署信息\n|  |——.../index.jsp\t\t首页\n|\n|——work/\tJSP生成的Servlet源文件与字节码文件\n|\n\n```\n\n\n\n","source":"_posts/编程相关/Java/Java Web/Tomcat基础总结.md","raw":"---\ntitle: Tomcat基础总结\ndate: 2021-02-07 11:27:04\ntags:\n\t- Java\n\t- 服务器\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java Web\nfileName: tomcat-basic-summary\n---\n\n## Tomcat\n\n### 目录结构\n\n```\n|——bin/  存放启动和关闭Tomcat的脚本文件\n|\n|——conf/  存放Tomcat服务器的各种配置文件\n|  |——server.xml\t服务器的主配置文件\n|  |——web.xml\t定义所有web应用的配置\n|  |——tomcat-user.xml\t定义了tomcat用户的信息\n|\n|——lib/  存放所需要的jar文件\n|\n|——logs/  存放Tomcat的日志文件\n|\n|——temp/\t存放Tomcat运行时产生的临时文件\n|\n|——webapps/\t\tweb应用程序的目录及文件（其下每一个子目录都是一个独立的web应用程序）\n|  |——.../WEB-INF\t存放Web应用程序的部署描述性文件web.xml（用户不可见）\n|     |——classes\t存放Servlet和其他有用的类文件\n|     |——lib\t存放Web应用程序需要用到的jar文件\n|     |——web.xml\t存放配置与部署信息\n|  |——.../index.jsp\t\t首页\n|\n|——work/\tJSP生成的Servlet源文件与字节码文件\n|\n\n```\n\n\n\n","slug":"编程相关/Java/Java Web/Tomcat基础总结","published":1,"updated":"2021-02-28T12:53:27.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq5001k8sjs79ricvdq","content":"<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\">——bin/  存放启动和关闭Tomcat的脚本文件<br></span>|<br>|<span class=\"hljs-string\">——conf/  存放Tomcat服务器的各种配置文件<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——server.xml\t服务器的主配置文件<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——web.xml\t定义所有web应用的配置<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——tomcat-user.xml\t定义了tomcat用户的信息<br></span>|<br>|<span class=\"hljs-string\">——lib/  存放所需要的jar文件<br></span>|<br>|<span class=\"hljs-string\">——logs/  存放Tomcat的日志文件<br></span>|<br>|<span class=\"hljs-string\">——temp/\t存放Tomcat运行时产生的临时文件<br></span>|<br>|<span class=\"hljs-string\">——webapps/\t\tweb应用程序的目录及文件（其下每一个子目录都是一个独立的web应用程序）<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——.../WEB-INF\t存放Web应用程序的部署描述性文件web.xml（用户不可见）<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——classes\t存放Servlet和其他有用的类文件<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——lib\t存放Web应用程序需要用到的jar文件<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——web.xml\t存放配置与部署信息<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——.../index.jsp\t\t首页<br></span>|<br>|<span class=\"hljs-string\">——work/\tJSP生成的Servlet源文件与字节码文件<br></span>|<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gherkin\">|<span class=\"hljs-string\">——bin/  存放启动和关闭Tomcat的脚本文件<br></span>|<br>|<span class=\"hljs-string\">——conf/  存放Tomcat服务器的各种配置文件<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——server.xml\t服务器的主配置文件<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——web.xml\t定义所有web应用的配置<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——tomcat-user.xml\t定义了tomcat用户的信息<br></span>|<br>|<span class=\"hljs-string\">——lib/  存放所需要的jar文件<br></span>|<br>|<span class=\"hljs-string\">——logs/  存放Tomcat的日志文件<br></span>|<br>|<span class=\"hljs-string\">——temp/\t存放Tomcat运行时产生的临时文件<br></span>|<br>|<span class=\"hljs-string\">——webapps/\t\tweb应用程序的目录及文件（其下每一个子目录都是一个独立的web应用程序）<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——.../WEB-INF\t存放Web应用程序的部署描述性文件web.xml（用户不可见）<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——classes\t存放Servlet和其他有用的类文件<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——lib\t存放Web应用程序需要用到的jar文件<br></span>|<span class=\"hljs-string\">     </span>|<span class=\"hljs-string\">——web.xml\t存放配置与部署信息<br></span>|<span class=\"hljs-string\">  </span>|<span class=\"hljs-string\">——.../index.jsp\t\t首页<br></span>|<br>|<span class=\"hljs-string\">——work/\tJSP生成的Servlet源文件与字节码文件<br></span>|<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"Java类加载机制","date":"2021-02-04T05:38:33.000Z","fileName":"jvm-classloader","_content":"","source":"_posts/编程相关/Java/JVM/2、Java类加载机制.md","raw":"---\ntitle: Java类加载机制\ndate: 2021-02-04 13:38:33\ntags:\n\t- JVM\ncategories:\n\t- 编程相关\n\t- Java\n\t- JVM\nfileName: jvm-classloader\n---\n","slug":"编程相关/Java/JVM/2、Java类加载机制","published":1,"updated":"2021-02-28T12:50:01.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq6001m8sjse93c4rot","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java：注解","date":"2021-01-30T15:38:43.000Z","fileName":"Java-annotation","_content":"\n## 注解基础\n\n### 概念\n\n> 注解（Annotation），JDK1.5引入\n>\n> 位于源码中（可以理解Java源码由*代码/注释/注解* 构成）\n>\n> 注解用于修饰程序的元素，而不会对被修饰的对象有直接影响，只有通过**某种配套的工具**才会对注解信息进行访问和处理（比如一些框架中就利用反射技术对注解中内容进行处理）\n\n### 作用\n\n* 提供信息给编译器/IDE（如`@SuppressWarnings`即让IDE压制相应警告信息）\n\n* 可用于其他工具来产生额外的代码/配置文件（比如Java web中即可使用注解生成配置文件）\n* 有一些注解可在程序运行时访问，增加程序的动态性\n\n### 普通注解\n\n即Java预定义的普通注解，主要有以下一些\n\n* `@Override`：修饰方法，强制该方法代码必须符合父类中该方法的定义，避免代码错误\n* `@Deprecated`：修饰类/类元素/包，表明该部分废除，建议不再使用（IDE会显示为被横线划掉）\n* ` @SuppressWarnings`：压制不同类型的警告信息，使得编译器不再显示警告（警告类型由IDE自定）。同时该方法可以传入参数，用于标识忽略哪些信息，示例如下\n\n```\n@SuppressWarnings(\"all\")\t// 忽略所有警告\n```\n\n### 元注解\n\n> 元注解即修饰注解的注解，在自定义注解时比较常用\n\n#### @Retention\n\n> 该注解用于修饰其他注解的存在范围\n>\n> `RetentionPolicy.SOURCE`：注解仅存在于源码，不在class文件\n>\n> `RetentionPolicy.CLASS`：*默认参数*，注解存在于.class文件，但不能被JVM加载\n>\n> `RetentionPolicy.RUNTIME`：表示注解可以被JVM运行时访问到，通常情况下可以结合反射进行一些工作\n\n```\n@Retention(RetentionPolicy.RUNTIME)\t// 修饰的注解存在于JVM中\n```\n\n#### @Target\n\n> 用于限定目标注解能够作用在什么地方\n>\n> 比如有些注解只能修饰方法，就是使用这个实现的\n\n```\n@Target({ElementType.METHOD, ElementType.FIELD})\t// 限定修饰方法与成员变量\n```\n\n#### @Inherited\n\n> 使得修饰的注解修饰的类与它的子类都能够包含某个注解\n>\n> 普通的注解没有继承功能\n\n#### @Repeatable\n\n> 修饰的注解可以重复应用标注，常用于测试\n>\n> 需要定义注解和注解容器（即原注解的数组）\n\n#### @Documented\n\n> 指明该注解可以被Javadoc工具解析，形成帮助文档\n\n\n\n## 自定义注解\n\n> 注解的定义即拓展`java.lang.annotation.Annotation`注解接口\n>\n> 其中绝大部分类型都可以作为其参数，但属性定义成方法 的样子\n\n定义形式如下\n\n```\npublic @interface MyAnnotation {\n    int a() default 0;\n    int b() default 0;\n}\n```\n\n\n\n## 注解的解析\n\n暂略\n\n\n\n\n\n## 注解的应用\n\n暂略\n\n\n\n\n\n\n\n\n\n> 参考：\n>\n> mooc华东师范大学Java核心技术\n\n","source":"_posts/编程相关/Java/Java基础/11、Java：注解.md","raw":"---\ntitle: Java：注解\ndate: 2021-01-30 23:38:43\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: Java-annotation\n---\n\n## 注解基础\n\n### 概念\n\n> 注解（Annotation），JDK1.5引入\n>\n> 位于源码中（可以理解Java源码由*代码/注释/注解* 构成）\n>\n> 注解用于修饰程序的元素，而不会对被修饰的对象有直接影响，只有通过**某种配套的工具**才会对注解信息进行访问和处理（比如一些框架中就利用反射技术对注解中内容进行处理）\n\n### 作用\n\n* 提供信息给编译器/IDE（如`@SuppressWarnings`即让IDE压制相应警告信息）\n\n* 可用于其他工具来产生额外的代码/配置文件（比如Java web中即可使用注解生成配置文件）\n* 有一些注解可在程序运行时访问，增加程序的动态性\n\n### 普通注解\n\n即Java预定义的普通注解，主要有以下一些\n\n* `@Override`：修饰方法，强制该方法代码必须符合父类中该方法的定义，避免代码错误\n* `@Deprecated`：修饰类/类元素/包，表明该部分废除，建议不再使用（IDE会显示为被横线划掉）\n* ` @SuppressWarnings`：压制不同类型的警告信息，使得编译器不再显示警告（警告类型由IDE自定）。同时该方法可以传入参数，用于标识忽略哪些信息，示例如下\n\n```\n@SuppressWarnings(\"all\")\t// 忽略所有警告\n```\n\n### 元注解\n\n> 元注解即修饰注解的注解，在自定义注解时比较常用\n\n#### @Retention\n\n> 该注解用于修饰其他注解的存在范围\n>\n> `RetentionPolicy.SOURCE`：注解仅存在于源码，不在class文件\n>\n> `RetentionPolicy.CLASS`：*默认参数*，注解存在于.class文件，但不能被JVM加载\n>\n> `RetentionPolicy.RUNTIME`：表示注解可以被JVM运行时访问到，通常情况下可以结合反射进行一些工作\n\n```\n@Retention(RetentionPolicy.RUNTIME)\t// 修饰的注解存在于JVM中\n```\n\n#### @Target\n\n> 用于限定目标注解能够作用在什么地方\n>\n> 比如有些注解只能修饰方法，就是使用这个实现的\n\n```\n@Target({ElementType.METHOD, ElementType.FIELD})\t// 限定修饰方法与成员变量\n```\n\n#### @Inherited\n\n> 使得修饰的注解修饰的类与它的子类都能够包含某个注解\n>\n> 普通的注解没有继承功能\n\n#### @Repeatable\n\n> 修饰的注解可以重复应用标注，常用于测试\n>\n> 需要定义注解和注解容器（即原注解的数组）\n\n#### @Documented\n\n> 指明该注解可以被Javadoc工具解析，形成帮助文档\n\n\n\n## 自定义注解\n\n> 注解的定义即拓展`java.lang.annotation.Annotation`注解接口\n>\n> 其中绝大部分类型都可以作为其参数，但属性定义成方法 的样子\n\n定义形式如下\n\n```\npublic @interface MyAnnotation {\n    int a() default 0;\n    int b() default 0;\n}\n```\n\n\n\n## 注解的解析\n\n暂略\n\n\n\n\n\n## 注解的应用\n\n暂略\n\n\n\n\n\n\n\n\n\n> 参考：\n>\n> mooc华东师范大学Java核心技术\n\n","slug":"编程相关/Java/Java基础/11、Java：注解","published":1,"updated":"2021-02-28T06:45:52.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq8001p8sjsdej0haku","content":"<h2 id=\"注解基础\"><a href=\"#注解基础\" class=\"headerlink\" title=\"注解基础\"></a>注解基础</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>注解（Annotation），JDK1.5引入</p>\n<p>位于源码中（可以理解Java源码由<em>代码/注释/注解</em> 构成）</p>\n<p>注解用于修饰程序的元素，而不会对被修饰的对象有直接影响，只有通过<strong>某种配套的工具</strong>才会对注解信息进行访问和处理（比如一些框架中就利用反射技术对注解中内容进行处理）</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><p>提供信息给编译器/IDE（如<code>@SuppressWarnings</code>即让IDE压制相应警告信息）</p>\n</li>\n<li><p>可用于其他工具来产生额外的代码/配置文件（比如Java web中即可使用注解生成配置文件）</p>\n</li>\n<li><p>有一些注解可在程序运行时访问，增加程序的动态性</p>\n</li>\n</ul>\n<h3 id=\"普通注解\"><a href=\"#普通注解\" class=\"headerlink\" title=\"普通注解\"></a>普通注解</h3><p>即Java预定义的普通注解，主要有以下一些</p>\n<ul>\n<li><code>@Override</code>：修饰方法，强制该方法代码必须符合父类中该方法的定义，避免代码错误</li>\n<li><code>@Deprecated</code>：修饰类/类元素/包，表明该部分废除，建议不再使用（IDE会显示为被横线划掉）</li>\n<li><code>@SuppressWarnings</code>：压制不同类型的警告信息，使得编译器不再显示警告（警告类型由IDE自定）。同时该方法可以传入参数，用于标识忽略哪些信息，示例如下</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@SuppressWarnings(<span class=\"hljs-meta-string\">\"all\"</span>)</span>\t<span class=\"hljs-comment\">// 忽略所有警告</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><blockquote>\n<p>元注解即修饰注解的注解，在自定义注解时比较常用</p>\n</blockquote>\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h4><blockquote>\n<p>该注解用于修饰其他注解的存在范围</p>\n<p><code>RetentionPolicy.SOURCE</code>：注解仅存在于源码，不在class文件</p>\n<p><code>RetentionPolicy.CLASS</code>：<em>默认参数</em>，注解存在于.class文件，但不能被JVM加载</p>\n<p><code>RetentionPolicy.RUNTIME</code>：表示注解可以被JVM运行时访问到，通常情况下可以结合反射进行一些工作</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>\t<span class=\"hljs-comment\">// 修饰的注解存在于JVM中</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h4><blockquote>\n<p>用于限定目标注解能够作用在什么地方</p>\n<p>比如有些注解只能修饰方法，就是使用这个实现的</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Target(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span>\t<span class=\"hljs-comment\">// 限定修饰方法与成员变量</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h4><blockquote>\n<p>使得修饰的注解修饰的类与它的子类都能够包含某个注解</p>\n<p>普通的注解没有继承功能</p>\n</blockquote>\n<h4 id=\"Repeatable\"><a href=\"#Repeatable\" class=\"headerlink\" title=\"@Repeatable\"></a>@Repeatable</h4><blockquote>\n<p>修饰的注解可以重复应用标注，常用于测试</p>\n<p>需要定义注解和注解容器（即原注解的数组）</p>\n</blockquote>\n<h4 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h4><blockquote>\n<p>指明该注解可以被Javadoc工具解析，形成帮助文档</p>\n</blockquote>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><blockquote>\n<p>注解的定义即拓展<code>java.lang.annotation.Annotation</code>注解接口</p>\n<p>其中绝大部分类型都可以作为其参数，但属性定义成方法 的样子</p>\n</blockquote>\n<p>定义形式如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public @interface MyAnnotation &#123;<br>    int a()<span class=\"hljs-built_in\"> default </span>0;<br>    int b()<span class=\"hljs-built_in\"> default </span>0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注解的解析\"><a href=\"#注解的解析\" class=\"headerlink\" title=\"注解的解析\"></a>注解的解析</h2><p>暂略</p>\n<h2 id=\"注解的应用\"><a href=\"#注解的应用\" class=\"headerlink\" title=\"注解的应用\"></a>注解的应用</h2><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p>mooc华东师范大学Java核心技术</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注解基础\"><a href=\"#注解基础\" class=\"headerlink\" title=\"注解基础\"></a>注解基础</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><blockquote>\n<p>注解（Annotation），JDK1.5引入</p>\n<p>位于源码中（可以理解Java源码由<em>代码/注释/注解</em> 构成）</p>\n<p>注解用于修饰程序的元素，而不会对被修饰的对象有直接影响，只有通过<strong>某种配套的工具</strong>才会对注解信息进行访问和处理（比如一些框架中就利用反射技术对注解中内容进行处理）</p>\n</blockquote>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><ul>\n<li><p>提供信息给编译器/IDE（如<code>@SuppressWarnings</code>即让IDE压制相应警告信息）</p>\n</li>\n<li><p>可用于其他工具来产生额外的代码/配置文件（比如Java web中即可使用注解生成配置文件）</p>\n</li>\n<li><p>有一些注解可在程序运行时访问，增加程序的动态性</p>\n</li>\n</ul>\n<h3 id=\"普通注解\"><a href=\"#普通注解\" class=\"headerlink\" title=\"普通注解\"></a>普通注解</h3><p>即Java预定义的普通注解，主要有以下一些</p>\n<ul>\n<li><code>@Override</code>：修饰方法，强制该方法代码必须符合父类中该方法的定义，避免代码错误</li>\n<li><code>@Deprecated</code>：修饰类/类元素/包，表明该部分废除，建议不再使用（IDE会显示为被横线划掉）</li>\n<li><code>@SuppressWarnings</code>：压制不同类型的警告信息，使得编译器不再显示警告（警告类型由IDE自定）。同时该方法可以传入参数，用于标识忽略哪些信息，示例如下</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@SuppressWarnings(<span class=\"hljs-meta-string\">\"all\"</span>)</span>\t<span class=\"hljs-comment\">// 忽略所有警告</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h3><blockquote>\n<p>元注解即修饰注解的注解，在自定义注解时比较常用</p>\n</blockquote>\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a>@Retention</h4><blockquote>\n<p>该注解用于修饰其他注解的存在范围</p>\n<p><code>RetentionPolicy.SOURCE</code>：注解仅存在于源码，不在class文件</p>\n<p><code>RetentionPolicy.CLASS</code>：<em>默认参数</em>，注解存在于.class文件，但不能被JVM加载</p>\n<p><code>RetentionPolicy.RUNTIME</code>：表示注解可以被JVM运行时访问到，通常情况下可以结合反射进行一些工作</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span>\t<span class=\"hljs-comment\">// 修饰的注解存在于JVM中</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h4><blockquote>\n<p>用于限定目标注解能够作用在什么地方</p>\n<p>比如有些注解只能修饰方法，就是使用这个实现的</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs kotlin\"><span class=\"hljs-meta\">@Target(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</span>\t<span class=\"hljs-comment\">// 限定修饰方法与成员变量</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h4><blockquote>\n<p>使得修饰的注解修饰的类与它的子类都能够包含某个注解</p>\n<p>普通的注解没有继承功能</p>\n</blockquote>\n<h4 id=\"Repeatable\"><a href=\"#Repeatable\" class=\"headerlink\" title=\"@Repeatable\"></a>@Repeatable</h4><blockquote>\n<p>修饰的注解可以重复应用标注，常用于测试</p>\n<p>需要定义注解和注解容器（即原注解的数组）</p>\n</blockquote>\n<h4 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h4><blockquote>\n<p>指明该注解可以被Javadoc工具解析，形成帮助文档</p>\n</blockquote>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><blockquote>\n<p>注解的定义即拓展<code>java.lang.annotation.Annotation</code>注解接口</p>\n<p>其中绝大部分类型都可以作为其参数，但属性定义成方法 的样子</p>\n</blockquote>\n<p>定义形式如下</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public @interface MyAnnotation &#123;<br>    int a()<span class=\"hljs-built_in\"> default </span>0;<br>    int b()<span class=\"hljs-built_in\"> default </span>0;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注解的解析\"><a href=\"#注解的解析\" class=\"headerlink\" title=\"注解的解析\"></a>注解的解析</h2><p>暂略</p>\n<h2 id=\"注解的应用\"><a href=\"#注解的应用\" class=\"headerlink\" title=\"注解的应用\"></a>注解的应用</h2><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p>mooc华东师范大学Java核心技术</p>\n</blockquote>\n"},{"title":"Java：基本概念与语言特点","date":"2020-06-27T09:25:12.000Z","fileName":"java-basic-grammar","_content":"\n## 常见名词解释\n\n### JVM（Java Virtual Machine）\n\nJava虚拟机，用于运行Java字节码，其针对不同的操作系统有着特定的实现，使得相同的字节码运行会给出相同的结果。\n\n在Java中，JVM能够理解的代码就叫做**字节码**（.class文件）。其不面向任何特定的处理器，只面向虚拟机。\n\n### JDK（Java Development Kit）\n\nJDK是功能齐全的Java软件开发包，拥有JRE所拥有的一切，有编译器（javac）和一些其他工具，能够创建和编译程序。\n\n### JRE（Java Runtime Environment）\n\n即Java运行时环境。其为运行已编译Java程序所需要的所有内容的集合，包括Java虚拟机、Java类库、Java命令和其他一些基础的构建。但是，其不能用于创建新程序。\n\n### Java SE（Standard Edition）\n\n即Java标准版，包括Java语言规范等等\n\n### Java EE（J2EE）\n\nJava平台企业版，可以理解为为企业级应用开发的一些Java Web框架等内容。\n\n\n\n## Java语言特点\n\n### 基本特性\n\n> 1、面向对象（具有封装、继承、多态等特性）\n>\n> 2、平台无关性（JVM的实现使得Java具有平台无关性）\n>\n> 3、可靠性、安全性\n>\n> 4、提供了多线程支持\n>\n> 5、支持网络编程且十分方便\n>\n> 6、编译与解释并存：Java程序要经过先编译、后解释两个步骤。（`.java`源文件先经过JDK中的`javac`命令**编译**生成字节码文件`*.class`，再经过JVM**解释**进行执行）\n\n### 与C++的区别\n\n>1、Java不提供指针来直接访问内存，程序内存更安全\n>\n>2、Java的类是单继承的，而C++支持多继承\n>\n>3、Java有自动内存管理垃圾回收机制（GC），不需要手动释放无用内存\n>\n>4、Java的字符串与字符数组最后没有一个额外的字符`\\0`来表示结束（Java字符串与数组都可以理解为类，预先知道大小，所以不需要结束字符）\n\n\n\n## 常用命令\n\n### 命令行编译\n\n利用`javac`和`java`能够实现对`.java`文件进行编译和运行\n\n`javac`程序是一个Java编译器，将`*.java`编译成`*.class`（需要`.java`后缀）\n\n`java`程序启动Java虚拟机（只需要指定类名）\n\n```\njavac Main.java\njava Main\n```\n\n如下编译运行一个helloworld程序：\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javac.png)\n\n### 反编译\n\n使用`javap`能够对`.class`文件进行反编译，通过该命令能够有效了解JVM的内部原理\n\n```\njavap\t# 对其进行反编译（得到近似的Java源码）\njavap -c\t# 对其进行反汇编\njavap -verbose\t# 最常用，显示附加信息\n```\n\n如下反编译之前的helloworld程序\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap.png)\n\n而加上`-verbose`则可以显示详细信息，辅助代码分析\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap-v.png)\n\n## 注释\n\nJava编译器在编译代码之前会把代码中的所有注释抹掉，字节码中不保留注释\n\n1. 单行注释：`// `\n\n2. 多行注释：`/* */`\n3. 文档注释：`/** */`\n\n\n\n## 常用关键字\n\n### final——（最终，不可改变）\n\n#### 修饰数据\n\n> 声明数据为常量（不能再次赋值），可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\n\n- 对于基本类型，final 使数值不变；\n- 对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\n\n#### 修饰方法\n\n> 声明方法不能被子类重写。\n\n其中，**private方法隐式的被指定为final**。如果在子类中定义的方法和父类中的一个private方法相同，则视为子类中定义了一个新方法。\n\n#### 修饰类\n\n> 声明类不能被继承\n\n### static——（静态）\n\n#### 静态变量\n\n> 又称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它（*只依赖于类存在，不依赖于对象实例存在*）。\n>\n> 静态变量在内存中**只存在一份**，所有的对象实例共享。\n\n```\npublic class A() {\n\tprivate static int x;\t// 静态变量\n}\n```\n\n#### 静态方法\n\n> 静态方法在类加载的时候就存在了，它**不依赖于任何实例**。所以静态方法**必须有实现**，也就是说它不能是抽象方法。\n>\n> 同时，静态方法*只能访问所属类的静态字段和静态方法*。\n>\n> main方法就是静态方法\n\n**方法中不能有this和super关键字**（这两个关键字与具体对象关联，而静态方法是不依赖于实例的）\n\n#### 静态语句块\n\n> 只在类第一次被加载时调用（程序运行期间，这段代码只运行一次）\n>\n> 执行顺序：static块 > 普通匿名块 > 构造函数\n\n```\npublic class test {\n    static {\n        System.out.println(\"gg\");\n    }\n\n    public static void main(String[] args) {\n    }\n}\n/////////////////////////////////////////// \ngg\n```\n\n#### 静态内部类（使用的很少）\n\n非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法。\n\n\n\n## 包\n\n### package关键字\n\n> package包与C++中的`namespace`类似\n>\n> Java中常用域名倒序的方法来定义包名，一个Java源文件中只能有一个package语句\n\n### import关键字\n\n> 用于引入Java不同包中的类，放置在`package`之后，类定义之前\n\n### jar文件\n\n> jar文件是一组class文件的压缩包，易于传播（其中可以包含很多Java类），且能够有效保护源码（其中不包含.java文件）\n>\n> 可以利用IDE打包jar文件，也可以使用`jar.exe`命令进行打包\n\n\n\n> 参考：\n>\n> https://github.com/Snailclimb/JavaGuide\n>\n> 《Java核心技术卷1》\n>\n> mooc华东师范大学Java核心技术课程\n\n\n\n\n\n","source":"_posts/编程相关/Java/Java基础/1、Java：基本概念与语言特点.md","raw":"---\ntitle: Java：基本概念与语言特点\ndate: 2020-06-27 17:25:12\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-basic-grammar\n---\n\n## 常见名词解释\n\n### JVM（Java Virtual Machine）\n\nJava虚拟机，用于运行Java字节码，其针对不同的操作系统有着特定的实现，使得相同的字节码运行会给出相同的结果。\n\n在Java中，JVM能够理解的代码就叫做**字节码**（.class文件）。其不面向任何特定的处理器，只面向虚拟机。\n\n### JDK（Java Development Kit）\n\nJDK是功能齐全的Java软件开发包，拥有JRE所拥有的一切，有编译器（javac）和一些其他工具，能够创建和编译程序。\n\n### JRE（Java Runtime Environment）\n\n即Java运行时环境。其为运行已编译Java程序所需要的所有内容的集合，包括Java虚拟机、Java类库、Java命令和其他一些基础的构建。但是，其不能用于创建新程序。\n\n### Java SE（Standard Edition）\n\n即Java标准版，包括Java语言规范等等\n\n### Java EE（J2EE）\n\nJava平台企业版，可以理解为为企业级应用开发的一些Java Web框架等内容。\n\n\n\n## Java语言特点\n\n### 基本特性\n\n> 1、面向对象（具有封装、继承、多态等特性）\n>\n> 2、平台无关性（JVM的实现使得Java具有平台无关性）\n>\n> 3、可靠性、安全性\n>\n> 4、提供了多线程支持\n>\n> 5、支持网络编程且十分方便\n>\n> 6、编译与解释并存：Java程序要经过先编译、后解释两个步骤。（`.java`源文件先经过JDK中的`javac`命令**编译**生成字节码文件`*.class`，再经过JVM**解释**进行执行）\n\n### 与C++的区别\n\n>1、Java不提供指针来直接访问内存，程序内存更安全\n>\n>2、Java的类是单继承的，而C++支持多继承\n>\n>3、Java有自动内存管理垃圾回收机制（GC），不需要手动释放无用内存\n>\n>4、Java的字符串与字符数组最后没有一个额外的字符`\\0`来表示结束（Java字符串与数组都可以理解为类，预先知道大小，所以不需要结束字符）\n\n\n\n## 常用命令\n\n### 命令行编译\n\n利用`javac`和`java`能够实现对`.java`文件进行编译和运行\n\n`javac`程序是一个Java编译器，将`*.java`编译成`*.class`（需要`.java`后缀）\n\n`java`程序启动Java虚拟机（只需要指定类名）\n\n```\njavac Main.java\njava Main\n```\n\n如下编译运行一个helloworld程序：\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javac.png)\n\n### 反编译\n\n使用`javap`能够对`.class`文件进行反编译，通过该命令能够有效了解JVM的内部原理\n\n```\njavap\t# 对其进行反编译（得到近似的Java源码）\njavap -c\t# 对其进行反汇编\njavap -verbose\t# 最常用，显示附加信息\n```\n\n如下反编译之前的helloworld程序\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap.png)\n\n而加上`-verbose`则可以显示详细信息，辅助代码分析\n\n![](http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap-v.png)\n\n## 注释\n\nJava编译器在编译代码之前会把代码中的所有注释抹掉，字节码中不保留注释\n\n1. 单行注释：`// `\n\n2. 多行注释：`/* */`\n3. 文档注释：`/** */`\n\n\n\n## 常用关键字\n\n### final——（最终，不可改变）\n\n#### 修饰数据\n\n> 声明数据为常量（不能再次赋值），可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。\n\n- 对于基本类型，final 使数值不变；\n- 对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。\n\n#### 修饰方法\n\n> 声明方法不能被子类重写。\n\n其中，**private方法隐式的被指定为final**。如果在子类中定义的方法和父类中的一个private方法相同，则视为子类中定义了一个新方法。\n\n#### 修饰类\n\n> 声明类不能被继承\n\n### static——（静态）\n\n#### 静态变量\n\n> 又称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它（*只依赖于类存在，不依赖于对象实例存在*）。\n>\n> 静态变量在内存中**只存在一份**，所有的对象实例共享。\n\n```\npublic class A() {\n\tprivate static int x;\t// 静态变量\n}\n```\n\n#### 静态方法\n\n> 静态方法在类加载的时候就存在了，它**不依赖于任何实例**。所以静态方法**必须有实现**，也就是说它不能是抽象方法。\n>\n> 同时，静态方法*只能访问所属类的静态字段和静态方法*。\n>\n> main方法就是静态方法\n\n**方法中不能有this和super关键字**（这两个关键字与具体对象关联，而静态方法是不依赖于实例的）\n\n#### 静态语句块\n\n> 只在类第一次被加载时调用（程序运行期间，这段代码只运行一次）\n>\n> 执行顺序：static块 > 普通匿名块 > 构造函数\n\n```\npublic class test {\n    static {\n        System.out.println(\"gg\");\n    }\n\n    public static void main(String[] args) {\n    }\n}\n/////////////////////////////////////////// \ngg\n```\n\n#### 静态内部类（使用的很少）\n\n非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法。\n\n\n\n## 包\n\n### package关键字\n\n> package包与C++中的`namespace`类似\n>\n> Java中常用域名倒序的方法来定义包名，一个Java源文件中只能有一个package语句\n\n### import关键字\n\n> 用于引入Java不同包中的类，放置在`package`之后，类定义之前\n\n### jar文件\n\n> jar文件是一组class文件的压缩包，易于传播（其中可以包含很多Java类），且能够有效保护源码（其中不包含.java文件）\n>\n> 可以利用IDE打包jar文件，也可以使用`jar.exe`命令进行打包\n\n\n\n> 参考：\n>\n> https://github.com/Snailclimb/JavaGuide\n>\n> 《Java核心技术卷1》\n>\n> mooc华东师范大学Java核心技术课程\n\n\n\n\n\n","slug":"编程相关/Java/Java基础/1、Java：基本概念与语言特点","published":1,"updated":"2021-02-01T09:50:57.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhq9001t8sjsd3k54c5b","content":"<h2 id=\"常见名词解释\"><a href=\"#常见名词解释\" class=\"headerlink\" title=\"常见名词解释\"></a>常见名词解释</h2><h3 id=\"JVM（Java-Virtual-Machine）\"><a href=\"#JVM（Java-Virtual-Machine）\" class=\"headerlink\" title=\"JVM（Java Virtual Machine）\"></a>JVM（Java Virtual Machine）</h3><p>Java虚拟机，用于运行Java字节码，其针对不同的操作系统有着特定的实现，使得相同的字节码运行会给出相同的结果。</p>\n<p>在Java中，JVM能够理解的代码就叫做<strong>字节码</strong>（.class文件）。其不面向任何特定的处理器，只面向虚拟机。</p>\n<h3 id=\"JDK（Java-Development-Kit）\"><a href=\"#JDK（Java-Development-Kit）\" class=\"headerlink\" title=\"JDK（Java Development Kit）\"></a>JDK（Java Development Kit）</h3><p>JDK是功能齐全的Java软件开发包，拥有JRE所拥有的一切，有编译器（javac）和一些其他工具，能够创建和编译程序。</p>\n<h3 id=\"JRE（Java-Runtime-Environment）\"><a href=\"#JRE（Java-Runtime-Environment）\" class=\"headerlink\" title=\"JRE（Java Runtime Environment）\"></a>JRE（Java Runtime Environment）</h3><p>即Java运行时环境。其为运行已编译Java程序所需要的所有内容的集合，包括Java虚拟机、Java类库、Java命令和其他一些基础的构建。但是，其不能用于创建新程序。</p>\n<h3 id=\"Java-SE（Standard-Edition）\"><a href=\"#Java-SE（Standard-Edition）\" class=\"headerlink\" title=\"Java SE（Standard Edition）\"></a>Java SE（Standard Edition）</h3><p>即Java标准版，包括Java语言规范等等</p>\n<h3 id=\"Java-EE（J2EE）\"><a href=\"#Java-EE（J2EE）\" class=\"headerlink\" title=\"Java EE（J2EE）\"></a>Java EE（J2EE）</h3><p>Java平台企业版，可以理解为为企业级应用开发的一些Java Web框架等内容。</p>\n<h2 id=\"Java语言特点\"><a href=\"#Java语言特点\" class=\"headerlink\" title=\"Java语言特点\"></a>Java语言特点</h2><h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><blockquote>\n<p>1、面向对象（具有封装、继承、多态等特性）</p>\n<p>2、平台无关性（JVM的实现使得Java具有平台无关性）</p>\n<p>3、可靠性、安全性</p>\n<p>4、提供了多线程支持</p>\n<p>5、支持网络编程且十分方便</p>\n<p>6、编译与解释并存：Java程序要经过先编译、后解释两个步骤。（<code>.java</code>源文件先经过JDK中的<code>javac</code>命令<strong>编译</strong>生成字节码文件<code>*.class</code>，再经过JVM<strong>解释</strong>进行执行）</p>\n</blockquote>\n<h3 id=\"与C-的区别\"><a href=\"#与C-的区别\" class=\"headerlink\" title=\"与C++的区别\"></a>与C++的区别</h3><blockquote>\n<p>1、Java不提供指针来直接访问内存，程序内存更安全</p>\n<p>2、Java的类是单继承的，而C++支持多继承</p>\n<p>3、Java有自动内存管理垃圾回收机制（GC），不需要手动释放无用内存</p>\n<p>4、Java的字符串与字符数组最后没有一个额外的字符<code>\\0</code>来表示结束（Java字符串与数组都可以理解为类，预先知道大小，所以不需要结束字符）</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"命令行编译\"><a href=\"#命令行编译\" class=\"headerlink\" title=\"命令行编译\"></a>命令行编译</h3><p>利用<code>javac</code>和<code>java</code>能够实现对<code>.java</code>文件进行编译和运行</p>\n<p><code>javac</code>程序是一个Java编译器，将<code>*.java</code>编译成<code>*.class</code>（需要<code>.java</code>后缀）</p>\n<p><code>java</code>程序启动Java虚拟机（只需要指定类名）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">javac </span>Main.<span class=\"hljs-keyword\">java<br></span><span class=\"hljs-keyword\">java </span>Main<br></code></pre></td></tr></table></figure>\n\n<p>如下编译运行一个helloworld程序：</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javac.png\" alt=\"\"></p>\n<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>使用<code>javap</code>能够对<code>.class</code>文件进行反编译，通过该命令能够有效了解JVM的内部原理</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">javap\t</span><span class=\"hljs-comment\"># 对其进行反编译（得到近似的Java源码）</span><br><span class=\"hljs-keyword\">javap </span>-c\t<span class=\"hljs-comment\"># 对其进行反汇编</span><br><span class=\"hljs-keyword\">javap </span>-verbose\t<span class=\"hljs-comment\"># 最常用，显示附加信息</span><br></code></pre></td></tr></table></figure>\n\n<p>如下反编译之前的helloworld程序</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap.png\" alt=\"\"></p>\n<p>而加上<code>-verbose</code>则可以显示详细信息，辅助代码分析</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap-v.png\" alt=\"\"></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>Java编译器在编译代码之前会把代码中的所有注释抹掉，字节码中不保留注释</p>\n<ol>\n<li><p>单行注释：<code>//</code></p>\n</li>\n<li><p>多行注释：<code>/* */</code></p>\n</li>\n<li><p>文档注释：<code>/** */</code></p>\n</li>\n</ol>\n<h2 id=\"常用关键字\"><a href=\"#常用关键字\" class=\"headerlink\" title=\"常用关键字\"></a>常用关键字</h2><h3 id=\"final——（最终，不可改变）\"><a href=\"#final——（最终，不可改变）\" class=\"headerlink\" title=\"final——（最终，不可改变）\"></a>final——（最终，不可改变）</h3><h4 id=\"修饰数据\"><a href=\"#修饰数据\" class=\"headerlink\" title=\"修饰数据\"></a>修饰数据</h4><blockquote>\n<p>声明数据为常量（不能再次赋值），可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p>\n</blockquote>\n<ul>\n<li>对于基本类型，final 使数值不变；</li>\n<li>对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li>\n</ul>\n<h4 id=\"修饰方法\"><a href=\"#修饰方法\" class=\"headerlink\" title=\"修饰方法\"></a>修饰方法</h4><blockquote>\n<p>声明方法不能被子类重写。</p>\n</blockquote>\n<p>其中，<strong>private方法隐式的被指定为final</strong>。如果在子类中定义的方法和父类中的一个private方法相同，则视为子类中定义了一个新方法。</p>\n<h4 id=\"修饰类\"><a href=\"#修饰类\" class=\"headerlink\" title=\"修饰类\"></a>修饰类</h4><blockquote>\n<p>声明类不能被继承</p>\n</blockquote>\n<h3 id=\"static——（静态）\"><a href=\"#static——（静态）\" class=\"headerlink\" title=\"static——（静态）\"></a>static——（静态）</h3><h4 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h4><blockquote>\n<p>又称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它（<em>只依赖于类存在，不依赖于对象实例存在</em>）。</p>\n<p>静态变量在内存中<strong>只存在一份</strong>，所有的对象实例共享。</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">A</span>() &#123;<br>\t<span class=\"hljs-keyword\">private</span> static <span class=\"hljs-built_in\">int</span> x;\t<span class=\"hljs-comment\">// 静态变量</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><blockquote>\n<p>静态方法在类加载的时候就存在了，它<strong>不依赖于任何实例</strong>。所以静态方法<strong>必须有实现</strong>，也就是说它不能是抽象方法。</p>\n<p>同时，静态方法<em>只能访问所属类的静态字段和静态方法</em>。</p>\n<p>main方法就是静态方法</p>\n</blockquote>\n<p><strong>方法中不能有this和super关键字</strong>（这两个关键字与具体对象关联，而静态方法是不依赖于实例的）</p>\n<h4 id=\"静态语句块\"><a href=\"#静态语句块\" class=\"headerlink\" title=\"静态语句块\"></a>静态语句块</h4><blockquote>\n<p>只在类第一次被加载时调用（程序运行期间，这段代码只运行一次）</p>\n<p>执行顺序：static块 &gt; 普通匿名块 &gt; 构造函数</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">test</span> &#123;</span><br>    static &#123;<br>        System.out.println(<span class=\"hljs-string\">\"gg\"</span>);<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>    &#125;<br>&#125;<br>/<span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span> <br>gg<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"静态内部类（使用的很少）\"><a href=\"#静态内部类（使用的很少）\" class=\"headerlink\" title=\"静态内部类（使用的很少）\"></a>静态内部类（使用的很少）</h4><p>非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><h3 id=\"package关键字\"><a href=\"#package关键字\" class=\"headerlink\" title=\"package关键字\"></a>package关键字</h3><blockquote>\n<p>package包与C++中的<code>namespace</code>类似</p>\n<p>Java中常用域名倒序的方法来定义包名，一个Java源文件中只能有一个package语句</p>\n</blockquote>\n<h3 id=\"import关键字\"><a href=\"#import关键字\" class=\"headerlink\" title=\"import关键字\"></a>import关键字</h3><blockquote>\n<p>用于引入Java不同包中的类，放置在<code>package</code>之后，类定义之前</p>\n</blockquote>\n<h3 id=\"jar文件\"><a href=\"#jar文件\" class=\"headerlink\" title=\"jar文件\"></a>jar文件</h3><blockquote>\n<p>jar文件是一组class文件的压缩包，易于传播（其中可以包含很多Java类），且能够有效保护源码（其中不包含.java文件）</p>\n<p>可以利用IDE打包jar文件，也可以使用<code>jar.exe</code>命令进行打包</p>\n</blockquote>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></p>\n<p>《Java核心技术卷1》</p>\n<p>mooc华东师范大学Java核心技术课程</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"常见名词解释\"><a href=\"#常见名词解释\" class=\"headerlink\" title=\"常见名词解释\"></a>常见名词解释</h2><h3 id=\"JVM（Java-Virtual-Machine）\"><a href=\"#JVM（Java-Virtual-Machine）\" class=\"headerlink\" title=\"JVM（Java Virtual Machine）\"></a>JVM（Java Virtual Machine）</h3><p>Java虚拟机，用于运行Java字节码，其针对不同的操作系统有着特定的实现，使得相同的字节码运行会给出相同的结果。</p>\n<p>在Java中，JVM能够理解的代码就叫做<strong>字节码</strong>（.class文件）。其不面向任何特定的处理器，只面向虚拟机。</p>\n<h3 id=\"JDK（Java-Development-Kit）\"><a href=\"#JDK（Java-Development-Kit）\" class=\"headerlink\" title=\"JDK（Java Development Kit）\"></a>JDK（Java Development Kit）</h3><p>JDK是功能齐全的Java软件开发包，拥有JRE所拥有的一切，有编译器（javac）和一些其他工具，能够创建和编译程序。</p>\n<h3 id=\"JRE（Java-Runtime-Environment）\"><a href=\"#JRE（Java-Runtime-Environment）\" class=\"headerlink\" title=\"JRE（Java Runtime Environment）\"></a>JRE（Java Runtime Environment）</h3><p>即Java运行时环境。其为运行已编译Java程序所需要的所有内容的集合，包括Java虚拟机、Java类库、Java命令和其他一些基础的构建。但是，其不能用于创建新程序。</p>\n<h3 id=\"Java-SE（Standard-Edition）\"><a href=\"#Java-SE（Standard-Edition）\" class=\"headerlink\" title=\"Java SE（Standard Edition）\"></a>Java SE（Standard Edition）</h3><p>即Java标准版，包括Java语言规范等等</p>\n<h3 id=\"Java-EE（J2EE）\"><a href=\"#Java-EE（J2EE）\" class=\"headerlink\" title=\"Java EE（J2EE）\"></a>Java EE（J2EE）</h3><p>Java平台企业版，可以理解为为企业级应用开发的一些Java Web框架等内容。</p>\n<h2 id=\"Java语言特点\"><a href=\"#Java语言特点\" class=\"headerlink\" title=\"Java语言特点\"></a>Java语言特点</h2><h3 id=\"基本特性\"><a href=\"#基本特性\" class=\"headerlink\" title=\"基本特性\"></a>基本特性</h3><blockquote>\n<p>1、面向对象（具有封装、继承、多态等特性）</p>\n<p>2、平台无关性（JVM的实现使得Java具有平台无关性）</p>\n<p>3、可靠性、安全性</p>\n<p>4、提供了多线程支持</p>\n<p>5、支持网络编程且十分方便</p>\n<p>6、编译与解释并存：Java程序要经过先编译、后解释两个步骤。（<code>.java</code>源文件先经过JDK中的<code>javac</code>命令<strong>编译</strong>生成字节码文件<code>*.class</code>，再经过JVM<strong>解释</strong>进行执行）</p>\n</blockquote>\n<h3 id=\"与C-的区别\"><a href=\"#与C-的区别\" class=\"headerlink\" title=\"与C++的区别\"></a>与C++的区别</h3><blockquote>\n<p>1、Java不提供指针来直接访问内存，程序内存更安全</p>\n<p>2、Java的类是单继承的，而C++支持多继承</p>\n<p>3、Java有自动内存管理垃圾回收机制（GC），不需要手动释放无用内存</p>\n<p>4、Java的字符串与字符数组最后没有一个额外的字符<code>\\0</code>来表示结束（Java字符串与数组都可以理解为类，预先知道大小，所以不需要结束字符）</p>\n</blockquote>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><h3 id=\"命令行编译\"><a href=\"#命令行编译\" class=\"headerlink\" title=\"命令行编译\"></a>命令行编译</h3><p>利用<code>javac</code>和<code>java</code>能够实现对<code>.java</code>文件进行编译和运行</p>\n<p><code>javac</code>程序是一个Java编译器，将<code>*.java</code>编译成<code>*.class</code>（需要<code>.java</code>后缀）</p>\n<p><code>java</code>程序启动Java虚拟机（只需要指定类名）</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">javac </span>Main.<span class=\"hljs-keyword\">java<br></span><span class=\"hljs-keyword\">java </span>Main<br></code></pre></td></tr></table></figure>\n\n<p>如下编译运行一个helloworld程序：</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javac.png\" alt=\"\"></p>\n<h3 id=\"反编译\"><a href=\"#反编译\" class=\"headerlink\" title=\"反编译\"></a>反编译</h3><p>使用<code>javap</code>能够对<code>.class</code>文件进行反编译，通过该命令能够有效了解JVM的内部原理</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\"><span class=\"hljs-keyword\">javap\t</span><span class=\"hljs-comment\"># 对其进行反编译（得到近似的Java源码）</span><br><span class=\"hljs-keyword\">javap </span>-c\t<span class=\"hljs-comment\"># 对其进行反汇编</span><br><span class=\"hljs-keyword\">javap </span>-verbose\t<span class=\"hljs-comment\"># 最常用，显示附加信息</span><br></code></pre></td></tr></table></figure>\n\n<p>如下反编译之前的helloworld程序</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap.png\" alt=\"\"></p>\n<p>而加上<code>-verbose</code>则可以显示详细信息，辅助代码分析</p>\n<p><img src=\"http://cdn.ziyedy.top/1%E3%80%81Java%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AF%AD%E8%A8%80%E7%89%B9%E7%82%B9/javap-v.png\" alt=\"\"></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>Java编译器在编译代码之前会把代码中的所有注释抹掉，字节码中不保留注释</p>\n<ol>\n<li><p>单行注释：<code>//</code></p>\n</li>\n<li><p>多行注释：<code>/* */</code></p>\n</li>\n<li><p>文档注释：<code>/** */</code></p>\n</li>\n</ol>\n<h2 id=\"常用关键字\"><a href=\"#常用关键字\" class=\"headerlink\" title=\"常用关键字\"></a>常用关键字</h2><h3 id=\"final——（最终，不可改变）\"><a href=\"#final——（最终，不可改变）\" class=\"headerlink\" title=\"final——（最终，不可改变）\"></a>final——（最终，不可改变）</h3><h4 id=\"修饰数据\"><a href=\"#修饰数据\" class=\"headerlink\" title=\"修饰数据\"></a>修饰数据</h4><blockquote>\n<p>声明数据为常量（不能再次赋值），可以是编译时常量，也可以是在运行时被初始化后不能被改变的常量。</p>\n</blockquote>\n<ul>\n<li>对于基本类型，final 使数值不变；</li>\n<li>对于引用类型，final 使引用不变，也就不能引用其它对象，但是被引用的对象本身是可以修改的。</li>\n</ul>\n<h4 id=\"修饰方法\"><a href=\"#修饰方法\" class=\"headerlink\" title=\"修饰方法\"></a>修饰方法</h4><blockquote>\n<p>声明方法不能被子类重写。</p>\n</blockquote>\n<p>其中，<strong>private方法隐式的被指定为final</strong>。如果在子类中定义的方法和父类中的一个private方法相同，则视为子类中定义了一个新方法。</p>\n<h4 id=\"修饰类\"><a href=\"#修饰类\" class=\"headerlink\" title=\"修饰类\"></a>修饰类</h4><blockquote>\n<p>声明类不能被继承</p>\n</blockquote>\n<h3 id=\"static——（静态）\"><a href=\"#static——（静态）\" class=\"headerlink\" title=\"static——（静态）\"></a>static——（静态）</h3><h4 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h4><blockquote>\n<p>又称为类变量，类所有的实例都共享静态变量，可以直接通过类名来访问它（<em>只依赖于类存在，不依赖于对象实例存在</em>）。</p>\n<p>静态变量在内存中<strong>只存在一份</strong>，所有的对象实例共享。</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">A</span>() &#123;<br>\t<span class=\"hljs-keyword\">private</span> static <span class=\"hljs-built_in\">int</span> x;\t<span class=\"hljs-comment\">// 静态变量</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><blockquote>\n<p>静态方法在类加载的时候就存在了，它<strong>不依赖于任何实例</strong>。所以静态方法<strong>必须有实现</strong>，也就是说它不能是抽象方法。</p>\n<p>同时，静态方法<em>只能访问所属类的静态字段和静态方法</em>。</p>\n<p>main方法就是静态方法</p>\n</blockquote>\n<p><strong>方法中不能有this和super关键字</strong>（这两个关键字与具体对象关联，而静态方法是不依赖于实例的）</p>\n<h4 id=\"静态语句块\"><a href=\"#静态语句块\" class=\"headerlink\" title=\"静态语句块\"></a>静态语句块</h4><blockquote>\n<p>只在类第一次被加载时调用（程序运行期间，这段代码只运行一次）</p>\n<p>执行顺序：static块 &gt; 普通匿名块 &gt; 构造函数</p>\n</blockquote>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">test</span> &#123;</span><br>    static &#123;<br>        System.out.println(<span class=\"hljs-string\">\"gg\"</span>);<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>    &#125;<br>&#125;<br>/<span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span><span class=\"hljs-regexp\">//</span> <br>gg<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"静态内部类（使用的很少）\"><a href=\"#静态内部类（使用的很少）\" class=\"headerlink\" title=\"静态内部类（使用的很少）\"></a>静态内部类（使用的很少）</h4><p>非静态内部类依赖于外部类的实例，也就是说需要先创建外部类实例，才能用这个实例去创建非静态内部类。而静态内部类不需要。静态内部类不能访问外部类的非静态的变量和方法。</p>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><h3 id=\"package关键字\"><a href=\"#package关键字\" class=\"headerlink\" title=\"package关键字\"></a>package关键字</h3><blockquote>\n<p>package包与C++中的<code>namespace</code>类似</p>\n<p>Java中常用域名倒序的方法来定义包名，一个Java源文件中只能有一个package语句</p>\n</blockquote>\n<h3 id=\"import关键字\"><a href=\"#import关键字\" class=\"headerlink\" title=\"import关键字\"></a>import关键字</h3><blockquote>\n<p>用于引入Java不同包中的类，放置在<code>package</code>之后，类定义之前</p>\n</blockquote>\n<h3 id=\"jar文件\"><a href=\"#jar文件\" class=\"headerlink\" title=\"jar文件\"></a>jar文件</h3><blockquote>\n<p>jar文件是一组class文件的压缩包，易于传播（其中可以包含很多Java类），且能够有效保护源码（其中不包含.java文件）</p>\n<p>可以利用IDE打包jar文件，也可以使用<code>jar.exe</code>命令进行打包</p>\n</blockquote>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></p>\n<p>《Java核心技术卷1》</p>\n<p>mooc华东师范大学Java核心技术课程</p>\n</blockquote>\n"},{"title":"Java：反射","date":"2021-01-27T09:26:30.000Z","fileName":"Java-reflection","_content":"\n# 反射的基本概念\n\n## 反射（reflective）\n\n程序可以访问、检测和修改它本身状态和行为的能力（自描述和自控制），称为反射，在`java.lang.reflect`包中。\n\n即在运行时加载、探知和使用编译期间完全未知的类，能够**增加动态语言特性，弥补强动态语言的不足**\n\n注：直观来说就是可以将类名以字符串形式传入，从而达到动态修改程序的目的\n\n## 反射机制的作用\n\n- 在运行时分析类的能力\n- 在运行时查看和操作对象（比如编写一个适用于所有类的toString方法）\n- 实现泛型数组操作代码\n- 利用Method对象（类似于C++中的函数指针）\n\n## 创建对象的方法\n\n### 方法1：静态编译\n\n即传统的使用`new`关键字创建对象\n\n```\nA a = new A();\n```\n\n\n\n### 方法2：克隆\n\n即实现`Cloneable`接口，直接拷贝内存中的相关信息，不再调用构造函数\n\n```\nclass A implements Cloneable {\n\n}\n\nA a1 = new A();\nA a2 = (A) a1.clone();\n```\n\n\n\n### 方法3：反射\n\n使用反射直接构建类对象\n\n```\nA a = (A) Class.forName(\"A\").newInstance();\n```\n\n使用构造器构造类对象\n\n```\nConstructor<A> constructor = A.class.getConstructor();\nA a = constructor.newInstance();\n```\n\n\n\n\n\n# 反射的关键类与方法\n\n## Class类\n\n在Java程序运行时，JVM为每个对象维护一个*运行时类型标识*，该信息追踪每个对象所属的类，而JVM则利用该信息选择要执行的正确的方法。\n\n> 可以使用`Class`类访问这些信息，而Object类中的`getClass()`方法则会返回一个Class类型的实例\n\n## Class类的获取\n\n*Class类实际上是一个泛型类，`A.class`的类型是`Class<A>`*，主要有以下三种获取Class类对象的方法\n\n### 使用`getClass()`方法\n\n```\nString s = \"123\";\nClass c = s.getClass();\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n### 使用`forName()`方法\n\n若类名保存在一个字符串中，即可以使用该方法。使用该方法时必须提供一个异常处理器（用于应对输入字符串不是一个类的情况）\n\n```\nClass c = Class.forName(\"java.lang.String\");\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n### 使用`.class`\n\n```\nClass c = String.class;\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n\n\n## Class类中常用方法\n\n```\n// 获取Target类的class对象\nClass c = Target.class;\n```\n\n### 成员变量（Field）\n\n> 在运行时获取到类的所有成员变量，还可以给成员变量赋值和获取成员变量的值。\n\n#### 获取成员变量\n\n```\n// 获取所有public修饰的成员变量\nField[] fields1 = c.getFields();\n\n// 获取所有声明的成员变量\nField[] fields2 = c.getDeclaredFields();\t\n\n// 获取变量名为value1的变量\nField field3 = c.getField(\"value1\");\nField field4 = c.getDeclaredField(\"value1\");\n```\n\n#### 获取变量类型\n\n```\nObject fieldType = field3.getType();\n```\n\n#### 成员变量赋值与取值\n\n> 使用`Field`中的`set`与`get`方法\n\n```\nTarget t = new Target();\t// 获取target对象\nObject value = filed3.get(t);\t// 传入对象，获取成员变量值\nfield3.setAccessible(true);\t// 为了对类中的参数进行修改取消安全检查（针对私有变量）\nfield3.set(t, 1)\t// 将该值设置成1\n```\n\n### 成员方法（Method）\n\n#### 获取成员方法\n\n> 获取方法数组无法获取到继承父类的方法\n\n```\n// 获取所有public修饰的方法\nMethod[] methods = c.getMethods();\t\n\n// 获取所有声明的成员方法\nMethod[] methods1 = c.getDeclaredMethods();\n\n// 获取无参的method方法\nMethod method = birdClass.getMethod(\"method\", null);\n\n// 获取参数为指定类型的method方法\nMethod method1 = birdClass.getDeclaredMethod(\"method\", new Class[]{int.class});\n```\n\n#### 获取方法参数与与返回类型\n\n```\n// 获取参数列表\nClass[] parameterTypes = method.getParameterTypes();\n\n// 获取返回类型\nClass returnType = method.getReturnType();\n```\n\n#### invoke()方法\n\n> 只要通过反射获取到方法名之后，就可以使用`invoke()`调用对应的方法\n>\n> 参数1为调用方法的对象，参数2而调用方法的参数\n>\n> 当调用static方法时，参数1为null\n\n```\nTarget t = new Target();\t// 获取target对象\nmethod.invoke(t, “123”);\t// 调用method方法，传入参数“123”\n```\n\n\n\n### 构造方法（Constructor）\n\n```\nConstructor[] constructors = c.getConstructors();\n```\n\n\n\n其他获取父接口等等暂略\n\n\n\n## 应用举例\n\n\n\n\n\n# 反射的应用举例\n\n暂略\n\n\n\n\n\n> 参考：\n>\n> 《Java核心技术卷1》\n>\n> MOOC华东师范大学Java核心技术课程\n>\n> https://zhuanlan.zhihu.com/p/80519709","source":"_posts/编程相关/Java/Java基础/10、Java：反射.md","raw":"---\ntitle: Java：反射\ndate: 2021-01-27 17:26:30\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: Java-reflection\n---\n\n# 反射的基本概念\n\n## 反射（reflective）\n\n程序可以访问、检测和修改它本身状态和行为的能力（自描述和自控制），称为反射，在`java.lang.reflect`包中。\n\n即在运行时加载、探知和使用编译期间完全未知的类，能够**增加动态语言特性，弥补强动态语言的不足**\n\n注：直观来说就是可以将类名以字符串形式传入，从而达到动态修改程序的目的\n\n## 反射机制的作用\n\n- 在运行时分析类的能力\n- 在运行时查看和操作对象（比如编写一个适用于所有类的toString方法）\n- 实现泛型数组操作代码\n- 利用Method对象（类似于C++中的函数指针）\n\n## 创建对象的方法\n\n### 方法1：静态编译\n\n即传统的使用`new`关键字创建对象\n\n```\nA a = new A();\n```\n\n\n\n### 方法2：克隆\n\n即实现`Cloneable`接口，直接拷贝内存中的相关信息，不再调用构造函数\n\n```\nclass A implements Cloneable {\n\n}\n\nA a1 = new A();\nA a2 = (A) a1.clone();\n```\n\n\n\n### 方法3：反射\n\n使用反射直接构建类对象\n\n```\nA a = (A) Class.forName(\"A\").newInstance();\n```\n\n使用构造器构造类对象\n\n```\nConstructor<A> constructor = A.class.getConstructor();\nA a = constructor.newInstance();\n```\n\n\n\n\n\n# 反射的关键类与方法\n\n## Class类\n\n在Java程序运行时，JVM为每个对象维护一个*运行时类型标识*，该信息追踪每个对象所属的类，而JVM则利用该信息选择要执行的正确的方法。\n\n> 可以使用`Class`类访问这些信息，而Object类中的`getClass()`方法则会返回一个Class类型的实例\n\n## Class类的获取\n\n*Class类实际上是一个泛型类，`A.class`的类型是`Class<A>`*，主要有以下三种获取Class类对象的方法\n\n### 使用`getClass()`方法\n\n```\nString s = \"123\";\nClass c = s.getClass();\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n### 使用`forName()`方法\n\n若类名保存在一个字符串中，即可以使用该方法。使用该方法时必须提供一个异常处理器（用于应对输入字符串不是一个类的情况）\n\n```\nClass c = Class.forName(\"java.lang.String\");\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n### 使用`.class`\n\n```\nClass c = String.class;\nSystem.out.println(c.getName()); # java.lang.String\n```\n\n\n\n## Class类中常用方法\n\n```\n// 获取Target类的class对象\nClass c = Target.class;\n```\n\n### 成员变量（Field）\n\n> 在运行时获取到类的所有成员变量，还可以给成员变量赋值和获取成员变量的值。\n\n#### 获取成员变量\n\n```\n// 获取所有public修饰的成员变量\nField[] fields1 = c.getFields();\n\n// 获取所有声明的成员变量\nField[] fields2 = c.getDeclaredFields();\t\n\n// 获取变量名为value1的变量\nField field3 = c.getField(\"value1\");\nField field4 = c.getDeclaredField(\"value1\");\n```\n\n#### 获取变量类型\n\n```\nObject fieldType = field3.getType();\n```\n\n#### 成员变量赋值与取值\n\n> 使用`Field`中的`set`与`get`方法\n\n```\nTarget t = new Target();\t// 获取target对象\nObject value = filed3.get(t);\t// 传入对象，获取成员变量值\nfield3.setAccessible(true);\t// 为了对类中的参数进行修改取消安全检查（针对私有变量）\nfield3.set(t, 1)\t// 将该值设置成1\n```\n\n### 成员方法（Method）\n\n#### 获取成员方法\n\n> 获取方法数组无法获取到继承父类的方法\n\n```\n// 获取所有public修饰的方法\nMethod[] methods = c.getMethods();\t\n\n// 获取所有声明的成员方法\nMethod[] methods1 = c.getDeclaredMethods();\n\n// 获取无参的method方法\nMethod method = birdClass.getMethod(\"method\", null);\n\n// 获取参数为指定类型的method方法\nMethod method1 = birdClass.getDeclaredMethod(\"method\", new Class[]{int.class});\n```\n\n#### 获取方法参数与与返回类型\n\n```\n// 获取参数列表\nClass[] parameterTypes = method.getParameterTypes();\n\n// 获取返回类型\nClass returnType = method.getReturnType();\n```\n\n#### invoke()方法\n\n> 只要通过反射获取到方法名之后，就可以使用`invoke()`调用对应的方法\n>\n> 参数1为调用方法的对象，参数2而调用方法的参数\n>\n> 当调用static方法时，参数1为null\n\n```\nTarget t = new Target();\t// 获取target对象\nmethod.invoke(t, “123”);\t// 调用method方法，传入参数“123”\n```\n\n\n\n### 构造方法（Constructor）\n\n```\nConstructor[] constructors = c.getConstructors();\n```\n\n\n\n其他获取父接口等等暂略\n\n\n\n## 应用举例\n\n\n\n\n\n# 反射的应用举例\n\n暂略\n\n\n\n\n\n> 参考：\n>\n> 《Java核心技术卷1》\n>\n> MOOC华东师范大学Java核心技术课程\n>\n> https://zhuanlan.zhihu.com/p/80519709","slug":"编程相关/Java/Java基础/10、Java：反射","published":1,"updated":"2021-02-28T06:45:35.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqb001x8sjs4u0s9u6j","content":"<h1 id=\"反射的基本概念\"><a href=\"#反射的基本概念\" class=\"headerlink\" title=\"反射的基本概念\"></a>反射的基本概念</h1><h2 id=\"反射（reflective）\"><a href=\"#反射（reflective）\" class=\"headerlink\" title=\"反射（reflective）\"></a>反射（reflective）</h2><p>程序可以访问、检测和修改它本身状态和行为的能力（自描述和自控制），称为反射，在<code>java.lang.reflect</code>包中。</p>\n<p>即在运行时加载、探知和使用编译期间完全未知的类，能够<strong>增加动态语言特性，弥补强动态语言的不足</strong></p>\n<p>注：直观来说就是可以将类名以字符串形式传入，从而达到动态修改程序的目的</p>\n<h2 id=\"反射机制的作用\"><a href=\"#反射机制的作用\" class=\"headerlink\" title=\"反射机制的作用\"></a>反射机制的作用</h2><ul>\n<li>在运行时分析类的能力</li>\n<li>在运行时查看和操作对象（比如编写一个适用于所有类的toString方法）</li>\n<li>实现泛型数组操作代码</li>\n<li>利用Method对象（类似于C++中的函数指针）</li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"方法1：静态编译\"><a href=\"#方法1：静态编译\" class=\"headerlink\" title=\"方法1：静态编译\"></a>方法1：静态编译</h3><p>即传统的使用<code>new</code>关键字创建对象</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-keyword\">A</span> a = new <span class=\"hljs-keyword\">A</span>()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法2：克隆\"><a href=\"#方法2：克隆\" class=\"headerlink\" title=\"方法2：克隆\"></a>方法2：克隆</h3><p>即实现<code>Cloneable</code>接口，直接拷贝内存中的相关信息，不再调用构造函数</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">Cloneable</span></span> </span>&#123;<br><br>&#125;<br><br>A a1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">A</span>();<br>A a2 = (A) a1.clone();<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法3：反射\"><a href=\"#方法3：反射\" class=\"headerlink\" title=\"方法3：反射\"></a>方法3：反射</h3><p>使用反射直接构建类对象</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">A a = (A) <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Class</span>.</span></span>for<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">\"A\"</span>)</span>.<span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Instance()</span>;<br></code></pre></td></tr></table></figure>\n\n<p>使用构造器构造类对象</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">Constructor</span>&lt;<span class=\"hljs-title\">A</span>&gt; <span class=\"hljs-title\">constructor</span> = <span class=\"hljs-title\">A</span>.<span class=\"hljs-title\">class</span>.<span class=\"hljs-title\">getConstructor</span><span class=\"hljs-params\">()</span>;</span><br>A a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>.<span class=\"hljs-title\">newInstance</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"反射的关键类与方法\"><a href=\"#反射的关键类与方法\" class=\"headerlink\" title=\"反射的关键类与方法\"></a>反射的关键类与方法</h1><h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p>在Java程序运行时，JVM为每个对象维护一个<em>运行时类型标识</em>，该信息追踪每个对象所属的类，而JVM则利用该信息选择要执行的正确的方法。</p>\n<blockquote>\n<p>可以使用<code>Class</code>类访问这些信息，而Object类中的<code>getClass()</code>方法则会返回一个Class类型的实例</p>\n</blockquote>\n<h2 id=\"Class类的获取\"><a href=\"#Class类的获取\" class=\"headerlink\" title=\"Class类的获取\"></a>Class类的获取</h2><p><em>Class类实际上是一个泛型类，<code>A.class</code>的类型是<code>Class&lt;A&gt;</code></em>，主要有以下三种获取Class类对象的方法</p>\n<h3 id=\"使用getClass-方法\"><a href=\"#使用getClass-方法\" class=\"headerlink\" title=\"使用getClass()方法\"></a>使用<code>getClass()</code>方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String s = <span class=\"hljs-string\">\"123\"</span>;<br>Class c = s.get<span class=\"hljs-constructor\">Class()</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用forName-方法\"><a href=\"#使用forName-方法\" class=\"headerlink\" title=\"使用forName()方法\"></a>使用<code>forName()</code>方法</h3><p>若类名保存在一个字符串中，即可以使用该方法。使用该方法时必须提供一个异常处理器（用于应对输入字符串不是一个类的情况）</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">Class c = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Class</span>.</span></span>for<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">\"java.lang.String\"</span>)</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用-class\"><a href=\"#使用-class\" class=\"headerlink\" title=\"使用.class\"></a>使用<code>.class</code></h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">Class c = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span><span class=\"hljs-keyword\">class</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Class类中常用方法\"><a href=\"#Class类中常用方法\" class=\"headerlink\" title=\"Class类中常用方法\"></a>Class类中常用方法</h2><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">// 获取<span class=\"hljs-keyword\">Target</span>类的<span class=\"hljs-keyword\">class</span>对象<br><span class=\"hljs-keyword\">Class</span> c = <span class=\"hljs-keyword\">Target</span>.<span class=\"hljs-keyword\">class</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"成员变量（Field）\"><a href=\"#成员变量（Field）\" class=\"headerlink\" title=\"成员变量（Field）\"></a>成员变量（Field）</h3><blockquote>\n<p>在运行时获取到类的所有成员变量，还可以给成员变量赋值和获取成员变量的值。</p>\n</blockquote>\n<h4 id=\"获取成员变量\"><a href=\"#获取成员变量\" class=\"headerlink\" title=\"获取成员变量\"></a>获取成员变量</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs protobuf\"><span class=\"hljs-comment\">// 获取所有public修饰的成员变量</span><br>Field[] fields1 = c.getFields();<br><br><span class=\"hljs-comment\">// 获取所有声明的成员变量</span><br>Field[] fields2 = c.getDeclaredFields();\t<br><br><span class=\"hljs-comment\">// 获取变量名为value1的变量</span><br>Field field3 = c.getField(<span class=\"hljs-string\">\"value1\"</span>);<br>Field field4 = c.getDeclaredField(<span class=\"hljs-string\">\"value1\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取变量类型\"><a href=\"#获取变量类型\" class=\"headerlink\" title=\"获取变量类型\"></a>获取变量类型</h4><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-built_in\">Object</span> fieldType = field3.<span class=\"hljs-built_in\">getType</span>();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"成员变量赋值与取值\"><a href=\"#成员变量赋值与取值\" class=\"headerlink\" title=\"成员变量赋值与取值\"></a>成员变量赋值与取值</h4><blockquote>\n<p>使用<code>Field</code>中的<code>set</code>与<code>get</code>方法</p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\">Target t = <span class=\"hljs-keyword\">new</span> Target();\t<span class=\"hljs-comment\">// 获取target对象</span><br>Object <span class=\"hljs-keyword\">value</span> = filed3.<span class=\"hljs-keyword\">get</span>(t);\t<span class=\"hljs-comment\">// 传入对象，获取成员变量值</span><br>field3.setAccessible(<span class=\"hljs-literal\">true</span>);\t<span class=\"hljs-comment\">// 为了对类中的参数进行修改取消安全检查（针对私有变量）</span><br>field3.<span class=\"hljs-keyword\">set</span>(t, <span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// 将该值设置成1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"成员方法（Method）\"><a href=\"#成员方法（Method）\" class=\"headerlink\" title=\"成员方法（Method）\"></a>成员方法（Method）</h3><h4 id=\"获取成员方法\"><a href=\"#获取成员方法\" class=\"headerlink\" title=\"获取成员方法\"></a>获取成员方法</h4><blockquote>\n<p>获取方法数组无法获取到继承父类的方法</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-comment\">// 获取所有public修饰的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>[] <span class=\"hljs-title\">methods</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getMethods</span><span class=\"hljs-params\">()</span>;</span>\t<br><br><span class=\"hljs-comment\">// 获取所有声明的成员方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>[] <span class=\"hljs-title\">methods1</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getDeclaredMethods</span><span class=\"hljs-params\">()</span>;</span><br><br><span class=\"hljs-comment\">// 获取无参的method方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span> <span class=\"hljs-title\">method</span> = <span class=\"hljs-title\">birdClass</span>.<span class=\"hljs-title\">getMethod</span><span class=\"hljs-params\">(\"<span class=\"hljs-keyword\">method</span>\", null)</span>;</span><br><br><span class=\"hljs-comment\">// 获取参数为指定类型的method方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span> <span class=\"hljs-title\">method1</span> = <span class=\"hljs-title\">birdClass</span>.<span class=\"hljs-title\">getDeclaredMethod</span><span class=\"hljs-params\">(\"<span class=\"hljs-keyword\">method</span>\", <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Class</span>[]&#123;int.<span class=\"hljs-keyword\">class</span>&#125;)</span>;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法参数与与返回类型\"><a href=\"#获取方法参数与与返回类型\" class=\"headerlink\" title=\"获取方法参数与与返回类型\"></a>获取方法参数与与返回类型</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-comment\">// 获取参数列表</span><br><span class=\"hljs-keyword\">Class</span>[] parameterTypes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">getParameterTypes</span><span class=\"hljs-params\">()</span>;</span><br><br><span class=\"hljs-comment\">// 获取返回类型</span><br><span class=\"hljs-keyword\">Class</span> returnType = <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">getReturnType</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"invoke-方法\"><a href=\"#invoke-方法\" class=\"headerlink\" title=\"invoke()方法\"></a>invoke()方法</h4><blockquote>\n<p>只要通过反射获取到方法名之后，就可以使用<code>invoke()</code>调用对应的方法</p>\n<p>参数1为调用方法的对象，参数2而调用方法的参数</p>\n<p>当调用static方法时，参数1为null</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">Target t = <span class=\"hljs-keyword\">new</span> Target();\t<span class=\"hljs-comment\">// 获取target对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(t, “123”)</span>;</span>\t<span class=\"hljs-comment\">// 调用method方法，传入参数“123”</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"构造方法（Constructor）\"><a href=\"#构造方法（Constructor）\" class=\"headerlink\" title=\"构造方法（Constructor）\"></a>构造方法（Constructor）</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">Constructor</span>[] <span class=\"hljs-title\">constructors</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getConstructors</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>其他获取父接口等等暂略</p>\n<h2 id=\"应用举例\"><a href=\"#应用举例\" class=\"headerlink\" title=\"应用举例\"></a>应用举例</h2><h1 id=\"反射的应用举例\"><a href=\"#反射的应用举例\" class=\"headerlink\" title=\"反射的应用举例\"></a>反射的应用举例</h1><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p>《Java核心技术卷1》</p>\n<p>MOOC华东师范大学Java核心技术课程</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/80519709\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/80519709</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"反射的基本概念\"><a href=\"#反射的基本概念\" class=\"headerlink\" title=\"反射的基本概念\"></a>反射的基本概念</h1><h2 id=\"反射（reflective）\"><a href=\"#反射（reflective）\" class=\"headerlink\" title=\"反射（reflective）\"></a>反射（reflective）</h2><p>程序可以访问、检测和修改它本身状态和行为的能力（自描述和自控制），称为反射，在<code>java.lang.reflect</code>包中。</p>\n<p>即在运行时加载、探知和使用编译期间完全未知的类，能够<strong>增加动态语言特性，弥补强动态语言的不足</strong></p>\n<p>注：直观来说就是可以将类名以字符串形式传入，从而达到动态修改程序的目的</p>\n<h2 id=\"反射机制的作用\"><a href=\"#反射机制的作用\" class=\"headerlink\" title=\"反射机制的作用\"></a>反射机制的作用</h2><ul>\n<li>在运行时分析类的能力</li>\n<li>在运行时查看和操作对象（比如编写一个适用于所有类的toString方法）</li>\n<li>实现泛型数组操作代码</li>\n<li>利用Method对象（类似于C++中的函数指针）</li>\n</ul>\n<h2 id=\"创建对象的方法\"><a href=\"#创建对象的方法\" class=\"headerlink\" title=\"创建对象的方法\"></a>创建对象的方法</h2><h3 id=\"方法1：静态编译\"><a href=\"#方法1：静态编译\" class=\"headerlink\" title=\"方法1：静态编译\"></a>方法1：静态编译</h3><p>即传统的使用<code>new</code>关键字创建对象</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-keyword\">A</span> a = new <span class=\"hljs-keyword\">A</span>()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法2：克隆\"><a href=\"#方法2：克隆\" class=\"headerlink\" title=\"方法2：克隆\"></a>方法2：克隆</h3><p>即实现<code>Cloneable</code>接口，直接拷贝内存中的相关信息，不再调用构造函数</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">Cloneable</span></span> </span>&#123;<br><br>&#125;<br><br>A a1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">A</span>();<br>A a2 = (A) a1.clone();<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"方法3：反射\"><a href=\"#方法3：反射\" class=\"headerlink\" title=\"方法3：反射\"></a>方法3：反射</h3><p>使用反射直接构建类对象</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">A a = (A) <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Class</span>.</span></span>for<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">\"A\"</span>)</span>.<span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Instance()</span>;<br></code></pre></td></tr></table></figure>\n\n<p>使用构造器构造类对象</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">Constructor</span>&lt;<span class=\"hljs-title\">A</span>&gt; <span class=\"hljs-title\">constructor</span> = <span class=\"hljs-title\">A</span>.<span class=\"hljs-title\">class</span>.<span class=\"hljs-title\">getConstructor</span><span class=\"hljs-params\">()</span>;</span><br>A a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">constructor</span>.<span class=\"hljs-title\">newInstance</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"反射的关键类与方法\"><a href=\"#反射的关键类与方法\" class=\"headerlink\" title=\"反射的关键类与方法\"></a>反射的关键类与方法</h1><h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p>在Java程序运行时，JVM为每个对象维护一个<em>运行时类型标识</em>，该信息追踪每个对象所属的类，而JVM则利用该信息选择要执行的正确的方法。</p>\n<blockquote>\n<p>可以使用<code>Class</code>类访问这些信息，而Object类中的<code>getClass()</code>方法则会返回一个Class类型的实例</p>\n</blockquote>\n<h2 id=\"Class类的获取\"><a href=\"#Class类的获取\" class=\"headerlink\" title=\"Class类的获取\"></a>Class类的获取</h2><p><em>Class类实际上是一个泛型类，<code>A.class</code>的类型是<code>Class&lt;A&gt;</code></em>，主要有以下三种获取Class类对象的方法</p>\n<h3 id=\"使用getClass-方法\"><a href=\"#使用getClass-方法\" class=\"headerlink\" title=\"使用getClass()方法\"></a>使用<code>getClass()</code>方法</h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">String s = <span class=\"hljs-string\">\"123\"</span>;<br>Class c = s.get<span class=\"hljs-constructor\">Class()</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用forName-方法\"><a href=\"#使用forName-方法\" class=\"headerlink\" title=\"使用forName()方法\"></a>使用<code>forName()</code>方法</h3><p>若类名保存在一个字符串中，即可以使用该方法。使用该方法时必须提供一个异常处理器（用于应对输入字符串不是一个类的情况）</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">Class c = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Class</span>.</span></span>for<span class=\"hljs-constructor\">Name(<span class=\"hljs-string\">\"java.lang.String\"</span>)</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用-class\"><a href=\"#使用-class\" class=\"headerlink\" title=\"使用.class\"></a>使用<code>.class</code></h3><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">Class c = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">String</span>.</span></span><span class=\"hljs-keyword\">class</span>;<br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(c.get<span class=\"hljs-constructor\">Name()</span>); # java.lang.String<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Class类中常用方法\"><a href=\"#Class类中常用方法\" class=\"headerlink\" title=\"Class类中常用方法\"></a>Class类中常用方法</h2><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs fortran\">// 获取<span class=\"hljs-keyword\">Target</span>类的<span class=\"hljs-keyword\">class</span>对象<br><span class=\"hljs-keyword\">Class</span> c = <span class=\"hljs-keyword\">Target</span>.<span class=\"hljs-keyword\">class</span>;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"成员变量（Field）\"><a href=\"#成员变量（Field）\" class=\"headerlink\" title=\"成员变量（Field）\"></a>成员变量（Field）</h3><blockquote>\n<p>在运行时获取到类的所有成员变量，还可以给成员变量赋值和获取成员变量的值。</p>\n</blockquote>\n<h4 id=\"获取成员变量\"><a href=\"#获取成员变量\" class=\"headerlink\" title=\"获取成员变量\"></a>获取成员变量</h4><figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs protobuf\"><span class=\"hljs-comment\">// 获取所有public修饰的成员变量</span><br>Field[] fields1 = c.getFields();<br><br><span class=\"hljs-comment\">// 获取所有声明的成员变量</span><br>Field[] fields2 = c.getDeclaredFields();\t<br><br><span class=\"hljs-comment\">// 获取变量名为value1的变量</span><br>Field field3 = c.getField(<span class=\"hljs-string\">\"value1\"</span>);<br>Field field4 = c.getDeclaredField(<span class=\"hljs-string\">\"value1\"</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取变量类型\"><a href=\"#获取变量类型\" class=\"headerlink\" title=\"获取变量类型\"></a>获取变量类型</h4><figure class=\"highlight vbnet\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vbnet\"><span class=\"hljs-built_in\">Object</span> fieldType = field3.<span class=\"hljs-built_in\">getType</span>();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"成员变量赋值与取值\"><a href=\"#成员变量赋值与取值\" class=\"headerlink\" title=\"成员变量赋值与取值\"></a>成员变量赋值与取值</h4><blockquote>\n<p>使用<code>Field</code>中的<code>set</code>与<code>get</code>方法</p>\n</blockquote>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cs\">Target t = <span class=\"hljs-keyword\">new</span> Target();\t<span class=\"hljs-comment\">// 获取target对象</span><br>Object <span class=\"hljs-keyword\">value</span> = filed3.<span class=\"hljs-keyword\">get</span>(t);\t<span class=\"hljs-comment\">// 传入对象，获取成员变量值</span><br>field3.setAccessible(<span class=\"hljs-literal\">true</span>);\t<span class=\"hljs-comment\">// 为了对类中的参数进行修改取消安全检查（针对私有变量）</span><br>field3.<span class=\"hljs-keyword\">set</span>(t, <span class=\"hljs-number\">1</span>)\t<span class=\"hljs-comment\">// 将该值设置成1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"成员方法（Method）\"><a href=\"#成员方法（Method）\" class=\"headerlink\" title=\"成员方法（Method）\"></a>成员方法（Method）</h3><h4 id=\"获取成员方法\"><a href=\"#获取成员方法\" class=\"headerlink\" title=\"获取成员方法\"></a>获取成员方法</h4><blockquote>\n<p>获取方法数组无法获取到继承父类的方法</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-comment\">// 获取所有public修饰的方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>[] <span class=\"hljs-title\">methods</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getMethods</span><span class=\"hljs-params\">()</span>;</span>\t<br><br><span class=\"hljs-comment\">// 获取所有声明的成员方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>[] <span class=\"hljs-title\">methods1</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getDeclaredMethods</span><span class=\"hljs-params\">()</span>;</span><br><br><span class=\"hljs-comment\">// 获取无参的method方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span> <span class=\"hljs-title\">method</span> = <span class=\"hljs-title\">birdClass</span>.<span class=\"hljs-title\">getMethod</span><span class=\"hljs-params\">(\"<span class=\"hljs-keyword\">method</span>\", null)</span>;</span><br><br><span class=\"hljs-comment\">// 获取参数为指定类型的method方法</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span> <span class=\"hljs-title\">method1</span> = <span class=\"hljs-title\">birdClass</span>.<span class=\"hljs-title\">getDeclaredMethod</span><span class=\"hljs-params\">(\"<span class=\"hljs-keyword\">method</span>\", <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">Class</span>[]&#123;int.<span class=\"hljs-keyword\">class</span>&#125;)</span>;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法参数与与返回类型\"><a href=\"#获取方法参数与与返回类型\" class=\"headerlink\" title=\"获取方法参数与与返回类型\"></a>获取方法参数与与返回类型</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-comment\">// 获取参数列表</span><br><span class=\"hljs-keyword\">Class</span>[] parameterTypes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">getParameterTypes</span><span class=\"hljs-params\">()</span>;</span><br><br><span class=\"hljs-comment\">// 获取返回类型</span><br><span class=\"hljs-keyword\">Class</span> returnType = <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">getReturnType</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"invoke-方法\"><a href=\"#invoke-方法\" class=\"headerlink\" title=\"invoke()方法\"></a>invoke()方法</h4><blockquote>\n<p>只要通过反射获取到方法名之后，就可以使用<code>invoke()</code>调用对应的方法</p>\n<p>参数1为调用方法的对象，参数2而调用方法的参数</p>\n<p>当调用static方法时，参数1为null</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">Target t = <span class=\"hljs-keyword\">new</span> Target();\t<span class=\"hljs-comment\">// 获取target对象</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span>.<span class=\"hljs-title\">invoke</span><span class=\"hljs-params\">(t, “123”)</span>;</span>\t<span class=\"hljs-comment\">// 调用method方法，传入参数“123”</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"构造方法（Constructor）\"><a href=\"#构造方法（Constructor）\" class=\"headerlink\" title=\"构造方法（Constructor）\"></a>构造方法（Constructor）</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs delphi\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">Constructor</span>[] <span class=\"hljs-title\">constructors</span> = <span class=\"hljs-title\">c</span>.<span class=\"hljs-title\">getConstructors</span><span class=\"hljs-params\">()</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<p>其他获取父接口等等暂略</p>\n<h2 id=\"应用举例\"><a href=\"#应用举例\" class=\"headerlink\" title=\"应用举例\"></a>应用举例</h2><h1 id=\"反射的应用举例\"><a href=\"#反射的应用举例\" class=\"headerlink\" title=\"反射的应用举例\"></a>反射的应用举例</h1><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p>《Java核心技术卷1》</p>\n<p>MOOC华东师范大学Java核心技术课程</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/80519709\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/80519709</a></p>\n</blockquote>\n"},{"title":"Java：数据类型与运算符","date":"2021-01-23T09:08:17.000Z","fileName":"java-datatype-operator","_content":"\n## 数据类型\n\n### 8种基本数据类型\n\n> Java有8中基本数据类型\n\n* 数字类型（byte<1>、short<2>、int<4>、long<8>、float<4>、double<8>）；\n\n* 字符类型（char<2>）；\n\n* 布尔型（boolean<依赖于JVM的具体实现>）\n\n（其中<>内为其所对应的字节数，每个基本数据类型又有对应的默认值，其中**数据类型的基本都是0**）\n\n> 数字类型中前四种使用了*常量池*技术，而后两种没实现，具体的影响见下一节中的案例部分\n\n### 数据类型的转换\n\n#### 转换规律\n\n> 基本按照常识即可判断无精度损失\n>\n> 需要注意的是int转float、long转float、long转double是有可能出现精度损失的\n>\n> 当使用*二元运算符*连接两个操作数时，先判断有没有`double`，再判断有没有`float`，再判断有没有`long`，判断有则结果就为对应类型，否则为`int`。\n\n#### 强制类型转换\n\n> 有信息损失的通常需要进行强制转换\n\n```\ndouble x = 3.14;\nint x = (int) x;\t// double强制转换为int\n```\n\n### 常量\n\n> 使用`final`修饰的为常量，使用`static final`修饰的为类常量\n>\n> 常量名通常全大写\n\n\n\n## 装箱与拆箱\n\n参考：https://www.cnblogs.com/dolphin0520/p/3780005.html\n\n> Java为每种基本数据类型都提供了对应的**包装器类型**，将基本数据类型转换成包装类称为**装箱**，反之则称为**拆箱**。\n\n### 装箱\n\n> 装箱：基本数据类型——>包装类\n>\n> 其中第一种方法不会触发自动装箱的机制，在执行效率和资源占用上，第二种方法通常要优于第一种情况。\n\n```\nInteger i = new Integer(10);\t// 手动装箱\nInteger i = 10;\t// 自动装箱\n```\n\n### 拆箱\n\n> 拆箱：包装类——>基本数据类型\n>\n> 直接进行赋值语句即可，同时如“+”、“-”等常规数值运算符会触发自动拆箱\n\n```\nint i2 = i;\n```\n\n### 装箱与拆箱的实现\n\n**装箱过程是通过调用包装器的`valueOf()`方法实现的**\n\n**拆箱过程是通过调用包装器的 xxxValue方法实现的（xxx代表对应的基本数据类型）**\n\nJava源码：\n\n```\npublic static void main(String[] args) {\n\tInteger a = 1;\n\tint b = a + 1;\n}\n```\n\n反编译后结果：\n\n![](http://cdn.ziyedy.top/2%E3%80%81Java%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%8F%8D%E7%BC%96%E8%AF%91.png)\n\n### valueOf方法\n\n#### 源码分析\n\n> 以`Integer`为例，源码如下，可见\n>\n> 若数值在**[-128,127]**之间，便返回`IntegerCache.cache`中已存在的对象的引用，否则创建一个新的`Integer`对象\n\n```\npublic static Integer valueOf(int i) {\n\tif (i >= IntegerCache.low && i <= IntegerCache.high)\n\t\treturn IntegerCache.cache[i + (-IntegerCache.low)];\n\treturn new Integer(i);\n}\n```\n\n> 因此：\n>\n> * `Integer a = 0;`会直接使用常量池中的对象\n> * `Integer b = new Integer(0);`会创建新的对象\n>\n> 所以若输出`a == b`，会输出false\n\n#### 问题案例\n\n1、常量池相关问题\n\n```\nInteger i1 = 100;\nInteger i2 = 100;\n\nInteger i3 = 200;\nInteger i4 = 200;\n\nSystem.out.println(i1==i2);\nSystem.out.println(i3==i4);\n\n####################################\ntrue\nfalse\n```\n\n> Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的（**这些方法实现了常量池技术**），而Double、Float的valueOf方法的实现是类似的（**这些方法没有使用常量池技术**）。因此，上述代码若换成Double，会输出“false false”，换成Boolean会输出“true true”。\n\n2、算数运算符相关问题\n\n> 如果这些包装类使用了算数运算符，那么“==”比较的将会是数值（即触发了自动拆箱），如下：\n\n```\nInteger a = 1;\nInteger b = 2;\nInteger c = 3;\nSystem.out.println(c==(a+b));\t// 实际比较的是数值 3 == 3 为true\n\n#########################################\ntrue\n```\n\n***\n\n> 对于包装器类型，equals方法并不会进行类型转换，如下：\n\n```\nInteger a = 1;\nInteger b = 2;\n\nLong c = 3L;\nLong d = 2L;\n\nSystem.out.println(c==a+b);\nSystem.out.println(c.equals(a+b));\nSystem.out.println(c.equals(a+d));\n\n###########################################\ntrue\nfalse\ntrue\n```\n\n\n\n\n\n## 数组\n\n\n\n\n\n## 枚举\n\n\n\n\n\n## 相关常见问题\n\n\n\n\n\n\n\n> 参考：\n>\n> https://www.cnblogs.com/dolphin0520/p/3780005.html","source":"_posts/编程相关/Java/Java基础/2、Java：数据类型与运算符.md","raw":"---\ntitle: Java：数据类型与运算符\ndate: 2021-01-23 17:08:17\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-datatype-operator\n---\n\n## 数据类型\n\n### 8种基本数据类型\n\n> Java有8中基本数据类型\n\n* 数字类型（byte<1>、short<2>、int<4>、long<8>、float<4>、double<8>）；\n\n* 字符类型（char<2>）；\n\n* 布尔型（boolean<依赖于JVM的具体实现>）\n\n（其中<>内为其所对应的字节数，每个基本数据类型又有对应的默认值，其中**数据类型的基本都是0**）\n\n> 数字类型中前四种使用了*常量池*技术，而后两种没实现，具体的影响见下一节中的案例部分\n\n### 数据类型的转换\n\n#### 转换规律\n\n> 基本按照常识即可判断无精度损失\n>\n> 需要注意的是int转float、long转float、long转double是有可能出现精度损失的\n>\n> 当使用*二元运算符*连接两个操作数时，先判断有没有`double`，再判断有没有`float`，再判断有没有`long`，判断有则结果就为对应类型，否则为`int`。\n\n#### 强制类型转换\n\n> 有信息损失的通常需要进行强制转换\n\n```\ndouble x = 3.14;\nint x = (int) x;\t// double强制转换为int\n```\n\n### 常量\n\n> 使用`final`修饰的为常量，使用`static final`修饰的为类常量\n>\n> 常量名通常全大写\n\n\n\n## 装箱与拆箱\n\n参考：https://www.cnblogs.com/dolphin0520/p/3780005.html\n\n> Java为每种基本数据类型都提供了对应的**包装器类型**，将基本数据类型转换成包装类称为**装箱**，反之则称为**拆箱**。\n\n### 装箱\n\n> 装箱：基本数据类型——>包装类\n>\n> 其中第一种方法不会触发自动装箱的机制，在执行效率和资源占用上，第二种方法通常要优于第一种情况。\n\n```\nInteger i = new Integer(10);\t// 手动装箱\nInteger i = 10;\t// 自动装箱\n```\n\n### 拆箱\n\n> 拆箱：包装类——>基本数据类型\n>\n> 直接进行赋值语句即可，同时如“+”、“-”等常规数值运算符会触发自动拆箱\n\n```\nint i2 = i;\n```\n\n### 装箱与拆箱的实现\n\n**装箱过程是通过调用包装器的`valueOf()`方法实现的**\n\n**拆箱过程是通过调用包装器的 xxxValue方法实现的（xxx代表对应的基本数据类型）**\n\nJava源码：\n\n```\npublic static void main(String[] args) {\n\tInteger a = 1;\n\tint b = a + 1;\n}\n```\n\n反编译后结果：\n\n![](http://cdn.ziyedy.top/2%E3%80%81Java%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%8F%8D%E7%BC%96%E8%AF%91.png)\n\n### valueOf方法\n\n#### 源码分析\n\n> 以`Integer`为例，源码如下，可见\n>\n> 若数值在**[-128,127]**之间，便返回`IntegerCache.cache`中已存在的对象的引用，否则创建一个新的`Integer`对象\n\n```\npublic static Integer valueOf(int i) {\n\tif (i >= IntegerCache.low && i <= IntegerCache.high)\n\t\treturn IntegerCache.cache[i + (-IntegerCache.low)];\n\treturn new Integer(i);\n}\n```\n\n> 因此：\n>\n> * `Integer a = 0;`会直接使用常量池中的对象\n> * `Integer b = new Integer(0);`会创建新的对象\n>\n> 所以若输出`a == b`，会输出false\n\n#### 问题案例\n\n1、常量池相关问题\n\n```\nInteger i1 = 100;\nInteger i2 = 100;\n\nInteger i3 = 200;\nInteger i4 = 200;\n\nSystem.out.println(i1==i2);\nSystem.out.println(i3==i4);\n\n####################################\ntrue\nfalse\n```\n\n> Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的（**这些方法实现了常量池技术**），而Double、Float的valueOf方法的实现是类似的（**这些方法没有使用常量池技术**）。因此，上述代码若换成Double，会输出“false false”，换成Boolean会输出“true true”。\n\n2、算数运算符相关问题\n\n> 如果这些包装类使用了算数运算符，那么“==”比较的将会是数值（即触发了自动拆箱），如下：\n\n```\nInteger a = 1;\nInteger b = 2;\nInteger c = 3;\nSystem.out.println(c==(a+b));\t// 实际比较的是数值 3 == 3 为true\n\n#########################################\ntrue\n```\n\n***\n\n> 对于包装器类型，equals方法并不会进行类型转换，如下：\n\n```\nInteger a = 1;\nInteger b = 2;\n\nLong c = 3L;\nLong d = 2L;\n\nSystem.out.println(c==a+b);\nSystem.out.println(c.equals(a+b));\nSystem.out.println(c.equals(a+d));\n\n###########################################\ntrue\nfalse\ntrue\n```\n\n\n\n\n\n## 数组\n\n\n\n\n\n## 枚举\n\n\n\n\n\n## 相关常见问题\n\n\n\n\n\n\n\n> 参考：\n>\n> https://www.cnblogs.com/dolphin0520/p/3780005.html","slug":"编程相关/Java/Java基础/2、Java：数据类型与运算符","published":1,"updated":"2021-02-28T12:39:39.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqd00218sjs7d8a3ewl","content":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"8种基本数据类型\"><a href=\"#8种基本数据类型\" class=\"headerlink\" title=\"8种基本数据类型\"></a>8种基本数据类型</h3><blockquote>\n<p>Java有8中基本数据类型</p>\n</blockquote>\n<ul>\n<li><p>数字类型（byte&lt;1&gt;、short&lt;2&gt;、int&lt;4&gt;、long&lt;8&gt;、float&lt;4&gt;、double&lt;8&gt;）；</p>\n</li>\n<li><p>字符类型（char&lt;2&gt;）；</p>\n</li>\n<li><p>布尔型（boolean&lt;依赖于JVM的具体实现&gt;）</p>\n</li>\n</ul>\n<p>（其中&lt;&gt;内为其所对应的字节数，每个基本数据类型又有对应的默认值，其中<strong>数据类型的基本都是0</strong>）</p>\n<blockquote>\n<p>数字类型中前四种使用了<em>常量池</em>技术，而后两种没实现，具体的影响见下一节中的案例部分</p>\n</blockquote>\n<h3 id=\"数据类型的转换\"><a href=\"#数据类型的转换\" class=\"headerlink\" title=\"数据类型的转换\"></a>数据类型的转换</h3><h4 id=\"转换规律\"><a href=\"#转换规律\" class=\"headerlink\" title=\"转换规律\"></a>转换规律</h4><blockquote>\n<p>基本按照常识即可判断无精度损失</p>\n<p>需要注意的是int转float、long转float、long转double是有可能出现精度损失的</p>\n<p>当使用<em>二元运算符</em>连接两个操作数时，先判断有没有<code>double</code>，再判断有没有<code>float</code>，再判断有没有<code>long</code>，判断有则结果就为对应类型，否则为<code>int</code>。</p>\n</blockquote>\n<h4 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h4><blockquote>\n<p>有信息损失的通常需要进行强制转换</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">double</span> x = <span class=\"hljs-number\">3.14</span>;<br><span class=\"hljs-built_in\">int</span> x = (<span class=\"hljs-built_in\">int</span>) x;\t<span class=\"hljs-comment\">// double强制转换为int</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><blockquote>\n<p>使用<code>final</code>修饰的为常量，使用<code>static final</code>修饰的为类常量</p>\n<p>常量名通常全大写</p>\n</blockquote>\n<h2 id=\"装箱与拆箱\"><a href=\"#装箱与拆箱\" class=\"headerlink\" title=\"装箱与拆箱\"></a>装箱与拆箱</h2><p>参考：<a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphin0520/p/3780005.html</a></p>\n<blockquote>\n<p>Java为每种基本数据类型都提供了对应的<strong>包装器类型</strong>，将基本数据类型转换成包装类称为<strong>装箱</strong>，反之则称为<strong>拆箱</strong>。</p>\n</blockquote>\n<h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱：基本数据类型——&gt;包装类</p>\n<p>其中第一种方法不会触发自动装箱的机制，在执行效率和资源占用上，第二种方法通常要优于第一种情况。</p>\n</blockquote>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-built_in\">Integer</span> i = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Integer</span>(<span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// 手动装箱</span><br><span class=\"hljs-built_in\">Integer</span> i = <span class=\"hljs-number\">10</span>;\t<span class=\"hljs-comment\">// 自动装箱</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>拆箱：包装类——&gt;基本数据类型</p>\n<p>直接进行赋值语句即可，同时如“+”、“-”等常规数值运算符会触发自动拆箱</p>\n</blockquote>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">int i2 = i<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"装箱与拆箱的实现\"><a href=\"#装箱与拆箱的实现\" class=\"headerlink\" title=\"装箱与拆箱的实现\"></a>装箱与拆箱的实现</h3><p><strong>装箱过程是通过调用包装器的<code>valueOf()</code>方法实现的</strong></p>\n<p><strong>拆箱过程是通过调用包装器的 xxxValue方法实现的（xxx代表对应的基本数据类型）</strong></p>\n<p>Java源码：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>\tInteger a = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-keyword\">int</span> b = a + <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反编译后结果：</p>\n<p><img src=\"http://cdn.ziyedy.top/2%E3%80%81Java%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%8F%8D%E7%BC%96%E8%AF%91.png\" alt=\"\"></p>\n<h3 id=\"valueOf方法\"><a href=\"#valueOf方法\" class=\"headerlink\" title=\"valueOf方法\"></a>valueOf方法</h3><h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><blockquote>\n<p>以<code>Integer</code>为例，源码如下，可见</p>\n<p>若数值在<strong>[-128,127]</strong>之间，便返回<code>IntegerCache.cache</code>中已存在的对象的引用，否则创建一个新的<code>Integer</code>对象</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public static Integer value<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (i &gt;= <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>low<span class=\"hljs-operator\"> &amp;&amp; </span>i &lt;= <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>high)<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>cache<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span> + (-I<span class=\"hljs-identifier\">ntegerCache</span>.<span class=\"hljs-identifier\">low</span>)]</span>;<br>\treturn <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Integer(<span class=\"hljs-params\">i</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因此：</p>\n<ul>\n<li><code>Integer a = 0;</code>会直接使用常量池中的对象</li>\n<li><code>Integer b = new Integer(0);</code>会创建新的对象</li>\n</ul>\n<p>所以若输出<code>a == b</code>，会输出false</p>\n</blockquote>\n<h4 id=\"问题案例\"><a href=\"#问题案例\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><p>1、常量池相关问题</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer i1 = <span class=\"hljs-number\">100</span>;<br>Integer i2 = <span class=\"hljs-number\">100</span>;<br><br>Integer i3 = <span class=\"hljs-number\">200</span>;<br>Integer i4 = <span class=\"hljs-number\">200</span>;<br><br>System.out.println(i1==i2);<br>System.out.println(i3==i4);<br><br>####################################<br>true<br>false<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的（<strong>这些方法实现了常量池技术</strong>），而Double、Float的valueOf方法的实现是类似的（<strong>这些方法没有使用常量池技术</strong>）。因此，上述代码若换成Double，会输出“false false”，换成Boolean会输出“true true”。</p>\n</blockquote>\n<p>2、算数运算符相关问题</p>\n<blockquote>\n<p>如果这些包装类使用了算数运算符，那么“==”比较的将会是数值（即触发了自动拆箱），如下：</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer a = <span class=\"hljs-number\">1</span>;<br>Integer b = <span class=\"hljs-number\">2</span>;<br>Integer c = <span class=\"hljs-number\">3</span>;<br>System.out.println(c==(a+b));\t<span class=\"hljs-comment\">// 实际比较的是数值 3 == 3 为true</span><br><br>#########################################<br>true<br></code></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>对于包装器类型，equals方法并不会进行类型转换，如下：</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer a = <span class=\"hljs-number\">1</span>;<br>Integer b = <span class=\"hljs-number\">2</span>;<br><br>Long c = <span class=\"hljs-number\">3</span>L;<br>Long d = <span class=\"hljs-number\">2</span>L;<br><br>System.out.println(c==a+b);<br>System.out.println(c.equals(a+b));<br>System.out.println(c.equals(a+d));<br><br>###########################################<br>true<br>false<br>true<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><h2 id=\"相关常见问题\"><a href=\"#相关常见问题\" class=\"headerlink\" title=\"相关常见问题\"></a>相关常见问题</h2><blockquote>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphin0520/p/3780005.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"8种基本数据类型\"><a href=\"#8种基本数据类型\" class=\"headerlink\" title=\"8种基本数据类型\"></a>8种基本数据类型</h3><blockquote>\n<p>Java有8中基本数据类型</p>\n</blockquote>\n<ul>\n<li><p>数字类型（byte&lt;1&gt;、short&lt;2&gt;、int&lt;4&gt;、long&lt;8&gt;、float&lt;4&gt;、double&lt;8&gt;）；</p>\n</li>\n<li><p>字符类型（char&lt;2&gt;）；</p>\n</li>\n<li><p>布尔型（boolean&lt;依赖于JVM的具体实现&gt;）</p>\n</li>\n</ul>\n<p>（其中&lt;&gt;内为其所对应的字节数，每个基本数据类型又有对应的默认值，其中<strong>数据类型的基本都是0</strong>）</p>\n<blockquote>\n<p>数字类型中前四种使用了<em>常量池</em>技术，而后两种没实现，具体的影响见下一节中的案例部分</p>\n</blockquote>\n<h3 id=\"数据类型的转换\"><a href=\"#数据类型的转换\" class=\"headerlink\" title=\"数据类型的转换\"></a>数据类型的转换</h3><h4 id=\"转换规律\"><a href=\"#转换规律\" class=\"headerlink\" title=\"转换规律\"></a>转换规律</h4><blockquote>\n<p>基本按照常识即可判断无精度损失</p>\n<p>需要注意的是int转float、long转float、long转double是有可能出现精度损失的</p>\n<p>当使用<em>二元运算符</em>连接两个操作数时，先判断有没有<code>double</code>，再判断有没有<code>float</code>，再判断有没有<code>long</code>，判断有则结果就为对应类型，否则为<code>int</code>。</p>\n</blockquote>\n<h4 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h4><blockquote>\n<p>有信息损失的通常需要进行强制转换</p>\n</blockquote>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">double</span> x = <span class=\"hljs-number\">3.14</span>;<br><span class=\"hljs-built_in\">int</span> x = (<span class=\"hljs-built_in\">int</span>) x;\t<span class=\"hljs-comment\">// double强制转换为int</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><blockquote>\n<p>使用<code>final</code>修饰的为常量，使用<code>static final</code>修饰的为类常量</p>\n<p>常量名通常全大写</p>\n</blockquote>\n<h2 id=\"装箱与拆箱\"><a href=\"#装箱与拆箱\" class=\"headerlink\" title=\"装箱与拆箱\"></a>装箱与拆箱</h2><p>参考：<a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphin0520/p/3780005.html</a></p>\n<blockquote>\n<p>Java为每种基本数据类型都提供了对应的<strong>包装器类型</strong>，将基本数据类型转换成包装类称为<strong>装箱</strong>，反之则称为<strong>拆箱</strong>。</p>\n</blockquote>\n<h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱：基本数据类型——&gt;包装类</p>\n<p>其中第一种方法不会触发自动装箱的机制，在执行效率和资源占用上，第二种方法通常要优于第一种情况。</p>\n</blockquote>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\"><span class=\"hljs-built_in\">Integer</span> i = <span class=\"hljs-literal\">new</span> <span class=\"hljs-built_in\">Integer</span>(<span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// 手动装箱</span><br><span class=\"hljs-built_in\">Integer</span> i = <span class=\"hljs-number\">10</span>;\t<span class=\"hljs-comment\">// 自动装箱</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>拆箱：包装类——&gt;基本数据类型</p>\n<p>直接进行赋值语句即可，同时如“+”、“-”等常规数值运算符会触发自动拆箱</p>\n</blockquote>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">int i2 = i<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"装箱与拆箱的实现\"><a href=\"#装箱与拆箱的实现\" class=\"headerlink\" title=\"装箱与拆箱的实现\"></a>装箱与拆箱的实现</h3><p><strong>装箱过程是通过调用包装器的<code>valueOf()</code>方法实现的</strong></p>\n<p><strong>拆箱过程是通过调用包装器的 xxxValue方法实现的（xxx代表对应的基本数据类型）</strong></p>\n<p>Java源码：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> </span>&#123;<br>\tInteger a = <span class=\"hljs-number\">1</span>;<br>\t<span class=\"hljs-keyword\">int</span> b = a + <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>反编译后结果：</p>\n<p><img src=\"http://cdn.ziyedy.top/2%E3%80%81Java%EF%BC%9A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1%E5%8F%8D%E7%BC%96%E8%AF%91.png\" alt=\"\"></p>\n<h3 id=\"valueOf方法\"><a href=\"#valueOf方法\" class=\"headerlink\" title=\"valueOf方法\"></a>valueOf方法</h3><h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><blockquote>\n<p>以<code>Integer</code>为例，源码如下，可见</p>\n<p>若数值在<strong>[-128,127]</strong>之间，便返回<code>IntegerCache.cache</code>中已存在的对象的引用，否则创建一个新的<code>Integer</code>对象</p>\n</blockquote>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public static Integer value<span class=\"hljs-constructor\">Of(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">i</span>)</span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> (i &gt;= <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>low<span class=\"hljs-operator\"> &amp;&amp; </span>i &lt;= <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>high)<br>\t\treturn <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">IntegerCache</span>.</span></span>cache<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span> + (-I<span class=\"hljs-identifier\">ntegerCache</span>.<span class=\"hljs-identifier\">low</span>)]</span>;<br>\treturn <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Integer(<span class=\"hljs-params\">i</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因此：</p>\n<ul>\n<li><code>Integer a = 0;</code>会直接使用常量池中的对象</li>\n<li><code>Integer b = new Integer(0);</code>会创建新的对象</li>\n</ul>\n<p>所以若输出<code>a == b</code>，会输出false</p>\n</blockquote>\n<h4 id=\"问题案例\"><a href=\"#问题案例\" class=\"headerlink\" title=\"问题案例\"></a>问题案例</h4><p>1、常量池相关问题</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer i1 = <span class=\"hljs-number\">100</span>;<br>Integer i2 = <span class=\"hljs-number\">100</span>;<br><br>Integer i3 = <span class=\"hljs-number\">200</span>;<br>Integer i4 = <span class=\"hljs-number\">200</span>;<br><br>System.out.println(i1==i2);<br>System.out.println(i3==i4);<br><br>####################################<br>true<br>false<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的（<strong>这些方法实现了常量池技术</strong>），而Double、Float的valueOf方法的实现是类似的（<strong>这些方法没有使用常量池技术</strong>）。因此，上述代码若换成Double，会输出“false false”，换成Boolean会输出“true true”。</p>\n</blockquote>\n<p>2、算数运算符相关问题</p>\n<blockquote>\n<p>如果这些包装类使用了算数运算符，那么“==”比较的将会是数值（即触发了自动拆箱），如下：</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer a = <span class=\"hljs-number\">1</span>;<br>Integer b = <span class=\"hljs-number\">2</span>;<br>Integer c = <span class=\"hljs-number\">3</span>;<br>System.out.println(c==(a+b));\t<span class=\"hljs-comment\">// 实际比较的是数值 3 == 3 为true</span><br><br>#########################################<br>true<br></code></pre></td></tr></table></figure>\n\n<hr>\n<blockquote>\n<p>对于包装器类型，equals方法并不会进行类型转换，如下：</p>\n</blockquote>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">Integer a = <span class=\"hljs-number\">1</span>;<br>Integer b = <span class=\"hljs-number\">2</span>;<br><br>Long c = <span class=\"hljs-number\">3</span>L;<br>Long d = <span class=\"hljs-number\">2</span>L;<br><br>System.out.println(c==a+b);<br>System.out.println(c.equals(a+b));<br>System.out.println(c.equals(a+d));<br><br>###########################################<br>true<br>false<br>true<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><h2 id=\"相关常见问题\"><a href=\"#相关常见问题\" class=\"headerlink\" title=\"相关常见问题\"></a>相关常见问题</h2><blockquote>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/dolphin0520/p/3780005.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/dolphin0520/p/3780005.html</a></p>\n</blockquote>\n"},{"title":"Java：字符串","date":"2020-07-27T07:45:43.000Z","fileName":"Java-string","_content":"\n## String类\n\n### 简介\n\n> 在Java中，所有类似“ABC”的字面值，都是String类的实例；\n>\n> String类位于java.lang包下，是Java语言的核心类，提供了字符串的比较、查找、截取、大小写转换等操作；\n>\n> Java语言为`“+”`连接符（字符串连接符）以及对象转换为字符串提供了特殊的支持，字符串对象可以使用`“+”`连接其他对象\n\n\n\n### 基本实现\n\nString被声明为`final`，因此不可被继承，同时也说明**String具有不可变特性**。在**Java8**中，String内部使用char数组存储数据。\n\n```\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在**Java9**之后，*String类的实现改用byte数组存储字符串，同时使用coder来标识使用哪种编码*。\n\n```\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\n\n\n### 常用方法\n\n```\n// 获取字符串长度\nint length()\n\n// 获取从begin到end的字符串\nString substring(int beginIndex, int endIndex)\n\n// 获取指定位置的字符\nchar charAt(int index)\n\n// 将字符串分割为子字符串\nString[] split(String regex, int limit)\t\n\n// 将该字符串转换为byte数组\nbyte[] getBytes()\t\n```\n\n\n\n## “+”连接符\n\n### 实现原理\n\n> \"+\"连接符实现字符串连接是通过**StringBuilder（或 StringBuffer）类及其append 方法实现的**\n>\n> Java在使用“+”连接字符串时，会创建一个`StringBuilder`对象，并调用`append()`方法进行拼接，最后调用`toString()`方法返回拼接好的字符串\n\n\n\n### 效率\n\n> 由于使用“+”连接符时，JVM会隐式创建StringBuilder对象\n>\n> 因此在大规模进行字符串拼接时还是构建一个`StringBuilder`对象手动调用`append`方法比较好\n>\n> 但同时，当\"+\"两端均为编译期确定的字符串常量时，编译器会进行相应的**优化**，直接将两个字符串常量拼接好\n\n比如：\n\n```\nSystem.out.println(\"a\" + \"b\");\n\nSystem.out.println(\"ab\");\t// 反编译后直接拼接好\n```\n\n\n\n\n\n## String、StringBuilder、StringBuffer\n\n### 主要区别\n\n1. String是不可变字符序列，StringBuilder和StringBuffer是可变字符序列\n2. 执行速度StringBuilder > StringBuffer > String\n3. StringBuilder是非线程安全的，StringBuffer是线程安全的\n\n\n\n### StringBuild类\n\nString具有不可变性（变化都是通过赋值完成的，类内方法不能使当前对象中的字符串进行改变），而StringBuild不具备\n\n当频繁操作字符串时，应该使用StringBuild\n\n#### 常用方法\n\n```\n// 追加内容到当前StringBuild对象的末尾\nStringBuild append(字符串)\t\n\n// 将内容插入到指定的位置\nStringBuild insert(位置， 字符串)\n\n// 将之转化为String对象\nString toString()\n\n// 删除start到end的字符串。[start, end)\nString delete(start, end)\n\n// 将start到end之间的字符串替换为str\nString replace(start, end, str)\n\n// 获取字符串长度\nint length()\n```\n\n\n\n\n\n## 字符串常量池\n\n暂略\n\n\n\n\n\n> 参考：\n>\n> https://blog.csdn.net/ifwinds/article/details/80849184","source":"_posts/编程相关/Java/Java基础/3、Java：字符串.md","raw":"---\ntitle: Java：字符串\ndate: 2020-07-27 15:45:43\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: Java-string\n---\n\n## String类\n\n### 简介\n\n> 在Java中，所有类似“ABC”的字面值，都是String类的实例；\n>\n> String类位于java.lang包下，是Java语言的核心类，提供了字符串的比较、查找、截取、大小写转换等操作；\n>\n> Java语言为`“+”`连接符（字符串连接符）以及对象转换为字符串提供了特殊的支持，字符串对象可以使用`“+”`连接其他对象\n\n\n\n### 基本实现\n\nString被声明为`final`，因此不可被继承，同时也说明**String具有不可变特性**。在**Java8**中，String内部使用char数组存储数据。\n\n```\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n}\n```\n\n在**Java9**之后，*String类的实现改用byte数组存储字符串，同时使用coder来标识使用哪种编码*。\n\n```\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final byte[] value;\n\n    /** The identifier of the encoding used to encode the bytes in {@code value}. */\n    private final byte coder;\n}\n```\n\n\n\n### 常用方法\n\n```\n// 获取字符串长度\nint length()\n\n// 获取从begin到end的字符串\nString substring(int beginIndex, int endIndex)\n\n// 获取指定位置的字符\nchar charAt(int index)\n\n// 将字符串分割为子字符串\nString[] split(String regex, int limit)\t\n\n// 将该字符串转换为byte数组\nbyte[] getBytes()\t\n```\n\n\n\n## “+”连接符\n\n### 实现原理\n\n> \"+\"连接符实现字符串连接是通过**StringBuilder（或 StringBuffer）类及其append 方法实现的**\n>\n> Java在使用“+”连接字符串时，会创建一个`StringBuilder`对象，并调用`append()`方法进行拼接，最后调用`toString()`方法返回拼接好的字符串\n\n\n\n### 效率\n\n> 由于使用“+”连接符时，JVM会隐式创建StringBuilder对象\n>\n> 因此在大规模进行字符串拼接时还是构建一个`StringBuilder`对象手动调用`append`方法比较好\n>\n> 但同时，当\"+\"两端均为编译期确定的字符串常量时，编译器会进行相应的**优化**，直接将两个字符串常量拼接好\n\n比如：\n\n```\nSystem.out.println(\"a\" + \"b\");\n\nSystem.out.println(\"ab\");\t// 反编译后直接拼接好\n```\n\n\n\n\n\n## String、StringBuilder、StringBuffer\n\n### 主要区别\n\n1. String是不可变字符序列，StringBuilder和StringBuffer是可变字符序列\n2. 执行速度StringBuilder > StringBuffer > String\n3. StringBuilder是非线程安全的，StringBuffer是线程安全的\n\n\n\n### StringBuild类\n\nString具有不可变性（变化都是通过赋值完成的，类内方法不能使当前对象中的字符串进行改变），而StringBuild不具备\n\n当频繁操作字符串时，应该使用StringBuild\n\n#### 常用方法\n\n```\n// 追加内容到当前StringBuild对象的末尾\nStringBuild append(字符串)\t\n\n// 将内容插入到指定的位置\nStringBuild insert(位置， 字符串)\n\n// 将之转化为String对象\nString toString()\n\n// 删除start到end的字符串。[start, end)\nString delete(start, end)\n\n// 将start到end之间的字符串替换为str\nString replace(start, end, str)\n\n// 获取字符串长度\nint length()\n```\n\n\n\n\n\n## 字符串常量池\n\n暂略\n\n\n\n\n\n> 参考：\n>\n> https://blog.csdn.net/ifwinds/article/details/80849184","slug":"编程相关/Java/Java基础/3、Java：字符串","published":1,"updated":"2021-01-30T14:43:26.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqe00248sjsdjwu8pwp","content":"<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>在Java中，所有类似“ABC”的字面值，都是String类的实例；</p>\n<p>String类位于java.lang包下，是Java语言的核心类，提供了字符串的比较、查找、截取、大小写转换等操作；</p>\n<p>Java语言为<code>“+”</code>连接符（字符串连接符）以及对象转换为字符串提供了特殊的支持，字符串对象可以使用<code>“+”</code>连接其他对象</p>\n</blockquote>\n<h3 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h3><p>String被声明为<code>final</code>，因此不可被继承，同时也说明<strong>String具有不可变特性</strong>。在<strong>Java8</strong>中，String内部使用char数组存储数据。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span><br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span>, <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">String</span>&gt;, <span class=\"hljs-title\">CharSequence</span> </span>&#123;<br>    <span class=\"hljs-comment\">/** The value is used for character storage. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">char</span> value[];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>Java9</strong>之后，<em>String类的实现改用byte数组存储字符串，同时使用coder来标识使用哪种编码</em>。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span><br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span>, <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">String</span>&gt;, <span class=\"hljs-title\">CharSequence</span> </span>&#123;<br>    <span class=\"hljs-comment\">/** The value is used for character storage. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> byte[] value;<br><br>    <span class=\"hljs-comment\">/** The identifier of the encoding used to encode the bytes in &#123;<span class=\"hljs-doctag\">@code</span> value&#125;. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> byte coder;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-comment\">// 获取字符串长度</span><br><span class=\"hljs-built_in\">int</span> length()<br><br><span class=\"hljs-comment\">// 获取从begin到end的字符串</span><br><span class=\"hljs-keyword\">String</span> substring(<span class=\"hljs-built_in\">int</span> beginIndex, <span class=\"hljs-built_in\">int</span> endIndex)<br><br><span class=\"hljs-comment\">// 获取指定位置的字符</span><br><span class=\"hljs-built_in\">char</span> charAt(<span class=\"hljs-built_in\">int</span> index)<br><br><span class=\"hljs-comment\">// 将字符串分割为子字符串</span><br><span class=\"hljs-keyword\">String</span>[] <span class=\"hljs-built_in\">split</span>(<span class=\"hljs-keyword\">String</span> regex, <span class=\"hljs-built_in\">int</span> limit)\t<br><br><span class=\"hljs-comment\">// 将该字符串转换为byte数组</span><br><span class=\"hljs-built_in\">byte</span>[] getBytes()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"“-”连接符\"><a href=\"#“-”连接符\" class=\"headerlink\" title=\"“+”连接符\"></a>“+”连接符</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><blockquote>\n<p>“+”连接符实现字符串连接是通过<strong>StringBuilder（或 StringBuffer）类及其append 方法实现的</strong></p>\n<p>Java在使用“+”连接字符串时，会创建一个<code>StringBuilder</code>对象，并调用<code>append()</code>方法进行拼接，最后调用<code>toString()</code>方法返回拼接好的字符串</p>\n</blockquote>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><blockquote>\n<p>由于使用“+”连接符时，JVM会隐式创建StringBuilder对象</p>\n<p>因此在大规模进行字符串拼接时还是构建一个<code>StringBuilder</code>对象手动调用<code>append</code>方法比较好</p>\n<p>但同时，当”+”两端均为编译期确定的字符串常量时，编译器会进行相应的<strong>优化</strong>，直接将两个字符串常量拼接好</p>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"a\"</span> + <span class=\"hljs-string\">\"b\"</span>);<br><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"ab\"</span>);\t<span class=\"hljs-comment\">// 反编译后直接拼接好</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h2><h3 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h3><ol>\n<li>String是不可变字符序列，StringBuilder和StringBuffer是可变字符序列</li>\n<li>执行速度StringBuilder &gt; StringBuffer &gt; String</li>\n<li>StringBuilder是非线程安全的，StringBuffer是线程安全的</li>\n</ol>\n<h3 id=\"StringBuild类\"><a href=\"#StringBuild类\" class=\"headerlink\" title=\"StringBuild类\"></a>StringBuild类</h3><p>String具有不可变性（变化都是通过赋值完成的，类内方法不能使当前对象中的字符串进行改变），而StringBuild不具备</p>\n<p>当频繁操作字符串时，应该使用StringBuild</p>\n<h4 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">// 追加内容到当前StringBuild对象的末尾<br>StringBuild append(字符串)\t<br><br>// 将内容插入到指定的位置<br>StringBuild <span class=\"hljs-keyword\">insert</span>(位置， 字符串)<br><br>// 将之转化为<span class=\"hljs-keyword\">String</span>对象<br><span class=\"hljs-keyword\">String</span> toString()<br><br>// 删除<span class=\"hljs-keyword\">start</span>到<span class=\"hljs-keyword\">end</span>的字符串。[<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>)<br><span class=\"hljs-keyword\">String</span> <span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>)<br><br>// 将<span class=\"hljs-keyword\">start</span>到<span class=\"hljs-keyword\">end</span>之间的字符串替换为<span class=\"hljs-keyword\">str</span><br><span class=\"hljs-keyword\">String</span> <span class=\"hljs-keyword\">replace</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>, <span class=\"hljs-keyword\">str</span>)<br><br>// 获取字符串长度<br><span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">length</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"字符串常量池\"><a href=\"#字符串常量池\" class=\"headerlink\" title=\"字符串常量池\"></a>字符串常量池</h2><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/ifwinds/article/details/80849184\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ifwinds/article/details/80849184</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"String类\"><a href=\"#String类\" class=\"headerlink\" title=\"String类\"></a>String类</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><blockquote>\n<p>在Java中，所有类似“ABC”的字面值，都是String类的实例；</p>\n<p>String类位于java.lang包下，是Java语言的核心类，提供了字符串的比较、查找、截取、大小写转换等操作；</p>\n<p>Java语言为<code>“+”</code>连接符（字符串连接符）以及对象转换为字符串提供了特殊的支持，字符串对象可以使用<code>“+”</code>连接其他对象</p>\n</blockquote>\n<h3 id=\"基本实现\"><a href=\"#基本实现\" class=\"headerlink\" title=\"基本实现\"></a>基本实现</h3><p>String被声明为<code>final</code>，因此不可被继承，同时也说明<strong>String具有不可变特性</strong>。在<strong>Java8</strong>中，String内部使用char数组存储数据。</p>\n<figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs zephir\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span><br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span>, <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">String</span>&gt;, <span class=\"hljs-title\">CharSequence</span> </span>&#123;<br>    <span class=\"hljs-comment\">/** The value is used for character storage. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">char</span> value[];<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在<strong>Java9</strong>之后，<em>String类的实现改用byte数组存储字符串，同时使用coder来标识使用哪种编码</em>。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs php\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span><br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span>, <span class=\"hljs-title\">Comparable</span>&lt;<span class=\"hljs-title\">String</span>&gt;, <span class=\"hljs-title\">CharSequence</span> </span>&#123;<br>    <span class=\"hljs-comment\">/** The value is used for character storage. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> byte[] value;<br><br>    <span class=\"hljs-comment\">/** The identifier of the encoding used to encode the bytes in &#123;<span class=\"hljs-doctag\">@code</span> value&#125;. */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> byte coder;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-comment\">// 获取字符串长度</span><br><span class=\"hljs-built_in\">int</span> length()<br><br><span class=\"hljs-comment\">// 获取从begin到end的字符串</span><br><span class=\"hljs-keyword\">String</span> substring(<span class=\"hljs-built_in\">int</span> beginIndex, <span class=\"hljs-built_in\">int</span> endIndex)<br><br><span class=\"hljs-comment\">// 获取指定位置的字符</span><br><span class=\"hljs-built_in\">char</span> charAt(<span class=\"hljs-built_in\">int</span> index)<br><br><span class=\"hljs-comment\">// 将字符串分割为子字符串</span><br><span class=\"hljs-keyword\">String</span>[] <span class=\"hljs-built_in\">split</span>(<span class=\"hljs-keyword\">String</span> regex, <span class=\"hljs-built_in\">int</span> limit)\t<br><br><span class=\"hljs-comment\">// 将该字符串转换为byte数组</span><br><span class=\"hljs-built_in\">byte</span>[] getBytes()<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"“-”连接符\"><a href=\"#“-”连接符\" class=\"headerlink\" title=\"“+”连接符\"></a>“+”连接符</h2><h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><blockquote>\n<p>“+”连接符实现字符串连接是通过<strong>StringBuilder（或 StringBuffer）类及其append 方法实现的</strong></p>\n<p>Java在使用“+”连接字符串时，会创建一个<code>StringBuilder</code>对象，并调用<code>append()</code>方法进行拼接，最后调用<code>toString()</code>方法返回拼接好的字符串</p>\n</blockquote>\n<h3 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h3><blockquote>\n<p>由于使用“+”连接符时，JVM会隐式创建StringBuilder对象</p>\n<p>因此在大规模进行字符串拼接时还是构建一个<code>StringBuilder</code>对象手动调用<code>append</code>方法比较好</p>\n<p>但同时，当”+”两端均为编译期确定的字符串常量时，编译器会进行相应的<strong>优化</strong>，直接将两个字符串常量拼接好</p>\n</blockquote>\n<p>比如：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"a\"</span> + <span class=\"hljs-string\">\"b\"</span>);<br><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(<span class=\"hljs-string\">\"ab\"</span>);\t<span class=\"hljs-comment\">// 反编译后直接拼接好</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"String、StringBuilder、StringBuffer\"><a href=\"#String、StringBuilder、StringBuffer\" class=\"headerlink\" title=\"String、StringBuilder、StringBuffer\"></a>String、StringBuilder、StringBuffer</h2><h3 id=\"主要区别\"><a href=\"#主要区别\" class=\"headerlink\" title=\"主要区别\"></a>主要区别</h3><ol>\n<li>String是不可变字符序列，StringBuilder和StringBuffer是可变字符序列</li>\n<li>执行速度StringBuilder &gt; StringBuffer &gt; String</li>\n<li>StringBuilder是非线程安全的，StringBuffer是线程安全的</li>\n</ol>\n<h3 id=\"StringBuild类\"><a href=\"#StringBuild类\" class=\"headerlink\" title=\"StringBuild类\"></a>StringBuild类</h3><p>String具有不可变性（变化都是通过赋值完成的，类内方法不能使当前对象中的字符串进行改变），而StringBuild不具备</p>\n<p>当频繁操作字符串时，应该使用StringBuild</p>\n<h4 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">// 追加内容到当前StringBuild对象的末尾<br>StringBuild append(字符串)\t<br><br>// 将内容插入到指定的位置<br>StringBuild <span class=\"hljs-keyword\">insert</span>(位置， 字符串)<br><br>// 将之转化为<span class=\"hljs-keyword\">String</span>对象<br><span class=\"hljs-keyword\">String</span> toString()<br><br>// 删除<span class=\"hljs-keyword\">start</span>到<span class=\"hljs-keyword\">end</span>的字符串。[<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>)<br><span class=\"hljs-keyword\">String</span> <span class=\"hljs-keyword\">delete</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>)<br><br>// 将<span class=\"hljs-keyword\">start</span>到<span class=\"hljs-keyword\">end</span>之间的字符串替换为<span class=\"hljs-keyword\">str</span><br><span class=\"hljs-keyword\">String</span> <span class=\"hljs-keyword\">replace</span>(<span class=\"hljs-keyword\">start</span>, <span class=\"hljs-keyword\">end</span>, <span class=\"hljs-keyword\">str</span>)<br><br>// 获取字符串长度<br><span class=\"hljs-built_in\">int</span> <span class=\"hljs-keyword\">length</span>()<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"字符串常量池\"><a href=\"#字符串常量池\" class=\"headerlink\" title=\"字符串常量池\"></a>字符串常量池</h2><p>暂略</p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/ifwinds/article/details/80849184\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ifwinds/article/details/80849184</a></p>\n</blockquote>\n"},{"title":"Java：泛型","date":"2020-07-28T03:40:48.000Z","fileName":"Java-generic","_content":"\n# 泛型基础\n\n## 基本概念\n\n泛型的本质是**参数化类型**，也就是说所操作的数据类型被指定为一个参数。\n\nJava的泛型是**伪泛型**，这是因为Java在编译期间，所有的泛型信息都会被擦掉\n\nJava的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为**类型擦除**。\n\n如在代码中定义`List<Object>`和`List<String>`等类型，在编译后都会变成`List`，JVM看到的只是List，而由泛型附加的类型信息对JVM是看不到的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是Java的泛型与C++模板机制实现方式之间的重要区别。\n\n## 三种主要使用形式\n\n引入类型可以用来修饰成员变量/局部变量/参数/返回值\n\n注：变量声明的类型必须匹配传递给实际对象的类型（即前后尖括号中的内容必须相同）\n\n### 1、泛型类\n\n> 常见的如`ArrayList`、`HashSet`、`HashMap`等等\n\n```\n// 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n// 在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{ \n   \n    private T key;\n\n    public Generic(T key) { \n        this.key = key;\n    }\n\n    public T getKey(){ \n        return key;\n    }\n}\n```\n\n\n\n### 2、泛型接口\n\n> 实现泛型的接口，如`Iterator`、`List`等即为泛型接口\n\n**泛型接口定义**\n\n```\npublic interface Generator<T> {\n    public T method();\n}\n```\n\n#### 实现时不指定类型\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n```\n\n#### 实现时指定类型\n\n```\\\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n```\n\n\n\n### 3、泛型方法\n\n> 具有泛型参数的方法，可位于普通类/泛型类中（**泛型方法不一定要写在泛型类当中**）\n>\n> 如`Arrays.sort()`等方法即是泛型方法\n>\n> 泛型参数\\<T\\>在修饰符后，返回类型前，如下示例\n>\n> 若传入参数不统一会寻找共同的*超类*，一般应该统一参数\n\n#### 泛型方法定义\n\n```\npublic static <E> void printArray( E[] inputArray )\n{         \n\tfor ( E element : inputArray ){        \n    \tSystem.out.printf( \"%s \", element );\n    }\n        System.out.println();\n}\n```\n\n#### 泛型方法调用\n\n```\nTarget t = new Target();\nString s = t.<String>method();\t// 调用时不省略泛型\nString s = t.method();\t// 调用时省略泛型\n```\n\n\n\n# 泛型限定\n\n## 泛型通配符\n\n### 常用通配符\n\n> **常用的有： T，E，K，V，？**（通常只将?视为通配符）\n>\n> 本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。\n\n- ？ 表示不确定的 Java类型\n- T (Template) 表示具体的一个Java类型，自定义泛型常用T\n- K V (Key Value) 分别代表Java键值中的Key Value\n- E (Element) 代表元素Element\n\n### 上界通配符\n\n`<? extends 类名> `：表示能接受的参数类型可能是*所指定的类型本身，或者是此类型的子类*\n\n> 使用上界通配符，编译器能够保证取出来的类型一定是指定类型的子类，但不保证放入的对象是什么类型\n>\n> 所以**只能进行`get`操作，而不能进行`set`操作**\n\n举例说明：\n\n```\nPair<Apple> apples = new Pair<>(new Apple(3));\nPair<? extends Fruit> fruit = apples;\nfruit.set(new Orange(3));\t// 编译错误\n```\n\n### 下界通配符\n\n`< ? super 类名>`：表示参数化的类型可能是*所指定的类型本身，或者是此类型的父类型，直至 Object*\n\n> 编译器能保证放入的是其本身或其超类（传入子类时进行类型转换），但无法保证取出的是哪个类。\n>\n> 所以**只能进行`set`操作，而不能进行`get`操作**\n\n### 泛型PECS原则\n\n> Producer Extends 泛型是生产者，向外输出，使用`Extends`\n\n> Consumer Super 泛型是消费者，向内增加东西，使用`Super`\n\n### ？和T的区别\n\n> `T`是一个**确定**的类型，而`?`是一个不确定的类型\n>\n> 可以对`T`进行操作，而不能对`?`进行操作\n\n\n\n### extends关键字\n\n> 使用`extends`关键字约定该类型必须是某某的*子类*\n\n如`<T extends Comparable>`约定T必须是`Comparable`的子类\n\n`extends`后可跟多个，**以`&`拼接**，同时该限定可以有多个接口，但只能有一个类，且类必须排第一位。\n\n### 泛型的类型关系\n\n> Java中的泛型是不变的，即List\\<Object\\>与List\\<String\\>并无父类与子类的关系\n>\n> \n\n\n\n# 泛型实现的本质\n\n## 类型擦除\n\n泛型是JDK1.5引入的新特性，因此JVM中没有泛型对象，而是采用**类型擦除**技术，只有普通的类和方法\n\n> 擦除泛型对象，替换为原始类型（无限定则替换为为Object，有限定则替换为第一个类型），使得该类与引入泛型之前的类并无不同\n\n比如：`Pair<T>`则可视为`Pair<Object>`。因为T未指定类型\n\n`Pair<T extends A & B>`则可视为`Pair<A>`\n\n## 自动类型转换\n\n> 擦除泛型后，编译时会进行自动类型转换\n>\n> 即先生成一个`Object`对象，再使用强制类型转化转换为对应的对象\n\n\n\n## 自动桥方法\n\n> 即泛型中自动生成的参数为`Object`方法会自动调用用户传入相关参数类型的对应方法\n\n\n\n\n\n> 参考：\n>\n> mooc华东师范大学：Java高级\n>\n> 类型擦除：https://www.cnblogs.com/wuqinglong/p/9456193.html\n>\n> https://juejin.im/post/5d5789d26fb9a06ad0056bd9\n\n","source":"_posts/编程相关/Java/Java基础/9、Java：泛型.md","raw":"---\ntitle: Java：泛型\ndate: 2020-07-28 11:40:48\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: Java-generic\n---\n\n# 泛型基础\n\n## 基本概念\n\n泛型的本质是**参数化类型**，也就是说所操作的数据类型被指定为一个参数。\n\nJava的泛型是**伪泛型**，这是因为Java在编译期间，所有的泛型信息都会被擦掉\n\nJava的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为**类型擦除**。\n\n如在代码中定义`List<Object>`和`List<String>`等类型，在编译后都会变成`List`，JVM看到的只是List，而由泛型附加的类型信息对JVM是看不到的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是Java的泛型与C++模板机制实现方式之间的重要区别。\n\n## 三种主要使用形式\n\n引入类型可以用来修饰成员变量/局部变量/参数/返回值\n\n注：变量声明的类型必须匹配传递给实际对象的类型（即前后尖括号中的内容必须相同）\n\n### 1、泛型类\n\n> 常见的如`ArrayList`、`HashSet`、`HashMap`等等\n\n```\n// 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型\n// 在实例化泛型类时，必须指定T的具体类型\npublic class Generic<T>{ \n   \n    private T key;\n\n    public Generic(T key) { \n        this.key = key;\n    }\n\n    public T getKey(){ \n        return key;\n    }\n}\n```\n\n\n\n### 2、泛型接口\n\n> 实现泛型的接口，如`Iterator`、`List`等即为泛型接口\n\n**泛型接口定义**\n\n```\npublic interface Generator<T> {\n    public T method();\n}\n```\n\n#### 实现时不指定类型\n\n```\nclass GeneratorImpl<T> implements Generator<T>{\n    @Override\n    public T method() {\n        return null;\n    }\n}\n```\n\n#### 实现时指定类型\n\n```\\\nclass GeneratorImpl<T> implements Generator<String>{\n    @Override\n    public String method() {\n        return \"hello\";\n    }\n}\n```\n\n\n\n### 3、泛型方法\n\n> 具有泛型参数的方法，可位于普通类/泛型类中（**泛型方法不一定要写在泛型类当中**）\n>\n> 如`Arrays.sort()`等方法即是泛型方法\n>\n> 泛型参数\\<T\\>在修饰符后，返回类型前，如下示例\n>\n> 若传入参数不统一会寻找共同的*超类*，一般应该统一参数\n\n#### 泛型方法定义\n\n```\npublic static <E> void printArray( E[] inputArray )\n{         \n\tfor ( E element : inputArray ){        \n    \tSystem.out.printf( \"%s \", element );\n    }\n        System.out.println();\n}\n```\n\n#### 泛型方法调用\n\n```\nTarget t = new Target();\nString s = t.<String>method();\t// 调用时不省略泛型\nString s = t.method();\t// 调用时省略泛型\n```\n\n\n\n# 泛型限定\n\n## 泛型通配符\n\n### 常用通配符\n\n> **常用的有： T，E，K，V，？**（通常只将?视为通配符）\n>\n> 本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。\n\n- ？ 表示不确定的 Java类型\n- T (Template) 表示具体的一个Java类型，自定义泛型常用T\n- K V (Key Value) 分别代表Java键值中的Key Value\n- E (Element) 代表元素Element\n\n### 上界通配符\n\n`<? extends 类名> `：表示能接受的参数类型可能是*所指定的类型本身，或者是此类型的子类*\n\n> 使用上界通配符，编译器能够保证取出来的类型一定是指定类型的子类，但不保证放入的对象是什么类型\n>\n> 所以**只能进行`get`操作，而不能进行`set`操作**\n\n举例说明：\n\n```\nPair<Apple> apples = new Pair<>(new Apple(3));\nPair<? extends Fruit> fruit = apples;\nfruit.set(new Orange(3));\t// 编译错误\n```\n\n### 下界通配符\n\n`< ? super 类名>`：表示参数化的类型可能是*所指定的类型本身，或者是此类型的父类型，直至 Object*\n\n> 编译器能保证放入的是其本身或其超类（传入子类时进行类型转换），但无法保证取出的是哪个类。\n>\n> 所以**只能进行`set`操作，而不能进行`get`操作**\n\n### 泛型PECS原则\n\n> Producer Extends 泛型是生产者，向外输出，使用`Extends`\n\n> Consumer Super 泛型是消费者，向内增加东西，使用`Super`\n\n### ？和T的区别\n\n> `T`是一个**确定**的类型，而`?`是一个不确定的类型\n>\n> 可以对`T`进行操作，而不能对`?`进行操作\n\n\n\n### extends关键字\n\n> 使用`extends`关键字约定该类型必须是某某的*子类*\n\n如`<T extends Comparable>`约定T必须是`Comparable`的子类\n\n`extends`后可跟多个，**以`&`拼接**，同时该限定可以有多个接口，但只能有一个类，且类必须排第一位。\n\n### 泛型的类型关系\n\n> Java中的泛型是不变的，即List\\<Object\\>与List\\<String\\>并无父类与子类的关系\n>\n> \n\n\n\n# 泛型实现的本质\n\n## 类型擦除\n\n泛型是JDK1.5引入的新特性，因此JVM中没有泛型对象，而是采用**类型擦除**技术，只有普通的类和方法\n\n> 擦除泛型对象，替换为原始类型（无限定则替换为为Object，有限定则替换为第一个类型），使得该类与引入泛型之前的类并无不同\n\n比如：`Pair<T>`则可视为`Pair<Object>`。因为T未指定类型\n\n`Pair<T extends A & B>`则可视为`Pair<A>`\n\n## 自动类型转换\n\n> 擦除泛型后，编译时会进行自动类型转换\n>\n> 即先生成一个`Object`对象，再使用强制类型转化转换为对应的对象\n\n\n\n## 自动桥方法\n\n> 即泛型中自动生成的参数为`Object`方法会自动调用用户传入相关参数类型的对应方法\n\n\n\n\n\n> 参考：\n>\n> mooc华东师范大学：Java高级\n>\n> 类型擦除：https://www.cnblogs.com/wuqinglong/p/9456193.html\n>\n> https://juejin.im/post/5d5789d26fb9a06ad0056bd9\n\n","slug":"编程相关/Java/Java基础/9、Java：泛型","published":1,"updated":"2021-01-30T14:48:20.483Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqg00288sjs32uj6izs","content":"<h1 id=\"泛型基础\"><a href=\"#泛型基础\" class=\"headerlink\" title=\"泛型基础\"></a>泛型基础</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>泛型的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。</p>\n<p>Java的泛型是<strong>伪泛型</strong>，这是因为Java在编译期间，所有的泛型信息都会被擦掉</p>\n<p>Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为<strong>类型擦除</strong>。</p>\n<p>如在代码中定义<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>等类型，在编译后都会变成<code>List</code>，JVM看到的只是List，而由泛型附加的类型信息对JVM是看不到的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是Java的泛型与C++模板机制实现方式之间的重要区别。</p>\n<h2 id=\"三种主要使用形式\"><a href=\"#三种主要使用形式\" class=\"headerlink\" title=\"三种主要使用形式\"></a>三种主要使用形式</h2><p>引入类型可以用来修饰成员变量/局部变量/参数/返回值</p>\n<p>注：变量声明的类型必须匹配传递给实际对象的类型（即前后尖括号中的内容必须相同）</p>\n<h3 id=\"1、泛型类\"><a href=\"#1、泛型类\" class=\"headerlink\" title=\"1、泛型类\"></a>1、泛型类</h3><blockquote>\n<p>常见的如<code>ArrayList</code>、<code>HashSet</code>、<code>HashMap</code>等等</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class=\"hljs-comment\">// 在实例化泛型类时，必须指定T的具体类型</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Generic</span>&lt;T&gt;&#123;</span> <br>   <br>    <span class=\"hljs-keyword\">private</span> T key;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Generic</span><span class=\"hljs-params\">(T key)</span> </span>&#123; <br>        <span class=\"hljs-keyword\">this</span>.key = key;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">()</span></span>&#123; <br>        <span class=\"hljs-keyword\">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、泛型接口\"><a href=\"#2、泛型接口\" class=\"headerlink\" title=\"2、泛型接口\"></a>2、泛型接口</h3><blockquote>\n<p>实现泛型的接口，如<code>Iterator</code>、<code>List</code>等即为泛型接口</p>\n</blockquote>\n<p><strong>泛型接口定义</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Generator&lt;T&gt; &#123;<br>    public T method();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实现时不指定类型\"><a href=\"#实现时不指定类型\" class=\"headerlink\" title=\"实现时不指定类型\"></a>实现时不指定类型</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">GeneratorImpl</span>&lt;<span class=\"hljs-symbol\">T</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Generator</span>&lt;<span class=\"hljs-symbol\">T</span>&gt;&#123;<br>    @Override<br>    <span class=\"hljs-keyword\">public</span> T method() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实现时指定类型\"><a href=\"#实现时指定类型\" class=\"headerlink\" title=\"实现时指定类型\"></a>实现时指定类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs \\\">class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;<br>    @Override<br>    public String method() &#123;<br>        return &quot;hello&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3、泛型方法\"><a href=\"#3、泛型方法\" class=\"headerlink\" title=\"3、泛型方法\"></a>3、泛型方法</h3><blockquote>\n<p>具有泛型参数的方法，可位于普通类/泛型类中（<strong>泛型方法不一定要写在泛型类当中</strong>）</p>\n<p>如<code>Arrays.sort()</code>等方法即是泛型方法</p>\n<p>泛型参数&lt;T&gt;在修饰符后，返回类型前，如下示例</p>\n<p>若传入参数不统一会寻找共同的<em>超类</em>，一般应该统一参数</p>\n</blockquote>\n<h4 id=\"泛型方法定义\"><a href=\"#泛型方法定义\" class=\"headerlink\" title=\"泛型方法定义\"></a>泛型方法定义</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printArray</span><span class=\"hljs-params\">( E[] inputArray )</span><br></span>&#123;         <br>\t<span class=\"hljs-keyword\">for</span> ( E element : inputArray )&#123;        <br>    \tSystem.out.<span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"%s \"</span>, element );<br>    &#125;<br>        System.out.<span class=\"hljs-built_in\">println</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"泛型方法调用\"><a href=\"#泛型方法调用\" class=\"headerlink\" title=\"泛型方法调用\"></a>泛型方法调用</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">Target t = <span class=\"hljs-keyword\">new</span> Target();<br>String s = t.&lt;String&gt;<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span>;</span>\t<span class=\"hljs-comment\">// 调用时不省略泛型</span><br>String s = t<span class=\"hljs-function\">.<span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span>;</span>\t<span class=\"hljs-comment\">// 调用时省略泛型</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"泛型限定\"><a href=\"#泛型限定\" class=\"headerlink\" title=\"泛型限定\"></a>泛型限定</h1><h2 id=\"泛型通配符\"><a href=\"#泛型通配符\" class=\"headerlink\" title=\"泛型通配符\"></a>泛型通配符</h2><h3 id=\"常用通配符\"><a href=\"#常用通配符\" class=\"headerlink\" title=\"常用通配符\"></a>常用通配符</h3><blockquote>\n<p><strong>常用的有： T，E，K，V，？</strong>（通常只将?视为通配符）</p>\n<p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。</p>\n</blockquote>\n<ul>\n<li>？ 表示不确定的 Java类型</li>\n<li>T (Template) 表示具体的一个Java类型，自定义泛型常用T</li>\n<li>K V (Key Value) 分别代表Java键值中的Key Value</li>\n<li>E (Element) 代表元素Element</li>\n</ul>\n<h3 id=\"上界通配符\"><a href=\"#上界通配符\" class=\"headerlink\" title=\"上界通配符\"></a>上界通配符</h3><p><code>&lt;? extends 类名&gt;</code>：表示能接受的参数类型可能是<em>所指定的类型本身，或者是此类型的子类</em></p>\n<blockquote>\n<p>使用上界通配符，编译器能够保证取出来的类型一定是指定类型的子类，但不保证放入的对象是什么类型</p>\n<p>所以<strong>只能进行<code>get</code>操作，而不能进行<code>set</code>操作</strong></p>\n</blockquote>\n<p>举例说明：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">Pair&lt;Apple&gt; apples = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Pair</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Apple</span>(<span class=\"hljs-number\">3</span>));<br>Pair&lt;? extends Fruit&gt; fruit = apples;<br>fruit.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Orange</span>(<span class=\"hljs-number\">3</span>));\t<span class=\"hljs-comment\">// 编译错误</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"下界通配符\"><a href=\"#下界通配符\" class=\"headerlink\" title=\"下界通配符\"></a>下界通配符</h3><p><code>&lt; ? super 类名&gt;</code>：表示参数化的类型可能是<em>所指定的类型本身，或者是此类型的父类型，直至 Object</em></p>\n<blockquote>\n<p>编译器能保证放入的是其本身或其超类（传入子类时进行类型转换），但无法保证取出的是哪个类。</p>\n<p>所以<strong>只能进行<code>set</code>操作，而不能进行<code>get</code>操作</strong></p>\n</blockquote>\n<h3 id=\"泛型PECS原则\"><a href=\"#泛型PECS原则\" class=\"headerlink\" title=\"泛型PECS原则\"></a>泛型PECS原则</h3><blockquote>\n<p>Producer Extends 泛型是生产者，向外输出，使用<code>Extends</code></p>\n</blockquote>\n<blockquote>\n<p>Consumer Super 泛型是消费者，向内增加东西，使用<code>Super</code></p>\n</blockquote>\n<h3 id=\"？和T的区别\"><a href=\"#？和T的区别\" class=\"headerlink\" title=\"？和T的区别\"></a>？和T的区别</h3><blockquote>\n<p><code>T</code>是一个<strong>确定</strong>的类型，而<code>?</code>是一个不确定的类型</p>\n<p>可以对<code>T</code>进行操作，而不能对<code>?</code>进行操作</p>\n</blockquote>\n<h3 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h3><blockquote>\n<p>使用<code>extends</code>关键字约定该类型必须是某某的<em>子类</em></p>\n</blockquote>\n<p>如<code>&lt;T extends Comparable&gt;</code>约定T必须是<code>Comparable</code>的子类</p>\n<p><code>extends</code>后可跟多个，<strong>以<code>&amp;</code>拼接</strong>，同时该限定可以有多个接口，但只能有一个类，且类必须排第一位。</p>\n<h3 id=\"泛型的类型关系\"><a href=\"#泛型的类型关系\" class=\"headerlink\" title=\"泛型的类型关系\"></a>泛型的类型关系</h3><blockquote>\n<p>Java中的泛型是不变的，即List&lt;Object&gt;与List&lt;String&gt;并无父类与子类的关系</p>\n</blockquote>\n<h1 id=\"泛型实现的本质\"><a href=\"#泛型实现的本质\" class=\"headerlink\" title=\"泛型实现的本质\"></a>泛型实现的本质</h1><h2 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h2><p>泛型是JDK1.5引入的新特性，因此JVM中没有泛型对象，而是采用<strong>类型擦除</strong>技术，只有普通的类和方法</p>\n<blockquote>\n<p>擦除泛型对象，替换为原始类型（无限定则替换为为Object，有限定则替换为第一个类型），使得该类与引入泛型之前的类并无不同</p>\n</blockquote>\n<p>比如：<code>Pair&lt;T&gt;</code>则可视为<code>Pair&lt;Object&gt;</code>。因为T未指定类型</p>\n<p><code>Pair&lt;T extends A &amp; B&gt;</code>则可视为<code>Pair&lt;A&gt;</code></p>\n<h2 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h2><blockquote>\n<p>擦除泛型后，编译时会进行自动类型转换</p>\n<p>即先生成一个<code>Object</code>对象，再使用强制类型转化转换为对应的对象</p>\n</blockquote>\n<h2 id=\"自动桥方法\"><a href=\"#自动桥方法\" class=\"headerlink\" title=\"自动桥方法\"></a>自动桥方法</h2><blockquote>\n<p>即泛型中自动生成的参数为<code>Object</code>方法会自动调用用户传入相关参数类型的对应方法</p>\n</blockquote>\n<blockquote>\n<p>参考：</p>\n<p>mooc华东师范大学：Java高级</p>\n<p>类型擦除：<a href=\"https://www.cnblogs.com/wuqinglong/p/9456193.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wuqinglong/p/9456193.html</a></p>\n<p><a href=\"https://juejin.im/post/5d5789d26fb9a06ad0056bd9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d5789d26fb9a06ad0056bd9</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"泛型基础\"><a href=\"#泛型基础\" class=\"headerlink\" title=\"泛型基础\"></a>泛型基础</h1><h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>泛型的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。</p>\n<p>Java的泛型是<strong>伪泛型</strong>，这是因为Java在编译期间，所有的泛型信息都会被擦掉</p>\n<p>Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为<strong>类型擦除</strong>。</p>\n<p>如在代码中定义<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>等类型，在编译后都会变成<code>List</code>，JVM看到的只是List，而由泛型附加的类型信息对JVM是看不到的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是Java的泛型与C++模板机制实现方式之间的重要区别。</p>\n<h2 id=\"三种主要使用形式\"><a href=\"#三种主要使用形式\" class=\"headerlink\" title=\"三种主要使用形式\"></a>三种主要使用形式</h2><p>引入类型可以用来修饰成员变量/局部变量/参数/返回值</p>\n<p>注：变量声明的类型必须匹配传递给实际对象的类型（即前后尖括号中的内容必须相同）</p>\n<h3 id=\"1、泛型类\"><a href=\"#1、泛型类\" class=\"headerlink\" title=\"1、泛型类\"></a>1、泛型类</h3><blockquote>\n<p>常见的如<code>ArrayList</code>、<code>HashSet</code>、<code>HashMap</code>等等</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span><br><span class=\"hljs-comment\">// 在实例化泛型类时，必须指定T的具体类型</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Generic</span>&lt;T&gt;&#123;</span> <br>   <br>    <span class=\"hljs-keyword\">private</span> T key;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Generic</span><span class=\"hljs-params\">(T key)</span> </span>&#123; <br>        <span class=\"hljs-keyword\">this</span>.key = key;<br>    &#125;<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title\">getKey</span><span class=\"hljs-params\">()</span></span>&#123; <br>        <span class=\"hljs-keyword\">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2、泛型接口\"><a href=\"#2、泛型接口\" class=\"headerlink\" title=\"2、泛型接口\"></a>2、泛型接口</h3><blockquote>\n<p>实现泛型的接口，如<code>Iterator</code>、<code>List</code>等即为泛型接口</p>\n</blockquote>\n<p><strong>泛型接口定义</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>Generator&lt;T&gt; &#123;<br>    public T method();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实现时不指定类型\"><a href=\"#实现时不指定类型\" class=\"headerlink\" title=\"实现时不指定类型\"></a>实现时不指定类型</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-symbol\">GeneratorImpl</span>&lt;<span class=\"hljs-symbol\">T</span>&gt; <span class=\"hljs-symbol\">implements</span> <span class=\"hljs-symbol\">Generator</span>&lt;<span class=\"hljs-symbol\">T</span>&gt;&#123;<br>    @Override<br>    <span class=\"hljs-keyword\">public</span> T method() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"实现时指定类型\"><a href=\"#实现时指定类型\" class=\"headerlink\" title=\"实现时指定类型\"></a>实现时指定类型</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs \\\">class GeneratorImpl&lt;T&gt; implements Generator&lt;String&gt;&#123;<br>    @Override<br>    public String method() &#123;<br>        return &quot;hello&quot;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3、泛型方法\"><a href=\"#3、泛型方法\" class=\"headerlink\" title=\"3、泛型方法\"></a>3、泛型方法</h3><blockquote>\n<p>具有泛型参数的方法，可位于普通类/泛型类中（<strong>泛型方法不一定要写在泛型类当中</strong>）</p>\n<p>如<code>Arrays.sort()</code>等方法即是泛型方法</p>\n<p>泛型参数&lt;T&gt;在修饰符后，返回类型前，如下示例</p>\n<p>若传入参数不统一会寻找共同的<em>超类</em>，一般应该统一参数</p>\n</blockquote>\n<h4 id=\"泛型方法定义\"><a href=\"#泛型方法定义\" class=\"headerlink\" title=\"泛型方法定义\"></a>泛型方法定义</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printArray</span><span class=\"hljs-params\">( E[] inputArray )</span><br></span>&#123;         <br>\t<span class=\"hljs-keyword\">for</span> ( E element : inputArray )&#123;        <br>    \tSystem.out.<span class=\"hljs-built_in\">printf</span>( <span class=\"hljs-string\">\"%s \"</span>, element );<br>    &#125;<br>        System.out.<span class=\"hljs-built_in\">println</span>();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"泛型方法调用\"><a href=\"#泛型方法调用\" class=\"headerlink\" title=\"泛型方法调用\"></a>泛型方法调用</h4><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\">Target t = <span class=\"hljs-keyword\">new</span> Target();<br>String s = t.&lt;String&gt;<span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span>;</span>\t<span class=\"hljs-comment\">// 调用时不省略泛型</span><br>String s = t<span class=\"hljs-function\">.<span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span>;</span>\t<span class=\"hljs-comment\">// 调用时省略泛型</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"泛型限定\"><a href=\"#泛型限定\" class=\"headerlink\" title=\"泛型限定\"></a>泛型限定</h1><h2 id=\"泛型通配符\"><a href=\"#泛型通配符\" class=\"headerlink\" title=\"泛型通配符\"></a>泛型通配符</h2><h3 id=\"常用通配符\"><a href=\"#常用通配符\" class=\"headerlink\" title=\"常用通配符\"></a>常用通配符</h3><blockquote>\n<p><strong>常用的有： T，E，K，V，？</strong>（通常只将?视为通配符）</p>\n<p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。</p>\n</blockquote>\n<ul>\n<li>？ 表示不确定的 Java类型</li>\n<li>T (Template) 表示具体的一个Java类型，自定义泛型常用T</li>\n<li>K V (Key Value) 分别代表Java键值中的Key Value</li>\n<li>E (Element) 代表元素Element</li>\n</ul>\n<h3 id=\"上界通配符\"><a href=\"#上界通配符\" class=\"headerlink\" title=\"上界通配符\"></a>上界通配符</h3><p><code>&lt;? extends 类名&gt;</code>：表示能接受的参数类型可能是<em>所指定的类型本身，或者是此类型的子类</em></p>\n<blockquote>\n<p>使用上界通配符，编译器能够保证取出来的类型一定是指定类型的子类，但不保证放入的对象是什么类型</p>\n<p>所以<strong>只能进行<code>get</code>操作，而不能进行<code>set</code>操作</strong></p>\n</blockquote>\n<p>举例说明：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">Pair&lt;Apple&gt; apples = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Pair</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Apple</span>(<span class=\"hljs-number\">3</span>));<br>Pair&lt;? extends Fruit&gt; fruit = apples;<br>fruit.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Orange</span>(<span class=\"hljs-number\">3</span>));\t<span class=\"hljs-comment\">// 编译错误</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"下界通配符\"><a href=\"#下界通配符\" class=\"headerlink\" title=\"下界通配符\"></a>下界通配符</h3><p><code>&lt; ? super 类名&gt;</code>：表示参数化的类型可能是<em>所指定的类型本身，或者是此类型的父类型，直至 Object</em></p>\n<blockquote>\n<p>编译器能保证放入的是其本身或其超类（传入子类时进行类型转换），但无法保证取出的是哪个类。</p>\n<p>所以<strong>只能进行<code>set</code>操作，而不能进行<code>get</code>操作</strong></p>\n</blockquote>\n<h3 id=\"泛型PECS原则\"><a href=\"#泛型PECS原则\" class=\"headerlink\" title=\"泛型PECS原则\"></a>泛型PECS原则</h3><blockquote>\n<p>Producer Extends 泛型是生产者，向外输出，使用<code>Extends</code></p>\n</blockquote>\n<blockquote>\n<p>Consumer Super 泛型是消费者，向内增加东西，使用<code>Super</code></p>\n</blockquote>\n<h3 id=\"？和T的区别\"><a href=\"#？和T的区别\" class=\"headerlink\" title=\"？和T的区别\"></a>？和T的区别</h3><blockquote>\n<p><code>T</code>是一个<strong>确定</strong>的类型，而<code>?</code>是一个不确定的类型</p>\n<p>可以对<code>T</code>进行操作，而不能对<code>?</code>进行操作</p>\n</blockquote>\n<h3 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h3><blockquote>\n<p>使用<code>extends</code>关键字约定该类型必须是某某的<em>子类</em></p>\n</blockquote>\n<p>如<code>&lt;T extends Comparable&gt;</code>约定T必须是<code>Comparable</code>的子类</p>\n<p><code>extends</code>后可跟多个，<strong>以<code>&amp;</code>拼接</strong>，同时该限定可以有多个接口，但只能有一个类，且类必须排第一位。</p>\n<h3 id=\"泛型的类型关系\"><a href=\"#泛型的类型关系\" class=\"headerlink\" title=\"泛型的类型关系\"></a>泛型的类型关系</h3><blockquote>\n<p>Java中的泛型是不变的，即List&lt;Object&gt;与List&lt;String&gt;并无父类与子类的关系</p>\n</blockquote>\n<h1 id=\"泛型实现的本质\"><a href=\"#泛型实现的本质\" class=\"headerlink\" title=\"泛型实现的本质\"></a>泛型实现的本质</h1><h2 id=\"类型擦除\"><a href=\"#类型擦除\" class=\"headerlink\" title=\"类型擦除\"></a>类型擦除</h2><p>泛型是JDK1.5引入的新特性，因此JVM中没有泛型对象，而是采用<strong>类型擦除</strong>技术，只有普通的类和方法</p>\n<blockquote>\n<p>擦除泛型对象，替换为原始类型（无限定则替换为为Object，有限定则替换为第一个类型），使得该类与引入泛型之前的类并无不同</p>\n</blockquote>\n<p>比如：<code>Pair&lt;T&gt;</code>则可视为<code>Pair&lt;Object&gt;</code>。因为T未指定类型</p>\n<p><code>Pair&lt;T extends A &amp; B&gt;</code>则可视为<code>Pair&lt;A&gt;</code></p>\n<h2 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h2><blockquote>\n<p>擦除泛型后，编译时会进行自动类型转换</p>\n<p>即先生成一个<code>Object</code>对象，再使用强制类型转化转换为对应的对象</p>\n</blockquote>\n<h2 id=\"自动桥方法\"><a href=\"#自动桥方法\" class=\"headerlink\" title=\"自动桥方法\"></a>自动桥方法</h2><blockquote>\n<p>即泛型中自动生成的参数为<code>Object</code>方法会自动调用用户传入相关参数类型的对应方法</p>\n</blockquote>\n<blockquote>\n<p>参考：</p>\n<p>mooc华东师范大学：Java高级</p>\n<p>类型擦除：<a href=\"https://www.cnblogs.com/wuqinglong/p/9456193.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/wuqinglong/p/9456193.html</a></p>\n<p><a href=\"https://juejin.im/post/5d5789d26fb9a06ad0056bd9\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d5789d26fb9a06ad0056bd9</a></p>\n</blockquote>\n"},{"title":"Java面向对象","date":"2020-07-04T02:43:51.000Z","fileName":"java-orient-object","_content":"\n# 面向对象三大特性\n\n## 封装\n\n封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。\n\n### 访问权限修饰符\n\nJava 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。**所以Java的访问权限应该有四个**\n\n| 作用范围/关键字 | 当前类 | 同一package | 子孙类 | 其他package |\n| :-------------: | :----: | :---------: | :----: | :---------: |\n|     public      |   √    |      √      |   √    |      √      |\n|    protected    |   √    |      √      |   √    |      ×      |\n|  不使用关键字   |   √    |      √      |   ×    |      ×      |\n|     private     |   √    |      ×      |   ×    |      ×      |\n\n## 继承\n\n> 继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n\n通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高开发效率。同时，**Java语言中的继承是单继承**。\n\n1、子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，**只是拥有**。\n\n2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n\n3、子类可以用自己的方式实现父类的方法（方法重写）。\n\n### 继承的常用关键字\n\nthis：当前类对象的引用\n\nsuper：父类对象的引用，可用于访问父类成员方法与属性\n\n`super()` 访问父类构造方法，必须位于子类构造方法的**第一行**\n\n子类的构造过程必须调用其父类的构造方法，若子类构造方法中没有显式标注，则系统默认调用父类无参构造方法（若子类构造方法无显式标值且父类中没有无参构造方法，则编译出错），因此Java中每个类中都应该尽量写一个无参构造函数。\n\n\n\n## 多态\n\n> 多态通俗意义上来讲就是：不同类的对象对同一消息做出不同响应，\n\n可以分为：\n\n* 编译时多态：即方法重载\n* 运行时多态：程序运行时动态决定调用哪个方法\n\n### 向上转型\n\n> 向上转型，即父类（或者父接口）引用指向子类实例，是Java语言中多态的常见表现形式\n\n如下即为向上转型的示例，声明的是父类（父接口），实际指向的是子类的一个对象。这使得对象既可以**使用子类强大的功能**，又可以**抽取父类的共性**。\n\n```\nList l1 = new ArrayList();\nList l2 = new LinkedList();\n```\n\n### 向上转型规则\n\n向上转型**可以调用子类重现父类的方法以及父类派生的方法，无法调用子类独有的方法**，示例如下\n\n```java\n/**\n * 父类\n */\npublic class Father {\n    // 父类中的func1方法\n    // 由于子类中对该方法只是进行了重载而没有进行重写\n    // 因此该方法仍然有效\n    public void func1() {\n        System.out.println(\"Father func1\");\n    }\n\n    // 父类中的func2方法\n    // 由于在子类中重写了该方法\n    // 所以在“向上转型”中，该方法不再有效\n    // 取而代之的是子类中的fun2方法\n    public void func2() {\n        System.out.println(\"Father func2\");\n    }\n}\n\n/**\n * 子类\n */\npublic class Child extends Father {\n    // 对func1方法的一个重载\n    // 由于在父类中没有定义该方法，所以该方法不能被父类的引用调用\n    // 如果进行调用即会报错\n    public void func1(int i) {\n        System.out.println(\"Child func1\");\n    }\n\n    // 对父类方法的重写\n    // 能够起作用\n    public void func2() {\n        System.out.println(\"Child func2\");\n    }\n}\n\n/**\n * 主函数\n */\npublic class Main {\n    public static void main(String[] args) {\n\t// write your code here\n        Father test = new Child();\n        test.func1();   // Father func1\n        test.func2();   // Child func2\n        test.func1(10); // 报错\n    }\n}\n```\n\n### 向下转型\n\n> 向下转型，子类引用指向父类实例，此处要求必须进行强转\n\nJava中向上转型是安全的，由JVM自动实现，而向下转型是不安全的，需要强制类型转换。\n\n```java\nFather father = new Father();\nif(father instanceof Child) {\t// instanceof 运算符，返回 true false\n\tChild temp = (Child)father;\t// 强制类型转换\n}\n```\n\n\n\n# 嵌套类\n\n> 一个类定义在另一个类（或方法）内部\n\n嵌套类的作用：\n\n1、实现更细粒度的访问权限控制\n\n2、避免过多的类定义\n\n## 静态嵌套类\n\n> 第三方需要通过外部包围类才能够访问\n\n```java\npublic class Outer {\n    // 静态嵌套类\n    static class Inner {\n        \n    }\n}\n```\n\n## 非静态嵌套类（内部类）\n\n### 普通内部类（成员内部类）\n\n> 定义后在类中均可以使用，类似于结构体的作用\n\n```java\npublic class Outer {\n    // 成员内部类\n    public class Inner {\n        \n    }\n}\n```\n\n### 局部内部类\n\n> 定义在代码块（如方法、for/if语句中）中的非静态的类\n>\n> 只存活于该代码块内部，**代码块结束后外界无法使用该类**\n\n```java\npublic class Outer {\n    public void func() {\n        // 局部内部类\n        class Inner {\n            \n        }\n    }\n}\n```\n\n### 匿名内部类\n\n> 没有类名的内部类，必须继承一个父类/实现一个父接口，同时在实例化后迅速转为父类/父接口\n\n匿名内部类通常只使用一次\n\n```java\npublic class Outer {\n    public void func() {\n        // 匿名内部类\n        class Inner {\n            new Thread(new Runnable() {\n                public void run() {\n                    \n                }\n            }).start();\n        }\n    }\n}\n```\n\n## 四种嵌套类的比较\n\n|            | 访问权限修饰 | 作用范围                       | 可访问外部包围类内容   | 和外部类关系                            |\n| ---------- | ------------ | ------------------------------ | ---------------------- | --------------------------------------- |\n| 匿名内部类 | 无           | 所在代码块内，外部无法访问     | 访问外部的所有成员     | 在外部类对象内部                        |\n| 局部内部类 | 无           | 所在代码块内，外部无法访问     | 访问外部的所有成员     | 在外部类对象内部                        |\n| 普通内部类 | 有           | 包围类内可以访问，外部可以访问 | 访问外部的所有成员     | 外界可以new，但必须依附于一个外部类对象 |\n| 静态内部类 | 有           | 包围类内可以访问，外部可以访问 | 访问外部的所有静态成员 | 外界可以new，可独立进行工作             |\n\n\n\n# 方法\n\n## 参数传递方式\n\n### Java形参的传递方法（值传递）\n\n> 总体而言，Java总是采用按值传递的方式进行传参，即*方法得到的是所有参数值的一个拷贝*，方法不能修改传递给它的任何参数的内容\n\n**1、一个方法不能修改一个基本数据类型的参数**\n\n示例：\n\n```\npublic static void main(String[] args) {\n    int num1 = 10;\n    int num2 = 20;\n\n    swap(num1, num2);\n\n    System.out.println(\"num1 = \" + num1);\n    System.out.println(\"num2 = \" + num2);\n}\n\npublic static void swap(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n\n    System.out.println(\"a = \" + a);\n    System.out.println(\"b = \" + b);\n}\n```\n\n结果：\n\n```\na = 20\nb = 10\nnum1 = 10\nnum2 = 20\n```\n\n说明：\n\n在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的（**值传递**）。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\n\n**2、一个方法可以改变一个对象参数的状态**\n\n示例：\n\n```\npublic static void main(String[] args) {\n\tint[] arr = { 1, 2, 3, 4, 5 };\n\tSystem.out.println(arr[0]);\n\tchange(arr);\n\tSystem.out.println(arr[0]);\n}\n\npublic static void change(int[] array) {\n\t// 将数组的第一个元素变为0\n\tarray[0] = 0;\n}\n```\n\n结果：\n\n```\n1\n0\n```\n\n说明：\n\narray 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上（类似于C++ 的引用传递）。\n\n\n\n**3、一个方法不能让对象参数引用一个新的对象**\n\n示例：\n\n```\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tStudent s1 = new Student(\"小张\");\n\t\tStudent s2 = new Student(\"小李\");\n\t\tTest.swap(s1, s2);\n\t\tSystem.out.println(\"s1:\" + s1.getName());\n\t\tSystem.out.println(\"s2:\" + s2.getName());\n\t}\n\n\tpublic static void swap(Student x, Student y) {\n\t\tStudent temp = x;\n\t\tx = y;\n\t\ty = temp;\n\t\tSystem.out.println(\"x:\" + x.getName());\n\t\tSystem.out.println(\"y:\" + y.getName());\n\t}\n}\n```\n\n结果：\n\n```\nx:小李\ny:小张\ns1:小张\ns2:小李\n```\n\n说明：\n\n方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝\n\n\n\n### 深拷贝、浅拷贝\n\n1、**浅拷贝**：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。\n\n2、**深拷贝**：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。\n\n![](http://cdn.ziyedy.top/4%E3%80%81Java%EF%BC%9A%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%96%B9%E6%B3%95/java-deep-and-shallow-copy.jpg)\n\n\n\n## 方法重载（Overload）\n\n> 同样的方法根据输入数据的不同，做出不同处理（同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理）\n>\n> **每个重载的方法都有独一无二的参数列表**，包括参数的类型、顺序、参数数量等等\n>\n> 重载是发生在**编译时**的，由编译器根据参数的类型来选择使用哪个方法\n\n### 重载的条件\n\n1. 位于同一个类中，且方法名必须相同\n2. 参数列表必须不同（个数、类型、参数类型排列顺序不同）\n3. 返回值可以不同，仅返回值不同不能构成重载\n\n4. 可以有不同的访问修饰符，可以抛出不同的异常\n\n\n\n## 方法重写（Override）\n\n> 重写发生在**运行期**，是子类对父类的允许访问的方法的实现过程进行重新编写（重写就是**子类对父类方法的重新改造**，外部样子不能改变，内部逻辑可以改变）\n\n### 重写的原则\n\n1. 发生有继承关系的*父类与子类*中，且父类方法的*访问修饰符为private/final/static则表示该方法不能重写*，但是使用static修饰的方法能够被再次声明，同时构造方法不能被重写。\n2. 重写的方法必须要和父类保持一致\n\n3. 子类方法的*访问权限必须大于等于*父类方法；\n\n4. 子类方法的返回类型必须是父类方法返回类型或为其子类型。\n\n5. 子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。\n\n### 示例\n\n```java\n/**\n * 1、子类的访问权限public > 父类访问权限protected\n * 2、子类返回值是父类接口的一个类实现（父类的子类型）\n * 3、子类抛出的异常为父类抛出异常的子类\n * 使用 @Override 注解，可以让编译器帮忙检查是否满足上面的限制条件*\n */\nclass SuperClass {\n    protected List<Integer> func() throws Throwable {\n        return new ArrayList<>();\n    }\n}\n\nclass SubClass extends SuperClass {\n    @Override\n    public ArrayList<Integer> func() throws Exception {\n        return new ArrayList<>();\n    }\n}\n```\n\n\n\n# 所有类的父类——Object\n\n## 主要方法\n\n**Object类是所有类的父类**，主要提供11个方法。\n\n其中native方法即为调用非Java代码的接口，一个native方法是指该方法的实现由非Java语言实现。\n\n```\n// 用于返回当前运行时对象的Class对象。\npublic final native Class<?> getClass()\n\n// 用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap\npublic native int hashCode()\n\n// 用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等\npublic boolean equals(Object obj)\n\n// 用于创建并返回当前对象的一份拷贝。\n// 一般情况下，对于任何对象 x\n// 表达式 x.clone() != x 为true\n// x.clone().getClass() == x.getClass() 为true\n// Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会产生异常。\nprotected native Object clone() throws CloneNotSupportedException\n\n// 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。\npublic String toString()\n\n// 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\npublic final native void notify()\n\n// 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\npublic final native void notifyAll()\n\n// 不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。\npublic final native void wait(long timeout) throws InterruptedException\n\n// 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\n// 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\npublic final void wait() throws InterruptedException\n\n// 实例被垃圾回收器回收的时候触发的操作\nprotected void finalize() throws Throwable\n\n```\n\n## 常见问题\n\n### ==与equals\n\n* **==**：判断两个对象在内存中的地址是不是相等（基本数据类型==比较的是值，引用数据类型==比较的是内存地址）\n* **equals()**：通常用于判断两个对象的“值”是否相等（若类没有重写该方法，则等价于使用“==”，但通常都会对equals进行重写）\n\n### hashCode与equals\n\n* 使用`equals()`进行对比是绝对可靠的：equals()相等的两个对象它们的hashCode()也一定相等\n\n* 使用`hashCode()`进行对比不是绝对可靠的：hashCode()相等的两个对象equals()不一定相等（有时不同对象hashcode会一样）\n\n在使用`Set`等hash结构的类中存储该类时，**equals 方法被重写，则 hashCode 方法也必须被重写**\n\n如`String`重写了这两个方法，则可以在`HashMap`等类似结构中使用`String`对象。\n\n\n\n参考：\n\n> https://github.com/Snailclimb/JavaGuide","source":"_posts/编程相关/Java/Java基础/4、Java：类、对象与方法.md","raw":"---\ntitle: Java面向对象\ndate: 2020-07-04 10:43:51\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-orient-object\n---\n\n# 面向对象三大特性\n\n## 封装\n\n封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。\n\n### 访问权限修饰符\n\nJava 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。**所以Java的访问权限应该有四个**\n\n| 作用范围/关键字 | 当前类 | 同一package | 子孙类 | 其他package |\n| :-------------: | :----: | :---------: | :----: | :---------: |\n|     public      |   √    |      √      |   √    |      √      |\n|    protected    |   √    |      √      |   √    |      ×      |\n|  不使用关键字   |   √    |      √      |   ×    |      ×      |\n|     private     |   √    |      ×      |   ×    |      ×      |\n\n## 继承\n\n> 继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\n\n通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高开发效率。同时，**Java语言中的继承是单继承**。\n\n1、子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，**只是拥有**。\n\n2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n\n3、子类可以用自己的方式实现父类的方法（方法重写）。\n\n### 继承的常用关键字\n\nthis：当前类对象的引用\n\nsuper：父类对象的引用，可用于访问父类成员方法与属性\n\n`super()` 访问父类构造方法，必须位于子类构造方法的**第一行**\n\n子类的构造过程必须调用其父类的构造方法，若子类构造方法中没有显式标注，则系统默认调用父类无参构造方法（若子类构造方法无显式标值且父类中没有无参构造方法，则编译出错），因此Java中每个类中都应该尽量写一个无参构造函数。\n\n\n\n## 多态\n\n> 多态通俗意义上来讲就是：不同类的对象对同一消息做出不同响应，\n\n可以分为：\n\n* 编译时多态：即方法重载\n* 运行时多态：程序运行时动态决定调用哪个方法\n\n### 向上转型\n\n> 向上转型，即父类（或者父接口）引用指向子类实例，是Java语言中多态的常见表现形式\n\n如下即为向上转型的示例，声明的是父类（父接口），实际指向的是子类的一个对象。这使得对象既可以**使用子类强大的功能**，又可以**抽取父类的共性**。\n\n```\nList l1 = new ArrayList();\nList l2 = new LinkedList();\n```\n\n### 向上转型规则\n\n向上转型**可以调用子类重现父类的方法以及父类派生的方法，无法调用子类独有的方法**，示例如下\n\n```java\n/**\n * 父类\n */\npublic class Father {\n    // 父类中的func1方法\n    // 由于子类中对该方法只是进行了重载而没有进行重写\n    // 因此该方法仍然有效\n    public void func1() {\n        System.out.println(\"Father func1\");\n    }\n\n    // 父类中的func2方法\n    // 由于在子类中重写了该方法\n    // 所以在“向上转型”中，该方法不再有效\n    // 取而代之的是子类中的fun2方法\n    public void func2() {\n        System.out.println(\"Father func2\");\n    }\n}\n\n/**\n * 子类\n */\npublic class Child extends Father {\n    // 对func1方法的一个重载\n    // 由于在父类中没有定义该方法，所以该方法不能被父类的引用调用\n    // 如果进行调用即会报错\n    public void func1(int i) {\n        System.out.println(\"Child func1\");\n    }\n\n    // 对父类方法的重写\n    // 能够起作用\n    public void func2() {\n        System.out.println(\"Child func2\");\n    }\n}\n\n/**\n * 主函数\n */\npublic class Main {\n    public static void main(String[] args) {\n\t// write your code here\n        Father test = new Child();\n        test.func1();   // Father func1\n        test.func2();   // Child func2\n        test.func1(10); // 报错\n    }\n}\n```\n\n### 向下转型\n\n> 向下转型，子类引用指向父类实例，此处要求必须进行强转\n\nJava中向上转型是安全的，由JVM自动实现，而向下转型是不安全的，需要强制类型转换。\n\n```java\nFather father = new Father();\nif(father instanceof Child) {\t// instanceof 运算符，返回 true false\n\tChild temp = (Child)father;\t// 强制类型转换\n}\n```\n\n\n\n# 嵌套类\n\n> 一个类定义在另一个类（或方法）内部\n\n嵌套类的作用：\n\n1、实现更细粒度的访问权限控制\n\n2、避免过多的类定义\n\n## 静态嵌套类\n\n> 第三方需要通过外部包围类才能够访问\n\n```java\npublic class Outer {\n    // 静态嵌套类\n    static class Inner {\n        \n    }\n}\n```\n\n## 非静态嵌套类（内部类）\n\n### 普通内部类（成员内部类）\n\n> 定义后在类中均可以使用，类似于结构体的作用\n\n```java\npublic class Outer {\n    // 成员内部类\n    public class Inner {\n        \n    }\n}\n```\n\n### 局部内部类\n\n> 定义在代码块（如方法、for/if语句中）中的非静态的类\n>\n> 只存活于该代码块内部，**代码块结束后外界无法使用该类**\n\n```java\npublic class Outer {\n    public void func() {\n        // 局部内部类\n        class Inner {\n            \n        }\n    }\n}\n```\n\n### 匿名内部类\n\n> 没有类名的内部类，必须继承一个父类/实现一个父接口，同时在实例化后迅速转为父类/父接口\n\n匿名内部类通常只使用一次\n\n```java\npublic class Outer {\n    public void func() {\n        // 匿名内部类\n        class Inner {\n            new Thread(new Runnable() {\n                public void run() {\n                    \n                }\n            }).start();\n        }\n    }\n}\n```\n\n## 四种嵌套类的比较\n\n|            | 访问权限修饰 | 作用范围                       | 可访问外部包围类内容   | 和外部类关系                            |\n| ---------- | ------------ | ------------------------------ | ---------------------- | --------------------------------------- |\n| 匿名内部类 | 无           | 所在代码块内，外部无法访问     | 访问外部的所有成员     | 在外部类对象内部                        |\n| 局部内部类 | 无           | 所在代码块内，外部无法访问     | 访问外部的所有成员     | 在外部类对象内部                        |\n| 普通内部类 | 有           | 包围类内可以访问，外部可以访问 | 访问外部的所有成员     | 外界可以new，但必须依附于一个外部类对象 |\n| 静态内部类 | 有           | 包围类内可以访问，外部可以访问 | 访问外部的所有静态成员 | 外界可以new，可独立进行工作             |\n\n\n\n# 方法\n\n## 参数传递方式\n\n### Java形参的传递方法（值传递）\n\n> 总体而言，Java总是采用按值传递的方式进行传参，即*方法得到的是所有参数值的一个拷贝*，方法不能修改传递给它的任何参数的内容\n\n**1、一个方法不能修改一个基本数据类型的参数**\n\n示例：\n\n```\npublic static void main(String[] args) {\n    int num1 = 10;\n    int num2 = 20;\n\n    swap(num1, num2);\n\n    System.out.println(\"num1 = \" + num1);\n    System.out.println(\"num2 = \" + num2);\n}\n\npublic static void swap(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n\n    System.out.println(\"a = \" + a);\n    System.out.println(\"b = \" + b);\n}\n```\n\n结果：\n\n```\na = 20\nb = 10\nnum1 = 10\nnum2 = 20\n```\n\n说明：\n\n在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的（**值传递**）。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\n\n**2、一个方法可以改变一个对象参数的状态**\n\n示例：\n\n```\npublic static void main(String[] args) {\n\tint[] arr = { 1, 2, 3, 4, 5 };\n\tSystem.out.println(arr[0]);\n\tchange(arr);\n\tSystem.out.println(arr[0]);\n}\n\npublic static void change(int[] array) {\n\t// 将数组的第一个元素变为0\n\tarray[0] = 0;\n}\n```\n\n结果：\n\n```\n1\n0\n```\n\n说明：\n\narray 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上（类似于C++ 的引用传递）。\n\n\n\n**3、一个方法不能让对象参数引用一个新的对象**\n\n示例：\n\n```\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\t\tStudent s1 = new Student(\"小张\");\n\t\tStudent s2 = new Student(\"小李\");\n\t\tTest.swap(s1, s2);\n\t\tSystem.out.println(\"s1:\" + s1.getName());\n\t\tSystem.out.println(\"s2:\" + s2.getName());\n\t}\n\n\tpublic static void swap(Student x, Student y) {\n\t\tStudent temp = x;\n\t\tx = y;\n\t\ty = temp;\n\t\tSystem.out.println(\"x:\" + x.getName());\n\t\tSystem.out.println(\"y:\" + y.getName());\n\t}\n}\n```\n\n结果：\n\n```\nx:小李\ny:小张\ns1:小张\ns2:小李\n```\n\n说明：\n\n方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝\n\n\n\n### 深拷贝、浅拷贝\n\n1、**浅拷贝**：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。\n\n2、**深拷贝**：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。\n\n![](http://cdn.ziyedy.top/4%E3%80%81Java%EF%BC%9A%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%96%B9%E6%B3%95/java-deep-and-shallow-copy.jpg)\n\n\n\n## 方法重载（Overload）\n\n> 同样的方法根据输入数据的不同，做出不同处理（同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理）\n>\n> **每个重载的方法都有独一无二的参数列表**，包括参数的类型、顺序、参数数量等等\n>\n> 重载是发生在**编译时**的，由编译器根据参数的类型来选择使用哪个方法\n\n### 重载的条件\n\n1. 位于同一个类中，且方法名必须相同\n2. 参数列表必须不同（个数、类型、参数类型排列顺序不同）\n3. 返回值可以不同，仅返回值不同不能构成重载\n\n4. 可以有不同的访问修饰符，可以抛出不同的异常\n\n\n\n## 方法重写（Override）\n\n> 重写发生在**运行期**，是子类对父类的允许访问的方法的实现过程进行重新编写（重写就是**子类对父类方法的重新改造**，外部样子不能改变，内部逻辑可以改变）\n\n### 重写的原则\n\n1. 发生有继承关系的*父类与子类*中，且父类方法的*访问修饰符为private/final/static则表示该方法不能重写*，但是使用static修饰的方法能够被再次声明，同时构造方法不能被重写。\n2. 重写的方法必须要和父类保持一致\n\n3. 子类方法的*访问权限必须大于等于*父类方法；\n\n4. 子类方法的返回类型必须是父类方法返回类型或为其子类型。\n\n5. 子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。\n\n### 示例\n\n```java\n/**\n * 1、子类的访问权限public > 父类访问权限protected\n * 2、子类返回值是父类接口的一个类实现（父类的子类型）\n * 3、子类抛出的异常为父类抛出异常的子类\n * 使用 @Override 注解，可以让编译器帮忙检查是否满足上面的限制条件*\n */\nclass SuperClass {\n    protected List<Integer> func() throws Throwable {\n        return new ArrayList<>();\n    }\n}\n\nclass SubClass extends SuperClass {\n    @Override\n    public ArrayList<Integer> func() throws Exception {\n        return new ArrayList<>();\n    }\n}\n```\n\n\n\n# 所有类的父类——Object\n\n## 主要方法\n\n**Object类是所有类的父类**，主要提供11个方法。\n\n其中native方法即为调用非Java代码的接口，一个native方法是指该方法的实现由非Java语言实现。\n\n```\n// 用于返回当前运行时对象的Class对象。\npublic final native Class<?> getClass()\n\n// 用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap\npublic native int hashCode()\n\n// 用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等\npublic boolean equals(Object obj)\n\n// 用于创建并返回当前对象的一份拷贝。\n// 一般情况下，对于任何对象 x\n// 表达式 x.clone() != x 为true\n// x.clone().getClass() == x.getClass() 为true\n// Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会产生异常。\nprotected native Object clone() throws CloneNotSupportedException\n\n// 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。\npublic String toString()\n\n// 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\npublic final native void notify()\n\n// 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\npublic final native void notifyAll()\n\n// 不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。\npublic final native void wait(long timeout) throws InterruptedException\n\n// 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\n// 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\npublic final void wait() throws InterruptedException\n\n// 实例被垃圾回收器回收的时候触发的操作\nprotected void finalize() throws Throwable\n\n```\n\n## 常见问题\n\n### ==与equals\n\n* **==**：判断两个对象在内存中的地址是不是相等（基本数据类型==比较的是值，引用数据类型==比较的是内存地址）\n* **equals()**：通常用于判断两个对象的“值”是否相等（若类没有重写该方法，则等价于使用“==”，但通常都会对equals进行重写）\n\n### hashCode与equals\n\n* 使用`equals()`进行对比是绝对可靠的：equals()相等的两个对象它们的hashCode()也一定相等\n\n* 使用`hashCode()`进行对比不是绝对可靠的：hashCode()相等的两个对象equals()不一定相等（有时不同对象hashcode会一样）\n\n在使用`Set`等hash结构的类中存储该类时，**equals 方法被重写，则 hashCode 方法也必须被重写**\n\n如`String`重写了这两个方法，则可以在`HashMap`等类似结构中使用`String`对象。\n\n\n\n参考：\n\n> https://github.com/Snailclimb/JavaGuide","slug":"编程相关/Java/Java基础/4、Java：类、对象与方法","published":1,"updated":"2021-02-28T12:37:22.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqi002b8sjs3qhtc5rs","content":"<h1 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。</p>\n<h3 id=\"访问权限修饰符\"><a href=\"#访问权限修饰符\" class=\"headerlink\" title=\"访问权限修饰符\"></a>访问权限修饰符</h3><p>Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。<strong>所以Java的访问权限应该有四个</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">作用范围/关键字</th>\n<th align=\"center\">当前类</th>\n<th align=\"center\">同一package</th>\n<th align=\"center\">子孙类</th>\n<th align=\"center\">其他package</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不使用关键字</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><blockquote>\n<p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。</p>\n</blockquote>\n<p>通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高开发效率。同时，<strong>Java语言中的继承是单继承</strong>。</p>\n<p>1、子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</p>\n<p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p>\n<p>3、子类可以用自己的方式实现父类的方法（方法重写）。</p>\n<h3 id=\"继承的常用关键字\"><a href=\"#继承的常用关键字\" class=\"headerlink\" title=\"继承的常用关键字\"></a>继承的常用关键字</h3><p>this：当前类对象的引用</p>\n<p>super：父类对象的引用，可用于访问父类成员方法与属性</p>\n<p><code>super()</code> 访问父类构造方法，必须位于子类构造方法的<strong>第一行</strong></p>\n<p>子类的构造过程必须调用其父类的构造方法，若子类构造方法中没有显式标注，则系统默认调用父类无参构造方法（若子类构造方法无显式标值且父类中没有无参构造方法，则编译出错），因此Java中每个类中都应该尽量写一个无参构造函数。</p>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><blockquote>\n<p>多态通俗意义上来讲就是：不同类的对象对同一消息做出不同响应，</p>\n</blockquote>\n<p>可以分为：</p>\n<ul>\n<li>编译时多态：即方法重载</li>\n<li>运行时多态：程序运行时动态决定调用哪个方法</li>\n</ul>\n<h3 id=\"向上转型\"><a href=\"#向上转型\" class=\"headerlink\" title=\"向上转型\"></a>向上转型</h3><blockquote>\n<p>向上转型，即父类（或者父接口）引用指向子类实例，是Java语言中多态的常见表现形式</p>\n</blockquote>\n<p>如下即为向上转型的示例，声明的是父类（父接口），实际指向的是子类的一个对象。这使得对象既可以<strong>使用子类强大的功能</strong>，又可以<strong>抽取父类的共性</strong>。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">List</span> l1 = <span class=\"hljs-keyword\">new</span> ArrayList();<br><span class=\"hljs-built_in\">List</span> l2 = <span class=\"hljs-keyword\">new</span> LinkedList();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"向上转型规则\"><a href=\"#向上转型规则\" class=\"headerlink\" title=\"向上转型规则\"></a>向上转型规则</h3><p>向上转型<strong>可以调用子类重现父类的方法以及父类派生的方法，无法调用子类独有的方法</strong>，示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * 父类<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 父类中的func1方法</span><br>    <span class=\"hljs-comment\">// 由于子类中对该方法只是进行了重载而没有进行重写</span><br>    <span class=\"hljs-comment\">// 因此该方法仍然有效</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Father func1\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 父类中的func2方法</span><br>    <span class=\"hljs-comment\">// 由于在子类中重写了该方法</span><br>    <span class=\"hljs-comment\">// 所以在“向上转型”中，该方法不再有效</span><br>    <span class=\"hljs-comment\">// 取而代之的是子类中的fun2方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Father func2\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**<br> * 子类<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 对func1方法的一个重载</span><br>    <span class=\"hljs-comment\">// 由于在父类中没有定义该方法，所以该方法不能被父类的引用调用</span><br>    <span class=\"hljs-comment\">// 如果进行调用即会报错</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Child func1\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 对父类方法的重写</span><br>    <span class=\"hljs-comment\">// 能够起作用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Child func2\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**<br> * 主函数<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        Father test = <span class=\"hljs-keyword\">new</span> Child();<br>        test.func1();   <span class=\"hljs-comment\">// Father func1</span><br>        test.func2();   <span class=\"hljs-comment\">// Child func2</span><br>        test.func1(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h3><blockquote>\n<p>向下转型，子类引用指向父类实例，此处要求必须进行强转</p>\n</blockquote>\n<p>Java中向上转型是安全的，由JVM自动实现，而向下转型是不安全的，需要强制类型转换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Father father = <span class=\"hljs-keyword\">new</span> Father();<br><span class=\"hljs-keyword\">if</span>(father <span class=\"hljs-keyword\">instanceof</span> Child) &#123;\t<span class=\"hljs-comment\">// instanceof 运算符，返回 true false</span><br>\tChild temp = (Child)father;\t<span class=\"hljs-comment\">// 强制类型转换</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h1><blockquote>\n<p>一个类定义在另一个类（或方法）内部</p>\n</blockquote>\n<p>嵌套类的作用：</p>\n<p>1、实现更细粒度的访问权限控制</p>\n<p>2、避免过多的类定义</p>\n<h2 id=\"静态嵌套类\"><a href=\"#静态嵌套类\" class=\"headerlink\" title=\"静态嵌套类\"></a>静态嵌套类</h2><blockquote>\n<p>第三方需要通过外部包围类才能够访问</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 静态嵌套类</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"非静态嵌套类（内部类）\"><a href=\"#非静态嵌套类（内部类）\" class=\"headerlink\" title=\"非静态嵌套类（内部类）\"></a>非静态嵌套类（内部类）</h2><h3 id=\"普通内部类（成员内部类）\"><a href=\"#普通内部类（成员内部类）\" class=\"headerlink\" title=\"普通内部类（成员内部类）\"></a>普通内部类（成员内部类）</h3><blockquote>\n<p>定义后在类中均可以使用，类似于结构体的作用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 成员内部类</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><blockquote>\n<p>定义在代码块（如方法、for/if语句中）中的非静态的类</p>\n<p>只存活于该代码块内部，<strong>代码块结束后外界无法使用该类</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">// 局部内部类</span><br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><blockquote>\n<p>没有类名的内部类，必须继承一个父类/实现一个父接口，同时在实例化后迅速转为父类/父接口</p>\n</blockquote>\n<p>匿名内部类通常只使用一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">// 匿名内部类</span><br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>            <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <br>                &#125;<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四种嵌套类的比较\"><a href=\"#四种嵌套类的比较\" class=\"headerlink\" title=\"四种嵌套类的比较\"></a>四种嵌套类的比较</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>访问权限修饰</th>\n<th>作用范围</th>\n<th>可访问外部包围类内容</th>\n<th>和外部类关系</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>匿名内部类</td>\n<td>无</td>\n<td>所在代码块内，外部无法访问</td>\n<td>访问外部的所有成员</td>\n<td>在外部类对象内部</td>\n</tr>\n<tr>\n<td>局部内部类</td>\n<td>无</td>\n<td>所在代码块内，外部无法访问</td>\n<td>访问外部的所有成员</td>\n<td>在外部类对象内部</td>\n</tr>\n<tr>\n<td>普通内部类</td>\n<td>有</td>\n<td>包围类内可以访问，外部可以访问</td>\n<td>访问外部的所有成员</td>\n<td>外界可以new，但必须依附于一个外部类对象</td>\n</tr>\n<tr>\n<td>静态内部类</td>\n<td>有</td>\n<td>包围类内可以访问，外部可以访问</td>\n<td>访问外部的所有静态成员</td>\n<td>外界可以new，可独立进行工作</td>\n</tr>\n</tbody></table>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"参数传递方式\"><a href=\"#参数传递方式\" class=\"headerlink\" title=\"参数传递方式\"></a>参数传递方式</h2><h3 id=\"Java形参的传递方法（值传递）\"><a href=\"#Java形参的传递方法（值传递）\" class=\"headerlink\" title=\"Java形参的传递方法（值传递）\"></a>Java形参的传递方法（值传递）</h3><blockquote>\n<p>总体而言，Java总是采用按值传递的方式进行传参，即<em>方法得到的是所有参数值的一个拷贝</em>，方法不能修改传递给它的任何参数的内容</p>\n</blockquote>\n<p><strong>1、一个方法不能修改一个基本数据类型的参数</strong></p>\n<p>示例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> main(String[] args) &#123;<br>    <span class=\"hljs-type\">int</span> num1 = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-type\">int</span> num2 = <span class=\"hljs-number\">20</span>;<br><br>    swap(num1, num2);<br><br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"num1 = \" + num1);<br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"num2 = \" + num2);<br>&#125;<br><br><span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> swap(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">temp</span> = a;<br>    a = b;<br>    b = <span class=\"hljs-keyword\">temp</span>;<br><br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"a = \" + a);<br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"b = \" + b);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">a</span> = <span class=\"hljs-number\">20</span><br><span class=\"hljs-attr\">b</span> = <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">num1</span> = <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">num2</span> = <span class=\"hljs-number\">20</span><br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的（<strong>值传递</strong>）。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p>\n<p><strong>2、一个方法可以改变一个对象参数的状态</strong></p>\n<p>示例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> static <span class=\"hljs-built_in\">void</span> main(String[] args) &#123;<br>\t<span class=\"hljs-built_in\">int</span>[] arr = &#123; <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> &#125;;<br>\tSystem.<span class=\"hljs-keyword\">out</span>.println(arr[<span class=\"hljs-number\">0</span>]);<br>\tchange(arr);<br>\tSystem.<span class=\"hljs-keyword\">out</span>.println(arr[<span class=\"hljs-number\">0</span>]);<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> static <span class=\"hljs-built_in\">void</span> change(<span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-built_in\">array</span>) &#123;<br>\t<span class=\"hljs-comment\">// 将数组的第一个元素变为0</span><br>\t<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上（类似于C++ 的引用传递）。</p>\n<p><strong>3、一个方法不能让对象参数引用一个新的对象</strong></p>\n<p>示例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> Test &#123;<br><br>\t<span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> main(String[] args) &#123;<br>\t\t// TODO Auto-<span class=\"hljs-keyword\">generated</span> <span class=\"hljs-keyword\">method</span> stub<br>\t\tStudent s1 = <span class=\"hljs-built_in\">new</span> Student(\"小张\");<br>\t\tStudent s2 = <span class=\"hljs-built_in\">new</span> Student(\"小李\");<br>\t\tTest.swap(s1, s2);<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"s1:\" + s1.getName());<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"s2:\" + s2.getName());<br>\t&#125;<br><br>\t<span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> swap(Student x, Student y) &#123;<br>\t\tStudent <span class=\"hljs-keyword\">temp</span> = x;<br>\t\tx = y;<br>\t\ty = <span class=\"hljs-keyword\">temp</span>;<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"x:\" + x.getName());<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"y:\" + y.getName());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">x:</span>小李<br><span class=\"hljs-symbol\">y:</span>小张<br><span class=\"hljs-symbol\">s1:</span>小张<br><span class=\"hljs-symbol\">s2:</span>小李<br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</p>\n<h3 id=\"深拷贝、浅拷贝\"><a href=\"#深拷贝、浅拷贝\" class=\"headerlink\" title=\"深拷贝、浅拷贝\"></a>深拷贝、浅拷贝</h3><p>1、<strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</p>\n<p>2、<strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</p>\n<p><img src=\"http://cdn.ziyedy.top/4%E3%80%81Java%EF%BC%9A%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%96%B9%E6%B3%95/java-deep-and-shallow-copy.jpg\" alt=\"\"></p>\n<h2 id=\"方法重载（Overload）\"><a href=\"#方法重载（Overload）\" class=\"headerlink\" title=\"方法重载（Overload）\"></a>方法重载（Overload）</h2><blockquote>\n<p>同样的方法根据输入数据的不同，做出不同处理（同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理）</p>\n<p><strong>每个重载的方法都有独一无二的参数列表</strong>，包括参数的类型、顺序、参数数量等等</p>\n<p>重载是发生在<strong>编译时</strong>的，由编译器根据参数的类型来选择使用哪个方法</p>\n</blockquote>\n<h3 id=\"重载的条件\"><a href=\"#重载的条件\" class=\"headerlink\" title=\"重载的条件\"></a>重载的条件</h3><ol>\n<li><p>位于同一个类中，且方法名必须相同</p>\n</li>\n<li><p>参数列表必须不同（个数、类型、参数类型排列顺序不同）</p>\n</li>\n<li><p>返回值可以不同，仅返回值不同不能构成重载</p>\n</li>\n<li><p>可以有不同的访问修饰符，可以抛出不同的异常</p>\n</li>\n</ol>\n<h2 id=\"方法重写（Override）\"><a href=\"#方法重写（Override）\" class=\"headerlink\" title=\"方法重写（Override）\"></a>方法重写（Override）</h2><blockquote>\n<p>重写发生在<strong>运行期</strong>，是子类对父类的允许访问的方法的实现过程进行重新编写（重写就是<strong>子类对父类方法的重新改造</strong>，外部样子不能改变，内部逻辑可以改变）</p>\n</blockquote>\n<h3 id=\"重写的原则\"><a href=\"#重写的原则\" class=\"headerlink\" title=\"重写的原则\"></a>重写的原则</h3><ol>\n<li><p>发生有继承关系的<em>父类与子类</em>中，且父类方法的<em>访问修饰符为private/final/static则表示该方法不能重写</em>，但是使用static修饰的方法能够被再次声明，同时构造方法不能被重写。</p>\n</li>\n<li><p>重写的方法必须要和父类保持一致</p>\n</li>\n<li><p>子类方法的<em>访问权限必须大于等于</em>父类方法；</p>\n</li>\n<li><p>子类方法的返回类型必须是父类方法返回类型或为其子类型。</p>\n</li>\n<li><p>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。</p>\n</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * 1、子类的访问权限public &gt; 父类访问权限protected<br> * 2、子类返回值是父类接口的一个类实现（父类的子类型）<br> * 3、子类抛出的异常为父类抛出异常的子类<br> * 使用 <span class=\"hljs-doctag\">@Override</span> 注解，可以让编译器帮忙检查是否满足上面的限制条件*<br> */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SuperClass</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> List&lt;Integer&gt; <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SubClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SuperClass</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"所有类的父类——Object\"><a href=\"#所有类的父类——Object\" class=\"headerlink\" title=\"所有类的父类——Object\"></a>所有类的父类——Object</h1><h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><p><strong>Object类是所有类的父类</strong>，主要提供11个方法。</p>\n<p>其中native方法即为调用非Java代码的接口，一个native方法是指该方法的实现由非Java语言实现。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-comment\">// 用于返回当前运行时对象的Class对象。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> Class&lt;?&gt; getClass()<br><br><span class=\"hljs-comment\">// 用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-built_in\">int</span> hashCode()<br><br><span class=\"hljs-comment\">// 用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> equals(<span class=\"hljs-keyword\">Object</span> obj)<br><br><span class=\"hljs-comment\">// 用于创建并返回当前对象的一份拷贝。</span><br><span class=\"hljs-comment\">// 一般情况下，对于任何对象 x</span><br><span class=\"hljs-comment\">// 表达式 x.clone() != x 为true</span><br><span class=\"hljs-comment\">// x.clone().getClass() == x.getClass() 为true</span><br><span class=\"hljs-comment\">// Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会产生异常。</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">Object</span> clone() <span class=\"hljs-keyword\">throws</span> CloneNotSupportedException<br><br><span class=\"hljs-comment\">// 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">String</span> toString()<br><br><span class=\"hljs-comment\">// 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> notify()<br><br><span class=\"hljs-comment\">// 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> notifyAll()<br><br><span class=\"hljs-comment\">// 不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> wait(<span class=\"hljs-keyword\">long</span> timeout) <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> wait(<span class=\"hljs-keyword\">long</span> timeout, <span class=\"hljs-built_in\">int</span> nanos) <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> wait() <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 实例被垃圾回收器回收的时候触发的操作</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> finalize() <span class=\"hljs-keyword\">throws</span> Throwable<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"与equals\"><a href=\"#与equals\" class=\"headerlink\" title=\"==与equals\"></a>==与equals</h3><ul>\n<li><strong>==</strong>：判断两个对象在内存中的地址是不是相等（基本数据类型==比较的是值，引用数据类型==比较的是内存地址）</li>\n<li><strong>equals()</strong>：通常用于判断两个对象的“值”是否相等（若类没有重写该方法，则等价于使用“==”，但通常都会对equals进行重写）</li>\n</ul>\n<h3 id=\"hashCode与equals\"><a href=\"#hashCode与equals\" class=\"headerlink\" title=\"hashCode与equals\"></a>hashCode与equals</h3><ul>\n<li><p>使用<code>equals()</code>进行对比是绝对可靠的：equals()相等的两个对象它们的hashCode()也一定相等</p>\n</li>\n<li><p>使用<code>hashCode()</code>进行对比不是绝对可靠的：hashCode()相等的两个对象equals()不一定相等（有时不同对象hashcode会一样）</p>\n</li>\n</ul>\n<p>在使用<code>Set</code>等hash结构的类中存储该类时，<strong>equals 方法被重写，则 hashCode 方法也必须被重写</strong></p>\n<p>如<code>String</code>重写了这两个方法，则可以在<code>HashMap</code>等类似结构中使用<code>String</code>对象。</p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h1><h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。</p>\n<h3 id=\"访问权限修饰符\"><a href=\"#访问权限修饰符\" class=\"headerlink\" title=\"访问权限修饰符\"></a>访问权限修饰符</h3><p>Java 中有三个访问权限修饰符：private、protected 以及 public，如果不加访问修饰符，表示包级可见。<strong>所以Java的访问权限应该有四个</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">作用范围/关键字</th>\n<th align=\"center\">当前类</th>\n<th align=\"center\">同一package</th>\n<th align=\"center\">子孙类</th>\n<th align=\"center\">其他package</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">public</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">protected</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">不使用关键字</td>\n<td align=\"center\">√</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n<tr>\n<td align=\"center\">private</td>\n<td align=\"center\">√</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n<td align=\"center\">×</td>\n</tr>\n</tbody></table>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><blockquote>\n<p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。</p>\n</blockquote>\n<p>通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高开发效率。同时，<strong>Java语言中的继承是单继承</strong>。</p>\n<p>1、子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，<strong>只是拥有</strong>。</p>\n<p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p>\n<p>3、子类可以用自己的方式实现父类的方法（方法重写）。</p>\n<h3 id=\"继承的常用关键字\"><a href=\"#继承的常用关键字\" class=\"headerlink\" title=\"继承的常用关键字\"></a>继承的常用关键字</h3><p>this：当前类对象的引用</p>\n<p>super：父类对象的引用，可用于访问父类成员方法与属性</p>\n<p><code>super()</code> 访问父类构造方法，必须位于子类构造方法的<strong>第一行</strong></p>\n<p>子类的构造过程必须调用其父类的构造方法，若子类构造方法中没有显式标注，则系统默认调用父类无参构造方法（若子类构造方法无显式标值且父类中没有无参构造方法，则编译出错），因此Java中每个类中都应该尽量写一个无参构造函数。</p>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><blockquote>\n<p>多态通俗意义上来讲就是：不同类的对象对同一消息做出不同响应，</p>\n</blockquote>\n<p>可以分为：</p>\n<ul>\n<li>编译时多态：即方法重载</li>\n<li>运行时多态：程序运行时动态决定调用哪个方法</li>\n</ul>\n<h3 id=\"向上转型\"><a href=\"#向上转型\" class=\"headerlink\" title=\"向上转型\"></a>向上转型</h3><blockquote>\n<p>向上转型，即父类（或者父接口）引用指向子类实例，是Java语言中多态的常见表现形式</p>\n</blockquote>\n<p>如下即为向上转型的示例，声明的是父类（父接口），实际指向的是子类的一个对象。这使得对象既可以<strong>使用子类强大的功能</strong>，又可以<strong>抽取父类的共性</strong>。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-built_in\">List</span> l1 = <span class=\"hljs-keyword\">new</span> ArrayList();<br><span class=\"hljs-built_in\">List</span> l2 = <span class=\"hljs-keyword\">new</span> LinkedList();<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"向上转型规则\"><a href=\"#向上转型规则\" class=\"headerlink\" title=\"向上转型规则\"></a>向上转型规则</h3><p>向上转型<strong>可以调用子类重现父类的方法以及父类派生的方法，无法调用子类独有的方法</strong>，示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * 父类<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Father</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 父类中的func1方法</span><br>    <span class=\"hljs-comment\">// 由于子类中对该方法只是进行了重载而没有进行重写</span><br>    <span class=\"hljs-comment\">// 因此该方法仍然有效</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Father func1\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 父类中的func2方法</span><br>    <span class=\"hljs-comment\">// 由于在子类中重写了该方法</span><br>    <span class=\"hljs-comment\">// 所以在“向上转型”中，该方法不再有效</span><br>    <span class=\"hljs-comment\">// 取而代之的是子类中的fun2方法</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Father func2\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**<br> * 子类<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Father</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 对func1方法的一个重载</span><br>    <span class=\"hljs-comment\">// 由于在父类中没有定义该方法，所以该方法不能被父类的引用调用</span><br>    <span class=\"hljs-comment\">// 如果进行调用即会报错</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> i)</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Child func1\"</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">// 对父类方法的重写</span><br>    <span class=\"hljs-comment\">// 能够起作用</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        System.out.println(<span class=\"hljs-string\">\"Child func2\"</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**<br> * 主函数<br> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>&#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        Father test = <span class=\"hljs-keyword\">new</span> Child();<br>        test.func1();   <span class=\"hljs-comment\">// Father func1</span><br>        test.func2();   <span class=\"hljs-comment\">// Child func2</span><br>        test.func1(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"向下转型\"><a href=\"#向下转型\" class=\"headerlink\" title=\"向下转型\"></a>向下转型</h3><blockquote>\n<p>向下转型，子类引用指向父类实例，此处要求必须进行强转</p>\n</blockquote>\n<p>Java中向上转型是安全的，由JVM自动实现，而向下转型是不安全的，需要强制类型转换。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Father father = <span class=\"hljs-keyword\">new</span> Father();<br><span class=\"hljs-keyword\">if</span>(father <span class=\"hljs-keyword\">instanceof</span> Child) &#123;\t<span class=\"hljs-comment\">// instanceof 运算符，返回 true false</span><br>\tChild temp = (Child)father;\t<span class=\"hljs-comment\">// 强制类型转换</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"嵌套类\"><a href=\"#嵌套类\" class=\"headerlink\" title=\"嵌套类\"></a>嵌套类</h1><blockquote>\n<p>一个类定义在另一个类（或方法）内部</p>\n</blockquote>\n<p>嵌套类的作用：</p>\n<p>1、实现更细粒度的访问权限控制</p>\n<p>2、避免过多的类定义</p>\n<h2 id=\"静态嵌套类\"><a href=\"#静态嵌套类\" class=\"headerlink\" title=\"静态嵌套类\"></a>静态嵌套类</h2><blockquote>\n<p>第三方需要通过外部包围类才能够访问</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 静态嵌套类</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"非静态嵌套类（内部类）\"><a href=\"#非静态嵌套类（内部类）\" class=\"headerlink\" title=\"非静态嵌套类（内部类）\"></a>非静态嵌套类（内部类）</h2><h3 id=\"普通内部类（成员内部类）\"><a href=\"#普通内部类（成员内部类）\" class=\"headerlink\" title=\"普通内部类（成员内部类）\"></a>普通内部类（成员内部类）</h3><blockquote>\n<p>定义后在类中均可以使用，类似于结构体的作用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-comment\">// 成员内部类</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><blockquote>\n<p>定义在代码块（如方法、for/if语句中）中的非静态的类</p>\n<p>只存活于该代码块内部，<strong>代码块结束后外界无法使用该类</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">// 局部内部类</span><br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><blockquote>\n<p>没有类名的内部类，必须继承一个父类/实现一个父接口，同时在实例化后迅速转为父类/父接口</p>\n</blockquote>\n<p>匿名内部类通常只使用一次</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Outer</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br>        <span class=\"hljs-comment\">// 匿名内部类</span><br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Inner</span> </span>&#123;<br>            <span class=\"hljs-keyword\">new</span> Thread(<span class=\"hljs-keyword\">new</span> Runnable() &#123;<br>                <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>&#123;<br>                    <br>                &#125;<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"四种嵌套类的比较\"><a href=\"#四种嵌套类的比较\" class=\"headerlink\" title=\"四种嵌套类的比较\"></a>四种嵌套类的比较</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>访问权限修饰</th>\n<th>作用范围</th>\n<th>可访问外部包围类内容</th>\n<th>和外部类关系</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>匿名内部类</td>\n<td>无</td>\n<td>所在代码块内，外部无法访问</td>\n<td>访问外部的所有成员</td>\n<td>在外部类对象内部</td>\n</tr>\n<tr>\n<td>局部内部类</td>\n<td>无</td>\n<td>所在代码块内，外部无法访问</td>\n<td>访问外部的所有成员</td>\n<td>在外部类对象内部</td>\n</tr>\n<tr>\n<td>普通内部类</td>\n<td>有</td>\n<td>包围类内可以访问，外部可以访问</td>\n<td>访问外部的所有成员</td>\n<td>外界可以new，但必须依附于一个外部类对象</td>\n</tr>\n<tr>\n<td>静态内部类</td>\n<td>有</td>\n<td>包围类内可以访问，外部可以访问</td>\n<td>访问外部的所有静态成员</td>\n<td>外界可以new，可独立进行工作</td>\n</tr>\n</tbody></table>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"参数传递方式\"><a href=\"#参数传递方式\" class=\"headerlink\" title=\"参数传递方式\"></a>参数传递方式</h2><h3 id=\"Java形参的传递方法（值传递）\"><a href=\"#Java形参的传递方法（值传递）\" class=\"headerlink\" title=\"Java形参的传递方法（值传递）\"></a>Java形参的传递方法（值传递）</h3><blockquote>\n<p>总体而言，Java总是采用按值传递的方式进行传参，即<em>方法得到的是所有参数值的一个拷贝</em>，方法不能修改传递给它的任何参数的内容</p>\n</blockquote>\n<p><strong>1、一个方法不能修改一个基本数据类型的参数</strong></p>\n<p>示例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> main(String[] args) &#123;<br>    <span class=\"hljs-type\">int</span> num1 = <span class=\"hljs-number\">10</span>;<br>    <span class=\"hljs-type\">int</span> num2 = <span class=\"hljs-number\">20</span>;<br><br>    swap(num1, num2);<br><br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"num1 = \" + num1);<br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"num2 = \" + num2);<br>&#125;<br><br><span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> swap(<span class=\"hljs-type\">int</span> a, <span class=\"hljs-type\">int</span> b) &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">temp</span> = a;<br>    a = b;<br>    b = <span class=\"hljs-keyword\">temp</span>;<br><br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"a = \" + a);<br>    <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"b = \" + b);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">a</span> = <span class=\"hljs-number\">20</span><br><span class=\"hljs-attr\">b</span> = <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">num1</span> = <span class=\"hljs-number\">10</span><br><span class=\"hljs-attr\">num2</span> = <span class=\"hljs-number\">20</span><br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>在 swap 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 中的值，只是从 num1、num2 的复制过来的（<strong>值传递</strong>）。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。</p>\n<p><strong>2、一个方法可以改变一个对象参数的状态</strong></p>\n<p>示例：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> static <span class=\"hljs-built_in\">void</span> main(String[] args) &#123;<br>\t<span class=\"hljs-built_in\">int</span>[] arr = &#123; <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span> &#125;;<br>\tSystem.<span class=\"hljs-keyword\">out</span>.println(arr[<span class=\"hljs-number\">0</span>]);<br>\tchange(arr);<br>\tSystem.<span class=\"hljs-keyword\">out</span>.println(arr[<span class=\"hljs-number\">0</span>]);<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> static <span class=\"hljs-built_in\">void</span> change(<span class=\"hljs-built_in\">int</span>[] <span class=\"hljs-built_in\">array</span>) &#123;<br>\t<span class=\"hljs-comment\">// 将数组的第一个元素变为0</span><br>\t<span class=\"hljs-built_in\">array</span>[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-number\">1</span><br><span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>array 被初始化 arr 的拷贝也就是一个对象的引用，也就是说 array 和 arr 指向的是同一个数组对象。 因此，外部对引用对象的改变会反映到所对应的对象上（类似于C++ 的引用传递）。</p>\n<p><strong>3、一个方法不能让对象参数引用一个新的对象</strong></p>\n<p>示例：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-built_in\">public</span> <span class=\"hljs-keyword\">class</span> Test &#123;<br><br>\t<span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> main(String[] args) &#123;<br>\t\t// TODO Auto-<span class=\"hljs-keyword\">generated</span> <span class=\"hljs-keyword\">method</span> stub<br>\t\tStudent s1 = <span class=\"hljs-built_in\">new</span> Student(\"小张\");<br>\t\tStudent s2 = <span class=\"hljs-built_in\">new</span> Student(\"小李\");<br>\t\tTest.swap(s1, s2);<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"s1:\" + s1.getName());<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"s2:\" + s2.getName());<br>\t&#125;<br><br>\t<span class=\"hljs-built_in\">public</span> static <span class=\"hljs-type\">void</span> swap(Student x, Student y) &#123;<br>\t\tStudent <span class=\"hljs-keyword\">temp</span> = x;<br>\t\tx = y;<br>\t\ty = <span class=\"hljs-keyword\">temp</span>;<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"x:\" + x.getName());<br>\t\t<span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(\"y:\" + y.getName());<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\"><span class=\"hljs-symbol\">x:</span>小李<br><span class=\"hljs-symbol\">y:</span>小张<br><span class=\"hljs-symbol\">s1:</span>小张<br><span class=\"hljs-symbol\">s2:</span>小李<br></code></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<p>方法并没有改变存储在变量 s1 和 s2 中的对象引用。swap 方法的参数 x 和 y 被初始化为两个对象引用的拷贝，这个方法交换的是这两个拷贝</p>\n<h3 id=\"深拷贝、浅拷贝\"><a href=\"#深拷贝、浅拷贝\" class=\"headerlink\" title=\"深拷贝、浅拷贝\"></a>深拷贝、浅拷贝</h3><p>1、<strong>浅拷贝</strong>：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。</p>\n<p>2、<strong>深拷贝</strong>：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。</p>\n<p><img src=\"http://cdn.ziyedy.top/4%E3%80%81Java%EF%BC%9A%E7%B1%BB%E3%80%81%E5%AF%B9%E8%B1%A1%E4%B8%8E%E6%96%B9%E6%B3%95/java-deep-and-shallow-copy.jpg\" alt=\"\"></p>\n<h2 id=\"方法重载（Overload）\"><a href=\"#方法重载（Overload）\" class=\"headerlink\" title=\"方法重载（Overload）\"></a>方法重载（Overload）</h2><blockquote>\n<p>同样的方法根据输入数据的不同，做出不同处理（同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理）</p>\n<p><strong>每个重载的方法都有独一无二的参数列表</strong>，包括参数的类型、顺序、参数数量等等</p>\n<p>重载是发生在<strong>编译时</strong>的，由编译器根据参数的类型来选择使用哪个方法</p>\n</blockquote>\n<h3 id=\"重载的条件\"><a href=\"#重载的条件\" class=\"headerlink\" title=\"重载的条件\"></a>重载的条件</h3><ol>\n<li><p>位于同一个类中，且方法名必须相同</p>\n</li>\n<li><p>参数列表必须不同（个数、类型、参数类型排列顺序不同）</p>\n</li>\n<li><p>返回值可以不同，仅返回值不同不能构成重载</p>\n</li>\n<li><p>可以有不同的访问修饰符，可以抛出不同的异常</p>\n</li>\n</ol>\n<h2 id=\"方法重写（Override）\"><a href=\"#方法重写（Override）\" class=\"headerlink\" title=\"方法重写（Override）\"></a>方法重写（Override）</h2><blockquote>\n<p>重写发生在<strong>运行期</strong>，是子类对父类的允许访问的方法的实现过程进行重新编写（重写就是<strong>子类对父类方法的重新改造</strong>，外部样子不能改变，内部逻辑可以改变）</p>\n</blockquote>\n<h3 id=\"重写的原则\"><a href=\"#重写的原则\" class=\"headerlink\" title=\"重写的原则\"></a>重写的原则</h3><ol>\n<li><p>发生有继承关系的<em>父类与子类</em>中，且父类方法的<em>访问修饰符为private/final/static则表示该方法不能重写</em>，但是使用static修饰的方法能够被再次声明，同时构造方法不能被重写。</p>\n</li>\n<li><p>重写的方法必须要和父类保持一致</p>\n</li>\n<li><p>子类方法的<em>访问权限必须大于等于</em>父类方法；</p>\n</li>\n<li><p>子类方法的返回类型必须是父类方法返回类型或为其子类型。</p>\n</li>\n<li><p>子类方法抛出的异常类型必须是父类抛出异常类型或为其子类型。</p>\n</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br> * 1、子类的访问权限public &gt; 父类访问权限protected<br> * 2、子类返回值是父类接口的一个类实现（父类的子类型）<br> * 3、子类抛出的异常为父类抛出异常的子类<br> * 使用 <span class=\"hljs-doctag\">@Override</span> 注解，可以让编译器帮忙检查是否满足上面的限制条件*<br> */</span><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SuperClass</span> </span>&#123;<br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> List&lt;Integer&gt; <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Throwable </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SubClass</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">SuperClass</span> </span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> ArrayList&lt;Integer&gt; <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"所有类的父类——Object\"><a href=\"#所有类的父类——Object\" class=\"headerlink\" title=\"所有类的父类——Object\"></a>所有类的父类——Object</h1><h2 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h2><p><strong>Object类是所有类的父类</strong>，主要提供11个方法。</p>\n<p>其中native方法即为调用非Java代码的接口，一个native方法是指该方法的实现由非Java语言实现。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-comment\">// 用于返回当前运行时对象的Class对象。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> Class&lt;?&gt; getClass()<br><br><span class=\"hljs-comment\">// 用于返回对象的哈希码，主要使用在哈希表中，比如JDK中的HashMap</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-built_in\">int</span> hashCode()<br><br><span class=\"hljs-comment\">// 用于比较2个对象的内存地址是否相等，String类对该方法进行了重写用户比较字符串的值是否相等</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">boolean</span> equals(<span class=\"hljs-keyword\">Object</span> obj)<br><br><span class=\"hljs-comment\">// 用于创建并返回当前对象的一份拷贝。</span><br><span class=\"hljs-comment\">// 一般情况下，对于任何对象 x</span><br><span class=\"hljs-comment\">// 表达式 x.clone() != x 为true</span><br><span class=\"hljs-comment\">// x.clone().getClass() == x.getClass() 为true</span><br><span class=\"hljs-comment\">// Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会产生异常。</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">Object</span> clone() <span class=\"hljs-keyword\">throws</span> CloneNotSupportedException<br><br><span class=\"hljs-comment\">// 返回类的名字@实例的哈希码的16进制的字符串。建议Object所有的子类都重写这个方法。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">String</span> toString()<br><br><span class=\"hljs-comment\">// 不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> notify()<br><br><span class=\"hljs-comment\">// 不能重写。跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> notifyAll()<br><br><span class=\"hljs-comment\">// 不能重写。暂停线程的执行。注意：sleep方法没有释放锁，而wait方法释放了锁 。timeout是等待时间。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">native</span> <span class=\"hljs-keyword\">void</span> wait(<span class=\"hljs-keyword\">long</span> timeout) <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 多了nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上nanos毫秒。</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> wait(<span class=\"hljs-keyword\">long</span> timeout, <span class=\"hljs-built_in\">int</span> nanos) <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> wait() <span class=\"hljs-keyword\">throws</span> InterruptedException<br><br><span class=\"hljs-comment\">// 实例被垃圾回收器回收的时候触发的操作</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> finalize() <span class=\"hljs-keyword\">throws</span> Throwable<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2><h3 id=\"与equals\"><a href=\"#与equals\" class=\"headerlink\" title=\"==与equals\"></a>==与equals</h3><ul>\n<li><strong>==</strong>：判断两个对象在内存中的地址是不是相等（基本数据类型==比较的是值，引用数据类型==比较的是内存地址）</li>\n<li><strong>equals()</strong>：通常用于判断两个对象的“值”是否相等（若类没有重写该方法，则等价于使用“==”，但通常都会对equals进行重写）</li>\n</ul>\n<h3 id=\"hashCode与equals\"><a href=\"#hashCode与equals\" class=\"headerlink\" title=\"hashCode与equals\"></a>hashCode与equals</h3><ul>\n<li><p>使用<code>equals()</code>进行对比是绝对可靠的：equals()相等的两个对象它们的hashCode()也一定相等</p>\n</li>\n<li><p>使用<code>hashCode()</code>进行对比不是绝对可靠的：hashCode()相等的两个对象equals()不一定相等（有时不同对象hashcode会一样）</p>\n</li>\n</ul>\n<p>在使用<code>Set</code>等hash结构的类中存储该类时，<strong>equals 方法被重写，则 hashCode 方法也必须被重写</strong></p>\n<p>如<code>String</code>重写了这两个方法，则可以在<code>HashMap</code>等类似结构中使用<code>String</code>对象。</p>\n<p>参考：</p>\n<blockquote>\n<p><a href=\"https://github.com/Snailclimb/JavaGuide\" target=\"_blank\" rel=\"noopener\">https://github.com/Snailclimb/JavaGuide</a></p>\n</blockquote>\n"},{"title":"Java：异常与异常处理","date":"2020-07-28T03:38:50.000Z","fileName":"Java-exception-handle","_content":"\n## 异常分类\n\n### 异常层次结构\n\n<img src=\"http://cdn.ziyedy.top/6%E3%80%81Java%EF%BC%9A%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/exception-chart.png\" style=\"zoom:67%;\" />\n\n `java.lang`包中的`Throwable`类是所有异常的根类。它有两个重要的子类\n\n1、`Error`。程序无法处理的错误。表示运行程序中较为严重的错误，通常是代码运行时JVM出现的问题\n\n2、`Exception`。程序本身可以处理的异常。比如`RuntimeException`等等\n\n除此之外，还可以分为*检查异常*与*非检查异常*。非检查异常包括Error与RuntimeException，而检查异常则包括其他相关的异常\n\n**编译器会为检查异常配置相关处理，若没有处理会报错**\n\n\n\n### Throwable常用方法\n\n```\npublic string getMessage()\t// 返回异常发生时的简要描述\n\npublic string toString()\t// 返回异常发生时的详细信息\n\npublic void printStackTrace()\t// 在控制台上打印 Throwable 对象封装的异常信息\n```\n\n\n\n## 异常处理\n\n### try-catch-finally结构\n\n* `try`：正常业务逻辑代码\n* `catch`：当`try`发生异常时执行的代码，可以有多个，从上到下进行匹配，一个异常只能进入一个`catch`\n* `finally`：当`try`或`catch`执行结束后必须要执行的代码块\n\n```\ntry {\n\n} catch(Exception e) {\n\te.printStackTrace();\n} finally {\n\n}\n```\n\n### try-with-Resources语句\n\n> 定义于JDK 7，对**实现了`AutoCloseable`接口及其子接口的类（实现了其中的`close`方法）**，在try之后会自动调用关闭方法\n>\n> 类似于Python中的`with`语句\n\n\n\n### throws关键字\n\n> 应用于方法存在可能异常的语句，但不想在此处进行处理，即可使用`throws`\n>\n> 若一个方法可能出现异常，但没有能力处理异常，可以在方法声明处用throws子句来声明抛出异常\n\n```\npublic void method() throws Exception1, Exception2 {\n\t//可能产生异常的代码\n}\n```\n\n\n\n### throw关键字\n\n> 将产生的异常抛出\n\n\n\n### 异常抛出的规律\n\n> 1、一个方法被覆盖，则覆盖它的方法必须抛出相同的异常\n\n如下，method2抛出了Exception，那么调用它的method1也必须抛出相应的方法\n\n```\npublic void method1() throws Exception {\n    method2();\n}\n\npublic void method2() throws Exception {\n    \n}\n```\n\n> 如果父类的方法抛出了异常，那么重写的子类方法也**必须抛出那些异常的子集，不能抛出新的异常**\n\n\n\n\n\n## 自定义异常\n\n### Exception类\n\n> Exception类是所有待处理异常的父类\n>\n> 自定义异常需要继承`Exception`类或其子类\n>\n> 同时实现的关键在于其构造函数\n\n### 示例\n\n```\npublic class MyException extends Exception {\n    private String returnCode;  // 异常返回码\n    private String returnMsg;   // 异常描述信息\n\n    public MyException() {\n        super();\n    }\n\n    public MyException(String returnMsg) {\n        super(returnMsg);\n        this.returnMsg = returnMsg;\n    }\n}\n```\n\n\n\n\n\n\n\n本文参考：\n\n","source":"_posts/编程相关/Java/Java基础/6、Java：异常与异常处理.md","raw":"---\ntitle: Java：异常与异常处理\ndate: 2020-07-28 11:38:50\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: Java-exception-handle\n---\n\n## 异常分类\n\n### 异常层次结构\n\n<img src=\"http://cdn.ziyedy.top/6%E3%80%81Java%EF%BC%9A%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/exception-chart.png\" style=\"zoom:67%;\" />\n\n `java.lang`包中的`Throwable`类是所有异常的根类。它有两个重要的子类\n\n1、`Error`。程序无法处理的错误。表示运行程序中较为严重的错误，通常是代码运行时JVM出现的问题\n\n2、`Exception`。程序本身可以处理的异常。比如`RuntimeException`等等\n\n除此之外，还可以分为*检查异常*与*非检查异常*。非检查异常包括Error与RuntimeException，而检查异常则包括其他相关的异常\n\n**编译器会为检查异常配置相关处理，若没有处理会报错**\n\n\n\n### Throwable常用方法\n\n```\npublic string getMessage()\t// 返回异常发生时的简要描述\n\npublic string toString()\t// 返回异常发生时的详细信息\n\npublic void printStackTrace()\t// 在控制台上打印 Throwable 对象封装的异常信息\n```\n\n\n\n## 异常处理\n\n### try-catch-finally结构\n\n* `try`：正常业务逻辑代码\n* `catch`：当`try`发生异常时执行的代码，可以有多个，从上到下进行匹配，一个异常只能进入一个`catch`\n* `finally`：当`try`或`catch`执行结束后必须要执行的代码块\n\n```\ntry {\n\n} catch(Exception e) {\n\te.printStackTrace();\n} finally {\n\n}\n```\n\n### try-with-Resources语句\n\n> 定义于JDK 7，对**实现了`AutoCloseable`接口及其子接口的类（实现了其中的`close`方法）**，在try之后会自动调用关闭方法\n>\n> 类似于Python中的`with`语句\n\n\n\n### throws关键字\n\n> 应用于方法存在可能异常的语句，但不想在此处进行处理，即可使用`throws`\n>\n> 若一个方法可能出现异常，但没有能力处理异常，可以在方法声明处用throws子句来声明抛出异常\n\n```\npublic void method() throws Exception1, Exception2 {\n\t//可能产生异常的代码\n}\n```\n\n\n\n### throw关键字\n\n> 将产生的异常抛出\n\n\n\n### 异常抛出的规律\n\n> 1、一个方法被覆盖，则覆盖它的方法必须抛出相同的异常\n\n如下，method2抛出了Exception，那么调用它的method1也必须抛出相应的方法\n\n```\npublic void method1() throws Exception {\n    method2();\n}\n\npublic void method2() throws Exception {\n    \n}\n```\n\n> 如果父类的方法抛出了异常，那么重写的子类方法也**必须抛出那些异常的子集，不能抛出新的异常**\n\n\n\n\n\n## 自定义异常\n\n### Exception类\n\n> Exception类是所有待处理异常的父类\n>\n> 自定义异常需要继承`Exception`类或其子类\n>\n> 同时实现的关键在于其构造函数\n\n### 示例\n\n```\npublic class MyException extends Exception {\n    private String returnCode;  // 异常返回码\n    private String returnMsg;   // 异常描述信息\n\n    public MyException() {\n        super();\n    }\n\n    public MyException(String returnMsg) {\n        super(returnMsg);\n        this.returnMsg = returnMsg;\n    }\n}\n```\n\n\n\n\n\n\n\n本文参考：\n\n","slug":"编程相关/Java/Java基础/6、Java：异常与异常处理","published":1,"updated":"2021-02-28T06:44:56.033Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqj002e8sjsgdxm2sl0","content":"<h2 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h2><h3 id=\"异常层次结构\"><a href=\"#异常层次结构\" class=\"headerlink\" title=\"异常层次结构\"></a>异常层次结构</h3><img src=\"http://cdn.ziyedy.top/6%E3%80%81Java%EF%BC%9A%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/exception-chart.png\" style=\"zoom:67%;\" />\n\n<p> <code>java.lang</code>包中的<code>Throwable</code>类是所有异常的根类。它有两个重要的子类</p>\n<p>1、<code>Error</code>。程序无法处理的错误。表示运行程序中较为严重的错误，通常是代码运行时JVM出现的问题</p>\n<p>2、<code>Exception</code>。程序本身可以处理的异常。比如<code>RuntimeException</code>等等</p>\n<p>除此之外，还可以分为<em>检查异常</em>与<em>非检查异常</em>。非检查异常包括Error与RuntimeException，而检查异常则包括其他相关的异常</p>\n<p><strong>编译器会为检查异常配置相关处理，若没有处理会报错</strong></p>\n<h3 id=\"Throwable常用方法\"><a href=\"#Throwable常用方法\" class=\"headerlink\" title=\"Throwable常用方法\"></a>Throwable常用方法</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> getMessage()\t<span class=\"hljs-comment\">// 返回异常发生时的简要描述</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> toString()\t<span class=\"hljs-comment\">// 返回异常发生时的详细信息</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> printStackTrace()\t<span class=\"hljs-comment\">// 在控制台上打印 Throwable 对象封装的异常信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><h3 id=\"try-catch-finally结构\"><a href=\"#try-catch-finally结构\" class=\"headerlink\" title=\"try-catch-finally结构\"></a>try-catch-finally结构</h3><ul>\n<li><code>try</code>：正常业务逻辑代码</li>\n<li><code>catch</code>：当<code>try</code>发生异常时执行的代码，可以有多个，从上到下进行匹配，一个异常只能进入一个<code>catch</code></li>\n<li><code>finally</code>：当<code>try</code>或<code>catch</code>执行结束后必须要执行的代码块</li>\n</ul>\n<figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs julia\"><span class=\"hljs-keyword\">try</span> &#123;<br><br>&#125; <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-built_in\">Exception</span> <span class=\"hljs-literal\">e</span>) &#123;<br>\t<span class=\"hljs-literal\">e</span>.printStackTrace();<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"try-with-Resources语句\"><a href=\"#try-with-Resources语句\" class=\"headerlink\" title=\"try-with-Resources语句\"></a>try-with-Resources语句</h3><blockquote>\n<p>定义于JDK 7，对<strong>实现了<code>AutoCloseable</code>接口及其子接口的类（实现了其中的<code>close</code>方法）</strong>，在try之后会自动调用关闭方法</p>\n<p>类似于Python中的<code>with</code>语句</p>\n</blockquote>\n<h3 id=\"throws关键字\"><a href=\"#throws关键字\" class=\"headerlink\" title=\"throws关键字\"></a>throws关键字</h3><blockquote>\n<p>应用于方法存在可能异常的语句，但不想在此处进行处理，即可使用<code>throws</code></p>\n<p>若一个方法可能出现异常，但没有能力处理异常，可以在方法声明处用throws子句来声明抛出异常</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">public</span> void <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">throws</span> <span class=\"hljs-title\">Exception1</span>, <span class=\"hljs-title\">Exception2</span> <span class=\"hljs-comment\">&#123;<br>\t//可能产生异常的代码<br>&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"throw关键字\"><a href=\"#throw关键字\" class=\"headerlink\" title=\"throw关键字\"></a>throw关键字</h3><blockquote>\n<p>将产生的异常抛出</p>\n</blockquote>\n<h3 id=\"异常抛出的规律\"><a href=\"#异常抛出的规律\" class=\"headerlink\" title=\"异常抛出的规律\"></a>异常抛出的规律</h3><blockquote>\n<p>1、一个方法被覆盖，则覆盖它的方法必须抛出相同的异常</p>\n</blockquote>\n<p>如下，method2抛出了Exception，那么调用它的method1也必须抛出相应的方法</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    method2();<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果父类的方法抛出了异常，那么重写的子类方法也<strong>必须抛出那些异常的子集，不能抛出新的异常</strong></p>\n</blockquote>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><h3 id=\"Exception类\"><a href=\"#Exception类\" class=\"headerlink\" title=\"Exception类\"></a>Exception类</h3><blockquote>\n<p>Exception类是所有待处理异常的父类</p>\n<p>自定义异常需要继承<code>Exception</code>类或其子类</p>\n<p>同时实现的关键在于其构造函数</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Exception</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> returnCode;  <span class=\"hljs-comment\">// 异常返回码</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> returnMsg;   <span class=\"hljs-comment\">// 异常描述信息</span><br><br>    public <span class=\"hljs-type\">MyException</span>() &#123;<br>        <span class=\"hljs-keyword\">super</span>();<br>    &#125;<br><br>    public <span class=\"hljs-type\">MyException</span>(<span class=\"hljs-type\">String</span> returnMsg) &#123;<br>        <span class=\"hljs-keyword\">super</span>(returnMsg);<br>        <span class=\"hljs-keyword\">this</span>.returnMsg = returnMsg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>本文参考：</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"异常分类\"><a href=\"#异常分类\" class=\"headerlink\" title=\"异常分类\"></a>异常分类</h2><h3 id=\"异常层次结构\"><a href=\"#异常层次结构\" class=\"headerlink\" title=\"异常层次结构\"></a>异常层次结构</h3><img src=\"http://cdn.ziyedy.top/6%E3%80%81Java%EF%BC%9A%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/exception-chart.png\" style=\"zoom:67%;\" />\n\n<p> <code>java.lang</code>包中的<code>Throwable</code>类是所有异常的根类。它有两个重要的子类</p>\n<p>1、<code>Error</code>。程序无法处理的错误。表示运行程序中较为严重的错误，通常是代码运行时JVM出现的问题</p>\n<p>2、<code>Exception</code>。程序本身可以处理的异常。比如<code>RuntimeException</code>等等</p>\n<p>除此之外，还可以分为<em>检查异常</em>与<em>非检查异常</em>。非检查异常包括Error与RuntimeException，而检查异常则包括其他相关的异常</p>\n<p><strong>编译器会为检查异常配置相关处理，若没有处理会报错</strong></p>\n<h3 id=\"Throwable常用方法\"><a href=\"#Throwable常用方法\" class=\"headerlink\" title=\"Throwable常用方法\"></a>Throwable常用方法</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> getMessage()\t<span class=\"hljs-comment\">// 返回异常发生时的简要描述</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">string</span> toString()\t<span class=\"hljs-comment\">// 返回异常发生时的详细信息</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> printStackTrace()\t<span class=\"hljs-comment\">// 在控制台上打印 Throwable 对象封装的异常信息</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><h3 id=\"try-catch-finally结构\"><a href=\"#try-catch-finally结构\" class=\"headerlink\" title=\"try-catch-finally结构\"></a>try-catch-finally结构</h3><ul>\n<li><code>try</code>：正常业务逻辑代码</li>\n<li><code>catch</code>：当<code>try</code>发生异常时执行的代码，可以有多个，从上到下进行匹配，一个异常只能进入一个<code>catch</code></li>\n<li><code>finally</code>：当<code>try</code>或<code>catch</code>执行结束后必须要执行的代码块</li>\n</ul>\n<figure class=\"highlight julia\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs julia\"><span class=\"hljs-keyword\">try</span> &#123;<br><br>&#125; <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-built_in\">Exception</span> <span class=\"hljs-literal\">e</span>) &#123;<br>\t<span class=\"hljs-literal\">e</span>.printStackTrace();<br>&#125; <span class=\"hljs-keyword\">finally</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"try-with-Resources语句\"><a href=\"#try-with-Resources语句\" class=\"headerlink\" title=\"try-with-Resources语句\"></a>try-with-Resources语句</h3><blockquote>\n<p>定义于JDK 7，对<strong>实现了<code>AutoCloseable</code>接口及其子接口的类（实现了其中的<code>close</code>方法）</strong>，在try之后会自动调用关闭方法</p>\n<p>类似于Python中的<code>with</code>语句</p>\n</blockquote>\n<h3 id=\"throws关键字\"><a href=\"#throws关键字\" class=\"headerlink\" title=\"throws关键字\"></a>throws关键字</h3><blockquote>\n<p>应用于方法存在可能异常的语句，但不想在此处进行处理，即可使用<code>throws</code></p>\n<p>若一个方法可能出现异常，但没有能力处理异常，可以在方法声明处用throws子句来声明抛出异常</p>\n</blockquote>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs oxygene\"><span class=\"hljs-keyword\">public</span> void <span class=\"hljs-function\"><span class=\"hljs-keyword\">method</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">throws</span> <span class=\"hljs-title\">Exception1</span>, <span class=\"hljs-title\">Exception2</span> <span class=\"hljs-comment\">&#123;<br>\t//可能产生异常的代码<br>&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"throw关键字\"><a href=\"#throw关键字\" class=\"headerlink\" title=\"throw关键字\"></a>throw关键字</h3><blockquote>\n<p>将产生的异常抛出</p>\n</blockquote>\n<h3 id=\"异常抛出的规律\"><a href=\"#异常抛出的规律\" class=\"headerlink\" title=\"异常抛出的规律\"></a>异常抛出的规律</h3><blockquote>\n<p>1、一个方法被覆盖，则覆盖它的方法必须抛出相同的异常</p>\n</blockquote>\n<p>如下，method2抛出了Exception，那么调用它的method1也必须抛出相应的方法</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs aspectj\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method1</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    method2();<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method2</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果父类的方法抛出了异常，那么重写的子类方法也<strong>必须抛出那些异常的子集，不能抛出新的异常</strong></p>\n</blockquote>\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><h3 id=\"Exception类\"><a href=\"#Exception类\" class=\"headerlink\" title=\"Exception类\"></a>Exception类</h3><blockquote>\n<p>Exception类是所有待处理异常的父类</p>\n<p>自定义异常需要继承<code>Exception</code>类或其子类</p>\n<p>同时实现的关键在于其构造函数</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">public <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Exception</span> </span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> returnCode;  <span class=\"hljs-comment\">// 异常返回码</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> returnMsg;   <span class=\"hljs-comment\">// 异常描述信息</span><br><br>    public <span class=\"hljs-type\">MyException</span>() &#123;<br>        <span class=\"hljs-keyword\">super</span>();<br>    &#125;<br><br>    public <span class=\"hljs-type\">MyException</span>(<span class=\"hljs-type\">String</span> returnMsg) &#123;<br>        <span class=\"hljs-keyword\">super</span>(returnMsg);<br>        <span class=\"hljs-keyword\">this</span>.returnMsg = returnMsg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>本文参考：</p>\n"},{"title":"Java：集合与容器","date":"2020-07-10T06:34:11.000Z","fileName":"java-collection","_content":"\n# 集合框架体系\n\n\n\n\n\n# List\n\nList集合的主要实现类有ArrayList和LinkedList，分别是数据结构中顺序表和链表的实现。另外还包括栈和队列的实现类：Deque和Queue。\n\nList是元素有序并且可以重复的集合，称为序列\n\n两个主要实现类：ArrayList，LinkedList\n\n有序 元素不唯一\n\n## ArrayList\n\n在内存中分配连续的空间，实现了长度可变的数组\n\n优点：遍历元素和随机访问元素的效率比较高\n\n缺点：添加和删除需大量移动元素效率低，按照内容查询效率低\n\n\n\nArrayList底层由数组实现，动态增长，其中元素可以为null\n\n### 主要方法\n\n```\nArrayList list = new ArrayList();\nlist.add(1);\t// 向后添加\nlist.size();\t// 获取元素数量\nlist.get(1);\t// 取出索引值为1的元素\nlist.remove(2);\t// 移除索引为2的元素\n\n```\n\n\n\n### 底层实现\n\n`ArrayList`底层就是一个长度可以动态增长的Object数组，如下`elementData`。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * Default initial capacity.\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * Shared empty array instance used for empty instances.\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n    /**\n     * Shared empty array instance used for default sized empty instances. We\n     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when\n     * first element is added.\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * The array buffer into which the elements of the ArrayList are stored.\n     * The capacity of the ArrayList is the length of this array buffer. Any\n     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA\n     * will be expanded to DEFAULT_CAPACITY when the first element is added.\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * The size of the ArrayList (the number of elements it contains).\n     */\n    private int size;\n}\n```\n\nJDK1.7中，使用无参数构造方法创建`ArrayList`对象时，默认底层数组长度是10。\n\nJDK1.8中，使用无参数构造方法创建`ArrayList`对象时，默认底层数组长度是0\n\n```java\n/**\n* Constructs an empty list with an initial capacity of ten.\n*/\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\nprivate Object[] grow(int minCapacity) {\n    int oldCapacity = elementData.length;\n    if (oldCapacity > 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        int newCapacity = ArraysSupport.newLength(oldCapacity,\n                                                  minCapacity - oldCapacity, /* minimum growth */\n                                                  oldCapacity >> 1           /* preferred growth */);\n        return elementData = Arrays.copyOf(elementData, newCapacity);\n    } else {\n        return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n    }\n}\n```\n\nArrayList中提供了一个内部类Itr，实现了`Iterator`接口，实现对集合元素的遍历\n\n```java\npublic Iterator<E> iterator() {\n    return new Itr();\n}\nprivate class Itr implements Iterator<E> { }\n```\n\n\n\n\n\n## LinkedList\n\n采用双向链表方式存储\n\n缺点：遍历和随机访问元素效率低下\n\n优点：插入、删除元素效率比较高（但是前提也是必须先低效率查询才可。如果插入删除发生在头尾可以减少查询次数）\n\n\n\n`LinkedList`实现了`Deque`接口，所以除了可以作为线性表来使用外，还可以当做队列和栈来使用\n\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{\n    transient int size = 0;\n\n    /**\n     * Pointer to first node.\n     */\n    transient Node<E> first;\n\n    /**\n     * Pointer to last node.\n     */\n    transient Node<E> last;\n\n    /**\n     * Constructs an empty list.\n     */\n    public LinkedList() {\n    }\n}\n```\n\n\n\n\n\n有一个静态内部类Node，表示双向链表的节点。\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n\n\n\n\n\n\n# Set\n\n\n\n元素无序，且不可以重复的集合。\n\n## HashSet\n\n•    采用Hashtable哈希表存储结构（神奇的结构）\n\n•    优点：添加速度快 查询速度快 删除速度快\n\n•    缺点：无序\n\n\n\nHashSet是Set的一个重要元素，称为哈希集，其中元素无序且不可以重复，只允许一个null元素。\n\n\n\n## LinkedHashSet\n\n•    采用哈希表存储结构，同时使用链表维护次序\n\n•    有序（添加顺序）\n\n\n\n## TreeSet\n\n•    采用二叉树（红黑树）的存储结构\n\n•    优点：有序 查询速度比List快（按照内容查询）\n\n•    缺点：查询速度没有HashSet快\n\n\n\n### 迭代器\n\nIterator接口可以以统一的方式对各种集合元素进行遍历，调用各种集合元素的iterator()方法得到迭代器。\n\nhasNext()方法检测集合中是否还有下一个元素\n\nnext()方法返回集合中的下一个元素\n\n```\nIterator it = set.iterator();\nwhile (it.hasNext()) {\n\tSystem.out.println(it.next());\n}\n```\n\n\n\nhashCode()和equals()，用于判断是否相同，选哟进行重写  \n\n\n\nMap。以键值对的形式存储\n\nHashMap：基于哈希表的Map接口的实现，允许使用null值和null键，无序排列。\n\n\n\n排序\n\n```\nCollections.sort(list);\n```\n\n使用Comparable或Comparator接口对自定义类进行排序\n\n\n\nComparator接口\n\n强行对某个对象进行整体排序的比较函数\n\n可以将Comparator传递给sort方法（Collections.sort()或Arrays.sort）\n\nint compare()\n\n\n\nComparable接口\n\n此接口强行对实现它的每个类的对象进行整体排序\n\n\n\n","source":"_posts/编程相关/Java/Java基础/8、Java：集合与容器.md","raw":"---\ntitle: Java：集合与容器\ndate: 2020-07-10 14:34:11\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-collection\n---\n\n# 集合框架体系\n\n\n\n\n\n# List\n\nList集合的主要实现类有ArrayList和LinkedList，分别是数据结构中顺序表和链表的实现。另外还包括栈和队列的实现类：Deque和Queue。\n\nList是元素有序并且可以重复的集合，称为序列\n\n两个主要实现类：ArrayList，LinkedList\n\n有序 元素不唯一\n\n## ArrayList\n\n在内存中分配连续的空间，实现了长度可变的数组\n\n优点：遍历元素和随机访问元素的效率比较高\n\n缺点：添加和删除需大量移动元素效率低，按照内容查询效率低\n\n\n\nArrayList底层由数组实现，动态增长，其中元素可以为null\n\n### 主要方法\n\n```\nArrayList list = new ArrayList();\nlist.add(1);\t// 向后添加\nlist.size();\t// 获取元素数量\nlist.get(1);\t// 取出索引值为1的元素\nlist.remove(2);\t// 移除索引为2的元素\n\n```\n\n\n\n### 底层实现\n\n`ArrayList`底层就是一个长度可以动态增长的Object数组，如下`elementData`。\n\n```java\npublic class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n{\n    private static final long serialVersionUID = 8683452581122892189L;\n\n    /**\n     * Default initial capacity.\n     */\n    private static final int DEFAULT_CAPACITY = 10;\n\n    /**\n     * Shared empty array instance used for empty instances.\n     */\n    private static final Object[] EMPTY_ELEMENTDATA = {};\n\n    /**\n     * Shared empty array instance used for default sized empty instances. We\n     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when\n     * first element is added.\n     */\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    /**\n     * The array buffer into which the elements of the ArrayList are stored.\n     * The capacity of the ArrayList is the length of this array buffer. Any\n     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA\n     * will be expanded to DEFAULT_CAPACITY when the first element is added.\n     */\n    transient Object[] elementData; // non-private to simplify nested class access\n\n    /**\n     * The size of the ArrayList (the number of elements it contains).\n     */\n    private int size;\n}\n```\n\nJDK1.7中，使用无参数构造方法创建`ArrayList`对象时，默认底层数组长度是10。\n\nJDK1.8中，使用无参数构造方法创建`ArrayList`对象时，默认底层数组长度是0\n\n```java\n/**\n* Constructs an empty list with an initial capacity of ten.\n*/\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n\nprivate Object[] grow(int minCapacity) {\n    int oldCapacity = elementData.length;\n    if (oldCapacity > 0 || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        int newCapacity = ArraysSupport.newLength(oldCapacity,\n                                                  minCapacity - oldCapacity, /* minimum growth */\n                                                  oldCapacity >> 1           /* preferred growth */);\n        return elementData = Arrays.copyOf(elementData, newCapacity);\n    } else {\n        return elementData = new Object[Math.max(DEFAULT_CAPACITY, minCapacity)];\n    }\n}\n```\n\nArrayList中提供了一个内部类Itr，实现了`Iterator`接口，实现对集合元素的遍历\n\n```java\npublic Iterator<E> iterator() {\n    return new Itr();\n}\nprivate class Itr implements Iterator<E> { }\n```\n\n\n\n\n\n## LinkedList\n\n采用双向链表方式存储\n\n缺点：遍历和随机访问元素效率低下\n\n优点：插入、删除元素效率比较高（但是前提也是必须先低效率查询才可。如果插入删除发生在头尾可以减少查询次数）\n\n\n\n`LinkedList`实现了`Deque`接口，所以除了可以作为线性表来使用外，还可以当做队列和栈来使用\n\n```java\npublic class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n{\n    transient int size = 0;\n\n    /**\n     * Pointer to first node.\n     */\n    transient Node<E> first;\n\n    /**\n     * Pointer to last node.\n     */\n    transient Node<E> last;\n\n    /**\n     * Constructs an empty list.\n     */\n    public LinkedList() {\n    }\n}\n```\n\n\n\n\n\n有一个静态内部类Node，表示双向链表的节点。\n\n```java\nprivate static class Node<E> {\n    E item;\n    Node<E> next;\n    Node<E> prev;\n\n    Node(Node<E> prev, E element, Node<E> next) {\n        this.item = element;\n        this.next = next;\n        this.prev = prev;\n    }\n}\n```\n\n\n\n\n\n\n\n# Set\n\n\n\n元素无序，且不可以重复的集合。\n\n## HashSet\n\n•    采用Hashtable哈希表存储结构（神奇的结构）\n\n•    优点：添加速度快 查询速度快 删除速度快\n\n•    缺点：无序\n\n\n\nHashSet是Set的一个重要元素，称为哈希集，其中元素无序且不可以重复，只允许一个null元素。\n\n\n\n## LinkedHashSet\n\n•    采用哈希表存储结构，同时使用链表维护次序\n\n•    有序（添加顺序）\n\n\n\n## TreeSet\n\n•    采用二叉树（红黑树）的存储结构\n\n•    优点：有序 查询速度比List快（按照内容查询）\n\n•    缺点：查询速度没有HashSet快\n\n\n\n### 迭代器\n\nIterator接口可以以统一的方式对各种集合元素进行遍历，调用各种集合元素的iterator()方法得到迭代器。\n\nhasNext()方法检测集合中是否还有下一个元素\n\nnext()方法返回集合中的下一个元素\n\n```\nIterator it = set.iterator();\nwhile (it.hasNext()) {\n\tSystem.out.println(it.next());\n}\n```\n\n\n\nhashCode()和equals()，用于判断是否相同，选哟进行重写  \n\n\n\nMap。以键值对的形式存储\n\nHashMap：基于哈希表的Map接口的实现，允许使用null值和null键，无序排列。\n\n\n\n排序\n\n```\nCollections.sort(list);\n```\n\n使用Comparable或Comparator接口对自定义类进行排序\n\n\n\nComparator接口\n\n强行对某个对象进行整体排序的比较函数\n\n可以将Comparator传递给sort方法（Collections.sort()或Arrays.sort）\n\nint compare()\n\n\n\nComparable接口\n\n此接口强行对实现它的每个类的对象进行整体排序\n\n\n\n","slug":"编程相关/Java/Java基础/8、Java：集合与容器","published":1,"updated":"2021-02-28T15:30:35.421Z","_id":"cklp5nhql002h8sjs359q879b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"集合框架体系\"><a href=\"#集合框架体系\" class=\"headerlink\" title=\"集合框架体系\"></a>集合框架体系</h1><h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><p>List集合的主要实现类有ArrayList和LinkedList，分别是数据结构中顺序表和链表的实现。另外还包括栈和队列的实现类：Deque和Queue。</p>\n<p>List是元素有序并且可以重复的集合，称为序列</p>\n<p>两个主要实现类：ArrayList，LinkedList</p>\n<p>有序 元素不唯一</p>\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><p>在内存中分配连续的空间，实现了长度可变的数组</p>\n<p>优点：遍历元素和随机访问元素的效率比较高</p>\n<p>缺点：添加和删除需大量移动元素效率低，按照内容查询效率低</p>\n<p>ArrayList底层由数组实现，动态增长，其中元素可以为null</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">ArrayList <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> ArrayList();<br><span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-number\">1</span>);\t<span class=\"hljs-comment\">// 向后添加</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">size</span>();\t<span class=\"hljs-comment\">// 获取元素数量</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-number\">1</span>);\t<span class=\"hljs-comment\">// 取出索引值为1的元素</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// 移除索引为2的元素</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h3><p><code>ArrayList</code>底层就是一个长度可以动态增长的Object数组，如下<code>elementData</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayList</span>&lt;<span class=\"hljs-title\">E</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">RandomAccess</span>, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">8683452581122892189L</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Default initial capacity.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> DEFAULT_CAPACITY = <span class=\"hljs-number\">10</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Shared empty array instance used for empty instances.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br>    <span class=\"hljs-comment\">/**<br>     * Shared empty array instance used for default sized empty instances. We<br>     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when<br>     * first element is added.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br>    <span class=\"hljs-comment\">/**<br>     * The array buffer into which the elements of the ArrayList are stored.<br>     * The capacity of the ArrayList is the length of this array buffer. Any<br>     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>     * will be expanded to DEFAULT_CAPACITY when the first element is added.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Object[] elementData; <span class=\"hljs-comment\">// non-private to simplify nested class access</span><br><br>    <span class=\"hljs-comment\">/**<br>     * The size of the ArrayList (the number of elements it contains).<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> size;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>JDK1.7中，使用无参数构造方法创建<code>ArrayList</code>对象时，默认底层数组长度是10。</p>\n<p>JDK1.8中，使用无参数构造方法创建<code>ArrayList</code>对象时，默认底层数组长度是0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br>* Constructs an empty list with an initial capacity of ten.<br>*/</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayList</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> Object[] grow(<span class=\"hljs-keyword\">int</span> minCapacity) &#123;<br>    <span class=\"hljs-keyword\">int</span> oldCapacity = elementData.length;<br>    <span class=\"hljs-keyword\">if</span> (oldCapacity &gt; <span class=\"hljs-number\">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class=\"hljs-keyword\">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,<br>                                                  minCapacity - oldCapacity, <span class=\"hljs-comment\">/* minimum growth */</span><br>                                                  oldCapacity &gt;&gt; <span class=\"hljs-number\">1</span>           <span class=\"hljs-comment\">/* preferred growth */</span>);<br>        <span class=\"hljs-keyword\">return</span> elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> elementData = <span class=\"hljs-keyword\">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ArrayList中提供了一个内部类Itr，实现了<code>Iterator</code>接口，实现对集合元素的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterator&lt;E&gt; <span class=\"hljs-title\">iterator</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Itr();<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Itr</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Iterator</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123; &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><p>采用双向链表方式存储</p>\n<p>缺点：遍历和随机访问元素效率低下</p>\n<p>优点：插入、删除元素效率比较高（但是前提也是必须先低效率查询才可。如果插入删除发生在头尾可以减少查询次数）</p>\n<p><code>LinkedList</code>实现了<code>Deque</code>接口，所以除了可以作为线性表来使用外，还可以当做队列和栈来使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>    <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractSequentialList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">Deque</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Pointer to first node.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Node&lt;E&gt; first;<br><br>    <span class=\"hljs-comment\">/**<br>     * Pointer to last node.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Node&lt;E&gt; last;<br><br>    <span class=\"hljs-comment\">/**<br>     * Constructs an empty list.<br>     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedList</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>有一个静态内部类Node，表示双向链表的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class=\"hljs-keyword\">this</span>.item = element;<br>        <span class=\"hljs-keyword\">this</span>.next = next;<br>        <span class=\"hljs-keyword\">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>元素无序，且不可以重复的集合。</p>\n<h2 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h2><p>•    采用Hashtable哈希表存储结构（神奇的结构）</p>\n<p>•    优点：添加速度快 查询速度快 删除速度快</p>\n<p>•    缺点：无序</p>\n<p>HashSet是Set的一个重要元素，称为哈希集，其中元素无序且不可以重复，只允许一个null元素。</p>\n<h2 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h2><p>•    采用哈希表存储结构，同时使用链表维护次序</p>\n<p>•    有序（添加顺序）</p>\n<h2 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h2><p>•    采用二叉树（红黑树）的存储结构</p>\n<p>•    优点：有序 查询速度比List快（按照内容查询）</p>\n<p>•    缺点：查询速度没有HashSet快</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>Iterator接口可以以统一的方式对各种集合元素进行遍历，调用各种集合元素的iterator()方法得到迭代器。</p>\n<p>hasNext()方法检测集合中是否还有下一个元素</p>\n<p>next()方法返回集合中的下一个元素</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">Iterator <span class=\"hljs-keyword\">it</span> = <span class=\"hljs-keyword\">set</span>.iterator();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">it</span>.hasNext()) &#123;<br>\tSystem.out.println(<span class=\"hljs-keyword\">it</span>.next());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>hashCode()和equals()，用于判断是否相同，选哟进行重写  </p>\n<p>Map。以键值对的形式存储</p>\n<p>HashMap：基于哈希表的Map接口的实现，允许使用null值和null键，无序排列。</p>\n<p>排序</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>);<br></code></pre></td></tr></table></figure>\n\n<p>使用Comparable或Comparator接口对自定义类进行排序</p>\n<p>Comparator接口</p>\n<p>强行对某个对象进行整体排序的比较函数</p>\n<p>可以将Comparator传递给sort方法（Collections.sort()或Arrays.sort）</p>\n<p>int compare()</p>\n<p>Comparable接口</p>\n<p>此接口强行对实现它的每个类的对象进行整体排序</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"集合框架体系\"><a href=\"#集合框架体系\" class=\"headerlink\" title=\"集合框架体系\"></a>集合框架体系</h1><h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><p>List集合的主要实现类有ArrayList和LinkedList，分别是数据结构中顺序表和链表的实现。另外还包括栈和队列的实现类：Deque和Queue。</p>\n<p>List是元素有序并且可以重复的集合，称为序列</p>\n<p>两个主要实现类：ArrayList，LinkedList</p>\n<p>有序 元素不唯一</p>\n<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><p>在内存中分配连续的空间，实现了长度可变的数组</p>\n<p>优点：遍历元素和随机访问元素的效率比较高</p>\n<p>缺点：添加和删除需大量移动元素效率低，按照内容查询效率低</p>\n<p>ArrayList底层由数组实现，动态增长，其中元素可以为null</p>\n<h3 id=\"主要方法\"><a href=\"#主要方法\" class=\"headerlink\" title=\"主要方法\"></a>主要方法</h3><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\">ArrayList <span class=\"hljs-built_in\">list</span> = <span class=\"hljs-keyword\">new</span> ArrayList();<br><span class=\"hljs-built_in\">list</span>.add(<span class=\"hljs-number\">1</span>);\t<span class=\"hljs-comment\">// 向后添加</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">size</span>();\t<span class=\"hljs-comment\">// 获取元素数量</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">get</span>(<span class=\"hljs-number\">1</span>);\t<span class=\"hljs-comment\">// 取出索引值为1的元素</span><br><span class=\"hljs-built_in\">list</span>.<span class=\"hljs-built_in\">remove</span>(<span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// 移除索引为2的元素</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"底层实现\"><a href=\"#底层实现\" class=\"headerlink\" title=\"底层实现\"></a>底层实现</h3><p><code>ArrayList</code>底层就是一个长度可以动态增长的Object数组，如下<code>elementData</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ArrayList</span>&lt;<span class=\"hljs-title\">E</span>&gt; <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">RandomAccess</span>, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">8683452581122892189L</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Default initial capacity.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> DEFAULT_CAPACITY = <span class=\"hljs-number\">10</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Shared empty array instance used for empty instances.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br>    <span class=\"hljs-comment\">/**<br>     * Shared empty array instance used for default sized empty instances. We<br>     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when<br>     * first element is added.<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br><br>    <span class=\"hljs-comment\">/**<br>     * The array buffer into which the elements of the ArrayList are stored.<br>     * The capacity of the ArrayList is the length of this array buffer. Any<br>     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>     * will be expanded to DEFAULT_CAPACITY when the first element is added.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Object[] elementData; <span class=\"hljs-comment\">// non-private to simplify nested class access</span><br><br>    <span class=\"hljs-comment\">/**<br>     * The size of the ArrayList (the number of elements it contains).<br>     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> size;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>JDK1.7中，使用无参数构造方法创建<code>ArrayList</code>对象时，默认底层数组长度是10。</p>\n<p>JDK1.8中，使用无参数构造方法创建<code>ArrayList</code>对象时，默认底层数组长度是0</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**<br>* Constructs an empty list with an initial capacity of ten.<br>*/</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">ArrayList</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br><br><span class=\"hljs-keyword\">private</span> Object[] grow(<span class=\"hljs-keyword\">int</span> minCapacity) &#123;<br>    <span class=\"hljs-keyword\">int</span> oldCapacity = elementData.length;<br>    <span class=\"hljs-keyword\">if</span> (oldCapacity &gt; <span class=\"hljs-number\">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;<br>        <span class=\"hljs-keyword\">int</span> newCapacity = ArraysSupport.newLength(oldCapacity,<br>                                                  minCapacity - oldCapacity, <span class=\"hljs-comment\">/* minimum growth */</span><br>                                                  oldCapacity &gt;&gt; <span class=\"hljs-number\">1</span>           <span class=\"hljs-comment\">/* preferred growth */</span>);<br>        <span class=\"hljs-keyword\">return</span> elementData = Arrays.copyOf(elementData, newCapacity);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> elementData = <span class=\"hljs-keyword\">new</span> Object[Math.max(DEFAULT_CAPACITY, minCapacity)];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>ArrayList中提供了一个内部类Itr，实现了<code>Iterator</code>接口，实现对集合元素的遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Iterator&lt;E&gt; <span class=\"hljs-title\">iterator</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> Itr();<br>&#125;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Itr</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Iterator</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123; &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><p>采用双向链表方式存储</p>\n<p>缺点：遍历和随机访问元素效率低下</p>\n<p>优点：插入、删除元素效率比较高（但是前提也是必须先低效率查询才可。如果插入删除发生在头尾可以减少查询次数）</p>\n<p><code>LinkedList</code>实现了<code>Deque</code>接口，所以除了可以作为线性表来使用外，还可以当做队列和栈来使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>    <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AbstractSequentialList</span>&lt;<span class=\"hljs-title\">E</span>&gt;<br>    <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">Deque</span>&lt;<span class=\"hljs-title\">E</span>&gt;, <span class=\"hljs-title\">Cloneable</span>, <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">io</span>.<span class=\"hljs-title\">Serializable</span><br></span>&#123;<br>    <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-keyword\">int</span> size = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-comment\">/**<br>     * Pointer to first node.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Node&lt;E&gt; first;<br><br>    <span class=\"hljs-comment\">/**<br>     * Pointer to last node.<br>     */</span><br>    <span class=\"hljs-keyword\">transient</span> Node&lt;E&gt; last;<br><br>    <span class=\"hljs-comment\">/**<br>     * Constructs an empty list.<br>     */</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">LinkedList</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<p>有一个静态内部类Node，表示双向链表的节点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">E</span>&gt; </span>&#123;<br>    E item;<br>    Node&lt;E&gt; next;<br>    Node&lt;E&gt; prev;<br><br>    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;<br>        <span class=\"hljs-keyword\">this</span>.item = element;<br>        <span class=\"hljs-keyword\">this</span>.next = next;<br>        <span class=\"hljs-keyword\">this</span>.prev = prev;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>元素无序，且不可以重复的集合。</p>\n<h2 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h2><p>•    采用Hashtable哈希表存储结构（神奇的结构）</p>\n<p>•    优点：添加速度快 查询速度快 删除速度快</p>\n<p>•    缺点：无序</p>\n<p>HashSet是Set的一个重要元素，称为哈希集，其中元素无序且不可以重复，只允许一个null元素。</p>\n<h2 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h2><p>•    采用哈希表存储结构，同时使用链表维护次序</p>\n<p>•    有序（添加顺序）</p>\n<h2 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h2><p>•    采用二叉树（红黑树）的存储结构</p>\n<p>•    优点：有序 查询速度比List快（按照内容查询）</p>\n<p>•    缺点：查询速度没有HashSet快</p>\n<h3 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h3><p>Iterator接口可以以统一的方式对各种集合元素进行遍历，调用各种集合元素的iterator()方法得到迭代器。</p>\n<p>hasNext()方法检测集合中是否还有下一个元素</p>\n<p>next()方法返回集合中的下一个元素</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\">Iterator <span class=\"hljs-keyword\">it</span> = <span class=\"hljs-keyword\">set</span>.iterator();<br><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">it</span>.hasNext()) &#123;<br>\tSystem.out.println(<span class=\"hljs-keyword\">it</span>.next());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>hashCode()和equals()，用于判断是否相同，选哟进行重写  </p>\n<p>Map。以键值对的形式存储</p>\n<p>HashMap：基于哈希表的Map接口的实现，允许使用null值和null键，无序排列。</p>\n<p>排序</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>);<br></code></pre></td></tr></table></figure>\n\n<p>使用Comparable或Comparator接口对自定义类进行排序</p>\n<p>Comparator接口</p>\n<p>强行对某个对象进行整体排序的比较函数</p>\n<p>可以将Comparator传递给sort方法（Collections.sort()或Arrays.sort）</p>\n<p>int compare()</p>\n<p>Comparable接口</p>\n<p>此接口强行对实现它的每个类的对象进行整体排序</p>\n"},{"title":"Java：接口与抽象类","date":"2020-07-28T03:38:34.000Z","fileName":"java-interface-abstractclass","_content":"\n\n\n\n\n\n\nabstract关键字\n\n抽象类，无法进行实例化的类（可以通过向上转型指向子类实例 ）\n\n抽象方法：子类必须进行实现（或者子类也设置为抽象类），在父类定义时不能有方法体\n\n\n\n包含抽象方法的类是抽象类\n\n抽象类中可以没有抽象方法\n\nstatic/final/private不能与abstract共存\n\n\n\n接口：命名通常以“I”打头\n\n接口定义了某一批类所需要遵守的规范\n\n接口不关心这些类的内部数据，也不关心类中方法的实现细节，只规定这些类中必须提供某些方法\n\n\n\n\n\n接口访问修饰符：public 默认\n\n接口中抽象方法可以不写abstract关键字\n\n作为接口的实现类必须实现接口中定义的所有方法，否则需要将该类设置为抽象类\n\n接口中可以包含常量，默认public static final\n\n```\npublic interface ITest {\n    public void func();\n}\n```\n\n\n\n```\npublic class A implements ITest {\n\n    @java.lang.Override\n    public void func() {\n\n    }\n}\n```\n\n\n\n```\nINet net = new A();\n\n```\n\n\n\ndefault 关键字\n\n```\npublic interface ITest {\n\t// 默认方法\n\tdefault void func1() {\n\t\t\n\t}\n\t// 静态方法\n\tstatic void func2() {\n\t\n\t}\n}\n\n// 调用接口中的默认方法\nITest.super.func1();\n```\n\n接口的继承，可以一对多\n\n\n\n\n\n### 接口与抽象类的区别\n\n1、 ","source":"_posts/编程相关/Java/Java基础/5、Java：接口与抽象类.md","raw":"---\ntitle: Java：接口与抽象类\ndate: 2020-07-28 11:38:34\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-interface-abstractclass\n---\n\n\n\n\n\n\n\nabstract关键字\n\n抽象类，无法进行实例化的类（可以通过向上转型指向子类实例 ）\n\n抽象方法：子类必须进行实现（或者子类也设置为抽象类），在父类定义时不能有方法体\n\n\n\n包含抽象方法的类是抽象类\n\n抽象类中可以没有抽象方法\n\nstatic/final/private不能与abstract共存\n\n\n\n接口：命名通常以“I”打头\n\n接口定义了某一批类所需要遵守的规范\n\n接口不关心这些类的内部数据，也不关心类中方法的实现细节，只规定这些类中必须提供某些方法\n\n\n\n\n\n接口访问修饰符：public 默认\n\n接口中抽象方法可以不写abstract关键字\n\n作为接口的实现类必须实现接口中定义的所有方法，否则需要将该类设置为抽象类\n\n接口中可以包含常量，默认public static final\n\n```\npublic interface ITest {\n    public void func();\n}\n```\n\n\n\n```\npublic class A implements ITest {\n\n    @java.lang.Override\n    public void func() {\n\n    }\n}\n```\n\n\n\n```\nINet net = new A();\n\n```\n\n\n\ndefault 关键字\n\n```\npublic interface ITest {\n\t// 默认方法\n\tdefault void func1() {\n\t\t\n\t}\n\t// 静态方法\n\tstatic void func2() {\n\t\n\t}\n}\n\n// 调用接口中的默认方法\nITest.super.func1();\n```\n\n接口的继承，可以一对多\n\n\n\n\n\n### 接口与抽象类的区别\n\n1、 ","slug":"编程相关/Java/Java基础/5、Java：接口与抽象类","published":1,"updated":"2021-02-28T06:44:31.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqm002k8sjs4co82wgm","content":"<p>abstract关键字</p>\n<p>抽象类，无法进行实例化的类（可以通过向上转型指向子类实例 ）</p>\n<p>抽象方法：子类必须进行实现（或者子类也设置为抽象类），在父类定义时不能有方法体</p>\n<p>包含抽象方法的类是抽象类</p>\n<p>抽象类中可以没有抽象方法</p>\n<p>static/final/private不能与abstract共存</p>\n<p>接口：命名通常以“I”打头</p>\n<p>接口定义了某一批类所需要遵守的规范</p>\n<p>接口不关心这些类的内部数据，也不关心类中方法的实现细节，只规定这些类中必须提供某些方法</p>\n<p>接口访问修饰符：public 默认</p>\n<p>接口中抽象方法可以不写abstract关键字</p>\n<p>作为接口的实现类必须实现接口中定义的所有方法，否则需要将该类设置为抽象类</p>\n<p>接口中可以包含常量，默认public static final</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>ITest &#123;<br>    public void func();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITest</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@java</span>.lang.<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">INet net</span> = new A();<br></code></pre></td></tr></table></figure>\n\n\n\n<p>default 关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITest</span> </span>&#123;<br>\t<span class=\"hljs-comment\">// 默认方法</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\t<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 静态方法</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 调用接口中的默认方法</span><br>ITest.<span class=\"hljs-keyword\">super</span>.func1();<br></code></pre></td></tr></table></figure>\n\n<p>接口的继承，可以一对多</p>\n<h3 id=\"接口与抽象类的区别\"><a href=\"#接口与抽象类的区别\" class=\"headerlink\" title=\"接口与抽象类的区别\"></a>接口与抽象类的区别</h3><p>1、 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>abstract关键字</p>\n<p>抽象类，无法进行实例化的类（可以通过向上转型指向子类实例 ）</p>\n<p>抽象方法：子类必须进行实现（或者子类也设置为抽象类），在父类定义时不能有方法体</p>\n<p>包含抽象方法的类是抽象类</p>\n<p>抽象类中可以没有抽象方法</p>\n<p>static/final/private不能与abstract共存</p>\n<p>接口：命名通常以“I”打头</p>\n<p>接口定义了某一批类所需要遵守的规范</p>\n<p>接口不关心这些类的内部数据，也不关心类中方法的实现细节，只规定这些类中必须提供某些方法</p>\n<p>接口访问修饰符：public 默认</p>\n<p>接口中抽象方法可以不写abstract关键字</p>\n<p>作为接口的实现类必须实现接口中定义的所有方法，否则需要将该类设置为抽象类</p>\n<p>接口中可以包含常量，默认public static final</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">public<span class=\"hljs-built_in\"> interface </span>ITest &#123;<br>    public void func();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITest</span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@java</span>.lang.<span class=\"hljs-function\">Override<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">()</span> </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">INet net</span> = new A();<br></code></pre></td></tr></table></figure>\n\n\n\n<p>default 关键字</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">ITest</span> </span>&#123;<br>\t<span class=\"hljs-comment\">// 默认方法</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func1</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t\t<br>\t&#125;<br>\t<span class=\"hljs-comment\">// 静态方法</span><br>\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">func2</span><span class=\"hljs-params\">()</span> </span>&#123;<br>\t<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 调用接口中的默认方法</span><br>ITest.<span class=\"hljs-keyword\">super</span>.func1();<br></code></pre></td></tr></table></figure>\n\n<p>接口的继承，可以一对多</p>\n<h3 id=\"接口与抽象类的区别\"><a href=\"#接口与抽象类的区别\" class=\"headerlink\" title=\"接口与抽象类的区别\"></a>接口与抽象类的区别</h3><p>1、 </p>\n"},{"title":"Java中的输入输出流","date":"2020-07-28T00:21:32.000Z","fileName":"java-input-output-stream","_content":"\n## 概况\n\nJava 的 I/O 大概可以分成以下几类：\n\n- 磁盘操作：File\n- 字节操作：InputStream 和 OutputStream\n- 字符操作：Reader 和 Writer\n- 对象操作：Serializable\n- 网络操作：Socket\n- 新的输入/输出：NIO\n\n### 字节操作\n\n\n\n从文件系统中的某个文件中获得输入字节\n\n用于读取如图像数据之类的原始字节流\n\n\n\n| 方法名                    | 描述                                                   |\n| ------------------------- | ------------------------------------------------------ |\n| public int read()         | 从输入流中读取一个数据字节                             |\n| public int read(byte[] b) | 从输入流中将最多b.length个字节的数据据读入一个byte数组 |\n| public void close()       | 关闭此文件输入流并释放与此流有关的所有系统资源         |\n\nn表示长度\n\n\n\n### 输入字节流：InputStream\n\n> `InputStream`是一个抽象类，是所有输入流的超类，最重要的方法为`int read()`方法，返回字节的int值，返回`-1`表示无法继续读取。\n>\n> 常用的子类有`FileInputStream`，从文件流中读取数据。\n\n#### 示例\n\n```\npublic static void main(String[] args) throws IOException {\n    InputStream input = new FileInputStream(\"aa.txt\");\n    while (true) {\n        int n = input.read();\n        if(n == -1)\n            break;\n        System.out.println(n);\n    }\n    input.close();\t// 最后需要关闭\n}\n```\n\n#### 常用写法\n\n> 使用`try(resource)`语法，让编译器自动关闭资源\n>\n> 编译器只看`try(resource = ...)`中的对象是否实现了`java.lang.AutoCloseable`接口，如果实现了，就自动加上`finally`语句并调用`close()`方法。\n\n```\ntry (InputStream input = new FileInputStream(\"src/readme.txt\")) {\n    int n;\n    while ((n = input.read()) != -1) {\n        System.out.println(n);\n    }\n}\n```\n\n\n\n\n\n### 输出字节流：OutputStream\n\n\n\n\n\n### 缓冲输入流：BufferedInputStream\n\n\n\n\n\n### 缓冲输出流：BufferedOutputStream\n\n缓冲区满了自动写入，不满不写入，则需要调用`flush()`方法\n\n```\nBufferedOutputStream(OutputStream out)\n\n// 创建size大小的buffer\nBufferedOutputStream(OutputStream out, int size)\n```\n\n\n\n|              |            |\n| ------------ | ---------- |\n| void flush() | 清空缓冲区 |\n|              |            |\n|              |            |\n\n\n\n### 字符输入流：Reader\n\n字节字符转换流\n\nInputStreamReader\n\n```\nInputStreamReader(InputSteam in)\n```\n\n\n\n\n\n\n\n\n\n\n\n### 参考链接\n\nhttps://zhuanlan.zhihu.com/p/25418336\n\nhttps://www.liaoxuefeng.com/\n\n","source":"_posts/编程相关/Java/Java基础/7、Java：文件流读写.md","raw":"---\ntitle: Java中的输入输出流\ndate: 2020-07-28 08:21:32\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-input-output-stream\n---\n\n## 概况\n\nJava 的 I/O 大概可以分成以下几类：\n\n- 磁盘操作：File\n- 字节操作：InputStream 和 OutputStream\n- 字符操作：Reader 和 Writer\n- 对象操作：Serializable\n- 网络操作：Socket\n- 新的输入/输出：NIO\n\n### 字节操作\n\n\n\n从文件系统中的某个文件中获得输入字节\n\n用于读取如图像数据之类的原始字节流\n\n\n\n| 方法名                    | 描述                                                   |\n| ------------------------- | ------------------------------------------------------ |\n| public int read()         | 从输入流中读取一个数据字节                             |\n| public int read(byte[] b) | 从输入流中将最多b.length个字节的数据据读入一个byte数组 |\n| public void close()       | 关闭此文件输入流并释放与此流有关的所有系统资源         |\n\nn表示长度\n\n\n\n### 输入字节流：InputStream\n\n> `InputStream`是一个抽象类，是所有输入流的超类，最重要的方法为`int read()`方法，返回字节的int值，返回`-1`表示无法继续读取。\n>\n> 常用的子类有`FileInputStream`，从文件流中读取数据。\n\n#### 示例\n\n```\npublic static void main(String[] args) throws IOException {\n    InputStream input = new FileInputStream(\"aa.txt\");\n    while (true) {\n        int n = input.read();\n        if(n == -1)\n            break;\n        System.out.println(n);\n    }\n    input.close();\t// 最后需要关闭\n}\n```\n\n#### 常用写法\n\n> 使用`try(resource)`语法，让编译器自动关闭资源\n>\n> 编译器只看`try(resource = ...)`中的对象是否实现了`java.lang.AutoCloseable`接口，如果实现了，就自动加上`finally`语句并调用`close()`方法。\n\n```\ntry (InputStream input = new FileInputStream(\"src/readme.txt\")) {\n    int n;\n    while ((n = input.read()) != -1) {\n        System.out.println(n);\n    }\n}\n```\n\n\n\n\n\n### 输出字节流：OutputStream\n\n\n\n\n\n### 缓冲输入流：BufferedInputStream\n\n\n\n\n\n### 缓冲输出流：BufferedOutputStream\n\n缓冲区满了自动写入，不满不写入，则需要调用`flush()`方法\n\n```\nBufferedOutputStream(OutputStream out)\n\n// 创建size大小的buffer\nBufferedOutputStream(OutputStream out, int size)\n```\n\n\n\n|              |            |\n| ------------ | ---------- |\n| void flush() | 清空缓冲区 |\n|              |            |\n|              |            |\n\n\n\n### 字符输入流：Reader\n\n字节字符转换流\n\nInputStreamReader\n\n```\nInputStreamReader(InputSteam in)\n```\n\n\n\n\n\n\n\n\n\n\n\n### 参考链接\n\nhttps://zhuanlan.zhihu.com/p/25418336\n\nhttps://www.liaoxuefeng.com/\n\n","slug":"编程相关/Java/Java基础/7、Java：文件流读写","published":1,"updated":"2021-02-28T06:45:06.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqo002n8sjsfcdyg9pl","content":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>Java 的 I/O 大概可以分成以下几类：</p>\n<ul>\n<li>磁盘操作：File</li>\n<li>字节操作：InputStream 和 OutputStream</li>\n<li>字符操作：Reader 和 Writer</li>\n<li>对象操作：Serializable</li>\n<li>网络操作：Socket</li>\n<li>新的输入/输出：NIO</li>\n</ul>\n<h3 id=\"字节操作\"><a href=\"#字节操作\" class=\"headerlink\" title=\"字节操作\"></a>字节操作</h3><p>从文件系统中的某个文件中获得输入字节</p>\n<p>用于读取如图像数据之类的原始字节流</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public int read()</td>\n<td>从输入流中读取一个数据字节</td>\n</tr>\n<tr>\n<td>public int read(byte[] b)</td>\n<td>从输入流中将最多b.length个字节的数据据读入一个byte数组</td>\n</tr>\n<tr>\n<td>public void close()</td>\n<td>关闭此文件输入流并释放与此流有关的所有系统资源</td>\n</tr>\n</tbody></table>\n<p>n表示长度</p>\n<h3 id=\"输入字节流：InputStream\"><a href=\"#输入字节流：InputStream\" class=\"headerlink\" title=\"输入字节流：InputStream\"></a>输入字节流：InputStream</h3><blockquote>\n<p><code>InputStream</code>是一个抽象类，是所有输入流的超类，最重要的方法为<code>int read()</code>方法，返回字节的int值，返回<code>-1</code>表示无法继续读取。</p>\n<p>常用的子类有<code>FileInputStream</code>，从文件流中读取数据。</p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> throws IOException </span>&#123;<br>    InputStream input = <span class=\"hljs-keyword\">new</span> FileInputStream(<span class=\"hljs-string\">\"aa.txt\"</span>);<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">int</span> n = input.<span class=\"hljs-built_in\">read</span>();<br>        <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">-1</span>)<br>            <span class=\"hljs-keyword\">break</span>;<br>        System.out.<span class=\"hljs-built_in\">println</span>(n);<br>    &#125;<br>    input.<span class=\"hljs-built_in\">close</span>();\t<span class=\"hljs-comment\">// 最后需要关闭</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用写法\"><a href=\"#常用写法\" class=\"headerlink\" title=\"常用写法\"></a>常用写法</h4><blockquote>\n<p>使用<code>try(resource)</code>语法，让编译器自动关闭资源</p>\n<p>编译器只看<code>try(resource = ...)</code>中的对象是否实现了<code>java.lang.AutoCloseable</code>接口，如果实现了，就自动加上<code>finally</code>语句并调用<code>close()</code>方法。</p>\n</blockquote>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">try (InputStream input = <span class=\"hljs-built_in\">new</span> FileInputStream(\"src/readme.txt\")) &#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-keyword\">while</span> ((n = <span class=\"hljs-keyword\">input</span>.<span class=\"hljs-keyword\">read</span>()) != <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"输出字节流：OutputStream\"><a href=\"#输出字节流：OutputStream\" class=\"headerlink\" title=\"输出字节流：OutputStream\"></a>输出字节流：OutputStream</h3><h3 id=\"缓冲输入流：BufferedInputStream\"><a href=\"#缓冲输入流：BufferedInputStream\" class=\"headerlink\" title=\"缓冲输入流：BufferedInputStream\"></a>缓冲输入流：BufferedInputStream</h3><h3 id=\"缓冲输出流：BufferedOutputStream\"><a href=\"#缓冲输出流：BufferedOutputStream\" class=\"headerlink\" title=\"缓冲输出流：BufferedOutputStream\"></a>缓冲输出流：BufferedOutputStream</h3><p>缓冲区满了自动写入，不满不写入，则需要调用<code>flush()</code>方法</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">BufferedOutputStream(OutputStream <span class=\"hljs-params\">out</span>)</span><br><br><span class=\"hljs-comment\">// 创建size大小的buffer</span><br><span class=\"hljs-constructor\">BufferedOutputStream(OutputStream <span class=\"hljs-params\">out</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">size</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void flush()</td>\n<td>清空缓冲区</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"字符输入流：Reader\"><a href=\"#字符输入流：Reader\" class=\"headerlink\" title=\"字符输入流：Reader\"></a>字符输入流：Reader</h3><p>字节字符转换流</p>\n<p>InputStreamReader</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">InputStreamReader</span><span class=\"hljs-params\">(InputSteam in)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://zhuanlan.zhihu.com/p/25418336\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25418336</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a>概况</h2><p>Java 的 I/O 大概可以分成以下几类：</p>\n<ul>\n<li>磁盘操作：File</li>\n<li>字节操作：InputStream 和 OutputStream</li>\n<li>字符操作：Reader 和 Writer</li>\n<li>对象操作：Serializable</li>\n<li>网络操作：Socket</li>\n<li>新的输入/输出：NIO</li>\n</ul>\n<h3 id=\"字节操作\"><a href=\"#字节操作\" class=\"headerlink\" title=\"字节操作\"></a>字节操作</h3><p>从文件系统中的某个文件中获得输入字节</p>\n<p>用于读取如图像数据之类的原始字节流</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>public int read()</td>\n<td>从输入流中读取一个数据字节</td>\n</tr>\n<tr>\n<td>public int read(byte[] b)</td>\n<td>从输入流中将最多b.length个字节的数据据读入一个byte数组</td>\n</tr>\n<tr>\n<td>public void close()</td>\n<td>关闭此文件输入流并释放与此流有关的所有系统资源</td>\n</tr>\n</tbody></table>\n<p>n表示长度</p>\n<h3 id=\"输入字节流：InputStream\"><a href=\"#输入字节流：InputStream\" class=\"headerlink\" title=\"输入字节流：InputStream\"></a>输入字节流：InputStream</h3><blockquote>\n<p><code>InputStream</code>是一个抽象类，是所有输入流的超类，最重要的方法为<code>int read()</code>方法，返回字节的int值，返回<code>-1</code>表示无法继续读取。</p>\n<p>常用的子类有<code>FileInputStream</code>，从文件流中读取数据。</p>\n</blockquote>\n<h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">String</span>[] args)</span> throws IOException </span>&#123;<br>    InputStream input = <span class=\"hljs-keyword\">new</span> FileInputStream(<span class=\"hljs-string\">\"aa.txt\"</span>);<br>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>        <span class=\"hljs-keyword\">int</span> n = input.<span class=\"hljs-built_in\">read</span>();<br>        <span class=\"hljs-keyword\">if</span>(n == <span class=\"hljs-number\">-1</span>)<br>            <span class=\"hljs-keyword\">break</span>;<br>        System.out.<span class=\"hljs-built_in\">println</span>(n);<br>    &#125;<br>    input.<span class=\"hljs-built_in\">close</span>();\t<span class=\"hljs-comment\">// 最后需要关闭</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"常用写法\"><a href=\"#常用写法\" class=\"headerlink\" title=\"常用写法\"></a>常用写法</h4><blockquote>\n<p>使用<code>try(resource)</code>语法，让编译器自动关闭资源</p>\n<p>编译器只看<code>try(resource = ...)</code>中的对象是否实现了<code>java.lang.AutoCloseable</code>接口，如果实现了，就自动加上<code>finally</code>语句并调用<code>close()</code>方法。</p>\n</blockquote>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">try (InputStream input = <span class=\"hljs-built_in\">new</span> FileInputStream(\"src/readme.txt\")) &#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-keyword\">while</span> ((n = <span class=\"hljs-keyword\">input</span>.<span class=\"hljs-keyword\">read</span>()) != <span class=\"hljs-number\">-1</span>) &#123;<br>        <span class=\"hljs-keyword\">System</span>.<span class=\"hljs-keyword\">out</span>.println(n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"输出字节流：OutputStream\"><a href=\"#输出字节流：OutputStream\" class=\"headerlink\" title=\"输出字节流：OutputStream\"></a>输出字节流：OutputStream</h3><h3 id=\"缓冲输入流：BufferedInputStream\"><a href=\"#缓冲输入流：BufferedInputStream\" class=\"headerlink\" title=\"缓冲输入流：BufferedInputStream\"></a>缓冲输入流：BufferedInputStream</h3><h3 id=\"缓冲输出流：BufferedOutputStream\"><a href=\"#缓冲输出流：BufferedOutputStream\" class=\"headerlink\" title=\"缓冲输出流：BufferedOutputStream\"></a>缓冲输出流：BufferedOutputStream</h3><p>缓冲区满了自动写入，不满不写入，则需要调用<code>flush()</code>方法</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-constructor\">BufferedOutputStream(OutputStream <span class=\"hljs-params\">out</span>)</span><br><br><span class=\"hljs-comment\">// 创建size大小的buffer</span><br><span class=\"hljs-constructor\">BufferedOutputStream(OutputStream <span class=\"hljs-params\">out</span>, <span class=\"hljs-params\">int</span> <span class=\"hljs-params\">size</span>)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>void flush()</td>\n<td>清空缓冲区</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"字符输入流：Reader\"><a href=\"#字符输入流：Reader\" class=\"headerlink\" title=\"字符输入流：Reader\"></a>字符输入流：Reader</h3><p>字节字符转换流</p>\n<p>InputStreamReader</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">InputStreamReader</span><span class=\"hljs-params\">(InputSteam in)</span></span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://zhuanlan.zhihu.com/p/25418336\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/25418336</a></p>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/</a></p>\n"},{"title":"MyBatis基本使用方法","date":"2020-12-22T07:59:21.000Z","fileName":"mybatis-basic-summary","_content":"\n\n\n","source":"_posts/编程相关/Java/框架/MyBatis基本使用方法.md","raw":"---\ntitle: MyBatis基本使用方法\ndate: 2020-12-22 15:59:21\ntags:\n\t- 数据库\ncategories:\n\t- 编程相关\n\t- Java\n\t- 框架\nfileName: mybatis-basic-summary\n---\n\n\n\n","slug":"编程相关/Java/框架/MyBatis基本使用方法","published":1,"updated":"2021-02-28T15:53:19.035Z","_id":"cklp5nhqv003v8sjs5n226eb7","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Java算法题的常用语法","date":"2020-08-15T06:34:11.000Z","fileName":"java-for-algorithm-test","_content":"\n## 控制台输入与输出\n\n### 控制台输入\n\n```java\nScanner sc = new Scanner(System.in);\n```\n\n#### 输入一整行数据\n\n以换行为终止，返回一个String类型变量.\n\n```\nString s = sc.nextLine();\n```\n\n#### 输入单个数据（方法名为next后面跟基本数据类型名）\n\n如下为输入一个整型\n\n```\nint a = sc.nextInt();\n```\n\n#### 输入一个字符串\n\n```\nString str = sc.next();\n```\n\n\n\n### 控制台输出\n\n#### 基本语法\n\n输出内容：`System.out.print(\"\"); `\n\n输出内容并换行：`System.out.println(\"\"); `\n\n格式化输出1： `System.out.format(String format, Object ... args); `\n\n格式化输出2：`System.out.printf((String format, Object ... args);`\n\n#### 格式化输出常用转换符\n\n| 转 换 符 | 说  明             |\n| -------- | ------------------ |\n| %s       | 字符串类型         |\n| %c       | 字符类型           |\n| %d       | 整数类型（十进制） |\n| %f       | 浮点类型           |\n| %n 或 \\n | 换行符             |\n\n#### 搭配转换符的常用标志\n\n| 标  志 | 说  明                 | 示  例               | 结  果  |\n| ------ | ---------------------- | -------------------- | ------- |\n| +      | 为正数或者负数添加符号 | (\"%+d %+d\", -10, 10) | -10 +10 |\n| 0      | 数字前面补0            | (\"%05d\", 10)         | 00010   |\n\n#### 常用示例\n\n```\n// 输出带有五位小数的浮点型\nSystem.out.printf(\"%.5f\", 99.89);\t// 99.89000\n// 输出在前面补齐5位数\nSystem.out.printf(\"%05d\", 99);\t// 00099\n```\n\n\n\n## 基本容器的使用\n\n### 常用容器的基本使用\n\n![](http://cdn.ziyedy.top/image/Java%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/Collection.png)\n\n\n\n\n\n## 容器的基本操作\n\n### Arrays\n\n#### Arrays.sort()——排序\n\n对所有数组元素进行排序（默认正序）\n\n```java\nint[] a = new int[]{-2,-3,2,1,9};\nArrays.sort(a);\t// 默认升序： -3 -2 1 2 9\n\n```\n\n使用**lamda表达式**更改排序方式，以倒序为例，此时需要注意**声明数组必须使用其包装类**，否则会报错\n\n```java\nInteger[] a = new Integer[]{-2,-3,2,1,9};\nArrays.sort(a, (a1, a2)->a2-a1);\t// 倒序：9 2 1 -2 -3\n```\n\n对指定索引范围内元素进行排序\n\n```\nint[] b = new int[]{-2,-3,2,1,9};\n// 对[0, 2)范围内数组元素进行排序\n// 之后也可更改排序方式\nArrays.sort(b, 0, 2);\t// -3 -2 2 1 9\n```\n\n#### Arrays.fill()——填充\n\n为数组元素填充相同值\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\nArrays.fill(a, 10);\t// 10 10 10 10 10\n```\n\n为指定索引范围内数组填充相同值\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\n// 在索引[1, 3)范围内填充5\nArrays.fill(a, 1, 3, 5);\t// -2 5 5 1 9\n```\n\n#### Arrays.equals()——判断两个数组各元素是否都相等\n\n```java\nint[] a = new int[]{-2,-3,2,1,9};\nint[] b = new int[]{-2,-3,2,1,9};\nSystem.out.println(Arrays.equals(a, b));\t// true\n```\n\n#### Arrays.binarySerch()——二分查找定位元素下标\n\n注意：数组一定要是**排好序的**，否则会出错，若没有搜索到返回一个负值\n\n```\nint[] a = new int[]{-3,-2,2,3,9};\nSystem.out.println(Arrays.binarySearch(a, 2));\t// 2\n```\n\n#### Arrays.copyOfRange()——截取数组\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\n// 截取[1, 3)的数组\nint[] b = Arrays.copyOfRange(a,1,3);\nfor (int m : b) System.out.print(m + \" \");\t// -3 2\n```\n\n\n\n### Collections\n\n示例列表如下：\n\n```\nArrayList<Integer> list = new ArrayList<>();\nlist.add(2);\nlist.add(-2);\nlist.add(5);\nlist.add(99);\nlist.add(-10);\nfor (int v : list) System.out.print(v + \" \");\t// 2 -2 5 99 -10\n```\n\n#### void reverse(List list)：反转\n\n```\n// 反转整个列表\nCollections.reverse(list);\t// -10 99 5 -2 2\n\n// 反转[1, 3)的列表\nCollections.reverse(list.subList(1, 3));\t// 2 5 -2 99 -10\n```\n\n#### void sort(List list)：排序\n\n```\n// 自然升序\nCollections.sort(list);\t// -10 -2 2 5 99\n\n// 自定义排序方法（此处为降序）\nCollections.sort(list, (a, b)->b-a);\t// 99 5 2 -2 -10\n```\n\n#### void swap(List list, int i , int j)：交换两个索引位置的元素\n\n```\n// 交换索引为0 和 4的元素\nCollections.swap(list, 0, 4);\t// -10 -2 5 99 2\n```\n\n\n\n\n\n","source":"_posts/编程相关/Java/Java基础/Java算法题的常用语法.md","raw":"---\ntitle: Java算法题的常用语法\ndate: 2020-08-15 14:34:11\ntags:\n\t- Java\ncategories:\n\t- 编程相关\n\t- Java\n\t- Java基础\nfileName: java-for-algorithm-test\n---\n\n## 控制台输入与输出\n\n### 控制台输入\n\n```java\nScanner sc = new Scanner(System.in);\n```\n\n#### 输入一整行数据\n\n以换行为终止，返回一个String类型变量.\n\n```\nString s = sc.nextLine();\n```\n\n#### 输入单个数据（方法名为next后面跟基本数据类型名）\n\n如下为输入一个整型\n\n```\nint a = sc.nextInt();\n```\n\n#### 输入一个字符串\n\n```\nString str = sc.next();\n```\n\n\n\n### 控制台输出\n\n#### 基本语法\n\n输出内容：`System.out.print(\"\"); `\n\n输出内容并换行：`System.out.println(\"\"); `\n\n格式化输出1： `System.out.format(String format, Object ... args); `\n\n格式化输出2：`System.out.printf((String format, Object ... args);`\n\n#### 格式化输出常用转换符\n\n| 转 换 符 | 说  明             |\n| -------- | ------------------ |\n| %s       | 字符串类型         |\n| %c       | 字符类型           |\n| %d       | 整数类型（十进制） |\n| %f       | 浮点类型           |\n| %n 或 \\n | 换行符             |\n\n#### 搭配转换符的常用标志\n\n| 标  志 | 说  明                 | 示  例               | 结  果  |\n| ------ | ---------------------- | -------------------- | ------- |\n| +      | 为正数或者负数添加符号 | (\"%+d %+d\", -10, 10) | -10 +10 |\n| 0      | 数字前面补0            | (\"%05d\", 10)         | 00010   |\n\n#### 常用示例\n\n```\n// 输出带有五位小数的浮点型\nSystem.out.printf(\"%.5f\", 99.89);\t// 99.89000\n// 输出在前面补齐5位数\nSystem.out.printf(\"%05d\", 99);\t// 00099\n```\n\n\n\n## 基本容器的使用\n\n### 常用容器的基本使用\n\n![](http://cdn.ziyedy.top/image/Java%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/Collection.png)\n\n\n\n\n\n## 容器的基本操作\n\n### Arrays\n\n#### Arrays.sort()——排序\n\n对所有数组元素进行排序（默认正序）\n\n```java\nint[] a = new int[]{-2,-3,2,1,9};\nArrays.sort(a);\t// 默认升序： -3 -2 1 2 9\n\n```\n\n使用**lamda表达式**更改排序方式，以倒序为例，此时需要注意**声明数组必须使用其包装类**，否则会报错\n\n```java\nInteger[] a = new Integer[]{-2,-3,2,1,9};\nArrays.sort(a, (a1, a2)->a2-a1);\t// 倒序：9 2 1 -2 -3\n```\n\n对指定索引范围内元素进行排序\n\n```\nint[] b = new int[]{-2,-3,2,1,9};\n// 对[0, 2)范围内数组元素进行排序\n// 之后也可更改排序方式\nArrays.sort(b, 0, 2);\t// -3 -2 2 1 9\n```\n\n#### Arrays.fill()——填充\n\n为数组元素填充相同值\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\nArrays.fill(a, 10);\t// 10 10 10 10 10\n```\n\n为指定索引范围内数组填充相同值\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\n// 在索引[1, 3)范围内填充5\nArrays.fill(a, 1, 3, 5);\t// -2 5 5 1 9\n```\n\n#### Arrays.equals()——判断两个数组各元素是否都相等\n\n```java\nint[] a = new int[]{-2,-3,2,1,9};\nint[] b = new int[]{-2,-3,2,1,9};\nSystem.out.println(Arrays.equals(a, b));\t// true\n```\n\n#### Arrays.binarySerch()——二分查找定位元素下标\n\n注意：数组一定要是**排好序的**，否则会出错，若没有搜索到返回一个负值\n\n```\nint[] a = new int[]{-3,-2,2,3,9};\nSystem.out.println(Arrays.binarySearch(a, 2));\t// 2\n```\n\n#### Arrays.copyOfRange()——截取数组\n\n```\nint[] a = new int[]{-2,-3,2,1,9};\n// 截取[1, 3)的数组\nint[] b = Arrays.copyOfRange(a,1,3);\nfor (int m : b) System.out.print(m + \" \");\t// -3 2\n```\n\n\n\n### Collections\n\n示例列表如下：\n\n```\nArrayList<Integer> list = new ArrayList<>();\nlist.add(2);\nlist.add(-2);\nlist.add(5);\nlist.add(99);\nlist.add(-10);\nfor (int v : list) System.out.print(v + \" \");\t// 2 -2 5 99 -10\n```\n\n#### void reverse(List list)：反转\n\n```\n// 反转整个列表\nCollections.reverse(list);\t// -10 99 5 -2 2\n\n// 反转[1, 3)的列表\nCollections.reverse(list.subList(1, 3));\t// 2 5 -2 99 -10\n```\n\n#### void sort(List list)：排序\n\n```\n// 自然升序\nCollections.sort(list);\t// -10 -2 2 5 99\n\n// 自定义排序方法（此处为降序）\nCollections.sort(list, (a, b)->b-a);\t// 99 5 2 -2 -10\n```\n\n#### void swap(List list, int i , int j)：交换两个索引位置的元素\n\n```\n// 交换索引为0 和 4的元素\nCollections.swap(list, 0, 4);\t// -10 -2 5 99 2\n```\n\n\n\n\n\n","slug":"编程相关/Java/Java基础/Java算法题的常用语法","published":1,"updated":"2021-01-11T04:26:56.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklp5nhqz003w8sjs7jvt0h85","content":"<h2 id=\"控制台输入与输出\"><a href=\"#控制台输入与输出\" class=\"headerlink\" title=\"控制台输入与输出\"></a>控制台输入与输出</h2><h3 id=\"控制台输入\"><a href=\"#控制台输入\" class=\"headerlink\" title=\"控制台输入\"></a>控制台输入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入一整行数据\"><a href=\"#输入一整行数据\" class=\"headerlink\" title=\"输入一整行数据\"></a>输入一整行数据</h4><p>以换行为终止，返回一个String类型变量.</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">String s = sc.nextLine()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入单个数据（方法名为next后面跟基本数据类型名）\"><a href=\"#输入单个数据（方法名为next后面跟基本数据类型名）\" class=\"headerlink\" title=\"输入单个数据（方法名为next后面跟基本数据类型名）\"></a>输入单个数据（方法名为next后面跟基本数据类型名）</h4><p>如下为输入一个整型</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span> a = sc.next<span class=\"hljs-constructor\">Int()</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入一个字符串\"><a href=\"#输入一个字符串\" class=\"headerlink\" title=\"输入一个字符串\"></a>输入一个字符串</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-keyword\">String </span><span class=\"hljs-keyword\">str </span>= sc.next()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"控制台输出\"><a href=\"#控制台输出\" class=\"headerlink\" title=\"控制台输出\"></a>控制台输出</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>输出内容：<code>System.out.print(&quot;&quot;);</code></p>\n<p>输出内容并换行：<code>System.out.println(&quot;&quot;);</code></p>\n<p>格式化输出1： <code>System.out.format(String format, Object ... args);</code></p>\n<p>格式化输出2：<code>System.out.printf((String format, Object ... args);</code></p>\n<h4 id=\"格式化输出常用转换符\"><a href=\"#格式化输出常用转换符\" class=\"headerlink\" title=\"格式化输出常用转换符\"></a>格式化输出常用转换符</h4><table>\n<thead>\n<tr>\n<th>转 换 符</th>\n<th>说  明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%s</td>\n<td>字符串类型</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符类型</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数类型（十进制）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点类型</td>\n</tr>\n<tr>\n<td>%n 或 \\n</td>\n<td>换行符</td>\n</tr>\n</tbody></table>\n<h4 id=\"搭配转换符的常用标志\"><a href=\"#搭配转换符的常用标志\" class=\"headerlink\" title=\"搭配转换符的常用标志\"></a>搭配转换符的常用标志</h4><table>\n<thead>\n<tr>\n<th>标  志</th>\n<th>说  明</th>\n<th>示  例</th>\n<th>结  果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>为正数或者负数添加符号</td>\n<td>(“%+d %+d”, -10, 10)</td>\n<td>-10 +10</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前面补0</td>\n<td>(“%05d”, 10)</td>\n<td>00010</td>\n</tr>\n</tbody></table>\n<h4 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 输出带有五位小数的浮点型</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.printf(<span class=\"hljs-string\">\"%.5f\"</span>, <span class=\"hljs-number\">99.89</span>);\t<span class=\"hljs-comment\">// 99.89000</span><br><span class=\"hljs-comment\">// 输出在前面补齐5位数</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.printf(<span class=\"hljs-string\">\"%05d\"</span>, <span class=\"hljs-number\">99</span>);\t<span class=\"hljs-comment\">// 00099</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本容器的使用\"><a href=\"#基本容器的使用\" class=\"headerlink\" title=\"基本容器的使用\"></a>基本容器的使用</h2><h3 id=\"常用容器的基本使用\"><a href=\"#常用容器的基本使用\" class=\"headerlink\" title=\"常用容器的基本使用\"></a>常用容器的基本使用</h3><p><img src=\"http://cdn.ziyedy.top/image/Java%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/Collection.png\" alt=\"\"></p>\n<h2 id=\"容器的基本操作\"><a href=\"#容器的基本操作\" class=\"headerlink\" title=\"容器的基本操作\"></a>容器的基本操作</h2><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"Arrays-sort-——排序\"><a href=\"#Arrays-sort-——排序\" class=\"headerlink\" title=\"Arrays.sort()——排序\"></a>Arrays.sort()——排序</h4><p>对所有数组元素进行排序（默认正序）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.sort(a);\t<span class=\"hljs-comment\">// 默认升序： -3 -2 1 2 9</span><br></code></pre></td></tr></table></figure>\n\n<p>使用<strong>lamda表达式</strong>更改排序方式，以倒序为例，此时需要注意<strong>声明数组必须使用其包装类</strong>，否则会报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Integer[] a = <span class=\"hljs-keyword\">new</span> Integer[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.sort(a, (a1, a2)-&gt;a2-a1);\t<span class=\"hljs-comment\">// 倒序：9 2 1 -2 -3</span><br></code></pre></td></tr></table></figure>\n\n<p>对指定索引范围内元素进行排序</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] b = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 对[0, 2)范围内数组元素进行排序</span><br><span class=\"hljs-comment\">// 之后也可更改排序方式</span><br>Arrays.sort(b, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// -3 -2 2 1 9</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-fill-——填充\"><a href=\"#Arrays-fill-——填充\" class=\"headerlink\" title=\"Arrays.fill()——填充\"></a>Arrays.fill()——填充</h4><p>为数组元素填充相同值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.fill(a, <span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// 10 10 10 10 10</span><br></code></pre></td></tr></table></figure>\n\n<p>为指定索引范围内数组填充相同值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 在索引[1, 3)范围内填充5</span><br>Arrays.fill(a, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\t<span class=\"hljs-comment\">// -2 5 5 1 9</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-equals-——判断两个数组各元素是否都相等\"><a href=\"#Arrays-equals-——判断两个数组各元素是否都相等\" class=\"headerlink\" title=\"Arrays.equals()——判断两个数组各元素是否都相等\"></a>Arrays.equals()——判断两个数组各元素是否都相等</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-keyword\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>System.out.println(Arrays.equals(a, b));\t<span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-binarySerch-——二分查找定位元素下标\"><a href=\"#Arrays-binarySerch-——二分查找定位元素下标\" class=\"headerlink\" title=\"Arrays.binarySerch()——二分查找定位元素下标\"></a>Arrays.binarySerch()——二分查找定位元素下标</h4><p>注意：数组一定要是<strong>排好序的</strong>，否则会出错，若没有搜索到返回一个负值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>&#125;;<br>System.<span class=\"hljs-keyword\">out</span>.println(Arrays.binarySearch(a, <span class=\"hljs-number\">2</span>));\t<span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-copyOfRange-——截取数组\"><a href=\"#Arrays-copyOfRange-——截取数组\" class=\"headerlink\" title=\"Arrays.copyOfRange()——截取数组\"></a>Arrays.copyOfRange()——截取数组</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 截取[1, 3)的数组</span><br><span class=\"hljs-built_in\">int</span>[] b = Arrays.copyOfRange(a,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> m : b) System.<span class=\"hljs-keyword\">out</span>.print(m + <span class=\"hljs-string\">\" \"</span>);\t<span class=\"hljs-comment\">// -3 2</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><p>示例列表如下：</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">ArrayList&lt;Integer&gt; <span class=\"hljs-meta\">list</span> = new ArrayList&lt;&gt;();<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(2);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(-2);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(5);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(99);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(-10);<br>for (int v : <span class=\"hljs-meta\">list</span>) System.<span class=\"hljs-meta\">out</span>.p<span class=\"hljs-meta\">rint(</span>v + <span class=\"hljs-string\">\" \"</span>);\t// 2 -2 5 99 -10<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-reverse-List-list-：反转\"><a href=\"#void-reverse-List-list-：反转\" class=\"headerlink\" title=\"void reverse(List list)：反转\"></a>void reverse(List list)：反转</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">反转整个列表</span><br><span class=\"hljs-string\">Collections.reverse(list);</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">反转[1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">)的列表</span><br><span class=\"hljs-string\">Collections.reverse(list.subList(1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">));</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">-10</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-sort-List-list-：排序\"><a href=\"#void-sort-List-list-：排序\" class=\"headerlink\" title=\"void sort(List list)：排序\"></a>void sort(List list)：排序</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 自然升序</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>);\t<span class=\"hljs-comment\">// -10 -2 2 5 99</span><br><br><span class=\"hljs-comment\">// 自定义排序方法（此处为降序）</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>, (a, b)-&gt;b-a);\t<span class=\"hljs-comment\">// 99 5 2 -2 -10</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-swap-List-list-int-i-int-j-：交换两个索引位置的元素\"><a href=\"#void-swap-List-list-int-i-int-j-：交换两个索引位置的元素\" class=\"headerlink\" title=\"void swap(List list, int i , int j)：交换两个索引位置的元素\"></a>void swap(List list, int i , int j)：交换两个索引位置的元素</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">交换索引为0</span> <span class=\"hljs-string\">和</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">的元素</span><br><span class=\"hljs-string\">Collections.swap(list,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">);</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"控制台输入与输出\"><a href=\"#控制台输入与输出\" class=\"headerlink\" title=\"控制台输入与输出\"></a>控制台输入与输出</h2><h3 id=\"控制台输入\"><a href=\"#控制台输入\" class=\"headerlink\" title=\"控制台输入\"></a>控制台输入</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Scanner sc = <span class=\"hljs-keyword\">new</span> Scanner(System.in);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入一整行数据\"><a href=\"#输入一整行数据\" class=\"headerlink\" title=\"输入一整行数据\"></a>输入一整行数据</h4><p>以换行为终止，返回一个String类型变量.</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">String s = sc.nextLine()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入单个数据（方法名为next后面跟基本数据类型名）\"><a href=\"#输入单个数据（方法名为next后面跟基本数据类型名）\" class=\"headerlink\" title=\"输入单个数据（方法名为next后面跟基本数据类型名）\"></a>输入单个数据（方法名为next后面跟基本数据类型名）</h4><p>如下为输入一个整型</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-built_in\">int</span> a = sc.next<span class=\"hljs-constructor\">Int()</span>;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"输入一个字符串\"><a href=\"#输入一个字符串\" class=\"headerlink\" title=\"输入一个字符串\"></a>输入一个字符串</h4><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-keyword\">String </span><span class=\"hljs-keyword\">str </span>= sc.next()<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"控制台输出\"><a href=\"#控制台输出\" class=\"headerlink\" title=\"控制台输出\"></a>控制台输出</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>输出内容：<code>System.out.print(&quot;&quot;);</code></p>\n<p>输出内容并换行：<code>System.out.println(&quot;&quot;);</code></p>\n<p>格式化输出1： <code>System.out.format(String format, Object ... args);</code></p>\n<p>格式化输出2：<code>System.out.printf((String format, Object ... args);</code></p>\n<h4 id=\"格式化输出常用转换符\"><a href=\"#格式化输出常用转换符\" class=\"headerlink\" title=\"格式化输出常用转换符\"></a>格式化输出常用转换符</h4><table>\n<thead>\n<tr>\n<th>转 换 符</th>\n<th>说  明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%s</td>\n<td>字符串类型</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符类型</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数类型（十进制）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点类型</td>\n</tr>\n<tr>\n<td>%n 或 \\n</td>\n<td>换行符</td>\n</tr>\n</tbody></table>\n<h4 id=\"搭配转换符的常用标志\"><a href=\"#搭配转换符的常用标志\" class=\"headerlink\" title=\"搭配转换符的常用标志\"></a>搭配转换符的常用标志</h4><table>\n<thead>\n<tr>\n<th>标  志</th>\n<th>说  明</th>\n<th>示  例</th>\n<th>结  果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+</td>\n<td>为正数或者负数添加符号</td>\n<td>(“%+d %+d”, -10, 10)</td>\n<td>-10 +10</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前面补0</td>\n<td>(“%05d”, 10)</td>\n<td>00010</td>\n</tr>\n</tbody></table>\n<h4 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 输出带有五位小数的浮点型</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.printf(<span class=\"hljs-string\">\"%.5f\"</span>, <span class=\"hljs-number\">99.89</span>);\t<span class=\"hljs-comment\">// 99.89000</span><br><span class=\"hljs-comment\">// 输出在前面补齐5位数</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.printf(<span class=\"hljs-string\">\"%05d\"</span>, <span class=\"hljs-number\">99</span>);\t<span class=\"hljs-comment\">// 00099</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"基本容器的使用\"><a href=\"#基本容器的使用\" class=\"headerlink\" title=\"基本容器的使用\"></a>基本容器的使用</h2><h3 id=\"常用容器的基本使用\"><a href=\"#常用容器的基本使用\" class=\"headerlink\" title=\"常用容器的基本使用\"></a>常用容器的基本使用</h3><p><img src=\"http://cdn.ziyedy.top/image/Java%E7%AE%97%E6%B3%95%E9%A2%98%E7%9A%84%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/Collection.png\" alt=\"\"></p>\n<h2 id=\"容器的基本操作\"><a href=\"#容器的基本操作\" class=\"headerlink\" title=\"容器的基本操作\"></a>容器的基本操作</h2><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><h4 id=\"Arrays-sort-——排序\"><a href=\"#Arrays-sort-——排序\" class=\"headerlink\" title=\"Arrays.sort()——排序\"></a>Arrays.sort()——排序</h4><p>对所有数组元素进行排序（默认正序）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.sort(a);\t<span class=\"hljs-comment\">// 默认升序： -3 -2 1 2 9</span><br></code></pre></td></tr></table></figure>\n\n<p>使用<strong>lamda表达式</strong>更改排序方式，以倒序为例，此时需要注意<strong>声明数组必须使用其包装类</strong>，否则会报错</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Integer[] a = <span class=\"hljs-keyword\">new</span> Integer[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.sort(a, (a1, a2)-&gt;a2-a1);\t<span class=\"hljs-comment\">// 倒序：9 2 1 -2 -3</span><br></code></pre></td></tr></table></figure>\n\n<p>对指定索引范围内元素进行排序</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] b = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 对[0, 2)范围内数组元素进行排序</span><br><span class=\"hljs-comment\">// 之后也可更改排序方式</span><br>Arrays.sort(b, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\t<span class=\"hljs-comment\">// -3 -2 2 1 9</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-fill-——填充\"><a href=\"#Arrays-fill-——填充\" class=\"headerlink\" title=\"Arrays.fill()——填充\"></a>Arrays.fill()——填充</h4><p>为数组元素填充相同值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>Arrays.fill(a, <span class=\"hljs-number\">10</span>);\t<span class=\"hljs-comment\">// 10 10 10 10 10</span><br></code></pre></td></tr></table></figure>\n\n<p>为指定索引范围内数组填充相同值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 在索引[1, 3)范围内填充5</span><br>Arrays.fill(a, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>);\t<span class=\"hljs-comment\">// -2 5 5 1 9</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-equals-——判断两个数组各元素是否都相等\"><a href=\"#Arrays-equals-——判断两个数组各元素是否都相等\" class=\"headerlink\" title=\"Arrays.equals()——判断两个数组各元素是否都相等\"></a>Arrays.equals()——判断两个数组各元素是否都相等</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">int</span>[] a = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-keyword\">int</span>[] b = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[]&#123;-<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br>System.out.println(Arrays.equals(a, b));\t<span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-binarySerch-——二分查找定位元素下标\"><a href=\"#Arrays-binarySerch-——二分查找定位元素下标\" class=\"headerlink\" title=\"Arrays.binarySerch()——二分查找定位元素下标\"></a>Arrays.binarySerch()——二分查找定位元素下标</h4><p>注意：数组一定要是<strong>排好序的</strong>，否则会出错，若没有搜索到返回一个负值</p>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">9</span>&#125;;<br>System.<span class=\"hljs-keyword\">out</span>.println(Arrays.binarySearch(a, <span class=\"hljs-number\">2</span>));\t<span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Arrays-copyOfRange-——截取数组\"><a href=\"#Arrays-copyOfRange-——截取数组\" class=\"headerlink\" title=\"Arrays.copyOfRange()——截取数组\"></a>Arrays.copyOfRange()——截取数组</h4><figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs angelscript\"><span class=\"hljs-built_in\">int</span>[] a = new <span class=\"hljs-built_in\">int</span>[]&#123;<span class=\"hljs-number\">-2</span>,<span class=\"hljs-number\">-3</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">9</span>&#125;;<br><span class=\"hljs-comment\">// 截取[1, 3)的数组</span><br><span class=\"hljs-built_in\">int</span>[] b = Arrays.copyOfRange(a,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> m : b) System.<span class=\"hljs-keyword\">out</span>.print(m + <span class=\"hljs-string\">\" \"</span>);\t<span class=\"hljs-comment\">// -3 2</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Collections\"><a href=\"#Collections\" class=\"headerlink\" title=\"Collections\"></a>Collections</h3><p>示例列表如下：</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">ArrayList&lt;Integer&gt; <span class=\"hljs-meta\">list</span> = new ArrayList&lt;&gt;();<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(2);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(-2);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(5);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(99);<br><span class=\"hljs-meta\">list</span>.<span class=\"hljs-meta\">add</span>(-10);<br>for (int v : <span class=\"hljs-meta\">list</span>) System.<span class=\"hljs-meta\">out</span>.p<span class=\"hljs-meta\">rint(</span>v + <span class=\"hljs-string\">\" \"</span>);\t// 2 -2 5 99 -10<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-reverse-List-list-：反转\"><a href=\"#void-reverse-List-list-：反转\" class=\"headerlink\" title=\"void reverse(List list)：反转\"></a>void reverse(List list)：反转</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">反转整个列表</span><br><span class=\"hljs-string\">Collections.reverse(list);</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">2</span><br><br><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">反转[1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">)的列表</span><br><span class=\"hljs-string\">Collections.reverse(list.subList(1,</span> <span class=\"hljs-number\">3</span><span class=\"hljs-string\">));</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">-10</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-sort-List-list-：排序\"><a href=\"#void-sort-List-list-：排序\" class=\"headerlink\" title=\"void sort(List list)：排序\"></a>void sort(List list)：排序</h4><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-comment\">// 自然升序</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>);\t<span class=\"hljs-comment\">// -10 -2 2 5 99</span><br><br><span class=\"hljs-comment\">// 自定义排序方法（此处为降序）</span><br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Collections</span>.</span></span>sort(<span class=\"hljs-built_in\">list</span>, (a, b)-&gt;b-a);\t<span class=\"hljs-comment\">// 99 5 2 -2 -10</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"void-swap-List-list-int-i-int-j-：交换两个索引位置的元素\"><a href=\"#void-swap-List-list-int-i-int-j-：交换两个索引位置的元素\" class=\"headerlink\" title=\"void swap(List list, int i , int j)：交换两个索引位置的元素\"></a>void swap(List list, int i , int j)：交换两个索引位置的元素</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">//</span> <span class=\"hljs-string\">交换索引为0</span> <span class=\"hljs-string\">和</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">的元素</span><br><span class=\"hljs-string\">Collections.swap(list,</span> <span class=\"hljs-number\">0</span><span class=\"hljs-string\">,</span> <span class=\"hljs-number\">4</span><span class=\"hljs-string\">);</span>\t<span class=\"hljs-string\">//</span> <span class=\"hljs-number\">-10</span> <span class=\"hljs-number\">-2</span> <span class=\"hljs-number\">5</span> <span class=\"hljs-number\">99</span> <span class=\"hljs-number\">2</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"死锁","date":"2021-02-28T13:43:23.000Z","fileName":null,"_content":"","source":"_posts/学习笔记/操作系统/死锁.md","raw":"---\ntitle: 死锁\ndate: 2021-02-28 21:43:23\ntags:\ncategories:\nfileName:\n---\n","slug":"学习笔记/操作系统/死锁","published":1,"updated":"2021-02-28T13:43:23.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cklpbt6ja0000d8jsh6hjhtkk","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[{"post_id":"ckjs3mo7q0004rwjsaje34z0o","category_id":"ckjs3mo7u0006rwjsg4w83kve","_id":"ckjs3mo8o000hrwjs1y4k9zdi"},{"post_id":"ckjs3mo7t0005rwjs9mu49lsa","category_id":"ckjs3mo7u0006rwjsg4w83kve","_id":"ckjs3mo8r000nrwjs8woy81d4"},{"post_id":"ckjs3mo8o000frwjs7f8cc89b","category_id":"ckjs3mo7u0006rwjsg4w83kve","_id":"ckjs3mo8s000qrwjsaxg4hnsq"},{"post_id":"ckjs3mo7w0008rwjs5dlo6tgg","category_id":"ckjs3mo7u0006rwjsg4w83kve","_id":"ckjs3mo8t000srwjs88va4s5u"},{"post_id":"ckjs3mo7x0009rwjsdnfe5sil","category_id":"ckjs3mo8r000mrwjs96bla1i5","_id":"ckjs3mo8u000yrwjs4u0m06up"},{"post_id":"ckjs3mo7y000arwjs0ufa3ww7","category_id":"ckjs3mo8r000mrwjs96bla1i5","_id":"ckjs3mo8v0012rwjsg7ylfq3y"},{"post_id":"ckjs3mo8q000jrwjs7i54ao3m","category_id":"ckjs3mo8r000mrwjs96bla1i5","_id":"ckjs3mo8x0018rwjs0crc749e"},{"post_id":"ckjs3mo8r000lrwjs3be3dr8k","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"ckjs3mo8y001crwjs50cq6imd"},{"post_id":"ckjs3mo9d001irwjsfyu4apx9","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"ckjs3mo9f001krwjsfbbl707j"},{"post_id":"ckjs3mo9w001rrwjs3pd8hmaz","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moa9002hrwjs0ejq4acv"},{"post_id":"ckjs3mo9w001rrwjs3pd8hmaz","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moaa002krwjs9f0k6uze"},{"post_id":"ckjs3mo9t001mrwjs0qikh2zw","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moac002orwjs2ox4hjne"},{"post_id":"ckjs3mo9t001mrwjs0qikh2zw","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moae002srwjshyjy9hzx"},{"post_id":"ckjs3mo9x001srwjsed3q5zqu","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moaf002vrwjs11plb392"},{"post_id":"ckjs3mo9x001srwjsed3q5zqu","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moah002yrwjsby6hgyov"},{"post_id":"ckjs3mo9y001wrwjs89bh4jij","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moaj0032rwjscjsk5536"},{"post_id":"ckjs3mo9y001wrwjs89bh4jij","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moak0036rwjsb63cacyt"},{"post_id":"ckjs3mo9u001nrwjsajs23d9z","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moal003arwjs1j3j5ipa"},{"post_id":"ckjs3mo9u001nrwjsajs23d9z","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moam003drwjs2f1bea6k"},{"post_id":"ckjs3mo9z001yrwjs594p6gof","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moan003grwjsaa2bag1p"},{"post_id":"ckjs3mo9z001yrwjs594p6gof","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moap003krwjs8i779ny1"},{"post_id":"ckjs3moa00022rwjs7zwmbs8l","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moaq003prwjs3vatdwvi"},{"post_id":"ckjs3moa00022rwjs7zwmbs8l","category_id":"ckjs3moal0039rwjsa0kvgu5z","_id":"ckjs3moas003srwjse7mjb7ia"},{"post_id":"ckjs3mo9v001qrwjs5hj4hmnr","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moat003wrwjshyhy89ds"},{"post_id":"ckjs3mo9v001qrwjs5hj4hmnr","category_id":"ckjs3moa20025rwjs27cg4z5t","_id":"ckjs3moav003zrwjs5z2jgaxp"},{"post_id":"ckjs3moa20024rwjscg5o53l5","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moaw0043rwjsgjcf0zkw"},{"post_id":"ckjs3moa20024rwjscg5o53l5","category_id":"ckjs3moal0039rwjsa0kvgu5z","_id":"ckjs3moax0045rwjs1ufv63ww"},{"post_id":"ckjs3moa50028rwjsauvc6uqd","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mob2004arwjseepq34js"},{"post_id":"ckjs3moa50028rwjsauvc6uqd","category_id":"ckjs3moal0039rwjsa0kvgu5z","_id":"ckjs3mob3004crwjs1uir29tn"},{"post_id":"ckjs3moa6002arwjsbxhzcs4m","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mob4004frwjsakyt50m3"},{"post_id":"ckjs3moa6002arwjsbxhzcs4m","category_id":"ckjs3moal0039rwjsa0kvgu5z","_id":"ckjs3mob5004jrwjsbu8a7imi"},{"post_id":"ckjs3moa7002drwjs4p1kg1ev","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mob8004orwjs5c349ag3"},{"post_id":"ckjs3moa7002drwjs4p1kg1ev","category_id":"ckjs3mob20049rwjs81i75cg5","_id":"ckjs3mob9004qrwjsfenlfavy"},{"post_id":"ckjs3moa8002frwjs6nww7zlz","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3moba004vrwjs2waj4aes"},{"post_id":"ckjs3moa8002frwjs6nww7zlz","category_id":"ckjs3mob20049rwjs81i75cg5","_id":"ckjs3mobe004xrwjs3tpo7iu7"},{"post_id":"ckjs3moa9002irwjs2hha8w50","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mobg0052rwjsc1zh16cp"},{"post_id":"ckjs3moa9002irwjs2hha8w50","category_id":"ckjs3mob20049rwjs81i75cg5","_id":"ckjs3mobg0054rwjsd3fiae2o"},{"post_id":"ckjs3moab002lrwjshnohht8r","category_id":"ckjs3mo9u001orwjs951j7jju","_id":"ckjs3mobi0058rwjsc1uvcqzk"},{"post_id":"ckjs3moab002lrwjshnohht8r","category_id":"ckjs3mob20049rwjs81i75cg5","_id":"ckjs3mobj005brwjs508vg2hk"},{"post_id":"ckjs3moac002prwjs61mc2tpg","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocm0087rwjs079jhzll"},{"post_id":"ckjs3moac002prwjs61mc2tpg","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocn008arwjsc3ud26oq"},{"post_id":"ckjs3moae002trwjs9yv64sqk","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3moco008jrwjs90mnf30a"},{"post_id":"ckjs3moae002trwjs9yv64sqk","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocp008lrwjsaoeuctqf"},{"post_id":"ckjs3moag002wrwjs9tnzcupg","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocq008trwjs1t8pgkh2"},{"post_id":"ckjs3moag002wrwjs9tnzcupg","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocr008wrwjsf52t6ldm"},{"post_id":"ckjs3moai002zrwjs07ie2jr8","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3moct0094rwjs3ot7a2js"},{"post_id":"ckjs3moai002zrwjs07ie2jr8","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3moct0097rwjs8w486wdk"},{"post_id":"ckjs3moaj0033rwjs02ku9k5s","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocv009frwjs2kvxcc0b"},{"post_id":"ckjs3moaj0033rwjs02ku9k5s","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocv009hrwjs1m4ye1si"},{"post_id":"ckjs3moak0037rwjsgzq63152","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocx009prwjs8j68h8zn"},{"post_id":"ckjs3moak0037rwjsgzq63152","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocx009qrwjs95uydxdk"},{"post_id":"ckjs3moam003brwjshd1pd1b0","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mocz00a0rwjsgc7wcfph"},{"post_id":"ckjs3moam003brwjshd1pd1b0","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mocz00a1rwjsbf4cauae"},{"post_id":"ckjs3moan003erwjs83eh0vfe","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mod100aarwjs3wkr6jnp"},{"post_id":"ckjs3moan003erwjs83eh0vfe","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mod200acrwjs86wy26z6"},{"post_id":"ckjs3moao003irwjsgvy18kp3","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mod400alrwjsampzf73h"},{"post_id":"ckjs3moao003irwjsgvy18kp3","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mod600anrwjs2kz9a6oz"},{"post_id":"ckjs3moap003mrwjs4g8zabg3","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mod700avrwjs28ew7ytv"},{"post_id":"ckjs3moap003mrwjs4g8zabg3","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mod700awrwjsaeby58fj"},{"post_id":"ckjs3moar003qrwjsbflwbzff","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3mod800b0rwjsceog17l4"},{"post_id":"ckjs3moar003qrwjsbflwbzff","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3mod900b1rwjs9syrbg2u"},{"post_id":"ckjs3moas003trwjs5k30do1p","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3moda00b6rwjs2f8z61xc"},{"post_id":"ckjs3moas003trwjs5k30do1p","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3moda00b7rwjs5eclh9ff"},{"post_id":"ckjs3moau003xrwjs9njc6bmd","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3modb00barwjsfrwg4q68"},{"post_id":"ckjs3moau003xrwjs9njc6bmd","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3modb00bcrwjs99rgedlr"},{"post_id":"ckjs3mocc006xrwjscvom5sgp","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"ckjs3modb00berwjs9isnhace"},{"post_id":"ckjs3mocc006xrwjscvom5sgp","category_id":"ckjs3moda00b9rwjs51gp87q9","_id":"ckjs3modc00bfrwjs1gr9b5ks"},{"post_id":"ckjs3moav0040rwjsbmkbd4j3","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3modc00bhrwjsdqu99sds"},{"post_id":"ckjs3moav0040rwjsbmkbd4j3","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3modc00birwjsd8fe6882"},{"post_id":"ckjs3moaw0044rwjs1k817cdg","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"ckjs3modc00bjrwjsaozechhz"},{"post_id":"ckjs3moaw0044rwjs1k817cdg","category_id":"ckjs3mocl0081rwjs7nykfec2","_id":"ckjs3modd00blrwjs5niu7gm5"},{"post_id":"ckjs3mobe004yrwjscq75an6j","category_id":"ckjs3mocj007rrwjs6hvh1etu","_id":"ckjs3modi00cbrwjs2u5j6nk5"},{"post_id":"ckjs3mobe004yrwjscq75an6j","category_id":"ckjs3modg00c4rwjs8p4d5hvr","_id":"ckjs3modi00ccrwjs07vhdtdo"},{"post_id":"ckjs3mobg0053rwjsgxnn08eb","category_id":"ckjs3mocj007rrwjs6hvh1etu","_id":"ckjs3modi00cdrwjs4blgbgbi"},{"post_id":"ckjs3mobg0053rwjsgxnn08eb","category_id":"ckjs3modg00c4rwjs8p4d5hvr","_id":"ckjs3modi00cfrwjs6uhhavb6"},{"post_id":"ckjs3mobg0055rwjsfmdt0n6n","category_id":"ckjs3mocj007rrwjs6hvh1etu","_id":"ckjs3modi00cgrwjs6vyjd6q8"},{"post_id":"ckjs3mobg0055rwjsfmdt0n6n","category_id":"ckjs3modi00carwjsexwlfyv1","_id":"ckjs3modj00cirwjsddbl4y5d"},{"post_id":"ckjs3mobi0059rwjs9kf3el1q","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modj00ckrwjseis9dse7"},{"post_id":"ckjs3mobi0059rwjs9kf3el1q","category_id":"ckjs3modi00cerwjs54i58whs","_id":"ckjs3modj00clrwjsfep6a7l5"},{"post_id":"ckjs3mobj005crwjs2t76et5h","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modk00cnrwjs1blu1gpz"},{"post_id":"ckjs3mobj005crwjs2t76et5h","category_id":"ckjs3modi00cerwjs54i58whs","_id":"ckjs3modk00corwjs2lt2945d"},{"post_id":"ckjs3mobk005frwjshp0ehdrh","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modk00cqrwjs14pxfmyu"},{"post_id":"ckjs3mobk005frwjshp0ehdrh","category_id":"ckjs3modi00cerwjs54i58whs","_id":"ckjs3modk00crrwjs7mfthf1q"},{"post_id":"ckjs3mobl005hrwjsbs8egeiw","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modl00ctrwjs7bus2yrl"},{"post_id":"ckjs3mobl005hrwjsbs8egeiw","category_id":"ckjs3modi00cerwjs54i58whs","_id":"ckjs3modl00curwjs22wuhx0q"},{"post_id":"ckjs3mobm005krwjs089g2mlx","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modl00cvrwjs68tfe4in"},{"post_id":"ckjs3mobm005krwjs089g2mlx","category_id":"ckjs3modi00cerwjs54i58whs","_id":"ckjs3modl00cxrwjs9onz17dt"},{"post_id":"ckjs3mobn005mrwjs0fle6ap4","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modm00czrwjsdyexeif4"},{"post_id":"ckjs3mobn005mrwjs0fle6ap4","category_id":"ckjs3modl00csrwjsc72y8d92","_id":"ckjs3modm00d0rwjs9j5vf611"},{"post_id":"ckjs3mobp005prwjs4mwagoqm","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modn00d2rwjs73yzh7ix"},{"post_id":"ckjs3mobp005prwjs4mwagoqm","category_id":"ckjs3modl00csrwjsc72y8d92","_id":"ckjs3modn00d3rwjsaxm8c1pc"},{"post_id":"ckjs3mobr005rrwjsbc086fhi","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modn00d4rwjsa5r8fk7t"},{"post_id":"ckjs3mobr005rrwjsbc086fhi","category_id":"ckjs3modl00csrwjsc72y8d92","_id":"ckjs3modo00d6rwjs06q73hs6"},{"post_id":"ckjs3mobs005urwjs2zys3quz","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modo00d8rwjs57vh3pd2"},{"post_id":"ckjs3mobs005urwjs2zys3quz","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modo00d9rwjs68n59ltj"},{"post_id":"ckjs3mobu005wrwjsa89y8d2l","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modo00dbrwjsefqn4ukj"},{"post_id":"ckjs3mobu005wrwjsa89y8d2l","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modp00dcrwjsdxnddl1z"},{"post_id":"ckjs3mobv005zrwjsassmcjr7","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modp00derwjsdrzi9ja2"},{"post_id":"ckjs3mobv005zrwjsassmcjr7","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modp00dfrwjs1req54ok"},{"post_id":"ckjs3mobz0061rwjsdfuyas4g","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modp00dhrwjse4kkf91a"},{"post_id":"ckjs3mobz0061rwjsdfuyas4g","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modq00dirwjsbns85ksf"},{"post_id":"ckjs3moc00063rwjsfzr8fvt3","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modq00dkrwjs5iqpbl98"},{"post_id":"ckjs3moc00063rwjsfzr8fvt3","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modq00dlrwjscety4kx3"},{"post_id":"ckjs3moc10066rwjs20si87tg","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modr00dnrwjsceoqg8zs"},{"post_id":"ckjs3moc10066rwjs20si87tg","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modr00dorwjs4xdmcunt"},{"post_id":"ckjs3moc30068rwjsef8na2ud","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modr00dqrwjshgnn1t6e"},{"post_id":"ckjs3moc30068rwjsef8na2ud","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3modr00drrwjs9klf9huj"},{"post_id":"ckjs3moc4006brwjs9jjrf0l6","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modr00dsrwjs7l0ba6zz"},{"post_id":"ckjs3moc4006brwjs9jjrf0l6","category_id":"ckjs3modm00d1rwjsb6dddum8","_id":"ckjs3mods00durwjs38vy4zpc"},{"post_id":"ckjs3moca006qrwjs92o389na","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modt00e2rwjsa5rf8avm"},{"post_id":"ckjs3moca006qrwjs92o389na","category_id":"ckjs3mods00dwrwjshson4qbh","_id":"ckjs3modt00e3rwjsb3t2afvw"},{"post_id":"ckjs3mocb006srwjsf24qancg","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3modt00e4rwjs4rwycunm"},{"post_id":"ckjs3mocb006srwjsf24qancg","category_id":"ckjs3mods00dwrwjshson4qbh","_id":"ckjs3modt00e5rwjs7uv49bkg"},{"post_id":"ckjs3modw00e8rwjsaot52hc5","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"ckjs3mody00ebrwjs9eql7mj2"},{"post_id":"ckjs3modw00e8rwjsaot52hc5","category_id":"ckjs3moda00b9rwjs51gp87q9","_id":"ckjs3mody00ecrwjshdyw4lvy"},{"post_id":"ckjs3moex00gqrwjs0w2h11qe","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mof700i4rwjs88rx0x0y"},{"post_id":"ckjs3moex00gqrwjs0w2h11qe","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mof800i6rwjs7cb09fb7"},{"post_id":"ckjs3moex00gqrwjs0w2h11qe","category_id":"ckjs3mof700i2rwjs3cmufybu","_id":"ckjs3mof800i7rwjs7pm47vms"},{"post_id":"ckjs3moec00f3rwjscom3hjcg","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mof800i9rwjselv0faug"},{"post_id":"ckjs3moec00f3rwjscom3hjcg","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mof900iarwjshq8x4x1x"},{"post_id":"ckjs3moec00f3rwjscom3hjcg","category_id":"ckjs3mof700i3rwjsfjcuckam","_id":"ckjs3mof900icrwjs7z9vfnpm"},{"post_id":"ckjs3moey00gurwjsdyw5b2an","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mof900idrwjseenn82tm"},{"post_id":"ckjs3moey00gurwjsdyw5b2an","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofa00ifrwjs5s9r4rxt"},{"post_id":"ckjs3moey00gurwjsdyw5b2an","category_id":"ckjs3mof700i5rwjsdhog3f2z","_id":"ckjs3mofa00igrwjs3rfl2so4"},{"post_id":"ckjs3moez00gyrwjsatol5dhr","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofa00iirwjs4hhmc52o"},{"post_id":"ckjs3moez00gyrwjsatol5dhr","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofa00ijrwjs5h259jzu"},{"post_id":"ckjs3moez00gyrwjsatol5dhr","category_id":"ckjs3mof700i5rwjsdhog3f2z","_id":"ckjs3mofb00ilrwjs49650gyb"},{"post_id":"ckjs3moed00f5rwjs7i1y0ld3","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofb00imrwjs8yv32h2r"},{"post_id":"ckjs3moed00f5rwjs7i1y0ld3","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofb00iorwjs8vt3047l"},{"post_id":"ckjs3moed00f5rwjs7i1y0ld3","category_id":"ckjs3mof700i3rwjsfjcuckam","_id":"ckjs3mofb00iprwjs0sd6agmi"},{"post_id":"ckjs3moee00farwjs28r0cs9c","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofc00irrwjs2f2sfwx4"},{"post_id":"ckjs3moee00farwjs28r0cs9c","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofc00isrwjs9ak85zix"},{"post_id":"ckjs3moee00farwjs28r0cs9c","category_id":"ckjs3mof700i3rwjsfjcuckam","_id":"ckjs3mofc00iurwjsd8f491p0"},{"post_id":"ckjs3moef00fdrwjsffyj4w8x","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofc00ivrwjs3nbp0txc"},{"post_id":"ckjs3moef00fdrwjsffyj4w8x","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofd00ixrwjs7u248dgd"},{"post_id":"ckjs3moef00fdrwjsffyj4w8x","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofd00iyrwjs3ff35vtv"},{"post_id":"ckjs3moeh00fhrwjs08v367de","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofd00j0rwjs3bs9evxi"},{"post_id":"ckjs3moeh00fhrwjs08v367de","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofd00j1rwjs09qk1dby"},{"post_id":"ckjs3moeh00fhrwjs08v367de","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofe00j3rwjshfm8dukw"},{"post_id":"ckjs3moei00flrwjsarvq28cx","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofe00j4rwjs3y5l365e"},{"post_id":"ckjs3moei00flrwjsarvq28cx","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3moff00j6rwjs5gcfbt4p"},{"post_id":"ckjs3moei00flrwjsarvq28cx","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3moff00j7rwjsg8lrciq4"},{"post_id":"ckjs3moej00fprwjs5o53he0j","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3moff00j9rwjs6e0qg7sg"},{"post_id":"ckjs3moej00fprwjs5o53he0j","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofg00jarwjs1v8tco3n"},{"post_id":"ckjs3moej00fprwjs5o53he0j","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofg00jcrwjsgz327n7i"},{"post_id":"ckjs3moel00ftrwjsgxubcpyk","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofg00jdrwjshaiebdi1"},{"post_id":"ckjs3moel00ftrwjsgxubcpyk","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofh00jfrwjs1w6t560t"},{"post_id":"ckjs3moel00ftrwjsgxubcpyk","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofh00jgrwjs22l6aopq"},{"post_id":"ckjs3moen00fxrwjs97bf8wmr","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofh00jirwjs4r1q6awc"},{"post_id":"ckjs3moen00fxrwjs97bf8wmr","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofh00jjrwjsaznh0lxb"},{"post_id":"ckjs3moen00fxrwjs97bf8wmr","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofi00jkrwjs5tsl59s5"},{"post_id":"ckjs3moeo00g0rwjs3nbgfxll","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00jlrwjs5ckv1prx"},{"post_id":"ckjs3moeo00g0rwjs3nbgfxll","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00jmrwjscpd90pi5"},{"post_id":"ckjs3moeo00g0rwjs3nbgfxll","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofi00jnrwjsgeh07r6g"},{"post_id":"ckjs3moeq00g4rwjs68ew88by","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00jorwjs87qg0k0i"},{"post_id":"ckjs3moeq00g4rwjs68ew88by","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00jprwjscy4x6s4q"},{"post_id":"ckjs3moeq00g4rwjs68ew88by","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofi00jqrwjsh549gu5z"},{"post_id":"ckjs3moer00g7rwjs3i0lgi0c","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00jrrwjs3zdc6hxa"},{"post_id":"ckjs3moer00g7rwjs3i0lgi0c","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00jsrwjs1t1x75wp"},{"post_id":"ckjs3moer00g7rwjs3i0lgi0c","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofi00jtrwjsh52weywf"},{"post_id":"ckjs3moes00gbrwjsequpehgj","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00jurwjsah621779"},{"post_id":"ckjs3moes00gbrwjsequpehgj","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00jvrwjse496hgaa"},{"post_id":"ckjs3moes00gbrwjsequpehgj","category_id":"ckjs3mof700i2rwjs3cmufybu","_id":"ckjs3mofi00jwrwjs55xed9pl"},{"post_id":"ckjs3moet00gerwjsb48c9f2p","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00jxrwjs640dfk4q"},{"post_id":"ckjs3moet00gerwjsb48c9f2p","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00jyrwjsfmb6fsrz"},{"post_id":"ckjs3moet00gerwjsb48c9f2p","category_id":"ckjs3mof700i2rwjs3cmufybu","_id":"ckjs3mofi00jzrwjsdfqsgerr"},{"post_id":"ckjs3moeu00gjrwjs465ac1y0","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00k0rwjs9w6ag8h9"},{"post_id":"ckjs3moeu00gjrwjs465ac1y0","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00k1rwjsc9pv1bdz"},{"post_id":"ckjs3moeu00gjrwjs465ac1y0","category_id":"ckjs3mofa00ihrwjs4s7scn2c","_id":"ckjs3mofi00k2rwjs1t0e4msm"},{"post_id":"ckjs3moev00gmrwjsa5hv321b","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3mofi00k3rwjs8js1c88i"},{"post_id":"ckjs3moev00gmrwjsa5hv321b","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3mofi00k4rwjs3gz91rxn"},{"post_id":"ckjs3moev00gmrwjsa5hv321b","category_id":"ckjs3mof700i2rwjs3cmufybu","_id":"ckjs3mofi00k5rwjsb83k9cvm"},{"post_id":"ckjs3moc7006irwjse91vfvs9","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3oyx90001xcjsbbg81ujh"},{"post_id":"ckjs3moc7006irwjse91vfvs9","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3oyx90002xcjs0v1je9e0"},{"post_id":"ckjs3moc8006lrwjs554da0o2","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3q7nq0008xcjsblp9asp1"},{"post_id":"ckjs3moc8006lrwjs554da0o2","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3q7nr0009xcjsed9wawfp"},{"post_id":"ckjs3moc6006grwjsdg223m4x","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3qn9s000bxcjsgq716mgp"},{"post_id":"ckjs3moc6006grwjsdg223m4x","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3qn9s000cxcjsd4pxceq2"},{"post_id":"ckjs3moc9006nrwjsfmmbbnoo","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"ckjs3r3q9000excjsgei834a3"},{"post_id":"ckjs3moc9006nrwjsfmmbbnoo","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"ckjs3r3q9000fxcjscjue58si"},{"post_id":"cklp5nho800008sjs69def45i","category_id":"ckjs3mo8r000mrwjs96bla1i5","_id":"cklp5nhon00028sjs37tje1ck"},{"post_id":"cklp5nhov00048sjs1c86g08y","category_id":"ckjs3mo8r000mrwjs96bla1i5","_id":"cklp5nhpe000b8sjs9dlv4myx"},{"post_id":"cklp5nhpe000d8sjsgu571y37","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklp5nhpm000l8sjscfvl35k4"},{"post_id":"cklp5nhpe000d8sjsgu571y37","category_id":"cklp5nhpd000a8sjs0ltzcedr","_id":"cklp5nhpn000n8sjs663m4296"},{"post_id":"cklp5nhov00058sjs15xpglcw","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklp5nhpp000p8sjs5iwz8ifx"},{"post_id":"cklp5nhov00058sjs15xpglcw","category_id":"cklp5nhpd000a8sjs0ltzcedr","_id":"cklp5nhpp000r8sjsd1md1cmu"},{"post_id":"cklp5nhpb00078sjs9nzh98i7","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklp5nhpq000t8sjs25g97tdr"},{"post_id":"cklp5nhpb00078sjs9nzh98i7","category_id":"cklp5nhpd000a8sjs0ltzcedr","_id":"cklp5nhpq000u8sjsabzs0vhd"},{"post_id":"cklp5nhpm000m8sjsh506ffoq","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhpq000v8sjs2dxu0pti"},{"post_id":"cklp5nhpm000m8sjsh506ffoq","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"cklp5nhpq000w8sjsal500sk3"},{"post_id":"cklp5nhpn000o8sjse42tgdc1","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhpq000x8sjs4yi107am"},{"post_id":"cklp5nhpn000o8sjse42tgdc1","category_id":"ckjs3moex00gorwjs9vu15pcl","_id":"cklp5nhpq000y8sjsc6za5ly0"},{"post_id":"cklp5nhpu000z8sjs9b7zhxop","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhpx00158sjsh9gkgije"},{"post_id":"cklp5nhpu000z8sjs9b7zhxop","category_id":"ckjs3mods00dwrwjshson4qbh","_id":"cklp5nhpx00178sjshrhkellw"},{"post_id":"cklp5nhpu00108sjs0rkbgbq5","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"cklp5nhpy001a8sjs09wpfkjh"},{"post_id":"cklp5nhpu00108sjs0rkbgbq5","category_id":"cklp5nhpw00148sjs0ddmezvb","_id":"cklp5nhpy001b8sjs3nyyh56h"},{"post_id":"cklp5nhpv00128sjs9e2b7m2d","category_id":"ckjs3mo8w0015rwjsauerde30","_id":"cklp5nhpy001c8sjs7q4ydab9"},{"post_id":"cklp5nhpv00128sjs9e2b7m2d","category_id":"cklp5nhpw00148sjs0ddmezvb","_id":"cklp5nhpy001d8sjs0z17flal"},{"post_id":"cklp5nhq2001e8sjsdx93abx2","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhq6001l8sjs16qx5n8i"},{"post_id":"cklp5nhq2001e8sjsdx93abx2","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhq8001o8sjs0z2l5yii"},{"post_id":"cklp5nhq2001e8sjsdx93abx2","category_id":"ckjz9iigs00026cjs7w885zmz","_id":"cklp5nhq9001r8sjs58db3bez"},{"post_id":"cklp5nhq3001f8sjs95lead7d","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqb001v8sjs5ntgccqi"},{"post_id":"cklp5nhq3001f8sjs95lead7d","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqc001z8sjs4rvh5r7z"},{"post_id":"cklp5nhq3001f8sjs95lead7d","category_id":"ckjz9iigs00026cjs7w885zmz","_id":"cklp5nhqe00228sjsebtoav95"},{"post_id":"cklp5nhq5001k8sjs79ricvdq","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqf00268sjs6d90226r"},{"post_id":"cklp5nhq5001k8sjs79ricvdq","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqi00298sjsdk8fa5w8"},{"post_id":"cklp5nhq5001k8sjs79ricvdq","category_id":"ckjz9iigs00026cjs7w885zmz","_id":"cklp5nhqj002c8sjs3sexhpot"},{"post_id":"cklp5nhq8001p8sjsdej0haku","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqk002f8sjshhw4a2jn"},{"post_id":"cklp5nhq8001p8sjsdej0haku","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqm002i8sjse6pqfu51"},{"post_id":"cklp5nhq8001p8sjsdej0haku","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqo002l8sjsa083f7s6"},{"post_id":"cklp5nhq4001h8sjsf3bz96ra","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqp002o8sjs9hdz5bes"},{"post_id":"cklp5nhq4001h8sjsf3bz96ra","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqq002q8sjs50j3fvlr"},{"post_id":"cklp5nhq4001h8sjsf3bz96ra","category_id":"cklp5nhq7001n8sjs759vacl9","_id":"cklp5nhqq002s8sjsfbuiacyy"},{"post_id":"cklp5nhq9001t8sjsd3k54c5b","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqr002u8sjs8va96ykw"},{"post_id":"cklp5nhq9001t8sjsd3k54c5b","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqr002w8sjsaes8ezew"},{"post_id":"cklp5nhq9001t8sjsd3k54c5b","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqr002y8sjs9enhdybv"},{"post_id":"cklp5nhqb001x8sjs4u0s9u6j","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqr00308sjsfnlk023q"},{"post_id":"cklp5nhqb001x8sjs4u0s9u6j","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqr00328sjs5uet2ud2"},{"post_id":"cklp5nhqb001x8sjs4u0s9u6j","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqr00338sjsci8ibyjv"},{"post_id":"cklp5nhq6001m8sjse93c4rot","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqs00348sjsd7ef8ip4"},{"post_id":"cklp5nhq6001m8sjse93c4rot","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqs00358sjsg83h3ee6"},{"post_id":"cklp5nhq6001m8sjse93c4rot","category_id":"cklp5nhq7001n8sjs759vacl9","_id":"cklp5nhqs00368sjs36enc7t1"},{"post_id":"cklp5nhqd00218sjs7d8a3ewl","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqs00378sjs5hzhdiny"},{"post_id":"cklp5nhqd00218sjs7d8a3ewl","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqs00388sjscozo94d2"},{"post_id":"cklp5nhqd00218sjs7d8a3ewl","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqs00398sjsh66b87bc"},{"post_id":"cklp5nhqe00248sjsdjwu8pwp","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqs003a8sjsb2te53rb"},{"post_id":"cklp5nhqe00248sjsdjwu8pwp","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqs003b8sjs0nj432nz"},{"post_id":"cklp5nhqe00248sjsdjwu8pwp","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqs003c8sjsarwyd7ja"},{"post_id":"cklp5nhqg00288sjs32uj6izs","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqs003d8sjs81vddi0e"},{"post_id":"cklp5nhqg00288sjs32uj6izs","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqs003e8sjs7hkj2h5m"},{"post_id":"cklp5nhqg00288sjs32uj6izs","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqs003f8sjs3xgtetyy"},{"post_id":"cklp5nhqi002b8sjs3qhtc5rs","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqs003g8sjs6jan4bqo"},{"post_id":"cklp5nhqi002b8sjs3qhtc5rs","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqt003h8sjs0qhg2ama"},{"post_id":"cklp5nhqi002b8sjs3qhtc5rs","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqt003i8sjsd6txbk50"},{"post_id":"cklp5nhqj002e8sjsgdxm2sl0","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqt003j8sjscmwhci8p"},{"post_id":"cklp5nhqj002e8sjsgdxm2sl0","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqt003k8sjsfvgsg2sd"},{"post_id":"cklp5nhqj002e8sjsgdxm2sl0","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqt003l8sjs8q8d1ebb"},{"post_id":"cklp5nhql002h8sjs359q879b","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqt003m8sjs10l990h9"},{"post_id":"cklp5nhql002h8sjs359q879b","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqt003n8sjsa2qrhhkr"},{"post_id":"cklp5nhql002h8sjs359q879b","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqt003o8sjsbez5e0eu"},{"post_id":"cklp5nhqm002k8sjs4co82wgm","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqt003p8sjshd5n6nzo"},{"post_id":"cklp5nhqm002k8sjs4co82wgm","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqt003q8sjs41quf82l"},{"post_id":"cklp5nhqm002k8sjs4co82wgm","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqt003r8sjshlel8ca1"},{"post_id":"cklp5nhqo002n8sjsfcdyg9pl","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhqt003s8sjs38p1hnhr"},{"post_id":"cklp5nhqo002n8sjsfcdyg9pl","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhqt003t8sjs73ckebij"},{"post_id":"cklp5nhqo002n8sjsfcdyg9pl","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhqt003u8sjs31q33ghu"},{"post_id":"cklp5nhqz003w8sjs7jvt0h85","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklp5nhr1003y8sjshbl82li4"},{"post_id":"cklp5nhqz003w8sjs7jvt0h85","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklp5nhr1003z8sjs36sjfjh4"},{"post_id":"cklp5nhqz003w8sjs7jvt0h85","category_id":"ckjs3moea00ewrwjs0lr5a331","_id":"cklp5nhr100408sjsh59w1zjq"},{"post_id":"cklp5nhpd00098sjsb9nqc4r7","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpbt6kz0004d8js6rqpaix6"},{"post_id":"cklp5nhpd00098sjsb9nqc4r7","category_id":"cklpbt6ku0002d8js3mrv54si","_id":"cklpbt6kz0005d8js7nz5590p"},{"post_id":"cklp5nhpk000i8sjs7ot2ag0o","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpc1w3n0007vsjs89hqfa2d"},{"post_id":"cklp5nhpk000i8sjs7ot2ag0o","category_id":"cklpc1w0r0001vsjs9wvp90uc","_id":"cklpc1w3p0009vsjs0ffngqmq"},{"post_id":"cklp5nhpl000k8sjs7yo6dzr6","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpc1w3q000avsjsg0be7yid"},{"post_id":"cklp5nhpl000k8sjs7yo6dzr6","category_id":"cklpc1w0r0001vsjs9wvp90uc","_id":"cklpc1w3r000cvsjs3fsgg8xz"},{"post_id":"cklp5nhpf000f8sjsda1rfj1q","category_id":"ckjs3mobf0051rwjs02mc22sb","_id":"cklpc1w3s000dvsjs2abmeimb"},{"post_id":"cklp5nhpf000f8sjsda1rfj1q","category_id":"cklpc1w0r0001vsjs9wvp90uc","_id":"cklpc1w3s000evsjsfvx1gk3g"},{"post_id":"cklp5nhqv003v8sjs5n226eb7","category_id":"ckjs3mocm0084rwjs3uak2tci","_id":"cklpc1w40000hvsjs3zfm7gzf"},{"post_id":"cklp5nhqv003v8sjs5n226eb7","category_id":"ckjs3moe400ehrwjsci1l19ug","_id":"cklpc1w40000ivsjsbpif4z1u"},{"post_id":"cklp5nhqv003v8sjs5n226eb7","category_id":"cklpc1w3x000gvsjs7vpmavdy","_id":"cklpc1w40000jvsjs0wqj2mg3"}],"PostTag":[{"post_id":"ckjs3mo7q0004rwjsaje34z0o","tag_id":"ckjs3mo7v0007rwjs08zy90s3","_id":"ckjs3mo8n000drwjs20f4ek0m"},{"post_id":"ckjs3mo7t0005rwjs9mu49lsa","tag_id":"ckjs3mo7z000crwjsellygz3c","_id":"ckjs3mo8q000krwjshkpl1fxv"},{"post_id":"ckjs3mo7w0008rwjs5dlo6tgg","tag_id":"ckjs3mo7z000crwjsellygz3c","_id":"ckjs3mo8s000rrwjs490yac4p"},{"post_id":"ckjs3mo7x0009rwjsdnfe5sil","tag_id":"ckjs3mo8r000orwjs628ucpcg","_id":"ckjs3mo8u000wrwjsai3fgemo"},{"post_id":"ckjs3mo7y000arwjs0ufa3ww7","tag_id":"ckjs3mo8t000urwjsfxfehg0u","_id":"ckjs3mo8v0010rwjsg9zgf9pc"},{"post_id":"ckjs3mo8o000frwjs7f8cc89b","tag_id":"ckjs3mo8v0013rwjs7bza6nl1","_id":"ckjs3mo8x001brwjsew9cg9eg"},{"post_id":"ckjs3mo8o000frwjs7f8cc89b","tag_id":"ckjs3mo8w0017rwjse9qffll8","_id":"ckjs3mo8y001drwjs6ti17c76"},{"post_id":"ckjs3mo8q000jrwjs7i54ao3m","tag_id":"ckjs3mo8x001arwjs7zl2d2t1","_id":"ckjs3mo8y001grwjs5frn71tn"},{"post_id":"ckjs3mo8r000lrwjs3be3dr8k","tag_id":"ckjs3mo8x001arwjs7zl2d2t1","_id":"ckjs3mo8z001hrwjsaeun3ajt"},{"post_id":"ckjs3mo9d001irwjsfyu4apx9","tag_id":"ckjs3mo9e001jrwjsdgy3cu4k","_id":"ckjs3mo9f001lrwjsf239eejx"},{"post_id":"ckjs3mo9w001rrwjs3pd8hmaz","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3mo9y001vrwjsetni0g3g"},{"post_id":"ckjs3mo9t001mrwjs0qikh2zw","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3mo9z001xrwjs857s1vtv"},{"post_id":"ckjs3mo9x001srwjsed3q5zqu","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3moa00021rwjs5p2f4598"},{"post_id":"ckjs3mo9y001wrwjs89bh4jij","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3moa10023rwjs58gb5vge"},{"post_id":"ckjs3mo9u001nrwjsajs23d9z","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3moa50027rwjse4g0d2xz"},{"post_id":"ckjs3mo9z001yrwjs594p6gof","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3moa60029rwjs63vkhof2"},{"post_id":"ckjs3mo9v001qrwjs5hj4hmnr","tag_id":"ckjs3mo9v001prwjs1gis0uce","_id":"ckjs3moa7002crwjsg9f70xxv"},{"post_id":"ckjs3moa00022rwjs7zwmbs8l","tag_id":"ckjs3moa50026rwjsefb9331u","_id":"ckjs3moab002mrwjs4z7j9f50"},{"post_id":"ckjs3moa00022rwjs7zwmbs8l","tag_id":"ckjs3moa8002erwjs29db1irp","_id":"ckjs3moad002qrwjs3kdt371d"},{"post_id":"ckjs3moa20024rwjscg5o53l5","tag_id":"ckjs3moa50026rwjsefb9331u","_id":"ckjs3moai0030rwjs5bla1bja"},{"post_id":"ckjs3moa20024rwjscg5o53l5","tag_id":"ckjs3moa8002erwjs29db1irp","_id":"ckjs3moak0034rwjs9by6frak"},{"post_id":"ckjs3moa50028rwjsauvc6uqd","tag_id":"ckjs3moa50026rwjsefb9331u","_id":"ckjs3moal0038rwjsf27lcm48"},{"post_id":"ckjs3moa6002arwjsbxhzcs4m","tag_id":"ckjs3moa50026rwjsefb9331u","_id":"ckjs3moan003frwjsd2an3fjm"},{"post_id":"ckjs3moa6002arwjsbxhzcs4m","tag_id":"ckjs3moa8002erwjs29db1irp","_id":"ckjs3moap003jrwjsckjcdnaj"},{"post_id":"ckjs3moa7002drwjs4p1kg1ev","tag_id":"ckjs3moam003crwjs4juud6fg","_id":"ckjs3moaq003nrwjsc0h2aaen"},{"post_id":"ckjs3moa8002frwjs6nww7zlz","tag_id":"ckjs3moam003crwjs4juud6fg","_id":"ckjs3moat003urwjsck4wd6xy"},{"post_id":"ckjs3moa9002irwjs2hha8w50","tag_id":"ckjs3moam003crwjs4juud6fg","_id":"ckjs3moaw0041rwjs2kyj620k"},{"post_id":"ckjs3moab002lrwjshnohht8r","tag_id":"ckjs3moav003yrwjs1sk1fr3n","_id":"ckjs3mob20048rwjs834d02iu"},{"post_id":"ckjs3moac002prwjs61mc2tpg","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mob4004grwjs4ww09hfk"},{"post_id":"ckjs3moae002trwjs9yv64sqk","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mob7004mrwjsel702jhb"},{"post_id":"ckjs3moag002wrwjs9tnzcupg","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3moba004trwjshxezb722"},{"post_id":"ckjs3moai002zrwjs07ie2jr8","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobf0050rwjs4hbp39de"},{"post_id":"ckjs3moaj0033rwjs02ku9k5s","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobi0057rwjsdx16gcv8"},{"post_id":"ckjs3moak0037rwjsgzq63152","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobk005erwjs6ze98ugy"},{"post_id":"ckjs3moam003brwjshd1pd1b0","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobm005jrwjsewg7ekco"},{"post_id":"ckjs3moan003erwjs83eh0vfe","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobp005orwjs9eiv143t"},{"post_id":"ckjs3moao003irwjsgvy18kp3","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobs005trwjs040hdr6g"},{"post_id":"ckjs3moap003mrwjs4g8zabg3","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3mobv005yrwjs1r9re8tj"},{"post_id":"ckjs3moar003qrwjsbflwbzff","tag_id":"ckjs3mobu005xrwjscv6yfovw","_id":"ckjs3moc00064rwjsf7s684rn"},{"post_id":"ckjs3moas003trwjs5k30do1p","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3moc40069rwjshhig5l1j"},{"post_id":"ckjs3moau003xrwjs9njc6bmd","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3moc6006erwjs1gchd1p8"},{"post_id":"ckjs3moav0040rwjsbmkbd4j3","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3moc8006jrwjsa1gl75yg"},{"post_id":"ckjs3moaw0044rwjs1k817cdg","tag_id":"ckjs3moay0046rwjs0tnjbrn6","_id":"ckjs3moc9006orwjs7gtzafix"},{"post_id":"ckjs3mobe004yrwjscq75an6j","tag_id":"ckjs3moch007frwjs88c94szl","_id":"ckjs3moci007krwjs4cjf5gdg"},{"post_id":"ckjs3mobg0053rwjsgxnn08eb","tag_id":"ckjs3moch007frwjs88c94szl","_id":"ckjs3moci007nrwjs7jdo012y"},{"post_id":"ckjs3mobg0055rwjsfmdt0n6n","tag_id":"ckjs3moci007lrwjs5yhv53wi","_id":"ckjs3mocj007qrwjs69asd9w9"},{"post_id":"ckjs3mobi0059rwjs9kf3el1q","tag_id":"ckjs3moci007orwjs5zm84bj5","_id":"ckjs3mocj007trwjs0q9hfklp"},{"post_id":"ckjs3mobj005crwjs2t76et5h","tag_id":"ckjs3moci007orwjs5zm84bj5","_id":"ckjs3mock007wrwjsde1w3gqe"},{"post_id":"ckjs3mobk005frwjshp0ehdrh","tag_id":"ckjs3moci007orwjs5zm84bj5","_id":"ckjs3mocl007zrwjs729kah1j"},{"post_id":"ckjs3mobl005hrwjsbs8egeiw","tag_id":"ckjs3moci007orwjs5zm84bj5","_id":"ckjs3mocl0082rwjsfr6q4hzx"},{"post_id":"ckjs3mobm005krwjs089g2mlx","tag_id":"ckjs3moci007orwjs5zm84bj5","_id":"ckjs3mocm0085rwjs3p5u2fw1"},{"post_id":"ckjs3mobn005mrwjs0fle6ap4","tag_id":"ckjs3mocl0083rwjs1ms1dvlj","_id":"ckjs3mocn0089rwjs12oeeu3e"},{"post_id":"ckjs3mobp005prwjs4mwagoqm","tag_id":"ckjs3mocl0083rwjs1ms1dvlj","_id":"ckjs3mocn008drwjsdi0z8pwq"},{"post_id":"ckjs3mobr005rrwjsbc086fhi","tag_id":"ckjs3mocl0083rwjs1ms1dvlj","_id":"ckjs3moco008grwjs07uocvna"},{"post_id":"ckjs3mobs005urwjs2zys3quz","tag_id":"ckjs3moco008erwjs4lk59xfk","_id":"ckjs3mocp008krwjs4u9v2h4k"},{"post_id":"ckjs3mobu005wrwjsa89y8d2l","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3mocp008orwjsbkhnfsgo"},{"post_id":"ckjs3mobv005zrwjsassmcjr7","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3mocq008rrwjs42gzbmxa"},{"post_id":"ckjs3mobz0061rwjsdfuyas4g","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3mocr008vrwjs1qe65r12"},{"post_id":"ckjs3moc00063rwjsfzr8fvt3","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3mocs008zrwjs2w8p5h53"},{"post_id":"ckjs3moc10066rwjs20si87tg","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3mocs0092rwjsbky2fyxx"},{"post_id":"ckjs3moc30068rwjsef8na2ud","tag_id":"ckjs3moco008hrwjs4cbkf4jg","_id":"ckjs3moct0096rwjsbr7y7u9z"},{"post_id":"ckjs3moc4006brwjs9jjrf0l6","tag_id":"ckjs3moco008erwjs4lk59xfk","_id":"ckjs3mocu009arwjsh4pk5yyf"},{"post_id":"ckjs3moc8006lrwjs554da0o2","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mocx009trwjs5np8hamv"},{"post_id":"ckjs3moc8006lrwjs554da0o2","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"ckjs3mocy009urwjsezcf7dum"},{"post_id":"ckjs3moc9006nrwjsfmmbbnoo","tag_id":"ckjs3mocu009crwjsa41r9jya","_id":"ckjs3mocy009xrwjs9drmdggf"},{"post_id":"ckjs3moca006qrwjs92o389na","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"ckjs3mod000a4rwjsdxwxfs72"},{"post_id":"ckjs3moca006qrwjs92o389na","tag_id":"ckjs3mocy009yrwjs03mzhxen","_id":"ckjs3mod000a5rwjs21vlaoyx"},{"post_id":"ckjs3mocb006srwjsf24qancg","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"ckjs3mod100abrwjsez9725ss"},{"post_id":"ckjs3mocb006srwjsf24qancg","tag_id":"ckjs3mocy009yrwjs03mzhxen","_id":"ckjs3mod200adrwjs9nzx9c81"},{"post_id":"ckjs3mocc006xrwjscvom5sgp","tag_id":"ckjs3mod300agrwjsfs2c4f8n","_id":"ckjs3mod600aqrwjsaxbm15dj"},{"post_id":"ckjs3mocc006xrwjscvom5sgp","tag_id":"ckjs3mod400akrwjsfzgt3igc","_id":"ckjs3mod700arrwjsdqjf34zc"},{"post_id":"ckjs3modw00e8rwjsaot52hc5","tag_id":"ckjs3mod300agrwjsfs2c4f8n","_id":"ckjs3mody00e9rwjscrdgcz7m"},{"post_id":"ckjs3modw00e8rwjsaot52hc5","tag_id":"ckjs3mod400akrwjsfzgt3igc","_id":"ckjs3mody00earwjs0f66hf9l"},{"post_id":"ckjs3moef00fdrwjsffyj4w8x","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moei00fkrwjsal3u75jd"},{"post_id":"ckjs3moec00f3rwjscom3hjcg","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moej00forwjs2bn24psr"},{"post_id":"ckjs3moec00f3rwjscom3hjcg","tag_id":"ckjs3moee00f8rwjsfdw13wiu","_id":"ckjs3moel00fsrwjs0km1exqq"},{"post_id":"ckjs3moeh00fhrwjs08v367de","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moen00fwrwjsauco7mgq"},{"post_id":"ckjs3moei00flrwjsarvq28cx","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moeo00fzrwjs9m6l7bxu"},{"post_id":"ckjs3moed00f5rwjs7i1y0ld3","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moep00g3rwjsh60d7u75"},{"post_id":"ckjs3moed00f5rwjs7i1y0ld3","tag_id":"ckjs3moee00f8rwjsfdw13wiu","_id":"ckjs3moer00g6rwjs4f7c0qze"},{"post_id":"ckjs3moej00fprwjs5o53he0j","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moes00garwjs3oe7b2ji"},{"post_id":"ckjs3moel00ftrwjsgxubcpyk","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moet00gdrwjsg4024oxg"},{"post_id":"ckjs3moee00farwjs28r0cs9c","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moeu00girwjsfxad2c6l"},{"post_id":"ckjs3moee00farwjs28r0cs9c","tag_id":"ckjs3moee00f8rwjsfdw13wiu","_id":"ckjs3moev00glrwjs2bgve4pb"},{"post_id":"ckjs3moen00fxrwjs97bf8wmr","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moex00gprwjsgqj55awm"},{"post_id":"ckjs3moeo00g0rwjs3nbgfxll","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moey00gtrwjs9rcg7p8i"},{"post_id":"ckjs3moeq00g4rwjs68ew88by","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3moez00gwrwjs995q96qf"},{"post_id":"ckjs3moer00g7rwjs3i0lgi0c","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mof000h1rwjsbcv21gfv"},{"post_id":"ckjs3moeu00gjrwjs465ac1y0","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mof000h3rwjse1rocnvu"},{"post_id":"ckjs3moes00gbrwjsequpehgj","tag_id":"ckjs3moet00ghrwjs2wkn1nuw","_id":"ckjs3mof100h6rwjs0l6ahtww"},{"post_id":"ckjs3moex00gqrwjs0w2h11qe","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mof100h8rwjsc9vy4qr4"},{"post_id":"ckjs3moey00gurwjsdyw5b2an","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mof100hbrwjsa2zw3k34"},{"post_id":"ckjs3moet00gerwjsb48c9f2p","tag_id":"ckjs3moex00grrwjsatng2ud1","_id":"ckjs3mof100hdrwjs1hu90mwz"},{"post_id":"ckjs3moez00gyrwjsatol5dhr","tag_id":"ckjs3mocw009krwjs9qjc1ed7","_id":"ckjs3mof200hgrwjs86ov0yn2"},{"post_id":"ckjs3moev00gmrwjsa5hv321b","tag_id":"ckjs3mof000gzrwjs5iho1f2b","_id":"ckjs3mof200hirwjsetji8li6"},{"post_id":"ckjs3moc7006irwjse91vfvs9","tag_id":"ckjs3oyx80000xcjs612eekbz","_id":"ckjs3oyx90003xcjschag4ssc"},{"post_id":"ckjs3moc6006grwjsdg223m4x","tag_id":"ckjs3qn9q000axcjs7mcv5xdl","_id":"ckjs3qn9t000dxcjs1i0qb6vz"},{"post_id":"ckjs3moc9006nrwjsfmmbbnoo","tag_id":"ckjs3qn9q000axcjs7mcv5xdl","_id":"ckjs3r9vw000gxcjsfl78dinn"},{"post_id":"ckjs3moc6006grwjsdg223m4x","tag_id":"ckjs3mocu009crwjsa41r9jya","_id":"ckjs3rh81000hxcjs5pmk1yjl"},{"post_id":"cklp5nho800008sjs69def45i","tag_id":"ckjs3mo8v000zrwjs2w1352tz","_id":"cklp5nhon00018sjscy6f33f3"},{"post_id":"cklp5nhov00058sjs15xpglcw","tag_id":"ckjs3moc9006mrwjsb8u632i5","_id":"cklp5nhpc00088sjs8a4naa36"},{"post_id":"cklp5nhpb00078sjs9nzh98i7","tag_id":"ckjs3moc9006mrwjsb8u632i5","_id":"cklp5nhpe000c8sjshro80awp"},{"post_id":"cklp5nhov00048sjs1c86g08y","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhpf000e8sjs4xabdavb"},{"post_id":"cklp5nhov00048sjs1c86g08y","tag_id":"cklp5nhow00068sjs9w357n21","_id":"cklp5nhpk000h8sjsge7b9xt1"},{"post_id":"cklp5nhpe000d8sjsgu571y37","tag_id":"ckjs3moc9006mrwjsb8u632i5","_id":"cklp5nhpl000j8sjs8ru9hn4f"},{"post_id":"cklp5nhpm000m8sjsh506ffoq","tag_id":"ckjs3pjt30004xcjsfc1m05bn","_id":"cklp5nhpp000q8sjscyfyg9t7"},{"post_id":"cklp5nhpn000o8sjse42tgdc1","tag_id":"ckjs3pjt30004xcjsfc1m05bn","_id":"cklp5nhpq000s8sjs62k10lnt"},{"post_id":"cklp5nhpu000z8sjs9b7zhxop","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"cklp5nhpv00118sjs6lvn2w6a"},{"post_id":"cklp5nhpu000z8sjs9b7zhxop","tag_id":"ckjs3mocy009yrwjs03mzhxen","_id":"cklp5nhpw00138sjs19u5anly"},{"post_id":"cklp5nhpu00108sjs0rkbgbq5","tag_id":"ckjs3mo8r000orwjs628ucpcg","_id":"cklp5nhpx00168sjs4xbxgh3l"},{"post_id":"cklp5nhpv00128sjs9e2b7m2d","tag_id":"ckjs3mo8r000orwjs628ucpcg","_id":"cklp5nhpx00188sjs9smv5v69"},{"post_id":"cklp5nhq2001e8sjsdx93abx2","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhq4001g8sjs6f46acad"},{"post_id":"cklp5nhq2001e8sjsdx93abx2","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"cklp5nhq5001j8sjs00ku2lf0"},{"post_id":"cklp5nhq3001f8sjs95lead7d","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhq9001s8sjsgcrp0z4t"},{"post_id":"cklp5nhq3001f8sjs95lead7d","tag_id":"cklp5nhq5001i8sjs1grshrhi","_id":"cklp5nhqb001w8sjshhm07dwi"},{"post_id":"cklp5nhq8001p8sjsdej0haku","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqc00208sjsfds2b5l2"},{"post_id":"cklp5nhq9001t8sjsd3k54c5b","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqe00238sjs7447934y"},{"post_id":"cklp5nhq4001h8sjsf3bz96ra","tag_id":"cklp5nhq9001q8sjs75d99de2","_id":"cklp5nhqg00278sjs6hpy0nqy"},{"post_id":"cklp5nhqb001x8sjs4u0s9u6j","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqi002a8sjs0vbxc2f1"},{"post_id":"cklp5nhqd00218sjs7d8a3ewl","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqj002d8sjs4upbg94t"},{"post_id":"cklp5nhq5001k8sjs79ricvdq","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhql002g8sjs8egufu5y"},{"post_id":"cklp5nhq5001k8sjs79ricvdq","tag_id":"cklp5nhqc001y8sjs75tngkru","_id":"cklp5nhqm002j8sjs0dxm6pcm"},{"post_id":"cklp5nhqe00248sjsdjwu8pwp","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqo002m8sjs8vfa12o0"},{"post_id":"cklp5nhqg00288sjs32uj6izs","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqp002p8sjs096shkem"},{"post_id":"cklp5nhq6001m8sjse93c4rot","tag_id":"cklp5nhq9001q8sjs75d99de2","_id":"cklp5nhqq002r8sjsanxq4twa"},{"post_id":"cklp5nhqi002b8sjs3qhtc5rs","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqq002t8sjs4fssb1wq"},{"post_id":"cklp5nhqj002e8sjsgdxm2sl0","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqr002v8sjs33375pqf"},{"post_id":"cklp5nhql002h8sjs359q879b","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqr002x8sjs7dubhgbt"},{"post_id":"cklp5nhqm002k8sjs4co82wgm","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqr002z8sjs57426xq4"},{"post_id":"cklp5nhqo002n8sjsfcdyg9pl","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhqr00318sjs1726aw23"},{"post_id":"cklp5nhqz003w8sjs7jvt0h85","tag_id":"ckjs3moe400efrwjs6hka0b51","_id":"cklp5nhr0003x8sjsaqkw3gj9"},{"post_id":"cklp5nhpd00098sjsb9nqc4r7","tag_id":"cklpbt6jr0001d8jsd9ff5zu5","_id":"cklpbt6ky0003d8jserd3dehb"},{"post_id":"cklp5nhpk000i8sjs7ot2ag0o","tag_id":"cklpc1w0b0000vsjsbhjm1eqy","_id":"cklpc1w3k0004vsjs8039d41t"},{"post_id":"cklp5nhpl000k8sjs7yo6dzr6","tag_id":"cklpc1w0b0000vsjsbhjm1eqy","_id":"cklpc1w3p0008vsjs7ajrg05d"},{"post_id":"cklp5nhpf000f8sjsda1rfj1q","tag_id":"cklpc1w0b0000vsjsbhjm1eqy","_id":"cklpc1w3r000bvsjsa69f2100"},{"post_id":"cklp5nhqv003v8sjs5n226eb7","tag_id":"ckjs3mocw009nrwjs2ppudapy","_id":"cklpc1w3x000fvsjs7usbgshd"}],"Tag":[{"name":"ArcGIS","_id":"ckjs3mo7v0007rwjs08zy90s3"},{"name":"QGis","_id":"ckjs3mo7z000crwjsellygz3c"},{"name":"Ubuntu","_id":"ckjs3mo8r000orwjs628ucpcg"},{"name":"latex","_id":"ckjs3mo8t000urwjsfxfehg0u"},{"name":"vim","_id":"ckjs3mo8v000zrwjs2w1352tz"},{"name":"matlab","_id":"ckjs3mo8v0013rwjs7bza6nl1"},{"name":"RS","_id":"ckjs3mo8w0017rwjse9qffll8"},{"name":"git","_id":"ckjs3mo8x001arwjs7zl2d2t1"},{"name":"conda","_id":"ckjs3mo9e001jrwjsdgy3cu4k"},{"name":"TensorFlow2","_id":"ckjs3mo9v001prwjs1gis0uce"},{"name":"机器学习","_id":"ckjs3moa50026rwjsefb9331u"},{"name":"sklearn","_id":"ckjs3moa8002erwjs29db1irp"},{"name":"6dof姿态估计","_id":"ckjs3moam003crwjs4juud6fg"},{"name":"语义分割","_id":"ckjs3moav003yrwjs1sk1fr3n"},{"name":"数据结构","_id":"ckjs3moay0046rwjs0tnjbrn6"},{"name":"算法","_id":"ckjs3mobu005xrwjscv6yfovw"},{"name":"计算机网络","_id":"ckjs3moc9006mrwjsb8u632i5"},{"name":"Linux","_id":"ckjs3mocd0070rwjs5jjb1obq"},{"name":"杂想","_id":"ckjs3moch007frwjs88c94szl"},{"name":"杂谈","_id":"ckjs3moci007lrwjs5yhv53wi"},{"name":"Android","_id":"ckjs3moci007orwjs5zm84bj5"},{"name":"前端样式","_id":"ckjs3mocl0083rwjs1ms1dvlj"},{"name":"前端","_id":"ckjs3moco008erwjs4lk59xfk"},{"name":"JavaScript","_id":"ckjs3moco008hrwjs4cbkf4jg"},{"name":"插件开发","_id":"ckjs3moct0099rwjseftgh06n"},{"name":"3D视觉","_id":"ckjs3mocu009crwjsa41r9jya"},{"name":"pygame","_id":"ckjs3mocv009grwjsh7fqbd5t"},{"name":"Python","_id":"ckjs3mocw009krwjs9qjc1ed7"},{"name":"数据库","_id":"ckjs3mocw009nrwjs2ppudapy"},{"name":"SQL","_id":"ckjs3mocy009yrwjs03mzhxen"},{"name":"Hexo","_id":"ckjs3mod300agrwjsfs2c4f8n"},{"name":"博客搭建","_id":"ckjs3mod400akrwjsfzgt3igc"},{"name":"Java","_id":"ckjs3moe400efrwjs6hka0b51"},{"name":"GUI","_id":"ckjs3moee00f8rwjsfdw13wiu"},{"name":"Numpy","_id":"ckjs3moet00ghrwjs2wkn1nuw"},{"name":"Pandas","_id":"ckjs3moex00grrwjsatng2ud1"},{"name":"matplotlib","_id":"ckjs3mof000gzrwjs5iho1f2b"},{"name":"Pygame","_id":"ckjs3oyx80000xcjs612eekbz"},{"name":"Blender","_id":"ckjs3pjt30004xcjsfc1m05bn"},{"name":"点云","_id":"ckjs3qn9q000axcjs7mcv5xdl"},{"name":"Java Web","_id":"ckjz9iigg00016cjs0rqx01sk"},{"name":"maven","_id":"cklp5nhow00068sjs9w357n21"},{"name":"Web","_id":"cklp5nhq5001i8sjs1grshrhi"},{"name":"JVM","_id":"cklp5nhq9001q8sjs75d99de2"},{"name":"服务器","_id":"cklp5nhqc001y8sjs75tngkru"},{"name":"操作系统","_id":"cklpbt6jr0001d8jsd9ff5zu5"},{"name":"设计模式","_id":"cklpc1w0b0000vsjsbhjm1eqy"}]}}